<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QKeyboardHandler Class</db:title>
<db:subtitle>Qt3DInput::QKeyboardHandler</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides keyboard event notification.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QKeyboardHandler</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3dinput)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3dinput)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3dinput</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qt3d-input-keyboardhandler.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3dcore-qcomponent.xml" xlink:role="class">Qt3DCore::QComponent</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="focus-prop">
<db:title>focus : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>focus</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">focus</db:synopsisinfo>
<db:synopsisinfo role="setter">setFocus</db:synopsisinfo>
<db:synopsisinfo role="notifier">focusChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds <db:code>true</db:code> if the QKeyboardHandlers has focus.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">focus</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3dinput-qkeyboardhandler.xml#setFocus">setFocus</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>focus</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">focusChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>focus</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sourceDevice-prop">
<db:title>sourceDevice : Qt3DInput::QKeyboardDevice*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt3DInput::QKeyboardDevice*</db:type>
<db:varname>sourceDevice</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sourceDevice</db:synopsisinfo>
<db:synopsisinfo role="setter">setSourceDevice</db:synopsisinfo>
<db:synopsisinfo role="notifier">sourceDeviceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the keyboard device of the <db:link xlink:href="qt3dinput-qkeyboardhandler.xml">QKeyboardHandler</db:link>. Without a valid device, the <db:link xlink:href="qt3dinput-qkeyboardhandler.xml">QKeyboardHandler</db:link> won't receive any event.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3dinput-qkeyboarddevice.xml">Qt3DInput::QKeyboardDevice</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qt3dinput-qkeyboardhandler.xml#sourceDevice">sourceDevice</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSourceDevice</db:emphasis>(<db:type><db:link xlink:href="qt3dinput-qkeyboarddevice.xml">Qt3DInput::QKeyboardDevice</db:link></db:type> *<db:emphasis>keyboardDevice</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sourceDeviceChanged</db:emphasis>(<db:type><db:link xlink:href="qt3dinput-qkeyboarddevice.xml">Qt3DInput::QKeyboardDevice</db:link></db:type> *<db:emphasis>keyboardDevice</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QKeyboardHandler">
<db:title>[explicit] QKeyboardHandler::QKeyboardHandler(Qt3DCore::QNode *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QKeyboardHandler</db:methodname>
<db:methodparam>
<db:type>Qt3DCore::QNode *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QKeyboardHandler(Qt3DCore::QNode *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qt3dinput-qkeyboardhandler.xml">QKeyboardHandler</db:link> instance with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="asteriskPressed">
<db:title>void QKeyboardHandler::asteriskPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>asteriskPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void asteriskPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the * key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="backPressed">
<db:title>void QKeyboardHandler::backPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>backPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void backPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the back key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="backtabPressed">
<db:title>void QKeyboardHandler::backtabPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>backtabPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void backtabPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the backtab key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="callPressed">
<db:title>void QKeyboardHandler::callPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>callPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void callPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the call key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="cancelPressed">
<db:title>void QKeyboardHandler::cancelPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cancelPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cancelPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the cancel key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="context1Pressed">
<db:title>void QKeyboardHandler::context1Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>context1Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void context1Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the context 1 key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="context2Pressed">
<db:title>void QKeyboardHandler::context2Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>context2Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void context2Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the context 2 key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="context3Pressed">
<db:title>void QKeyboardHandler::context3Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>context3Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void context3Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the context 2 key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="context4Pressed">
<db:title>void QKeyboardHandler::context4Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>context4Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void context4Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the context 4 key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="deletePressed">
<db:title>void QKeyboardHandler::deletePressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deletePressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deletePressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the delete key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="digit0Pressed">
<db:title>void QKeyboardHandler::digit0Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>digit0Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void digit0Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the 0 key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="digit1Pressed">
<db:title>void QKeyboardHandler::digit1Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>digit1Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void digit1Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the 1 key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="digit2Pressed">
<db:title>void QKeyboardHandler::digit2Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>digit2Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void digit2Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the 2 key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="digit3Pressed">
<db:title>void QKeyboardHandler::digit3Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>digit3Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void digit3Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the 3 key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="digit4Pressed">
<db:title>void QKeyboardHandler::digit4Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>digit4Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void digit4Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the 4 key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="digit5Pressed">
<db:title>void QKeyboardHandler::digit5Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>digit5Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void digit5Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the 5 key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="digit6Pressed">
<db:title>void QKeyboardHandler::digit6Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>digit6Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void digit6Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the 6 key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="digit7Pressed">
<db:title>void QKeyboardHandler::digit7Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>digit7Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void digit7Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the 7 key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="digit8Pressed">
<db:title>void QKeyboardHandler::digit8Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>digit8Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void digit8Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the 8 key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="digit9Pressed">
<db:title>void QKeyboardHandler::digit9Pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>digit9Pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void digit9Pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the 9 key is pressed with the event details being contained within <db:code role="parameter">event</db:code></db:para>
</db:section>
<db:section xml:id="downPressed">
<db:title>void QKeyboardHandler::downPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>downPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void downPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the down key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="enterPressed">
<db:title>void QKeyboardHandler::enterPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>enterPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void enterPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the enter key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="escapePressed">
<db:title>void QKeyboardHandler::escapePressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>escapePressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void escapePressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the escape key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="flipPressed">
<db:title>void QKeyboardHandler::flipPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>flipPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void flipPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the flip key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="hangupPressed">
<db:title>void QKeyboardHandler::hangupPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hangupPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hangupPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the hangup key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="leftPressed">
<db:title>void QKeyboardHandler::leftPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>leftPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void leftPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the left key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="menuPressed">
<db:title>void QKeyboardHandler::menuPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>menuPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void menuPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the menu key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="noPressed">
<db:title>void QKeyboardHandler::noPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>noPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void noPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the yes key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="numberSignPressed">
<db:title>void QKeyboardHandler::numberSignPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>numberSignPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void numberSignPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the number sign key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="pressed">
<db:title>void QKeyboardHandler::pressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="released">
<db:title>void QKeyboardHandler::released(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>released</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void released(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a key is released with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="returnPressed">
<db:title>void QKeyboardHandler::returnPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>returnPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void returnPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the return key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="rightPressed">
<db:title>void QKeyboardHandler::rightPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rightPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rightPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the right key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="selectPressed">
<db:title>void QKeyboardHandler::selectPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the select key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="setFocus">
<db:title>void QKeyboardHandler::setFocus(bool <db:emphasis>focus</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFocus</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>focus</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">focus</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFocus(bool focus)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the focus to <db:code role="parameter">focus</db:code>. If focus is not currently set to <db:code>true</db:code>, this component will receive keyboard focus.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3dinput-qkeyboardhandler.xml#focus-prop">focus</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dinput-qkeyboardhandler.xml#focus-prop">focus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceDevice">
<db:title>Qt3DInput::QKeyboardDevice *QKeyboardHandler::sourceDevice() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt3DInput::QKeyboardDevice *</db:type>
<db:methodname>sourceDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">sourceDevice</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt3DInput::QKeyboardDevice * sourceDevice() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current keyboard device.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qt3dinput-qkeyboardhandler.xml#sourceDevice-prop">sourceDevice</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dinput-qkeyboardhandler.xml#sourceDevice-prop">setSourceDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="spacePressed">
<db:title>void QKeyboardHandler::spacePressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>spacePressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void spacePressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the space key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="tabPressed">
<db:title>void QKeyboardHandler::tabPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>tabPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void tabPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the tab key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="upPressed">
<db:title>void QKeyboardHandler::upPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>upPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void upPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the up key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="volumeDownPressed">
<db:title>void QKeyboardHandler::volumeDownPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>volumeDownPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void volumeDownPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the volume down key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="volumeUpPressed">
<db:title>void QKeyboardHandler::volumeUpPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>volumeUpPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void volumeUpPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the volume up key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="yesPressed">
<db:title>void QKeyboardHandler::yesPressed(Qt3DInput::QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>yesPressed</db:methodname>
<db:methodparam>
<db:type>Qt3DInput::QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void yesPressed(Qt3DInput::QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the yes key is pressed with the event details being contained within <db:code role="parameter">event</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
