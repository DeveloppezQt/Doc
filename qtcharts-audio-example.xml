<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Audio Samples vs Sound Level</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows the drawing of microphone samples vs audio level.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_audio.png"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/dynamicwavform.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example's implementation is based on Widgets. See <db:link xlink:href="qtwidgets-tutorials-notepad-example.xml">Getting Started Programming with Qt Widgets</db:link> for information specific to that. The following sections cover how to use the Qt Charts API to display dynamic data on a samples vs sound level graph. For more information on sampling, see <db:link xlink:href="https://en.wikipedia.org/wiki/Sampling_(signal_processing)">Sampling_(signal_processing)</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="retrieving-the-audio-data">
<db:title>Retrieving the audio data</db:title>
<db:para>Thanks to the inclusion of the Qt Multimedia module in <db:code>main.cpp</db:code>, we create a new <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> that represents the default audio device of the target platform. We also check that we have an audio input device and let the user know if there is no input audio device available.</db:para>
<db:programlisting language="cpp">    if (inputDevice.isNull()) {
        QMessageBox::warning(nullptr, &quot;audio&quot;,
                             &quot;There is no audio input device available.&quot;);
        return -1;
    }
</db:programlisting>
<db:para>The audio device is then passed to Widget <db:code>w</db:code> using its constructor argument <db:code>w</db:code>. Then <db:code>w.show()</db:code> is called to display the widget.</db:para>
<db:programlisting language="cpp">    Widget w(inputDevice);
    w.resize(800, 600);
    w.show();
</db:programlisting>
</db:section>
<db:section xml:id="setting-up-the-chart">
<db:title>Setting up the chart</db:title>
<db:para>This section covers setting up the chart and axes.</db:para>
<db:para>In <db:code>widget.cpp</db:code>, the re-implemented Widget constructor does the heavy lifting when it comes to the application's logic. The <db:link xlink:href="qchart.xml">QChart</db:link>, <db:link xlink:href="qlineseries.xml">QLineSeries</db:link>, and <db:link xlink:href="qchartview.xml">QChartView</db:link> objects are declared as follows:</db:para>
<db:programlisting language="cpp">    : QWidget(parent)
    , m_chart(new QChart)
    , m_series(new QLineSeries)
{
    auto chartView = new QChartView(m_chart);
    m_chart-&amp;gt;addSeries(m_series);
</db:programlisting>
<db:para>m_series is for <db:link xlink:href="qtcharts-audio-example.xml#using-the-audio-input-data">Using the audio input data</db:link>.</db:para>
<db:section xml:id="the-x-axis-samples">
<db:title>The x-axis &quot;Samples&quot;</db:title>
<db:para>We set the min to max range on the x-axis from 0 to the XYSeriesIODevice::sampleCount. (Declared in xyseriesiodevice.h as 2000). We then set its title text.</db:para>
<db:programlisting language="cpp">    auto axisX = new QValueAxis;
    axisX-&amp;gt;setRange(0, XYSeriesIODevice::sampleCount);
    axisX-&amp;gt;setLabelFormat(&quot;%g&quot;);
    axisX-&amp;gt;setTitleText(&quot;Samples&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="the-y-axis-audio-level">
<db:title>The y-axis &quot;Audio Level&quot;</db:title>
<db:para>We create the <db:link xlink:href="qvalueaxis.xml">QValueAxis</db:link> <db:code>axisY</db:code>, set its range and title text.</db:para>
<db:programlisting language="cpp">    auto axisY = new QValueAxis;
    axisY-&amp;gt;setRange(-1, 1);
    axisY-&amp;gt;setTitleText(&quot;Audio level&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="attaching-the-axes-and-setting-the-chart-title">
<db:title>Attaching the axes and setting the chart title</db:title>
<db:para>We attach the axes, hide the legend, and set the chart title to include the name of the microphone being used as an audio input.</db:para>
<db:programlisting language="cpp">    m_chart-&amp;gt;addAxis(axisX, Qt::AlignBottom);
    m_series-&amp;gt;attachAxis(axisX);
    m_chart-&amp;gt;addAxis(axisY, Qt::AlignLeft);
    m_series-&amp;gt;attachAxis(axisY);
    m_chart-&amp;gt;legend()-&amp;gt;hide();
</db:programlisting>
</db:section>
<db:section xml:id="laying-out-the-chart">
<db:title>Laying out the chart</db:title>
<db:para>Here we use a <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> <db:code>mainLayout</db:code> and add a our QChartview <db:code>chartView</db:code> to the vertical layout.</db:para>
<db:programlisting language="cpp">    m_chart-&amp;gt;setTitle(&quot;Data from the microphone (&quot; + deviceInfo.description() + ')');

    auto mainLayout = new QVBoxLayout(this);
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="using-the-audio-input-data">
<db:title>Using the audio input data</db:title>
<db:para>This section shows how the microphone data is passed to the <db:link xlink:href="qlineseries.xml">QLineSeries</db:link> <db:code>m_series</db:code>. As before this relies on the Qt Multimedia module.</db:para>
<db:para>First we pass deviceInfo to a <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> constructor.</db:para>
<db:programlisting language="cpp">    mainLayout-&amp;gt;addWidget(chartView);

    m_audioInput = new QAudioInput(deviceInfo, this);

    QAudioFormat formatAudio;
</db:programlisting>
<db:para>We then setup our <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> <db:code>formatAudio</db:code>, its channel count, sample rate, and sample format.</db:para>
<db:programlisting language="cpp">    formatAudio.setSampleRate(8000);
    formatAudio.setChannelCount(1);
</db:programlisting>
<db:para>We can now create a <db:link xlink:href="qaudiosource.xml">QAudioSource</db:link> and set its buffer size.</db:para>
<db:programlisting language="cpp">    formatAudio.setSampleFormat(QAudioFormat::UInt8);

    m_audioSource = new QAudioSource(deviceInfo, formatAudio);
</db:programlisting>
<db:para>Now its time to attach our data to the chart. To do this we have created a class XYSeriesIODevice. See <db:link xlink:href="qtcharts-audio-example.xml#xyseriesiodevice">XYSeriesIODevice</db:link> for how it is implemented.</db:para>
<db:programlisting language="cpp">    m_audioSource-&amp;gt;setBufferSize(200);

    m_device = new XYSeriesIODevice(m_series, this);
    m_device-&amp;gt;open(QIODevice::WriteOnly);
</db:programlisting>
<db:section xml:id="xyseriesiodevice">
<db:title>XYSeriesIODevice</db:title>
<db:para>Implemented in <db:code>xyseriesiodevice.cpp</db:code>, XYSeriesIODevice takes care of the signal sampling. The <db:code>writeData</db:code> function, with a fixed resolution of 4, sets the <db:link xlink:href="qlist.xml">QList</db:link> <db:code>m_buffer</db:code> size based on the sample count, and fills it with QPointFs with an incremental x value and the y value set to 0.</db:para>
<db:programlisting language="cpp">{
    static const int resolution = 4;

    if (m_buffer.isEmpty()) {
        m_buffer.reserve(sampleCount);
        for (int i = 0; i &amp;lt; sampleCount; ++i)
            m_buffer.append(QPointF(i, 0));
    }

    int start = 0;
</db:programlisting>
<db:para>We then do some sampling.</db:para>
<db:programlisting language="cpp">    const int availableSamples = int(maxSize) / resolution;
    if (availableSamples &amp;lt; sampleCount) {
        start = sampleCount - availableSamples;
        for (int s = 0; s &amp;lt; start; ++s)
            m_buffer[s].setY(m_buffer.at(s + availableSamples).y());
    }

    for (int s = start; s &amp;lt; sampleCount; ++s, data += resolution)
        m_buffer[s].setY(qreal(uchar(*data) -128) / qreal(128));

    m_series-&amp;gt;replace(m_buffer);
    return (sampleCount - start) * resolution;
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/audio?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
