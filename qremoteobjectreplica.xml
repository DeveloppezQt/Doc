<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRemoteObjectReplica Class</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A class interacting with (but not implementing) a Qt API on the Remote Object network.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRemoteObjectReplica</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS RemoteObjects)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::RemoteObjects)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += remoteobjects</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qremoteobjectdynamicreplica.xml" xlink:role="class">QRemoteObjectDynamicReplica</db:link> and <db:link xlink:href="qremoteobjectregistry.xml" xlink:role="class">QRemoteObjectRegistry</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A Remote Object Replica is a <db:link xlink:href="qobject.xml">QObject</db:link> proxy for another <db:link xlink:href="qobject.xml">QObject</db:link> (called the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> object). Once initialized, a replica can be considered a &quot;latent copy&quot; of the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> object. That is, every change to a <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> on the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link>, or signal emitted by the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> will be updated/emitted by all <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link> objects. Latency is introduced by process scheduling by any OSes involved and network communication latency. As long as the replica has been initialized and the communication is not disrupted, receipt and order of changes is guaranteed.</db:para>
<db:para>The <db:link xlink:href="qremoteobjectreplica.xml#isInitialized">isInitialized</db:link> and <db:link xlink:href="qremoteobjectreplica.xml#state">state</db:link> properties (and corresponding <db:link xlink:href="qremoteobjectreplica.xml#initialized">initialized</db:link>()/<db:link xlink:href="qremoteobjectreplica.xml#stateChanged">stateChanged</db:link>() signals) allow the state of a <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link> to be determined.</db:para>
<db:para>While Qt Remote Objects (QtRO) handles the initialization and synchronization of <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link> objects, there are numerous steps happening behind the scenes which can fail and that aren't encountered in single process Qt applications. See <db:link xlink:href="qtremoteobjects-troubleshooting.xml#troubleshooting">Troubleshooting</db:link> for advice on how to handle such issues when using a remote objects network.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="State-enum">
<db:title>enum QRemoteObjectReplica::State</db:title>
<db:enumsynopsis>
<db:enumname>State</db:enumname>
<db:enumitem>
<db:enumidentifier>Uninitialized</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Default</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Valid</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Suspect</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SignatureMismatch</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type specifies the various state codes associated with <db:link xlink:href="qremoteobjectreplica.xml">QRemoteObjectReplica</db:link> states:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qremoteobjectreplica.xml">QRemoteObjectReplica</db:link></db:emphasis>::Uninitialized</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Initial value of DynamicReplica, where nothing is known about the replica before connection to source.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qremoteobjectreplica.xml">QRemoteObjectReplica</db:link></db:emphasis>::Default</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Initial value of static replica, where any defaults set in the .rep file are available so it can be used if necessary.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qremoteobjectreplica.xml">QRemoteObjectReplica</db:link></db:emphasis>::Valid</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Indicates the replica is connected, has good property values and can be interacted with.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qremoteobjectreplica.xml">QRemoteObjectReplica</db:link></db:emphasis>::Suspect</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Error state that occurs if the connection to the source is lost after it is initialized.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qremoteobjectreplica.xml">QRemoteObjectReplica</db:link></db:emphasis>::SignatureMismatch</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Error state that occurs if a connection to the source is made, but the source and replica are not derived from the same .rep (only possible for static Replicas).</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="node-prop">
<db:title>node : QRemoteObjectNode*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRemoteObjectNode*</db:type>
<db:varname>node</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">node</db:synopsisinfo>
<db:synopsisinfo role="setter">setNode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a pointer to the node this object was acquired from.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qremoteobjectnode.xml">QRemoteObjectNode</db:link></db:type> *<db:emphasis role="bold">node</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para>virtual <db:type>void</db:type> <db:emphasis role="bold">setNode</db:emphasis>(<db:type><db:link xlink:href="qremoteobjectnode.xml">QRemoteObjectNode</db:link></db:type> *<db:emphasis>node</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="state-prop">
<db:title>[read-only] state : const State</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>State</db:type>
<db:varname>state</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">state</db:synopsisinfo>
<db:synopsisinfo role="notifier">stateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the replica state.</db:para>
<db:para>This property holds the replica <db:link xlink:href="qremoteobjectreplica.xml#State-enum">QRemoteObjectReplica::State</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qremoteobjectreplica.xml#State-enum">QRemoteObjectReplica::State</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qremoteobjectreplica.xml#state">state</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qremoteobjectreplica.xml#stateChanged">stateChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qremoteobjectreplica.xml#State-enum">QRemoteObjectReplica::State</db:link></db:type> <db:emphasis>state</db:emphasis>, <db:type><db:link xlink:href="qremoteobjectreplica.xml#State-enum">QRemoteObjectReplica::State</db:link></db:type> <db:emphasis>oldState</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="initialized">
<db:title>void QRemoteObjectReplica::initialized()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>initialized</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initialized()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted once the replica is initialized. An intialized replica has all property values set, but has not yet emitted any property change notifications.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjectreplica.xml#isInitialized">isInitialized</db:link>()</db:member>
<db:member><db:link xlink:href="qremoteobjectreplica.xml#stateChanged">stateChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isInitialized">
<db:title>bool QRemoteObjectReplica::isInitialized() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isInitialized</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isInitialized() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this replica has been initialized with data from the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> object. Returns <db:code>false</db:code> otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjectreplica.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReplicaValid">
<db:title>bool QRemoteObjectReplica::isReplicaValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isReplicaValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isReplicaValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this replica has been initialized and has a valid connection with the <db:link xlink:href="qremoteobjectnode.xml">node</db:link> hosting the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link>. Returns <db:code>false</db:code> otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjectreplica.xml#isInitialized">isInitialized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="notified">
<db:title>void QRemoteObjectReplica::notified()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>notified</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void notified()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted once the replica is initialized and all property change notifications have been emitted.</db:para>
<db:para>It is sometimes useful to respond to property changes as events. For example, you might want to display a user notification when a certain property change occurs. However, this user notification would then also be triggered when a replica first became <db:code>QRemoteObjectReplica::Valid</db:code>, as all property change signals are emitted at that time. This isn't always desirable, and <db:code>notified</db:code> allows the developer to distinguish between these two cases.</db:para>
</db:section>
<db:section xml:id="state">
<db:title>QRemoteObjectReplica::State QRemoteObjectReplica::state() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRemoteObjectReplica::State</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">state</db:synopsisinfo>
<db:synopsisinfo role="signature">QRemoteObjectReplica::State state() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this replica has been initialized with data from the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> object. Returns <db:code>false</db:code> otherwise.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qremoteobjectreplica.xml#state-prop">state</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjectreplica.xml#isInitialized">isInitialized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QRemoteObjectReplica::stateChanged(QRemoteObjectReplica::State <db:emphasis>state</db:emphasis>, QRemoteObjectReplica::State <db:emphasis>oldState</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>QRemoteObjectReplica::State</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRemoteObjectReplica::State</db:type>
<db:parameter>oldState</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">state</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(QRemoteObjectReplica::State state, QRemoteObjectReplica::State oldState)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a replica's state toggles between <db:link xlink:href="qremoteobjectreplica.xml#State-enum">QRemoteObjectReplica::State</db:link>.</db:para>
<db:para>The change in state is represented with <db:code role="parameter">state</db:code> and <db:code role="parameter">oldState</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qremoteobjectreplica.xml#state-prop">state</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjectreplica.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qremoteobjectreplica.xml#initialized">initialized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForSource">
<db:title>bool QRemoteObjectReplica::waitForSource(int <db:emphasis>timeout</db:emphasis> = 30000)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>waitForSource</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeout</db:parameter>
<db:initializer>30000</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool waitForSource(int timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Blocking call that waits for the replica to become initialized or until the <db:code role="parameter">timeout</db:code> (in ms) expires. Returns <db:code>true</db:code> if the replica is initialized when the call completes, <db:code>false</db:code> otherwise.</db:para>
<db:para>If <db:code role="parameter">timeout</db:code> is -1, this function will not time out.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjectreplica.xml#isInitialized">isInitialized</db:link>()</db:member>
<db:member><db:link xlink:href="qremoteobjectreplica.xml#initialized">initialized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
