<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Virtual Keyboard Overview</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt Virtual Keyboard | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>Describes the technical details of the Qt Virtual Keyboard module. This document provides a technical overview of the Qt Virtual Keyboard plugin.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="features">
<db:title>Features</db:title>
<db:para>Key features of the Qt Virtual Keyboard include:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Customizable keyboard layouts and styles with dynamic switching.</db:para>
</db:listitem>
<db:listitem>
<db:para>Predictive text input with word selection.</db:para>
</db:listitem>
<db:listitem>
<db:para>Character preview and alternative character view.</db:para>
</db:listitem>
<db:listitem>
<db:para>Automatic capitalization and space insertion.</db:para>
</db:listitem>
<db:listitem>
<db:para>Scalability to different resolutions.</db:para>
</db:listitem>
<db:listitem>
<db:para>Support for different character sets (Latin, Simplified/Traditional Chinese, Hindi, Japanese, Arabic, Hebrew, Korean, and others).</db:para>
</db:listitem>
<db:listitem>
<db:para>Support for most common input <db:link xlink:href="qtvirtualkeyboard-overview.xml#supported-languages">languages</db:link>, with possibility to easily extend the language support.</db:para>
</db:listitem>
<db:listitem>
<db:para>Left-to-right and right-to-left input.</db:para>
</db:listitem>
<db:listitem>
<db:para>Hardware key support for 2-way and 5-way navigation.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="handwriting.xml">Handwriting support</db:link>, with gestures for fullscreen input.</db:para>
</db:listitem>
<db:listitem>
<db:para>Audio feedback.</db:para>
</db:listitem>
<db:listitem>
<db:para>Cross-platform functionality.</db:para>
</db:listitem>
<db:listitem>
<db:para>Supports both <db:link xlink:href="qtvirtualkeyboard-deployment-guide.xml#integration-method">Qt Quick and Qt Widgets applications</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="supported-languages">
<db:title>Supported Languages</db:title>
<db:para>The Virtual Keyboard supports the following languages:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#albanian-layout">Albanian</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#arabic-layout">Arabic</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#bulgarian-layout">Bulgarian</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#bulgarian-layout-latin">Bulgarian (Latin)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#croatian-layout">Croatian</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#czech-layout">Czech</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#danish-layout">Danish</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#dutch-layout">Dutch</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#english-british-layout">English (British)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#english-american-layout">English (American)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#estonian-layout">Estonian</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#finnish-layout">Finnish</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#french-layout">French</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#french-layout-canadian">French (Canadian)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#german-layout">German</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#greek-layout">Greek</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#greek-layout-latin">Greek (Latin)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#hebrew-layout">Hebrew</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#hebrew-layout-latin">Hebrew (Latin)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#hindi-layout">Hindi</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#hungarian-layout">Hungarian</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#indonesian-layout">Indonesian</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#italian-layout">Italian</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#japanese-layout-hiragana">Japanese (Hiragana)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#japanese-layout-katakana">Japanese (Katakana)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#japanese-layout-full-width-latin">Japanese (Full Width Latin)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#japanese-layout-latin">Japanese (Latin)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#korean-layout">Korean</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#malay-layout">Malay</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#norwegian-layout">Norwegian</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#persian-farsi-layout">Persian/Farsi</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#polish-layout">Polish</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#portugese-layout">Portugese</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#romanian-layout">Romanian</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#russian-layout">Russian</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#serbian-layout">Serbian</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#serbian-layout-latin">Serbian (Latin)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#simplified-chinese-layout">Simplified Chinese</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#traditional-chinese-layout-zhuyin">Traditional Chinese (Zhuyin)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#traditional-chinese-layout-cangjie">Traditional Chinese (Cangjie)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#slovak-layout">Slovak</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#slovenian-layout">Slovenian</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#spanish-layout">Spanish</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#swedish-layout">Swedish</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#thai-layout">Thai</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#turkish-layout">Turkish</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#ukrainian-layout">Ukrainian</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtvirtualkeyboard-layouts.xml#vietnamese-layout">Vietnamese</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
</db:informaltable>
<db:para>To add support for an additional language, see <db:link xlink:href="qtvirtualkeyboard-overview.xml#adding-new-keyboard-layouts">Adding New Keyboard Layouts</db:link>.</db:para>
</db:section>
<db:section xml:id="third-party-plugins">
<db:title>Third-party Plugins</db:title>
<db:para>The Qt Virtual Keyboard supports third-party plugins from the following vendors:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="xt9.xml">Cerence XT9</db:link> advanced input.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="handwriting.xml#cerence-handwriting">Cerence Handwriting</db:link> text input.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="handwriting.xml#myscript">MyScript</db:link> Text handwriting recognition</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qtvirtualkeyboard-build.xml">Building Qt Virtual Keyboard</db:link> describes how to integrate these plugins into the Qt Virtual Keyboard.</db:para>
</db:section>
<db:section xml:id="basic-concepts">
<db:title>Basic Concepts</db:title>
<db:para>The Qt Virtual Keyboard project is a Qt input context plugin that implements QPlatformInputContextPlugin and QPlatformInputContext interfaces. These interfaces allow the plugin to be used as a platform input context plugin in Qt applications.</db:para>
<db:para>The plugin itself provides an input framework supporting multiple input methods as well as a QML UI for the virtual keyboard. The input framework is extensible through a plugin interface, which allows third-party input methods and keyboard layouts to be loaded at runtime.</db:para>
<db:para>The input framework provides the following main interfaces:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qvirtualkeyboardinputcontext.xml">QVirtualKeyboardInputContext</db:link>: provides contextual information for the virtual keyboard and other input components. Acts as an interface to the underlying text input component.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvirtualkeyboardinputengine.xml">QVirtualKeyboardInputEngine</db:link>: exposes an API to integrate user input events (key presses, etc.) and acts as a host for input methods.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml">QVirtualKeyboardAbstractInputMethod</db:link>: a base type for C++-based input methods. The input method usually handles key events, but can also handle mouse and touch input events.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml">InputMethod</db:link>: a base type for QML-based input methods. The input method usually handles key events, but can also handle mouse and touch input events.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="input-context">
<db:title>Input Context</db:title>
<db:para>The input context is used by the keyboard as well as concrete input methods. <db:link xlink:href="qml-qtquick-virtualkeyboard-inputcontext.xml">InputContext</db:link> is a singleton instance hosted by QML. An application should not directly interact with the input context.</db:para>
<db:section xml:id="contextual-information">
<db:title>Contextual Information</db:title>
<db:para>The input context provides access to contextual information that originates from the application. This information includes, but is not limited to:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-inputcontext.xml#cursorPosition-prop">InputContext::cursorPosition</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-inputcontext.xml#cursorRectangle-prop">InputContext::cursorRectangle</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-inputcontext.xml#inputMethodHints-prop">InputContext::inputMethodHints</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-inputcontext.xml#preeditText-prop">InputContext::preeditText</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-inputcontext.xml#selectedText-prop">InputContext::selectedText</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-inputcontext.xml#surroundingText-prop">InputContext::surroundingText</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="locale">
<db:title>Locale</db:title>
<db:para>The Virtual Keyboard Engine generates the list of supported locales from locale-specific layout directories in <db:code>layouts/</db:code>. Each layout directory must contain a definition or fallback for the following layout types: <db:emphasis>dialpad</db:emphasis>, <db:emphasis>digits</db:emphasis>, <db:emphasis>handwriting</db:emphasis>, <db:emphasis>main</db:emphasis>, <db:emphasis>numbers</db:emphasis>, and <db:emphasis>symbols</db:emphasis>. Definitions are implemented in <db:code>.qml</db:code>-files, fallbacks are defined by a placeholder file with the <db:code>.fallback</db:code> file extension. The <db:code>layouts/</db:code> directory must contain a <db:code>fallback/</db:code> sub-directory that contains definitions for each layout type.</db:para>
<db:para>Each layout directory may contain the definition of one or more layout types. If the locale-specific layout is the same as that of the fallback locale, you can add a placeholder file for the layout called <db:code>&lt;layout type&gt;.fallback</db:code>. This instructs the virtual keyboard to use the fallback layout instead.</db:para>
<db:para>For example: you may add a locale-specific layout for Finnish, that defines the main layout type in <db:code>main.qml</db:code>. For the other layout types, you opt for the fallback mechanism. Your <db:code>layouts/</db:code> tree will look like this:</db:para>
<db:programlisting language="cpp" role="bad">.
├── fallback
│   ├── dialpad.qml
│   ├── digits.qml
│   ├── handwriting.qml
│   ├── main.qml
│   ├── numbers.qml
│   └── symbols.qml
└── fi_FI
    ├── dialpad.fallback
    ├── digits.fallback
    ├── handwriting.fallback
    ├── main.qml
    ├── numbers.fallback
    └── symbols.fallback
</db:programlisting>
<db:para>It's imperative that the <db:code>layouts/fallback</db:code> directory always contain a set of full implementation files.</db:para>
<db:para>The application can specify the initial layout by changing the default locale. However, this must be done before the application initializes and loads the input method plugin. If there are no changes to the default locale, the current system locale is used.</db:para>
<db:para>Matching the keyboard locale follows this sequence:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>layouts/&lt;language&gt;_&lt;country&gt;</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>layouts/&lt;language&gt;_*</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>layouts/fallback</db:code> – the default layout here is <db:emphasis>en_GB</db:emphasis>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>First, the locale is matched against the full locale name. If a there isn't a full match, then only the locale language is matched. Finally, the contents of <db:code>layouts/fallback</db:code> is used as a fallback when there's also no partial match.</db:para>
<db:para>After the locale selection is done, the keyboard updates the input locale and input direction to match the current layout. The application can receive this information through the <db:link xlink:href="qinputmethod.xml">QInputMethod</db:link> interface.</db:para>
<db:para>Internally, the current input locale is also updated to <db:link xlink:href="qvirtualkeyboardinputengine.xml">QVirtualKeyboardInputEngine</db:link> and the current input method instances.</db:para>
</db:section>
</db:section>
<db:section xml:id="input-engine">
<db:title>Input Engine</db:title>
<db:para>The input engine object is owned by <db:link xlink:href="qml-qtquick-virtualkeyboard-inputcontext.xml">InputContext</db:link>. Like the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputcontext.xml">InputContext</db:link>, there is only one instance of the <db:link xlink:href="qvirtualkeyboardinputengine.xml">QVirtualKeyboardInputEngine</db:link>. The input engine contains API functions which the keyboard uses to map user interactions, such as key press and release events, to the input method.</db:para>
<db:para>For example, virtual keyboard key events are mapped through the following methods:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qvirtualkeyboardinputengine.xml#virtualKeyPress">QVirtualKeyboardInputEngine::virtualKeyPress</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvirtualkeyboardinputengine.xml#virtualKeyRelease">QVirtualKeyboardInputEngine::virtualKeyRelease</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The above-mentioned methods are intended for the integration of the virtual keyboard, hence the word &quot;virtual&quot; in the methods' names. This also means that the methods are not suitable for mapping the physical keystrokes. This is a consequence of the fact that the actual action is performed only when the key is released.</db:para>
<db:para>If the key press is interrupted before the key release event, the keyboard invokes the <db:link xlink:href="qvirtualkeyboardinputengine.xml#virtualKeyCancel">QVirtualKeyboardInputEngine::virtualKeyCancel</db:link> method.</db:para>
<db:section xml:id="input-method">
<db:title>Input Method</db:title>
<db:para>The input method is a concrete implementation of the keypress handler. It's main function is to handle keypress events and maintain state information for the user input. It interacts with the text editor through <db:link xlink:href="qvirtualkeyboardinputcontext.xml">QVirtualKeyboardInputContext</db:link> via pre-edit text or key events.</db:para>
<db:para>The input method instance can be created in various ways, depending on the use case:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>KeyboardLayout::inputMethod</db:code>: the keyboard layout can create an input method instance solely for this keyboard layout. It should be noted that this instance will be destroyed when the keyboard layout changes. Therefore, this method is usually limited to very narrow use cases.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>KeyboardLayout::createInputMethod()</db:code>: the keyboard layout can dynamically create an input method that can be used with this layout and also with the <db:link xlink:href="qml-qtquick-virtualkeyboard-components-keyboardlayout.xml#sharedLayouts-prop">shared layouts</db:link> (e.g. symbol layout). This is the preferred way for creating specialized input methods, such as those involving complex languages or handwriting.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>DefaultInputMethod</db:code>: the virtual keyboard attempts to create this type of input method at startup. This instance will be used as the default input method across all keyboard layouts, unless the keyboard layout uses a custom input method. This instance outlives keyboard layout changes across languages and is the preferred way of creating and overriding the default input method.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="virtual-keyboard-plugins">
<db:title>Virtual Keyboard Plugins</db:title>
<db:para>The <db:emphasis>src/plugins</db:emphasis> directory of the virtual keyboard contains the existing plugins for the virtual keyboard. These plugins are standard QML modules loaded implicitly by the <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.<db:link xlink:href="qml-qtquick-virtualkeyboard-virtualkeyboard.xml">VirtualKeyboard</db:link>.Plugins QML module.</db:para>
<db:para>A plugin may provide keyboard layouts and input methods (usually both). The input method used by the virtual keyboard depends on which keyboard layout is in use. The keyboard layout may provide an instance of a custom input method by the <db:link xlink:href="qml-qtquick-virtualkeyboard-components-keyboardlayout.xml">KeyboardLayout</db:link>.createInputMethod() function. Otherwise, the default input method (DefaultInputMethod) created by the virtual keyboard is used.</db:para>
<db:section xml:id="adding-keyboard-layouts">
<db:title>Adding Keyboard Layouts</db:title>
<db:para>The plugin can add keyboard layouts for the virtual keyboard by including the layout files in the Qt resources of the plugin binary.</db:para>
<db:para>The virtual keyboard searches for the keyboard layouts (per language) from a specific path <db:emphasis>/qt-project.org/imports/QtQuick/VirtualKeyboard/Layouts/&lt;language_COUNTRY&gt;</db:emphasis>, so it is essential to use this exact path also in the plugin. Qt resource paths can overlap, meaning that the plugin can override existing layouts on the virtual keyboard.</db:para>
<db:para>It is also possible to override the built-in keyboard layouts by having them loaded directly from the file system by using the <db:emphasis>QT_VIRTUALKEYBOARD_LAYOUT_PATH</db:emphasis> environment variable.</db:para>
</db:section>
<db:section xml:id="adding-input-method">
<db:title>Adding Input Method</db:title>
<db:para>The plugin can register an input method that other keyboard layouts can use by default (such as <db:code>DefaultInputMethod</db:code>) or an input method that is used privately in the plugin (by also providing custom keyboard layout, which creates the input method).</db:para>
<db:para>The input method must implement a <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml">QVirtualKeyboardAbstractInputMethod</db:link> (C++) or <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml">InputMethod</db:link> (QML) interface and it must be registered as a QML type (<db:link xlink:href="qqmlengine.xml#QML_NAMED_ELEMENT">QML_NAMED_ELEMENT</db:link>) by the plugin.</db:para>
</db:section>
</db:section>
<db:section xml:id="implementing-a-custom-input-method">
<db:title>Implementing a Custom Input Method</db:title>
<db:para>The implementation of input methods starts by deciding which interface is used, QML or C++. In this example the QML interface is used. The same logic and interfaces apply with the C++ interface <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml">QVirtualKeyboardAbstractInputMethod</db:link>. In this case, the plugin must be linked to the <db:emphasis>VirtualKeyboard</db:emphasis> module.</db:para>
<db:para>The following example shows the minimum functionality that is required from an input method:</db:para>
<db:programlisting language="cpp">// Copyright (C) 2016 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GPL-3.0-only

import QtQuick
import QtQuick.VirtualKeyboard

// file: CustomInputMethod.qml

InputMethod {
    function inputModes(locale) {
        return [InputEngine.Latin];
    }

    function setInputMode(locale, inputMode) {
        return true
    }

    function setTextCase(textCase) {
        return true
    }

    function reset() {
        // TODO: reset the input method without modifying input context
    }

    function update() {
        // TODO: commit current state and update the input method
    }

    function keyEvent(key, text, modifiers) {
        var accept = false
        // TODO: Handle key and set accept or fallback to default processing
        return accept;
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#inputModes-method">InputMethod::inputModes</db:link>() method is called by the input engine before an input mode is set. The method returns a list of input modes available in the given locale.</db:para>
<db:para>An input method is initialized in <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#setInputMode-method">InputMethod::setInputMode</db:link>() method with a locale and input mode. After setting the locale and input mode, the input method should be ready for use.</db:para>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#reset-method">InputMethod::reset</db:link>() is called when an input method needs to be reset. The reset must only reset the internal state of the input method, and not the user text.</db:para>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#update-method">InputMethod::update</db:link>() is called when the input context is updated and the input state is possibly out of sync. The input method should commit the current text.</db:para>
<db:para>The keystroke events are handled in <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#keyEvent-method">InputMethod::keyEvent</db:link>(). This method handles a single keystroke event and returns <db:code>true</db:code> if the event was processed. Otherwise the keystroke is handled by the default input method.</db:para>
<db:section xml:id="selection-lists">
<db:title>Selection Lists</db:title>
<db:para>Selection lists are an optional feature that can be integrated into the input method. The input framework supports various types of lists, such as the word candidate list. Responsibilities in implementing the lists are handled such that the input method is responsible for the content and activities, such as the click behavior. The input framework is responsible for maintaining the list model and delivery to the user interface.</db:para>
<db:section xml:id="allocating-the-selection-lists">
<db:title>Allocating the Selection Lists</db:title>
<db:para>Selection lists are allocated when the input method is activated. The <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#selectionLists-method">InputMethod::selectionLists</db:link>() method returns a list of the required selection list types:</db:para>
<db:programlisting language="cpp">function selectionLists() {
    return [SelectionListModel.Type.WordCandidateList];
}
</db:programlisting>
<db:para>In the above example, the input method allocates the word candidate list for its use.</db:para>
</db:section>
<db:section xml:id="updating-the-selection-lists">
<db:title>Updating the Selection Lists</db:title>
<db:para>When the input method requires the UI to update the contents of a selection list, it will emit the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#selectionListChanged-signal">InputMethod::selectionListChanged</db:link> signal. Likewise, if the input method requires the UI to highlight an item in the list, it will emit the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#selectionListActiveItemChanged-signal">InputMethod::selectionListActiveItemChanged</db:link> signal.</db:para>
<db:programlisting language="cpp">selectionListChanged(SelectionListModel.Type.WordCandidateList)
selectionListActiveItemChanged(SelectionListModel.Type.WordCandidateList, wordIndex)
</db:programlisting>
</db:section>
<db:section xml:id="populating-items-in-the-selection-lists">
<db:title>Populating Items in the Selection Lists</db:title>
<db:para>The items are populated with method callbacks which will provide the number of items in a list as well as the data for individual items.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#selectionListItemCount-method">InputMethod::selectionListItemCount</db:link> callback requests the number of items in the list identified by the given type.</db:para>
<db:programlisting language="cpp">function selectionListItemCount(type) {
    if (type == SelectionListModel.Type.WordCandidateList) {
        return wordList.length
    }
    return 0
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#selectionListData-method">InputMethod::selectionListData</db:link> callback requests the data for items.</db:para>
<db:programlisting language="cpp">function selectionListData(type, index, role) {
    var result = null
    if (type == SelectionListModel.Type.WordCandidateList) {
        switch (role) {
        case SelectionListModel.Role.Display:
            result = wordList[index]
            break
        default:
            break
        }
    }
    return result
}
</db:programlisting>
<db:para>The <db:code role="parameter">role</db:code> parameter identifies which data is requested for an item. For example, the <db:link xlink:href="qml-qtquick-virtualkeyboard-selectionlistmodel.xml">SelectionListModel</db:link>.Role.Display requests the display text data.</db:para>
</db:section>
<db:section xml:id="responding-to-user-actions">
<db:title>Responding to User Actions</db:title>
<db:para>When the user selects an item in the list, the input method responds to the event in the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#selectionListItemSelected-method">InputMethod::selectionListItemSelected</db:link> method callback.</db:para>
<db:programlisting language="cpp">function selectionListItemSelected(type, index) {
    if (type == SelectionListModel.Type.WordCandidateList) {
        inputContext.commit(wordlist[index])
        update()
    }
}
</db:programlisting>
</db:section>
</db:section>
</db:section>
<db:section xml:id="integrating-handwriting-recognition">
<db:title>Integrating Handwriting Recognition</db:title>
<db:para>An input method can also use input data from the touch screen or other input devices.</db:para>
<db:para>When the input begins, the virtual keyboard calls the input method function <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#traceBegin"> traceBegin </db:link>, which returns a new <db:link xlink:href="qvirtualkeyboardtrace.xml">Trace</db:link> object to which the input is collected on behalf of the input method. Similarly, when the finger or stylus is raised, the event is terminated with the <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#traceEnd"> traceEnd </db:link> call. The input method processes the collected data and produces text using the <db:link xlink:href="qvirtualkeyboardinputcontext.xml">InputContext</db:link> interface.</db:para>
<db:para>There are predefined keyboard layouts for handwriting. However, they are not included by default, and the handwriting plugin should include them in its own resources. For examples of how to do this, see the existing plugins for handwriting from <db:emphasis>MyScript</db:emphasis> or <db:emphasis>Cerence</db:emphasis>.</db:para>
<db:section xml:id="data-model-for-handwriting-input">
<db:title>Data Model for Handwriting Input</db:title>
<db:para>Virtual keyboard collects the handwriting data in a special data model <db:link xlink:href="qvirtualkeyboardtrace.xml">QVirtualKeyboardTrace</db:link>. Each trace represents a collection of data sampled from one touch (e.g. a swipe on the screen). There will be as many instances of <db:link xlink:href="qvirtualkeyboardtrace.xml">QVirtualKeyboardTrace</db:link> as there are touches on the handwriting input area.</db:para>
<db:para>By definition, <db:emphasis>trace</db:emphasis> is a set of data sampled from one touch. In addition to the basic point data, it can also include other types of data, such as the time of each point. The input method can define the desired input channels in the beginning of a trace event.</db:para>
<db:para>The input method does not participate in the actual collection of trace data. However, the input method has full control over the input since it can either accept or reject a <db:link xlink:href="qvirtualkeyboardtrace.xml">QVirtualKeyboardTrace</db:link> (e.g. if there are too many instances to handle). This also allows for precise control over how many fingers can be used simultaneously.</db:para>
<db:para>The input method can collect as many traces as it sees fit and it can begin processing them when necessary. The processing can even be performed in parallel while sampling the data, although it is not recommended because of the potential performance issues. The recommended way is to start processing in a background thread after a suitable delay from the last input, so that the processing does not affect negatively to the user interface.</db:para>
</db:section>
<db:section xml:id="trace-api-for-input-methods">
<db:title>Trace API for Input Methods</db:title>
<db:para>The trace API consists of the following virtual methods, which the input method must implement in order to receive and process trace input data.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#patternRecognitionModes"> patternRecognitionModes </db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#traceBegin"> traceBegin </db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml#traceEnd"> traceEnd </db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>By implementing these methods, the input method can receive and process data from a variety of input sources (e.g. keyboard layout or full screen).</db:para>
<db:para>The patternRecognitionModes method returns a list of pattern recognition modes, which are supported by the input method. A pattern recognition mode, such as <db:link xlink:href="qvirtualkeyboardinputengine.xml#PatternRecognitionMode-enum"> Handwriting </db:link>, defines the method by which the input method processes the data.</db:para>
<db:para>The trace interaction is started when an input source detects a new contact point, and calls the traceBegin method for a new trace object. If the input method accepts the interaction, it creates a new trace object and returns it to the caller. From this point on, trace data is collected until the traceEnd method is called.</db:para>
<db:para>When the traceEnd method is called, the input method may begin processing of the data contained in the trace object. After processing the data, the input method should destroy the object. This also removes the trace rendered to the screen.</db:para>
</db:section>
</db:section>
<db:section xml:id="keyboard-layouts">
<db:title>Keyboard Layouts</db:title>
<db:para>Keyboard layouts are located in the <db:emphasis>src/layouts/builtin</db:emphasis> directory. Each subdirectory of the layout directory represents a locale. The locale directory is a string of the form &quot;language_country&quot;, where language is a lowercase, two-letter ISO 639 language code, and country is an uppercase, two or three-letter ISO 3166 country code.</db:para>
<db:section xml:id="layout-types">
<db:title>Layout Types</db:title>
<db:para>Different keyboard layout types are used in different input modes. The default layout which is used for regular text input, is called the &quot;main&quot; layout. The layout type is determined by the layout file name. Therefore, the &quot;main&quot; layout file is called the &quot;main.qml&quot;.</db:para>
<db:para>List of supported layout types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>main</db:code> The main layout for normal text input</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>symbols</db:code> Symbol layout for special characters etc. (activated from main layout)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>numbers</db:code> Numeric layout for formatted numbers (activated by <db:link xlink:href="qt.xml#InputMethodHint-enum">Qt::ImhFormattedNumbersOnly</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>digits</db:code> Digits only layout (activated by <db:link xlink:href="qt.xml#InputMethodHint-enum">Qt::ImhDigitsOnly</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>dialpad</db:code> Dialpad layout for phone number input (activated by <db:link xlink:href="qt.xml#InputMethodHint-enum">Qt::ImhDialableCharactersOnly</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>handwriting</db:code> Handwriting layout for handwriting recognition (activated from main layout)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="adding-new-keyboard-layouts">
<db:title>Adding New Keyboard Layouts</db:title>
<db:para>The keyboard layout element must be based on the <db:link xlink:href="qml-qtquick-virtualkeyboard-components-keyboardlayout.xml">KeyboardLayout</db:link> QML type. This type defines the root item of the layout. The root item has the following optional properties which can be set if necessary:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:code>property var inputMethod</db:code></db:para>
</db:td>
<db:td>
<db:para>Specifies an input method for this layout. If the input method is not defined, then the current input method is used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>property int inputMode</db:code></db:para>
</db:td>
<db:td>
<db:para>Specifies an input mode for this layout.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>property real keyWeight</db:code></db:para>
</db:td>
<db:td>
<db:para>Specifies the default key weight used for all keys in this keyboard layout. The key weight is a proportional value which affects the size of individual keys in relation to each other.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>New rows are added to the keyboard layout by using the <db:link xlink:href="qml-qtquick-virtualkeyboard-components-keyboardrow.xml">KeyboardRow</db:link> type. The <db:link xlink:href="qml-qtquick-virtualkeyboard-components-keyboardrow.xml">KeyboardRow</db:link> can also specify the default key weight for its child elements. Otherwise, the key weight is inherited from its parent element.</db:para>
<db:para>New keys are added to the keyboard row using the Key type or one of the specialized key types. Below is the list of all key types:</db:para>
<db:variablelist role="groupsbymodule qtvirtualkeyboard-key-types">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-backspacekey.xml" xlink:role="">BackspaceKey</db:link></db:term>
<db:listitem>
<db:para>Backspace key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-changelanguagekey.xml" xlink:role="">ChangeLanguageKey</db:link></db:term>
<db:listitem>
<db:para>Change language key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-enterkey.xml" xlink:role="">EnterKey</db:link></db:term>
<db:listitem>
<db:para>Enter key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-fillerkey.xml" xlink:role="">FillerKey</db:link></db:term>
<db:listitem>
<db:para>Filler key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-flickkey.xml" xlink:role="">FlickKey</db:link></db:term>
<db:listitem>
<db:para>Flick key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-handwritingmodekey.xml" xlink:role="">HandwritingModeKey</db:link></db:term>
<db:listitem>
<db:para>Hand writing mode key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-hidekeyboardkey.xml" xlink:role="">HideKeyboardKey</db:link></db:term>
<db:listitem>
<db:para>Hide keyboard key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-inputmodekey.xml" xlink:role="">InputModeKey</db:link></db:term>
<db:listitem>
<db:para>Input mode key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-key.xml" xlink:role="">Key</db:link></db:term>
<db:listitem>
<db:para>Regular character key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-modekey.xml" xlink:role="">ModeKey</db:link></db:term>
<db:listitem>
<db:para>Generic mode key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-numberkey.xml" xlink:role="">NumberKey</db:link></db:term>
<db:listitem>
<db:para>Specialized number key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-shiftkey.xml" xlink:role="">ShiftKey</db:link></db:term>
<db:listitem>
<db:para>Shift key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-spacekey.xml" xlink:role="">SpaceKey</db:link></db:term>
<db:listitem>
<db:para>Space key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-symbolmodekey.xml" xlink:role="">SymbolModeKey</db:link></db:term>
<db:listitem>
<db:para>Symbol mode key for keyboard layouts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-virtualkeyboard-components-traceinputkey.xml" xlink:role="">TraceInputKey</db:link></db:term>
<db:listitem>
<db:para>A specialized key for collecting touch input data.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para>For example, to add a regular key which sends a key event to the input method:</db:para>
<db:programlisting language="cpp">import QtQuick
import QtQuick.VirtualKeyboard
import QtQuick.VirtualKeyboard.Components

// file: en_GB/main.qml

KeyboardLayout {
    keyWeight: 160
    KeyboardRow {
        Key {
            key: Qt.Key_Q
            text: &quot;q&quot;
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="key-size-calculation">
<db:title>Key Size Calculation</db:title>
<db:para>The keyboard layouts are scalable, which means that there cannot be any fixed sizes set for any items in the layout. Instead, the key widths are calculated from key weight in relation to each other and the height by dividing the space equally among the keyboard rows.</db:para>
<db:para>In the above example, the key size is inherited from parent elements in this order:</db:para>
<db:para>Key &gt; <db:link xlink:href="qml-qtquick-virtualkeyboard-components-keyboardrow.xml">KeyboardRow</db:link> &gt; <db:link xlink:href="qml-qtquick-virtualkeyboard-components-keyboardlayout.xml">KeyboardLayout</db:link></db:para>
<db:para>The effective value for the key weight will be 160. For the sake of the example, we add another key which specifies a custom key weight:</db:para>
<db:programlisting language="cpp">import QtQuick
import QtQuick.VirtualKeyboard
import QtQuick.VirtualKeyboard.Components

// file: en_GB/main.qml

KeyboardLayout {
    keyWeight: 160
    KeyboardRow {
        Key {
            key: Qt.Key_Q
            text: &quot;q&quot;
        }
        Key {
            key: Qt.Key_W
            text: &quot;w&quot;
            keyWeight: 200
        }
    }
}
</db:programlisting>
<db:para>Now the total key weight of a row is <db:emphasis>160 + 200 = 360</db:emphasis>. When the keyboard layout is activated, the width of an individual key is calculated as follows:</db:para>
<db:para><db:emphasis>key width in pixels = key weight / SUM(key weights in a row) * row width in pixels</db:emphasis></db:para>
<db:para>This means that the keyboard can be scaled to any size, while the relative key sizes remain the same.</db:para>
</db:section>
<db:section xml:id="alternative-keys">
<db:title>Alternative Keys</db:title>
<db:para>Key can specify an alternativeKeys property, which results in a popup that lists alternative keys when the user presses and holds the key. The alternativeKeys can specify either a string, or a list of strings. If alternativeKeys is a string, the user can select between the characters in the string.</db:para>
</db:section>
<db:section xml:id="styles-and-layouts">
<db:title>Styles and Layouts</db:title>
<db:para>The keyboard layouts cannot specify any visual elements. Instead, the layout is visualized by the keyboard style. On the other hand, the keyboard style cannot affect the size of the keyboard layout.</db:para>
</db:section>
<db:section xml:id="keyboard-layouts-with-multiple-pages-of-keys">
<db:title>Keyboard Layouts with Multiple Pages of Keys</db:title>
<db:para>Some keyboard layouts, such as symbol layouts, may contain more keys than it is feasible to present on a single keyboard layout. A solution is to embed multiple keyboard layouts into the same context by using the <db:link xlink:href="qml-qtquick-virtualkeyboard-components-keyboardlayoutloader.xml">KeyboardLayoutLoader</db:link>.</db:para>
<db:para>When the <db:link xlink:href="qml-qtquick-virtualkeyboard-components-keyboardlayoutloader.xml">KeyboardLayoutLoader</db:link> is used as a root item of a keyboard layout, the actual keyboard layouts are wrapped inside Component elements. The keyboard layout is activated by assigning the id of an active component to the sourceComponent property.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">import QtQuick
import QtQuick.VirtualKeyboard
import QtQuick.VirtualKeyboard.Components

// file: en_GB/symbols.qml

KeyboardLayoutLoader {
    property bool secondPage
    onVisibleChanged: if (!visible) secondPage = false
    sourceComponent: secondPage ? page2 : page1
    Component {
        id: page1
        KeyboardLayout {
            KeyboardRow {
                Key {
                    displayText: &quot;1/2&quot;
                    functionKey: true
                    onClicked: secondPage = !secondPage
                }
            }
        }
    }
    Component {
        id: page2
        KeyboardLayout {
            KeyboardRow {
                Key {
                    displayText: &quot;2/2&quot;
                    functionKey: true
                    onClicked: secondPage = !secondPage
                }
            }
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="handwriting-keyboard-layout">
<db:title>Handwriting Keyboard Layout</db:title>
<db:para>Each language which supports handwriting recognition must provide a special keyboard layout named <db:emphasis>handwriting.qml</db:emphasis>.</db:para>
<db:para>This type of keyboard layout must meet the following requirements:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>contains a <db:link xlink:href="qml-qtquick-virtualkeyboard-components-traceinputkey.xml">TraceInputKey</db:link> in the keyboard layout</db:para>
</db:listitem>
<db:listitem>
<db:para>provides an instance of HandwritingInputMethod as the input method.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The handwriting layout may also include <db:link xlink:href="qml-qtquick-virtualkeyboard-components-changelanguagekey.xml">ChangeLanguageKey</db:link>. For this purpose, it is important to use the <db:link xlink:href="qml-qtquick-virtualkeyboard-components-changelanguagekey.xml#customLayoutsOnly-prop">customLayoutsOnly</db:link> attribute, which will filter out languages that do not use handwriting.</db:para>
<db:para>Both the main and handwriting layouts should contain a key to activate and deactivate the handwriting input mode. This can be done by adding a <db:link xlink:href="qml-qtquick-virtualkeyboard-components-handwritingmodekey.xml">HandwritingModeKey</db:link> to the layout.</db:para>
</db:section>
<db:section xml:id="adding-custom-layouts">
<db:title>Adding Custom Layouts</db:title>
<db:para>The virtual keyboard layouts system supports built-in layouts as well as custom layouts. The built-in layouts are embedded as <db:link xlink:href="resources.xml">Qt Resources</db:link> into the plugin binary. Custom layouts are located in the file system, so that they can be installed without recompiling the virtual keyboard itself, or they can be located in a resource file.</db:para>
<db:para>The selection of layouts at runtime is affected by the <db:code>QT_VIRTUALKEYBOARD_LAYOUT_PATH</db:code> environment variable.</db:para>
<db:para>In case the environment variable is not set, or contains an invalid directory, the virtual keyboard falls back to the default built-in layouts.</db:para>
<db:para>To prevent the built-in layouts from being built into the virtual keyboard plugin when using custom layouts, add <db:code>-no-vkb-layouts</db:code> option to the <db:code>configure</db:code> script. For more information, see <db:link xlink:href="qmake-advanced-usage.xml">Configuration Options</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="keyboard-styles">
<db:title>Keyboard Styles</db:title>
<db:para>The virtual keyboard styling system supports built-in styles as well as custom styles. The built-in styles are embedded as Qt Resources into the plugin binary and the custom styles are located in the file system and can be installed without recompiling the virtual keyboard itself.</db:para>
<db:para>The selection of the runtime style is affected by an environment variable QT_VIRTUALKEYBOARD_STYLE, which can be set to the name of the built-in style, e.g. &quot;retro&quot;, or any of the custom styles installed into the Styles directory:</db:para>
<db:programlisting language="cpp">$$[QT_INSTALL_QML]/QtQuick/VirtualKeyboard/Styles
</db:programlisting>
<db:para>In case the environment variable is not set, or contains an invalid style name, the virtual keyboard falls back in the default built-in style.</db:para>
<db:section xml:id="adding-custom-styles">
<db:title>Adding Custom Styles</db:title>
<db:para>The process of creating a new style begins by creating a new subdirectory for the style in a QML import path under the URL-based directory structure <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>/<db:link xlink:href="qml-qtquick-virtualkeyboard-virtualkeyboard.xml">VirtualKeyboard</db:link>/Styles/. See <db:link xlink:href="qtqml-syntax-imports.xml#qml-import-path">QML Import Path</db:link> for information about QML import paths. The directory name can not contain spaces or special characters other than underscore. Also, the directory name can not be the same as one of the built-in style, which currently includes &quot;default&quot; and &quot;retro&quot;.</db:para>
<db:para>A good starting point for creating a new style is to use an existing built-in style as a template and edit it. You can find the built-in styles from the virtual keyboard sources directory src/styles/builtin. Copy one of the directories containing a built-in style into the <db:emphasis>Styles</db:emphasis> directory and rename it to &quot;test&quot;. The directory structure should now be as follows:</db:para>
<db:programlisting language="cpp">test/default_style.qrc
test/style.qml
test/images
test/images/backspace.png
test/images/check.png
test/images/enter.png
test/images/globe.png
test/images/hidekeyboard.png
test/images/search.png
test/images/shift.png
</db:programlisting>
<db:para>The QRC configuration file, which is unnecessary in this case, can be safely removed.</db:para>
<db:note>
<db:para>The style.qml file should not be renamed, or otherwise the virtual keyboard cannot load the style.</db:para>
</db:note>
<db:para>Next, open the style.qml in your favorite editor and set the resourcePrefix property to an empty string. The resource prefix is not needed as the resources are contained in the same directory as the style.qml file.</db:para>
<db:para>Also, to make it more obvious to see that the custom style is actually being loaded and used, set the keyboard background to a different color:</db:para>
<db:programlisting language="cpp">keyboardBackground: Rectangle {
    color: &quot;gray&quot;
}
</db:programlisting>
<db:para>The final step is to run the example application with your custom style:</db:para>
<db:programlisting language="cpp">QT_VIRTUALKEYBOARD_STYLE=test virtualkeyboard
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="using-qt-virtual-keyboard-with-qquickwidget">
<db:title>Using Qt Virtual Keyboard with QQuickWidget</db:title>
<db:para>When using Qt Virtual Keyboard in a <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> on a touch device, it is necessary to set the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_AcceptTouchEvents</db:link> attribute via <db:link xlink:href="qwidget.xml#setAttribute">QWidget::setAttribute</db:link>(). Without this attribute set, events from a touch device will be converted into synthesized mouse events.</db:para>
</db:section>
</db:article>
