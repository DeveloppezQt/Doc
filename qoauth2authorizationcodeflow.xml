<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOAuth2AuthorizationCodeFlow Class</db:title>
<db:productname>QtNetworkAuth</db:productname>
<db:edition>Qt Network Authorization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Network Authorization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qoauth2authorizationcodeflow.xml">QOAuth2AuthorizationCodeFlow</db:link> class provides an implementation of the <db:link xlink:href="https://tools.ietf.org/html/rfc6749#section-4.1">Authorization Code Grant</db:link> flow.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOAuth2AuthorizationCodeFlow</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += networkauth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractoauth2.xml" xlink:role="class">QAbstractOAuth2</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOAuth2AuthorizationCodeFlow is part of <db:simplelist><db:member>oauth</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class implements the <db:link xlink:href="https://tools.ietf.org/html/rfc6749#section-4.1">Authorization Code Grant</db:link> flow, which is used both to obtain and to refresh access tokens. It is a redirection-based flow so the user will need access to a web browser.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="accessTokenUrl-prop">
<db:title>accessTokenUrl : QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>accessTokenUrl</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">accessTokenUrl</db:synopsisinfo>
<db:synopsisinfo role="setter">setAccessTokenUrl</db:synopsisinfo>
<db:synopsisinfo role="notifier">accessTokenUrlChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URL used to convert the temporary code received during the authorization response.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc6749#section-4.1.3">Access Token Request</db:link></db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qoauth2authorizationcodeflow.xml#accessTokenUrl">accessTokenUrl</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qoauth2authorizationcodeflow.xml#setAccessTokenUrl">setAccessTokenUrl</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>accessTokenUrl</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">accessTokenUrlChanged</db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>accessTokenUrl</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOAuth2AuthorizationCodeFlow">
<db:title>[explicit] QOAuth2AuthorizationCodeFlow::QOAuth2AuthorizationCodeFlow(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOAuth2AuthorizationCodeFlow</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth2AuthorizationCodeFlow(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qoauth2authorizationcodeflow.xml">QOAuth2AuthorizationCodeFlow</db:link> object with parent object <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QOAuth2AuthorizationCodeFlow-1">
<db:title>[explicit] QOAuth2AuthorizationCodeFlow::QOAuth2AuthorizationCodeFlow(QNetworkAccessManager *<db:emphasis>manager</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOAuth2AuthorizationCodeFlow</db:methodname>
<db:methodparam>
<db:type>QNetworkAccessManager *</db:type>
<db:parameter>manager</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth2AuthorizationCodeFlow(QNetworkAccessManager *manager, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qoauth2authorizationcodeflow.xml">QOAuth2AuthorizationCodeFlow</db:link> object using <db:code role="parameter">parent</db:code> as parent and sets <db:code role="parameter">manager</db:code> as the network access manager.</db:para>
</db:section>
<db:section xml:id="QOAuth2AuthorizationCodeFlow-2">
<db:title>QOAuth2AuthorizationCodeFlow::QOAuth2AuthorizationCodeFlow(const QString &amp;<db:emphasis>clientIdentifier</db:emphasis>, QNetworkAccessManager *<db:emphasis>manager</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOAuth2AuthorizationCodeFlow</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>clientIdentifier</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QNetworkAccessManager *</db:type>
<db:parameter>manager</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth2AuthorizationCodeFlow(const QString &amp;clientIdentifier, QNetworkAccessManager *manager, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qoauth2authorizationcodeflow.xml">QOAuth2AuthorizationCodeFlow</db:link> object using <db:code role="parameter">parent</db:code> as parent and sets <db:code role="parameter">manager</db:code> as the network access manager. The client identifier is set to <db:code role="parameter">clientIdentifier</db:code>.</db:para>
</db:section>
<db:section xml:id="QOAuth2AuthorizationCodeFlow-3">
<db:title>QOAuth2AuthorizationCodeFlow::QOAuth2AuthorizationCodeFlow(const QUrl &amp;<db:emphasis>authenticateUrl</db:emphasis>, const QUrl &amp;<db:emphasis>accessTokenUrl</db:emphasis>, QNetworkAccessManager *<db:emphasis>manager</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOAuth2AuthorizationCodeFlow</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>authenticateUrl</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>accessTokenUrl</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QNetworkAccessManager *</db:type>
<db:parameter>manager</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth2AuthorizationCodeFlow(const QUrl &amp;authenticateUrl, const QUrl &amp;accessTokenUrl, QNetworkAccessManager *manager, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qoauth2authorizationcodeflow.xml">QOAuth2AuthorizationCodeFlow</db:link> object using <db:code role="parameter">parent</db:code> as parent and sets <db:code role="parameter">manager</db:code> as the network access manager. The authenticate URL is set to <db:code role="parameter">authenticateUrl</db:code> and the access token URL is set to <db:code role="parameter">accessTokenUrl</db:code>.</db:para>
</db:section>
<db:section xml:id="QOAuth2AuthorizationCodeFlow-4">
<db:title>QOAuth2AuthorizationCodeFlow::QOAuth2AuthorizationCodeFlow(const QString &amp;<db:emphasis>clientIdentifier</db:emphasis>, const QUrl &amp;<db:emphasis>authenticateUrl</db:emphasis>, const QUrl &amp;<db:emphasis>accessTokenUrl</db:emphasis>, QNetworkAccessManager *<db:emphasis>manager</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOAuth2AuthorizationCodeFlow</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>clientIdentifier</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>authenticateUrl</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>accessTokenUrl</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QNetworkAccessManager *</db:type>
<db:parameter>manager</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth2AuthorizationCodeFlow(const QString &amp;clientIdentifier, const QUrl &amp;authenticateUrl, const QUrl &amp;accessTokenUrl, QNetworkAccessManager *manager, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qoauth2authorizationcodeflow.xml">QOAuth2AuthorizationCodeFlow</db:link> object using <db:code role="parameter">parent</db:code> as parent and sets <db:code role="parameter">manager</db:code> as the network access manager. The client identifier is set to <db:code role="parameter">clientIdentifier</db:code> the authenticate URL is set to <db:code role="parameter">authenticateUrl</db:code> and the access token URL is set to <db:code role="parameter">accessTokenUrl</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QOAuth2AuthorizationCodeFlow">
<db:title>[virtual] QOAuth2AuthorizationCodeFlow::~QOAuth2AuthorizationCodeFlow()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QOAuth2AuthorizationCodeFlow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QOAuth2AuthorizationCodeFlow()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qoauth2authorizationcodeflow.xml">QOAuth2AuthorizationCodeFlow</db:link> instance.</db:para>
</db:section>
<db:section xml:id="accessTokenUrl">
<db:title>QUrl QOAuth2AuthorizationCodeFlow::accessTokenUrl() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>accessTokenUrl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">accessTokenUrl</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl accessTokenUrl() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the URL used to request the access token.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qoauth2authorizationcodeflow.xml#accessTokenUrl-prop">accessTokenUrl</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth2authorizationcodeflow.xml#setAccessTokenUrl">setAccessTokenUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buildAuthenticateUrl">
<db:title>[protected] QUrl QOAuth2AuthorizationCodeFlow::buildAuthenticateUrl(const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:type>QUrl</db:type>
<db:methodname>buildAuthenticateUrl</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl buildAuthenticateUrl(const QVariantMap &amp;parameters)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates an authentication URL to be used in the <db:link xlink:href="https://tools.ietf.org/html/rfc6749#section-4.1.1">Authorization Request</db:link> using <db:code role="parameter">parameters</db:code>.</db:para>
</db:section>
<db:section xml:id="grant">
<db:title>[override virtual] void QOAuth2AuthorizationCodeFlow::grant()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>grant</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void grant() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractoauth.xml#grant" role="function">QAbstractOAuth::grant()</db:link>.</db:para>
<db:para>Starts the authentication flow as described in <db:link xlink:href="https://tools.ietf.org/html/rfc6749#section-4.1">The OAuth 2.0 Authorization Framework</db:link></db:para>
</db:section>
<db:section xml:id="refreshAccessToken">
<db:title>void QOAuth2AuthorizationCodeFlow::refreshAccessToken()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>refreshAccessToken</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void refreshAccessToken()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Call this function to refresh the token. Access tokens are not permanent. After a time specified along with the access token when it was obtained, the access token will become invalid.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc6749#section-1.5">Refresh Token</db:link></db:para>
</db:section>
<db:section xml:id="requestAccessToken">
<db:title>[protected] void QOAuth2AuthorizationCodeFlow::requestAccessToken(const QString &amp;<db:emphasis>code</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>requestAccessToken</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>code</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestAccessToken(const QString &amp;code)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Requests an access token from the received <db:code role="parameter">code</db:code>. The <db:code role="parameter">code</db:code> is received as a response when the user completes a successful authentication in the browser.</db:para>
</db:section>
<db:section xml:id="resourceOwnerAuthorization">
<db:title>[override virtual protected] void QOAuth2AuthorizationCodeFlow::resourceOwnerAuthorization(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resourceOwnerAuthorization</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resourceOwnerAuthorization(const QUrl &amp;url, const QVariantMap &amp;parameters) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractoauth.xml#resourceOwnerAuthorization" role="function">QAbstractOAuth::resourceOwnerAuthorization(const QUrl &amp;url, const QVariantMap &amp;parameters)</db:link>.</db:para>
<db:para>Builds an authentication URL using <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code>. This function emits an <db:link xlink:href="qabstractoauth.xml#authorizeWithBrowser">authorizeWithBrowser</db:link>() signal to require user interaction.</db:para>
</db:section>
<db:section xml:id="setAccessTokenUrl">
<db:title>void QOAuth2AuthorizationCodeFlow::setAccessTokenUrl(const QUrl &amp;<db:emphasis>accessTokenUrl</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAccessTokenUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>accessTokenUrl</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">accessTokenUrl</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAccessTokenUrl(const QUrl &amp;accessTokenUrl)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the URL used to request the access token to <db:code role="parameter">accessTokenUrl</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qoauth2authorizationcodeflow.xml#accessTokenUrl-prop">accessTokenUrl</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth2authorizationcodeflow.xml#accessTokenUrl">accessTokenUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
