<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Image Composition Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how composition modes work in <db:link xlink:href="qpainter.xml">QPainter</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/imagecomposition-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="setting-up-the-resource-file">
<db:title>Setting Up The Resource File</db:title>
<db:para>The Image Composition example requires two source images, <db:emphasis>butterfly.png</db:emphasis> and <db:emphasis>checker.png</db:emphasis> that are embedded within <db:emphasis>imagecomposition.qrc</db:emphasis>. The file contains the following code:</db:para>
<db:programlisting language="cpp">&amp;lt;!DOCTYPE RCC&amp;gt;&amp;lt;RCC version=&quot;1.0&quot;&amp;gt;
&amp;lt;qresource&amp;gt;
    &amp;lt;file&amp;gt;images/butterfly.png&amp;lt;/file&amp;gt;
    &amp;lt;file&amp;gt;images/checker.png&amp;lt;/file&amp;gt;
&amp;lt;/qresource&amp;gt;
&amp;lt;/RCC&amp;gt;
</db:programlisting>
<db:para>For more information on resource files, see <db:link xlink:href="resources.xml">The Qt Resource System</db:link>.</db:para>
</db:section>
<db:section xml:id="imagecomposer-class-definition">
<db:title>ImageComposer Class Definition</db:title>
<db:para>The ImageComposer class is a subclass of <db:link xlink:href="qwidget.xml">QWidget</db:link> that implements three private slots, chooseSource(), chooseDestination(), and recalculateResult().</db:para>
<db:programlisting language="cpp">class ImageComposer : public QWidget
{
    Q_OBJECT

public:
    ImageComposer();

private slots:
    void chooseSource();
    void chooseDestination();
    void recalculateResult();
</db:programlisting>
<db:para>In addition, ImageComposer consists of five private functions, addOp(), chooseImage(), loadImage(), currentMode(), and imagePos(), as well as private instances of <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link>, <db:link xlink:href="qcombobox.xml">QComboBox</db:link>, <db:link xlink:href="qlabel.xml">QLabel</db:link>, and <db:link xlink:href="qimage.xml">QImage</db:link>.</db:para>
<db:programlisting language="cpp">private:
    void addOp(QPainter::CompositionMode mode, const QString &amp;amp;name);
    void chooseImage(const QString &amp;amp;title, QImage *image, QToolButton *button);
    void loadImage(const QString &amp;amp;fileName, QImage *image, QToolButton *button);
    QPainter::CompositionMode currentMode() const;
    QPoint imagePos(const QImage &amp;amp;image) const;

    QToolButton *sourceButton;
    QToolButton *destinationButton;
    QComboBox *operatorComboBox;
    QLabel *equalLabel;
    QLabel *resultLabel;

    QImage sourceImage;
    QImage destinationImage;
    QImage resultImage;
};
</db:programlisting>
</db:section>
<db:section xml:id="imagecomposer-class-implementation">
<db:title>ImageComposer Class Implementation</db:title>
<db:para>We declare a <db:link xlink:href="qsize.xml">QSize</db:link> object, resultSize, as a static constant with width and height equal to 200.</db:para>
<db:programlisting language="cpp">static const QSize resultSize(200, 200);
</db:programlisting>
<db:para>Within the constructor, we instantiate a <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link> object, sourceButton and set its <db:link xlink:href="qabstractbutton.xml#iconSize-prop">iconSize</db:link> property to resultSize. The operatorComboBox is instantiated and then populated using the addOp() function. This function accepts a <db:link xlink:href="qpainter.xml#CompositionMode-enum">QPainter::CompositionMode</db:link>, <db:code role="parameter">mode</db:code>, and a <db:link xlink:href="qstring.xml">QString</db:link>, <db:code role="parameter">name</db:code>, representing the name of the composition mode.</db:para>
<db:programlisting language="cpp">ImageComposer::ImageComposer()
{
    sourceButton = new QToolButton;
    sourceButton-&amp;gt;setIconSize(resultSize);

    operatorComboBox = new QComboBox;
    addOp(QPainter::CompositionMode_SourceOver, tr(&quot;SourceOver&quot;));
    addOp(QPainter::CompositionMode_DestinationOver, tr(&quot;DestinationOver&quot;));
    addOp(QPainter::CompositionMode_Clear, tr(&quot;Clear&quot;));
    addOp(QPainter::CompositionMode_Source, tr(&quot;Source&quot;));
    addOp(QPainter::CompositionMode_Destination, tr(&quot;Destination&quot;));
    addOp(QPainter::CompositionMode_SourceIn, tr(&quot;SourceIn&quot;));
    addOp(QPainter::CompositionMode_DestinationIn, tr(&quot;DestinationIn&quot;));
    addOp(QPainter::CompositionMode_SourceOut, tr(&quot;SourceOut&quot;));
    addOp(QPainter::CompositionMode_DestinationOut, tr(&quot;DestinationOut&quot;));
    addOp(QPainter::CompositionMode_SourceAtop, tr(&quot;SourceAtop&quot;));
    addOp(QPainter::CompositionMode_DestinationAtop, tr(&quot;DestinationAtop&quot;));
    addOp(QPainter::CompositionMode_Xor, tr(&quot;Xor&quot;));
    addOp(QPainter::CompositionMode_Plus, tr(&quot;Plus&quot;));
    addOp(QPainter::CompositionMode_Multiply, tr(&quot;Multiply&quot;));
    addOp(QPainter::CompositionMode_Screen, tr(&quot;Screen&quot;));
    addOp(QPainter::CompositionMode_Overlay, tr(&quot;Overlay&quot;));
    addOp(QPainter::CompositionMode_Darken, tr(&quot;Darken&quot;));
    addOp(QPainter::CompositionMode_Lighten, tr(&quot;Lighten&quot;));
    addOp(QPainter::CompositionMode_ColorDodge, tr(&quot;ColorDodge&quot;));
    addOp(QPainter::CompositionMode_ColorBurn, tr(&quot;ColorBurn&quot;));
    addOp(QPainter::CompositionMode_HardLight, tr(&quot;HardLight&quot;));
    addOp(QPainter::CompositionMode_SoftLight, tr(&quot;SoftLight&quot;));
    addOp(QPainter::CompositionMode_Difference, tr(&quot;Difference&quot;));
    addOp(QPainter::CompositionMode_Exclusion, tr(&quot;Exclusion&quot;));
</db:programlisting>
<db:para>The destinationButton is instantiated and its <db:link xlink:href="qabstractbutton.xml#iconSize-prop">iconSize</db:link> property is set to resultSize as well. The <db:link xlink:href="qlabel.xml">QLabel</db:link>s equalLabel and resultLabel are created and resultLabel's <db:link xlink:href="qwidget.xml#minimumWidth-prop">minimumWidth</db:link> is set.</db:para>
<db:programlisting language="cpp">    destinationButton = new QToolButton;
    destinationButton-&amp;gt;setIconSize(resultSize);

    equalLabel = new QLabel(tr(&quot;=&quot;));

    resultLabel = new QLabel;
    resultLabel-&amp;gt;setMinimumWidth(resultSize.width());
</db:programlisting>
<db:para>We connect the following signals to their corresponding slots:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>sourceButton's <db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>() signal is connected to chooseSource(),</db:para>
</db:listitem>
<db:listitem>
<db:para>operatorComboBox's <db:link xlink:href="qcombobox.xml#activated">activated</db:link>() signal is connected to recalculateResult(), and</db:para>
</db:listitem>
<db:listitem>
<db:para>destinationButton's <db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>() signal is connected to chooseDestination().</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">    connect(sourceButton, &amp;amp;QAbstractButton::clicked,
            this, &amp;amp;ImageComposer::chooseSource);
    connect(operatorComboBox, &amp;amp;QComboBox::activated,
            this, &amp;amp;ImageComposer::recalculateResult);
    connect(destinationButton, &amp;amp;QAbstractButton::clicked,
            this, &amp;amp;ImageComposer::chooseDestination);
</db:programlisting>
<db:para>A <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link>, mainLayout, is used to place all the widgets. Note that mainLayout's <db:link xlink:href="qlayout.xml#sizeConstraint-prop">sizeConstraint</db:link> property is set to <db:link xlink:href="qlayout.xml#SizeConstraint-enum">QLayout::SetFixedSize</db:link>, which means that ImageComposer's size cannot be resized at all.</db:para>
<db:programlisting language="cpp">    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&amp;gt;addWidget(sourceButton, 0, 0, 3, 1);
    mainLayout-&amp;gt;addWidget(operatorComboBox, 1, 1);
    mainLayout-&amp;gt;addWidget(destinationButton, 0, 2, 3, 1);
    mainLayout-&amp;gt;addWidget(equalLabel, 1, 3);
    mainLayout-&amp;gt;addWidget(resultLabel, 0, 4, 3, 1);
    mainLayout-&amp;gt;setSizeConstraint(QLayout::SetFixedSize);
    setLayout(mainLayout);
</db:programlisting>
<db:para>We create a <db:link xlink:href="qimage.xml">QImage</db:link>, resultImage, and we invoke loadImage() twice to load both the image files in our <db:emphasis>imagecomposition.qrc</db:emphasis> file. Then, we set the <db:link xlink:href="qwidget.xml#windowTitle-prop">windowTitle</db:link> property to &quot;Image Composition&quot;.</db:para>
<db:programlisting language="cpp">    resultImage = QImage(resultSize, QImage::Format_ARGB32_Premultiplied);

    loadImage(&quot;:/images/butterfly.png&quot;, &amp;amp;sourceImage, sourceButton);
    loadImage(&quot;:/images/checker.png&quot;, &amp;amp;destinationImage, destinationButton);

    setWindowTitle(tr(&quot;Image Composition&quot;));
}
</db:programlisting>
<db:para>The chooseSource() and chooseDestination() functions are convenience functions that invoke chooseImage() with specific parameters.</db:para>
<db:programlisting language="cpp">void ImageComposer::chooseSource()
{
    chooseImage(tr(&quot;Choose Source Image&quot;), &amp;amp;sourceImage, sourceButton);
}

void ImageComposer::chooseDestination()
{
    chooseImage(tr(&quot;Choose Destination Image&quot;), &amp;amp;destinationImage, destinationButton);
}
</db:programlisting>
<db:para>The chooseImage() function loads an image of the user's choice, depending on the <db:code role="parameter">title</db:code>, <db:code role="parameter">image</db:code>, and <db:code role="parameter">button</db:code>.</db:para>
<db:programlisting language="cpp">void ImageComposer::chooseImage(const QString &amp;amp;title, QImage *image,
                                QToolButton *button)
{
    QString fileName = QFileDialog::getOpenFileName(this, title);
    if (!fileName.isEmpty())
        loadImage(fileName, image, button);
}
</db:programlisting>
<db:para>The recalculateResult() function is used to calculate amd display the result of combining the two images together with the user's choice of composition mode.</db:para>
<db:programlisting language="cpp">void ImageComposer::recalculateResult()
{
    QPainter::CompositionMode mode = currentMode();

    QPainter painter(&amp;amp;resultImage);
    painter.setCompositionMode(QPainter::CompositionMode_Source);
    painter.fillRect(resultImage.rect(), Qt::transparent);
    painter.setCompositionMode(QPainter::CompositionMode_SourceOver);
    painter.drawImage(0, 0, destinationImage);
    painter.setCompositionMode(mode);
    painter.drawImage(0, 0, sourceImage);
    painter.setCompositionMode(QPainter::CompositionMode_DestinationOver);
    painter.fillRect(resultImage.rect(), Qt::white);
    painter.end();

    resultLabel-&amp;gt;setPixmap(QPixmap::fromImage(resultImage));
}
</db:programlisting>
<db:para>The addOp() function adds an item to the operatorComboBox using <db:link xlink:href="qcombobox.xml">QComboBox</db:link>'s <db:link xlink:href="qcombobox.xml#addItem">addItem</db:link> function. This function accepts a <db:link xlink:href="qpainter.xml#CompositionMode-enum">QPainter::CompositionMode</db:link>, <db:code role="parameter">mode</db:code>, and a <db:link xlink:href="qstring.xml">QString</db:link>, <db:code role="parameter">name</db:code>. The rectangle is filled with Qt::Transparent and both the sourceImage and destinationImage are painted, before displaying it on resultLabel.</db:para>
<db:programlisting language="cpp">void ImageComposer::addOp(QPainter::CompositionMode mode, const QString &amp;amp;name)
{
    operatorComboBox-&amp;gt;addItem(name, mode);
}
</db:programlisting>
<db:para>The loadImage() function paints a transparent background using <db:link xlink:href="qpainter.xml#fillRect">fillRect</db:link>() and draws image in a centralized position using <db:link xlink:href="qpainter.xml#drawImage">drawImage</db:link>(). This image is then set as the button's icon.</db:para>
<db:programlisting language="cpp">void ImageComposer::loadImage(const QString &amp;amp;fileName, QImage *image,
                              QToolButton *button)
{
    image-&amp;gt;load(fileName);

    // Scale the image to given size
    *image = image-&amp;gt;scaled(resultSize, Qt::KeepAspectRatio);

    QImage fixedImage(resultSize, QImage::Format_ARGB32_Premultiplied);
    QPainter painter(&amp;amp;fixedImage);
    painter.setCompositionMode(QPainter::CompositionMode_Source);
    painter.fillRect(fixedImage.rect(), Qt::transparent);
    painter.setCompositionMode(QPainter::CompositionMode_SourceOver);
    painter.drawImage(imagePos(*image), *image);
    painter.end();
    button-&amp;gt;setIcon(QPixmap::fromImage(fixedImage));

    *image = fixedImage;

    recalculateResult();
}
</db:programlisting>
<db:para>The currentMode() function returns the composition mode currently selected in operatorComboBox.</db:para>
<db:programlisting language="cpp">QPainter::CompositionMode ImageComposer::currentMode() const
{
    return (QPainter::CompositionMode)
           operatorComboBox-&amp;gt;itemData(operatorComboBox-&amp;gt;currentIndex()).toInt();
}
</db:programlisting>
<db:para>We use the imagePos() function to ensure that images loaded onto the <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link> objects, sourceButton and destinationButton, are centralized.</db:para>
<db:programlisting language="cpp">QPoint ImageComposer::imagePos(const QImage &amp;amp;image) const
{
    return QPoint((resultSize.width() - image.width()) / 2,
                  (resultSize.height() - image.height()) / 2);
}
</db:programlisting>
</db:section>
<db:section xml:id="the-main-function">
<db:title>The main() Function</db:title>
<db:para>The main() function instantiates <db:link xlink:href="qapplication.xml">QApplication</db:link> and ImageComposer and invokes its <db:link xlink:href="qwidget.xml#show">show</db:link>() function.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    ImageComposer composer;
    composer.show();
    return app.exec();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/painting/imagecomposition?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
