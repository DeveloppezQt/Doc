<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QGestureRecognizer Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link> class provides the infrastructure for gesture recognition.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGestureRecognizer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGestureRecognizer is part of <db:simplelist><db:member>gestures</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Gesture recognizers are responsible for creating and managing <db:link xlink:href="qgesture.xml">QGesture</db:link> objects and monitoring input events sent to <db:link xlink:href="qwidget.xml">QWidget</db:link> and <db:link xlink:href="qgraphicsobject.xml">QGraphicsObject</db:link> subclasses. <db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link> is the base class for implementing custom gestures.</db:para>
<db:para>Developers that only need to provide gesture recognition for standard gestures do not need to use this class directly. Instances will be created behind the scenes by the framework.</db:para>
<db:para>For an overview of gesture handling in Qt and information on using gestures in your applications, see the <db:link xlink:href="gestures-overview.xml">Gestures in Widgets and Graphics View</db:link> document.</db:para>
<db:section xml:id="recognizing-gestures">
<db:title>Recognizing Gestures</db:title>
<db:para>The process of recognizing gestures involves filtering input events sent to specific objects, and modifying the associated <db:link xlink:href="qgesture.xml">QGesture</db:link> objects to include relevant information about the user's input.</db:para>
<db:para>Gestures are created when the framework calls <db:link xlink:href="qgesturerecognizer.xml#create">create</db:link>() to handle user input for a particular instance of a <db:link xlink:href="qwidget.xml">QWidget</db:link> or <db:link xlink:href="qgraphicsobject.xml">QGraphicsObject</db:link> subclass. A <db:link xlink:href="qgesture.xml">QGesture</db:link> object is created for each widget or item that is configured to use gestures.</db:para>
<db:para>Once a <db:link xlink:href="qgesture.xml">QGesture</db:link> has been created for a target object, the gesture recognizer will receive events for it in its <db:link xlink:href="qgesturerecognizer.xml#recognize">recognize</db:link>() handler function.</db:para>
<db:para>When a gesture is canceled, the <db:link xlink:href="qgesturerecognizer.xml#reset">reset</db:link>() function is called, giving the recognizer the chance to update the appropriate properties in the corresponding <db:link xlink:href="qgesture.xml">QGesture</db:link> object.</db:para>
</db:section>
<db:section xml:id="supporting-new-gestures">
<db:title>Supporting New Gestures</db:title>
<db:para>To add support for new gestures, you need to derive from <db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link> to create a custom recognizer class, construct an instance of this class, and register it with the application by calling <db:link xlink:href="qgesturerecognizer.xml#registerRecognizer">QGestureRecognizer::registerRecognizer</db:link>(). You can also subclass <db:link xlink:href="qgesture.xml">QGesture</db:link> to create a custom gesture class, or rely on dynamic properties to express specific details of the gesture you want to handle.</db:para>
<db:para>Your custom <db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link> subclass needs to reimplement the <db:link xlink:href="qgesturerecognizer.xml#recognize">recognize</db:link>() function to handle and filter the incoming input events for <db:link xlink:href="qwidget.xml">QWidget</db:link> and <db:link xlink:href="qgraphicsobject.xml">QGraphicsObject</db:link> subclasses. Although the logic for gesture recognition is implemented in this function, you can store persistent information about the state of the recognition process in the <db:link xlink:href="qgesture.xml">QGesture</db:link> object supplied. The <db:link xlink:href="qgesturerecognizer.xml#recognize">recognize</db:link>() function must return a value of <db:link xlink:href="qgesturerecognizer.xml#ResultFlag-enum">QGestureRecognizer::Result</db:link> that indicates the state of recognition for a given gesture and target object. This determines whether or not a gesture event will be delivered to a target object.</db:para>
<db:para>If you choose to represent a gesture by a custom <db:link xlink:href="qgesture.xml">QGesture</db:link> subclass, you will need to reimplement the <db:link xlink:href="qgesturerecognizer.xml#create">create</db:link>() function to construct instances of your gesture class. Similarly, you may need to reimplement the <db:link xlink:href="qgesturerecognizer.xml#reset">reset</db:link>() function if your custom gesture objects need to be specially handled when a gesture is canceled.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgesture.xml">QGesture</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ResultFlag-enum">
<db:title>enum QGestureRecognizer::ResultFlag</db:title>
<db:bridgehead renderas="sect2">flags QGestureRecognizer::Result</db:bridgehead>
<db:para>This enum describes the result of the current event filtering step in a gesture recognizer state machine.</db:para>
<db:para>The result consists of a state value (one of Ignore, MayBeGesture, TriggerGesture, FinishGesture, CancelGesture) and an optional hint (ConsumeEventHint).</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link></db:emphasis>::Ignore</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>The event does not change the state of the recognizer.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link></db:emphasis>::MayBeGesture</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>The event changed the internal state of the recognizer, but it isn't clear yet if it is a gesture or not. The recognizer needs to filter more events to decide. Gesture recognizers in the MayBeGesture state may be reset automatically if they take too long to recognize gestures.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link></db:emphasis>::TriggerGesture</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>The gesture has been triggered and the appropriate <db:link xlink:href="qgesture.xml">QGesture</db:link> object will be delivered to the target as a part of a <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link></db:emphasis>::FinishGesture</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>The gesture has been finished successfully and the appropriate <db:link xlink:href="qgesture.xml">QGesture</db:link> object will be delivered to the target as a part of a <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link></db:emphasis>::CancelGesture</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>The event made it clear that it is not a gesture. If the gesture recognizer was in GestureTriggered state before, then the gesture is canceled and the appropriate <db:link xlink:href="qgesture.xml">QGesture</db:link> object will be delivered to the target as a part of a <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link></db:emphasis>::ConsumeEventHint</db:code></db:para>
</db:td>
<db:td><db:code>0x0100</db:code></db:td>
<db:td>
<db:para>This hint specifies that the gesture framework should consume the filtered event and not deliver it to the receiver.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Result</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ResultFlag&gt;. </db:code>It stores an OR combination of <db:code>ResultFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgesturerecognizer.xml#recognize">QGestureRecognizer::recognize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGestureRecognizer">
<db:title>QGestureRecognizer::QGestureRecognizer()</db:title>
<db:para>Constructs a new gesture recognizer object.</db:para>
</db:section>
<db:section xml:id="dtor.QGestureRecognizer">
<db:title>[virtual noexcept] QGestureRecognizer::~QGestureRecognizer()</db:title>
<db:para>Destroys the gesture recognizer.</db:para>
</db:section>
<db:section xml:id="create">
<db:title>[virtual] QGesture *QGestureRecognizer::create(QObject *<db:emphasis>target</db:emphasis>)</db:title>
<db:para>This function is called by Qt to create a new <db:link xlink:href="qgesture.xml">QGesture</db:link> object for the given <db:code role="parameter">target</db:code> (<db:link xlink:href="qwidget.xml">QWidget</db:link> or <db:link xlink:href="qgraphicsobject.xml">QGraphicsObject</db:link>).</db:para>
<db:para>Reimplement this function to create a custom <db:link xlink:href="qgesture.xml">QGesture</db:link>-derived gesture object if necessary.</db:para>
<db:para>The application takes ownership of the created gesture object.</db:para>
</db:section>
<db:section xml:id="recognize">
<db:title>[pure virtual] QGestureRecognizer::Result QGestureRecognizer::recognize(QGesture *<db:emphasis>gesture</db:emphasis>, QObject *<db:emphasis>watched</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Handles the given <db:code role="parameter">event</db:code> for the <db:code role="parameter">watched</db:code> object, updating the state of the <db:code role="parameter">gesture</db:code> object as required, and returns a suitable result for the current recognition step.</db:para>
<db:para>This function is called by the framework to allow the recognizer to filter input events dispatched to <db:link xlink:href="qwidget.xml">QWidget</db:link> or <db:link xlink:href="qgraphicsobject.xml">QGraphicsObject</db:link> instances that it is monitoring.</db:para>
<db:para>The result reflects how much of the gesture has been recognized. The state of the <db:code role="parameter">gesture</db:code> object is set depending on the result.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgesturerecognizer.xml#ResultFlag-enum">QGestureRecognizer::Result</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerRecognizer">
<db:title>[static] Qt::GestureType QGestureRecognizer::registerRecognizer(QGestureRecognizer *<db:emphasis>recognizer</db:emphasis>)</db:title>
<db:para>Registers the given <db:code role="parameter">recognizer</db:code> in the gesture framework and returns a gesture ID for it.</db:para>
<db:para>The application takes ownership of the <db:code role="parameter">recognizer</db:code> and returns the gesture type ID associated with it. For gesture recognizers which handle custom <db:link xlink:href="qgesture.xml">QGesture</db:link> objects (i.e., those which return <db:link xlink:href="qt.xml#GestureType-enum">Qt::CustomGesture</db:link> in a QGesture::gestureType() function) the return value is a generated gesture ID with the <db:link xlink:href="qt.xml#GestureType-enum">Qt::CustomGesture</db:link> flag set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgesturerecognizer.xml#unregisterRecognizer">unregisterRecognizer</db:link>()</db:member>
<db:member><db:link xlink:href="qgesturerecognizer.xml#create">QGestureRecognizer::create</db:link>()</db:member>
<db:member><db:link xlink:href="qgesture.xml">QGesture</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>[virtual] void QGestureRecognizer::reset(QGesture *<db:emphasis>gesture</db:emphasis>)</db:title>
<db:para>This function is called by the framework to reset a given <db:code role="parameter">gesture</db:code>.</db:para>
<db:para>Reimplement this function to implement additional requirements for custom <db:link xlink:href="qgesture.xml">QGesture</db:link> objects. This may be necessary if you implement a custom <db:link xlink:href="qgesture.xml">QGesture</db:link> whose properties need special handling when the gesture is reset.</db:para>
</db:section>
<db:section xml:id="unregisterRecognizer">
<db:title>[static] void QGestureRecognizer::unregisterRecognizer(Qt::GestureType <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Unregisters all gesture recognizers of the specified <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgesturerecognizer.xml#registerRecognizer">registerRecognizer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
