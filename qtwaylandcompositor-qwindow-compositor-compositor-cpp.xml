<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Wayland Compositor Examples - QWindow Compositor</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qwindow.xml">QWindow</db:link> Compositor is an example that demonstrates how to write a Wayland compositor in C++.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Wayland module
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;compositor.h&quot;

#include &lt;QMouseEvent&gt;
#include &lt;QKeyEvent&gt;
#include &lt;QTouchEvent&gt;

#include &lt;QtWaylandCompositor/QWaylandXdgShellV5&gt;
#include &lt;QtWaylandCompositor/QWaylandWlShellSurface&gt;
#include &lt;QtWaylandCompositor/qwaylandseat.h&gt;
#include &lt;QtWaylandCompositor/qwaylanddrag.h&gt;

#include &lt;QDebug&gt;
#include &lt;QOpenGLContext&gt;

#ifndef GL_TEXTURE_EXTERNAL_OES
#define GL_TEXTURE_EXTERNAL_OES 0x8D65
#endif

View::View()
    : m_textureTarget(GL_TEXTURE_2D)
    , m_texture(0)
    , m_wlShellSurface(nullptr)
    , m_xdgSurface(nullptr)
    , m_xdgPopup(nullptr)
    , m_parentView(nullptr)
{}

QOpenGLTexture *View::getTexture()
{
    if (advance()) {
        QWaylandBufferRef buf = currentBuffer();
        m_texture = buf.toOpenGLTexture();
    }

    return m_texture;
}

bool View::isCursor() const
{
    return surface()-&gt;isCursorSurface();
}

void View::onXdgSetMaximized()
{
    m_xdgSurface-&gt;sendMaximized(output()-&gt;geometry().size());

    // An improvement here, would have been to wait for the commit after the ack_configure for the
    // request above before moving the window. This would have prevented the window from being
    // moved until the contents of the window had actually updated. This improvement is left as an
    // exercise for the reader.
    setPosition(QPoint(0, 0));
}

void View::onXdgUnsetMaximized()
{
    m_xdgSurface-&gt;sendUnmaximized();
}

void View::onXdgSetFullscreen(QWaylandOutput* clientPreferredOutput)
{
    QWaylandOutput *outputToFullscreen = clientPreferredOutput
            ? clientPreferredOutput
            : output();

    m_xdgSurface-&gt;sendFullscreen(outputToFullscreen-&gt;geometry().size());

    // An improvement here, would have been to wait for the commit after the ack_configure for the
    // request above before moving the window. This would have prevented the window from being
    // moved until the contents of the window had actually updated. This improvement is left as an
    // exercise for the reader.
    setPosition(outputToFullscreen-&gt;position());
}

void View::onOffsetForNextFrame(const QPoint &amp;offset)
{
    m_offset = offset;
    setPosition(position() + offset);
}

void View::onXdgUnsetFullscreen()
{
    onXdgUnsetMaximized();
}

Compositor::Compositor(QWindow *window)
    : QWaylandCompositor()
    , m_window(window)
    , m_wlShell(new QWaylandWlShell(this))
    , m_xdgShell(new QWaylandXdgShellV5(this))
{
    connect(m_wlShell, &amp;QWaylandWlShell::wlShellSurfaceCreated, this, &amp;Compositor::onWlShellSurfaceCreated);
    connect(m_xdgShell, &amp;QWaylandXdgShellV5::xdgSurfaceCreated, this, &amp;Compositor::onXdgSurfaceCreated);
    connect(m_xdgShell, &amp;QWaylandXdgShellV5::xdgPopupRequested, this, &amp;Compositor::onXdgPopupRequested);
}

Compositor::~Compositor()
{
}

void Compositor::create()
{
    QWaylandOutput *output = new QWaylandOutput(this, m_window);
    QWaylandOutputMode mode(QSize(800, 600), 60000);
    output-&gt;addMode(mode, true);
    QWaylandCompositor::create();
    output-&gt;setCurrentMode(mode);

    connect(this, &amp;QWaylandCompositor::surfaceCreated, this, &amp;Compositor::onSurfaceCreated);
    connect(defaultSeat(), &amp;QWaylandSeat::cursorSurfaceRequest, this, &amp;Compositor::adjustCursorSurface);
    connect(defaultSeat()-&gt;drag(), &amp;QWaylandDrag::dragStarted, this, &amp;Compositor::startDrag);

    connect(this, &amp;QWaylandCompositor::subsurfaceChanged, this, &amp;Compositor::onSubsurfaceChanged);
}

void Compositor::onSurfaceCreated(QWaylandSurface *surface)
{
    connect(surface, &amp;QWaylandSurface::surfaceDestroyed, this, &amp;Compositor::surfaceDestroyed);
    connect(surface, &amp;QWaylandSurface::hasContentChanged, this, &amp;Compositor::surfaceHasContentChanged);
    connect(surface, &amp;QWaylandSurface::redraw, this, &amp;Compositor::triggerRender);

    connect(surface, &amp;QWaylandSurface::subsurfacePositionChanged, this, &amp;Compositor::onSubsurfacePositionChanged);

    View *view = new View;
    view-&gt;setSurface(surface);
    view-&gt;setOutput(outputFor(m_window));
    m_views &lt;&lt; view;
    connect(view, &amp;QWaylandView::surfaceDestroyed, this, &amp;Compositor::viewSurfaceDestroyed);
    connect(surface, &amp;QWaylandSurface::offsetForNextFrame, view, &amp;View::onOffsetForNextFrame);
}

void Compositor::surfaceHasContentChanged()
{
    QWaylandSurface *surface = qobject_cast&lt;QWaylandSurface *&gt;(sender());
    if (surface-&gt;hasContent()) {
        if (surface-&gt;role() == QWaylandWlShellSurface::role()
                || surface-&gt;role() == QWaylandXdgSurfaceV5::role()
                || surface-&gt;role() == QWaylandXdgPopupV5::role()) {
            defaultSeat()-&gt;setKeyboardFocus(surface);
        }
    }
    triggerRender();
}

void Compositor::surfaceDestroyed()
{
    triggerRender();
}

void Compositor::viewSurfaceDestroyed()
{
    View *view = qobject_cast&lt;View*&gt;(sender());
    m_views.removeAll(view);
    delete view;
}

View * Compositor::findView(const QWaylandSurface *s) const
{
    Q_FOREACH (View* view, m_views) {
        if (view-&gt;surface() == s)
            return view;
    }
    return Q_NULLPTR;
}

void Compositor::onWlShellSurfaceCreated(QWaylandWlShellSurface *wlShellSurface)
{
    connect(wlShellSurface, &amp;QWaylandWlShellSurface::startMove, this, &amp;Compositor::onStartMove);
    connect(wlShellSurface, &amp;QWaylandWlShellSurface::startResize, this, &amp;Compositor::onWlStartResize);
    connect(wlShellSurface, &amp;QWaylandWlShellSurface::setTransient, this, &amp;Compositor::onSetTransient);
    connect(wlShellSurface, &amp;QWaylandWlShellSurface::setPopup, this, &amp;Compositor::onSetPopup);

    View *view = findView(wlShellSurface-&gt;surface());
    Q_ASSERT(view);
    view-&gt;m_wlShellSurface = wlShellSurface;
}

void Compositor::onXdgSurfaceCreated(QWaylandXdgSurfaceV5 *xdgSurface)
{
    connect(xdgSurface, &amp;QWaylandXdgSurfaceV5::startMove, this, &amp;Compositor::onStartMove);
    connect(xdgSurface, &amp;QWaylandXdgSurfaceV5::startResize, this, &amp;Compositor::onXdgStartResize);

    View *view = findView(xdgSurface-&gt;surface());
    Q_ASSERT(view);
    view-&gt;m_xdgSurface = xdgSurface;

    connect(xdgSurface, &amp;QWaylandXdgSurfaceV5::setMaximized, view, &amp;View::onXdgSetMaximized);
    connect(xdgSurface, &amp;QWaylandXdgSurfaceV5::setFullscreen, view, &amp;View::onXdgSetFullscreen);
    connect(xdgSurface, &amp;QWaylandXdgSurfaceV5::unsetMaximized, view, &amp;View::onXdgUnsetMaximized);
    connect(xdgSurface, &amp;QWaylandXdgSurfaceV5::unsetFullscreen, view, &amp;View::onXdgUnsetFullscreen);
}

void Compositor::onXdgPopupRequested(QWaylandSurface *surface, QWaylandSurface *parent,
                                     QWaylandSeat *seat, const QPoint &amp;position,
                                     const QWaylandResource &amp;resource)
{
    Q_UNUSED(seat);

    QWaylandXdgPopupV5 *xdgPopup = new QWaylandXdgPopupV5(m_xdgShell, surface, parent, position, resource);

    View *view = findView(surface);
    Q_ASSERT(view);

    View *parentView = findView(parent);
    Q_ASSERT(parentView);

    view-&gt;setPosition(parentView-&gt;position() + position);
    view-&gt;m_xdgPopup = xdgPopup;
}

void Compositor::onStartMove()
{
    closePopups();
    emit startMove();
}

void Compositor::onWlStartResize(QWaylandSeat *, QWaylandWlShellSurface::ResizeEdge edges)
{
    closePopups();
    emit startResize(int(edges), false);
}

void Compositor::onXdgStartResize(QWaylandSeat *seat,
                                  QWaylandXdgSurfaceV5::ResizeEdge edges)
{
    Q_UNUSED(seat);
    emit startResize(int(edges), true);
}

void Compositor::onSetTransient(QWaylandSurface *parent, const QPoint &amp;relativeToParent, bool inactive)
{
    Q_UNUSED(inactive);

    QWaylandWlShellSurface *wlShellSurface = qobject_cast&lt;QWaylandWlShellSurface*&gt;(sender());
    View *view = findView(wlShellSurface-&gt;surface());

    if (view) {
        raise(view);
        View *parentView = findView(parent);
        if (parentView)
            view-&gt;setPosition(parentView-&gt;position() + relativeToParent);
    }
}

void Compositor::onSetPopup(QWaylandSeat *seat, QWaylandSurface *parent, const QPoint &amp;relativeToParent)
{
    Q_UNUSED(seat);
    QWaylandWlShellSurface *surface = qobject_cast&lt;QWaylandWlShellSurface*&gt;(sender());
    View *view = findView(surface-&gt;surface());
    if (view) {
        raise(view);
        View *parentView = findView(parent);
        if (parentView)
            view-&gt;setPosition(parentView-&gt;position() + relativeToParent);
    }
}

void Compositor::onSubsurfaceChanged(QWaylandSurface *child, QWaylandSurface *parent)
{
    View *view = findView(child);
    View *parentView = findView(parent);
    view-&gt;setParentView(parentView);
}

void Compositor::onSubsurfacePositionChanged(const QPoint &amp;position)
{
    QWaylandSurface *surface = qobject_cast&lt;QWaylandSurface*&gt;(sender());
    if (!surface)
        return;
    View *view = findView(surface);
    view-&gt;setPosition(position);
    triggerRender();
}

void Compositor::triggerRender()
{
    m_window-&gt;requestUpdate();
}

void Compositor::startRender()
{
    QWaylandOutput *out = defaultOutput();
    if (out)
        out-&gt;frameStarted();
}

void Compositor::endRender()
{
    QWaylandOutput *out = defaultOutput();
    if (out)
        out-&gt;sendFrameCallbacks();
}

void Compositor::updateCursor()
{
    m_cursorView.advance();
    QImage image = m_cursorView.currentBuffer().image();
    if (!image.isNull())
        m_window-&gt;setCursor(QCursor(QPixmap::fromImage(image), m_cursorHotspotX, m_cursorHotspotY));
}

void Compositor::adjustCursorSurface(QWaylandSurface *surface, int hotspotX, int hotspotY)
{
    if ((m_cursorView.surface() != surface)) {
        if (m_cursorView.surface())
            disconnect(m_cursorView.surface(), &amp;QWaylandSurface::redraw, this, &amp;Compositor::updateCursor);
        if (surface)
            connect(surface, &amp;QWaylandSurface::redraw, this, &amp;Compositor::updateCursor);
    }

    m_cursorView.setSurface(surface);
    m_cursorHotspotX = hotspotX;
    m_cursorHotspotY = hotspotY;

    if (surface &amp;&amp; surface-&gt;hasContent())
        updateCursor();
}

void Compositor::closePopups()
{
    m_wlShell-&gt;closeAllPopups();
    m_xdgShell-&gt;closeAllPopups();
}

void Compositor::handleMouseEvent(QWaylandView *target, QMouseEvent *me)
{
    auto popClient = popupClient();
    if (target &amp;&amp; me-&gt;type() == QEvent::MouseButtonPress
            &amp;&amp; popClient &amp;&amp; popClient != target-&gt;surface()-&gt;client()) {
        closePopups();
    }

    QWaylandSeat *input = defaultSeat();
    QWaylandSurface *surface = target ? target-&gt;surface() : nullptr;
    switch (me-&gt;type()) {
        case QEvent::MouseButtonPress:
            input-&gt;sendMousePressEvent(me-&gt;button());
            if (surface != input-&gt;keyboardFocus()) {
                if (surface == nullptr
                        || surface-&gt;role() == QWaylandWlShellSurface::role()
                        || surface-&gt;role() == QWaylandXdgSurfaceV5::role()
                        || surface-&gt;role() == QWaylandXdgPopupV5::role()) {
                    input-&gt;setKeyboardFocus(surface);
                }
            }
            break;
    case QEvent::MouseButtonRelease:
         input-&gt;sendMouseReleaseEvent(me-&gt;button());
         break;
    case QEvent::MouseMove:
        input-&gt;sendMouseMoveEvent(target, me-&gt;localPos(), me-&gt;globalPos());
    default:
        break;
    }
}

void Compositor::handleResize(View *target, const QSize &amp;initialSize, const QPoint &amp;delta, int edge)
{
    QWaylandWlShellSurface *wlShellSurface = target-&gt;m_wlShellSurface;
    if (wlShellSurface) {
        QWaylandWlShellSurface::ResizeEdge edges = QWaylandWlShellSurface::ResizeEdge(edge);
        QSize newSize = wlShellSurface-&gt;sizeForResize(initialSize, delta, edges);
        wlShellSurface-&gt;sendConfigure(newSize, edges);
    }

    QWaylandXdgSurfaceV5 *xdgSurface = target-&gt;m_xdgSurface;
    if (xdgSurface) {
        QWaylandXdgSurfaceV5::ResizeEdge edges = static_cast&lt;QWaylandXdgSurfaceV5::ResizeEdge&gt;(edge);
        QSize newSize = xdgSurface-&gt;sizeForResize(initialSize, delta, edges);
        xdgSurface-&gt;sendResizing(newSize);
    }
}

void Compositor::startDrag()
{
    QWaylandDrag *currentDrag = defaultSeat()-&gt;drag();
    Q_ASSERT(currentDrag);
    View *iconView = findView(currentDrag-&gt;icon());
    iconView-&gt;setPosition(m_window-&gt;mapFromGlobal(QCursor::pos()));

    emit dragStarted(iconView);
}

void Compositor::handleDrag(View *target, QMouseEvent *me)
{
    QPointF pos = me-&gt;localPos();
    QWaylandSurface *surface = 0;
    if (target) {
        pos -= target-&gt;position();
        surface = target-&gt;surface();
    }
    QWaylandDrag *currentDrag = defaultSeat()-&gt;drag();
    currentDrag-&gt;dragMove(surface, pos);
    if (me-&gt;buttons() == Qt::NoButton) {
        m_views.removeOne(findView(currentDrag-&gt;icon()));
        currentDrag-&gt;drop();
    }
}

QWaylandClient *Compositor::popupClient() const
{
    auto client = m_wlShell-&gt;popupClient();
    return client ? client : m_xdgShell-&gt;popupClient();
}

// We only have a flat list of views, plus pointers from child to parent,
// so maintaining a stacking order gets a bit complex. A better data
// structure is left as an exercise for the reader.

static int findEndOfChildTree(const QList&lt;View*&gt; &amp;list, int index)
{
    int n = list.count();
    View *parent = list.at(index);
    while (index + 1 &lt; n) {
        if (list.at(index+1)-&gt;parentView() != parent)
            break;
        index = findEndOfChildTree(list, index + 1);
    }
    return index;
}

void Compositor::raise(View *view)
{
    int startPos = m_views.indexOf(view);
    int endPos = findEndOfChildTree(m_views, startPos);

    int n = m_views.count();
    int tail =  n - endPos - 1;

    //bubble sort: move the child tree to the end of the list
    for (int i = 0; i &lt; tail; i++) {
        int source = endPos + 1 + i;
        int dest = startPos + i;
        for (int j = source; j &gt; dest; j--)
            m_views.swap(j, j-1);
    }
}

</db:programlisting>
</db:article>
