<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Drawing and Filling</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="paintsystem-devices.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Paint Devices and Backends"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="coordsys.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Coordinate System"/></db:extendedlink>
<db:abstract>
<db:para>Qt GUI Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>The Paint System</db:para>
<db:section xml:id="drawing">
<db:title>Drawing</db:title>
<db:para>QPainter provides highly optimized functions to do most of the drawing GUI programs require. It can draw everything from simple graphical primitives (represented by the <db:link xlink:href="qpoint.xml">QPoint</db:link>, QLine, <db:link xlink:href="qrect.xml">QRect</db:link>, QRegion and QPolygon classes) to complex shapes like vector paths. In Qt vector paths are represented by the QPainterPath class. QPainterPath provides a container for painting operations, enabling graphical shapes to be constructed and reused.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/paintsystem-painterpath.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">QPainterPath</db:emphasis></db:para>
<db:para>A painter path is an object composed of lines and curves. For example, a rectangle is composed by lines and an ellipse is composed by curves.</db:para>
<db:para>The main advantage of painter paths over normal drawing operations is that complex shapes only need to be created once; then they can be drawn many times using only calls to the QPainter::drawPath() function.</db:para>
<db:para>A QPainterPath object can be used for filling, outlining, and clipping. To generate fillable outlines for a given painter path, use the QPainterPathStroker class.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Lines and outlines are drawn using the QPen class. A pen is defined by its style (i.e. its line-type), width, brush, how the endpoints are drawn (cap-style) and how joins between two connected lines are drawn (join-style). The pen's brush is a QBrush object used to fill strokes generated with the pen, i.e. the QBrush class defines the fill pattern.</db:para>
<db:para>QPainter can also draw aligned text and pixmaps.</db:para>
<db:para>When drawing text, the font is specified using the QFont class. Qt will use the font with the specified attributes, or if no matching font exists, Qt will use the closest matching installed font. The attributes of the font that is actually used can be retrieved using the QFontInfo class. In addition, the QFontMetrics class provides the font measurements, and the QFontDatabase class provides information about the fonts available in the underlying window system.</db:para>
<db:para>Normally, QPainter draws in a &quot;natural&quot; coordinate system, but it is able to perform view and world transformations using the QTransform class. For more information, see <db:link xlink:href="coordsys.xml">Coordinate System</db:link>, which also describes the rendering process, i.e. the relation between the logical representation and the rendered pixels, and the benefits of anti-aliased painting.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Anti-Aliased Painting</db:emphasis></db:para>
<db:para>When drawing, the pixel rendering is controlled by the QPainter::Antialiasing render hint. The QPainter::RenderHint enum is used to specify flags to QPainter that may or may not be respected by any given engine.</db:para>
<db:para>The QPainter::Antialiasing value indicates that the engine should antialias edges of primitives if possible, i.e. smoothing the edges by using different color intensities.</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/paintsystem-antialiasing.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="filling">
<db:title>Filling</db:title>
<db:para>Shapes are filled using the QBrush class. A brush is defined by its color and its style (i.e. its fill pattern).</db:para>
<db:para>Any color in Qt is represented by the QColor class which supports the RGB, HSV and CMYK color models. QColor also support alpha-blended outlining and filling (specifying the transparency effect), and the class is platform and device independent (the colors are mapped to hardware using the QColormap class). For more information, see the QColor class documentation.</db:para>
<db:para>The available fill patterns are described by the <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::BrushStyle</db:link> enum. These include basic patterns spanning from uniform color to very sparse pattern, various line combinations, gradient fills and textures. Qt provides the QGradient class to define custom gradient fills, while texture patterns are specified using the QPixmap class.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/paintsystem-fancygradient.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">QGradient</db:emphasis></db:para>
<db:para>The QGradient class is used in combination with QBrush to specify gradient fills.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/paintsystem-gradients.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Qt currently supports three types of gradient fills: Linear gradients interpolate colors between start and end points, radial gradients interpolate colors between a focal point and end points on a circle surrounding it, and conical gradients interpolate colors around a center point.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:article>
