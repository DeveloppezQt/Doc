<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSGMaterialShader Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> class represents a graphics API independent shader program.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSGMaterialShader</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSGMaterialShader is part of <db:simplelist><db:member><db:link xlink:href="qtquick-scenegraph-materials.xml">Qt Quick Scene Graph Material Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> represents a combination of vertex and fragment shaders, data that define the graphics pipeline state changes, and logic that updates graphics resources, such as uniform buffers and textures.</db:para>
<db:note>
<db:para>All classes with QSG prefix should be used solely on the scene graph's rendering thread. See <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link> for more information.</db:para>
</db:note>
<db:para>The <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link> and <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> form a tight relationship. For one scene graph (including nested graphs), there is one unique <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> instance that encapsulates the shaders and other data the scene graph uses to render an object with that material. Each <db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link> can have a unique <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link> that defines how the graphics pipeline must be configured while drawing the node. An instance of <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> is never created explicitly by the user, it will be created on demand by the scene graph through <db:link xlink:href="qsgmaterial.xml#createShader">QSGMaterial::createShader</db:link>(). The scene graph creates an instance of <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> by calling the <db:link xlink:href="qsgmaterial.xml#createShader">QSGMaterial::createShader</db:link>() method, ensuring that there is only one instance of each shader implementation.</db:para>
<db:para>In Qt 5, <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> was tied to OpenGL. It was built directly on <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> and had functions like <db:code>updateState()</db:code> that could issue arbitrary OpenGL commands. This is no longer the case in Qt 6. <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> is not strictly data-oriented, meaning it provides data (shaders and the desired pipeline state changes) together with logic that updates data in a uniform buffer. Graphics API access is not provided. This means that a <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> cannot make OpenGL, Vulkan, Metal, or Direct 3D calls on its own. Together with the unified shader management, this allows a <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> to be written once, and be functional with any of the supported graphics APIs at run time.</db:para>
<db:para>The shaders set by calling the protected <db:link xlink:href="qsgmaterialshader.xml#setShaderFileName">setShaderFileName</db:link>() function control what material does with the vertex data from the geometry, and how the fragments are shaded. A <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> will typically set a vertex and a fragment shader during construction. Changing the shaders afterwards may not lead to the desired effect and must be avoided.</db:para>
<db:para>In Qt 6, the default approach is to ship <db:code>.qsb</db:code> files with the application, typically embedded via the resource system, and referenced when calling <db:link xlink:href="qsgmaterialshader.xml#setShaderFileName">setShaderFileName</db:link>(). The <db:code>.qsb</db:code> files are generated offline, or at latest at application build time, from Vulkan-style GLSL source code using the <db:code>qsb</db:code> tool from the Qt Shader Tools module.</db:para>
<db:para>There are three virtuals that can be overridden. These provide the data, or the logic to generate the data, for uniform buffers, textures, and pipeline state changes.</db:para>
<db:para><db:link xlink:href="qsgmaterialshader.xml#updateUniformData">updateUniformData</db:link>() is the function that is most commonly reimplemented in subclasses. This function is expected to update the contents of a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> that will then be exposed to the shaders as a uniform buffer. Any <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> that has a uniform block in its vertex or fragment shader must reimplement <db:link xlink:href="qsgmaterialshader.xml#updateUniformData">updateUniformData</db:link>().</db:para>
<db:para><db:link xlink:href="qsgmaterialshader.xml#updateSampledImage">updateSampledImage</db:link>() is relevant when the shader code samples textures. The function will be invoked for each sampler (or combined image sampler, in APIs where relevant), giving it the option to specify which <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> should be exposed to the shader.</db:para>
<db:para>The shader pipeline state changes are less often used. One use case is materials that wish to use a specific blend mode. The relevant function is <db:link xlink:href="qsgmaterialshader.xml#updateGraphicsPipelineState">updateGraphicsPipelineState</db:link>(). This function is not called unless the <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> has opted in by setting the flag <db:link xlink:href="qsgmaterialshader.xml#Flag-enum">UpdatesGraphicsPipelineState</db:link>. The task of the function is to update the <db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link> struct instance that is passed to it with the desired changes. Currently only blending and culling-related features are available, other states cannot be controlled by materials.</db:para>
<db:para>A minimal example, that also includes texture support, could be the following. Here we assume that Material is the <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link> that creates an instance of Shader in its <db:link xlink:href="qsgmaterial.xml#createShader">createShader</db:link>(), and that it holds a <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> we want to sample in the fragment shader. The vertex shader relies only on the modelview-projection matrix.</db:para>
<db:programlisting language="cpp">class Shader : public QSGMaterialShader
{
public:
    Shader()
    {
        setShaderFileName(VertexStage, QLatin1String(&quot;:/materialshader.vert.qsb&quot;));
        setShaderFileName(FragmentStage, QLatin1String(&quot;:/materialshader.frag.qsb&quot;));
    }

    bool updateUniformData(RenderState &amp;amp;state, QSGMaterial *, QSGMaterial *)
    {
        bool changed = false;
        QByteArray *buf = state.uniformData();
        if (state.isMatrixDirty()) {
            const QMatrix4x4 m = state.combinedMatrix();
            memcpy(buf-&amp;gt;data(), m.constData(), 64);
            changed = true;
        }
        return changed;
    }

    void updateSampledImage(RenderState &amp;amp;, int binding, QSGTexture **texture, QSGMaterial *newMaterial, QSGMaterial *)
    {
        Material *mat = static_cast&amp;lt;Material *&amp;gt;(newMaterial);
        if (binding == 1)
            *texture = mat-&amp;gt;texture();
    }
};
</db:programlisting>
<db:para>The Vulkan-style GLSL source code for the shaders could look like the following. These are expected to be preprocessed offline using the <db:code>qsb</db:code> tool, which generates the <db:code>.qsb</db:code> files referenced in the Shader() constructor.</db:para>
<db:programlisting language="cpp" role="bad">#version 440
layout(location = 0) in vec4 aVertex;
layout(location = 1) in vec2 aTexCoord;
layout(location = 0) out vec2 vTexCoord;
layout(std140, binding = 0) uniform buf {
    mat4 qt_Matrix;
} ubuf;
out gl_PerVertex { vec4 gl_Position; };
void main() {
    gl_Position = ubuf.qt_Matrix * aVertex;
    vTexCoord = aTexCoord;
}
</db:programlisting>
<db:programlisting language="cpp" role="bad">#version 440
layout(location = 0) in vec2 vTexCoord;
layout(location = 0) out vec4 fragColor;
layout(binding = 1) uniform sampler2D srcTex;
void main() {
    vec4 c = texture(srcTex, vTexCoord);
    fragColor = vec4(c.rgb * 0.5, 1.0);
}
</db:programlisting>
<db:note>
<db:para>All classes with QSG prefix should be used solely on the scene graph's rendering thread. See <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link> for more information.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link></db:member>
<db:member><db:link xlink:href="qtquick-scenegraph-custommaterial-example.xml">Scene Graph - Custom Material</db:link></db:member>
<db:member><db:link xlink:href="qtquick-scenegraph-twotextureproviders-example.xml">Scene Graph - Two Texture Providers</db:link></db:member>
<db:member><db:link xlink:href="qtquick-scenegraph-graph-example.xml">Scene Graph - Graph</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Flag-enum">
<db:title>enum QSGMaterialShader::Flag</db:title>
<db:bridgehead renderas="sect2">flags QSGMaterialShader::Flags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Flag</db:enumname>
<db:enumitem>
<db:enumidentifier>UpdatesGraphicsPipelineState</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QSGMaterialShader::Flags</db:typedefname>
</db:typedefsynopsis>
<db:para>Flag values to indicate special material properties.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::UpdatesGraphicsPipelineState</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>Setting this flag enables calling <db:link xlink:href="qsgmaterialshader.xml#updateGraphicsPipelineState">updateGraphicsPipelineState</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Flags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Flag&gt;. </db:code>It stores an OR combination of <db:code>Flag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSGMaterialShader">
<db:title>QSGMaterialShader::QSGMaterialShader()</db:title>
<db:constructorsynopsis>
<db:methodname>QSGMaterialShader</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGMaterialShader()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link>.</db:para>
</db:section>
<db:section xml:id="combinedImageSamplerCount">
<db:title>[since 6.4] int QSGMaterialShader::combinedImageSamplerCount(int <db:emphasis>binding</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>combinedImageSamplerCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>binding</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int combinedImageSamplerCount(int binding) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of elements in the combined image sampler variable at <db:code role="parameter">binding</db:code>. This value is introspected from the shader code. The variable may be an array, and may have more than one dimension.</db:para>
<db:para>The count reflects the total number of combined image sampler items in the variable. In the following example, the count for <db:code>srcA</db:code> is 1, <db:code>srcB</db:code> is 4, and <db:code>srcC</db:code> is 6.</db:para>
<db:programlisting language="cpp" role="bad">layout (binding = 0) uniform sampler2D srcA;
layout (binding = 1) uniform sampler2D srcB[4];
layout (binding = 2) uniform sampler2D srcC[2][3];
</db:programlisting>
<db:para>This count is the number of <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> pointers in the texture parameter of <db:link xlink:href="qsgmaterialshader.xml#updateSampledImage">QSGMaterialShader::updateSampledImage</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgmaterialshader.xml#updateSampledImage">QSGMaterialShader::updateSampledImage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>QSGMaterialShader::Flags QSGMaterialShader::flags() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSGMaterialShader::Flags</db:type>
<db:methodname>flags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGMaterialShader::Flags flags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the currently set flags for this material shader.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgmaterialshader.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlag">
<db:title>void QSGMaterialShader::setFlag(QSGMaterialShader::Flags <db:emphasis>flags</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFlag</db:methodname>
<db:methodparam>
<db:type>QSGMaterialShader::Flags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFlag(QSGMaterialShader::Flags flags, bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">flags</db:code> on this material shader if <db:code role="parameter">on</db:code> is true; otherwise clears the specified flags.</db:para>
</db:section>
<db:section xml:id="setFlags">
<db:title>void QSGMaterialShader::setFlags(QSGMaterialShader::Flags <db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFlags</db:methodname>
<db:methodparam>
<db:type>QSGMaterialShader::Flags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFlags(QSGMaterialShader::Flags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">flags</db:code> for this material shader.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgmaterialshader.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setShader">
<db:title>[protected] void QSGMaterialShader::setShader(QSGMaterialShader::Stage <db:emphasis>stage</db:emphasis>, const QShader &amp;<db:emphasis>shader</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setShader</db:methodname>
<db:methodparam>
<db:type>QSGMaterialShader::Stage</db:type>
<db:parameter>stage</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QShader &amp;</db:type>
<db:parameter>shader</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setShader(QSGMaterialShader::Stage stage, const QShader &amp;shader)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">shader</db:code> for the specified <db:code role="parameter">stage</db:code>.</db:para>
</db:section>
<db:section xml:id="setShaderFileName">
<db:title>[protected] void QSGMaterialShader::setShaderFileName(QSGMaterialShader::Stage <db:emphasis>stage</db:emphasis>, const QString &amp;<db:emphasis>filename</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setShaderFileName</db:methodname>
<db:methodparam>
<db:type>QSGMaterialShader::Stage</db:type>
<db:parameter>stage</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filename</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setShaderFileName(QSGMaterialShader::Stage stage, const QString &amp;filename)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">filename</db:code> for the shader for the specified <db:code role="parameter">stage</db:code>.</db:para>
<db:para>The file is expected to contain a serialized QShader.</db:para>
</db:section>
<db:section xml:id="updateGraphicsPipelineState">
<db:title>[virtual] bool QSGMaterialShader::updateGraphicsPipelineState(QSGMaterialShader::RenderState &amp;<db:emphasis>state</db:emphasis>, QSGMaterialShader::GraphicsPipelineState *<db:emphasis>ps</db:emphasis>, QSGMaterial *<db:emphasis>newMaterial</db:emphasis>, QSGMaterial *<db:emphasis>oldMaterial</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>updateGraphicsPipelineState</db:methodname>
<db:methodparam>
<db:type>QSGMaterialShader::RenderState &amp;</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSGMaterialShader::GraphicsPipelineState *</db:type>
<db:parameter>ps</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSGMaterial *</db:type>
<db:parameter>newMaterial</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSGMaterial *</db:type>
<db:parameter>oldMaterial</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool updateGraphicsPipelineState(QSGMaterialShader::RenderState &amp;state, QSGMaterialShader::GraphicsPipelineState *ps, QSGMaterial *newMaterial, QSGMaterial *oldMaterial)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called by the scene graph to enable the material to provide a custom set of graphics state. The set of states that are customizable by material is limited to blending and related settings.</db:para>
<db:note>
<db:para>This function is only called when the <db:link xlink:href="qsgmaterialshader.xml#Flag-enum">UpdatesGraphicsPipelineState</db:link> flag was enabled via <db:link xlink:href="qsgmaterialshader.xml#setFlags">setFlags</db:link>(). By default it is not set, and so this function is never called.</db:para>
</db:note>
<db:para>The return value must be <db:code>true</db:code> whenever a change was made to any of the members in <db:code role="parameter">ps</db:code>.</db:para>
<db:note>
<db:para>The contents of <db:code role="parameter">ps</db:code> is not persistent between invocations of this function.</db:para>
</db:note>
<db:para>The current rendering <db:code role="parameter">state</db:code> is passed from the scene graph.</db:para>
<db:para>The subclass specific state can be extracted from <db:code role="parameter">newMaterial</db:code>. When <db:code role="parameter">oldMaterial</db:code> is null, this shader was just activated.</db:para>
</db:section>
<db:section xml:id="updateSampledImage">
<db:title>[virtual] void QSGMaterialShader::updateSampledImage(QSGMaterialShader::RenderState &amp;<db:emphasis>state</db:emphasis>, int <db:emphasis>binding</db:emphasis>, QSGTexture **<db:emphasis>texture</db:emphasis>, QSGMaterial *<db:emphasis>newMaterial</db:emphasis>, QSGMaterial *<db:emphasis>oldMaterial</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>updateSampledImage</db:methodname>
<db:methodparam>
<db:type>QSGMaterialShader::RenderState &amp;</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>binding</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSGTexture **</db:type>
<db:parameter>texture</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSGMaterial *</db:type>
<db:parameter>newMaterial</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSGMaterial *</db:type>
<db:parameter>oldMaterial</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateSampledImage(QSGMaterialShader::RenderState &amp;state, int binding, QSGTexture **texture, QSGMaterial *newMaterial, QSGMaterial *oldMaterial)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called by the scene graph to prepare use of sampled images in the shader, typically in the form of combined image samplers.</db:para>
<db:para><db:code role="parameter">binding</db:code> is the binding number of the sampler. The function is called for each combined image sampler variable in the shader code associated with the <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link>.</db:para>
<db:para><db:code role="parameter">texture</db:code> is an array of <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> pointers. The number of elements in the array matches the number of elements in the image sampler variable specified in the shader code. This variable may be an array, and may have more than one dimension. The number of elements in the array may be found via <db:link xlink:href="qsgmaterialshader.xml#combinedImageSamplerCount">QSGMaterialShader::combinedImageSamplerCount</db:link></db:para>
<db:para>When an element in <db:code role="parameter">texture</db:code> is null, it must be set to a valid <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> pointer before returning. When non-null, it is up to the material to decide if a new <db:code>QSGTexture *</db:code> is stored to it, or if it updates some parameters on the already known <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link>. The ownership of the <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> is not transferred.</db:para>
<db:para>The current rendering <db:code role="parameter">state</db:code> is passed from the scene graph. Where relevant, it is up to the material to trigger enqueuing texture data uploads via QSGTexture::commitTextureOperations().</db:para>
<db:para>The subclass specific state can be extracted from <db:code role="parameter">newMaterial</db:code>.</db:para>
<db:para><db:code role="parameter">oldMaterial</db:code> can be used to minimize changes. When <db:code role="parameter">oldMaterial</db:code> is null, this shader was just activated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgmaterialshader.xml#combinedImageSamplerCount">QSGMaterialShader::combinedImageSamplerCount</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateUniformData">
<db:title>[virtual] bool QSGMaterialShader::updateUniformData(QSGMaterialShader::RenderState &amp;<db:emphasis>state</db:emphasis>, QSGMaterial *<db:emphasis>newMaterial</db:emphasis>, QSGMaterial *<db:emphasis>oldMaterial</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>updateUniformData</db:methodname>
<db:methodparam>
<db:type>QSGMaterialShader::RenderState &amp;</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSGMaterial *</db:type>
<db:parameter>newMaterial</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSGMaterial *</db:type>
<db:parameter>oldMaterial</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool updateUniformData(QSGMaterialShader::RenderState &amp;state, QSGMaterial *newMaterial, QSGMaterial *oldMaterial)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called by the scene graph to get the contents of the shader program's uniform buffer updated. The implementation is not expected to perform any real graphics operations, it is merely responsible for copying data to the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> returned from <db:link xlink:href="qsgmaterialshader-renderstate.xml#uniformData">RenderState::uniformData</db:link>(). The scene graph takes care of making that buffer visible in the shaders.</db:para>
<db:para>The current rendering <db:code role="parameter">state</db:code> is passed from the scene graph. If the state indicates that any relevant state is dirty, the implementation must update the appropriate region in the buffer data that is accessible via <db:link xlink:href="qsgmaterialshader-renderstate.xml#uniformData">RenderState::uniformData</db:link>(). When a state, such as, matrix or opacity, is not dirty, there is no need to touch the corresponding region since the data is persistent.</db:para>
<db:para>The return value must be <db:code>true</db:code> whenever any change was made to the uniform data.</db:para>
<db:para>The subclass specific state, such as the color of a flat color material, should be extracted from <db:code role="parameter">newMaterial</db:code> to update the relevant regions in the buffer accordingly.</db:para>
<db:para><db:code role="parameter">oldMaterial</db:code> can be used to minimize buffer changes (which are typically memcpy calls) when updating material states. When <db:code role="parameter">oldMaterial</db:code> is null, this shader was just activated.</db:para>
</db:section>
</db:section>
</db:article>
