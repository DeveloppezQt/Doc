<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for iOS</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides insight into Qt's iOS port and how to use it.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt's iOS port allows you to run Qt applications on iOS devices, such as iPhones and iPads.</db:para>
<db:section xml:id="getting-started">
<db:title>Getting Started</db:title>
<db:para>Development and deployment is done using Xcode. The supported workflow is to maintain a .pro file based project, which generates an Xcode project. Building and deploying can be done using either Xcode or Qt Creator. We will look at that in more detail in the next section.</db:para>
<db:para>The minimum deployment target for Qt applications is specified in <db:link xlink:href="supported-platforms.xml">Supported Platforms</db:link>. Qt then supports the following device types (iOS might need to be upgraded on some devices).</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>iPhone</db:para>
</db:listitem>
<db:listitem>
<db:para>iPod Touch</db:para>
</db:listitem>
<db:listitem>
<db:para>iPad</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="setting-up-the-development-environment">
<db:title>Setting Up the Development Environment</db:title>
<db:para>You can download the Qt 5 installers from the <db:link xlink:href="http://qt.io/download">Downloads</db:link> page. For more information, see <db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link>.</db:para>
<db:para>Before installing Qt, you first need to install Xcode. You will find it in the Mac App Store <db:link xlink:href="http://itunes.apple.com/us/app/xcode/id497799835?ls=1&amp;mt=12">here</db:link>.</db:para>
<db:note>
<db:para>As <db:link xlink:href="https://developer.apple.com/news/?id=12172013a">required by Apple</db:link>, you should always use the latest Xcode version when building your applications for the App Store. In practice this means you also need the latest version of macOS to develop iOS apps with Qt, due to Xcode's system requirements.</db:para>
</db:note>
<db:para>For running Qt applications in the simulator that comes with Xcode, this is all you need. However, for running applications on a device and publishing your applications in the App Store, you must join the iOS Developer Program (see <db:link xlink:href="https://developer.apple.com/programs/ios/">https://developer.apple.com/programs/ios/</db:link>), and set up developer certificates and provisioning profiles. The easiest solution is to use a profile that takes any App ID (a *).</db:para>
<db:para>Before building any Qt applications, you should test that Xcode is set up correctly, for example, by running one of the standard Xcode application templates on your device.</db:para>
</db:section>
<db:section xml:id="building-applications-from-the-command-line">
<db:title>Building Applications From the Command Line</db:title>
<db:para>As mentioned previously, the development workflow on iOS consists of maintaining a normal .pro file project and export it to Xcode.</db:para>
<db:para>Here is how to build a project with Xcode:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>run qmake (if you have not done so previously)</db:para>
</db:listitem>
<db:listitem>
<db:para>open the resulting .xcodeproject file in Xcode</db:para>
</db:listitem>
<db:listitem>
<db:para>build the application in Xcode</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Note that you must re-import the project if its setup changes, for example, when adding or removing source files.</db:para>
</db:section>
</db:section>
<db:section xml:id="building-applications-with-qt-creator">
<db:title>Building Applications with Qt Creator</db:title>
<db:para>You can find information on how to set up and run iOS applications in Qt Creator's manual:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://doc.qt.io/qtcreator/creator-developing-ios.html">Connecting iOS Devices</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>As mentioned previously, you must have Xcode installed.</db:para>
<db:section xml:id="examples-for-ios">
<db:title>Examples for iOS</db:title>
<db:para>In Qt Creator, tested examples on iOS can be looked up. Use the ios keyword to search for examples in the Qt Creator Welcome mode. Note that some examples may have limited functionality.</db:para>
<db:para>For a list of examples known to work on iOS devices, visit <db:link xlink:href="examples-ios.xml">Qt for iOS Examples</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="using-objective-c-code-in-qt-applications">
<db:title>Using Objective-C Code in Qt Applications</db:title>
<db:para>Clang, the compiler used for iOS applications, allows mixing C++ and Objective-C code. To enable this mode, suffix your source files with .c mm, and add them to OBJECTIVE_SOURCES instead of SOURCES in the .pro file. This makes it possible to use frameworks from Apple's iOS Developer Library in Qt applications. Most useful is perhaps the possibility for adding In-App Purchasing with the StoreKit framework.</db:para>
<db:para>We currently have one example mixing Objective-C and C++ code. You find it <db:link xlink:href="http://wiki.qt.io/Mixing_C_and_ObjectiveC_Code">here</db:link>.</db:para>
</db:section>
<db:section xml:id="related-topics">
<db:title>Related Topics</db:title>
<db:para>The following topics provide more details about Qt for iOS:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="porting-to-ios.xml">Porting a Qt Quick Application</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="platform-notes-ios.xml">Platform Notes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="building-from-source-ios.xml">Qt for iOS - Building from Source</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
