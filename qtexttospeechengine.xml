<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextToSpeechEngine Class</db:title>
<db:productname>QtSpeech</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Text-To-Speech library</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtexttospeechengine.xml">QTextToSpeechEngine</db:link> class is the base for text-to-speech engine integrations.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextToSpeechEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += texttospeech</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An engine implementation must derive from <db:link xlink:href="qtexttospeechengine.xml">QTextToSpeechEngine</db:link> and implement all its pure virtual methods.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextToSpeechEngine">
<db:title>[explicit] QTextToSpeechEngine::QTextToSpeechEngine(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextToSpeechEngine</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextToSpeechEngine(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs the text-to-speech engine base class with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="availableLocales">
<db:title>[pure virtual] QVector&lt;QLocale&gt; QTextToSpeechEngine::availableLocales() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVector&lt;QLocale&gt;</db:type>
<db:methodname>availableLocales</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector&lt;QLocale&gt; availableLocales() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#availableLocales">QTextToSpeech::availableLocales</db:link>().</db:para>
</db:section>
<db:section xml:id="availableVoices">
<db:title>[pure virtual] QVector&lt;QVoice&gt; QTextToSpeechEngine::availableVoices() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVector&lt;QVoice&gt;</db:type>
<db:methodname>availableVoices</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector&lt;QVoice&gt; availableVoices() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#availableVoices">QTextToSpeech::availableVoices</db:link>().</db:para>
</db:section>
<db:section xml:id="createVoice">
<db:title>[static protected] QVoice QTextToSpeechEngine::createVoice(const QString &amp;<db:emphasis>name</db:emphasis>, QVoice::Gender <db:emphasis>gender</db:emphasis>, QVoice::Age <db:emphasis>age</db:emphasis>, const QVariant &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QVoice</db:type>
<db:methodname>createVoice</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVoice::Gender</db:type>
<db:parameter>gender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVoice::Age</db:type>
<db:parameter>age</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVoice createVoice(const QString &amp;name, QVoice::Gender gender, QVoice::Age age, const QVariant &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a voice for a text-to-speech engine.</db:para>
<db:para>Parameters <db:code role="parameter">name</db:code>, <db:code role="parameter">gender</db:code>, <db:code role="parameter">age</db:code> and <db:code role="parameter">data</db:code> are directly stored in the <db:link xlink:href="qvoice.xml">QVoice</db:link> instance.</db:para>
</db:section>
<db:section xml:id="locale">
<db:title>[pure virtual] QLocale QTextToSpeechEngine::locale() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QLocale</db:type>
<db:methodname>locale</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLocale locale() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#locale-prop">QTextToSpeech::locale</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeechengine.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pause">
<db:title>[pure virtual] void QTextToSpeechEngine::pause()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>pause</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pause() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#pause">QTextToSpeech::pause</db:link>().</db:para>
</db:section>
<db:section xml:id="pitch">
<db:title>[pure virtual] double QTextToSpeechEngine::pitch() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>pitch</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double pitch() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#pitch-prop">QTextToSpeech::pitch</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeechengine.xml#setPitch">setPitch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rate">
<db:title>[pure virtual] double QTextToSpeechEngine::rate() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>rate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double rate() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#rate-prop">QTextToSpeech::rate</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeechengine.xml#setRate">setRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resume">
<db:title>[pure virtual] void QTextToSpeechEngine::resume()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resume</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resume() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#resume">QTextToSpeech::resume</db:link>().</db:para>
</db:section>
<db:section xml:id="say">
<db:title>[pure virtual] void QTextToSpeechEngine::say(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>say</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void say(const QString &amp;text) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#say">QTextToSpeech::say</db:link>(<db:code role="parameter">text</db:code>).</db:para>
</db:section>
<db:section xml:id="setLocale">
<db:title>[pure virtual] bool QTextToSpeechEngine::setLocale(const QLocale &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setLocale</db:methodname>
<db:methodparam>
<db:type>const QLocale &amp;</db:type>
<db:parameter>locale</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setLocale(const QLocale &amp;locale) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation <db:link xlink:href="qtexttospeech.xml#setLocale">QTextToSpeech::setLocale</db:link>(<db:code role="parameter">locale</db:code>).</db:para>
<db:para>Return <db:code>true</db:code> if the operation was successful. In this case, the current voice (as returned by <db:link xlink:href="qtexttospeechengine.xml#voice">voice</db:link>()) should also be updated to a new, valid value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeechengine.xml#locale">locale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPitch">
<db:title>[pure virtual] bool QTextToSpeechEngine::setPitch(double <db:emphasis>pitch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setPitch</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>pitch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setPitch(double pitch) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#pitch-prop">QTextToSpeech::setPitch</db:link>(<db:code role="parameter">pitch</db:code>).</db:para>
<db:para>Return <db:code>true</db:code> if the operation was successful.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeechengine.xml#pitch">pitch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRate">
<db:title>[pure virtual] bool QTextToSpeechEngine::setRate(double <db:emphasis>rate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setRate</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>rate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setRate(double rate) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#rate-prop">QTextToSpeech::setRate</db:link>(<db:code role="parameter">rate</db:code>).</db:para>
<db:para>Return <db:code>true</db:code> if the operation was successful.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeechengine.xml#rate">rate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVoice">
<db:title>[pure virtual] bool QTextToSpeechEngine::setVoice(const QVoice &amp;<db:emphasis>voice</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setVoice</db:methodname>
<db:methodparam>
<db:type>const QVoice &amp;</db:type>
<db:parameter>voice</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setVoice(const QVoice &amp;voice) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#setVoice">QTextToSpeech::setVoice</db:link>(<db:code role="parameter">voice</db:code>).</db:para>
<db:para>Return <db:code>true</db:code> if the operation was successful.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeechengine.xml#voice">voice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVolume">
<db:title>[pure virtual] bool QTextToSpeechEngine::setVolume(double <db:emphasis>volume</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setVolume</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>volume</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setVolume(double volume) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#volume-prop">QTextToSpeech::setVolume</db:link>(<db:code role="parameter">volume</db:code>).</db:para>
<db:para>Return <db:code>true</db:code> if the operation was successful.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeechengine.xml#volume">volume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>[pure virtual] QTextToSpeech::State QTextToSpeechEngine::state() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QTextToSpeech::State</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextToSpeech::State state() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#state-prop">QTextToSpeech::state</db:link>().</db:para>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QTextToSpeechEngine::stateChanged(QTextToSpeech::State <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>QTextToSpeech::State</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(QTextToSpeech::State state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Emitted when the text-to-speech engine <db:code role="parameter">state</db:code> has changed.</db:para>
<db:para>This signal is connected to <db:link xlink:href="qtexttospeech.xml#state-prop">QTextToSpeech::stateChanged</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="stop">
<db:title>[pure virtual] void QTextToSpeechEngine::stop()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#stop">QTextToSpeech::stop</db:link>().</db:para>
</db:section>
<db:section xml:id="voice">
<db:title>[pure virtual] QVoice QTextToSpeechEngine::voice() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVoice</db:type>
<db:methodname>voice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVoice voice() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#voice-prop">QTextToSpeech::voice</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeechengine.xml#setVoice">setVoice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="voiceData">
<db:title>[static protected] QVariant QTextToSpeechEngine::voiceData(const QVoice &amp;<db:emphasis>voice</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>voiceData</db:methodname>
<db:methodparam>
<db:type>const QVoice &amp;</db:type>
<db:parameter>voice</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant voiceData(const QVoice &amp;voice)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the engine-specific private data for the given <db:code role="parameter">voice</db:code>.</db:para>
</db:section>
<db:section xml:id="volume">
<db:title>[pure virtual] double QTextToSpeechEngine::volume() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>volume</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double volume() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implementation of <db:link xlink:href="qtexttospeech.xml#volume-prop">QTextToSpeech::volume</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttospeechengine.xml#setVolume">setVolume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
