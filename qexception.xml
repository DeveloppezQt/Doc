<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QException Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qexception.xml">QException</db:link> class provides a base class for exceptions that can transferred across threads.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QException</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qunhandledexception.xml" xlink:role="class">QUnhandledException</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Qt Concurrent supports throwing and catching exceptions across thread boundaries, provided that the exception inherit from <db:link xlink:href="qexception.xml">QException</db:link> and implement two helper functions:</db:para>
<db:programlisting language="cpp">class MyException : public QException
{
public:
    void raise() const { throw *this; }
    MyException *clone() const { return new MyException(*this); }
};

</db:programlisting>
<db:para><db:link xlink:href="qexception.xml">QException</db:link> subclasses must be thrown by value and caught by reference:</db:para>
<db:programlisting language="cpp">try  {
    QtConcurrent::blockingMap(list, throwFunction); // throwFunction throws MyException
} catch (MyException &amp;e) {
    // handle exception
}

</db:programlisting>
<db:para>If you throw an exception that is not a subclass of <db:link xlink:href="qexception.xml">QException</db:link>, the Qt functions will throw a <db:link xlink:href="qunhandledexception.xml">QUnhandledException</db:link> in the receiver thread.</db:para>
<db:para>When using <db:link xlink:href="qfuture.xml">QFuture</db:link>, transferred exceptions will be thrown when calling the following functions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QFuture::waitForFinished()</db:para>
</db:listitem>
<db:listitem>
<db:para>QFuture::result()</db:para>
</db:listitem>
<db:listitem>
<db:para>QFuture::resultAt()</db:para>
</db:listitem>
<db:listitem>
<db:para>QFuture::results()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="clone">
<db:title>[virtual] QException *QException::clone() const</db:title>
<db:para>In your <db:link xlink:href="qexception.xml">QException</db:link> subclass, reimplement clone() like this:</db:para>
<db:programlisting language="cpp">MyException *MyException::clone() const { return new MyException(*this); }

</db:programlisting>
</db:section>
<db:section xml:id="raise">
<db:title>[virtual] void QException::raise() const</db:title>
<db:para>In your <db:link xlink:href="qexception.xml">QException</db:link> subclass, reimplement raise() like this:</db:para>
<db:programlisting language="cpp">void MyException::raise() const { throw *this; }

</db:programlisting>
</db:section>
</db:section>
</db:article>
