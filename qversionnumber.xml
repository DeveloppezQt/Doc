<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVersionNumber Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> class contains a version number with an arbitrary number of segments.</db:para>
<db:para>This class is <db:emphasis>strongly comparable</db:emphasis>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVersionNumber</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:programlisting language="cpp">QVersionNumber version(1, 2, 3);  // 1.2.3
</db:programlisting>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="const_iterator-typedef">
<db:title>[alias, since 6.8] QVersionNumber::const_iterator</db:title>
<db:bridgehead renderas="sect2" xml:id="const_reverse_iterator-typedef">[alias, since 6.8] QVersionNumber::const_reverse_iterator</db:bridgehead>
<db:para>Typedefs for an opaque class that implements a (reverse) random-access iterator over <db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> segments.</db:para>
<db:note>
<db:para><db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> does not support modifying segments in-place, so there is no mutable iterator.</db:para>
</db:note>
<db:para>This typedef was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="const_pointer-typedef">
<db:title>[alias, since 6.8] QVersionNumber::const_pointer</db:title>
<db:bridgehead renderas="sect2" xml:id="const_reference-typedef">[alias, since 6.8] QVersionNumber::const_reference</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="difference_type-typedef">[alias, since 6.8] QVersionNumber::difference_type</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="pointer-typedef">[alias, since 6.8] QVersionNumber::pointer</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="reference-typedef">[alias, since 6.8] QVersionNumber::reference</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="size_type-typedef">[alias, since 6.8] QVersionNumber::size_type</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="value_type-typedef">[alias, since 6.8] QVersionNumber::value_type</db:bridgehead>
<db:para>Provided for STL-compatibility.</db:para>
<db:note>
<db:para><db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> does not support modifying segments in-place, so reference and <db:link xlink:href="qversionnumber.xml#const_reference-typedef">const_reference</db:link>, as well as pointer and <db:link xlink:href="qversionnumber.xml#const_pointer-typedef">const_pointer</db:link> are pairwise the same types.</db:para>
</db:note>
<db:para>This typedef was introduced in Qt 6.8.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="begin">
<db:title>[noexcept, since 6.8] QVersionNumber::const_iterator QVersionNumber::begin() const</db:title>
<db:bridgehead renderas="sect2" xml:id="cbegin">[noexcept, since 6.8] QVersionNumber::const_iterator QVersionNumber::cbegin() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="cend">[noexcept, since 6.8] QVersionNumber::const_iterator QVersionNumber::cend() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="constBegin">[noexcept, since 6.8] QVersionNumber::const_iterator QVersionNumber::constBegin() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="constEnd">[noexcept, since 6.8] QVersionNumber::const_iterator QVersionNumber::constEnd() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="end">[noexcept, since 6.8] QVersionNumber::const_iterator QVersionNumber::end() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="crbegin">[noexcept, since 6.8] QVersionNumber::const_reverse_iterator QVersionNumber::crbegin() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="crend">[noexcept, since 6.8] QVersionNumber::const_reverse_iterator QVersionNumber::crend() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="rbegin">[noexcept, since 6.8] QVersionNumber::const_reverse_iterator QVersionNumber::rbegin() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="rend">[noexcept, since 6.8] QVersionNumber::const_reverse_iterator QVersionNumber::rend() const</db:bridgehead>
<db:para>Returns a <db:link xlink:href="qversionnumber.xml#const_iterator-typedef">const_iterator</db:link> or <db:link xlink:href="qversionnumber.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link>, respectively, pointing to the first or one past the last segment of this version number.</db:para>
<db:note>
<db:para><db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> does not support modifying segments in-place, so there is no mutable iterator.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="QVersionNumber">
<db:title>[noexcept] QVersionNumber::QVersionNumber()</db:title>
<db:para>Produces a null version.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QVersionNumber-1">
<db:title>[explicit] QVersionNumber::QVersionNumber(QList&lt;int&gt; &amp;&amp;<db:emphasis>seg</db:emphasis>)</db:title>
<db:para>Move-constructs a version number from the list of numbers contained in <db:code role="parameter">seg</db:code>.</db:para>
</db:section>
<db:section xml:id="QVersionNumber-2">
<db:title>[explicit, since 6.8] QVersionNumber::QVersionNumber(QSpan&lt;const int&gt; <db:emphasis>args</db:emphasis>)</db:title>
<db:para>Constructs a version number from the span specified by <db:code role="parameter">args</db:code>.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.8, <db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> could only be constructed from <db:link xlink:href="qlist.xml">QList</db:link>, QVarLenthArray or std::initializer_list.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="QVersionNumber-3">
<db:title>[explicit] QVersionNumber::QVersionNumber(const QList&lt;int&gt; &amp;<db:emphasis>seg</db:emphasis>)</db:title>
<db:para>Constructs a version number from the list of numbers contained in <db:code role="parameter">seg</db:code>.</db:para>
</db:section>
<db:section xml:id="QVersionNumber-4">
<db:title>[explicit] QVersionNumber::QVersionNumber(int <db:emphasis>maj</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> consisting of just the major version number <db:code role="parameter">maj</db:code>.</db:para>
</db:section>
<db:section xml:id="QVersionNumber-5">
<db:title>QVersionNumber::QVersionNumber(std::initializer_list&lt;int&gt; <db:emphasis>args</db:emphasis>)</db:title>
<db:para>Constructs a version number from the std::initializer_list specified by <db:code role="parameter">args</db:code>.</db:para>
</db:section>
<db:section xml:id="QVersionNumber-6">
<db:title>[explicit] QVersionNumber::QVersionNumber(int <db:emphasis>maj</db:emphasis>, int <db:emphasis>min</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> consisting of the major and minor version numbers <db:code role="parameter">maj</db:code> and <db:code role="parameter">min</db:code>, respectively.</db:para>
</db:section>
<db:section xml:id="QVersionNumber-7">
<db:title>[explicit] QVersionNumber::QVersionNumber(int <db:emphasis>maj</db:emphasis>, int <db:emphasis>min</db:emphasis>, int <db:emphasis>mic</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> consisting of the major, minor, and micro version numbers <db:code role="parameter">maj</db:code>, <db:code role="parameter">min</db:code> and <db:code role="parameter">mic</db:code>, respectively.</db:para>
</db:section>
<db:section xml:id="commonPrefix">
<db:title>[static] QVersionNumber QVersionNumber::commonPrefix(const QVersionNumber &amp;<db:emphasis>v1</db:emphasis>, const QVersionNumber &amp;<db:emphasis>v2</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> QVersionNumber::commonPrefix(const <db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> &amp;v1, const <db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> &amp;v2)</db:para>
<db:para>Returns a version number that is a parent version of both <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#isPrefixOf">isPrefixOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare">
<db:title>[static noexcept] int QVersionNumber::compare(const QVersionNumber &amp;<db:emphasis>v1</db:emphasis>, const QVersionNumber &amp;<db:emphasis>v2</db:emphasis>)</db:title>
<db:para>Compares <db:code role="parameter">v1</db:code> with <db:code role="parameter">v2</db:code> and returns an integer less than, equal to, or greater than zero, depending on whether <db:code role="parameter">v1</db:code> is less than, equal to, or greater than <db:code role="parameter">v2</db:code>, respectively.</db:para>
<db:para>Comparisons are performed by comparing the segments of <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code> starting at index 0 and working towards the end of the longer list.</db:para>
<db:programlisting language="cpp">QVersionNumber v1(1, 2);
QVersionNumber v2(1, 2, 0);
int compare = QVersionNumber::compare(v1, v2); // compare == -1
</db:programlisting>
</db:section>
<db:section xml:id="fromString">
<db:title>[static, since 6.4] QVersionNumber QVersionNumber::fromString(QAnyStringView <db:emphasis>string</db:emphasis>, qsizetype *<db:emphasis>suffixIndex</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a <db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> from a specially formatted <db:code role="parameter">string</db:code> of non-negative decimal numbers delimited by a period (.).</db:para>
<db:para>Once the numerical segments have been parsed, the remainder of the string is considered to be the suffix string. The start index of that string will be stored in <db:code role="parameter">suffixIndex</db:code> if it is not null.</db:para>
<db:programlisting language="cpp">QLatin1StringView string(&quot;5.4.0-alpha&quot;);
qsizetype suffixIndex;
auto version = QVersionNumber::fromString(string, &amp;suffixIndex);
// version is 5.4.0
// suffixIndex is 5
</db:programlisting>
<db:note>
<db:para>In versions prior to Qt 6.4, this function was overloaded for <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link> and <db:link xlink:href="qstringview.xml">QStringView</db:link> instead, and <db:code role="parameter">suffixIndex</db:code> was an int*.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNormalized">
<db:title>[noexcept] bool QVersionNumber::isNormalized() const</db:title>
<db:para>Returns true if the version number does not contain any trailing zeros, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#normalized">normalized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>[noexcept] bool QVersionNumber::isNull() const</db:title>
<db:para>Returns true if there are zero numerical segments, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#segments">segments</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isPrefixOf">
<db:title>[noexcept] bool QVersionNumber::isPrefixOf(const QVersionNumber &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if the current version number is contained in the <db:code role="parameter">other</db:code> version number, otherwise returns false.</db:para>
<db:programlisting language="cpp">QVersionNumber v1(5, 3);
QVersionNumber v2(5, 3, 1);
bool value = v1.isPrefixOf(v2); // true
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#commonPrefix">commonPrefix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="majorVersion">
<db:title>[noexcept] int QVersionNumber::majorVersion() const</db:title>
<db:para>Returns the major version number, that is, the first segment. This function is equivalent to <db:link xlink:href="qversionnumber.xml#segmentAt">segmentAt</db:link>(0). If this <db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> object is null, this function returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qversionnumber.xml#segmentAt">segmentAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="microVersion">
<db:title>[noexcept] int QVersionNumber::microVersion() const</db:title>
<db:para>Returns the micro version number, that is, the third segment. This function is equivalent to <db:link xlink:href="qversionnumber.xml#segmentAt">segmentAt</db:link>(2). If this <db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> object does not contain a micro number, this function returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qversionnumber.xml#segmentAt">segmentAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minorVersion">
<db:title>[noexcept] int QVersionNumber::minorVersion() const</db:title>
<db:para>Returns the minor version number, that is, the second segment. This function is equivalent to <db:link xlink:href="qversionnumber.xml#segmentAt">segmentAt</db:link>(1). If this <db:link xlink:href="qversionnumber.xml">QVersionNumber</db:link> object does not contain a minor number, this function returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qversionnumber.xml#segmentAt">segmentAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalized">
<db:title>QVersionNumber QVersionNumber::normalized() const</db:title>
<db:para>Returns an equivalent version number but with all trailing zeros removed.</db:para>
<db:para>To check if two numbers are equivalent, use normalized() on both version numbers before performing the compare.</db:para>
<db:programlisting language="cpp">QVersionNumber v1(5, 4);
QVersionNumber v2(5, 4, 0);
bool equivalent = v1.normalized() == v2.normalized();
bool equal = v1 == v2;
// equivalent is true
// equal is false
</db:programlisting>
</db:section>
<db:section xml:id="segmentAt">
<db:title>[noexcept] int QVersionNumber::segmentAt(qsizetype <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the segment value at <db:code role="parameter">index</db:code>. If the index does not exist, returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#segments">segments</db:link>()</db:member>
<db:member><db:link xlink:href="qversionnumber.xml#segmentCount">segmentCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="segmentCount">
<db:title>[noexcept] qsizetype QVersionNumber::segmentCount() const</db:title>
<db:para>Returns the number of integers stored in <db:link xlink:href="qversionnumber.xml#segments">segments</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#segments">segments</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="segments">
<db:title>QList&lt;int&gt; QVersionNumber::segments() const</db:title>
<db:para>Returns all of the numerical segments.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#majorVersion">majorVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qversionnumber.xml#minorVersion">minorVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qversionnumber.xml#microVersion">microVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QVersionNumber::toString() const</db:title>
<db:para>Returns a string with all of the segments delimited by a period (.).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#majorVersion">majorVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qversionnumber.xml#minorVersion">minorVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qversionnumber.xml#microVersion">microVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qversionnumber.xml#segments">segments</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QVersionNumber &amp;<db:emphasis>lhs</db:emphasis>, const QVersionNumber &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is not equal to <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#compare">QVersionNumber::compare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[noexcept] bool operator&lt;(const QVersionNumber &amp;<db:emphasis>lhs</db:emphasis>, const QVersionNumber &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is less than <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#compare">QVersionNumber::compare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-31">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QVersionNumber &amp;<db:emphasis>version</db:emphasis>)</db:title>
<db:para>Writes the version number <db:code role="parameter">version</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:para>Note that this has nothing to do with <db:link xlink:href="qdatastream.xml#version">QDataStream::version</db:link>().</db:para>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>[noexcept] bool operator&lt;=(const QVersionNumber &amp;<db:emphasis>lhs</db:emphasis>, const QVersionNumber &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is less than or equal to <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#compare">QVersionNumber::compare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool operator==(const QVersionNumber &amp;<db:emphasis>lhs</db:emphasis>, const QVersionNumber &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is equal to <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#compare">QVersionNumber::compare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt">
<db:title>[noexcept] bool operator&gt;(const QVersionNumber &amp;<db:emphasis>lhs</db:emphasis>, const QVersionNumber &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is greater than <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#compare">QVersionNumber::compare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>[noexcept] bool operator&gt;=(const QVersionNumber &amp;<db:emphasis>lhs</db:emphasis>, const QVersionNumber &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is greater than or equal to <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qversionnumber.xml#compare">QVersionNumber::compare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-31">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QVersionNumber &amp;<db:emphasis>version</db:emphasis>)</db:title>
<db:para>Reads a version number from stream <db:code role="parameter">in</db:code> and stores it in <db:code role="parameter">version</db:code>.</db:para>
<db:para>Note that this has nothing to do with <db:link xlink:href="qdatastream.xml#version">QDataStream::version</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
