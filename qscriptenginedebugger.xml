<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScriptEngineDebugger Class</db:title>
<db:productname>QtScriptTools</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>QtScriptTools Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link> class provides a <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link> debugger.</db:para>
<db:para>This class was introduced in Qt 4.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScriptEngineDebugger</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += scripttools</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QScriptEngineDebugger is part of <db:simplelist><db:member>script</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link> class provides a debugger that can be embedded into Qt applications that use Qt Script. The debugger enables the application user to inspect the state of the script environment and control script execution.</db:para>
<db:para>To attach the debugger to a script engine, call the <db:link xlink:href="qscriptenginedebugger.xml#attachTo">attachTo</db:link>() function.</db:para>
<db:programlisting language="cpp">    QScriptEngine engine;
    QScriptEngineDebugger debugger;
    debugger.attachTo(&amp;engine);
</db:programlisting>
<db:para>Once the debugger has been attached to a script engine, you can proceed to evaluate scripts as usual, e.g. by calling <db:link xlink:href="qscriptengine.xml#evaluate">QScriptEngine::evaluate</db:link>(). The debugger will be triggered when an uncaught exception occurs, or when a <db:code>debugger</db:code> statement is encountered in a script. It is also possible to interrupt script evaluation at an arbitrary time by triggering the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerAction-enum">InterruptAction</db:link>. For instance, to start the debugger when script evaluation starts, you trigger the action before you begin to <db:link xlink:href="qscriptengine.xml#evaluate">evaluate</db:link>() the script.</db:para>
<db:programlisting language="cpp">     debugger-&gt;action(QScriptEngineDebugger::InterruptAction)-&gt;trigger();
     engine-&gt;evaluate(contents, fileName);
</db:programlisting>
<db:para>By default, the <db:link xlink:href="qscriptenginedebugger.xml#standardWindow">standard debugger window</db:link> is shown when evaluation is suspended. This can be changed by calling the <db:link xlink:href="qscriptenginedebugger.xml#setAutoShowStandardWindow">setAutoShowStandardWindow</db:link>() function.</db:para>
<db:para>The debugger defines a set of <db:link xlink:href="qscriptenginedebugger.xml#DebuggerAction-enum">actions</db:link> that are available, such as stopping execution or printing the contents of a variable. It also provides a set of widgets (components) that display the information available from the debugger and that trigger the actions on request. The actions available are identified by the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerAction-enum">DebuggerAction</db:link> enum, and the widgets are identified by the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">DebuggerWidget</db:link> enum.</db:para>
<db:para>Access to the individual debugger widgets is provided by the <db:link xlink:href="qscriptenginedebugger.xml#widget">widget</db:link>() function. This makes it possible to arrange the widgets in a custom manner. Similarly, the <db:link xlink:href="qscriptenginedebugger.xml#action">action</db:link>() function provides access to the various debugger actions.</db:para>
<db:para>The <db:link xlink:href="qscriptenginedebugger.xml#createStandardToolBar">createStandardToolBar</db:link>() function creates a standard toolbar, and the <db:link xlink:href="qscriptenginedebugger.xml#createStandardMenu">createStandardMenu</db:link>() function creates a standard menu; these functions can be useful if you are creating a custom debugger configuration.</db:para>
<db:para>The <db:link xlink:href="qscriptenginedebugger.xml#evaluationSuspended">evaluationSuspended</db:link>() signal is emitted when the debugger has suspended script evaluation and entered interactive mode, i.e., the mode in which it accepts input from the user. The <db:link xlink:href="qscriptenginedebugger.xml#evaluationResumed">evaluationResumed</db:link>() signal is emitted when script evaluation is resumed, i.e, when execution control is given back to the script engine. The <db:link xlink:href="qscriptenginedebugger.xml#state">state</db:link>() function returns the debugger's current state.</db:para>
<db:para>When calling <db:link xlink:href="qscriptengine.xml#evaluate">QScriptEngine::evaluate</db:link>() it is useful to pass a descriptive script name (file name) as second argument, as this is the name that will be displayed by the debugger in the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">ScriptsWidget</db:link>; if a name is not passed, the script will be labelled &quot;anonymous&quot;.</db:para>
<db:para>When evaluation is suspended, the debugger will also suspend the event loop of the script. In the following snippet, the call to <db:link xlink:href="qscriptengine.xml#evaluate">QScriptEngine::evaluate</db:link>() causes the debugger to be triggered, and the function call does not return until the user has finished interacting with the debugger.</db:para>
<db:programlisting language="cpp">    engine.evaluate(&quot;debugger&quot;);
</db:programlisting>
<db:para>When the Qt Script debugger is running, the C++ application itself is not &quot;frozen&quot;. This means that it is possible that more scripts are evaluated, even though the debugger has suspended evaluation of the <db:emphasis role="bold">current</db:emphasis> script evaluation. For example, a C++ timer might trigger that causes a script function to be called, or the user might click on a button in the main application user interface whose clicked() signal is connected to a script function. This kind of nested evaluation is permitted. The debugger will enter interactive mode for the new script if an exception is thrown or a breakpoint is reached. Note that it will not stop when encountering <db:code>debugger</db:code> statements.</db:para>
<db:para>Nested evaluation requires some thought when deciding how the debugger is presented to the user; for example, whether a modal dialog is suitable, or whether some parts of the main application user interface should be disabled while the debugger is running.</db:para>
<db:para>Debugging inside of a <db:link xlink:href="qwidget.xml#paintEvent">paintEvent</db:link>() is currently not supported. If you need to debug painting-related script code, that code should be evaluated outside of the C++ paintEvent(), e.g. by rendering to an image, like the <db:link xlink:href="qml-qtquick-context2d.xml">Context2D</db:link> and Tetrix Qt Script examples do. This will make the code safe for debugging.</db:para>
<db:para>The debugger adds some special properties to the script engine: <db:code>__FILE__</db:code> holds the name of the script in which the current evaluation occurs, and <db:code>__LINE__</db:code> holds the current line number. These are useful when doing print()-style debugging (the messages appear in the debugger's debug output widget).</db:para>
<db:para>The <db:link xlink:href="qtscriptdebugger-manual.xml">Qt Script Debugger Manual</db:link> describes how to use the debugger. The <db:link xlink:href="qtscript-script-context2d-example.xml">Context2D example</db:link> shows how to integrate the debugger in applications.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link></db:member>
<db:member><db:link xlink:href="qtscript-script-context2d-example.xml">Context2D Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DebuggerAction-enum">
<db:title>enum QScriptEngineDebugger::DebuggerAction</db:title>
<db:para>This enum specifies the action that the <db:link xlink:href="qscriptenginedebugger.xml#action">action</db:link>() function should retrieve. The actions retrieved can be connected to any slot and connected to any widget. Please see the <db:link xlink:href="qtscriptdebugger-manual.xml">Qt Script Debugger Manual</db:link>'s <db:link xlink:href="qtscriptdebugger-manual.xml#console-command-reference">Console Command Reference</db:link> for a detailed description of these actions.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::InterruptAction</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Suspends script execution as soon as the next script statement is reached.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::ContinueAction</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Gives the execution control back to the script engine.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::StepIntoAction</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Performs a step action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::StepOverAction</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Performs a next action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::StepOutAction</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Executes the script until the current function returns.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::RunToCursorAction</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Continues execution to the selected line (which contains the cursor) in the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">CodeWidget</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::RunToNewScriptAction</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Returns control to the script engine until a new script is executed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::ToggleBreakpointAction</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Toggles a breakpoint at the selected line in the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">CodeWidget</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::ClearDebugOutputAction</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Clears the contents of the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">DebugOutputWidget</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::ClearErrorLogAction</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Clears the contents of the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">ErrorLogWidget</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::ClearConsoleAction</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Clears the contents of the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">ConsoleWidget</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::FindInScriptAction</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Displays the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">CodeFinderWidget</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::FindNextInScriptAction</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Finds next occurrence in the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">CodeWidget</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::FindPreviousInScriptAction</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Finds previous occurrence in the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">CodeWidget</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::GoToLineAction</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>Shows the &quot;Go to Line&quot; dialog.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="DebuggerState-enum">
<db:title>[since 4.6] enum QScriptEngineDebugger::DebuggerState</db:title>
<db:para>This enum specifies the current state of the debugger.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::RunningState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The debugger is running. (Script evaluation is allowed.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::SuspendedState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The debugger has suspended script evaluation.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="DebuggerWidget-enum">
<db:title>enum QScriptEngineDebugger::DebuggerWidget</db:title>
<db:para>This enum decides the widget that the <db:link xlink:href="qscriptenginedebugger.xml#widget">widget</db:link>() function should retrieve. We treat these widgets in more detail in the <db:link xlink:href="qtscriptdebugger-manual.xml">Qt Script Debugger Manual</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::ConsoleWidget</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Provides a command-line interface to the debugger.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::StackWidget</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Shows a backtrace of the script's execution state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::ScriptsWidget</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Displays a list of currently loaded scripts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::LocalsWidget</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Shows the local variables of the current stack frame.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::CodeWidget</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Displays the code of the current script.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::CodeFinderWidget</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Provides a widget that can search for text in the script shown in the CodeWidget.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::BreakpointsWidget</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Shows breakpoints that have been set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::DebugOutputWidget</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Contains output from the <db:code>print()</db:code> script function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link></db:emphasis>::ErrorLogWidget</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Shows error messages that have been generated.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScriptEngineDebugger">
<db:title>[explicit] QScriptEngineDebugger::QScriptEngineDebugger(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new <db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link> object with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>To attach a <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link> to the debugger, use <db:link xlink:href="qscriptenginedebugger.xml#attachTo">attachTo</db:link>() function.</db:para>
</db:section>
<db:section xml:id="dtor.QScriptEngineDebugger">
<db:title>[virtual noexcept] QScriptEngineDebugger::~QScriptEngineDebugger()</db:title>
<db:para>Destroys this <db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link>.</db:para>
</db:section>
<db:section xml:id="action">
<db:title>QAction *QScriptEngineDebugger::action(QScriptEngineDebugger::DebuggerAction <db:emphasis>action</db:emphasis>) const</db:title>
<db:para>Returns a pointer to the specified <db:code role="parameter">action</db:code>. The actions available are given by the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerAction-enum">DebuggerAction</db:link> enum.</db:para>
<db:para>With this function, you can add the actions to your own widgets, toolbars, and menus. It is also convenient if you, for example, wish to spice things up with your own groovy icons. The code example below shows how to add actions to a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link>.</db:para>
<db:programlisting language="cpp">    QAction *continueAction = debugger-&gt;action(QScriptEngineDebugger::ContinueAction);
    QAction *stepOverAction = debugger-&gt;action(QScriptEngineDebugger::StepOverAction);
    QAction *stepIntoAction = debugger-&gt;action(QScriptEngineDebugger::StepIntoAction);

    QToolBar *toolBar = new QToolBar;
    toolBar-&gt;addAction(continueAction);
</db:programlisting>
<db:para>Note that <db:link xlink:href="qscriptenginedebugger.xml">QScriptEngineDebugger</db:link> has already added the actions to its <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">standard widgets</db:link> and <db:link xlink:href="qscriptenginedebugger.xml#standardWindow">standard window</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptenginedebugger.xml#widget">widget</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptenginedebugger.xml#createStandardMenu">createStandardMenu</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptenginedebugger.xml#createStandardToolBar">createStandardToolBar</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptenginedebugger.xml#standardWindow">standardWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attachTo">
<db:title>void QScriptEngineDebugger::attachTo(QScriptEngine *<db:emphasis>engine</db:emphasis>)</db:title>
<db:para>Attaches to the given <db:code role="parameter">engine</db:code>.</db:para>
<db:para>The debugger will install a custom agent (using <db:link xlink:href="qscriptengine.xml#setAgent">QScriptEngine::setAgent</db:link>()) to monitor the engine. While the debugger is attached, you should not change the agent; however, if you do have to perform additional monitoring, you must set a proxy agent that forwards all events to the debugger's agent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptenginedebugger.xml#detach">detach</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="autoShowStandardWindow">
<db:title>bool QScriptEngineDebugger::autoShowStandardWindow() const</db:title>
<db:para>Returns whether the standard debugger window is automatically shown when evaluation is suspended.</db:para>
<db:para>The default is true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptenginedebugger.xml#setAutoShowStandardWindow">setAutoShowStandardWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createStandardMenu">
<db:title>QMenu *QScriptEngineDebugger::createStandardMenu(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Creates a standard debugger menu with the given <db:code role="parameter">parent</db:code>. Returns the new menu object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptenginedebugger.xml#createStandardToolBar">createStandardToolBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createStandardToolBar">
<db:title>QToolBar *QScriptEngineDebugger::createStandardToolBar(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Creates a standard debugger toolbar with the given <db:code role="parameter">parent</db:code>. Returns the new toolbar object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptenginedebugger.xml#createStandardMenu">createStandardMenu</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="detach">
<db:title>void QScriptEngineDebugger::detach()</db:title>
<db:para>Detaches from the current script engine, if any.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptenginedebugger.xml#attachTo">attachTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="evaluationResumed">
<db:title>void QScriptEngineDebugger::evaluationResumed()</db:title>
<db:para>This signal is emitted when the debugger has resumed script evaluation (e.g. the user gave the &quot;continue&quot; command).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptenginedebugger.xml#evaluationSuspended">evaluationSuspended</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="evaluationSuspended">
<db:title>void QScriptEngineDebugger::evaluationSuspended()</db:title>
<db:para>This signal is emitted when the debugger has suspended script evaluation for whatever reason (e.g. due to an uncaught script exception, or due to a breakpoint being triggered).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptenginedebugger.xml#evaluationResumed">evaluationResumed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAutoShowStandardWindow">
<db:title>void QScriptEngineDebugger::setAutoShowStandardWindow(bool <db:emphasis>autoShow</db:emphasis>)</db:title>
<db:para>Sets whether the standard debugger window is automatically shown when evaluation is suspended. If <db:code role="parameter">autoShow</db:code> is true, the window will be automatically shown, otherwise it will not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptenginedebugger.xml#autoShowStandardWindow">autoShowStandardWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="standardWindow">
<db:title>QMainWindow *QScriptEngineDebugger::standardWindow() const</db:title>
<db:para>Returns a main window with a standard configuration of the debugger's components.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptenginedebugger.xml#createStandardMenu">createStandardMenu</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptenginedebugger.xml#createStandardToolBar">createStandardToolBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>[since 4.6] QScriptEngineDebugger::DebuggerState QScriptEngineDebugger::state() const</db:title>
<db:para>Returns the current state of the debugger.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptenginedebugger.xml#evaluationResumed">evaluationResumed</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptenginedebugger.xml#evaluationSuspended">evaluationSuspended</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QScriptEngineDebugger::widget(QScriptEngineDebugger::DebuggerWidget <db:emphasis>widget</db:emphasis>) const</db:title>
<db:para>Returns a pointer to the instance of the specified standard <db:code role="parameter">widget</db:code>. The widgets available are defined by the <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">DebuggerWidget</db:link> enum.</db:para>
<db:para>A main window containing all widgets is returned by <db:link xlink:href="qscriptenginedebugger.xml#standardWindow">standardWindow</db:link>(). If you do not want to use this window, you can fetch the individual widgets with this function. For instance, the code example below shows how to set up a layout containing a <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">code window</db:link> and a <db:link xlink:href="qscriptenginedebugger.xml#DebuggerWidget-enum">stack widget</db:link>.</db:para>
<db:programlisting language="cpp">    QWidget *codeWindow = debugger-&gt;widget(QScriptEngineDebugger::CodeWidget);
    QWidget *stackWidget = debugger-&gt;widget(QScriptEngineDebugger::StackWidget);

    QLayout *layout = new QHBoxLayout;
    layout-&gt;addWidget(codeWindow);
    layout-&gt;addWidget(stackWidget);
</db:programlisting>
<db:para>Note that you need to set <db:link xlink:href="qscriptenginedebugger.xml#setAutoShowStandardWindow">setAutoShowStandardWindow</db:link>() to false; if not, the standard window will be shown regardless.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptenginedebugger.xml#action">action</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptenginedebugger.xml#standardWindow">standardWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptenginedebugger.xml#setAutoShowStandardWindow">setAutoShowStandardWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
