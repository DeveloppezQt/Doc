<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Key Class</db:title>
<db:subtitle>QPixmapCache::Key</db:subtitle>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpixmapcache-key.xml">QPixmapCache::Key</db:link> class can be used for efficient access to the <db:link xlink:href="qpixmapcache.xml">QPixmapCache</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Key</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Use <db:link xlink:href="qpixmapcache.xml#insert">QPixmapCache::insert</db:link>() to receive an instance of Key generated by the pixmap cache. You can store the key in your own objects for a very efficient one-to-one object-to-pixmap mapping.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="Key">
<db:title>Key::Key()</db:title>
<db:para>Constructs an empty Key object.</db:para>
</db:section>
<db:section xml:id="dtor.Key">
<db:title>[noexcept] Key::~Key()</db:title>
<db:para>Destroys the key.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>[noexcept] bool Key::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if there is a cached pixmap associated with this key. Otherwise, if pixmap was flushed, the key is no longer valid.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void Key::swap(QPixmapCache::Key &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this key with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash">
<db:title>[noexcept, since 6.6] size_t qHash(const QPixmapCache::Key &amp;<db:emphasis>key</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:para>Returns the hash value for <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
</db:section>
</db:article>
