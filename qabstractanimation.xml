<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractAnimation Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> class is the base of all animations.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractAnimation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qanimationgroup.xml" xlink:role="class">QAnimationGroup</db:link>, <db:link xlink:href="qpauseanimation.xml" xlink:role="class">QPauseAnimation</db:link>, and <db:link xlink:href="qvariantanimation.xml" xlink:role="class">QVariantAnimation</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractAnimation is part of <db:simplelist><db:member><db:link xlink:href="animation.xml">Animation Framework</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class defines the functions for the functionality shared by all animations. By inheriting this class, you can create custom animations that plug into the rest of the animation framework.</db:para>
<db:para>The progress of an animation is given by its current time (<db:link xlink:href="qabstractanimation.xml#currentLoopTime">currentLoopTime</db:link>()), which is measured in milliseconds from the start of the animation (0) to its end (<db:link xlink:href="qabstractanimation.xml#duration">duration</db:link>()). The value is updated automatically while the animation is running. It can also be set directly with <db:link xlink:href="qabstractanimation.xml#currentTime-prop">setCurrentTime</db:link>().</db:para>
<db:para>At any point an animation is in one of three states: <db:link xlink:href="qabstractanimation.xml#State-enum">Running</db:link>, <db:link xlink:href="qabstractanimation.xml#State-enum">Stopped</db:link>, or <db:link xlink:href="qabstractanimation.xml#State-enum">Paused</db:link>â€“as defined by the <db:link xlink:href="qabstractanimation.xml#State-enum">State</db:link> enum. The current state can be changed by calling <db:link xlink:href="qabstractanimation.xml#start">start</db:link>(), <db:link xlink:href="qabstractanimation.xml#stop">stop</db:link>(), <db:link xlink:href="qabstractanimation.xml#pause">pause</db:link>(), or <db:link xlink:href="qabstractanimation.xml#resume">resume</db:link>(). An animation will always reset its <db:link xlink:href="qabstractanimation.xml#currentTime-prop">current time</db:link> when it is started. If paused, it will continue with the same current time when resumed. When an animation is stopped, it cannot be resumed, but will keep its current time (until started again). <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> will emit <db:link xlink:href="qabstractanimation.xml#stateChanged">stateChanged</db:link>() whenever its state changes.</db:para>
<db:para>An animation can loop any number of times by setting the <db:link xlink:href="qabstractanimation.xml#loopCount-prop">loopCount</db:link> property. When an animation's current time reaches its <db:link xlink:href="qabstractanimation.xml#duration">duration</db:link>(), it will reset the current time and keep running. A loop count of 1 (the default value) means that the animation will run one time. Note that a duration of -1 means that the animation will run until stopped; the current time will increase indefinitely. When the current time equals <db:link xlink:href="qabstractanimation.xml#duration">duration</db:link>() and the animation is in its final loop, the <db:link xlink:href="qabstractanimation.xml#State-enum">Stopped</db:link> state is entered, and the <db:link xlink:href="qabstractanimation.xml#finished">finished</db:link>() signal is emitted.</db:para>
<db:para><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> provides pure virtual functions used by subclasses to track the progress of the animation: <db:link xlink:href="qabstractanimation.xml#duration">duration</db:link>() and <db:link xlink:href="qabstractanimation.xml#updateCurrentTime">updateCurrentTime</db:link>(). The <db:link xlink:href="qabstractanimation.xml#duration">duration</db:link>() function lets you report a duration for the animation (as discussed above). The animation framework calls <db:link xlink:href="qabstractanimation.xml#updateCurrentTime">updateCurrentTime</db:link>() when current time has changed. By reimplementing this function, you can track the animation progress. Note that neither the interval between calls nor the number of calls to this function are defined; though, it will normally be 60 updates per second.</db:para>
<db:para>By reimplementing <db:link xlink:href="qabstractanimation.xml#updateState">updateState</db:link>(), you can track the animation's state changes, which is particularly useful for animations that are not driven by time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link></db:member>
<db:member><db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link></db:member>
<db:member><db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link></db:member>
<db:member><db:link xlink:href="animation-overview.xml">The Animation Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DeletionPolicy-enum">
<db:title>enum QAbstractAnimation::DeletionPolicy</db:title>
<db:enumsynopsis>
<db:enumname>DeletionPolicy</db:enumname>
<db:enumitem>
<db:enumidentifier>KeepWhenStopped</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DeleteWhenStopped</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link></db:emphasis>::KeepWhenStopped</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The animation will not be deleted when stopped.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link></db:emphasis>::DeleteWhenStopped</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The animation will be automatically deleted when stopped.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Direction-enum">
<db:title>enum QAbstractAnimation::Direction</db:title>
<db:enumsynopsis>
<db:enumname>Direction</db:enumname>
<db:enumitem>
<db:enumidentifier>Forward</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Backward</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the direction of the animation when in <db:link xlink:href="qabstractanimation.xml#State-enum">Running</db:link> state.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link></db:emphasis>::Forward</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The current time of the animation increases with time (i.e., moves from 0 and towards the end / duration).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link></db:emphasis>::Backward</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The current time of the animation decreases with time (i.e., moves from the end / duration and towards 0).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#direction-prop">direction</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="State-enum">
<db:title>enum QAbstractAnimation::State</db:title>
<db:enumsynopsis>
<db:enumname>State</db:enumname>
<db:enumitem>
<db:enumidentifier>Stopped</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Paused</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Running</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the state of the animation.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link></db:emphasis>::Stopped</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The animation is not running. This is the initial state of <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link>, and the state <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> reenters when finished. The current time remain unchanged until either <db:link xlink:href="qabstractanimation.xml#currentTime-prop">setCurrentTime</db:link>() is called, or the animation is started by calling <db:link xlink:href="qabstractanimation.xml#start">start</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link></db:emphasis>::Paused</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The animation is paused (i.e., temporarily suspended). Calling <db:link xlink:href="qabstractanimation.xml#resume">resume</db:link>() will resume animation activity.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link></db:emphasis>::Running</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The animation is running. While control is in the event loop, <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> will update its current time at regular intervals, calling <db:link xlink:href="qabstractanimation.xml#updateCurrentTime">updateCurrentTime</db:link>() when appropriate.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#state-prop">state</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#stateChanged">stateChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="currentLoop-prop">
<db:title>[bindable read-only] currentLoop : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>currentLoop</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentLoop</db:synopsisinfo>
<db:synopsisinfo role="notifier">currentLoopChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the current loop of the animation</db:para>
<db:para>This property describes the current loop of the animation. By default, the animation's loop count is 1, and so the current loop will always be 0. If the loop count is 2 and the animation runs past its duration, it will automatically rewind and restart at current time 0, and current loop 1, and so on.</db:para>
<db:para>When the current loop changes, <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> emits the <db:link xlink:href="qabstractanimation.xml#currentLoopChanged">currentLoopChanged</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="currentTime-prop">
<db:title>[bindable] currentTime : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>currentTime</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentTime</db:synopsisinfo>
<db:synopsisinfo role="setter">setCurrentTime</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the current time and progress of the animation</db:para>
<db:para>This property describes the animation's current time. You can change the current time by calling setCurrentTime, or you can call <db:link xlink:href="qabstractanimation.xml#start">start</db:link>() and let the animation run, setting the current time automatically as the animation progresses.</db:para>
<db:para>The animation's current time starts at 0, and ends at <db:link xlink:href="qabstractanimation.xml#totalDuration">totalDuration</db:link>().</db:para>
<db:note>
<db:para>You can bind other properties to currentTime, but it is not recommended setting bindings to it. As animation progresses, the currentTime is updated automatically, which cancels its bindings.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#loopCount-prop">loopCount</db:link></db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#currentLoopTime">currentLoopTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="direction-prop">
<db:title>[bindable] direction : Direction</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Direction</db:type>
<db:varname>direction</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">direction</db:synopsisinfo>
<db:synopsisinfo role="setter">setDirection</db:synopsisinfo>
<db:synopsisinfo role="notifier">directionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the direction of the animation when it is in <db:link xlink:href="qabstractanimation.xml#State-enum">Running</db:link> state.</db:para>
<db:para>This direction indicates whether the time moves from 0 towards the animation duration, or from the value of the duration and towards 0 after <db:link xlink:href="qabstractanimation.xml#start">start</db:link>() has been called.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qabstractanimation.xml#Direction-enum">Forward</db:link>.</db:para>
</db:section>
<db:section xml:id="duration-prop">
<db:title>[read-only] duration : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>duration</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">duration</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the duration of the animation.</db:para>
<db:para>If the duration is -1, it means that the duration is undefined. In this case, <db:link xlink:href="qabstractanimation.xml#loopCount-prop">loopCount</db:link> is ignored.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractanimation.xml#duration">duration</db:link></db:emphasis>() const = 0</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="loopCount-prop">
<db:title>[bindable] loopCount : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>loopCount</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">loopCount</db:synopsisinfo>
<db:synopsisinfo role="setter">setLoopCount</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the loop count of the animation</db:para>
<db:para>This property describes the loop count of the animation as an integer. By default this value is 1, indicating that the animation should run once only, and then stop. By changing it you can let the animation loop several times. With a value of 0, the animation will not run at all, and with a value of -1, the animation will loop forever until stopped. It is not supported to have loop on an animation that has an undefined duration. It will only run once.</db:para>
</db:section>
<db:section xml:id="state-prop">
<db:title>[bindable read-only] state : State</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>State</db:type>
<db:varname>state</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">state</db:synopsisinfo>
<db:synopsisinfo role="notifier">stateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>state of the animation.</db:para>
<db:para>This property describes the current state of the animation. When the animation state changes, <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> emits the <db:link xlink:href="qabstractanimation.xml#stateChanged">stateChanged</db:link>() signal.</db:para>
<db:note>
<db:para>State updates might cause updates of the <db:link xlink:href="qabstractanimation.xml#currentTime-prop">currentTime</db:link> property, which, in turn, can cancel its bindings. So be careful when setting bindings to the <db:link xlink:href="qabstractanimation.xml#currentTime-prop">currentTime</db:link> property, when you expect the state of the animation to change.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractAnimation">
<db:title>QAbstractAnimation::QAbstractAnimation(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractAnimation</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractAnimation(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs the <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> base class, and passes <db:code role="parameter">parent</db:code> to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link></db:member>
<db:member><db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QAbstractAnimation">
<db:title>[virtual] QAbstractAnimation::~QAbstractAnimation()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractAnimation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractAnimation()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Stops the animation if it's running, then destroys the <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link>. If the animation is part of a <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link>, it is automatically removed before it's destroyed.</db:para>
</db:section>
<db:section xml:id="currentLoopChanged">
<db:title>void QAbstractAnimation::currentLoopChanged(int <db:emphasis>currentLoop</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>currentLoopChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>currentLoop</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">currentLoop</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentLoopChanged(int currentLoop)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> emits this signal whenever the current loop changes. <db:code role="parameter">currentLoop</db:code> is the current loop.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractanimation.xml#currentLoop-prop">currentLoop</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#currentLoop-prop">currentLoop</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#loopCount-prop">loopCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentLoopTime">
<db:title>int QAbstractAnimation::currentLoopTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>currentLoopTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int currentLoopTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current time inside the current loop. It can go from 0 to <db:link xlink:href="qabstractanimation.xml#duration">duration</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#duration">duration</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#currentTime-prop">currentTime</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="directionChanged">
<db:title>void QAbstractAnimation::directionChanged(QAbstractAnimation::Direction <db:emphasis>newDirection</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>directionChanged</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation::Direction</db:type>
<db:parameter>newDirection</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">direction</db:synopsisinfo>
<db:synopsisinfo role="signature">void directionChanged(QAbstractAnimation::Direction newDirection)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> emits this signal whenever the direction has been changed. <db:code role="parameter">newDirection</db:code> is the new direction.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractanimation.xml#direction-prop">direction</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#direction-prop">direction</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="duration">
<db:title>[pure virtual] int QAbstractAnimation::duration() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>duration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">duration</db:synopsisinfo>
<db:synopsisinfo role="signature">int duration() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This pure virtual function returns the duration of the animation, and defines for how long <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> should update the current time. This duration is local, and does not include the loop count.</db:para>
<db:para>A return value of -1 indicates that the animation has no defined duration; the animation should run forever until stopped. This is useful for animations that are not time driven, or where you cannot easily predict its duration (e.g., event driven audio playback in a game).</db:para>
<db:para>If the animation is a parallel <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link>, the duration will be the longest duration of all its animations. If the animation is a sequential <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link>, the duration will be the sum of the duration of all its animations.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstractanimation.xml#duration-prop">duration</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#loopCount-prop">loopCount</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAbstractAnimation::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="finished">
<db:title>void QAbstractAnimation::finished()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> emits this signal after the animation has stopped and has reached the end.</db:para>
<db:para>This signal is emitted after <db:link xlink:href="qabstractanimation.xml#stateChanged">stateChanged</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#stateChanged">stateChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="group">
<db:title>QAnimationGroup *QAbstractAnimation::group() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAnimationGroup *</db:type>
<db:methodname>group</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnimationGroup * group() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If this animation is part of a <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link>, this function returns a pointer to the group; otherwise, it returns nullptr.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanimationgroup.xml#addAnimation">QAnimationGroup::addAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pause">
<db:title>void QAbstractAnimation::pause()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pause</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pause()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Pauses the animation. When the animation is paused, <db:link xlink:href="qabstractanimation.xml#state-prop">state</db:link>() returns Paused. The value of <db:link xlink:href="qabstractanimation.xml#currentTime-prop">currentTime</db:link> will remain unchanged until <db:link xlink:href="qabstractanimation.xml#resume">resume</db:link>() or <db:link xlink:href="qabstractanimation.xml#start">start</db:link>() is called. If you want to continue from the current time, call <db:link xlink:href="qabstractanimation.xml#resume">resume</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#state-prop">state</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#resume">resume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resume">
<db:title>void QAbstractAnimation::resume()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resume</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resume()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resumes the animation after it was paused. When the animation is resumed, it emits the resumed() and <db:link xlink:href="qabstractanimation.xml#stateChanged">stateChanged</db:link>() signals. The currenttime is not changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#pause">pause</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#state-prop">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPaused">
<db:title>void QAbstractAnimation::setPaused(bool <db:emphasis>paused</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPaused</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>paused</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPaused(bool paused)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">paused</db:code> is true, the animation is paused. If <db:code role="parameter">paused</db:code> is false, the animation is resumed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#state-prop">state</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#pause">pause</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#resume">resume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QAbstractAnimation::start(QAbstractAnimation::DeletionPolicy <db:emphasis>policy</db:emphasis> = KeepWhenStopped)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation::DeletionPolicy</db:type>
<db:parameter>policy</db:parameter>
<db:initializer>KeepWhenStopped</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void start(QAbstractAnimation::DeletionPolicy policy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the animation. The <db:code role="parameter">policy</db:code> argument says whether or not the animation should be deleted when it's done. When the animation starts, the <db:link xlink:href="qabstractanimation.xml#stateChanged">stateChanged</db:link>() signal is emitted, and <db:link xlink:href="qabstractanimation.xml#state-prop">state</db:link>() returns Running. When control reaches the event loop, the animation will run by itself, periodically calling <db:link xlink:href="qabstractanimation.xml#updateCurrentTime">updateCurrentTime</db:link>() as the animation progresses.</db:para>
<db:para>If the animation is currently stopped or has already reached the end, calling start() will rewind the animation and start again from the beginning. When the animation reaches the end, the animation will either stop, or if the loop level is more than 1, it will rewind and continue from the beginning.</db:para>
<db:para>If the animation is already running, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#stop">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#state-prop">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QAbstractAnimation::stateChanged(QAbstractAnimation::State <db:emphasis>newState</db:emphasis>, QAbstractAnimation::State <db:emphasis>oldState</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation::State</db:type>
<db:parameter>newState</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractAnimation::State</db:type>
<db:parameter>oldState</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">state</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> emits this signal whenever the state of the animation has changed from <db:code role="parameter">oldState</db:code> to <db:code role="parameter">newState</db:code>. This signal is emitted after the virtual <db:link xlink:href="qabstractanimation.xml#updateState">updateState</db:link>() function is called.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractanimation.xml#state-prop">state</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#updateState">updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop">
<db:title>void QAbstractAnimation::stop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops the animation. When the animation is stopped, it emits the <db:link xlink:href="qabstractanimation.xml#stateChanged">stateChanged</db:link>() signal, and <db:link xlink:href="qabstractanimation.xml#state-prop">state</db:link>() returns Stopped. The current time is not changed.</db:para>
<db:para>If the animation stops by itself after reaching the end (i.e., <db:link xlink:href="qabstractanimation.xml#currentLoopTime">currentLoopTime</db:link>() == <db:link xlink:href="qabstractanimation.xml#duration">duration</db:link>() and <db:link xlink:href="qabstractanimation.xml#currentLoop-prop">currentLoop</db:link>() &gt; <db:link xlink:href="qabstractanimation.xml#loopCount-prop">loopCount</db:link>() - 1), the <db:link xlink:href="qabstractanimation.xml#finished">finished</db:link>() signal is emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#state-prop">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="totalDuration">
<db:title>int QAbstractAnimation::totalDuration() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>totalDuration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int totalDuration() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the total and effective duration of the animation, including the loop count.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#duration">duration</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#currentTime-prop">currentTime</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateCurrentTime">
<db:title>[pure virtual protected] void QAbstractAnimation::updateCurrentTime(int <db:emphasis>currentTime</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>updateCurrentTime</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>currentTime</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateCurrentTime(int currentTime) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This pure virtual function is called every time the animation's <db:code role="parameter">currentTime</db:code> changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#updateState">updateState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateDirection">
<db:title>[virtual protected] void QAbstractAnimation::updateDirection(QAbstractAnimation::Direction <db:emphasis>direction</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>updateDirection</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation::Direction</db:type>
<db:parameter>direction</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateDirection(QAbstractAnimation::Direction direction)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called by <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> when the direction of the animation is changed. The <db:code role="parameter">direction</db:code> argument is the new direction.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#direction-prop">setDirection</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#direction-prop">direction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateState">
<db:title>[virtual protected] void QAbstractAnimation::updateState(QAbstractAnimation::State <db:emphasis>newState</db:emphasis>, QAbstractAnimation::State <db:emphasis>oldState</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>updateState</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation::State</db:type>
<db:parameter>newState</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractAnimation::State</db:type>
<db:parameter>oldState</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateState(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called by <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> when the state of the animation is changed from <db:code role="parameter">oldState</db:code> to <db:code role="parameter">newState</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#stop">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#pause">pause</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#resume">resume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
