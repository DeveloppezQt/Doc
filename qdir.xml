<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDir Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdir.xml">QDir</db:link> class provides access to directory structures and their contents.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
<db:para>This class is <db:emphasis>equality-comparable</db:emphasis>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDir</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDir is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qdir.xml">QDir</db:link> is used to manipulate path names, access information regarding paths and files, and manipulate the underlying file system. It can also be used to access Qt's <db:link xlink:href="resources.xml">resource system</db:link>.</db:para>
<db:para>Qt uses &quot;/&quot; as a universal directory separator in the same way that &quot;/&quot; is used as a path separator in URLs. If you always use &quot;/&quot; as a directory separator, Qt will translate your paths to conform to the underlying operating system.</db:para>
<db:para>A <db:link xlink:href="qdir.xml">QDir</db:link> can point to a file using either a relative or an absolute path. Absolute paths begin with the directory separator (optionally preceded by a drive specification under Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current directory.</db:para>
<db:para>Examples of absolute paths:</db:para>
<db:programlisting language="cpp">QDir(&quot;/home/user/Documents&quot;)
QDir(&quot;C:/Users&quot;)
</db:programlisting>
<db:para>On Windows, the second example above will be translated to C:\Users when used to access files.</db:para>
<db:para>Examples of relative paths:</db:para>
<db:programlisting language="cpp">QDir(&quot;images/landscape.png&quot;)
</db:programlisting>
<db:para>You can use the <db:link xlink:href="qdir.xml#isRelative">isRelative</db:link>() or <db:link xlink:href="qdir.xml#isAbsolute">isAbsolute</db:link>() functions to check if a <db:link xlink:href="qdir.xml">QDir</db:link> is using a relative or an absolute file path. Call <db:link xlink:href="qdir.xml#makeAbsolute">makeAbsolute</db:link>() to convert a relative <db:link xlink:href="qdir.xml">QDir</db:link> to an absolute one.</db:para>
<db:note>
<db:para>Paths starting with a colon (<db:emphasis>:</db:emphasis>) are always considered absolute, as they denote a <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
</db:note>
<db:section xml:id="navigation-and-directory-operations">
<db:title>Navigation and Directory Operations</db:title>
<db:para>A directory's path can be obtained with the <db:link xlink:href="qdir.xml#path">path</db:link>() function, and a new path set with the <db:link xlink:href="qdir.xml#setPath">setPath</db:link>() function. The absolute path to a directory is found by calling <db:link xlink:href="qdir.xml#absolutePath">absolutePath</db:link>().</db:para>
<db:para>The name of a directory is found using the <db:link xlink:href="qdir.xml#dirName">dirName</db:link>() function. This typically returns the last element in the absolute path that specifies the location of the directory. However, it can also return &quot;.&quot; if the <db:link xlink:href="qdir.xml">QDir</db:link> represents the current directory.</db:para>
<db:programlisting language="cpp">QDir(&quot;Documents/Letters/Applications&quot;).dirName() // &quot;Applications&quot;
QDir().dirName()                                 // &quot;.&quot;
</db:programlisting>
<db:para>The path for a directory can also be changed with the <db:link xlink:href="qdir.xml#cd">cd</db:link>() and <db:link xlink:href="qdir.xml#cdUp">cdUp</db:link>() functions, both of which operate like familiar shell commands. When <db:link xlink:href="qdir.xml#cd">cd</db:link>() is called with the name of an existing directory, the <db:link xlink:href="qdir.xml">QDir</db:link> object changes directory so that it represents that directory instead. The <db:link xlink:href="qdir.xml#cdUp">cdUp</db:link>() function changes the directory of the <db:link xlink:href="qdir.xml">QDir</db:link> object so that it refers to its parent directory; i.e. cd(&quot;..&quot;) is equivalent to <db:link xlink:href="qdir.xml#cdUp">cdUp</db:link>().</db:para>
<db:para>Directories can be created with <db:link xlink:href="qdir.xml#mkdir">mkdir</db:link>(), renamed with <db:link xlink:href="qdir.xml#rename">rename</db:link>(), and removed with <db:link xlink:href="qdir.xml#rmdir">rmdir</db:link>().</db:para>
<db:para>You can test for the presence of a directory with a given name by using <db:link xlink:href="qdir.xml#exists-1">exists</db:link>(), and the properties of a directory can be tested with <db:link xlink:href="qdir.xml#isReadable">isReadable</db:link>(), <db:link xlink:href="qdir.xml#isAbsolute">isAbsolute</db:link>(), <db:link xlink:href="qdir.xml#isRelative">isRelative</db:link>(), and <db:link xlink:href="qdir.xml#isRoot">isRoot</db:link>().</db:para>
<db:para>The <db:link xlink:href="qdir.xml#refresh">refresh</db:link>() function re-reads the directory's data from disk.</db:para>
</db:section>
<db:section xml:id="files-and-directory-contents">
<db:title>Files and Directory Contents</db:title>
<db:para>Directories contain a number of entries, representing files, directories, and symbolic links. The number of entries in a directory is returned by <db:link xlink:href="qdir.xml#count">count</db:link>(). A string list of the names of all the entries in a directory can be obtained with <db:link xlink:href="qdir.xml#entryList">entryList</db:link>(). If you need information about each entry, use <db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>() to obtain a list of <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> objects.</db:para>
<db:para>Paths to files and directories within a directory can be constructed using <db:link xlink:href="qdir.xml#filePath">filePath</db:link>() and <db:link xlink:href="qdir.xml#absoluteFilePath">absoluteFilePath</db:link>(). The <db:link xlink:href="qdir.xml#filePath">filePath</db:link>() function returns a path to the specified file or directory relative to the path of the <db:link xlink:href="qdir.xml">QDir</db:link> object; <db:link xlink:href="qdir.xml#absoluteFilePath">absoluteFilePath</db:link>() returns an absolute path to the specified file or directory. Neither of these functions checks for the existence of files or directory; they only construct paths.</db:para>
<db:programlisting language="cpp">QDir directory(&quot;Documents/Letters&quot;);
QString path = directory.filePath(&quot;contents.txt&quot;);
QString absolutePath = directory.absoluteFilePath(&quot;contents.txt&quot;);
</db:programlisting>
<db:para>Files can be removed by using the <db:link xlink:href="qdir.xml#remove">remove</db:link>() function. Directories cannot be removed in the same way as files; use <db:link xlink:href="qdir.xml#rmdir">rmdir</db:link>() to remove them instead.</db:para>
<db:para>It is possible to reduce the number of entries returned by <db:link xlink:href="qdir.xml#entryList">entryList</db:link>() and <db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>() by applying filters to a <db:link xlink:href="qdir.xml">QDir</db:link> object. You can apply a name filter to specify a pattern with wildcards that file names need to match, an attribute filter that selects properties of entries and can distinguish between files and directories, and a sort order.</db:para>
<db:para>Name filters are lists of strings that are passed to <db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>(). Attribute filters consist of a bitwise OR combination of Filters, and these are specified when calling <db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>(). The sort order is specified using <db:link xlink:href="qdir.xml#setSorting">setSorting</db:link>() with a bitwise OR combination of <db:link xlink:href="qdir.xml#SortFlag-enum">SortFlags</db:link>.</db:para>
<db:para>You can test to see if a filename matches a filter using the <db:link xlink:href="qdir.xml#match">match</db:link>() function.</db:para>
<db:para>Filter and sort order flags may also be specified when calling <db:link xlink:href="qdir.xml#entryList">entryList</db:link>() and <db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>() in order to override previously defined behavior.</db:para>
</db:section>
<db:section xml:id="the-current-directory-and-other-special-paths">
<db:title>The Current Directory and Other Special Paths</db:title>
<db:para>Access to some common directories is provided with a number of static functions that return <db:link xlink:href="qdir.xml">QDir</db:link> objects. There are also corresponding functions for these that return strings:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qdir.xml">QDir</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:th>
<db:th>
<db:para>Return Value</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdir.xml#current">current</db:link>()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdir.xml#currentPath">currentPath</db:link>()</db:para>
</db:td>
<db:td>
<db:para>The application's working directory</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdir.xml#home">home</db:link>()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdir.xml#homePath">homePath</db:link>()</db:para>
</db:td>
<db:td>
<db:para>The user's home directory</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdir.xml#root">root</db:link>()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdir.xml#rootPath">rootPath</db:link>()</db:para>
</db:td>
<db:td>
<db:para>The root directory</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdir.xml#temp">temp</db:link>()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdir.xml#tempPath">tempPath</db:link>()</db:para>
</db:td>
<db:td>
<db:para>The system's temporary directory</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qdir.xml#setCurrent">setCurrent</db:link>() static function can also be used to set the application's working directory.</db:para>
<db:para>If you want to find the directory containing the application's executable, see <db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>().</db:para>
<db:para>The <db:link xlink:href="qdir.xml#drives">drives</db:link>() static function provides a list of root directories for each device that contains a filing system. On Unix systems this returns a list containing a single root directory &quot;/&quot;; on Windows the list will usually contain C:/, and possibly other drive letters such as D:/, depending on the configuration of the user's system.</db:para>
</db:section>
<db:section xml:id="path-manipulation-and-strings">
<db:title>Path Manipulation and Strings</db:title>
<db:para>Paths containing &quot;.&quot; elements that reference the current directory at that point in the path, &quot;..&quot; elements that reference the parent directory, and symbolic links can be reduced to a canonical form using the <db:link xlink:href="qdir.xml#canonicalPath">canonicalPath</db:link>() function.</db:para>
<db:para>Paths can also be simplified by using <db:link xlink:href="qdir.xml#cleanPath">cleanPath</db:link>() to remove redundant &quot;/&quot; and &quot;..&quot; elements.</db:para>
<db:para>It is sometimes necessary to be able to show a path in the native representation for the user's platform. The static <db:link xlink:href="qdir.xml#toNativeSeparators">toNativeSeparators</db:link>() function returns a copy of the specified path in which each directory separator is replaced by the appropriate separator for the underlying operating system.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>Check if a directory exists:</db:para>
<db:programlisting language="cpp">QDir dir(&quot;example&quot;);
if (!dir.exists())
    qWarning(&quot;Cannot find the example directory&quot;);
</db:programlisting>
<db:para>(We could also use one of the static convenience functions <db:link xlink:href="qfileinfo.xml#exists">QFileInfo::exists</db:link>() or <db:link xlink:href="qfile.xml#exists-2">QFile::exists</db:link>().)</db:para>
<db:para>Traversing directories and reading a file:</db:para>
<db:programlisting language="cpp">QDir dir = QDir::root();                 // &quot;/&quot;
if (!dir.cd(&quot;tmp&quot;)) {                    // &quot;/tmp&quot;
    qWarning(&quot;Cannot find the \&quot;/tmp\&quot; directory&quot;);
} else {
    QFile file(dir.filePath(&quot;ex1.txt&quot;)); // &quot;/tmp/ex1.txt&quot;
    if (!file.open(QIODevice::ReadWrite))
        qWarning(&quot;Cannot create the file %s&quot;, file.name());
}
</db:programlisting>
<db:para>A program that lists all the files in the current directory (excluding symbolic links), sorted by size, smallest first:</db:para>
<db:programlisting language="cpp">#include &lt;QDir&gt;
#include &lt;iostream&gt;

int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);
    QDir dir;
    dir.setFilter(QDir::Files | QDir::Hidden | QDir::NoSymLinks);
    dir.setSorting(QDir::Size | QDir::Reversed);

    QFileInfoList list = dir.entryInfoList();
    std::cout &lt;&lt; &quot;     Bytes Filename&quot; &lt;&lt; std::endl;
    for (int i = 0; i &lt; list.size(); ++i) {
        QFileInfo fileInfo = list.at(i);
        std::cout &lt;&lt; qPrintable(QString(&quot;%1 %2&quot;).arg(fileInfo.size(), 10)
                                                .arg(fileInfo.fileName()));
        std::cout &lt;&lt; std::endl;
    }
    return 0;
}
</db:programlisting>
</db:section>
<db:section xml:id="platform-specific-issues">
<db:title>Platform Specific Issues</db:title>
<db:para>On Android, some limitations apply when dealing with <db:link xlink:href="https://developer.android.com/guide/topics/providers/content-provider-basics#ContentURIs">content URIs</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Access permissions might be needed by prompting the user through the QFileDialog which implements <db:link xlink:href="https://developer.android.com/training/data-storage/shared/documents-files">Android's native file picker</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Aim to follow the <db:link xlink:href="https://developer.android.com/training/data-storage#scoped-storage">Scoped storage</db:link> guidelines, such as using app specific directories instead of other public external directories. For more information, also see <db:link xlink:href="https://developer.android.com/training/data-storage/use-cases">storage best practices</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Due to the design of Qt APIs (e.g. <db:link xlink:href="qfile.xml">QFile</db:link>), it's not possible to fully integrate the latter APIs with Android's <db:link xlink:href="https://developer.android.com/reference/android/provider/MediaStore">MediaStore</db:link> APIs.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
<db:member>QFileDialog</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>()</db:member>
<db:member><db:link xlink:href="">Fetch More Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Filter-enum">
<db:title>enum QDir::Filter</db:title>
<db:bridgehead renderas="sect2">flags QDir::Filters</db:bridgehead>
<db:para>This enum describes the filtering options available to <db:link xlink:href="qdir.xml">QDir</db:link>; e.g. for <db:link xlink:href="qdir.xml#entryList">entryList</db:link>() and <db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>(). The filter value is specified by combining values from the following list using the bitwise OR operator:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Dirs</db:code></db:para>
</db:td>
<db:td><db:code>0x001</db:code></db:td>
<db:td>
<db:para>List directories that match the filters.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::AllDirs</db:code></db:para>
</db:td>
<db:td><db:code>0x400</db:code></db:td>
<db:td>
<db:para>List all directories; i.e. don't apply the filters to directory names.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Files</db:code></db:para>
</db:td>
<db:td><db:code>0x002</db:code></db:td>
<db:td>
<db:para>List files.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Drives</db:code></db:para>
</db:td>
<db:td><db:code>0x004</db:code></db:td>
<db:td>
<db:para>List disk drives (ignored under Unix).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::NoSymLinks</db:code></db:para>
</db:td>
<db:td><db:code>0x008</db:code></db:td>
<db:td>
<db:para>Do not list symbolic links (ignored by operating systems that don't support symbolic links).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::NoDotAndDotDot</db:code></db:para>
</db:td>
<db:td><db:code>NoDot | NoDotDot</db:code></db:td>
<db:td>
<db:para>Do not list the special entries &quot;.&quot; and &quot;..&quot;.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::NoDot</db:code></db:para>
</db:td>
<db:td><db:code>0x2000</db:code></db:td>
<db:td>
<db:para>Do not list the special entry &quot;.&quot;.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::NoDotDot</db:code></db:para>
</db:td>
<db:td><db:code>0x4000</db:code></db:td>
<db:td>
<db:para>Do not list the special entry &quot;..&quot;.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::AllEntries</db:code></db:para>
</db:td>
<db:td><db:code>Dirs | Files | Drives</db:code></db:td>
<db:td>
<db:para>List directories, files, drives and symlinks (this does not list broken symlinks unless you specify System).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Readable</db:code></db:para>
</db:td>
<db:td><db:code>0x010</db:code></db:td>
<db:td>
<db:para>List files for which the application has read access. The Readable value needs to be combined with Dirs or Files.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Writable</db:code></db:para>
</db:td>
<db:td><db:code>0x020</db:code></db:td>
<db:td>
<db:para>List files for which the application has write access. The Writable value needs to be combined with Dirs or Files.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Executable</db:code></db:para>
</db:td>
<db:td><db:code>0x040</db:code></db:td>
<db:td>
<db:para>List files for which the application has execute access. The Executable value needs to be combined with Dirs or Files.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Modified</db:code></db:para>
</db:td>
<db:td><db:code>0x080</db:code></db:td>
<db:td>
<db:para>Only list files that have been modified (ignored on Unix).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Hidden</db:code></db:para>
</db:td>
<db:td><db:code>0x100</db:code></db:td>
<db:td>
<db:para>List hidden files (on Unix, files starting with a &quot;.&quot;).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::System</db:code></db:para>
</db:td>
<db:td><db:code>0x200</db:code></db:td>
<db:td>
<db:para>List system files (on Unix, FIFOs, sockets and device files are included; on Windows, .lnk files are included)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::CaseSensitive</db:code></db:para>
</db:td>
<db:td><db:code>0x800</db:code></db:td>
<db:td>
<db:para>The filter should be case sensitive.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Functions that use Filter enum values to filter lists of files and directories will include symbolic links to files and directories unless you set the NoSymLinks value.</db:para>
<db:para>A default constructed <db:link xlink:href="qdir.xml">QDir</db:link> will not filter out files based on their permissions, so <db:link xlink:href="qdir.xml#entryList">entryList</db:link>() and <db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>() will return all files that are readable, writable, executable, or any combination of the three. This makes the default easy to write, and at the same time useful.</db:para>
<db:para>For example, setting the Readable, Writable, and Files flags allows all files to be listed for which the application has read access, write access or both. If the Dirs and Drives flags are also included in this combination then all drives, directories, all files that the application can read, write, or execute, and symlinks to such files/directories can be listed.</db:para>
<db:para>To retrieve the permissions for a directory, use the <db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>() function to get the associated <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> objects and then use the <db:link xlink:href="qfileinfo.xml#permissions">QFileInfo::permissions</db:link>() to obtain the permissions and ownership for each file.</db:para>
<db:para>The <db:code>Filters</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Filter&gt;. </db:code>It stores an OR combination of <db:code>Filter</db:code> values.</db:para>
</db:section>
<db:section xml:id="SortFlag-enum">
<db:title>enum QDir::SortFlag</db:title>
<db:bridgehead renderas="sect2">flags QDir::SortFlags</db:bridgehead>
<db:para>This enum describes the sort options available to <db:link xlink:href="qdir.xml">QDir</db:link>, e.g. for <db:link xlink:href="qdir.xml#entryList">entryList</db:link>() and <db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>(). The sort value is specified by OR-ing together values from the following list:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Name</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
<db:td>
<db:para>Sort by name.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Time</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Sort by time (modification time).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Size</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Sort by file size.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Type</db:code></db:para>
</db:td>
<db:td><db:code>0x80</db:code></db:td>
<db:td>
<db:para>Sort by file type (extension).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Unsorted</db:code></db:para>
</db:td>
<db:td><db:code>0x03</db:code></db:td>
<db:td>
<db:para>Do not sort.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::NoSort</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Not sorted by default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::DirsFirst</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Put the directories first, then the files.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::DirsLast</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>Put the files first, then the directories.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::Reversed</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>Reverse the sort order.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::IgnoreCase</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Sort case-insensitively.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdir.xml">QDir</db:link></db:emphasis>::LocaleAware</db:code></db:para>
</db:td>
<db:td><db:code>0x40</db:code></db:td>
<db:td>
<db:para>Sort items appropriately using the current locale settings.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>You can only specify one of the first four.</db:para>
<db:para>If you specify both DirsFirst and Reversed, directories are still put first, but in reverse order; the files will be listed after the directories, again in reverse order.</db:para>
<db:para>The <db:code>SortFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;SortFlag&gt;. </db:code>It stores an OR combination of <db:code>SortFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDir-1">
<db:title>QDir::QDir(const QString &amp;<db:emphasis>path</db:emphasis> = QString())</db:title>
<db:para>Constructs a <db:link xlink:href="qdir.xml">QDir</db:link> pointing to the given directory <db:code role="parameter">path</db:code>. If path is empty the program's working directory, (&quot;.&quot;), is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#currentPath">currentPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDir-2">
<db:title>[since 6.0] QDir::QDir(const std::filesystem::path &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qdir.xml">QDir</db:link> pointing to the given directory <db:code role="parameter">path</db:code>. If path is empty the program's working directory, (&quot;.&quot;), is used.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#currentPath">currentPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDir-3">
<db:title>QDir::QDir(const QString &amp;<db:emphasis>path</db:emphasis>, const QString &amp;<db:emphasis>nameFilter</db:emphasis>, QDir::SortFlags <db:emphasis>sort</db:emphasis> = SortFlags(Name | IgnoreCase), QDir::Filters <db:emphasis>filters</db:emphasis> = AllEntries)</db:title>
<db:para>Constructs a <db:link xlink:href="qdir.xml">QDir</db:link> with path <db:code role="parameter">path</db:code>, that filters its entries by name using <db:code role="parameter">nameFilter</db:code> and by attributes using <db:code role="parameter">filters</db:code>. It also sorts the names using <db:code role="parameter">sort</db:code>.</db:para>
<db:para>The default <db:code role="parameter">nameFilter</db:code> is an empty string, which excludes nothing; the default <db:code role="parameter">filters</db:code> is <db:link xlink:href="qdir.xml#Filter-enum">AllEntries</db:link>, which also excludes nothing. The default <db:code role="parameter">sort</db:code> is <db:link xlink:href="qdir.xml#SortFlag-enum">Name</db:link> | <db:link xlink:href="qdir.xml#SortFlag-enum">IgnoreCase</db:link>, i.e. sort by name case-insensitively.</db:para>
<db:para>If <db:code role="parameter">path</db:code> is an empty string, <db:link xlink:href="qdir.xml">QDir</db:link> uses &quot;.&quot; (the current directory). If <db:code role="parameter">nameFilter</db:code> is an empty string, <db:link xlink:href="qdir.xml">QDir</db:link> uses the name filter &quot;*&quot; (all files).</db:para>
<db:note>
<db:para><db:code role="parameter">path</db:code> need not exist.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#exists-1">exists</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setPath">setPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setSorting">setSorting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDir-4">
<db:title>[since 6.0] QDir::QDir(const std::filesystem::path &amp;<db:emphasis>path</db:emphasis>, const QString &amp;<db:emphasis>nameFilter</db:emphasis>, QDir::SortFlags <db:emphasis>sort</db:emphasis> = SortFlags(Name | IgnoreCase), QDir::Filters <db:emphasis>filters</db:emphasis> = AllEntries)</db:title>
<db:para>Constructs a <db:link xlink:href="qdir.xml">QDir</db:link> with path <db:code role="parameter">path</db:code>, that filters its entries by name using <db:code role="parameter">nameFilter</db:code> and by attributes using <db:code role="parameter">filters</db:code>. It also sorts the names using <db:code role="parameter">sort</db:code>.</db:para>
<db:para>The default <db:code role="parameter">nameFilter</db:code> is an empty string, which excludes nothing; the default <db:code role="parameter">filters</db:code> is <db:link xlink:href="qdir.xml#Filter-enum">AllEntries</db:link>, which also excludes nothing. The default <db:code role="parameter">sort</db:code> is <db:link xlink:href="qdir.xml#SortFlag-enum">Name</db:link> | <db:link xlink:href="qdir.xml#SortFlag-enum">IgnoreCase</db:link>, i.e. sort by name case-insensitively.</db:para>
<db:para>If <db:code role="parameter">path</db:code> is empty, <db:link xlink:href="qdir.xml">QDir</db:link> uses &quot;.&quot; (the current directory). If <db:code role="parameter">nameFilter</db:code> is an empty string, <db:link xlink:href="qdir.xml">QDir</db:link> uses the name filter &quot;*&quot; (all files).</db:para>
<db:note>
<db:para><db:code role="parameter">path</db:code> need not exist.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#exists-1">exists</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setPath">setPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setSorting">setSorting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDir">
<db:title>QDir::QDir(const QDir &amp;<db:emphasis>dir</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qdir.xml">QDir</db:link> object that is a copy of the <db:link xlink:href="qdir.xml">QDir</db:link> object for directory <db:code role="parameter">dir</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QDir">
<db:title>[noexcept] QDir::~QDir()</db:title>
<db:para>Destroys the <db:link xlink:href="qdir.xml">QDir</db:link> object frees up its resources. This has no effect on the underlying directory in the file system.</db:para>
</db:section>
<db:section xml:id="absoluteFilePath">
<db:title>QString QDir::absoluteFilePath(const QString &amp;<db:emphasis>fileName</db:emphasis>) const</db:title>
<db:para>Returns the absolute path name of a file in the directory. Does <db:emphasis>not</db:emphasis> check if the file actually exists in the directory; but see <db:link xlink:href="qdir.xml#exists-1">exists</db:link>(). Redundant multiple separators or &quot;.&quot; and &quot;..&quot; directories in <db:code role="parameter">fileName</db:code> are not removed (see <db:link xlink:href="qdir.xml#cleanPath">cleanPath</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#relativeFilePath">relativeFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#canonicalPath">canonicalPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="absolutePath">
<db:title>QString QDir::absolutePath() const</db:title>
<db:para>Returns the absolute path (a path that starts with &quot;/&quot; or with a drive specification), which may contain symbolic links, but never contains redundant &quot;.&quot;, &quot;..&quot; or multiple separators.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#setPath">setPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#canonicalPath">canonicalPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#exists-1">exists</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#cleanPath">cleanPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#dirName">dirName</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSearchPath">
<db:title>[static] void QDir::addSearchPath(const QString &amp;<db:emphasis>prefix</db:emphasis>, const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">path</db:code> to the search path for <db:code role="parameter">prefix</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#setSearchPaths">setSearchPaths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSearchPath-1">
<db:title>[static, since 6.0] void QDir::addSearchPath(const QString &amp;<db:emphasis>prefix</db:emphasis>, const std::filesystem::path &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="canonicalPath">
<db:title>QString QDir::canonicalPath() const</db:title>
<db:para>Returns the canonical path, i.e. a path without symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements.</db:para>
<db:para>On systems that do not have symbolic links this function will always return the same string that <db:link xlink:href="qdir.xml#absolutePath">absolutePath</db:link>() returns. If the canonical path does not exist (normally due to dangling symbolic links) canonicalPath() returns an empty string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString bin = &quot;/local/bin&quot;;         // where /local/bin is a symlink to /usr/bin
QDir binDir(bin);
QString canonicalBin = binDir.canonicalPath();
// canonicalBin now equals &quot;/usr/bin&quot;

QString ls = &quot;/local/bin/ls&quot;;       // where ls is the executable &quot;ls&quot;
QDir lsDir(ls);
QString canonicalLs = lsDir.canonicalPath();
// canonicalLS now equals &quot;/usr/bin/ls&quot;.
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#path">path</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#absolutePath">absolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#exists-1">exists</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#cleanPath">cleanPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#dirName">dirName</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cd">
<db:title>bool QDir::cd(const QString &amp;<db:emphasis>dirName</db:emphasis>)</db:title>
<db:para>Changes the <db:link xlink:href="qdir.xml">QDir</db:link>'s directory to <db:code role="parameter">dirName</db:code>.</db:para>
<db:para>Returns true if the new directory exists; otherwise returns false. Note that the logical cd() operation is not performed if the new directory does not exist.</db:para>
<db:para>Calling cd(&quot;..&quot;) is equivalent to calling <db:link xlink:href="qdir.xml#cdUp">cdUp</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#cdUp">cdUp</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#exists-1">exists</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#path">path</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cdUp">
<db:title>bool QDir::cdUp()</db:title>
<db:para>Changes directory by moving one directory up from the <db:link xlink:href="qdir.xml">QDir</db:link>'s current directory.</db:para>
<db:para>Returns true if the new directory exists; otherwise returns false. Note that the logical cdUp() operation is not performed if the new directory does not exist.</db:para>
<db:note>
<db:para>On Android, this is not supported for content URIs. For more information, see <db:link xlink:href="https://developer.android.com/reference/androidx/documentfile/provider/DocumentFile#getParentFile()">DocumentFile.getParentFile()</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#cd">cd</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#exists-1">exists</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#path">path</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cleanPath">
<db:title>[static] QString QDir::cleanPath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">path</db:code> with directory separators normalized (that is, platform-native separators converted to &quot;/&quot;) and redundant ones removed, and &quot;.&quot;s and &quot;..&quot;s resolved (as far as possible).</db:para>
<db:para>Symbolic links are kept. This function does not return the canonical path, but rather the simplest version of the input. For example, &quot;./local&quot; becomes &quot;local&quot;, &quot;local/../bin&quot; becomes &quot;bin&quot; and &quot;/local/usr/../bin&quot; becomes &quot;/local/bin&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#absolutePath">absolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#canonicalPath">canonicalPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>qsizetype QDir::count() const</db:title>
<db:para>Returns the total number of directories and files in the directory.</db:para>
<db:para>Equivalent to <db:link xlink:href="qdir.xml#entryList">entryList</db:link>().count().</db:para>
<db:note>
<db:para>In Qt versions prior to 6.5, this function returned uint, not qsizetype.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#entryList">entryList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="current">
<db:title>[static] QDir QDir::current()</db:title>
<db:para>Returns the application's current directory.</db:para>
<db:para>The directory is constructed using the absolute path of the current directory, ensuring that its <db:link xlink:href="qdir.xml#path">path</db:link>() will be the same as its <db:link xlink:href="qdir.xml#absolutePath">absolutePath</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#currentPath">currentPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setCurrent">setCurrent</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#home">home</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#root">root</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#temp">temp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentPath">
<db:title>[static] QString QDir::currentPath()</db:title>
<db:para>Returns the absolute path of the application's current directory. The current directory is the last directory set with <db:link xlink:href="qdir.xml#setCurrent">QDir::setCurrent</db:link>() or, if that was never called, the directory at which this application was started at by the parent process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#current">current</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setCurrent">setCurrent</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#homePath">homePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#rootPath">rootPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#tempPath">tempPath</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dirName">
<db:title>QString QDir::dirName() const</db:title>
<db:para>Returns the name of the directory; this is <db:emphasis>not</db:emphasis> the same as the path, e.g. a directory with the name &quot;mail&quot;, might have the path &quot;/var/spool/mail&quot;. If the directory has no name (e.g. it is the root directory) an empty string is returned.</db:para>
<db:para>No check is made to ensure that a directory with this name actually exists; but see <db:link xlink:href="qdir.xml#exists-1">exists</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#path">path</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#absolutePath">absolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drives">
<db:title>[static] QFileInfoList QDir::drives()</db:title>
<db:para>Returns a list of the root directories on this system.</db:para>
<db:para>On Windows this returns a list of <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> objects containing &quot;C:/&quot;, &quot;D:/&quot;, etc. This does not return drives with ejectable media that are empty. On other operating systems, it returns a list containing just one root directory (i.e. &quot;/&quot;).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#root">root</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#rootPath">rootPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="entryInfoList">
<db:title>QFileInfoList QDir::entryInfoList(const QStringList &amp;<db:emphasis>nameFilters</db:emphasis>, QDir::Filters <db:emphasis>filters</db:emphasis> = NoFilter, QDir::SortFlags <db:emphasis>sort</db:emphasis> = NoSort) const</db:title>
<db:para>Returns a list of <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> objects for all the files and directories in the directory, ordered according to the name and attribute filters previously set with <db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>() and <db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>(), and sorted according to the flags set with <db:link xlink:href="qdir.xml#setSorting">setSorting</db:link>().</db:para>
<db:para>The name filter, file attribute filter, and sorting specification can be overridden using the <db:code role="parameter">nameFilters</db:code>, <db:code role="parameter">filters</db:code>, and <db:code role="parameter">sort</db:code> arguments.</db:para>
<db:para>Returns an empty list if the directory is unreadable, does not exist, or if nothing matches the specification.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#entryList">entryList</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setSorting">setSorting</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#exists-1">exists</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="entryInfoList-1">
<db:title>QFileInfoList QDir::entryInfoList(QDir::Filters <db:emphasis>filters</db:emphasis> = NoFilter, QDir::SortFlags <db:emphasis>sort</db:emphasis> = NoSort) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> objects for all the files and directories in the directory, ordered according to the name and attribute filters previously set with <db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>() and <db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>(), and sorted according to the flags set with <db:link xlink:href="qdir.xml#setSorting">setSorting</db:link>().</db:para>
<db:para>The attribute filter and sorting specifications can be overridden using the <db:code role="parameter">filters</db:code> and <db:code role="parameter">sort</db:code> arguments.</db:para>
<db:para>Returns an empty list if the directory is unreadable, does not exist, or if nothing matches the specification.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#entryList">entryList</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setSorting">setSorting</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#exists-1">exists</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="entryList">
<db:title>QStringList QDir::entryList(const QStringList &amp;<db:emphasis>nameFilters</db:emphasis>, QDir::Filters <db:emphasis>filters</db:emphasis> = NoFilter, QDir::SortFlags <db:emphasis>sort</db:emphasis> = NoSort) const</db:title>
<db:para>Returns a list of the names of all the files and directories in the directory, ordered according to the name and attribute filters previously set with <db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>() and <db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>(), and sorted according to the flags set with <db:link xlink:href="qdir.xml#setSorting">setSorting</db:link>().</db:para>
<db:para>The name filter, file attribute filter, and sorting specification can be overridden using the <db:code role="parameter">nameFilters</db:code>, <db:code role="parameter">filters</db:code>, and <db:code role="parameter">sort</db:code> arguments.</db:para>
<db:para>Returns an empty list if the directory is unreadable, does not exist, or if nothing matches the specification.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setSorting">setSorting</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="entryList-1">
<db:title>QStringList QDir::entryList(QDir::Filters <db:emphasis>filters</db:emphasis> = NoFilter, QDir::SortFlags <db:emphasis>sort</db:emphasis> = NoSort) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of the names of all the files and directories in the directory, ordered according to the name and attribute filters previously set with <db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>() and <db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>(), and sorted according to the flags set with <db:link xlink:href="qdir.xml#setSorting">setSorting</db:link>().</db:para>
<db:para>The attribute filter and sorting specifications can be overridden using the <db:code role="parameter">filters</db:code> and <db:code role="parameter">sort</db:code> arguments.</db:para>
<db:para>Returns an empty list if the directory is unreadable, does not exist, or if nothing matches the specification.</db:para>
<db:note>
<db:para>To list symlinks that point to non existing files, <db:link xlink:href="qdir.xml#Filter-enum">System</db:link> must be passed to the filter.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setSorting">setSorting</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exists">
<db:title>bool QDir::exists(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns true if the file called <db:code role="parameter">name</db:code> exists; otherwise returns false.</db:para>
<db:para>Unless <db:code role="parameter">name</db:code> contains an absolute file path, the file name is assumed to be relative to the directory itself, so this function is typically used to check for the presence of files within a directory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#exists">QFileInfo::exists</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#exists-2">QFile::exists</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exists-1">
<db:title>bool QDir::exists() const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if the directory exists; otherwise returns false. (If a file with the same name is found this function will return false).</db:para>
<db:para>The overload of this function that accepts an argument is used to test for the presence of files and directories within a directory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#exists">QFileInfo::exists</db:link>()</db:member>
<db:member><db:link xlink:href="qfile.xml#exists-2">QFile::exists</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filePath">
<db:title>QString QDir::filePath(const QString &amp;<db:emphasis>fileName</db:emphasis>) const</db:title>
<db:para>Returns the path name of a file in the directory. Does <db:emphasis>not</db:emphasis> check if the file actually exists in the directory; but see <db:link xlink:href="qdir.xml#exists-1">exists</db:link>(). If the <db:link xlink:href="qdir.xml">QDir</db:link> is relative the returned path name will also be relative. Redundant multiple separators or &quot;.&quot; and &quot;..&quot; directories in <db:code role="parameter">fileName</db:code> are not removed (see <db:link xlink:href="qdir.xml#cleanPath">cleanPath</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#dirName">dirName</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#canonicalPath">canonicalPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemAbsolutePath">
<db:title>[since 6.0] std::filesystem::path QDir::filesystemAbsolutePath() const</db:title>
<db:para>Returns <db:link xlink:href="qdir.xml#absolutePath">absolutePath</db:link>() as std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#absolutePath">absolutePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemCanonicalPath">
<db:title>[since 6.0] std::filesystem::path QDir::filesystemCanonicalPath() const</db:title>
<db:para>Returns <db:link xlink:href="qdir.xml#canonicalPath">canonicalPath</db:link>() as std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#canonicalPath">canonicalPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filesystemPath">
<db:title>[since 6.0] std::filesystem::path QDir::filesystemPath() const</db:title>
<db:para>Returns <db:link xlink:href="qdir.xml#path">path</db:link>() as std::filesystem::path.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#path">path</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filter">
<db:title>QDir::Filters QDir::filter() const</db:title>
<db:para>Returns the value set by <db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromNativeSeparators">
<db:title>[static] QString QDir::fromNativeSeparators(const QString &amp;<db:emphasis>pathName</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">pathName</db:code> using '/' as file separator. On Windows, for instance, fromNativeSeparators(&quot;c:\\winnt\\system32&quot;) returns &quot;c:/winnt/system32&quot;.</db:para>
<db:para>The returned string may be the same as the argument on some operating systems, for example on Unix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#toNativeSeparators">toNativeSeparators</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#separator">separator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="home">
<db:title>[static] QDir QDir::home()</db:title>
<db:para>Returns the user's home directory.</db:para>
<db:para>The directory is constructed using the absolute path of the home directory, ensuring that its <db:link xlink:href="qdir.xml#path">path</db:link>() will be the same as its <db:link xlink:href="qdir.xml#absolutePath">absolutePath</db:link>().</db:para>
<db:para>See <db:link xlink:href="qdir.xml#homePath">homePath</db:link>() for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#drives">drives</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#current">current</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#root">root</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#temp">temp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="homePath">
<db:title>[static] QString QDir::homePath()</db:title>
<db:para>Returns the absolute path of the user's home directory.</db:para>
<db:para>Under Windows this function will return the directory of the current user's profile. Typically, this is:</db:para>
<db:programlisting language="cpp">C:/Users/Username
</db:programlisting>
<db:para>Use the <db:link xlink:href="qdir.xml#toNativeSeparators">toNativeSeparators</db:link>() function to convert the separators to the ones that are appropriate for the underlying operating system.</db:para>
<db:para>If the directory of the current user's profile does not exist or cannot be retrieved, the following alternatives will be checked (in the given order) until an existing and available path is found:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>The path specified by the USERPROFILE environment variable.</db:para>
</db:listitem>
<db:listitem>
<db:para>The path formed by concatenating the HOMEDRIVE and HOMEPATH environment variables.</db:para>
</db:listitem>
<db:listitem>
<db:para>The path specified by the HOME environment variable.</db:para>
</db:listitem>
<db:listitem>
<db:para>The path returned by the <db:link xlink:href="qdir.xml#rootPath">rootPath</db:link>() function (which uses the SystemDrive environment variable)</db:para>
</db:listitem>
<db:listitem>
<db:para>The C:/ directory.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Under non-Windows operating systems the HOME environment variable is used if it exists, otherwise the path returned by the <db:link xlink:href="qdir.xml#rootPath">rootPath</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#home">home</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#currentPath">currentPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#rootPath">rootPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#tempPath">tempPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAbsolute">
<db:title>bool QDir::isAbsolute() const</db:title>
<db:para>Returns true if the directory's path is absolute; otherwise returns false. See <db:link xlink:href="qdir.xml#isAbsolutePath">isAbsolutePath</db:link>().</db:para>
<db:note>
<db:para>Paths starting with a colon (<db:emphasis>:</db:emphasis>) are always considered absolute, as they denote a <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#makeAbsolute">makeAbsolute</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#cleanPath">cleanPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAbsolutePath">
<db:title>[static] bool QDir::isAbsolutePath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">path</db:code> is absolute; returns false if it is relative.</db:para>
<db:note>
<db:para>Paths starting with a colon (<db:emphasis>:</db:emphasis>) are always considered absolute, as they denote a <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#isAbsolute">isAbsolute</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isRelativePath">isRelativePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#makeAbsolute">makeAbsolute</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#cleanPath">cleanPath</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml">QResource</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QDir::isEmpty(QDir::Filters <db:emphasis>filters</db:emphasis> = Filters(AllEntries | NoDotAndDotDot)) const</db:title>
<db:para>Returns whether the directory is empty.</db:para>
<db:para>Equivalent to count() == 0 with filters QDir::AllEntries | QDir::NoDotAndDotDot, but faster as it just checks whether the directory contains at least one entry.</db:para>
<db:note>
<db:para>Unless you set the <db:code role="parameter">filters</db:code> flags to include QDir::NoDotAndDotDot (as the default value does), no directory is empty.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#count">count</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#entryList">entryList</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReadable">
<db:title>bool QDir::isReadable() const</db:title>
<db:para>Returns true if the directory is readable <db:emphasis>and</db:emphasis> we can open files by name; otherwise returns false.</db:para>
<db:warning>
<db:para>A false value from this function is not a guarantee that files in the directory are not accessible.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#isReadable">QFileInfo::isReadable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRelative">
<db:title>bool QDir::isRelative() const</db:title>
<db:para>Returns true if the directory path is relative; otherwise returns false. (Under Unix a path is relative if it does not start with a &quot;/&quot;).</db:para>
<db:note>
<db:para>Paths starting with a colon (<db:emphasis>:</db:emphasis>) are always considered absolute, as they denote a <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#makeAbsolute">makeAbsolute</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isAbsolute">isAbsolute</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isAbsolutePath">isAbsolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#cleanPath">cleanPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRelativePath">
<db:title>[static] bool QDir::isRelativePath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">path</db:code> is relative; returns false if it is absolute.</db:para>
<db:note>
<db:para>Paths starting with a colon (<db:emphasis>:</db:emphasis>) are always considered absolute, as they denote a <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isAbsolutePath">isAbsolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#makeAbsolute">makeAbsolute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRoot">
<db:title>bool QDir::isRoot() const</db:title>
<db:para>Returns true if the directory is the root directory; otherwise returns false.</db:para>
<db:note>
<db:para>If the directory is a symbolic link to the root directory this function returns false. If you want to test for this use <db:link xlink:href="qdir.xml#canonicalPath">canonicalPath</db:link>(), e.g.</db:para>
</db:note>
<db:programlisting language="cpp">QDir dir(&quot;/tmp/root_link&quot;);
dir = dir.canonicalPath();
if (dir.isRoot())
    qWarning(&quot;It is a root link&quot;);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#root">root</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#rootPath">rootPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="listSeparator">
<db:title>[static constexpr noexcept] QChar QDir::listSeparator()</db:title>
<db:para>Returns the native path list separator: ':' under Unix and ';' under Windows.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#separator">separator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="makeAbsolute">
<db:title>bool QDir::makeAbsolute()</db:title>
<db:para>Converts the directory path to an absolute path. If it is already absolute nothing happens. Returns true if the conversion succeeded; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#isAbsolute">isAbsolute</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isAbsolutePath">isAbsolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#cleanPath">cleanPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="match">
<db:title>[static] bool QDir::match(const QString &amp;<db:emphasis>filter</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Returns true if the <db:code role="parameter">fileName</db:code> matches the wildcard (glob) pattern <db:code role="parameter">filter</db:code>; otherwise returns false. The <db:code role="parameter">filter</db:code> may contain multiple patterns separated by spaces or semicolons. The matching is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#fromWildcard">QRegularExpression::fromWildcard</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#entryList">entryList</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="match-1">
<db:title>[static] bool QDir::match(const QStringList &amp;<db:emphasis>filters</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if the <db:code role="parameter">fileName</db:code> matches any of the wildcard (glob) patterns in the list of <db:code role="parameter">filters</db:code>; otherwise returns false. The matching is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#fromWildcard">QRegularExpression::fromWildcard</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#entryList">entryList</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mkdir">
<db:title>[since 6.3] bool QDir::mkdir(const QString &amp;<db:emphasis>dirName</db:emphasis>, QFileDevice::Permissions <db:emphasis>permissions</db:emphasis>) const</db:title>
<db:para>Creates a sub-directory called <db:code role="parameter">dirName</db:code> with the given <db:code role="parameter">permissions</db:code>.</db:para>
<db:para>Returns true on success; returns false if the operation failed or the directory already existed.</db:para>
<db:para>On POSIX systems <db:code role="parameter">permissions</db:code> are modified by the <db:link xlink:href="https://pubs.opengroup.org/onlinepubs/9799919799/functions/umask.html">umask</db:link> (file creation mask) of the current process, which means some permission bits might be disabled.</db:para>
<db:para>On Windows, by default, a new directory inherits its permissions from its parent directory. <db:code role="parameter">permissions</db:code> are emulated using ACLs. These ACLs may be in non-canonical order when the group is granted less permissions than others. Files and directories with such permissions will generate warnings when the Security tab of the Properties dialog is opened. Granting the group all permissions granted to others avoids such warnings.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#rmdir">rmdir</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#mkpath">mkpath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#rmpath">rmpath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mkdir-1">
<db:title>bool QDir::mkdir(const QString &amp;<db:emphasis>dirName</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a sub-directory called <db:code role="parameter">dirName</db:code> with the platform-specific default permissions.</db:para>
<db:para>Returns true on success; returns false if the operation failed or the directory already existed.</db:para>
<db:para>On Windows, by default, a new directory inherits its permissions from its parent directory. Permissions are emulated using ACLs. These ACLs may be in non-canonical order when the group is granted less permissions than others. Files and directories with such permissions will generate warnings when the Security tab of the Properties dialog is opened. Granting the group all permissions granted to others avoids such warnings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#rmdir">rmdir</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#mkpath">mkpath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#rmpath">rmpath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mkpath">
<db:title>bool QDir::mkpath(const QString &amp;<db:emphasis>dirPath</db:emphasis>) const</db:title>
<db:para>Creates a directory named <db:code role="parameter">dirPath</db:code>.</db:para>
<db:para>If <db:code role="parameter">dirPath</db:code> doesn't already exist, this method will create it - along with any nonexistent parent directories - with the default permissions.</db:para>
<db:para>Returns true on success or if <db:code role="parameter">dirPath</db:code> already existed; otherwise returns false.</db:para>
<db:para>On Windows, by default, a new directory inherits its permissions from its parent directory. Permissions are emulated using ACLs. These ACLs may be in non-canonical order when the group is granted less permissions than others. Files and directories with such permissions will generate warnings when the Security tab of the Properties dialog is opened. Granting the group all permissions granted to others avoids such warnings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#rmpath">rmpath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#mkdir">mkdir</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#rmdir">rmdir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nameFilters">
<db:title>QStringList QDir::nameFilters() const</db:title>
<db:para>Returns the string list set by <db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="path">
<db:title>QString QDir::path() const</db:title>
<db:para>Returns the path. This may contain symbolic links, but never contains redundant &quot;.&quot;, &quot;..&quot; or multiple separators.</db:para>
<db:para>The returned path can be either absolute or relative (see <db:link xlink:href="qdir.xml#setPath">setPath</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#setPath">setPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#absolutePath">absolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#exists-1">exists</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#cleanPath">cleanPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#dirName">dirName</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#toNativeSeparators">toNativeSeparators</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#makeAbsolute">makeAbsolute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="refresh">
<db:title>void QDir::refresh() const</db:title>
<db:para>Refreshes the directory information.</db:para>
</db:section>
<db:section xml:id="relativeFilePath">
<db:title>QString QDir::relativeFilePath(const QString &amp;<db:emphasis>fileName</db:emphasis>) const</db:title>
<db:para>Returns the path to <db:code role="parameter">fileName</db:code> relative to the directory.</db:para>
<db:programlisting language="cpp">QDir dir(&quot;/home/bob&quot;);
QString s;

s = dir.relativeFilePath(&quot;images/file.jpg&quot;);     // s is &quot;images/file.jpg&quot;
s = dir.relativeFilePath(&quot;/home/mary/file.txt&quot;); // s is &quot;../mary/file.txt&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#canonicalPath">canonicalPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove">
<db:title>bool QDir::remove(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Removes the file, <db:code role="parameter">fileName</db:code>.</db:para>
<db:para>Returns true if the file is removed successfully; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="removeRecursively">
<db:title>bool QDir::removeRecursively()</db:title>
<db:para>Removes the directory, including all its contents.</db:para>
<db:para>Returns true if successful, otherwise false.</db:para>
<db:para>If a file or directory cannot be removed, removeRecursively() keeps going and attempts to delete as many files and sub-directories as possible, then returns false.</db:para>
<db:para>If the directory was already removed, the method returns true (expected result already reached).</db:para>
<db:note>
<db:para>This function is meant for removing a small application-internal directory (such as a temporary directory), but not user-visible directories. For user-visible operations, it is rather recommended to report errors more precisely to the user, to offer solutions in case of errors, to show progress during the deletion since it could take several minutes, etc.</db:para>
</db:note>
</db:section>
<db:section xml:id="rename">
<db:title>bool QDir::rename(const QString &amp;<db:emphasis>oldName</db:emphasis>, const QString &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:para>Renames a file or directory from <db:code role="parameter">oldName</db:code> to <db:code role="parameter">newName</db:code>, and returns true if successful; otherwise returns false.</db:para>
<db:para>On most file systems, rename() fails only if <db:code role="parameter">oldName</db:code> does not exist, or if a file with the new name already exists. However, there are also other reasons why rename() can fail. For example, on at least one file system rename() fails if <db:code role="parameter">newName</db:code> points to an open file.</db:para>
<db:para>If <db:code role="parameter">oldName</db:code> is a file (not a directory) that can't be renamed right away, Qt will try to copy <db:code role="parameter">oldName</db:code> to <db:code role="parameter">newName</db:code> and remove <db:code role="parameter">oldName</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#rename">QFile::rename</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rmdir">
<db:title>bool QDir::rmdir(const QString &amp;<db:emphasis>dirName</db:emphasis>) const</db:title>
<db:para>Removes the directory specified by <db:code role="parameter">dirName</db:code>.</db:para>
<db:para>The directory must be empty for rmdir() to succeed.</db:para>
<db:para>Returns true if successful; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#mkdir">mkdir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rmpath">
<db:title>bool QDir::rmpath(const QString &amp;<db:emphasis>dirPath</db:emphasis>) const</db:title>
<db:para>Removes the directory path <db:code role="parameter">dirPath</db:code>.</db:para>
<db:para>The function will remove all parent directories in <db:code role="parameter">dirPath</db:code>, provided that they are empty. This is the opposite of mkpath(dirPath).</db:para>
<db:para>Returns true if successful; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#mkpath">mkpath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="root">
<db:title>[static] QDir QDir::root()</db:title>
<db:para>Returns the root directory.</db:para>
<db:para>The directory is constructed using the absolute path of the root directory, ensuring that its <db:link xlink:href="qdir.xml#path">path</db:link>() will be the same as its <db:link xlink:href="qdir.xml#absolutePath">absolutePath</db:link>().</db:para>
<db:para>See <db:link xlink:href="qdir.xml#rootPath">rootPath</db:link>() for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#drives">drives</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#current">current</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#home">home</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#temp">temp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rootPath">
<db:title>[static] QString QDir::rootPath()</db:title>
<db:para>Returns the absolute path of the root directory.</db:para>
<db:para>For Unix operating systems this returns &quot;/&quot;. For Windows file systems this normally returns &quot;c:/&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#root">root</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#drives">drives</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#currentPath">currentPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#homePath">homePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#tempPath">tempPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="searchPaths">
<db:title>[static] QStringList QDir::searchPaths(const QString &amp;<db:emphasis>prefix</db:emphasis>)</db:title>
<db:para>Returns the search paths for <db:code role="parameter">prefix</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#setSearchPaths">setSearchPaths</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#addSearchPath">addSearchPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="separator">
<db:title>[static] QChar QDir::separator()</db:title>
<db:para>Returns the native directory separator: &quot;/&quot; under Unix and &quot;\&quot; under Windows.</db:para>
<db:para>You do not need to use this function to build file paths. If you always use &quot;/&quot;, Qt will translate your paths to conform to the underlying operating system. If you want to display paths to the user using their operating system's separator use <db:link xlink:href="qdir.xml#toNativeSeparators">toNativeSeparators</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#listSeparator">listSeparator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrent">
<db:title>[static] bool QDir::setCurrent(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Sets the application's current working directory to <db:code role="parameter">path</db:code>. Returns true if the directory was successfully changed; otherwise returns false.</db:para>
<db:programlisting language="cpp">QString absolute = &quot;/local/bin&quot;;
QString relative = &quot;local/bin&quot;;
QFileInfo absFile(absolute);
QFileInfo relFile(relative);

QDir::setCurrent(QDir::rootPath());
// absFile and relFile now point to the same file

QDir::setCurrent(&quot;/tmp&quot;);
// absFile now points to &quot;/local/bin&quot;,
// while relFile points to &quot;/tmp/local/bin&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#current">current</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#currentPath">currentPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#home">home</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#root">root</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#temp">temp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilter">
<db:title>void QDir::setFilter(QDir::Filters <db:emphasis>filters</db:emphasis>)</db:title>
<db:para>Sets the filter used by <db:link xlink:href="qdir.xml#entryList">entryList</db:link>() and <db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>() to <db:code role="parameter">filters</db:code>. The filter is used to specify the kind of files that should be returned by <db:link xlink:href="qdir.xml#entryList">entryList</db:link>() and <db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>(). See <db:link xlink:href="qdir.xml#Filter-enum">QDir::Filter</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#filter">filter</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setNameFilters">setNameFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNameFilters">
<db:title>void QDir::setNameFilters(const QStringList &amp;<db:emphasis>nameFilters</db:emphasis>)</db:title>
<db:para>Sets the name filters used by <db:link xlink:href="qdir.xml#entryList">entryList</db:link>() and <db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>() to the list of filters specified by <db:code role="parameter">nameFilters</db:code>.</db:para>
<db:para>Each name filter is a wildcard (globbing) filter that understands * and ? wildcards. See <db:link xlink:href="qregularexpression.xml#fromWildcard">QRegularExpression::fromWildcard</db:link>().</db:para>
<db:para>For example, the following code sets three name filters on a <db:link xlink:href="qdir.xml">QDir</db:link> to ensure that only files with extensions typically used for C++ source files are listed:</db:para>
<db:programlisting language="cpp">    QStringList filters;
    filters &lt;&lt; &quot;*.cpp&quot; &lt;&lt; &quot;*.cxx&quot; &lt;&lt; &quot;*.cc&quot;;
    dir.setNameFilters(filters);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#nameFilters">nameFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#setFilter">setFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPath">
<db:title>void QDir::setPath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Sets the path of the directory to <db:code role="parameter">path</db:code>. The path is cleaned of redundant &quot;.&quot;, &quot;..&quot; and of multiple separators. No check is made to see whether a directory with this path actually exists; but you can check for yourself using <db:link xlink:href="qdir.xml#exists-1">exists</db:link>().</db:para>
<db:para>The path can be either absolute or relative. Absolute paths begin with the directory separator &quot;/&quot; (optionally preceded by a drive specification under Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current directory. An example of an absolute path is the string &quot;/tmp/quartz&quot;, a relative path might look like &quot;src/fatlib&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#path">path</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#absolutePath">absolutePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#exists-1">exists</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#cleanPath">cleanPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#dirName">dirName</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#isRelative">isRelative</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#makeAbsolute">makeAbsolute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPath-1">
<db:title>[since 6.0] void QDir::setPath(const std::filesystem::path &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="setSearchPaths">
<db:title>[static] void QDir::setSearchPaths(const QString &amp;<db:emphasis>prefix</db:emphasis>, const QStringList &amp;<db:emphasis>searchPaths</db:emphasis>)</db:title>
<db:para>Sets or replaces Qt's search paths for file names with the prefix <db:code role="parameter">prefix</db:code> to <db:code role="parameter">searchPaths</db:code>.</db:para>
<db:para>To specify a prefix for a file name, prepend the prefix followed by a single colon (e.g., &quot;images:undo.png&quot;, &quot;xmldocs:books.xml&quot;). <db:code role="parameter">prefix</db:code> can only contain letters or numbers (e.g., it cannot contain a colon, nor a slash).</db:para>
<db:para>Qt uses this search path to locate files with a known prefix. The search path entries are tested in order, starting with the first entry.</db:para>
<db:programlisting language="cpp">QDir::setSearchPaths(&quot;icons&quot;, QStringList(QDir::homePath() + &quot;/images&quot;));
QDir::setSearchPaths(&quot;docs&quot;, QStringList(&quot;:/embeddedDocuments&quot;));
...
QPixmap pixmap(&quot;icons:undo.png&quot;); // will look for undo.png in QDir::homePath() + &quot;/images&quot;
QFile file(&quot;docs:design.odf&quot;); // will look in the :/embeddedDocuments resource path
</db:programlisting>
<db:para>File name prefix must be at least 2 characters long to avoid conflicts with Windows drive letters.</db:para>
<db:para>Search paths may contain paths to <db:link xlink:href="resources.xml">The Qt Resource System</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#searchPaths">searchPaths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSorting">
<db:title>void QDir::setSorting(QDir::SortFlags <db:emphasis>sort</db:emphasis>)</db:title>
<db:para>Sets the sort order used by <db:link xlink:href="qdir.xml#entryList">entryList</db:link>() and <db:link xlink:href="qdir.xml#entryInfoList">entryInfoList</db:link>().</db:para>
<db:para>The <db:code role="parameter">sort</db:code> is specified by OR-ing values from the enum <db:link xlink:href="qdir.xml#SortFlag-enum">QDir::SortFlag</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#sorting">sorting</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#SortFlag-enum">SortFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sorting">
<db:title>QDir::SortFlags QDir::sorting() const</db:title>
<db:para>Returns the value set by <db:link xlink:href="qdir.xml#setSorting">setSorting</db:link>()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#setSorting">setSorting</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#SortFlag-enum">SortFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QDir::swap(QDir &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this <db:link xlink:href="qdir.xml">QDir</db:link> instance with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="temp">
<db:title>[static] QDir QDir::temp()</db:title>
<db:para>Returns the system's temporary directory.</db:para>
<db:para>The directory is constructed using the absolute canonical path of the temporary directory, ensuring that its <db:link xlink:href="qdir.xml#path">path</db:link>() will be the same as its <db:link xlink:href="qdir.xml#absolutePath">absolutePath</db:link>().</db:para>
<db:para>See <db:link xlink:href="qdir.xml#tempPath">tempPath</db:link>() for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#drives">drives</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#current">current</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#home">home</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#root">root</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tempPath">
<db:title>[static] QString QDir::tempPath()</db:title>
<db:para>Returns the absolute canonical path of the system's temporary directory.</db:para>
<db:para>On Unix/Linux systems this is the path in the TMPDIR environment variable or /tmp if TMPDIR is not defined. On Windows this is usually the path in the TEMP or TMP environment variable. The path returned by this method doesn't end with a directory separator unless it is the root directory (of a drive).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#temp">temp</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#currentPath">currentPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#homePath">homePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#rootPath">rootPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toNativeSeparators">
<db:title>[static] QString QDir::toNativeSeparators(const QString &amp;<db:emphasis>pathName</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">pathName</db:code> with the '/' separators converted to separators that are appropriate for the underlying operating system.</db:para>
<db:para>On Windows, toNativeSeparators(&quot;c:/winnt/system32&quot;) returns &quot;c:\winnt\system32&quot;.</db:para>
<db:para>The returned string may be the same as the argument on some operating systems, for example on Unix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#fromNativeSeparators">fromNativeSeparators</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#separator">separator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QDir &amp;QDir::operator=(QDir &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qdir.xml">QDir</db:link> instance.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QDir &amp;QDir::operator=(const QDir &amp;<db:emphasis>dir</db:emphasis>)</db:title>
<db:para>Makes a copy of the <db:code role="parameter">dir</db:code> object and assigns it to this <db:link xlink:href="qdir.xml">QDir</db:link> object.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>QString QDir::operator[](qsizetype <db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Returns the file name at position <db:code role="parameter">pos</db:code> in the list of file names. Equivalent to <db:link xlink:href="qdir.xml#entryList">entryList</db:link>().at(index). <db:code role="parameter">pos</db:code> must be a valid index position in the list (i.e., 0 &lt;= pos &lt; <db:link xlink:href="qdir.xml#count">count</db:link>()).</db:para>
<db:note>
<db:para>In Qt versions prior to 6.5, <db:code role="parameter">pos</db:code> was an int, not qsizetype.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#count">count</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#entryList">entryList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QDir &amp;<db:emphasis>lhs</db:emphasis>, const QDir &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if directory <db:code role="parameter">lhs</db:code> and directory <db:code role="parameter">rhs</db:code> have different paths or different sort or filter settings; otherwise returns false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">// The current directory is &quot;/usr/local&quot;
QDir d1(&quot;/usr/local/bin&quot;);
d1.setFilter(QDir::Executable);
QDir d2(&quot;bin&quot;);
if (d1 != d2)
    qDebug(&quot;They differ&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool operator==(const QDir &amp;<db:emphasis>lhs</db:emphasis>, const QDir &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if directory <db:code role="parameter">lhs</db:code> and directory <db:code role="parameter">rhs</db:code> have the same path and their sort and filter settings are the same; otherwise returns false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">// The current directory is &quot;/usr/local&quot;
QDir d1(&quot;/usr/local/bin&quot;);
QDir d2(&quot;bin&quot;);
if (d1 == d2)
    qDebug(&quot;They're the same&quot;);
</db:programlisting>
</db:section>
</db:section>
</db:article>
