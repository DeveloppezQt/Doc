<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPdfDocument Class</db:title>
<db:productname>QtPdf</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Pdf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link> class loads a PDF document and renders pages from it.</db:para>
<db:para>This class was introduced in Qt 5.10.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPdfDocument</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.10</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QPdfDocument::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>None</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Unknown</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DataNotYetAvailable</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FileNotFound</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InvalidFileFormat</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IncorrectPassword</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnsupportedSecurityScheme</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the error while attempting the last operation on the document.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Unknown type of error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::DataNotYetAvailable</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The document is still loading, it's too early to attempt the operation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::FileNotFound</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The file given to <db:link xlink:href="qpdfdocument.xml#load">load</db:link>() was not found.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::InvalidFileFormat</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The file given to <db:link xlink:href="qpdfdocument.xml#load">load</db:link>() is not a valid PDF file.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::IncorrectPassword</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The password given to <db:link xlink:href="qpdfdocument.xml#password-prop">setPassword</db:link>() is not correct for this file.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::UnsupportedSecurityScheme</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link> is not able to unlock this kind of PDF file.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfdocument.xml#error">QPdfDocument::error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="MetaDataField-enum">
<db:title>enum QPdfDocument::MetaDataField</db:title>
<db:enumsynopsis>
<db:enumname>MetaDataField</db:enumname>
<db:enumitem>
<db:enumidentifier>Title</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Subject</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Author</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Keywords</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Producer</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Creator</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CreationDate</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ModificationDate</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the available fields of meta data.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">MetaDataField</db:emphasis>::Title</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The document's title as <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">MetaDataField</db:emphasis>::Author</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The name of the person who created the document as <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">MetaDataField</db:emphasis>::Subject</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The subject of the document as <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">MetaDataField</db:emphasis>::Keywords</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Keywords associated with the document as <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">MetaDataField</db:emphasis>::Creator</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>If the document was converted to PDF from another format, the name of the conforming product that created the original document from which it was converted as <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">MetaDataField</db:emphasis>::Producer</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>If the document was converted to PDF from another format, the name of the conforming product that converted it to PDF as <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">MetaDataField</db:emphasis>::CreationDate</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The date and time the document was created as <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">MetaDataField</db:emphasis>::ModificationDate</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The date and time the document was most recently modified as <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfdocument.xml#metaData">QPdfDocument::metaData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="PageModelRole-enum">
<db:title>enum QPdfDocument::PageModelRole</db:title>
<db:enumsynopsis>
<db:enumname>PageModelRole</db:enumname>
<db:enumitem>
<db:enumidentifier>Label</db:enumidentifier>
<db:enumvalue>Qt::UserRole</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PointSize</db:enumidentifier>
<db:enumvalue>257</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NRoles</db:enumidentifier>
<db:enumvalue>258</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Roles in <db:link xlink:href="qpdfdocument.xml#pageModel-prop">pageModel</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">PageModelRole</db:emphasis>::Label</db:code></db:para>
</db:td>
<db:td><db:code>Qt::UserRole</db:code></db:td>
<db:td>
<db:para>The page number to be used for display purposes (<db:link xlink:href="qstring.xml">QString</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">PageModelRole</db:emphasis>::PointSize</db:code></db:para>
</db:td>
<db:td><db:code>257</db:code></db:td>
<db:td>
<db:para>The page size in points (1/72 of an inch) (<db:link xlink:href="qsizef.xml">QSizeF</db:link>).</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QPdfDocument::Status</db:title>
<db:enumsynopsis>
<db:enumname>Status</db:enumname>
<db:enumitem>
<db:enumidentifier>Null</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Loading</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ready</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Unloading</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Error</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the current status of the document.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">Status</db:emphasis>::Null</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The initial status after the document has been created or after it has been closed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">Status</db:emphasis>::Loading</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The status after <db:link xlink:href="qpdfdocument.xml#load">load</db:link>() has been called and before the document is fully loaded.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">Status</db:emphasis>::Ready</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The status when the document is fully loaded and its data can be accessed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">Status</db:emphasis>::Unloading</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The status after <db:link xlink:href="qpdfdocument.xml#close">close</db:link>() has been called on an open document. At this point the document is still valid and all its data can be accessed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:emphasis>::<db:emphasis role="bold">Status</db:emphasis>::Error</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The status after Loading, if loading has failed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfdocument.xml#status-prop">QPdfDocument::status</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="pageCount-prop">
<db:title>[read-only] pageCount : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>pageCount</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pageCount</db:synopsisinfo>
<db:synopsisinfo role="notifier">pageCountChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of pages in the loaded document or <db:code>0</db:code> if no document is loaded.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">pageCount</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">pageCountChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>pageCount</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="pageModel-prop">
<db:title>[read-only] pageModel : QAbstractListModel* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAbstractListModel*</db:type>
<db:varname>pageModel</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pageModel</db:synopsisinfo>
<db:synopsisinfo role="notifier">pageModelChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds an instance of <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link> to provide page-specific metadata, containing one row for each page in the document.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link></db:type> *<db:emphasis role="bold">pageModel</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">pageModelChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfdocument.xml#PageModelRole-enum">QPdfDocument::PageModelRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="password-prop">
<db:title>password : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>password</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">password</db:synopsisinfo>
<db:synopsisinfo role="setter">setPassword</db:synopsisinfo>
<db:synopsisinfo role="notifier">passwordChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the document password.</db:para>
<db:para>If the document is protected by a password, the user must provide it, and the application must set this property. Otherwise, it's not needed.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">password</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPassword</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>password</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">passwordChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : const Status</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Status</db:type>
<db:varname>status</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">status</db:synopsisinfo>
<db:synopsisinfo role="notifier">statusChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current status of the document.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpdfdocument.xml#Status-enum">QPdfDocument::Status</db:link></db:type> <db:emphasis role="bold">status</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">statusChanged</db:emphasis>(<db:type><db:link xlink:href="qpdfdocument.xml#Status-enum">QPdfDocument::Status</db:link></db:type> <db:emphasis>status</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPdfDocument-1">
<db:title>[explicit] QPdfDocument::QPdfDocument(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPdfDocument</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfDocument(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new document with parent object <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPdfDocument">
<db:title>[override virtual] QPdfDocument::~QPdfDocument()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPdfDocument</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPdfDocument() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the document.</db:para>
</db:section>
<db:section xml:id="close">
<db:title>void QPdfDocument::close()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>close</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void close()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the document.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QPdfDocument::Error QPdfDocument::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPdfDocument::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfDocument::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of error if <db:link xlink:href="qpdfdocument.xml#status-prop">status</db:link> is <db:code>Error</db:code>, or <db:code>NoError</db:code> if there is no error.</db:para>
</db:section>
<db:section xml:id="getAllText">
<db:title>QPdfSelection QPdfDocument::getAllText(int <db:emphasis>page</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPdfSelection</db:type>
<db:methodname>getAllText</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfSelection getAllText(int page)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns all the text and its bounds on the given <db:code role="parameter">page</db:code>.</db:para>
</db:section>
<db:section xml:id="getSelection">
<db:title>QPdfSelection QPdfDocument::getSelection(int <db:emphasis>page</db:emphasis>, QPointF <db:emphasis>start</db:emphasis>, QPointF <db:emphasis>end</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPdfSelection</db:type>
<db:methodname>getSelection</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPointF</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPointF</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfSelection getSelection(int page, QPointF start, QPointF end)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns information about the text on the given <db:code role="parameter">page</db:code> that can be found between the given <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> points, if any.</db:para>
</db:section>
<db:section xml:id="getSelectionAtIndex">
<db:title>QPdfSelection QPdfDocument::getSelectionAtIndex(int <db:emphasis>page</db:emphasis>, int <db:emphasis>startIndex</db:emphasis>, int <db:emphasis>maxLength</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPdfSelection</db:type>
<db:methodname>getSelectionAtIndex</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>maxLength</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfSelection getSelectionAtIndex(int page, int startIndex, int maxLength)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns information about the text on the given <db:code role="parameter">page</db:code> that can be found beginning at the given <db:code role="parameter">startIndex</db:code> with at most <db:code role="parameter">maxLength</db:code> characters.</db:para>
</db:section>
<db:section xml:id="load">
<db:title>QPdfDocument::Error QPdfDocument::load(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPdfDocument::Error</db:type>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfDocument::Error load(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the document contents from <db:code role="parameter">fileName</db:code>.</db:para>
</db:section>
<db:section xml:id="load-1">
<db:title>void QPdfDocument::load(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void load(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the document contents from <db:code role="parameter">device</db:code>.</db:para>
</db:section>
<db:section xml:id="metaData">
<db:title>QVariant QPdfDocument::metaData(QPdfDocument::MetaDataField <db:emphasis>field</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>metaData</db:methodname>
<db:methodparam>
<db:type>QPdfDocument::MetaDataField</db:type>
<db:parameter>field</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant metaData(QPdfDocument::MetaDataField field) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the meta data of the document for the given <db:code role="parameter">field</db:code>.</db:para>
</db:section>
<db:section xml:id="pageLabel">
<db:title>QString QPdfDocument::pageLabel(int <db:emphasis>page</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>pageLabel</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString pageLabel(int page)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:code role="parameter">page</db:code> number to be used for display purposes.</db:para>
<db:para>For example, a document may have multiple sections with different numbering. Perhaps the preface uses roman numerals, the body starts on page 1, and the appendix starts at A1. Whenever a PDF viewer shows a page number, to avoid confusing the user it should be the same &quot;number&quot; as is printed on the corner of the page, rather than the zero-based page index that we use in APIs (assuming the document author has made the page labels match the printed numbers).</db:para>
<db:para>If the document does not have custom page numbering, this function returns <db:code>page + 1</db:code>.</db:para>
</db:section>
<db:section xml:id="pagePointSize">
<db:title>QSizeF QPdfDocument::pagePointSize(int <db:emphasis>page</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSizeF</db:type>
<db:methodname>pagePointSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizeF pagePointSize(int page) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of page <db:code role="parameter">page</db:code> in points (1/72 of an inch).</db:para>
</db:section>
<db:section xml:id="render">
<db:title>QImage QPdfDocument::render(int <db:emphasis>page</db:emphasis>, QSize <db:emphasis>imageSize</db:emphasis>, QPdfDocumentRenderOptions <db:emphasis>renderOptions</db:emphasis> = QPdfDocumentRenderOptions())</db:title>
<db:methodsynopsis>
<db:type>QImage</db:type>
<db:methodname>render</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSize</db:type>
<db:parameter>imageSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPdfDocumentRenderOptions</db:type>
<db:parameter>renderOptions</db:parameter>
<db:initializer>QPdfDocumentRenderOptions()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage render(int page, QSize imageSize, QPdfDocumentRenderOptions renderOptions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renders the <db:code role="parameter">page</db:code> into a <db:link xlink:href="qimage.xml">QImage</db:link> of size <db:code role="parameter">imageSize</db:code> according to the provided <db:code role="parameter">renderOptions</db:code>.</db:para>
<db:para>Returns the rendered page or an empty image in case of an error.</db:para>
<db:para>Note: If the <db:code role="parameter">imageSize</db:code> does not match the aspect ratio of the page in the PDF document, the page is rendered scaled, so that it covers the complete <db:code role="parameter">imageSize</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
