<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Sensors - Grue Sensor Example</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Qt Sensors - Grue sensor example demonstrates all the steps from creating a new sensor to using it.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtsensors-examples-grue.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The sensor definition and implementation are in a new sensor plugin that client apps can use for detecting Grues (imaginary monsters that live in the dark).</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtsensors-grue-example.xml#grue-sensor-plugin">Grue Sensor Plugin</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The sensor plugin can be used by C++ applications as shown in the console application example.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtsensors-grue-example.xml#grue-sensor-console-application">Grue Sensor Console Application</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>QML applications can use the new sensor by importing the QMLGrueSensor class.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtsensors-grue-example.xml#grue-sensor-qml-application">Grue Sensor QML Application</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="grue-sensor-plugin">
<db:title>Grue Sensor Plugin</db:title>
<db:para>The Grue sensor is defined in a new sensor plugin that applications can use.</db:para>
<db:para>The plugin provides the sensor reading property that describes your chance of being eaten. This chance is increasing in the dark until it is 100% when you are eaten by the Grue and at that point the plugin stops further processing. In case of the plugin receiving light again before that happens the chance of being eaten resets to 0%.</db:para>
<db:para>This example was created using the make_sensor.pl script which can be found in src/sensors. As such, it contains some generated code that defines the convenience classes GrueFilter and GrueSensor.</db:para>
</db:section>
<db:section xml:id="grue-sensor-implementation">
<db:title>Grue Sensor Implementation</db:title>
<db:para>The Grue sensor implementation lives in the plugin that is loaded by the Qt Sensors library. The source code is available in the <db:code>grue/plugin</db:code> subdirectory.</db:para>
<db:para>The Grue sensor needs a backend before it can be used. The backend provided is rather basic and it relies on some kind of light sensor to work but it gets the job done. If new hardware that can detect the actual presence of Grues becomes available a backend could be created that supports this hardware and applications using the Grue sensor would be able to use it without any changes.</db:para>
<db:para>There are a few mandatory parts to a backend. They are the start and stop methods and the setReading call. The start and stop methods are used to start and stop any underlying hardware. In the case of this backend they start and stop a light sensor. In the start method, the backend should call the <db:code>sensorStopped()</db:code> or <db:code>sensorBusy()</db:code> methods if it cannot start.</db:para>
<db:programlisting language="cpp">    lightSensor-&amp;gt;setDataRate(sensor()-&amp;gt;dataRate());
    lightSensor-&amp;gt;start();
    // If the light sensor doesn't work we don't work either
    if (!lightSensor-&amp;gt;isActive())
        sensorStopped();
    if (lightSensor-&amp;gt;isBusy())
        sensorBusy();
</db:programlisting>
<db:para>The setReading method is needed so that the sensors library knows where the readings are coming from. This backend has a local copy of the reading so it passes a pointer to the function.</db:para>
<db:programlisting language="cpp">    // Register our reading instance
    setReading&amp;lt;GrueSensorReading&amp;gt;(&amp;amp;m_reading);
</db:programlisting>
<db:para>However it is also possible to pass null to the setReading method in which case the sensors library will create an instance and return a pointer.</db:para>
<db:programlisting language="cpp">// Create a reading instance for us to use
m_reading = setReading&amp;lt;GrueSensorReading&amp;gt;(0);
</db:programlisting>
<db:para>The Grue sensor backend also supplies some metadata.</db:para>
<db:para>The backend checks 2 things, how dark it is and how long you have been in the dark. It uses the <db:code>readingChanged()</db:code> signal to know when to check the light sensor's value. Once it is dark, it uses a timer to increase your chance of being eaten.</db:para>
<db:para>The Grue sensor backend is delivered as a plugin. The plugin has a factory object that registers the types available and does the actual instantiation of the backend.</db:para>
</db:section>
<db:section xml:id="grue-sensor-console-application">
<db:title>Grue Sensor Console Application</db:title>
<db:para>The Grue sensor console application demonstrates use of the Grue sensor. The source code is available in the <db:code>grue/console_app</db:code> subdirectory.</db:para>
<db:para>This is a simple commandline application. It demonstrates how to use the generic access feature of Qt Sensors to avoid a link-time dependency on a library.</db:para>
</db:section>
<db:section xml:id="grue-sensor-c-class-registration-for-qml">
<db:title>Grue Sensor C++ Class Registration for QML</db:title>
<db:para>The QMLGrueSensor class is registered for QML, so the class name can be used as an import and the class properties can be accessed from QML.</db:para>
</db:section>
<db:section xml:id="grue-sensor-qml-application">
<db:title>Grue Sensor QML Application</db:title>
<db:para>The Grue sensor QML application demonstrates the use of QMLGrueSensor QML type.</db:para>
<db:para>The application consists of a single QML file and an image. It is built as an executable with C++ code that runs the QML, but it can also be launched directly using the <db:code>qmlscene</db:code> tool.</db:para>
<db:programlisting language="cpp">qmlscene -I . grue.qml
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtsensors.git/tree/examples/sensors/grue?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
