<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoRoutingManager Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link> class provides support for geographic routing operations.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoRoutingManager</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoRoutingManager is part of <db:simplelist><db:member>QtLocation-routing</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qgeoroutingmanager.xml#calculateRoute">calculateRoute</db:link>() and <db:link xlink:href="qgeoroutingmanager.xml#updateRoute">updateRoute</db:link>() methods function <db:link xlink:href="qgeoroutereply.xml">QGeoRouteReply</db:link> objects, which manage these operations and report on the result of the operations and any errors which may have occurred.</db:para>
<db:para>The <db:link xlink:href="qgeoroutingmanager.xml#calculateRoute">calculateRoute</db:link>() function is used to find a route (or routes) that follows a set of waypoints and matches various other criteria. The <db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link> class is used to specify this information.</db:para>
<db:para>If supportsRouteUpdates() returns true then the <db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link> supports updating route information based on position updates. This will cause the travel time and distance estimates to be updated, and any QGeoRouteSegments already traversed to be removed from the route.</db:para>
<db:para>The updates can be triggered with the <db:link xlink:href="qgeoroutingmanager.xml#updateRoute">updateRoute</db:link>() function, which makes use of the <db:link xlink:href="qgeopositioninfo.xml">QGeoPositionInfo</db:link> instances emitted as position updates by <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link>.</db:para>
<db:para>Instances of <db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link> can be accessed with <db:link xlink:href="qgeoserviceprovider.xml#routingManager">QGeoServiceProvider::routingManager</db:link>().</db:para>
<db:para>A small example of the usage of <db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link> and QGeoRouteRequests follows:</db:para>
<db:programlisting language="cpp">class MyRouteHandler : public QObject
{
    Q_OBJECT
public:
    MyRouteHandler(QGeoRoutingManager *routingManager,
                   const QGeoCoordinate &amp;origin,
                   const QGeoCoordinate &amp;destination) {

        QGeoRouteRequest request(origin, destination);

        // The request defaults to the fastest route by car, which is
        // equivalent to:
        // request.setTravelMode(QGeoRouteRequest::CarTravel);
        // request.setRouteOptimization(QGeoRouteRequest::FastestRoute);

        request.setAvoidFeatureTypes(QGeoRouteRequest::AvoidTolls);
        request.setAvoidFeatureTypes(QGeoRouteRequest::AvoidMotorPoolLanes);

        QGeoRouteRequest::AvoidFeaturesTypes avoidableFeatures = routingManager-&gt;supportedAvoidFeatureTypes();

        if (!(avoidableFeatures &amp; request.avoidFeatureTypes())) {
            // ... inform the user that the routing manager does not
            // provide support for avoiding tolls and/or motor pool lanes ...
            return;
        }

        QGeoRouteReply *reply = routingManager-&gt;calculateRoute(request);

        if (reply-&gt;isFinished()) {
            if (reply-&gt;error() == QGeoRouteReply::NoError) {
                routeCalculated(reply);
            } else {
                routeError(reply, reply-&gt;error(), reply-&gt;errorString());
            }
            return;
        }

        connect(routingManager,
                SIGNAL(finished(QGeoRouteReply*)),
                this,
                SLOT(routeCalculated(QGeoRouteReply*)));

        connect(routingManager,
                SIGNAL(error(QGeoRouteReply*,QGeoRouteReply::Error,QString)),
                this,
                SLOT(routeError(QGeoRouteReply*,QGeoRouteReply::Error,QString)));
    }

private slots:
    void routeCalculated(QGeoRouteReply *reply)
    {
        // A route request can ask for several alternative routes ...
        if (reply-&gt;routes().size() != 0) {

            // ... but by default it will only get a single route
            QGeoRoute route = reply-&gt;routes().at(0);

            //... now we have to make use of the route ...
        }

        reply-&gt;deleteLater();
    }

    void routeError(QGeoRouteReply *reply, QGeoRouteReply:Error error, const QString &amp;errorString)
    {
        // ... inform the user that an error has occurred ...
        reply-&gt;deleteLater();
    }
};
    </db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QGeoRoutingManager">
<db:title>[virtual noexcept] QGeoRoutingManager::~QGeoRoutingManager()</db:title>
<db:para>Destroys this manager.</db:para>
</db:section>
<db:section xml:id="calculateRoute">
<db:title>QGeoRouteReply *QGeoRoutingManager::calculateRoute(const QGeoRouteRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:para>Begins the calculation of the route specified by <db:code role="parameter">request</db:code>.</db:para>
<db:para>A <db:link xlink:href="qgeoroutereply.xml">QGeoRouteReply</db:link> object will be returned, which can be used to manage the routing operation and to return the results of the operation.</db:para>
<db:para>This manager and the returned <db:link xlink:href="qgeoroutereply.xml">QGeoRouteReply</db:link> object will emit signals indicating if the operation completes or if errors occur.</db:para>
<db:para>Once the operation has completed, <db:link xlink:href="qgeoroutereply.xml#routes">QGeoRouteReply::routes</db:link> can be used to retrieve the calculated route or routes.</db:para>
<db:para>If <db:code role="parameter">request</db:code> includes features which are not supported by this manager, as reported by the methods in this manager, then a <db:link xlink:href="qgeoroutereply.xml#Error-enum">QGeoRouteReply::UnsupportedOptionError</db:link> will occur.</db:para>
<db:para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to <db:link xlink:href="qgeoroutingmanager.xml#finished">QGeoRoutingManager::finished</db:link>(), <db:link xlink:href="qgeoroutingmanager.xml#error">QGeoRoutingManager::error</db:link>(), <db:link xlink:href="qgeoroutereply.xml#finished">QGeoRouteReply::finished</db:link>() or <db:link xlink:href="qgeoroutereply.xml#error">QGeoRouteReply::error</db:link>() with <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
</db:section>
<db:section xml:id="error">
<db:title>void QGeoRoutingManager::error(QGeoRouteReply *<db:emphasis>reply</db:emphasis>, QGeoRouteReply::Error <db:emphasis>error</db:emphasis>, QString <db:emphasis>errorString</db:emphasis> = QString())</db:title>
<db:para>This signal is emitted when an error has been detected in the processing of <db:code role="parameter">reply</db:code>. The <db:link xlink:href="qgeoroutingmanager.xml#finished">QGeoRoutingManager::finished</db:link>() signal will probably follow.</db:para>
<db:para>The error will be described by the error code <db:code role="parameter">error</db:code>. If <db:code role="parameter">errorString</db:code> is not empty it will contain a textual description of the error.</db:para>
<db:para>This signal and <db:link xlink:href="qgeoroutereply.xml#error">QGeoRouteReply::error</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete the <db:code role="parameter">reply</db:code> object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="finished">
<db:title>void QGeoRoutingManager::finished(QGeoRouteReply *<db:emphasis>reply</db:emphasis>)</db:title>
<db:para>This signal is emitted when <db:code role="parameter">reply</db:code> has finished processing.</db:para>
<db:para>If reply::error() equals <db:link xlink:href="qgeoroutereply.xml#Error-enum">QGeoRouteReply::NoError</db:link> then the processing finished successfully.</db:para>
<db:para>This signal and <db:link xlink:href="qgeoroutereply.xml#finished">QGeoRouteReply::finished</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete the <db:code role="parameter">reply</db:code> object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="locale">
<db:title>QLocale QGeoRoutingManager::locale() const</db:title>
<db:para>Returns the locale used to hint to this routing manager about what language to use for addresses and instructions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanager.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="managerName">
<db:title>QString QGeoRoutingManager::managerName() const</db:title>
<db:para>Returns the name of the engine which implements the behaviour of this routing manager.</db:para>
<db:para>The combination of managerName() and <db:link xlink:href="qgeoroutingmanager.xml#managerVersion">managerVersion</db:link>() should be unique amongst the plugin implementations.</db:para>
</db:section>
<db:section xml:id="managerVersion">
<db:title>int QGeoRoutingManager::managerVersion() const</db:title>
<db:para>Returns the version of the engine which implements the behaviour of this routin manager.</db:para>
<db:para>The combination of <db:link xlink:href="qgeoroutingmanager.xml#managerName">managerName</db:link>() and managerVersion() should be unique amongst the plugin implementations.</db:para>
</db:section>
<db:section xml:id="measurementSystem">
<db:title>QLocale::MeasurementSystem QGeoRoutingManager::measurementSystem() const</db:title>
<db:para>Returns the measurement system used by this manager.</db:para>
<db:para>If <db:link xlink:href="qgeoroutingmanager.xml#setMeasurementSystem">setMeasurementSystem</db:link>() has been called then the value returned by this function may be different to that returned by <db:link xlink:href="qgeoroutingmanager.xml#locale">locale</db:link>().<db:link xlink:href="qlocale.xml#measurementSystem">measurementSystem</db:link>(). In which case the value returned by this function is what will be used by the manager.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanager.xml#setMeasurementSystem">setMeasurementSystem</db:link>()</db:member>
<db:member><db:link xlink:href="qgeoroutingmanager.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLocale">
<db:title>void QGeoRoutingManager::setLocale(const QLocale &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:para>Sets the locale to be used by this manager to <db:code role="parameter">locale</db:code>.</db:para>
<db:para>If this routing manager supports returning addresses and instructions in different languages, they will be returned in the language of <db:code role="parameter">locale</db:code>.</db:para>
<db:para>The locale used defaults to the system locale if this is not set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanager.xml#locale">locale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMeasurementSystem">
<db:title>void QGeoRoutingManager::setMeasurementSystem(QLocale::MeasurementSystem <db:emphasis>system</db:emphasis>)</db:title>
<db:para>Sets the measurement system used by this manager to <db:code role="parameter">system</db:code>.</db:para>
<db:para>The measurement system can be set independently of the locale. Both <db:link xlink:href="qgeoroutingmanager.xml#setLocale">setLocale</db:link>() and this function set the measurement system. The value set by the last function called will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanager.xml#measurementSystem">measurementSystem</db:link>()</db:member>
<db:member><db:link xlink:href="qgeoroutingmanager.xml#locale">locale</db:link>()</db:member>
<db:member><db:link xlink:href="qgeoroutingmanager.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedFeatureTypes">
<db:title>QGeoRouteRequest::FeatureTypes QGeoRoutingManager::supportedFeatureTypes() const</db:title>
<db:para>Returns the types of features that this manager can take into account during route planning.</db:para>
</db:section>
<db:section xml:id="supportedFeatureWeights">
<db:title>QGeoRouteRequest::FeatureWeights QGeoRoutingManager::supportedFeatureWeights() const</db:title>
<db:para>Returns the weightings which this manager can apply to different features during route planning.</db:para>
</db:section>
<db:section xml:id="supportedManeuverDetails">
<db:title>QGeoRouteRequest::ManeuverDetails QGeoRoutingManager::supportedManeuverDetails() const</db:title>
<db:para>Returns the levels of detail for navigation maneuvers which can be requested by this manager.</db:para>
</db:section>
<db:section xml:id="supportedRouteOptimizations">
<db:title>QGeoRouteRequest::RouteOptimizations QGeoRoutingManager::supportedRouteOptimizations() const</db:title>
<db:para>Returns the route optimizations supported by this manager.</db:para>
</db:section>
<db:section xml:id="supportedSegmentDetails">
<db:title>QGeoRouteRequest::SegmentDetails QGeoRoutingManager::supportedSegmentDetails() const</db:title>
<db:para>Returns the levels of detail for routing segments which can be requested with this manager.</db:para>
</db:section>
<db:section xml:id="supportedTravelModes">
<db:title>QGeoRouteRequest::TravelModes QGeoRoutingManager::supportedTravelModes() const</db:title>
<db:para>Returns the travel modes supported by this manager.</db:para>
</db:section>
<db:section xml:id="updateRoute">
<db:title>QGeoRouteReply *QGeoRoutingManager::updateRoute(const QGeoRoute &amp;<db:emphasis>route</db:emphasis>, const QGeoCoordinate &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:para>Begins the process of updating <db:code role="parameter">route</db:code> based on the current position <db:code role="parameter">position</db:code>.</db:para>
<db:para>A <db:link xlink:href="qgeoroutereply.xml">QGeoRouteReply</db:link> object will be returned, which can be used to manage the routing operation and to return the results of the operation.</db:para>
<db:para>This manager and the returned <db:link xlink:href="qgeoroutereply.xml">QGeoRouteReply</db:link> object will emit signals indicating if the operation completes or if errors occur.</db:para>
<db:para>If supportsRouteUpdates() returns false an <db:link xlink:href="qgeoroutereply.xml#Error-enum">QGeoRouteReply::UnsupportedOptionError</db:link> will occur.</db:para>
<db:para>Once the operation has completed, <db:link xlink:href="qgeoroutereply.xml#routes">QGeoRouteReply::routes</db:link> can be used to retrieve the updated route.</db:para>
<db:para>The returned route could be entirely different to the original route, especially if <db:code role="parameter">position</db:code> is far away from the initial route. Otherwise the route will be similar, although the remaining time and distance will be updated and any segments of the original route which have been traversed will be removed.</db:para>
<db:para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to <db:link xlink:href="qgeoroutingmanager.xml#finished">QGeoRoutingManager::finished</db:link>(), <db:link xlink:href="qgeoroutingmanager.xml#error">QGeoRoutingManager::error</db:link>(), <db:link xlink:href="qgeoroutereply.xml#finished">QGeoRouteReply::finished</db:link>() or <db:link xlink:href="qgeoroutereply.xml#error">QGeoRouteReply::error</db:link>() with <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
