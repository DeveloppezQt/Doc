<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFormLayout Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qformlayout.xml">QFormLayout</db:link> class manages forms of input widgets and their associated labels.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFormLayout</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlayout.xml" xlink:role="class">QLayout</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFormLayout is part of <db:simplelist><db:member>geomanagement</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qformlayout.xml">QFormLayout</db:link> is a convenience layout class that lays out its children in a two-column form. The left column consists of labels and the right column consists of &quot;field&quot; widgets (line editors, spin boxes, etc.).</db:para>
<db:para>Traditionally, such two-column form layouts were achieved using <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link>. <db:link xlink:href="qformlayout.xml">QFormLayout</db:link> is a higher-level alternative that provides the following advantages:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Adherence to the different platform's look and feel guidelines.</db:emphasis></db:para>
<db:para>For example, the <db:link xlink:href="http://developer.apple.com/library/mac/#documentation/UserExperience/Conceptual/AppleHIGuidelines/Intro/Intro.html">macOS Aqua</db:link> and KDE guidelines specify that the labels should be right-aligned, whereas Windows and GNOME applications normally use left-alignment.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Support for wrapping long rows.</db:emphasis></db:para>
<db:para>For devices with small displays, <db:link xlink:href="qformlayout.xml">QFormLayout</db:link> can be set to <db:link xlink:href="qformlayout.xml#RowWrapPolicy-enum">wrap long rows</db:link>, or even to <db:link xlink:href="qformlayout.xml#RowWrapPolicy-enum">wrap all rows</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Convenient API for creating labelâ€“field pairs.</db:emphasis></db:para>
<db:para>The <db:link xlink:href="qformlayout.xml#addRow">addRow</db:link>() overload that takes a <db:link xlink:href="qstring.xml">QString</db:link> and a <db:link xlink:href="qwidget.xml">QWidget</db:link> * creates a <db:link xlink:href="qlabel.xml">QLabel</db:link> behind the scenes and automatically set up its buddy. We can then write code like this:</db:para>
<db:programlisting language="cpp">QFormLayout *formLayout = new QFormLayout(this);
formLayout-&gt;addRow(tr(&quot;&amp;Name:&quot;), nameLineEdit);
formLayout-&gt;addRow(tr(&quot;&amp;Email:&quot;), emailLineEdit);
formLayout-&gt;addRow(tr(&quot;&amp;Age:&quot;), ageSpinBox);
</db:programlisting>
<db:para>Compare this with the following code, written using <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link>:</db:para>
<db:programlisting language="cpp">QGridLayout *gridLayout = new QGridLayout(this);

nameLabel = new QLabel(tr(&quot;&amp;Name:&quot;));
nameLabel-&gt;setBuddy(nameLineEdit);

emailLabel = new QLabel(tr(&quot;&amp;Name:&quot;));
emailLabel-&gt;setBuddy(emailLineEdit);

ageLabel = new QLabel(tr(&quot;&amp;Name:&quot;));
ageLabel-&gt;setBuddy(ageSpinBox);

gridLayout-&gt;addWidget(nameLabel, 0, 0);
gridLayout-&gt;addWidget(nameLineEdit, 0, 1);
gridLayout-&gt;addWidget(emailLabel, 1, 0);
gridLayout-&gt;addWidget(emailLineEdit, 1, 1);
gridLayout-&gt;addWidget(ageLabel, 2, 0);
gridLayout-&gt;addWidget(ageSpinBox, 2, 1);
</db:programlisting>
</db:listitem>
</db:itemizedlist>
<db:para>The table below shows the default appearance in different styles.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qcommonstyle.xml">QCommonStyle</db:link> derived styles (except QPlastiqueStyle)</db:para>
</db:th>
<db:th>
<db:para>QMacStyle</db:para>
</db:th>
<db:th>
<db:para>QPlastiqueStyle</db:para>
</db:th>
<db:th>
<db:para>Qt Extended styles</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qformlayout-win.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qformlayout-mac.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qformlayout-kde.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qformlayout-qpe.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Traditional style used for Windows, GNOME, and earlier versions of KDE. Labels are left aligned, and expanding fields grow to fill the available space. (This normally corresponds to what we would get using a two-column <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link>.)</db:para>
</db:td>
<db:td>
<db:para>Style based on the <db:link xlink:href="http://developer.apple.com/library/mac/#documentation/UserExperience/Conceptual/AppleHIGuidelines/Intro/Intro.html">macOS Aqua</db:link> guidelines. Labels are right-aligned, the fields don't grow beyond their size hint, and the form is horizontally centered.</db:para>
</db:td>
<db:td>
<db:para>Recommended style for KDE applications. Similar to MacStyle, except that the form is left-aligned and all fields grow to fill the available space.</db:para>
</db:td>
<db:td>
<db:para>Default style for Qt Extended styles. Labels are right-aligned, expanding fields grow to fill the available space, and row wrapping is enabled for long lines.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The form styles can be also be overridden individually by calling <db:link xlink:href="qformlayout.xml#labelAlignment-prop">setLabelAlignment</db:link>(), <db:link xlink:href="qformlayout.xml#formAlignment-prop">setFormAlignment</db:link>(), <db:link xlink:href="qformlayout.xml#fieldGrowthPolicy-prop">setFieldGrowthPolicy</db:link>(), and <db:link xlink:href="qformlayout.xml#rowWrapPolicy-prop">setRowWrapPolicy</db:link>(). For example, to simulate the form layout appearance of QMacStyle on all platforms, but with left-aligned labels, you could write:</db:para>
<db:programlisting language="cpp">formLayout-&gt;setRowWrapPolicy(QFormLayout::DontWrapRows);
formLayout-&gt;setFieldGrowthPolicy(QFormLayout::FieldsStayAtSizeHint);
formLayout-&gt;setFormAlignment(Qt::AlignHCenter | Qt::AlignTop);
formLayout-&gt;setLabelAlignment(Qt::AlignLeft);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml">QGridLayout</db:link></db:member>
<db:member><db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link></db:member>
<db:member><db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FieldGrowthPolicy-enum">
<db:title>enum QFormLayout::FieldGrowthPolicy</db:title>
<db:para>This enum specifies the different policies that can be used to control the way in which the form's fields grow.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qformlayout.xml">QFormLayout</db:link></db:emphasis>::FieldsStayAtSizeHint</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The fields never grow beyond their <db:link xlink:href="qwidgetitem.xml#sizeHint">effective size hint</db:link>. This is the default for QMacStyle.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qformlayout.xml">QFormLayout</db:link></db:emphasis>::ExpandingFieldsGrow</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Fields with an horizontal <db:link xlink:href="qsizepolicy.xml">size policy</db:link> of <db:link xlink:href="qsizepolicy.xml#Policy-enum">Expanding</db:link> or <db:link xlink:href="qsizepolicy.xml#Policy-enum">MinimumExpanding</db:link> will grow to fill the available space. The other fields will not grow beyond their effective size hint. This is the default policy for Plastique.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qformlayout.xml">QFormLayout</db:link></db:emphasis>::AllNonFixedFieldsGrow</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>All fields with a size policy that allows them to grow will grow to fill the available space. This is the default policy for most styles.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#fieldGrowthPolicy-prop">fieldGrowthPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ItemRole-enum">
<db:title>enum QFormLayout::ItemRole</db:title>
<db:para>This enum specifies the types of widgets (or other layout items) that may appear in a row.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qformlayout.xml">QFormLayout</db:link></db:emphasis>::LabelRole</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A label widget.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qformlayout.xml">QFormLayout</db:link></db:emphasis>::FieldRole</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A field widget.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qformlayout.xml">QFormLayout</db:link></db:emphasis>::SpanningRole</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A widget that spans label and field columns.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#getItemPosition">getItemPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="RowWrapPolicy-enum">
<db:title>enum QFormLayout::RowWrapPolicy</db:title>
<db:para>This enum specifies the different policies that can be used to control the way in which the form's rows wrap.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qformlayout.xml">QFormLayout</db:link></db:emphasis>::DontWrapRows</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Fields are always laid out next to their label. This is the default policy for all styles except Qt Extended styles.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qformlayout.xml">QFormLayout</db:link></db:emphasis>::WrapLongRows</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Labels are given enough horizontal space to fit the widest label, and the rest of the space is given to the fields. If the minimum size of a field pair is wider than the available space, the field is wrapped to the next line. This is the default policy for Qt Extended styles.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qformlayout.xml">QFormLayout</db:link></db:emphasis>::WrapAllRows</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Fields are always laid out below their label.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#rowWrapPolicy-prop">rowWrapPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="fieldGrowthPolicy-prop">
<db:title>fieldGrowthPolicy : FieldGrowthPolicy</db:title>
<db:para>This property holds the way in which the form's fields grow</db:para>
<db:para>The default value depends on the widget or application style. For QMacStyle, the default is <db:link xlink:href="qformlayout.xml#FieldGrowthPolicy-enum">FieldsStayAtSizeHint</db:link>; for <db:link xlink:href="qcommonstyle.xml">QCommonStyle</db:link> derived styles (like Plastique and Windows), the default is <db:link xlink:href="qformlayout.xml#FieldGrowthPolicy-enum">ExpandingFieldsGrow</db:link>; for Qt Extended styles, the default is <db:link xlink:href="qformlayout.xml#FieldGrowthPolicy-enum">AllNonFixedFieldsGrow</db:link>.</db:para>
<db:para>If none of the fields can grow and the form is resized, extra space is distributed according to the current <db:link xlink:href="qformlayout.xml#formAlignment-prop">form alignment</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qformlayout.xml#FieldGrowthPolicy-enum">QFormLayout::FieldGrowthPolicy</db:link></db:type> <db:emphasis role="bold">fieldGrowthPolicy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFieldGrowthPolicy</db:emphasis>(<db:type><db:link xlink:href="qformlayout.xml#FieldGrowthPolicy-enum">QFormLayout::FieldGrowthPolicy</db:link></db:type> <db:emphasis>policy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#formAlignment-prop">formAlignment</db:link></db:member>
<db:member><db:link xlink:href="qformlayout.xml#rowWrapPolicy-prop">rowWrapPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="formAlignment-prop">
<db:title>formAlignment : Qt::Alignment</db:title>
<db:para>This property holds the alignment of the form layout's contents within the layout's geometry</db:para>
<db:para>The default value depends on the widget or application style. For QMacStyle, the default is <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignHCenter</db:link> | <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link>; for the other styles, the default is <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link> | <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis role="bold">formAlignment</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFormAlignment</db:emphasis>(<db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis>alignment</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#labelAlignment-prop">labelAlignment</db:link></db:member>
<db:member><db:link xlink:href="qformlayout.xml#rowWrapPolicy-prop">rowWrapPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalSpacing-prop">
<db:title>horizontalSpacing : int</db:title>
<db:para>This property holds the spacing between widgets that are laid out side by side</db:para>
<db:para>By default, if no value is explicitly set, the layout's horizontal spacing is inherited from the parent layout, or from the style settings for the parent widget.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">horizontalSpacing</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHorizontalSpacing</db:emphasis>(<db:type>int</db:type> <db:emphasis>spacing</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#verticalSpacing-prop">verticalSpacing</db:link></db:member>
<db:member><db:link xlink:href="qstyle.xml#pixelMetric">QStyle::pixelMetric</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutHorizontalSpacing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelAlignment-prop">
<db:title>labelAlignment : Qt::Alignment</db:title>
<db:para>This property holds the horizontal alignment of the labels</db:para>
<db:para>The default value depends on the widget or application style. For <db:link xlink:href="qcommonstyle.xml">QCommonStyle</db:link> derived styles, except for QPlastiqueStyle, the default is <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link>; for the other styles, the default is <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignRight</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis role="bold">labelAlignment</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLabelAlignment</db:emphasis>(<db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis>alignment</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#formAlignment-prop">formAlignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowWrapPolicy-prop">
<db:title>rowWrapPolicy : RowWrapPolicy</db:title>
<db:para>This property holds the way in which the form's rows wrap</db:para>
<db:para>The default value depends on the widget or application style. For Qt Extended styles, the default is <db:link xlink:href="qformlayout.xml#RowWrapPolicy-enum">WrapLongRows</db:link>; for the other styles, the default is <db:link xlink:href="qformlayout.xml#RowWrapPolicy-enum">DontWrapRows</db:link>.</db:para>
<db:para>If you want to display each label above its associated field (instead of next to it), set this property to <db:link xlink:href="qformlayout.xml#RowWrapPolicy-enum">WrapAllRows</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qformlayout.xml#RowWrapPolicy-enum">QFormLayout::RowWrapPolicy</db:link></db:type> <db:emphasis role="bold">rowWrapPolicy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRowWrapPolicy</db:emphasis>(<db:type><db:link xlink:href="qformlayout.xml#RowWrapPolicy-enum">QFormLayout::RowWrapPolicy</db:link></db:type> <db:emphasis>policy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#fieldGrowthPolicy-prop">fieldGrowthPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verticalSpacing-prop">
<db:title>verticalSpacing : int</db:title>
<db:para>This property holds the spacing between widgets that are laid out vertically</db:para>
<db:para>By default, if no value is explicitly set, the layout's vertical spacing is inherited from the parent layout, or from the style settings for the parent widget.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">verticalSpacing</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVerticalSpacing</db:emphasis>(<db:type>int</db:type> <db:emphasis>spacing</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#horizontalSpacing-prop">horizontalSpacing</db:link></db:member>
<db:member><db:link xlink:href="qstyle.xml#pixelMetric">QStyle::pixelMetric</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutHorizontalSpacing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFormLayout">
<db:title>[explicit] QFormLayout::QFormLayout(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new form layout with the given <db:code role="parameter">parent</db:code> widget.</db:para>
<db:para>The layout is set directly as the top-level layout for <db:code role="parameter">parent</db:code>. There can be only one top-level layout for a widget. It is returned by <db:link xlink:href="qwidget.xml#layout">QWidget::layout</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#setLayout">QWidget::setLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QFormLayout">
<db:title>[virtual noexcept] QFormLayout::~QFormLayout()</db:title>
<db:para>Destroys the form layout.</db:para>
</db:section>
<db:section xml:id="addItem">
<db:title>[override virtual] void QFormLayout::addItem(QLayoutItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#addItem" role="function">QLayout::addItem(QLayoutItem *item)</db:link>.</db:para>
</db:section>
<db:section xml:id="addRow">
<db:title>void QFormLayout::addRow(QWidget *<db:emphasis>label</db:emphasis>, QWidget *<db:emphasis>field</db:emphasis>)</db:title>
<db:para>Adds a new row to the bottom of this form layout, with the given <db:code role="parameter">label</db:code> and <db:code role="parameter">field</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#insertRow">insertRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addRow-1">
<db:title>void QFormLayout::addRow(QLayout *<db:emphasis>layout</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds the specified <db:code role="parameter">layout</db:code> at the end of this form layout. The <db:code role="parameter">layout</db:code> spans both columns.</db:para>
</db:section>
<db:section xml:id="addRow-2">
<db:title>void QFormLayout::addRow(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds the specified <db:code role="parameter">widget</db:code> at the end of this form layout. The <db:code role="parameter">widget</db:code> spans both columns.</db:para>
</db:section>
<db:section xml:id="addRow-3">
<db:title>void QFormLayout::addRow(QWidget *<db:emphasis>label</db:emphasis>, QLayout *<db:emphasis>field</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="addRow-4">
<db:title>void QFormLayout::addRow(const QString &amp;<db:emphasis>labelText</db:emphasis>, QLayout *<db:emphasis>field</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This overload automatically creates a <db:link xlink:href="qlabel.xml">QLabel</db:link> behind the scenes with <db:code role="parameter">labelText</db:code> as its text.</db:para>
</db:section>
<db:section xml:id="addRow-5">
<db:title>void QFormLayout::addRow(const QString &amp;<db:emphasis>labelText</db:emphasis>, QWidget *<db:emphasis>field</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This overload automatically creates a <db:link xlink:href="qlabel.xml">QLabel</db:link> behind the scenes with <db:code role="parameter">labelText</db:code> as its text. The <db:code role="parameter">field</db:code> is set as the new <db:link xlink:href="qlabel.xml">QLabel</db:link>'s <db:link xlink:href="qlabel.xml#setBuddy">buddy</db:link>.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>[override virtual] int QFormLayout::count() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#count" role="function">QLayout::count() const</db:link>.</db:para>
</db:section>
<db:section xml:id="expandingDirections">
<db:title>[override virtual] Qt::Orientations QFormLayout::expandingDirections() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#expandingDirections" role="function">QLayout::expandingDirections() const</db:link>.</db:para>
</db:section>
<db:section xml:id="getItemPosition">
<db:title>void QFormLayout::getItemPosition(int <db:emphasis>index</db:emphasis>, int *<db:emphasis>rowPtr</db:emphasis>, QFormLayout::ItemRole *<db:emphasis>rolePtr</db:emphasis>) const</db:title>
<db:para>Retrieves the row and role (column) of the item at the specified <db:code role="parameter">index</db:code>. If <db:code role="parameter">index</db:code> is out of bounds, *<db:code role="parameter">rowPtr</db:code> is set to -1; otherwise the row is stored in *<db:code role="parameter">rowPtr</db:code> and the role is stored in *<db:code role="parameter">rolePtr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#count">count</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#getLayoutPosition">getLayoutPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#getWidgetPosition">getWidgetPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getLayoutPosition">
<db:title>void QFormLayout::getLayoutPosition(QLayout *<db:emphasis>layout</db:emphasis>, int *<db:emphasis>rowPtr</db:emphasis>, QFormLayout::ItemRole *<db:emphasis>rolePtr</db:emphasis>) const</db:title>
<db:para>Retrieves the row and role (column) of the specified child <db:code role="parameter">layout</db:code>. If <db:code role="parameter">layout</db:code> is not in the form layout, *<db:code role="parameter">rowPtr</db:code> is set to -1; otherwise the row is stored in *<db:code role="parameter">rowPtr</db:code> and the role is stored in *<db:code role="parameter">rolePtr</db:code>.</db:para>
</db:section>
<db:section xml:id="getWidgetPosition">
<db:title>void QFormLayout::getWidgetPosition(QWidget *<db:emphasis>widget</db:emphasis>, int *<db:emphasis>rowPtr</db:emphasis>, QFormLayout::ItemRole *<db:emphasis>rolePtr</db:emphasis>) const</db:title>
<db:para>Retrieves the row and role (column) of the specified <db:code role="parameter">widget</db:code> in the layout. If <db:code role="parameter">widget</db:code> is not in the layout, *<db:code role="parameter">rowPtr</db:code> is set to -1; otherwise the row is stored in *<db:code role="parameter">rowPtr</db:code> and the role is stored in *<db:code role="parameter">rolePtr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#getItemPosition">getItemPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#itemAt">itemAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasHeightForWidth">
<db:title>[override virtual] bool QFormLayout::hasHeightForWidth() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#hasHeightForWidth" role="function">QLayoutItem::hasHeightForWidth() const</db:link>.</db:para>
</db:section>
<db:section xml:id="heightForWidth">
<db:title>[override virtual] int QFormLayout::heightForWidth(int <db:emphasis>width</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#heightForWidth" role="function">QLayoutItem::heightForWidth(int) const</db:link>.</db:para>
</db:section>
<db:section xml:id="insertRow">
<db:title>void QFormLayout::insertRow(int <db:emphasis>row</db:emphasis>, QWidget *<db:emphasis>label</db:emphasis>, QWidget *<db:emphasis>field</db:emphasis>)</db:title>
<db:para>Inserts a new row at position <db:code role="parameter">row</db:code> in this form layout, with the given <db:code role="parameter">label</db:code> and <db:code role="parameter">field</db:code>. If <db:code role="parameter">row</db:code> is out of bounds, the new row is added at the end.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#addRow">addRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertRow-1">
<db:title>void QFormLayout::insertRow(int <db:emphasis>row</db:emphasis>, QLayout *<db:emphasis>layout</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts the specified <db:code role="parameter">layout</db:code> at position <db:code role="parameter">row</db:code> in this form layout. The <db:code role="parameter">layout</db:code> spans both columns. If <db:code role="parameter">row</db:code> is out of bounds, the widget is added at the end.</db:para>
</db:section>
<db:section xml:id="insertRow-2">
<db:title>void QFormLayout::insertRow(int <db:emphasis>row</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts the specified <db:code role="parameter">widget</db:code> at position <db:code role="parameter">row</db:code> in this form layout. The <db:code role="parameter">widget</db:code> spans both columns. If <db:code role="parameter">row</db:code> is out of bounds, the widget is added at the end.</db:para>
</db:section>
<db:section xml:id="insertRow-3">
<db:title>void QFormLayout::insertRow(int <db:emphasis>row</db:emphasis>, QWidget *<db:emphasis>label</db:emphasis>, QLayout *<db:emphasis>field</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="insertRow-4">
<db:title>void QFormLayout::insertRow(int <db:emphasis>row</db:emphasis>, const QString &amp;<db:emphasis>labelText</db:emphasis>, QLayout *<db:emphasis>field</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This overload automatically creates a <db:link xlink:href="qlabel.xml">QLabel</db:link> behind the scenes with <db:code role="parameter">labelText</db:code> as its text.</db:para>
</db:section>
<db:section xml:id="insertRow-5">
<db:title>void QFormLayout::insertRow(int <db:emphasis>row</db:emphasis>, const QString &amp;<db:emphasis>labelText</db:emphasis>, QWidget *<db:emphasis>field</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This overload automatically creates a <db:link xlink:href="qlabel.xml">QLabel</db:link> behind the scenes with <db:code role="parameter">labelText</db:code> as its text. The <db:code role="parameter">field</db:code> is set as the new <db:link xlink:href="qlabel.xml">QLabel</db:link>'s <db:link xlink:href="qlabel.xml#setBuddy">buddy</db:link>.</db:para>
</db:section>
<db:section xml:id="invalidate">
<db:title>[override virtual] void QFormLayout::invalidate()</db:title>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#invalidate" role="function">QLayout::invalidate()</db:link>.</db:para>
</db:section>
<db:section xml:id="isRowVisible">
<db:title>[since 6.4] bool QFormLayout::isRowVisible(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:para>Returns true if some items in the row <db:code role="parameter">row</db:code> are visible, otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="isRowVisible-1">
<db:title>[since 6.4] bool QFormLayout::isRowVisible(QLayout *<db:emphasis>layout</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if some items in the row corresponding to <db:code role="parameter">layout</db:code> are visible, otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="isRowVisible-2">
<db:title>[since 6.4] bool QFormLayout::isRowVisible(QWidget *<db:emphasis>widget</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if some items in the row corresponding to <db:code role="parameter">widget</db:code> are visible, otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="itemAt">
<db:title>[override virtual] QLayoutItem *QFormLayout::itemAt(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#itemAt" role="function">QLayout::itemAt(int index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="itemAt-1">
<db:title>QLayoutItem *QFormLayout::itemAt(int <db:emphasis>row</db:emphasis>, QFormLayout::ItemRole <db:emphasis>role</db:emphasis>) const</db:title>
<db:para>Returns the layout item in the given <db:code role="parameter">row</db:code> with the specified <db:code role="parameter">role</db:code> (column). Returns <db:code>nullptr</db:code> if there is no such item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#itemAt">QLayout::itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#setItem">setItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelForField">
<db:title>QWidget *QFormLayout::labelForField(QWidget *<db:emphasis>field</db:emphasis>) const</db:title>
<db:para>Returns the label associated with the given <db:code role="parameter">field</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#itemAt">itemAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelForField-1">
<db:title>QWidget *QFormLayout::labelForField(QLayout *<db:emphasis>field</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="minimumSize">
<db:title>[override virtual] QSize QFormLayout::minimumSize() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#minimumSize" role="function">QLayout::minimumSize() const</db:link>.</db:para>
</db:section>
<db:section xml:id="removeRow">
<db:title>void QFormLayout::removeRow(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Deletes row <db:code role="parameter">row</db:code> from this form layout.</db:para>
<db:para><db:code role="parameter">row</db:code> must be non-negative and less than <db:link xlink:href="qformlayout.xml#rowCount">rowCount</db:link>().</db:para>
<db:para>After this call, <db:link xlink:href="qformlayout.xml#rowCount">rowCount</db:link>() is decremented by one. All widgets and nested layouts that occupied this row are deleted. That includes both the field widget(s) and the label, if any. All following rows are shifted up one row and the freed vertical space is redistributed amongst the remaining rows.</db:para>
<db:para>You can use this function to undo a previous <db:link xlink:href="qformlayout.xml#addRow">addRow</db:link>() or <db:link xlink:href="qformlayout.xml#insertRow">insertRow</db:link>():</db:para>
<db:programlisting language="cpp">QFormLayout *flay = ...;
QPointer&lt;QLineEdit&gt; le = new QLineEdit;
flay-&gt;insertRow(2, &quot;User:&quot;, le);
// later:
flay-&gt;removeRow(2); // le == nullptr at this point
</db:programlisting>
<db:para>If you want to remove the row from the layout without deleting the widgets, use <db:link xlink:href="qformlayout.xml#takeRow">takeRow</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#takeRow">takeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeRow-1">
<db:title>void QFormLayout::removeRow(QLayout *<db:emphasis>layout</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Deletes the row corresponding to <db:code role="parameter">layout</db:code> from this form layout.</db:para>
<db:para>After this call, <db:link xlink:href="qformlayout.xml#rowCount">rowCount</db:link>() is decremented by one. All widgets and nested layouts that occupied this row are deleted. That includes both the field widget(s) and the label, if any. All following rows are shifted up one row and the freed vertical space is redistributed amongst the remaining rows.</db:para>
<db:para>You can use this function to undo a previous <db:link xlink:href="qformlayout.xml#addRow">addRow</db:link>() or <db:link xlink:href="qformlayout.xml#insertRow">insertRow</db:link>():</db:para>
<db:programlisting language="cpp">QFormLayout *flay = ...;
QPointer&lt;QVBoxLayout&gt; vbl = new QVBoxLayout;
flay-&gt;insertRow(2, &quot;User:&quot;, vbl);
// later:
flay-&gt;removeRow(layout); // vbl == nullptr at this point
</db:programlisting>
<db:para>If you want to remove the row from the form layout without deleting the inserted layout, use <db:link xlink:href="qformlayout.xml#takeRow">takeRow</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#takeRow">takeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeRow-2">
<db:title>void QFormLayout::removeRow(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Deletes the row corresponding to <db:code role="parameter">widget</db:code> from this form layout.</db:para>
<db:para>After this call, <db:link xlink:href="qformlayout.xml#rowCount">rowCount</db:link>() is decremented by one. All widgets and nested layouts that occupied this row are deleted. That includes both the field widget(s) and the label, if any. All following rows are shifted up one row and the freed vertical space is redistributed amongst the remaining rows.</db:para>
<db:para>You can use this function to undo a previous <db:link xlink:href="qformlayout.xml#addRow">addRow</db:link>() or <db:link xlink:href="qformlayout.xml#insertRow">insertRow</db:link>():</db:para>
<db:programlisting language="cpp">QFormLayout *flay = ...;
QPointer&lt;QLineEdit&gt; le = new QLineEdit;
flay-&gt;insertRow(2, &quot;User:&quot;, le);
// later:
flay-&gt;removeRow(le); // le == nullptr at this point
</db:programlisting>
<db:para>If you want to remove the row from the layout without deleting the widgets, use <db:link xlink:href="qformlayout.xml#takeRow">takeRow</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#takeRow">takeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowCount">
<db:title>int QFormLayout::rowCount() const</db:title>
<db:para>Returns the number of rows in the form.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#count">QLayout::count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry">
<db:title>[override virtual] void QFormLayout::setGeometry(const QRect &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#setGeometry" role="function">QLayout::setGeometry(const QRect &amp;r)</db:link>.</db:para>
</db:section>
<db:section xml:id="setItem">
<db:title>void QFormLayout::setItem(int <db:emphasis>row</db:emphasis>, QFormLayout::ItemRole <db:emphasis>role</db:emphasis>, QLayoutItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Sets the item in the given <db:code role="parameter">row</db:code> for the given <db:code role="parameter">role</db:code> to <db:code role="parameter">item</db:code>, extending the layout with empty rows if necessary.</db:para>
<db:para>If the cell is already occupied, the <db:code role="parameter">item</db:code> is not inserted and an error message is sent to the console. The <db:code role="parameter">item</db:code> spans both columns.</db:para>
<db:warning>
<db:para>Do not use this function to add child layouts or child widget items. Use <db:link xlink:href="qformlayout.xml#setLayout">setLayout</db:link>() or <db:link xlink:href="qformlayout.xml#setWidget">setWidget</db:link>() instead.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#setLayout">setLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLayout">
<db:title>void QFormLayout::setLayout(int <db:emphasis>row</db:emphasis>, QFormLayout::ItemRole <db:emphasis>role</db:emphasis>, QLayout *<db:emphasis>layout</db:emphasis>)</db:title>
<db:para>Sets the sub-layout in the given <db:code role="parameter">row</db:code> for the given <db:code role="parameter">role</db:code> to <db:code role="parameter">layout</db:code>, extending the form layout with empty rows if necessary.</db:para>
<db:para>If the cell is already occupied, the <db:code role="parameter">layout</db:code> is not inserted and an error message is sent to the console.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> For most applications, <db:link xlink:href="qformlayout.xml#addRow">addRow</db:link>() or <db:link xlink:href="qformlayout.xml#insertRow">insertRow</db:link>() should be used instead of setLayout().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#setWidget">setWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowVisible">
<db:title>[since 6.4] void QFormLayout::setRowVisible(int <db:emphasis>row</db:emphasis>, bool <db:emphasis>on</db:emphasis>)</db:title>
<db:para>Shows the row <db:code role="parameter">row</db:code> if <db:code role="parameter">on</db:code> is true, otherwise hides the row.</db:para>
<db:para><db:code role="parameter">row</db:code> must be non-negative and less than <db:link xlink:href="qformlayout.xml#rowCount">rowCount</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#isRowVisible">isRowVisible</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#removeRow">removeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#takeRow">takeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowVisible-1">
<db:title>[since 6.4] void QFormLayout::setRowVisible(QLayout *<db:emphasis>layout</db:emphasis>, bool <db:emphasis>on</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Shows the row corresponding to <db:code role="parameter">layout</db:code> if <db:code role="parameter">on</db:code> is true, otherwise hides the row.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#removeRow">removeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#takeRow">takeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowVisible-2">
<db:title>[since 6.4] void QFormLayout::setRowVisible(QWidget *<db:emphasis>widget</db:emphasis>, bool <db:emphasis>on</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Shows the row corresponding to <db:code role="parameter">widget</db:code> if <db:code role="parameter">on</db:code> is true, otherwise hides the row.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#removeRow">removeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#takeRow">takeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSpacing">
<db:title>[override virtual] void QFormLayout::setSpacing(int <db:emphasis>spacing</db:emphasis>)</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qlayout.xml#spacing-prop" role="property">QLayout::spacing</db:link>.</db:para>
<db:para>This function sets both the vertical and horizontal spacing to <db:code role="parameter">spacing</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#spacing">spacing</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#verticalSpacing-prop">setVerticalSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#horizontalSpacing-prop">setHorizontalSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWidget">
<db:title>void QFormLayout::setWidget(int <db:emphasis>row</db:emphasis>, QFormLayout::ItemRole <db:emphasis>role</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets the widget in the given <db:code role="parameter">row</db:code> for the given <db:code role="parameter">role</db:code> to <db:code role="parameter">widget</db:code>, extending the layout with empty rows if necessary.</db:para>
<db:para>If the cell is already occupied, the <db:code role="parameter">widget</db:code> is not inserted and an error message is sent to the console.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> For most applications, <db:link xlink:href="qformlayout.xml#addRow">addRow</db:link>() or <db:link xlink:href="qformlayout.xml#insertRow">insertRow</db:link>() should be used instead of setWidget().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#setLayout">setLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QFormLayout::sizeHint() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#sizeHint" role="function">QLayoutItem::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="spacing">
<db:title>[override virtual] int QFormLayout::spacing() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qlayout.xml#spacing-prop" role="property">QLayout::spacing</db:link>.</db:para>
<db:para>If the vertical spacing is equal to the horizontal spacing, this function returns that value; otherwise it returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#setSpacing">setSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#verticalSpacing-prop">verticalSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qformlayout.xml#horizontalSpacing-prop">horizontalSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeAt">
<db:title>[override virtual] QLayoutItem *QFormLayout::takeAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#takeAt" role="function">QLayout::takeAt(int index)</db:link>.</db:para>
</db:section>
<db:section xml:id="takeRow">
<db:title>QFormLayout::TakeRowResult QFormLayout::takeRow(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Removes the specified <db:code role="parameter">row</db:code> from this form layout.</db:para>
<db:para><db:code role="parameter">row</db:code> must be non-negative and less than <db:link xlink:href="qformlayout.xml#rowCount">rowCount</db:link>().</db:para>
<db:note>
<db:para>This function doesn't delete anything.</db:para>
</db:note>
<db:para>After this call, <db:link xlink:href="qformlayout.xml#rowCount">rowCount</db:link>() is decremented by one. All following rows are shifted up one row and the freed vertical space is redistributed amongst the remaining rows.</db:para>
<db:para>You can use this function to undo a previous <db:link xlink:href="qformlayout.xml#addRow">addRow</db:link>() or <db:link xlink:href="qformlayout.xml#insertRow">insertRow</db:link>():</db:para>
<db:programlisting language="cpp">QFormLayout *flay = ...;
QPointer&lt;QLineEdit&gt; le = new QLineEdit;
flay-&gt;insertRow(2, &quot;User:&quot;, le);
// later:
QFormLayout::TakeRowResult result = flay-&gt;takeRow(2);
</db:programlisting>
<db:para>If you want to remove the row from the layout and delete the widgets, use <db:link xlink:href="qformlayout.xml#removeRow">removeRow</db:link>() instead.</db:para>
<db:para>Returns A structure containing both the widget and corresponding label layout items</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#removeRow">removeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeRow-1">
<db:title>QFormLayout::TakeRowResult QFormLayout::takeRow(QLayout *<db:emphasis>layout</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Removes the specified <db:code role="parameter">layout</db:code> from this form layout.</db:para>
<db:note>
<db:para>This function doesn't delete anything.</db:para>
</db:note>
<db:para>After this call, <db:link xlink:href="qformlayout.xml#rowCount">rowCount</db:link>() is decremented by one. All following rows are shifted up one row and the freed vertical space is redistributed amongst the remaining rows.</db:para>
<db:programlisting language="cpp">QFormLayout *flay = ...;
QPointer&lt;QVBoxLayout&gt; vbl = new QVBoxLayout;
flay-&gt;insertRow(2, &quot;User:&quot;, vbl);
// later:
QFormLayout::TakeRowResult result = flay-&gt;takeRow(widget);
</db:programlisting>
<db:para>If you want to remove the row from the form layout and delete the inserted layout, use <db:link xlink:href="qformlayout.xml#removeRow">removeRow</db:link>() instead.</db:para>
<db:para>Returns A structure containing both the widget and corresponding label layout items</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#removeRow">removeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeRow-2">
<db:title>QFormLayout::TakeRowResult QFormLayout::takeRow(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Removes the specified <db:code role="parameter">widget</db:code> from this form layout.</db:para>
<db:note>
<db:para>This function doesn't delete anything.</db:para>
</db:note>
<db:para>After this call, <db:link xlink:href="qformlayout.xml#rowCount">rowCount</db:link>() is decremented by one. All following rows are shifted up one row and the freed vertical space is redistributed amongst the remaining rows.</db:para>
<db:programlisting language="cpp">QFormLayout *flay = ...;
QPointer&lt;QLineEdit&gt; le = new QLineEdit;
flay-&gt;insertRow(2, &quot;User:&quot;, le);
// later:
QFormLayout::TakeRowResult result = flay-&gt;takeRow(widget);
</db:programlisting>
<db:para>If you want to remove the row from the layout and delete the widgets, use <db:link xlink:href="qformlayout.xml#removeRow">removeRow</db:link>() instead.</db:para>
<db:para>Returns A structure containing both the widget and corresponding label layout items</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qformlayout.xml#removeRow">removeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
