<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusAbstractAdaptor Class</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt D-Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbusabstractadaptor.xml">QDBusAbstractAdaptor</db:link> class is the base class of D-Bus adaptor classes.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusAbstractAdaptor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS DBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::DBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qdbusabstractadaptor.xml">QDBusAbstractAdaptor</db:link> class is the starting point for all objects intending to provide interfaces to the external world using D-Bus. This is accomplished by attaching a one or more classes derived from <db:link xlink:href="qdbusabstractadaptor.xml">QDBusAbstractAdaptor</db:link> to a normal <db:link xlink:href="qobject.xml">QObject</db:link> and then registering that <db:link xlink:href="qobject.xml">QObject</db:link> with <db:link xlink:href="qdbusconnection.xml#registerObject">QDBusConnection::registerObject</db:link>. <db:link xlink:href="qdbusabstractadaptor.xml">QDBusAbstractAdaptor</db:link> objects are intended to be light-weight wrappers, mostly just relaying calls into the real object (its parent) and the signals from it.</db:para>
<db:para>Each <db:link xlink:href="qdbusabstractadaptor.xml">QDBusAbstractAdaptor</db:link>-derived class should define the D-Bus interface it is implementing using the <db:link xlink:href="qobject.xml#Q_CLASSINFO">Q_CLASSINFO</db:link> macro in the class definition. Note that only one interface can be exposed in this way.</db:para>
<db:para><db:link xlink:href="qdbusabstractadaptor.xml">QDBusAbstractAdaptor</db:link> uses the standard <db:link xlink:href="qobject.xml">QObject</db:link> mechanism of signals, slots and properties to determine what signals, methods and properties to export to the bus. Any signal emitted by <db:link xlink:href="qdbusabstractadaptor.xml">QDBusAbstractAdaptor</db:link>-derived classes will be automatically be relayed through any D-Bus connections the object is registered on.</db:para>
<db:para>Classes derived from <db:link xlink:href="qdbusabstractadaptor.xml">QDBusAbstractAdaptor</db:link> must be created on the heap using the <db:code role="parameter">new</db:code> operator and must not be deleted by the user (they will be deleted automatically when the object they are connected to is also deleted).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="usingadaptors.xml">Using adaptors</db:link></db:member>
<db:member><db:link xlink:href="qdbusconnection.xml">QDBusConnection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDBusAbstractAdaptor">
<db:title>[explicit protected] QDBusAbstractAdaptor::QDBusAbstractAdaptor(QObject *<db:emphasis>obj</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qdbusabstractadaptor.xml">QDBusAbstractAdaptor</db:link> with <db:code role="parameter">obj</db:code> as the parent object.</db:para>
</db:section>
<db:section xml:id="dtor.QDBusAbstractAdaptor">
<db:title>[virtual noexcept] QDBusAbstractAdaptor::~QDBusAbstractAdaptor()</db:title>
<db:para>Destroys the adaptor.</db:para>
<db:warning>
<db:para>Adaptors are destroyed automatically when the real object they refer to is destroyed. Do not delete the adaptors yourself.</db:para>
</db:warning>
</db:section>
<db:section xml:id="autoRelaySignals">
<db:title>[protected] bool QDBusAbstractAdaptor::autoRelaySignals() const</db:title>
<db:para>Returns <db:code>true</db:code> if automatic signal relaying from the real object (see object()) is enabled, otherwiser returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusabstractadaptor.xml#setAutoRelaySignals">setAutoRelaySignals</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAutoRelaySignals">
<db:title>[protected] void QDBusAbstractAdaptor::setAutoRelaySignals(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>Toggles automatic signal relaying from the real object (see object()).</db:para>
<db:para>Automatic signal relaying consists of signal-to-signal connection of the signals on the parent that have the exact same method signature in both classes.</db:para>
<db:para>If <db:code role="parameter">enable</db:code> is set to true, connect the signals; if set to false, disconnect all signals.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusabstractadaptor.xml#autoRelaySignals">autoRelaySignals</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_NOREPLY">
<db:title>Q_NOREPLY</db:title>
<db:para>The Q_NOREPLY macro can be used to mark a method to be called and not wait for it to finish processing before returning from <db:link xlink:href="qdbusabstractinterface.xml#call">QDBusInterface::call</db:link>(). The called method cannot return any output arguments and, if it does, any such arguments will be discarded.</db:para>
<db:para>You can use this macro in your own adaptors by placing it before your method's return value (which must be &quot;void&quot;) in the class declaration, as shown in the example:</db:para>
<db:programlisting language="cpp">Q_NOREPLY void myMethod();
</db:programlisting>
<db:para>Its presence in the method implementation (outside the class declaration) is optional.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="usingadaptors.xml">Using Qt D-Bus Adaptors</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
