<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>State QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Defines configurations of objects and properties.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.11</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>State is part of <db:simplelist><db:member>qtquick-states</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:emphasis>state</db:emphasis> is a set of batched changes from the default configuration.</db:para>
<db:para>All items have a default state that defines the default configuration of objects and property values. New states can be defined by adding State items to the <db:link xlink:href="qml-qtquick-item.xml#states-prop">states</db:link> property to allow items to switch between different configurations. These configurations can, for example, be used to apply different sets of property values or execute different scripts.</db:para>
<db:para>The following example displays a single <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>. In the default state, the rectangle is colored black. In the &quot;clicked&quot; state, a <db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link> object changes the rectangle's color to red. Clicking within the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> toggles the rectangle's state between the default state and the &quot;clicked&quot; state, thus toggling the color of the rectangle between black and red.</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    id: myRect
    width: 100; height: 100
    color: &quot;black&quot;

    MouseArea {
        id: mouseArea
        anchors.fill: parent
        onClicked: myRect.state == 'clicked' ? myRect.state = &quot;&quot; : myRect.state = 'clicked';
    }

    states: [
        State {
            name: &quot;clicked&quot;
            PropertyChanges { target: myRect; color: &quot;red&quot; }
        }
    ]
}
</db:programlisting>
<db:para>Notice the default state is referred to using an empty string (&quot;&quot;).</db:para>
<db:para>States are commonly used together with <db:link xlink:href="qtquick-statesanimations-animations.xml">Transitions</db:link> to provide animations when state changes occur.</db:para>
<db:note>
<db:para>Setting the state of an object from within another state of the same object is not allowed.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-animation-example.xml#states">States example</db:link></db:member>
<db:member><db:link xlink:href="qtquick-statesanimations-states.xml">Qt Quick States</db:link></db:member>
<db:member><db:link xlink:href="qtquick-statesanimations-animations.xml">Transitions</db:link></db:member>
<db:member><db:link xlink:href="qtqml-index.xml">Qt QML</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="changes-prop">
<db:title>[read-only] changes : list&lt;Change&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;Change&gt;</db:type>
<db:varname>changes</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the changes to apply for this state</db:para>
<db:para>By default these changes are applied against the default state. If the state extends another state, then the changes are applied against the state being extended.</db:para>
</db:section>
<db:section xml:id="extend-prop">
<db:title>extend : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>extend</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the state that this state extends.</db:para>
<db:para>When a state extends another state, it inherits all the changes of that state.</db:para>
<db:para>The state being extended is treated as the base state in regards to the changes specified by the extending state.</db:para>
</db:section>
<db:section xml:id="name-prop">
<db:title>name : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>name</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the name of the state.</db:para>
<db:para>Each state should have a unique name within its item.</db:para>
</db:section>
<db:section xml:id="when-prop">
<db:title>when : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>when</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds when the state should be applied.</db:para>
<db:para>This should be set to an expression that evaluates to true when you want the state to be applied. For example, the following <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> changes in and out of the &quot;hidden&quot; state when the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is pressed:</db:para>
<db:programlisting language="qml">Rectangle {
    id: myRect
    width: 100; height: 100
    color: &quot;red&quot;

    MouseArea { id: mouseArea; anchors.fill: parent }

    states: State {
        name: &quot;hidden&quot;; when: mouseArea.pressed
        PropertyChanges { target: myRect; opacity: 0 }
    }
}
</db:programlisting>
<db:para>If multiple states in a group have when clauses that evaluate to true at the same time, the first matching state will be applied. For example, in the following snippet state1 will always be selected rather than state2 when sharedCondition becomes true.</db:para>
<db:programlisting language="qml">Item {
    states: [
        State { name: &quot;state1&quot;; when: sharedCondition },
        State { name: &quot;state2&quot;; when: sharedCondition }
    ]
    // ...
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
