<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QAxScript Class</db:title>
<db:productname>ActiveQt</db:productname>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaxscript.xml">QAxScript</db:link> class provides a wrapper around script code.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAxScript</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Every instance of the <db:link xlink:href="qaxscript.xml">QAxScript</db:link> class represents a piece of scripting code in a particular scripting language. The code is loaded into the script engine using <db:link xlink:href="qaxscript.xml#load">load</db:link>(). Functions declared in the code can be called using <db:link xlink:href="qaxscript.xml#call">call</db:link>().</db:para>
<db:para>The script provides <db:link xlink:href="qaxscript.xml#scriptEngine">scriptEngine</db:link>() provides feedback to the application through signals. The most important signal is the <db:link xlink:href="qaxscript.xml#error">error</db:link>() signal. Direct access to the <db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link> is provided through the <db:link xlink:href="qaxscript.xml#scriptEngine">scriptEngine</db:link>() function.</db:para>
<db:warning>
<db:para>This class is not available with the bcc5.5 and MingW compilers.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link></db:member>
<db:member><db:link xlink:href="qaxscriptmanager.xml">QAxScriptManager</db:link></db:member>
<db:member><db:link xlink:href="qaxbase.xml">QAxBase</db:link></db:member>
<db:member><db:link xlink:href="activeqt-index.xml#activeqt-framework">ActiveQt Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FunctionFlags-enum">
<db:title>enum QAxScript::FunctionFlags</db:title>
<db:para>This FunctionFlags enum describes formatting for function introspection.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaxscript.xml">QAxScript</db:link></db:emphasis>::FunctionNames</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Only function names are returned.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaxscript.xml">QAxScript</db:link></db:emphasis>::FunctionSignatures</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Returns the functions with signatures.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAxScript">
<db:title>QAxScript::QAxScript(const QString &amp;<db:emphasis>name</db:emphasis>, QAxScriptManager *<db:emphasis>manager</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qaxscript.xml">QAxScript</db:link> object called <db:code role="parameter">name</db:code> and registers it with the <db:link xlink:href="qaxscriptmanager.xml">QAxScriptManager</db:link> <db:code role="parameter">manager</db:code>. This is usually done by the <db:link xlink:href="qaxscriptmanager.xml">QAxScriptManager</db:link> class when <db:link xlink:href="qaxscriptmanager.xml#load">loading a script</db:link>.</db:para>
<db:para>A script should always have a name. A manager is necessary to allow the script code to reference objects in the application. The <db:code role="parameter">manager</db:code> takes ownership of the object.</db:para>
</db:section>
<db:section xml:id="dtor.QAxScript">
<db:title>[virtual noexcept] QAxScript::~QAxScript()</db:title>
<db:para>Destroys the object, releasing all allocated resources.</db:para>
</db:section>
<db:section xml:id="call">
<db:title>QVariant QAxScript::call(const QString &amp;<db:emphasis>function</db:emphasis>, const QVariant &amp;<db:emphasis>var1</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var2</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var3</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var4</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var5</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var6</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var7</db:emphasis> = QVariant(), const QVariant &amp;<db:emphasis>var8</db:emphasis> = QVariant())</db:title>
<db:para>Calls <db:code role="parameter">function</db:code>, passing the parameters <db:code role="parameter">var1</db:code>, <db:code role="parameter">var1</db:code>, <db:code role="parameter">var2</db:code>, <db:code role="parameter">var3</db:code>, <db:code role="parameter">var4</db:code>, <db:code role="parameter">var5</db:code>, <db:code role="parameter">var6</db:code>, <db:code role="parameter">var7</db:code> and <db:code role="parameter">var8</db:code> as arguments and returns the value returned by the function, or an invalid QVariant if the function does not return a value or when the function call failed.</db:para>
<db:para>See <db:link xlink:href="qaxscriptmanager.xml#call">QAxScriptManager::call</db:link>() for more information about how to call script functions.</db:para>
</db:section>
<db:section xml:id="call-1">
<db:title>QVariant QAxScript::call(const QString &amp;<db:emphasis>function</db:emphasis>, QList&lt;QVariant&gt; &amp;<db:emphasis>arguments</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Calls <db:code role="parameter">function</db:code> passing <db:code role="parameter">arguments</db:code> as parameters, and returns the result. Returns when the script's execution has finished.</db:para>
<db:para>See <db:link xlink:href="qaxscriptmanager.xml#call">QAxScriptManager::call</db:link>() for more information about how to call script functions.</db:para>
</db:section>
<db:section xml:id="entered">
<db:title>void QAxScript::entered()</db:title>
<db:para>This signal is emitted when a script engine has started executing code.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>void QAxScript::error(int <db:emphasis>code</db:emphasis>, const QString &amp;<db:emphasis>description</db:emphasis>, int <db:emphasis>sourcePosition</db:emphasis>, const QString &amp;<db:emphasis>sourceText</db:emphasis>)</db:title>
<db:para>This signal is emitted when an execution error occurred while running a script.</db:para>
<db:para><db:code role="parameter">code</db:code>, <db:code role="parameter">description</db:code>, <db:code role="parameter">sourcePosition</db:code> and <db:code role="parameter">sourceText</db:code> contain information about the execution error.</db:para>
</db:section>
<db:section xml:id="finished">
<db:title>void QAxScript::finished()</db:title>
<db:para>This signal is emitted when a script engine has finished executing code.</db:para>
</db:section>
<db:section xml:id="finished-1">
<db:title>void QAxScript::finished(const QVariant &amp;<db:emphasis>result</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para><db:code role="parameter">result</db:code> contains the script's result. This will be an invalid QVariant if the script has no return value.</db:para>
</db:section>
<db:section xml:id="finished-2">
<db:title>void QAxScript::finished(int <db:emphasis>code</db:emphasis>, const QString &amp;<db:emphasis>source</db:emphasis>, const QString &amp;<db:emphasis>description</db:emphasis>, const QString &amp;<db:emphasis>help</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para><db:code role="parameter">code</db:code>, <db:code role="parameter">source</db:code>, <db:code role="parameter">description</db:code> and <db:code role="parameter">help</db:code> contain exception information when the script terminated.</db:para>
</db:section>
<db:section xml:id="functions">
<db:title>QStringList QAxScript::functions(QAxScript::FunctionFlags <db:emphasis>flags</db:emphasis> = FunctionNames) const</db:title>
<db:para>Returns a list of all the functions in this script if the respective script engine supports introspection; otherwise returns an empty list. The functions are either provided with full prototypes or only as names, depending on the value of <db:code role="parameter">flags</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxscriptengine.xml#hasIntrospection">QAxScriptEngine::hasIntrospection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load">
<db:title>bool QAxScript::load(const QString &amp;<db:emphasis>code</db:emphasis>, const QString &amp;<db:emphasis>language</db:emphasis> = QString())</db:title>
<db:para>Loads the script source <db:code role="parameter">code</db:code> written in language <db:code role="parameter">language</db:code> into the script engine. Returns true if <db:code role="parameter">code</db:code> was successfully entered into the script engine; otherwise returns false.</db:para>
<db:para>If <db:code role="parameter">language</db:code> is empty (the default) it will be determined heuristically. If <db:code role="parameter">code</db:code> contains the string <db:code>End Sub</db:code> it will be interpreted as VBScript, otherwise as JScript. Additional scripting languages can be registered using QAxScript::registerEngine().</db:para>
<db:para>This function can only be called once for each <db:link xlink:href="qaxscript.xml">QAxScript</db:link> object, which is done automatically when using <db:link xlink:href="qaxscriptmanager.xml#load">QAxScriptManager::load</db:link>().</db:para>
</db:section>
<db:section xml:id="scriptCode">
<db:title>QString QAxScript::scriptCode() const</db:title>
<db:para>Returns the script's code, or the null-string if no code has been loaded yet.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxscript.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scriptEngine">
<db:title>QAxScriptEngine *QAxScript::scriptEngine() const</db:title>
<db:para>Returns a pointer to the script engine.</db:para>
<db:para>You can use the object returned to connect signals to the script functions, or to access the script engine directly.</db:para>
</db:section>
<db:section xml:id="scriptName">
<db:title>QString QAxScript::scriptName() const</db:title>
<db:para>Returns the name of the script.</db:para>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QAxScript::stateChanged(int <db:emphasis>state</db:emphasis>)</db:title>
<db:para>This signal is emitted when a script engine changes state. <db:code role="parameter">state</db:code> can be any value in the QAxScriptEngineState enumeration.</db:para>
</db:section>
</db:section>
</db:article>
