<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebSocket Class</db:title>
<db:productname>QtWebSockets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebSockets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Implements a TCP socket that talks the <db:link xlink:href="qml-qtwebsockets-websocket.xml">WebSocket</db:link> protocol.</db:para>
<db:para>This class was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebSocket</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += websockets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>WebSockets is a web technology providing full-duplex communications channels over a single TCP connection. The <db:link xlink:href="qml-qtwebsockets-websocket.xml">WebSocket</db:link> protocol was standardized by the IETF as <db:link xlink:href="http://tools.ietf.org/html/rfc6455">RFC 6455</db:link> in 2011. <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> can both be used in a client application and server application.</db:para>
<db:para>This class was modeled after <db:link xlink:href="qabstractsocket.xml">QAbstractSocket</db:link>.</db:para>
<db:para><db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> currently does not support <db:link xlink:href="http://tools.ietf.org/html/rfc6455#page-39">WebSocket Extensions</db:link> and <db:link xlink:href="http://tools.ietf.org/html/rfc6455#page-12">WebSocket Subprotocols</db:link>.</db:para>
<db:para><db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> only supports version 13 of the <db:link xlink:href="qml-qtwebsockets-websocket.xml">WebSocket</db:link> protocol, as outlined in <db:link xlink:href="http://tools.ietf.org/html/rfc6455">RFC 6455</db:link>.</db:para>
<db:note>
<db:para>Some proxies do not understand certain HTTP headers used during a <db:link xlink:href="qml-qtwebsockets-websocket.xml">WebSocket</db:link> handshake. In that case, non-secure <db:link xlink:href="qml-qtwebsockets-websocket.xml">WebSocket</db:link> connections fail. The best way to mitigate against this problem is to use <db:link xlink:href="qml-qtwebsockets-websocket.xml">WebSocket</db:link> over a secure connection.</db:para>
</db:note>
<db:warning>
<db:para>To generate masks, this implementation of WebSockets uses the cryptographically insecure <db:link xlink:href="qtglobal.xml#qrand">qrand</db:link>() function. For more information about the importance of good masking, see <db:link xlink:href="http://w2spconf.com/2011/papers/websocket.pdf">&quot;Talking to Yourself for Fun and Profit&quot; by Lin-Shung Huang et al</db:link>. The best measure against attacks mentioned in the document above, is to use <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> over a secure connection (<db:emphasis>wss://</db:emphasis>). In general, always be careful to not have 3rd party script access to a <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> in your application.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractsocket.xml">QAbstractSocket</db:link></db:member>
<db:member><db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link></db:member>
<db:member><db:link xlink:href="echoclient.xml">QWebSocket client example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWebSocket">
<db:title>[explicit] QWebSocket::QWebSocket(const QString &amp;<db:emphasis>origin</db:emphasis> = QString(), QWebSocketProtocol::Version <db:emphasis>version</db:emphasis> = QWebSocketProtocol::VersionLatest, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Creates a new <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> with the given <db:code role="parameter">origin</db:code>, the <db:code role="parameter">version</db:code> of the protocol to use and <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The <db:code role="parameter">origin</db:code> of the client is as specified in <db:link xlink:href="http://tools.ietf.org/html/rfc6454">RFC 6454</db:link>. (The <db:code role="parameter">origin</db:code> is not required for non-web browser clients (see <db:link xlink:href="http://tools.ietf.org/html/rfc6455">RFC 6455</db:link>)). The <db:code role="parameter">origin</db:code> may not contain new line characters, otherwise the connection will be aborted immediately during the handshake phase.</db:para>
<db:note>
<db:para>Currently only V13 (<db:link xlink:href="http://tools.ietf.org/html/rfc6455">RFC 6455</db:link>) is supported</db:para>
</db:note>
</db:section>
<db:section xml:id="dtor.QWebSocket">
<db:title>[virtual noexcept] QWebSocket::~QWebSocket()</db:title>
<db:para>Destroys the <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link>. Closes the socket if it is still open, and releases any used resources.</db:para>
</db:section>
<db:section xml:id="abort">
<db:title>void QWebSocket::abort()</db:title>
<db:para>Aborts the current socket and resets the socket. Unlike <db:link xlink:href="qwebsocket.xml#close">close</db:link>(), this function immediately closes the socket, discarding any pending data in the write buffer.</db:para>
</db:section>
<db:section xml:id="aboutToClose">
<db:title>void QWebSocket::aboutToClose()</db:title>
<db:para>This signal is emitted when the socket is about to close. Connect this signal if you have operations that need to be performed before the socket closes (e.g., if you have data in a separate buffer that needs to be written to the device).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="binaryFrameReceived">
<db:title>void QWebSocket::binaryFrameReceived(const QByteArray &amp;<db:emphasis>frame</db:emphasis>, bool <db:emphasis>isLastFrame</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a binary frame is received. The <db:code role="parameter">frame</db:code> contains the data and <db:code role="parameter">isLastFrame</db:code> indicates whether this is the last frame of the complete message.</db:para>
<db:para>This signal can be used to process large messages frame by frame, instead of waiting for the complete message to arrive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#textFrameReceived">textFrameReceived</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="binaryMessageReceived">
<db:title>void QWebSocket::binaryMessageReceived(const QByteArray &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a binary message is received. The <db:code role="parameter">message</db:code> contains the received bytes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#textMessageReceived">textMessageReceived</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesWritten">
<db:title>void QWebSocket::bytesWritten(qint64 <db:emphasis>bytes</db:emphasis>)</db:title>
<db:para>This signal is emitted every time a payload of data has been written to the socket. The <db:code role="parameter">bytes</db:code> argument is set to the number of bytes that were written in this payload.</db:para>
<db:note>
<db:para>This signal has the same meaning both for secure and non-secure WebSockets. As opposed to <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link>, bytesWritten() is only emitted when encrypted data is effectively written (see <db:link xlink:href="qsslsocket.xml#encryptedBytesWritten">QSslSocket::encryptedBytesWritten</db:link>()).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="close">
<db:title>void QWebSocket::close(QWebSocketProtocol::CloseCode <db:emphasis>closeCode</db:emphasis> = QWebSocketProtocol::CloseCodeNormal, const QString &amp;<db:emphasis>reason</db:emphasis> = QString())</db:title>
<db:para>Gracefully closes the socket with the given <db:code role="parameter">closeCode</db:code> and <db:code role="parameter">reason</db:code>.</db:para>
<db:para>Any data in the write buffer is flushed before the socket is closed. The <db:code role="parameter">closeCode</db:code> is a <db:link xlink:href="qwebsocketprotocol.xml#CloseCode-enum">QWebSocketProtocol::CloseCode</db:link> indicating the reason to close, and <db:code role="parameter">reason</db:code> describes the reason of the closure more in detail</db:para>
</db:section>
<db:section xml:id="closeCode">
<db:title>QWebSocketProtocol::CloseCode QWebSocket::closeCode() const</db:title>
<db:para>Returns the code indicating why the socket was closed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocketprotocol.xml#CloseCode-enum">QWebSocketProtocol::CloseCode</db:link></db:member>
<db:member><db:link xlink:href="qwebsocket.xml#closeReason">closeReason</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closeReason">
<db:title>QString QWebSocket::closeReason() const</db:title>
<db:para>Returns the reason why the socket was closed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#closeCode">closeCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connected">
<db:title>void QWebSocket::connected()</db:title>
<db:para>Emitted when a connection is successfully established. A connection is successfully established when the socket is connected and the handshake was successful.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qwebsocket.xml#disconnected">disconnected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnected">
<db:title>void QWebSocket::disconnected()</db:title>
<db:para>Emitted when the socket is disconnected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#close">close</db:link>()</db:member>
<db:member><db:link xlink:href="qwebsocket.xml#connected">connected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QAbstractSocket::SocketError QWebSocket::error() const</db:title>
<db:para>Returns the type of error that last occurred</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error-1">
<db:title>void QWebSocket::error(QAbstractSocket::SocketError <db:emphasis>error</db:emphasis>)</db:title>
<db:para>This signal is emitted after an error occurred. The <db:code role="parameter">error</db:code> parameter describes the type of error that occurred.</db:para>
<db:para><db:link xlink:href="qabstractsocket.xml#SocketError-enum">QAbstractSocket::SocketError</db:link> is not a registered metatype, so for queued connections, you will have to register it with <db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>() and qRegisterMetaType().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qwebsocket.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QWebSocket::errorString() const</db:title>
<db:para>Returns a human-readable description of the last error that occurred</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flush">
<db:title>bool QWebSocket::flush()</db:title>
<db:para>This function writes as much as possible from the internal write buffer to the underlying network socket, without blocking. If any data was written, this function returns true; otherwise false is returned. Call this function if you need <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> to start sending buffered data immediately. The number of bytes successfully written depends on the operating system. In most cases, you do not need to call this function, because <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> will start sending data automatically once control goes back to the event loop.</db:para>
</db:section>
<db:section xml:id="ignoreSslErrors">
<db:title>void QWebSocket::ignoreSslErrors()</db:title>
<db:para>This slot tells <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> to ignore errors during <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link>'s handshake phase and continue connecting. If you want to continue with the connection even if errors occur during the handshake phase, then you must call this slot, either from a slot connected to <db:link xlink:href="qwebsocket.xml#sslErrors">sslErrors</db:link>(), or before the handshake phase. If you don't call this slot, either in response to errors or before the handshake, the connection will be dropped after the <db:link xlink:href="qwebsocket.xml#sslErrors">sslErrors</db:link>() signal has been emitted.</db:para>
<db:warning>
<db:para>Be sure to always let the user inspect the errors reported by the <db:link xlink:href="qwebsocket.xml#sslErrors">sslErrors</db:link>() signal, and only call this method upon confirmation from the user that proceeding is ok. If there are unexpected errors, the connection should be aborted. Calling this method without inspecting the actual errors will most likely pose a security risk for your application. Use it with great care!</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#sslErrors">sslErrors</db:link>()</db:member>
<db:member><db:link xlink:href="qsslsocket.xml#ignoreSslErrors">QSslSocket::ignoreSslErrors</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#ignoreSslErrors">QNetworkReply::ignoreSslErrors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ignoreSslErrors-1">
<db:title>void QWebSocket::ignoreSslErrors(const QList&lt;QSslError&gt; &amp;<db:emphasis>errors</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This method tells <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> to ignore the errors given in <db:code role="parameter">errors</db:code>.</db:para>
<db:para>Note that you can set the expected certificate in the SSL error: If, for instance, you want to connect to a server that uses a self-signed certificate, consider the following snippet:</db:para>
<db:programlisting language="cpp">QList&lt;QSslCertificate&gt; cert = QSslCertificate::fromPath(QLatin1String(&quot;server-certificate.pem&quot;));
QSslError error(QSslError::SelfSignedCertificate, cert.at(0));
QList&lt;QSslError&gt; expectedSslErrors;
expectedSslErrors.append(error);

QWebSocket socket;
socket.ignoreSslErrors(expectedSslErrors);
socket.open(QUrl(QStringLiteral(&quot;wss://myserver.at.home&quot;)));
</db:programlisting>
<db:para>Multiple calls to this function will replace the list of errors that were passed in previous calls. You can clear the list of errors you want to ignore by calling this function with an empty list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#sslErrors">sslErrors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QWebSocket::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if the socket is ready for reading and writing; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="localAddress">
<db:title>QHostAddress QWebSocket::localAddress() const</db:title>
<db:para>Returns the local address</db:para>
</db:section>
<db:section xml:id="localPort">
<db:title>quint16 QWebSocket::localPort() const</db:title>
<db:para>Returns the local port</db:para>
</db:section>
<db:section xml:id="maskGenerator">
<db:title>const QMaskGenerator *QWebSocket::maskGenerator() const</db:title>
<db:para>Returns the mask generator that is currently used by this <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#setMaskGenerator">setMaskGenerator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>[since 5.6] void QWebSocket::open(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:para>Opens a <db:link xlink:href="qml-qtwebsockets-websocket.xml">WebSocket</db:link> connection using the given <db:code role="parameter">request</db:code>.</db:para>
<db:para>The <db:code role="parameter">request</db:code> url will be used to open the <db:link xlink:href="qml-qtwebsockets-websocket.xml">WebSocket</db:link> connection. Headers present in the request will be sent to the server in the upgrade request, together with the ones needed for the websocket handshake.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="open-1">
<db:title>void QWebSocket::open(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:para>Opens a <db:link xlink:href="qml-qtwebsockets-websocket.xml">WebSocket</db:link> connection using the given <db:code role="parameter">url</db:code>.</db:para>
<db:para>If the url contains newline characters (\r\n), then the error signal will be emitted with <db:link xlink:href="qabstractsocket.xml#SocketError-enum">QAbstractSocket::ConnectionRefusedError</db:link> as error type.</db:para>
</db:section>
<db:section xml:id="origin">
<db:title>QString QWebSocket::origin() const</db:title>
<db:para>Returns the current origin.</db:para>
</db:section>
<db:section xml:id="pauseMode">
<db:title>QAbstractSocket::PauseModes QWebSocket::pauseMode() const</db:title>
<db:para>Returns the pause mode of this socket</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#setPauseMode">setPauseMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="peerAddress">
<db:title>QHostAddress QWebSocket::peerAddress() const</db:title>
<db:para>Returns the peer address</db:para>
</db:section>
<db:section xml:id="peerName">
<db:title>QString QWebSocket::peerName() const</db:title>
<db:para>Returns the peerName</db:para>
</db:section>
<db:section xml:id="peerPort">
<db:title>quint16 QWebSocket::peerPort() const</db:title>
<db:para>Returns the peerport</db:para>
</db:section>
<db:section xml:id="ping">
<db:title>void QWebSocket::ping(const QByteArray &amp;<db:emphasis>payload</db:emphasis> = QByteArray())</db:title>
<db:para>Pings the server to indicate that the connection is still alive. Additional <db:code role="parameter">payload</db:code> can be sent along the ping message.</db:para>
<db:para>The size of the <db:code role="parameter">payload</db:code> cannot be bigger than 125. If it is larger, the <db:code role="parameter">payload</db:code> is clipped to 125 bytes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#pong">pong</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pong">
<db:title>void QWebSocket::pong(quint64 <db:emphasis>elapsedTime</db:emphasis>, const QByteArray &amp;<db:emphasis>payload</db:emphasis>)</db:title>
<db:para>Emitted when a pong message is received in reply to a previous ping. <db:code role="parameter">elapsedTime</db:code> contains the roundtrip time in milliseconds and <db:code role="parameter">payload</db:code> contains an optional payload that was sent with the ping.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#ping">ping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="proxy">
<db:title>QNetworkProxy QWebSocket::proxy() const</db:title>
<db:para>Returns the currently configured proxy</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#setProxy">setProxy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="proxyAuthenticationRequired">
<db:title>void QWebSocket::proxyAuthenticationRequired(const QNetworkProxy &amp;<db:emphasis>proxy</db:emphasis>, QAuthenticator *<db:emphasis>authenticator</db:emphasis>)</db:title>
<db:para>This signal can be emitted when a <db:code role="parameter">proxy</db:code> that requires authentication is used. The <db:code role="parameter">authenticator</db:code> object can then be filled in with the required details to allow authentication and continue the connection.</db:para>
<db:note>
<db:para>It is not possible to use a QueuedConnection to connect to this signal, as the connection will fail if the authenticator has not been filled in with new information when the signal returns.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml">QAuthenticator</db:link></db:member>
<db:member><db:link xlink:href="qnetworkproxy.xml">QNetworkProxy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readBufferSize">
<db:title>qint64 QWebSocket::readBufferSize() const</db:title>
<db:para>Returns the size in bytes of the readbuffer that is used by the socket.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#setReadBufferSize">setReadBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readChannelFinished">
<db:title>void QWebSocket::readChannelFinished()</db:title>
<db:para>This signal is emitted when the input (reading) stream is closed in this device. It is emitted as soon as the closing is detected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="request">
<db:title>[since 5.6] QNetworkRequest QWebSocket::request() const</db:title>
<db:para>Returns the request that was or will be used to open this socket.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="requestUrl">
<db:title>QUrl QWebSocket::requestUrl() const</db:title>
<db:para>Returns the url the socket is connected to or will connect to.</db:para>
</db:section>
<db:section xml:id="resourceName">
<db:title>QString QWebSocket::resourceName() const</db:title>
<db:para>Returns the name of the resource currently accessed.</db:para>
</db:section>
<db:section xml:id="resume">
<db:title>void QWebSocket::resume()</db:title>
<db:para>Continues data transfer on the socket. This method should only be used after the socket has been set to pause upon notifications and a notification has been received. The only notification currently supported is <db:link xlink:href="qwebsocket.xml#sslErrors">sslErrors</db:link>(). Calling this method if the socket is not paused results in undefined behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#pauseMode">pauseMode</db:link>()</db:member>
<db:member><db:link xlink:href="qwebsocket.xml#setPauseMode">setPauseMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sendBinaryMessage">
<db:title>qint64 QWebSocket::sendBinaryMessage(const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Sends the given <db:code role="parameter">data</db:code> over the socket as a binary message and returns the number of bytes actually sent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#sendTextMessage">sendTextMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sendTextMessage">
<db:title>qint64 QWebSocket::sendTextMessage(const QString &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:para>Sends the given <db:code role="parameter">message</db:code> over the socket as a text message and returns the number of bytes actually sent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#sendBinaryMessage">sendBinaryMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaskGenerator">
<db:title>void QWebSocket::setMaskGenerator(const QMaskGenerator *<db:emphasis>maskGenerator</db:emphasis>)</db:title>
<db:para>Sets the generator to use for creating masks to <db:code role="parameter">maskGenerator</db:code>. The default <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> generator can be reset by supplying a <db:emphasis>Q_NULLPTR</db:emphasis>. The mask generator can be changed at any time, even while the connection is open.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#maskGenerator">maskGenerator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPauseMode">
<db:title>void QWebSocket::setPauseMode(QAbstractSocket::PauseModes <db:emphasis>pauseMode</db:emphasis>)</db:title>
<db:para>Controls whether to pause upon receiving a notification. The <db:code role="parameter">pauseMode</db:code> parameter specifies the conditions in which the socket should be paused.</db:para>
<db:para>The only notification currently supported is <db:link xlink:href="qwebsocket.xml#sslErrors">sslErrors</db:link>(). If set to PauseOnSslErrors, data transfer on the socket will be paused and needs to be enabled explicitly again by calling <db:link xlink:href="qwebsocket.xml#resume">resume</db:link>(). By default, this option is set to PauseNever. This option must be called before connecting to the server, otherwise it will result in undefined behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#pauseMode">pauseMode</db:link>()</db:member>
<db:member><db:link xlink:href="qwebsocket.xml#resume">resume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProxy">
<db:title>void QWebSocket::setProxy(const QNetworkProxy &amp;<db:emphasis>networkProxy</db:emphasis>)</db:title>
<db:para>Sets the proxy to <db:code role="parameter">networkProxy</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#proxy">proxy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setReadBufferSize">
<db:title>void QWebSocket::setReadBufferSize(qint64 <db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the size of <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link>'s internal read buffer to be <db:code role="parameter">size</db:code> bytes.</db:para>
<db:para>If the buffer size is limited to a certain size, <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> won't buffer more than this size of data. Exceptionally, a buffer size of 0 means that the read buffer is unlimited and all incoming data is buffered. This is the default. This option is useful if you only read the data at certain points in time (for example, in a real-time streaming application) or if you want to protect your socket against receiving too much data, which may eventually cause your application to run out of memory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#readBufferSize">readBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSslConfiguration">
<db:title>void QWebSocket::setSslConfiguration(const QSslConfiguration &amp;<db:emphasis>sslConfiguration</db:emphasis>)</db:title>
<db:para>Sets the socket's SSL configuration to be the contents of <db:code role="parameter">sslConfiguration</db:code>.</db:para>
<db:para>This function sets the local certificate, the ciphers, the private key and the CA certificates to those stored in <db:code role="parameter">sslConfiguration</db:code>. It is not possible to set the SSL-state related fields.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#sslConfiguration">sslConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sslConfiguration">
<db:title>QSslConfiguration QWebSocket::sslConfiguration() const</db:title>
<db:para>Returns the socket's SSL configuration state. The default SSL configuration of a socket is to use the default ciphers, default CA certificates, no local private key or certificate. The SSL configuration also contains fields that can change with time without notice.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#setSslConfiguration">setSslConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sslErrors">
<db:title>void QWebSocket::sslErrors(const QList&lt;QSslError&gt; &amp;<db:emphasis>errors</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> emits this signal after the SSL handshake to indicate that one or more errors have occurred while establishing the identity of the peer. The errors are usually an indication that <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> is unable to securely identify the peer. Unless any action is taken, the connection will be dropped after this signal has been emitted. If you want to continue connecting despite the errors that have occurred, you must call <db:link xlink:href="qwebsocket.xml#ignoreSslErrors">QWebSocket::ignoreSslErrors</db:link>() from inside a slot connected to this signal. If you need to access the error list at a later point, you can call sslErrors() (without arguments).</db:para>
<db:para><db:code role="parameter">errors</db:code> contains one or more errors that prevent <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> from verifying the identity of the peer.</db:para>
<db:note>
<db:para>You cannot use <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::QueuedConnection</db:link> when connecting to this signal, or calling <db:link xlink:href="qwebsocket.xml#ignoreSslErrors">QWebSocket::ignoreSslErrors</db:link>() will have no effect.</db:para>
</db:note>
</db:section>
<db:section xml:id="state">
<db:title>QAbstractSocket::SocketState QWebSocket::state() const</db:title>
<db:para>Returns the current state of the socket.</db:para>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QWebSocket::stateChanged(QAbstractSocket::SocketState <db:emphasis>state</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link>'s state changes. The <db:code role="parameter">state</db:code> parameter is the new state.</db:para>
<db:note>
<db:para><db:link xlink:href="qabstractsocket.xml#SocketState-enum">QAbstractSocket::ConnectedState</db:link> is emitted after the handshake with the server has succeeded.</db:para>
</db:note>
<db:para><db:link xlink:href="qabstractsocket.xml#SocketState-enum">QAbstractSocket::SocketState</db:link> is not a registered metatype, so for queued connections, you will have to register it with Q_REGISTER_METATYPE() and qRegisterMetaType().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textFrameReceived">
<db:title>void QWebSocket::textFrameReceived(const QString &amp;<db:emphasis>frame</db:emphasis>, bool <db:emphasis>isLastFrame</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a text frame is received. The <db:code role="parameter">frame</db:code> contains the data and <db:code role="parameter">isLastFrame</db:code> indicates whether this is the last frame of the complete message.</db:para>
<db:para>This signal can be used to process large messages frame by frame, instead of waiting for the complete message to arrive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#binaryFrameReceived">binaryFrameReceived</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textMessageReceived">
<db:title>void QWebSocket::textMessageReceived(const QString &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a text message is received. The <db:code role="parameter">message</db:code> contains the received text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebsocket.xml#binaryMessageReceived">binaryMessageReceived</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="version">
<db:title>QWebSocketProtocol::Version QWebSocket::version() const</db:title>
<db:para>Returns the version the socket is currently using.</db:para>
</db:section>
</db:section>
</db:article>
