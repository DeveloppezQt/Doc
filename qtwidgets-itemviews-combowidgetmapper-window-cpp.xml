<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Combo Widget Mapper Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Combo Widget Mapper example shows how to use a custom delegate to map information from a model to specific widgets on a form.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;
#include &quot;window.h&quot;

Window::Window(QWidget *parent)
    : QWidget(parent)
{
    setupModel();

    nameLabel = new QLabel(tr(&quot;Na&amp;me:&quot;));
    nameEdit = new QLineEdit();
    addressLabel = new QLabel(tr(&quot;&amp;Address:&quot;));
    addressEdit = new QTextEdit();
    typeLabel = new QLabel(tr(&quot;&amp;Type:&quot;));
    typeComboBox = new QComboBox();
    nextButton = new QPushButton(tr(&quot;&amp;Next&quot;));
    previousButton = new QPushButton(tr(&quot;&amp;Previous&quot;));

    nameLabel-&gt;setBuddy(nameEdit);
    addressLabel-&gt;setBuddy(addressEdit);
    typeLabel-&gt;setBuddy(typeComboBox);

    typeComboBox-&gt;setModel(typeModel);

    mapper = new QDataWidgetMapper(this);
    mapper-&gt;setModel(model);
    mapper-&gt;addMapping(nameEdit, 0);
    mapper-&gt;addMapping(addressEdit, 1);
    mapper-&gt;addMapping(typeComboBox, 2, &quot;currentIndex&quot;);

    connect(previousButton, SIGNAL(clicked()),
            mapper, SLOT(toPrevious()));
    connect(nextButton, SIGNAL(clicked()),
            mapper, SLOT(toNext()));
    connect(mapper, SIGNAL(currentIndexChanged(int)),
            this, SLOT(updateButtons(int)));

    QGridLayout *layout = new QGridLayout();
    layout-&gt;addWidget(nameLabel, 0, 0, 1, 1);
    layout-&gt;addWidget(nameEdit, 0, 1, 1, 1);
    layout-&gt;addWidget(previousButton, 0, 2, 1, 1);
    layout-&gt;addWidget(addressLabel, 1, 0, 1, 1);
    layout-&gt;addWidget(addressEdit, 1, 1, 2, 1);
    layout-&gt;addWidget(nextButton, 1, 2, 1, 1);
    layout-&gt;addWidget(typeLabel, 3, 0, 1, 1);
    layout-&gt;addWidget(typeComboBox, 3, 1, 1, 1);
    setLayout(layout);

    setWindowTitle(tr(&quot;Delegate Widget Mapper&quot;));
    mapper-&gt;toFirst();
}

void Window::setupModel()
{
    QStringList items;
    items &lt;&lt; tr(&quot;Home&quot;) &lt;&lt; tr(&quot;Work&quot;) &lt;&lt; tr(&quot;Other&quot;);
    typeModel = new QStringListModel(items, this);

    model = new QStandardItemModel(5, 3, this);
    QStringList names;
    names &lt;&lt; &quot;Alice&quot; &lt;&lt; &quot;Bob&quot; &lt;&lt; &quot;Carol&quot; &lt;&lt; &quot;Donald&quot; &lt;&lt; &quot;Emma&quot;;
    QStringList addresses;
    addresses &lt;&lt; &quot;&lt;qt&gt;123 Main Street&lt;br/&gt;Market Town&lt;/qt&gt;&quot;
              &lt;&lt; &quot;&lt;qt&gt;PO Box 32&lt;br/&gt;Mail Handling Service&quot;
                 &quot;&lt;br/&gt;Service City&lt;/qt&gt;&quot;
              &lt;&lt; &quot;&lt;qt&gt;The Lighthouse&lt;br/&gt;Remote Island&lt;/qt&gt;&quot;
              &lt;&lt; &quot;&lt;qt&gt;47338 Park Avenue&lt;br/&gt;Big City&lt;/qt&gt;&quot;
              &lt;&lt; &quot;&lt;qt&gt;Research Station&lt;br/&gt;Base Camp&lt;br/&gt;Big Mountain&lt;/qt&gt;&quot;;

    QStringList types;
    types &lt;&lt; &quot;0&quot; &lt;&lt; &quot;1&quot; &lt;&lt; &quot;2&quot; &lt;&lt; &quot;0&quot; &lt;&lt; &quot;2&quot;;

    for (int row = 0; row &lt; 5; ++row) {
      QStandardItem *item = new QStandardItem(names[row]);
      model-&gt;setItem(row, 0, item);
      item = new QStandardItem(addresses[row]);
      model-&gt;setItem(row, 1, item);
      item = new QStandardItem(types[row]);
      model-&gt;setItem(row, 2, item);
    }
}

void Window::updateButtons(int row)
{
    previousButton-&gt;setEnabled(row &gt; 0);
    nextButton-&gt;setEnabled(row &lt; model-&gt;rowCount() - 1);
}

</db:programlisting>
</db:article>
