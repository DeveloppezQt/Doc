<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Graphics</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt's graphics features.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Graphics in Qt 5 is primarily done either through the imperative QPainter API, or through Qt’s declarative UI language, Qt Quick, and its scene graph back-end. Qt 5's graphics capabilities also includes support for printing, as well as the loading and saving of various image formats.</db:para>
<db:section xml:id="A2d-graphics-with-qpainter">
<db:title>2D Graphics with QPainter</db:title>
<db:para>QPainter provides API for drawing vector graphics, text and images onto different surfaces, or QPaintDevice instances, such as QImage, QOpenGLPaintDevice, QWidget, and QPrinter. The actual drawing happens in the QPaintDevice's QPaintEngine. The software rasterizer and the OpenGL (ES) 2.0 back-ends are the two most important QPaintEngine implementations. The raster paint engine is Qt’s software rasterizer, and is used when drawing on a QImage or QWidget. Its strength over the OpenGL paint engine is its high quality when antialiasing is enabled, and a complete feature set.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="paintsystem.xml">Paint System</db:link> - Overview over the QPainter classes and architecture.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="coordsys.xml">Coordinate System</db:link> - Explains how QPainter's coordinate system works.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="paintsystem-drawing.xml">Drawing and Filling</db:link> - Explains how QPainter performs filling and outlining of vector shapes.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The most important rendering targets for QPainter are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qimage-proxy.xml">QImage</db:link> - A hardware-independent image representation with direct pixel access. QPainter will use the software rasterizer to draw to QImage instances.</db:para>
</db:listitem>
<db:listitem>
<db:para>QPixmap - A image representation suited for display on screen. QPainter will primarily use the software rasterizer to draw to QPixmap instances.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="whatsnew50.xml#qopenglpaintdevice">QOpenGLPaintDevice</db:link> - A paint device to render to the current OpenGL (ES) 2.0 context. QPainter will use hardware accellerated OpenGL calls to draw to QOpenGLPaintDevice instances.</db:para>
</db:listitem>
<db:listitem>
<db:para>QBackingStore - A backbuffer for top-level windows. QPainter will primarily use the software rasterizer to draw to QBackingStore instances.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwidget-proxy.xml">QWidget</db:link> - A baseclass for pre-Qt Quick user interface classes. QPainter will render widgets using a QBackingStore.</db:para>
</db:listitem>
<db:listitem>
<db:para>QOpenGLWidget - A painter can also be opened on a QOpenGLWidget. This is provided as a convenience, since technically this is no different than using QOpenGLPaintDevice.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>QPainter and related classes are part of the <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link> module.</db:para>
</db:section>
<db:section xml:id="opengl-and-3d">
<db:title>OpenGL and 3D</db:title>
<db:para>OpenGL is the most widely adopted graphics API for hardware accelerated and 3D graphics, implemented on all desktop platforms and almost every mobile and embedded platform. The Qt library contains a number of classes that help users integrate graphics driven by OpenGL or other graphics API calls into their applications, as well as add-on modules for displaying 3D content.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtgui-index.xml#opengl-and-opengl-es-integration">OpenGL in Qt GUI</db:link> - An overview of how OpenGL integrates with the <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link> module.</db:para>
</db:listitem>
<db:listitem>
<db:para>QOpenGLWidget is a widget that allows adding OpenGL scenes into QWidget-based user interfaces.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#mixing-scene-graph-and-the-native-graphics-api">OpenGL and Qt Quick 2.0</db:link> - How to integrate application-provided graphics commands (OpenGL, Vulkan, Direct3D, etc.) into a Qt Quick scene graph.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://www.khronos.org/opengl">www.khronos.org/opengl</db:link> - The official OpenGL pages.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt Quick 3D</db:link> - An add-on module that provides a high-level API for creating 3D content or UIs based on Qt Quick.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3d-index.xml">Qt 3D</db:link> - An add-on module that provides functionality for near-realtime simulation systems with support for 2D and 3D rendering, in both Qt C++ and Qt Quick applications.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Prior to Qt 5.0, OpenGL support in Qt was handled by the <db:link xlink:href="qtopengl-index.xml">Qt OpenGL</db:link> module. This module is still present, but new code should aim to use the new classes in the <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link> module. The classes are easily distinguisible based on their names: Classes with the <db:code>QGL</db:code> prefix should not be used. Instead, prefer the ones starting with <db:code>QOpenGL</db:code>.</db:para>
</db:section>
<db:section xml:id="qt-quick-scene-graph">
<db:title>Qt Quick Scene Graph</db:title>
<db:para>Qt Quick 2 introduces an OpenGL (ES) 2.0 scene graph for rendering. It generally improves the performance of Qt Quick 2 significantly compared to the QGraphicsView/QPainter-based approach used in earlier versions.</db:para>
<db:para>The scene graph is a graphical representation of the Item scene. It can be thought of as a graphical deep copy, an independent structure that contains enough information to render all the items. Once it has been set up, it can be manipulated and rendered independently of the state of the items. On many platforms, the scene graph will even be rendered on a dedicated render thread while the GUI thread is preparing the next frame's state.</db:para>
<db:para>The scene graph is used when you import <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> 2.x in your QML file, and use QQuickView to run it.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">Qt Quick Scene Graph</db:link> - Overview of the Qt Quick Scene Graph architecture.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link> - Breakdown of the rendering of each frame.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Qt Quick can be mixed with raw OpenGL rendering by connecting to the signals <db:link xlink:href="">QQuickWindow::beforeRendering()</db:link> or <db:link xlink:href="">QQuickWindow::afterRendering()</db:link> which are emitted before and after the Qt Quick scene graph is rendered, respectively. There signals are emitted from the render thread (when applicable), and the connections need to be direct.</db:para>
<db:para>Qt Quick can also be rendered using <db:link xlink:href="http://doc.qt.io/QtQuick2DRenderer">Qt Quick 2D Renderer</db:link>. This raster paint engine enables rendering Qt Quick applications on platforms that do not have OpenGL.</db:para>
</db:section>
<db:section xml:id="printing">
<db:title>Printing</db:title>
<db:para>Qt supports printing both directly to actual printers, locally or on the network, as well as producing PDF output. How to do printing with Qt is described in detail on the <db:link xlink:href="qtprintsupport-index.xml">Qt Print Support</db:link> page.</db:para>
</db:section>
<db:section xml:id="images">
<db:title>Images</db:title>
<db:para>Qt supports convenient reading, writing, and manipulating of images through the QImage class. In addition, for more fine grained control of how images are loaded or saved, you can use the QImageReader and QImageWriter classes respectively. To add support for additional image formats, outside of the ones provided by Qt, you can create image format plugins by using QImageIOHandler and QImageIOPlugin.</db:para>
<db:para>See the <db:link xlink:href="paintsystem-images.xml">Reading and Writing Image Files</db:link> page for more information.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="paintsystem.xml">Paint System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
