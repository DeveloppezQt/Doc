<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Graphics</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt's graphics features.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Cross-platform applications can use Qt to display graphical elements. Qt abstracts the platforms' underlying graphics APIs so that developers can focus on the application code.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/rhiarch.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:para>The Qt Rendering Hardware Interface (RHI) translates 3D graphics call from Qt applications to the available graphics APIs on the target platform.</db:para>
<db:para>The supported graphics APIs are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>OpenGL (version 2.1 and higher)</db:para>
</db:listitem>
<db:listitem>
<db:para>OpenGL ES (version 2.0 and higher)</db:para>
</db:listitem>
<db:listitem>
<db:para>Vulkan (version 1.0 and higher)</db:para>
</db:listitem>
<db:listitem>
<db:para>Direct3D 11 (version 11.1 and higher)</db:para>
</db:listitem>
<db:listitem>
<db:para>Direct3D 12 (version 12.0 and higher)</db:para>
</db:listitem>
<db:listitem>
<db:para>Metal (version 1.2 and higher)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="graphics-in-qt-quick">
<db:title>Graphics in Qt Quick</db:title>
<db:para>Qt Quick applications use a <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">scene graph</db:link> for rendering. The scene graph renderer can create efficient graphics calls and increase performance. The scene graph is has an accessible API which gives you the flexibility to create complex but fast graphics.</db:para>
<db:para>The pages in the following list contain more information about rendering Qt Quick applications.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">Qt Quick Scene Graph</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-visualcanvas-scenegraph-renderer.xml">Qt Quick Scene Graph Default Renderer</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#extending-the-scene-graph-with-qrhi-based-and-native-3d-rendering">Extending the Scene Graph with QRhi-based and native 3D rendering</db:link> - How to integrate application-provided graphics commands (OpenGL, Vulkan, Direct3D, etc.) into a Qt Quick scene graph.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="choosing-a-rendering-path">
<db:title>Choosing a Rendering Path</db:title>
<db:para>Qt uses the target platform's graphics APIs whenever possible, however, it is possible to set up Qt's rendering path with a specific API. In many cases, choosing a specific API can increase performance and allows the developers to deploy on a platform that have a specific graphics API. Visit the <db:link xlink:href="qtquick-visualcanvas-scenegraph-renderer.xml#rendering-via-the-qt-rendering-hardware-interface">Rendering via the Qt Rendering Hardware Interface</db:link> page on how to set the render path in <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="A3d-graphics-with-qt-quick-3d">
<db:title>3D Graphics with Qt Quick 3D</db:title>
<db:para><db:link xlink:href="qtquick3d-index.xml">Qt Quick 3D</db:link> is an add-on that provides a high-level API for creating 3D content and 3D user interfaces based on Qt Quick. It extends the <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">Qt Quick Scene Graph</db:link> which lets you implement 3D content on 2D Qt Quick applications.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/BenchmarkDemoQt6.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:section>
<db:section xml:id="shader-effects">
<db:title>Shader Effects</db:title>
<db:para>The <db:link xlink:href="qtshadertools-index.xml">Qt Shader Tools</db:link> provides a tool, <db:link xlink:href="qtshadertools-qsb.xml">QSB</db:link>, to translate vertex and fragment shaders into a package for Qt Quick interfaces. In particular, the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> QML type and <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link> subclasses can use the output of QSB. <db:link xlink:href="qtquick3d-index.xml">Qt Quick 3D</db:link> has its own framework for importing shaders into 3D scenes.</db:para>
<db:para>The following list contains information about shader effects.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtshadertools-index.xml">Qt Shader Tools</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick3d-custom.xml">Programmable Materials, Effects, Geometry, and Texture data</db:link> - materials and shaders in Qt Quick 3D</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquick3D.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:section>
<db:section xml:id="high-level-graphics-with-qt-gui">
<db:title>High-Level Graphics with Qt GUI</db:title>
<db:para><db:link xlink:href="qtgui-index.xml">Qt GUI</db:link> provides a high level windowing, painting, and typography system. <db:link xlink:href="qpainter.xml">QPainter</db:link> provides an API for drawing vector graphics, text and images onto different surfaces, or <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> instances, such as <db:link xlink:href="qimage.xml">QImage</db:link>, <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link>, <db:link xlink:href="qwidget.xml">QWidget</db:link>, and <db:link xlink:href="qprinter.xml">QPrinter</db:link>. For Qt Widgets user interfaces, Qt uses a software renderer.</db:para>
<db:para>The following list contains information about Qt GUIs high-level drawing APIs.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="paintsystem.xml">Paint System</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="paintsystem-drawing.xml">Drawing and Filling</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="low-level-graphics-with-qt-gui">
<db:title>Low-Level Graphics with Qt GUI</db:title>
<db:para><db:link xlink:href="qtgui-index.xml">Qt GUI</db:link> provides cross-platform enablers for managing OpenGL contexts and Vulkan instances. Applications that perform rendering directly with OpenGL, OpenGL ES, or Vulkan can use <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>, <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link>, <db:link xlink:href="qvulkaninstance.xml">QVulkanInstance</db:link>, QVulkanFunctions, and QVulkanDeviceFunctions to manage contexts, instances, and gain access to the OpenGL and Vulkan API functionsin a portable manner.</db:para>
<db:para><db:link xlink:href="qtgui-index.xml">Qt GUI</db:link> also offers the Qt Rendering Hardware Interface (RHI) family of APIs, such as <db:link xlink:href="qrhi.xml">QRhi</db:link> and <db:link xlink:href="qshader.xml">QShader</db:link>, for applications that want to perform rendering using the portable, cross-platform 3D rendering infrastructure Qt itself uses to implement the Qt Quick scene graph and the Qt Quick 3D rendering engine. These classes are offered as &quot;semi-public&quot; APIs with a limited compatibility promise for the time being, similarly to the <db:link xlink:href="qpa.xml">Qt Platform Abstraction</db:link> classes. However, the <db:link xlink:href="qrhi.xml">QRhi</db:link> classes come with full documentation. See the <db:link xlink:href="qrhi.xml">QRhi</db:link> class to get started.</db:para>
</db:section>
<db:section xml:id="qt-opengl-module">
<db:title>Qt OpenGL Module</db:title>
<db:para>The <db:link xlink:href="qtopengl-index.xml">Qt OpenGL</db:link> module is for applications that require OpenGL access. This module is to maintain compatibility with Qt 5 applications and with Qt GUI. For user interfaces that use <db:link xlink:href="qwidget.xml">QWidget</db:link>, <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link> is a widget that can add OpenGL scenes.</db:para>
</db:section>
<db:section xml:id="printing">
<db:title>Printing</db:title>
<db:para>Qt supports printing both directly to actual printers, locally or on the network, as well as producing PDF output. How to do printing with Qt is described in detail on the <db:link xlink:href="qtprintsupport-index.xml">Qt Print Support</db:link> page.</db:para>
</db:section>
<db:section xml:id="images">
<db:title>Images</db:title>
<db:para>Qt supports convenient reading, writing, and manipulating of images through the <db:link xlink:href="qimage.xml">QImage</db:link> class. In addition, for more fine grained control of how images are loaded or saved, you can use the <db:link xlink:href="qimagereader.xml">QImageReader</db:link> and <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> classes respectively. To add support for additional image formats, outside of the ones provided by Qt, you can create image format plugins by using <db:link xlink:href="qimageiohandler.xml">QImageIOHandler</db:link> and <db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link>.</db:para>
<db:para>See the <db:link xlink:href="paintsystem-images.xml">Reading and Writing Image Files</db:link> page for more information.</db:para>
</db:section>
</db:article>
