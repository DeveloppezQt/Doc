<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBluetoothAddress Class</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbluetoothaddress.xml">QBluetoothAddress</db:link> class assigns an address to the Bluetooth device.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBluetoothAddress</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += bluetooth</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class holds a Bluetooth address in a platform- and protocol-independent manner.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBluetoothAddress">
<db:title>QBluetoothAddress::QBluetoothAddress()</db:title>
<db:para>Constructs an null Bluetooth address.</db:para>
</db:section>
<db:section xml:id="QBluetoothAddress-2">
<db:title>[explicit] QBluetoothAddress::QBluetoothAddress(const QString &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:para>Constructs a new Bluetooth address and assigns <db:code role="parameter">address</db:code> to it.</db:para>
<db:para>The format of <db:code role="parameter">address</db:code> can be either XX:XX:XX:XX:XX:XX or XXXXXXXXXXXX, where X is a hexadecimal digit. Case is not important.</db:para>
</db:section>
<db:section xml:id="QBluetoothAddress-3">
<db:title>[explicit] QBluetoothAddress::QBluetoothAddress(quint64 <db:emphasis>address</db:emphasis>)</db:title>
<db:para>Constructs a new Bluetooth address and assigns <db:code role="parameter">address</db:code> to it.</db:para>
</db:section>
<db:section xml:id="QBluetoothAddress-1">
<db:title>QBluetoothAddress::QBluetoothAddress(const QBluetoothAddress &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a new Bluetooth address which is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QBluetoothAddress">
<db:title>[noexcept] QBluetoothAddress::~QBluetoothAddress()</db:title>
<db:para>Destroys the <db:link xlink:href="qbluetoothaddress.xml">QBluetoothAddress</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QBluetoothAddress::clear()</db:title>
<db:para>Sets the Bluetooth address to 00:00:00:00:00:00.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QBluetoothAddress::isNull() const</db:title>
<db:para>Returns true if the Bluetooth address is null, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>QString QBluetoothAddress::toString() const</db:title>
<db:para>Returns the Bluetooth address as a string of the form, XX:XX:XX:XX:XX:XX.</db:para>
</db:section>
<db:section xml:id="toUInt64">
<db:title>quint64 QBluetoothAddress::toUInt64() const</db:title>
<db:para>Returns this Bluetooth address as a quint64.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QBluetoothAddress::operator!=(const QBluetoothAddress &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Compares this Bluetooth address with <db:code role="parameter">other</db:code>.</db:para>
<db:para>Returns true if the Bluetooth addresses are not equal, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>bool QBluetoothAddress::operator&lt;(const QBluetoothAddress &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if the Bluetooth address is less than <db:code role="parameter">other</db:code>, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QBluetoothAddress &amp;QBluetoothAddress::operator=(const QBluetoothAddress &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this Bluetooth address.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QBluetoothAddress::operator==(const QBluetoothAddress &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Compares this Bluetooth address to <db:code role="parameter">other</db:code>.</db:para>
<db:para>Returns true if the two Bluetooth addresses are equal, otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
