<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlSimpleReader Class</db:title>
<db:productname>QtCore5Compat</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt 5 Core Compatibility APIs Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlsimplereader.xml">QXmlSimpleReader</db:link> class provides an implementation of a simple XML parser.</db:para>
<db:warning>
<db:para>This class is not reentrant.</db:para>
</db:warning></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlSimpleReader</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core5Compat)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core5Compat)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core5compat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qxmlreader.xml" xlink:role="class">QXmlReader</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlSimpleReader is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This XML reader is suitable for a wide range of applications. It is able to parse well-formed XML and can report the namespaces of elements to a content handler; however, it does not parse any external entities. For historical reasons, Attribute Value Normalization and End-of-Line Handling as described in the XML 1.0 specification is not performed.</db:para>
<db:para>The easiest pattern of use for this class is to create a reader instance, define an input source, specify the handlers to be used by the reader, and parse the data.</db:para>
<db:para>For example, we could use a QFile to supply the input. Here, we create a reader, and define an input source to be used by the reader:</db:para>
<db:programlisting language="cpp">    QXmlSimpleReader xmlReader;
    QXmlInputSource *source = new QXmlInputSource(file);
</db:programlisting>
<db:para>A handler lets us perform actions when the reader encounters certain types of content, or if errors in the input are found. The reader must be told which handler to use for each type of event. For many common applications, we can create a custom handler by subclassing <db:link xlink:href="qxmldefaulthandler.xml">QXmlDefaultHandler</db:link>, and use this to handle both error and content events:</db:para>
<db:programlisting language="cpp">    Handler *handler = new Handler;
    xmlReader.setContentHandler(handler);
    xmlReader.setErrorHandler(handler);
</db:programlisting>
<db:para>If you don't set at least the content and error handlers, the parser will fall back on its default behaviorâ€”and will do nothing.</db:para>
<db:para>The most convenient way to handle the input is to read it in a single pass using the <db:link xlink:href="qxmlsimplereader.xml#parse">parse</db:link>() function with an argument that specifies the input source:</db:para>
<db:programlisting language="cpp">    bool ok = xmlReader.parse(source);

    if (!ok)
        std::cout &lt;&lt; &quot;Parsing failed.&quot; &lt;&lt; std::endl;
</db:programlisting>
<db:para>If you can't parse the entire input in one go (for example, it is huge, or is being delivered over a network connection), data can be fed to the parser in pieces. This is achieved by telling <db:link xlink:href="qxmlsimplereader.xml#parse">parse</db:link>() to work incrementally, and making subsequent calls to the <db:link xlink:href="qxmlsimplereader.xml#parseContinue">parseContinue</db:link>() function, until all the data has been processed.</db:para>
<db:para>A common way to perform incremental parsing is to connect the <db:code>readyRead()</db:code> signal of a <db:link xlink:href="">network reply</db:link> a slot, and handle the incoming data there. See QNetworkAccessManager.</db:para>
<db:para>Aspects of the parsing behavior can be adapted using <db:link xlink:href="qxmlsimplereader.xml#setFeature">setFeature</db:link>() and <db:link xlink:href="qxmlsimplereader.xml#setProperty">setProperty</db:link>().</db:para>
<db:programlisting language="cpp">xmlReader.setFeature(&quot;http://xml.org/sax/features/namespace-prefixes&quot;, true);
</db:programlisting>
<db:para><db:link xlink:href="qxmlsimplereader.xml">QXmlSimpleReader</db:link> is not reentrant. If you want to use the class in threaded code, lock the code using <db:link xlink:href="qxmlsimplereader.xml">QXmlSimpleReader</db:link> with a locking mechanism, such as a QMutex.</db:para>
<db:para>Note that this class is now deprecated, please use QXmlStreamReader or QDomDocument for reading XML files.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlSimpleReader">
<db:title>QXmlSimpleReader::QXmlSimpleReader()</db:title>
<db:para>Constructs a simple XML reader.</db:para>
</db:section>
<db:section xml:id="dtor.QXmlSimpleReader">
<db:title>[virtual noexcept] QXmlSimpleReader::~QXmlSimpleReader()</db:title>
<db:para>Destroys the simple XML reader.</db:para>
</db:section>
<db:section xml:id="DTDHandler">
<db:title>[override virtual] QXmlDTDHandler *QXmlSimpleReader::DTDHandler() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#DTDHandler" role="function">QXmlReader::DTDHandler() const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#setDTDHandler">setDTDHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentHandler">
<db:title>[override virtual] QXmlContentHandler *QXmlSimpleReader::contentHandler() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#contentHandler" role="function">QXmlReader::contentHandler() const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#setContentHandler">setContentHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="declHandler">
<db:title>[override virtual] QXmlDeclHandler *QXmlSimpleReader::declHandler() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#declHandler" role="function">QXmlReader::declHandler() const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#setDeclHandler">setDeclHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="entityResolver">
<db:title>[override virtual] QXmlEntityResolver *QXmlSimpleReader::entityResolver() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#entityResolver" role="function">QXmlReader::entityResolver() const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#setEntityResolver">setEntityResolver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorHandler">
<db:title>[override virtual] QXmlErrorHandler *QXmlSimpleReader::errorHandler() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#errorHandler" role="function">QXmlReader::errorHandler() const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#setErrorHandler">setErrorHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="feature">
<db:title>[override virtual] bool QXmlSimpleReader::feature(const QString &amp;<db:emphasis>name</db:emphasis>, bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#feature" role="function">QXmlReader::feature(const QString &amp;name, bool *ok) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#setFeature">setFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasFeature">
<db:title>[override virtual] bool QXmlSimpleReader::hasFeature(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#hasFeature" role="function">QXmlReader::hasFeature(const QString &amp;name) const</db:link>.</db:para>
</db:section>
<db:section xml:id="hasProperty">
<db:title>[override virtual] bool QXmlSimpleReader::hasProperty(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#hasProperty" role="function">QXmlReader::hasProperty(const QString &amp;name) const</db:link>.</db:para>
</db:section>
<db:section xml:id="lexicalHandler">
<db:title>[override virtual] QXmlLexicalHandler *QXmlSimpleReader::lexicalHandler() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#lexicalHandler" role="function">QXmlReader::lexicalHandler() const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#setLexicalHandler">setLexicalHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parse">
<db:title>[override virtual] bool QXmlSimpleReader::parse(const QXmlInputSource &amp;<db:emphasis>input</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader-obsolete.xml#parse" role="function">QXmlReader::parse(const QXmlInputSource &amp;input)</db:link>.</db:para>
</db:section>
<db:section xml:id="parse-1">
<db:title>[override virtual] bool QXmlSimpleReader::parse(const QXmlInputSource *<db:emphasis>input</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#parse-1" role="function">QXmlReader::parse(const QXmlInputSource *input)</db:link>.</db:para>
<db:para>Reads an XML document from <db:code role="parameter">input</db:code> and parses it in one pass (non-incrementally). Returns <db:code>true</db:code> if the parsing was successful; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="parse-2">
<db:title>[virtual] bool QXmlSimpleReader::parse(const QXmlInputSource *<db:emphasis>input</db:emphasis>, bool <db:emphasis>incremental</db:emphasis>)</db:title>
<db:para>Reads an XML document from <db:code role="parameter">input</db:code> and parses it. Returns <db:code>true</db:code> if the parsing is completed successfully; otherwise returns <db:code>false</db:code>, indicating that an error occurred.</db:para>
<db:para>If <db:code role="parameter">incremental</db:code> is false, this function will return false if the XML file is not read completely. The parsing cannot be continued in this case.</db:para>
<db:para>If <db:code role="parameter">incremental</db:code> is true, the parser does not return false if it reaches the end of the <db:code role="parameter">input</db:code> before reaching the end of the XML file. Instead, it stores the state of the parser so that parsing can be continued later when more data is available. In such a case, you can use the function <db:link xlink:href="qxmlsimplereader.xml#parseContinue">parseContinue</db:link>() to continue with parsing. This class stores a pointer to the input source <db:code role="parameter">input</db:code> and the <db:link xlink:href="qxmlsimplereader.xml#parseContinue">parseContinue</db:link>() function tries to read from that input source. Therefore, you should not delete the input source <db:code role="parameter">input</db:code> until you no longer need to call <db:link xlink:href="qxmlsimplereader.xml#parseContinue">parseContinue</db:link>().</db:para>
<db:para>If this function is called with <db:code role="parameter">incremental</db:code> set to true while an incremental parse is in progress, a new parsing session will be started, and the previous session will be lost.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#parseContinue">parseContinue</db:link>()</db:member>
<db:member>QTcpSocket</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parseContinue">
<db:title>[virtual] bool QXmlSimpleReader::parseContinue()</db:title>
<db:para>Continues incremental parsing, taking input from the <db:link xlink:href="qxmlinputsource.xml">QXmlInputSource</db:link> that was specified with the most recent call to <db:link xlink:href="qxmlsimplereader.xml#parse">parse</db:link>(). To use this function, you <db:emphasis>must</db:emphasis> have called <db:link xlink:href="qxmlsimplereader.xml#parse">parse</db:link>() with the incremental argument set to true.</db:para>
<db:para>Returns <db:code>false</db:code> if a parsing error occurs; otherwise returns <db:code>true</db:code>, even if the end of the XML file has not been reached. You can continue parsing at a later stage by calling this function again when there is more data available to parse.</db:para>
<db:para>Calling this function when there is no data available in the input source indicates to the reader that the end of the XML file has been reached. If the input supplied up to this point was not well-formed then a parsing error occurs, and false is returned. If the input supplied was well-formed, true is returned. It is important to end the input in this way because it allows you to reuse the reader to parse other XML files.</db:para>
<db:para>Calling this function after the end of file has been reached, but without available data will cause false to be returned whether the previous input was well-formed or not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#parse">parse</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlinputsource.xml#data">QXmlInputSource::data</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlinputsource.xml#next">QXmlInputSource::next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property">
<db:title>[override virtual] void *QXmlSimpleReader::property(const QString &amp;<db:emphasis>name</db:emphasis>, bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#property" role="function">QXmlReader::property(const QString &amp;name, bool *ok) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#setProperty">setProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContentHandler">
<db:title>[override virtual] void QXmlSimpleReader::setContentHandler(QXmlContentHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#setContentHandler" role="function">QXmlReader::setContentHandler(QXmlContentHandler *handler)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#contentHandler">contentHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDTDHandler">
<db:title>[override virtual] void QXmlSimpleReader::setDTDHandler(QXmlDTDHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#setDTDHandler" role="function">QXmlReader::setDTDHandler(QXmlDTDHandler *handler)</db:link>.</db:para>
</db:section>
<db:section xml:id="setDeclHandler">
<db:title>[override virtual] void QXmlSimpleReader::setDeclHandler(QXmlDeclHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#setDeclHandler" role="function">QXmlReader::setDeclHandler(QXmlDeclHandler *handler)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#declHandler">declHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEntityResolver">
<db:title>[override virtual] void QXmlSimpleReader::setEntityResolver(QXmlEntityResolver *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#setEntityResolver" role="function">QXmlReader::setEntityResolver(QXmlEntityResolver *handler)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#entityResolver">entityResolver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setErrorHandler">
<db:title>[override virtual] void QXmlSimpleReader::setErrorHandler(QXmlErrorHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#setErrorHandler" role="function">QXmlReader::setErrorHandler(QXmlErrorHandler *handler)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#errorHandler">errorHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFeature">
<db:title>[override virtual] void QXmlSimpleReader::setFeature(const QString &amp;<db:emphasis>name</db:emphasis>, bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#setFeature" role="function">QXmlReader::setFeature(const QString &amp;name, bool value)</db:link>.</db:para>
<db:para>Turns on the feature <db:code role="parameter">name</db:code> if <db:code role="parameter">enable</db:code> is true; otherwise turns it off.</db:para>
<db:para>The <db:code role="parameter">name</db:code> parameter must be one of the following strings:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Feature</db:para>
</db:th>
<db:th>
<db:para>Default</db:para>
</db:th>
<db:th>
<db:para>Notes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>http://xml.org/sax/features/namespaces</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>true</db:para>
</db:td>
<db:td>
<db:para>If enabled, namespaces are reported to the content handler.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>http://xml.org/sax/features/namespace-prefixes</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>false</db:para>
</db:td>
<db:td>
<db:para>If enabled, the original prefixed names and attributes used for namespace declarations are reported.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>http://qt-project.org/xml/features/report-whitespace-only-CharData</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>true</db:para>
</db:td>
<db:td>
<db:para>If enabled, CharData that consist of only whitespace characters are reported using <db:link xlink:href="qxmlcontenthandler.xml#characters">QXmlContentHandler::characters</db:link>(). If disabled, whitespace is silently discarded.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>http://qt-project.org/xml/features/report-start-end-entity</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>false</db:para>
</db:td>
<db:td>
<db:para>If enabled, the parser reports QXmlContentHandler::startEntity() and QXmlContentHandler::endEntity() events, so character data might be reported in chunks. If disabled, the parser does not report these events, but silently substitutes the entities, and reports the character data in one chunk.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#feature">feature</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlsimplereader.xml#hasFeature">hasFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLexicalHandler">
<db:title>[override virtual] void QXmlSimpleReader::setLexicalHandler(QXmlLexicalHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#setLexicalHandler" role="function">QXmlReader::setLexicalHandler(QXmlLexicalHandler *handler)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#lexicalHandler">lexicalHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty">
<db:title>[override virtual] void QXmlSimpleReader::setProperty(const QString &amp;<db:emphasis>name</db:emphasis>, void *<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlreader.xml#setProperty" role="function">QXmlReader::setProperty(const QString &amp;name, void *value)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml#property">property</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
