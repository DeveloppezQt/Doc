<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVirtualKeyboardInputContext Class</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt Virtual Keyboard | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>Provides access to an input context.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVirtualKeyboardInputContext</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS VirtualKeyboard)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::VirtualKeyboard)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += virtualkeyboard</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtquick-virtualkeyboard-inputcontext.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QVirtualKeyboardInputContext is part of <db:simplelist><db:member>qtvirtualkeyboard-cpp-for-devs</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="anchorPosition-prop">
<db:title>[read-only] anchorPosition : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>anchorPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">anchorPosition</db:synopsisinfo>
<db:synopsisinfo role="notifier">anchorPositionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the anchor position.</db:para>
<db:para>This property is changed when the anchor position changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">anchorPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">anchorPositionChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="anchorRectIntersectsClipRect-prop">
<db:title>[read-only] anchorRectIntersectsClipRect : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>anchorRectIntersectsClipRect</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">anchorRectIntersectsClipRect</db:synopsisinfo>
<db:synopsisinfo role="notifier">anchorRectIntersectsClipRectChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds <db:code>true</db:code> if the bounding rectangle of the selection anchor intersects the exposed input item rectangle.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">anchorRectIntersectsClipRect</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">anchorRectIntersectsClipRectChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#InputMethodQuery-enum">Qt::ImAnchorRectangle</db:link></db:member>
<db:member><db:link xlink:href="qt.xml#InputMethodQuery-enum">Qt::ImInputItemClipRectangle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="anchorRectangle-prop">
<db:title>[read-only] anchorRectangle : const QRectF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRectF</db:type>
<db:varname>anchorRectangle</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">anchorRectangle</db:synopsisinfo>
<db:synopsisinfo role="notifier">anchorRectangleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the anchor rectangle.</db:para>
<db:para>This property is changed when the anchor rectangle changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> <db:emphasis role="bold">anchorRectangle</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">anchorRectangleChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="animating-prop">
<db:title>animating : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>animating</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isAnimating</db:synopsisinfo>
<db:synopsisinfo role="setter">setAnimating</db:synopsisinfo>
<db:synopsisinfo role="notifier">animatingChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the animating status.</db:para>
<db:para>Use this property to set the animating status, for example during UI transitioning states.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isAnimating</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAnimating</db:emphasis>(<db:type>bool</db:type> <db:emphasis>isAnimating</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">animatingChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="capsLockActive-prop">
<db:title>[read-only] capsLockActive : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>capsLockActive</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isCapsLockActive</db:synopsisinfo>
<db:synopsisinfo role="notifier">capsLockActiveChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the caps lock status.</db:para>
<db:para>This property is changed when the caps lock status changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardinputcontext.xml#isCapsLockActive">isCapsLockActive</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardinputcontext.xml#capsLockActiveChanged">capsLockActiveChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="cursorPosition-prop">
<db:title>[read-only] cursorPosition : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>cursorPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cursorPosition</db:synopsisinfo>
<db:synopsisinfo role="notifier">cursorPositionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the cursor position.</db:para>
<db:para>This property is changed when the cursor position changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">cursorPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">cursorPositionChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="cursorRectIntersectsClipRect-prop">
<db:title>[read-only] cursorRectIntersectsClipRect : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>cursorRectIntersectsClipRect</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cursorRectIntersectsClipRect</db:synopsisinfo>
<db:synopsisinfo role="notifier">cursorRectIntersectsClipRectChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds <db:code>true</db:code> if the bounding rectangle of the input cursor intersects the exposed input item rectangle.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">cursorRectIntersectsClipRect</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">cursorRectIntersectsClipRectChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#InputMethodQuery-enum">Qt::ImCursorRectangle</db:link></db:member>
<db:member><db:link xlink:href="qt.xml#InputMethodQuery-enum">Qt::ImInputItemClipRectangle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorRectangle-prop">
<db:title>[read-only] cursorRectangle : const QRectF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRectF</db:type>
<db:varname>cursorRectangle</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cursorRectangle</db:synopsisinfo>
<db:synopsisinfo role="notifier">cursorRectangleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the cursor rectangle.</db:para>
<db:para>This property is changed when the cursor rectangle changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> <db:emphasis role="bold">cursorRectangle</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">cursorRectangleChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="inputEngine-prop">
<db:title>[read-only] inputEngine : QVirtualKeyboardInputEngine* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVirtualKeyboardInputEngine*</db:type>
<db:varname>inputEngine</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">inputEngine</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the input engine.</db:para>
<db:para>This property stores the input engine.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvirtualkeyboardinputengine.xml">QVirtualKeyboardInputEngine</db:link></db:type> *<db:emphasis role="bold">inputEngine</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="inputMethodHints-prop">
<db:title>[read-only] inputMethodHints : const Qt::InputMethodHints</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::InputMethodHints</db:type>
<db:varname>inputMethodHints</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">inputMethodHints</db:synopsisinfo>
<db:synopsisinfo role="notifier">inputMethodHintsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the input method hints.</db:para>
<db:para>This property is changed when the input method hints changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#InputMethodHint-enum">Qt::InputMethodHints</db:link></db:type> <db:emphasis role="bold">inputMethodHints</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">inputMethodHintsChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="keyboardObserver-prop">
<db:title>[read-only, since QtQuick.VirtualKeyboard 6.1] keyboardObserver : QVirtualKeyboardObserver* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVirtualKeyboardObserver*</db:type>
<db:varname>keyboardObserver</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">keyboardObserver</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the keyboard observer object, which can be used to receive notifications of keyboard change events.</db:para>
<db:para>This property was introduced in QtQuick.VirtualKeyboard 6.1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvirtualkeyboardobserver.xml">QVirtualKeyboardObserver</db:link></db:type> *<db:emphasis role="bold">keyboardObserver</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="locale-prop">
<db:title>[read-only] locale : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>locale</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">locale</db:synopsisinfo>
<db:synopsisinfo role="notifier">localeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the locale.</db:para>
<db:para>This property is changed when the input locale changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">locale</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">localeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="preeditText-prop">
<db:title>preeditText : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>preeditText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">preeditText</db:synopsisinfo>
<db:synopsisinfo role="setter">setPreeditText</db:synopsisinfo>
<db:synopsisinfo role="notifier">preeditTextChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the pre-edit text.</db:para>
<db:para>This property sets the pre-edit text.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">preeditText</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPreeditText</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>text</db:emphasis>, <db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type><db:link xlink:href="qinputmethodevent-attribute.xml">QInputMethodEvent::Attribute</db:link></db:type>&gt; <db:emphasis>attributes</db:emphasis> = QList&lt;QInputMethodEvent::Attribute&gt;(), <db:type>int</db:type> <db:emphasis>replaceFrom</db:emphasis> = 0, <db:type>int</db:type> <db:emphasis>replaceLength</db:emphasis> = 0)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">preeditTextChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="selectedText-prop">
<db:title>[read-only] selectedText : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>selectedText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">selectedText</db:synopsisinfo>
<db:synopsisinfo role="notifier">selectedTextChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the selected text.</db:para>
<db:para>This property is changed when the selected text changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">selectedText</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">selectedTextChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="selectionControlVisible-prop">
<db:title>[read-only] selectionControlVisible : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>selectionControlVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isSelectionControlVisible</db:synopsisinfo>
<db:synopsisinfo role="notifier">selectionControlVisibleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds <db:code>true</db:code> if the selection control is currently visible.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSelectionControlVisible</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">selectionControlVisibleChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="shiftActive-prop">
<db:title>[read-only] shiftActive : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>shiftActive</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isShiftActive</db:synopsisinfo>
<db:synopsisinfo role="notifier">shiftActiveChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the shift status.</db:para>
<db:para>This property is changed when the shift status changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardinputcontext.xml#isShiftActive">isShiftActive</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardinputcontext.xml#shiftActiveChanged">shiftActiveChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="surroundingText-prop">
<db:title>[read-only] surroundingText : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>surroundingText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">surroundingText</db:synopsisinfo>
<db:synopsisinfo role="notifier">surroundingTextChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the surrounding text around cursor.</db:para>
<db:para>This property is changed when the surrounding text around the cursor changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">surroundingText</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">surroundingTextChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="uppercase-prop">
<db:title>[read-only] uppercase : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>uppercase</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isUppercase</db:synopsisinfo>
<db:synopsisinfo role="notifier">uppercaseChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the uppercase status.</db:para>
<db:para>This property is <db:code>true</db:code> when either <db:link xlink:href="qvirtualkeyboardinputcontext.xml#shiftActive-prop">shiftActive</db:link> or <db:link xlink:href="qvirtualkeyboardinputcontext.xml#capsLockActive-prop">capsLockActive</db:link> is <db:code>true</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isUppercase</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">uppercaseChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="clear">
<db:title>void QVirtualKeyboardInputContext::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the pre-edit text.</db:para>
</db:section>
<db:section xml:id="commit">
<db:title>void QVirtualKeyboardInputContext::commit()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>commit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void commit()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Commits the current pre-edit text.</db:para>
</db:section>
<db:section xml:id="commit-1">
<db:title>void QVirtualKeyboardInputContext::commit(const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>replaceFrom</db:emphasis> = 0, int <db:emphasis>replaceLength</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>commit</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>replaceFrom</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>replaceLength</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void commit(const QString &amp;text, int replaceFrom, int replaceLength)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Commits the final <db:code role="parameter">text</db:code> to the input item and optionally modifies the text relative to the start of the pre-edit text. If <db:code role="parameter">replaceFrom</db:code> is non-zero, the <db:code role="parameter">text</db:code> replaces the contents relative to <db:code role="parameter">replaceFrom</db:code> with a length of <db:code role="parameter">replaceLength</db:code>.</db:para>
</db:section>
<db:section xml:id="sendKeyClick">
<db:title>void QVirtualKeyboardInputContext::sendKeyClick(int <db:emphasis>key</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>modifiers</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendKeyClick</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>modifiers</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendKeyClick(int key, const QString &amp;text, int modifiers)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a key click event with the given <db:code role="parameter">key</db:code>, <db:code role="parameter">text</db:code> and <db:code role="parameter">modifiers</db:code> to the input item that currently has focus.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QVirtualKeyboardInputContext</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qvirtualkeyboardinputcontext.xml">QVirtualKeyboardInputContext</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-property-documentation">
<db:title>Obsolete Property Documentation</db:title>
<db:section xml:id="capsLock-prop">
<db:title>[read-only] capsLock : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>capsLock</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isCapsLockActive</db:synopsisinfo>
<db:synopsisinfo role="notifier">capsLockActiveChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This property holds the caps lock status.</db:para>
<db:para>Use <db:link xlink:href="qvirtualkeyboardinputcontext.xml#capsLockActive-prop">capsLockActive</db:link> instead.</db:para>
<db:para>This property is changed when the caps lock status changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardinputcontext.xml#isCapsLockActive">isCapsLockActive</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardinputcontext.xml#capsLockActiveChanged">capsLockActiveChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="inputItem-prop">
<db:title>[read-only] inputItem : QObject* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QObject*</db:type>
<db:varname>inputItem</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">inputItem</db:synopsisinfo>
<db:synopsisinfo role="notifier">inputItemChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This property holds the focused input item.</db:para>
<db:para>This property is changed when the focused input item changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qobject.xml#QObject">QObject</db:link></db:type> *<db:emphasis role="bold">inputItem</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">inputItemChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="shift-prop">
<db:title>[read-only] shift : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>shift</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isShiftActive</db:synopsisinfo>
<db:synopsisinfo role="notifier">shiftActiveChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This property holds the shift status.</db:para>
<db:para>Use <db:link xlink:href="qvirtualkeyboardinputcontext.xml#shiftActive-prop">shiftActive</db:link> instead.</db:para>
<db:para>This property is changed when the shift status changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardinputcontext.xml#isShiftActive">isShiftActive</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardinputcontext.xml#shiftActiveChanged">shiftActiveChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:section>
</db:article>
