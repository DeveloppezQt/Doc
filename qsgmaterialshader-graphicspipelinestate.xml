<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes state changes that the material wants to apply to the currently active graphics pipeline state.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>GraphicsPipelineState</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Unlike <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link>, directly issuing state change commands with the underlying graphics API is not possible with <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link>. This is mainly because the concept of individually changeable states is considered deprecated and not supported with modern graphics APIs.</db:para>
<db:para>Therefore, it is up to <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> to expose a data structure with the set of supported states, which the material can change in its updatePipelineState() implementation, if there is one. The scenegraph will then internally apply these changes to the active graphics pipeline state, then rolling them back as appropriate.</db:para>
<db:para>When <db:link xlink:href="qsgmaterialshader.xml#updateGraphicsPipelineState">updateGraphicsPipelineState</db:link>() is called, the struct has all members set to a valid value to reflect the renderer's current state. Not changing any values (or not reimplementing the function) indicates that the material is fine with the defaults (which are dynamic however, depending on <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link> flags, for example).</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="BlendFactor-enum">
<db:title>enum GraphicsPipelineState::BlendFactor</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::Zero</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::One</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::SrcColor</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::OneMinusSrcColor</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::DstColor</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::OneMinusDstColor</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::SrcAlpha</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::OneMinusSrcAlpha</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::DstAlpha</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::OneMinusDstAlpha</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::ConstantColor</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::OneMinusConstantColor</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::ConstantAlpha</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::OneMinusConstantAlpha</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::SrcAlphaSaturate</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::Src1Color</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::OneMinusSrc1Color</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::Src1Alpha</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::OneMinusSrc1Alpha</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="BlendOp-enum">
<db:title>[since 6.8] enum GraphicsPipelineState::BlendOp</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::<db:emphasis role="bold">BlendOp</db:emphasis>::Add</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::<db:emphasis role="bold">BlendOp</db:emphasis>::Subtract</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::<db:emphasis role="bold">BlendOp</db:emphasis>::ReverseSubtract</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::<db:emphasis role="bold">BlendOp</db:emphasis>::Min</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::<db:emphasis role="bold">BlendOp</db:emphasis>::Max</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="ColorMaskComponent-enum">
<db:title>enum GraphicsPipelineState::ColorMaskComponent</db:title>
<db:bridgehead renderas="sect2">flags GraphicsPipelineState::ColorMask</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::R</db:code></db:para>
</db:td>
<db:td><db:code>1 &lt;&lt; 0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::G</db:code></db:para>
</db:td>
<db:td><db:code>1 &lt;&lt; 1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::B</db:code></db:para>
</db:td>
<db:td><db:code>1 &lt;&lt; 2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::A</db:code></db:para>
</db:td>
<db:td><db:code>1 &lt;&lt; 3</db:code></db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ColorMask</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ColorMaskComponent&gt;. </db:code>It stores an OR combination of <db:code>ColorMaskComponent</db:code> values.</db:para>
</db:section>
<db:section xml:id="CullMode-enum">
<db:title>enum GraphicsPipelineState::CullMode</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::CullNone</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::CullFront</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::CullBack</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PolygonMode-enum">
<db:title>[since 6.4] enum GraphicsPipelineState::PolygonMode</db:title>
<db:para>Specifies the polygon rasterization mode</db:para>
<db:para>Polygon Mode (Triangle Fill Mode in Metal, Fill Mode in D3D) specifies the fill mode used when rasterizing polygons. Polygons may be drawn as solids (Fill), or as a wire mesh (Line).</db:para>
<db:warning>
<db:para>OpenGL ES does not support the <db:code>Line</db:code> polygon mode. OpenGL ES will rasterize all polygons as filled no matter what polygon mode is set. Using <db:code>Line</db:code> will make your application non-portable.</db:para>
</db:warning>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::Fill</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The interior of the polygon is filled (default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">GraphicsPipelineState</db:link></db:emphasis>::Line</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Boundary edges of the polygon are drawn as line segments.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 6.4.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="blendConstant-var">
<db:title>QColor GraphicsPipelineState::blendConstant</db:title>
<db:para>Blend constant applicable when a blending factor is set to use a constant value.</db:para>
</db:section>
<db:section xml:id="blendEnable-var">
<db:title>bool GraphicsPipelineState::blendEnable</db:title>
<db:para>Enables blending.</db:para>
<db:note>
<db:para>Changing this flag should be done with care, and is best avoided. Rather, materials should always use the QSGMaterial::Blend flag to indicate that they wish to use blending. Changing this value from false to true for a material that did not declare QSGMaterial::Blend can lead to unexpected visual results.</db:para>
</db:note>
</db:section>
<db:section xml:id="colorWrite-var">
<db:title>QSGMaterialShader::GraphicsPipelineState::ColorMask GraphicsPipelineState::colorWrite</db:title>
<db:para>Color write mask.</db:para>
</db:section>
<db:section xml:id="cullMode-var">
<db:title>QSGMaterialShader::GraphicsPipelineState::CullMode GraphicsPipelineState::cullMode</db:title>
<db:para>Cull mode.</db:para>
</db:section>
<db:section xml:id="dstAlpha-var">
<db:title>[since 6.5] QSGMaterialShader::GraphicsPipelineState::BlendFactor GraphicsPipelineState::dstAlpha</db:title>
<db:para>Destination alpha blending factor.</db:para>
<db:para>Applies only when <db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml#separateBlendFactors-var">separateBlendFactors</db:link> is set to true.</db:para>
<db:para>This documentation was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="dstColor-var">
<db:title>QSGMaterialShader::GraphicsPipelineState::BlendFactor GraphicsPipelineState::dstColor</db:title>
<db:para>Destination blending factor, either RGB or RGBA depending on <db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml#separateBlendFactors-var">separateBlendFactors</db:link>.</db:para>
</db:section>
<db:section xml:id="opAlpha-var">
<db:title>[since 6.8] QSGMaterialShader::GraphicsPipelineState::BlendOp GraphicsPipelineState::opAlpha</db:title>
<db:para>Alpha blending operation.</db:para>
<db:para>This documentation was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="opColor-var">
<db:title>[since 6.8] QSGMaterialShader::GraphicsPipelineState::BlendOp GraphicsPipelineState::opColor</db:title>
<db:para>RGB blending operation.</db:para>
<db:para>This documentation was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="polygonMode-var">
<db:title>[since 6.4] QSGMaterialShader::GraphicsPipelineState::PolygonMode GraphicsPipelineState::polygonMode</db:title>
<db:para>Polygon rasterization mode.</db:para>
<db:para>This documentation was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="separateBlendFactors-var">
<db:title>[since 6.5] bool GraphicsPipelineState::separateBlendFactors</db:title>
<db:para>Indicates that alpha blending factors are specified separately.</db:para>
<db:para>False by default, meaning both RGB and alpha blending factors are defined by <db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml#srcColor-var">srcColor</db:link> and <db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml#dstColor-var">dstColor</db:link>. When set to true, the alpha blending factors are taken from <db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml#srcAlpha-var">srcAlpha</db:link> and <db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml#dstAlpha-var">dstAlpha</db:link> instead, and <db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml#srcColor-var">srcColor</db:link> and <db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml#dstColor-var">dstColor</db:link> applies only to RGB.</db:para>
<db:para>This documentation was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="srcAlpha-var">
<db:title>[since 6.5] QSGMaterialShader::GraphicsPipelineState::BlendFactor GraphicsPipelineState::srcAlpha</db:title>
<db:para>Source alpha blending factor.</db:para>
<db:para>Applies only when <db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml#separateBlendFactors-var">separateBlendFactors</db:link> is set to true.</db:para>
<db:para>This documentation was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="srcColor-var">
<db:title>QSGMaterialShader::GraphicsPipelineState::BlendFactor GraphicsPipelineState::srcColor</db:title>
<db:para>Source blending factor, either RGB or RGBA depending on <db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml#separateBlendFactors-var">separateBlendFactors</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
