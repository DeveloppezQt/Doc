<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRect Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qrect.xml">QRect</db:link> class defines a rectangle in the plane using integer precision.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRect</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRect is part of <db:simplelist><db:member>painting</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A rectangle is normally expressed as a top-left corner and a size. The size (width and height) of a <db:link xlink:href="qrect.xml">QRect</db:link> is always equivalent to the mathematical rectangle that forms the basis for its rendering.</db:para>
<db:para>A <db:link xlink:href="qrect.xml">QRect</db:link> can be constructed with a set of left, top, width and height integers, or from a <db:link xlink:href="qpoint.xml">QPoint</db:link> and a <db:link xlink:href="qsize.xml">QSize</db:link>. The following code creates two identical rectangles.</db:para>
<db:programlisting language="cpp">QRect r1(100, 200, 11, 16);
QRect r2(QPoint(100, 200), QSize(11, 16));
</db:programlisting>
<db:para>There is a third constructor that creates a <db:link xlink:href="qrect.xml">QRect</db:link> using the top-left and bottom-right coordinates, but we recommend that you avoid using it. The rationale is that for historical reasons the values returned by the <db:link xlink:href="qrect.xml#bottom">bottom</db:link>() and <db:link xlink:href="qrect.xml#right">right</db:link>() functions deviate from the true bottom-right corner of the rectangle.</db:para>
<db:para>The <db:link xlink:href="qrect.xml">QRect</db:link> class provides a collection of functions that return the various rectangle coordinates, and enable manipulation of these. <db:link xlink:href="qrect.xml">QRect</db:link> also provides functions to move the rectangle relative to the various coordinates. In addition there is a <db:link xlink:href="qrect.xml#moveTo">moveTo</db:link>() function that moves the rectangle, leaving its top left corner at the given coordinates. Alternatively, the <db:link xlink:href="qrect.xml#translate">translate</db:link>() function moves the rectangle the given offset relative to the current position, and the <db:link xlink:href="qrect.xml#translated">translated</db:link>() function returns a translated copy of this rectangle.</db:para>
<db:para>The <db:link xlink:href="qrect.xml#size">size</db:link>() function returns the rectangle's dimensions as a <db:link xlink:href="qsize.xml">QSize</db:link>. The dimensions can also be retrieved separately using the <db:link xlink:href="qrect.xml#width">width</db:link>() and <db:link xlink:href="qrect.xml#height">height</db:link>() functions. To manipulate the dimensions use the <db:link xlink:href="qrect.xml#setSize">setSize</db:link>(), <db:link xlink:href="qrect.xml#setWidth">setWidth</db:link>() or <db:link xlink:href="qrect.xml#setHeight">setHeight</db:link>() functions. Alternatively, the size can be changed by applying either of the functions setting the rectangle coordinates, for example, <db:link xlink:href="qrect.xml#setBottom">setBottom</db:link>() or <db:link xlink:href="qrect.xml#setRight">setRight</db:link>().</db:para>
<db:para>The <db:link xlink:href="qrect.xml#contains">contains</db:link>() function tells whether a given point is inside the rectangle or not, and the <db:link xlink:href="qrect.xml#intersects">intersects</db:link>() function returns true if this rectangle intersects with a given rectangle. The <db:link xlink:href="qrect.xml">QRect</db:link> class also provides the <db:link xlink:href="qrect.xml#intersected">intersected</db:link>() function which returns the intersection rectangle, and the <db:link xlink:href="qrect.xml#united">united</db:link>() function which returns the rectangle that encloses the given rectangle and this:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qrect-intersect.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qrect-unite.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qrect.xml#intersected">intersected</db:link>()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qrect.xml#united">united</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qrect.xml#isEmpty">isEmpty</db:link>() function returns true if <db:link xlink:href="qrect.xml#left">left</db:link>() &gt; <db:link xlink:href="qrect.xml#right">right</db:link>() or <db:link xlink:href="qrect.xml#top">top</db:link>() &gt; <db:link xlink:href="qrect.xml#bottom">bottom</db:link>(). Note that an empty rectangle is not valid: The <db:link xlink:href="qrect.xml#isValid">isValid</db:link>() function returns true if <db:link xlink:href="qrect.xml#left">left</db:link>() &lt;= <db:link xlink:href="qrect.xml#right">right</db:link>() <db:emphasis>and</db:emphasis> <db:link xlink:href="qrect.xml#top">top</db:link>() &lt;= <db:link xlink:href="qrect.xml#bottom">bottom</db:link>(). A null rectangle (<db:link xlink:href="qrect.xml#isNull">isNull</db:link>() == true) on the other hand, has both width and height set to 0.</db:para>
<db:para>Note that due to the way <db:link xlink:href="qrect.xml">QRect</db:link> and <db:link xlink:href="qrectf.xml">QRectF</db:link> are defined, an empty <db:link xlink:href="qrect.xml">QRect</db:link> is defined in essentially the same way as <db:link xlink:href="qrectf.xml">QRectF</db:link>.</db:para>
<db:para>Finally, <db:link xlink:href="qrect.xml">QRect</db:link> objects can be streamed as well as compared.</db:para>
<db:section xml:id="rendering">
<db:title>Rendering</db:title>
<db:para>When using an <db:link xlink:href="qpainter.xml#RenderHint-enum">anti-aliased</db:link> painter, the boundary line of a <db:link xlink:href="qrect.xml">QRect</db:link> will be rendered symmetrically on both sides of the mathematical rectangle's boundary line. But when using an aliased painter (the default) other rules apply.</db:para>
<db:para>Then, when rendering with a one pixel wide pen the <db:link xlink:href="qrect.xml">QRect</db:link>'s boundary line will be rendered to the right and below the mathematical rectangle's boundary line.</db:para>
<db:para>When rendering with a two pixels wide pen the boundary line will be split in the middle by the mathematical rectangle. This will be the case whenever the pen is set to an even number of pixels, while rendering with a pen with an odd number of pixels, the spare pixel will be rendered to the right and below the mathematical rectangle as in the one pixel case.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qrect-diagram-zero.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qrect-diagram-one.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Logical representation</db:para>
</db:td>
<db:td>
<db:para>One pixel wide pen</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qrect-diagram-two.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qrect-diagram-three.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Two pixel wide pen</db:para>
</db:td>
<db:td>
<db:para>Three pixel wide pen</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="coordinates">
<db:title>Coordinates</db:title>
<db:para>The <db:link xlink:href="qrect.xml">QRect</db:link> class provides a collection of functions that return the various rectangle coordinates, and enable manipulation of these. <db:link xlink:href="qrect.xml">QRect</db:link> also provides functions to move the rectangle relative to the various coordinates.</db:para>
<db:para>For example the <db:link xlink:href="qrect.xml#left">left</db:link>(), <db:link xlink:href="qrect.xml#setLeft">setLeft</db:link>() and <db:link xlink:href="qrect.xml#moveLeft">moveLeft</db:link>() functions as an example: <db:link xlink:href="qrect.xml#left">left</db:link>() returns the x-coordinate of the rectangle's left edge, <db:link xlink:href="qrect.xml#setLeft">setLeft</db:link>() sets the left edge of the rectangle to the given x coordinate (it may change the width, but will never change the rectangle's right edge) and <db:link xlink:href="qrect.xml#moveLeft">moveLeft</db:link>() moves the entire rectangle horizontally, leaving the rectangle's left edge at the given x coordinate and its size unchanged.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qrect-coordinates.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Note that for historical reasons the values returned by the <db:link xlink:href="qrect.xml#bottom">bottom</db:link>() and <db:link xlink:href="qrect.xml#right">right</db:link>() functions deviate from the true bottom-right corner of the rectangle: The <db:link xlink:href="qrect.xml#right">right</db:link>() function returns <db:emphasis> <db:link xlink:href="qrect.xml#left">left</db:link>() + <db:link xlink:href="qrect.xml#width">width</db:link>() - 1</db:emphasis> and the <db:link xlink:href="qrect.xml#bottom">bottom</db:link>() function returns <db:emphasis><db:link xlink:href="qrect.xml#top">top</db:link>() + <db:link xlink:href="qrect.xml#height">height</db:link>() - 1</db:emphasis>. The same is the case for the point returned by the <db:link xlink:href="qrect.xml#bottomRight">bottomRight</db:link>() convenience function. In addition, the x and y coordinate of the <db:link xlink:href="qrect.xml#topRight">topRight</db:link>() and <db:link xlink:href="qrect.xml#bottomLeft">bottomLeft</db:link>() functions, respectively, contain the same deviation from the true right and bottom edges.</db:para>
<db:para>We recommend that you use <db:link xlink:href="qrect.xml#x">x</db:link>() + <db:link xlink:href="qrect.xml#width">width</db:link>() and <db:link xlink:href="qrect.xml#y">y</db:link>() + <db:link xlink:href="qrect.xml#height">height</db:link>() to find the true bottom-right corner, and avoid <db:link xlink:href="qrect.xml#right">right</db:link>() and <db:link xlink:href="qrect.xml#bottom">bottom</db:link>(). Another solution is to use <db:link xlink:href="qrectf.xml">QRectF</db:link>: The <db:link xlink:href="qrectf.xml">QRectF</db:link> class defines a rectangle in the plane using floating point accuracy for coordinates, and the <db:link xlink:href="qrectf.xml#right">QRectF::right</db:link>() and <db:link xlink:href="qrectf.xml#bottom">QRectF::bottom</db:link>() functions <db:emphasis>do</db:emphasis> return the right and bottom coordinates.</db:para>
<db:para>It is also possible to add offsets to this rectangle's coordinates using the <db:link xlink:href="qrect.xml#adjust">adjust</db:link>() function, as well as retrieve a new rectangle based on adjustments of the original one using the <db:link xlink:href="qrect.xml#adjusted">adjusted</db:link>() function. If either of the width and height is negative, use the <db:link xlink:href="qrect.xml#normalized">normalized</db:link>() function to retrieve a rectangle where the corners are swapped.</db:para>
<db:para>In addition, <db:link xlink:href="qrect.xml">QRect</db:link> provides the <db:link xlink:href="qrect.xml#getCoords">getCoords</db:link>() function which extracts the position of the rectangle's top-left and bottom-right corner, and the <db:link xlink:href="qrect.xml#getRect">getRect</db:link>() function which extracts the rectangle's top-left corner, width and height. Use the <db:link xlink:href="qrect.xml#setCoords">setCoords</db:link>() and <db:link xlink:href="qrect.xml#setRect">setRect</db:link>() function to manipulate the rectangle's coordinates and dimensions in one go.</db:para>
</db:section>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para><db:link xlink:href="qrect.xml">QRect</db:link> is limited to the minimum and maximum values for the int type. Operations on a <db:link xlink:href="qrect.xml">QRect</db:link> that could potentially result in values outside this range will result in undefined behavior.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrectf.xml">QRectF</db:link></db:member>
<db:member><db:link xlink:href="qregion.xml">QRegion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRect">
<db:title>[constexpr] QRect::QRect()</db:title>
<db:constructorsynopsis>
<db:methodname>QRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QRect-1">
<db:title>[constexpr] QRect::QRect(const QPoint &amp;<db:emphasis>topLeft</db:emphasis>, const QPoint &amp;<db:emphasis>bottomRight</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRect</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>topLeft</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>bottomRight</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect(const QPoint &amp;topLeft, const QPoint &amp;bottomRight)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a rectangle with the given <db:code role="parameter">topLeft</db:code> and <db:code role="parameter">bottomRight</db:code> corners, both included.</db:para>
<db:para>If <db:code role="parameter">bottomRight</db:code> is to higher and to the left of <db:code role="parameter">topLeft</db:code>, the rectangle defined is instead non-inclusive of the corners.</db:para>
<db:note>
<db:para>To ensure both points are included regardless of relative order, use <db:link xlink:href="qrect.xml#span">span</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setTopLeft">setTopLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setBottomRight">setBottomRight</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#span">span</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QRect-2">
<db:title>[constexpr] QRect::QRect(const QPoint &amp;<db:emphasis>topLeft</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRect</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>topLeft</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect(const QPoint &amp;topLeft, const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a rectangle with the given <db:code role="parameter">topLeft</db:code> corner and the given <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setTopLeft">setTopLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setSize">setSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QRect-3">
<db:title>[constexpr] QRect::QRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect(int x, int y, int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a rectangle with (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) as its top-left corner and the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setRect">setRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="adjust">
<db:title>[constexpr] void QRect::adjust(int <db:emphasis>dx1</db:emphasis>, int <db:emphasis>dy1</db:emphasis>, int <db:emphasis>dx2</db:emphasis>, int <db:emphasis>dy2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>adjust</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void adjust(int dx1, int dy1, int dx2, int dy2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">dx1</db:code>, <db:code role="parameter">dy1</db:code>, <db:code role="parameter">dx2</db:code> and <db:code role="parameter">dy2</db:code> respectively to the existing coordinates of the rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#adjusted">adjusted</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setRect">setRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="adjusted">
<db:title>[constexpr] QRect QRect::adjusted(int <db:emphasis>dx1</db:emphasis>, int <db:emphasis>dy1</db:emphasis>, int <db:emphasis>dx2</db:emphasis>, int <db:emphasis>dy2</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>adjusted</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect adjusted(int dx1, int dy1, int dx2, int dy2) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new rectangle with <db:code role="parameter">dx1</db:code>, <db:code role="parameter">dy1</db:code>, <db:code role="parameter">dx2</db:code> and <db:code role="parameter">dy2</db:code> added respectively to the existing coordinates of this rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#adjust">adjust</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bottom">
<db:title>[constexpr] int QRect::bottom() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>bottom</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int bottom() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the y-coordinate of the rectangle's bottom edge.</db:para>
<db:para>Note that for historical reasons this function returns <db:link xlink:href="qrect.xml#top">top</db:link>() + <db:link xlink:href="qrect.xml#height">height</db:link>() - 1; use <db:link xlink:href="qrect.xml#y">y</db:link>() + <db:link xlink:href="qrect.xml#height">height</db:link>() to retrieve the true y-coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setBottom">setBottom</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#bottomLeft">bottomLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#bottomRight">bottomRight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bottomLeft">
<db:title>[constexpr] QPoint QRect::bottomLeft() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>bottomLeft</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint bottomLeft() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the rectangle's bottom-left corner. Note that for historical reasons this function returns <db:link xlink:href="qpoint.xml">QPoint</db:link>(<db:link xlink:href="qrect.xml#left">left</db:link>(), <db:link xlink:href="qrect.xml#top">top</db:link>() + <db:link xlink:href="qrect.xml#height">height</db:link>() - 1).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setBottomLeft">setBottomLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#bottom">bottom</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#left">left</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bottomRight">
<db:title>[constexpr] QPoint QRect::bottomRight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>bottomRight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint bottomRight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the rectangle's bottom-right corner.</db:para>
<db:para>Note that for historical reasons this function returns <db:link xlink:href="qpoint.xml">QPoint</db:link>(<db:link xlink:href="qrect.xml#left">left</db:link>() + <db:link xlink:href="qrect.xml#width">width</db:link>() -1, <db:link xlink:href="qrect.xml#top">top</db:link>() + <db:link xlink:href="qrect.xml#height">height</db:link>() - 1).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setBottomRight">setBottomRight</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#bottom">bottom</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#right">right</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="center">
<db:title>[constexpr] QPoint QRect::center() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>center</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint center() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the center point of the rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#moveCenter">moveCenter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QRect::contains(const QPoint &amp;<db:emphasis>point</db:emphasis>, bool <db:emphasis>proper</db:emphasis> = false) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>proper</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const QPoint &amp;point, bool proper) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the given <db:code role="parameter">point</db:code> is inside or on the edge of the rectangle, otherwise returns false. If <db:code role="parameter">proper</db:code> is true, this function only returns true if the given <db:code role="parameter">point</db:code> is <db:emphasis>inside</db:emphasis> the rectangle (i.e., not on the edge).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#intersects">intersects</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-1">
<db:title>bool QRect::contains(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, bool <db:emphasis>proper</db:emphasis> = false) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>proper</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const QRect &amp;rectangle, bool proper) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if the given <db:code role="parameter">rectangle</db:code> is inside this rectangle. otherwise returns false. If <db:code role="parameter">proper</db:code> is true, this function only returns true if the <db:code role="parameter">rectangle</db:code> is entirely inside this rectangle (not on the edge).</db:para>
</db:section>
<db:section xml:id="contains-2">
<db:title>bool QRect::contains(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(int x, int y) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) is inside this rectangle, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="contains-3">
<db:title>bool QRect::contains(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, bool <db:emphasis>proper</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>proper</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(int x, int y, bool proper) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) is inside or on the edge of the rectangle, otherwise returns false. If <db:code role="parameter">proper</db:code> is true, this function only returns true if the point is entirely inside the rectangle(not on the edge).</db:para>
</db:section>
<db:section xml:id="getCoords">
<db:title>[constexpr] void QRect::getCoords(int *<db:emphasis>x1</db:emphasis>, int *<db:emphasis>y1</db:emphasis>, int *<db:emphasis>x2</db:emphasis>, int *<db:emphasis>y2</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getCoords</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>x1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>y1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>x2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>y2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getCoords(int *x1, int *y1, int *x2, int *y2) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Extracts the position of the rectangle's top-left corner to *<db:code role="parameter">x1</db:code> and *<db:code role="parameter">y1</db:code>, and the position of the bottom-right corner to *<db:code role="parameter">x2</db:code> and *<db:code role="parameter">y2</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setCoords">setCoords</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#getRect">getRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getRect">
<db:title>[constexpr] void QRect::getRect(int *<db:emphasis>x</db:emphasis>, int *<db:emphasis>y</db:emphasis>, int *<db:emphasis>width</db:emphasis>, int *<db:emphasis>height</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getRect</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getRect(int *x, int *y, int *width, int *height) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Extracts the position of the rectangle's top-left corner to *<db:code role="parameter">x</db:code> and *<db:code role="parameter">y</db:code>, and its dimensions to *<db:code role="parameter">width</db:code> and *<db:code role="parameter">height</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setRect">setRect</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#getCoords">getCoords</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="height">
<db:title>[constexpr] int QRect::height() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>height</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int height() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the height of the rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setHeight">setHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#width">width</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intersected">
<db:title>QRect QRect::intersected(const QRect &amp;<db:emphasis>rectangle</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>intersected</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect intersected(const QRect &amp;rectangle) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the intersection of this rectangle and the given <db:code role="parameter">rectangle</db:code>. Note that r.intersected(s) is equivalent to r &amp; s.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qrect-intersect.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#intersects">intersects</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#united">united</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intersects">
<db:title>bool QRect::intersects(const QRect &amp;<db:emphasis>rectangle</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>intersects</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool intersects(const QRect &amp;rectangle) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this rectangle intersects with the given <db:code role="parameter">rectangle</db:code> (i.e., there is at least one pixel that is within both rectangles), otherwise returns false.</db:para>
<db:para>The intersection rectangle can be retrieved using the <db:link xlink:href="qrect.xml#intersected">intersected</db:link>() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[constexpr] bool QRect::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the rectangle is empty, otherwise returns false.</db:para>
<db:para>An empty rectangle has a <db:link xlink:href="qrect.xml#left">left</db:link>() &gt; <db:link xlink:href="qrect.xml#right">right</db:link>() or <db:link xlink:href="qrect.xml#top">top</db:link>() &gt; <db:link xlink:href="qrect.xml#bottom">bottom</db:link>(). An empty rectangle is not valid (i.e., isEmpty() == !<db:link xlink:href="qrect.xml#isValid">isValid</db:link>()).</db:para>
<db:para>Use the <db:link xlink:href="qrect.xml#normalized">normalized</db:link>() function to retrieve a rectangle where the corners are swapped.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#normalized">normalized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>[constexpr] bool QRect::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the rectangle is a null rectangle, otherwise returns false.</db:para>
<db:para>A null rectangle has both the width and the height set to 0 (i.e., <db:link xlink:href="qrect.xml#right">right</db:link>() == <db:link xlink:href="qrect.xml#left">left</db:link>() - 1 and <db:link xlink:href="qrect.xml#bottom">bottom</db:link>() == <db:link xlink:href="qrect.xml#top">top</db:link>() - 1). A null rectangle is also empty, and hence is not valid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>[constexpr] bool QRect::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the rectangle is valid, otherwise returns false.</db:para>
<db:para>A valid rectangle has a <db:link xlink:href="qrect.xml#left">left</db:link>() &lt;= <db:link xlink:href="qrect.xml#right">right</db:link>() and <db:link xlink:href="qrect.xml#top">top</db:link>() &lt;= <db:link xlink:href="qrect.xml#bottom">bottom</db:link>(). Note that non-trivial operations like intersections are not defined for invalid rectangles. A valid rectangle is not empty (i.e., isValid() == !<db:link xlink:href="qrect.xml#isEmpty">isEmpty</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#normalized">normalized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="left">
<db:title>[constexpr] int QRect::left() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>left</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int left() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the x-coordinate of the rectangle's left edge. Equivalent to <db:link xlink:href="qrect.xml#x">x</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setLeft">setLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#topLeft">topLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#bottomLeft">bottomLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="marginsAdded">
<db:title>[constexpr] QRect QRect::marginsAdded(const QMargins &amp;<db:emphasis>margins</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>marginsAdded</db:methodname>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>margins</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect marginsAdded(const QMargins &amp;margins) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a rectangle grown by the <db:code role="parameter">margins</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#marginsRemoved">marginsRemoved</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="marginsRemoved">
<db:title>[constexpr] QRect QRect::marginsRemoved(const QMargins &amp;<db:emphasis>margins</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>marginsRemoved</db:methodname>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>margins</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect marginsRemoved(const QMargins &amp;margins) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the <db:code role="parameter">margins</db:code> from the rectangle, shrinking it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#marginsAdded">marginsAdded</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveBottom">
<db:title>[constexpr] void QRect::moveBottom(int <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveBottom</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveBottom(int y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the rectangle vertically, leaving the rectangle's bottom edge at the given <db:code role="parameter">y</db:code> coordinate. The rectangle's size is unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#bottom">bottom</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setBottom">setBottom</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveTop">moveTop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveBottomLeft">
<db:title>[constexpr] void QRect::moveBottomLeft(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveBottomLeft</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveBottomLeft(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the rectangle, leaving the bottom-left corner at the given <db:code role="parameter">position</db:code>. The rectangle's size is unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setBottomLeft">setBottomLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveBottom">moveBottom</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveLeft">moveLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveBottomRight">
<db:title>[constexpr] void QRect::moveBottomRight(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveBottomRight</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveBottomRight(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the rectangle, leaving the bottom-right corner at the given <db:code role="parameter">position</db:code>. The rectangle's size is unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setBottomRight">setBottomRight</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveRight">moveRight</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveBottom">moveBottom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveCenter">
<db:title>[constexpr] void QRect::moveCenter(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveCenter</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveCenter(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the rectangle, leaving the center point at the given <db:code role="parameter">position</db:code>. The rectangle's size is unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#center">center</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveLeft">
<db:title>[constexpr] void QRect::moveLeft(int <db:emphasis>x</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveLeft</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveLeft(int x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the rectangle horizontally, leaving the rectangle's left edge at the given <db:code role="parameter">x</db:code> coordinate. The rectangle's size is unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setLeft">setLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveRight">moveRight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveRight">
<db:title>[constexpr] void QRect::moveRight(int <db:emphasis>x</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveRight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveRight(int x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the rectangle horizontally, leaving the rectangle's right edge at the given <db:code role="parameter">x</db:code> coordinate. The rectangle's size is unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setRight">setRight</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveLeft">moveLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveTo">
<db:title>[constexpr] void QRect::moveTo(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveTo</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveTo(int x, int y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the rectangle, leaving the top-left corner at the given position (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>). The rectangle's size is unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#translate">translate</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveTopLeft">moveTopLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveTo-1">
<db:title>[constexpr] void QRect::moveTo(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveTo</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveTo(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the rectangle, leaving the top-left corner at the given <db:code role="parameter">position</db:code>.</db:para>
</db:section>
<db:section xml:id="moveTop">
<db:title>[constexpr] void QRect::moveTop(int <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveTop</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveTop(int y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the rectangle vertically, leaving the rectangle's top edge at the given <db:code role="parameter">y</db:code> coordinate. The rectangle's size is unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#top">top</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setTop">setTop</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveBottom">moveBottom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveTopLeft">
<db:title>[constexpr] void QRect::moveTopLeft(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveTopLeft</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveTopLeft(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the rectangle, leaving the top-left corner at the given <db:code role="parameter">position</db:code>. The rectangle's size is unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setTopLeft">setTopLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveTop">moveTop</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveLeft">moveLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveTopRight">
<db:title>[constexpr] void QRect::moveTopRight(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveTopRight</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveTopRight(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the rectangle, leaving the top-right corner at the given <db:code role="parameter">position</db:code>. The rectangle's size is unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setTopRight">setTopRight</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveTop">moveTop</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveRight">moveRight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalized">
<db:title>QRect QRect::normalized() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>normalized</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect normalized() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a normalized rectangle; i.e., a rectangle that has a non-negative width and height.</db:para>
<db:para>If <db:link xlink:href="qrect.xml#width">width</db:link>() &lt; 0 the function swaps the left and right corners, and it swaps the top and bottom corners if <db:link xlink:href="qrect.xml#height">height</db:link>() &lt; 0. The corners are at the same time changed from being non-inclusive to inclusive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="right">
<db:title>[constexpr] int QRect::right() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>right</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int right() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the x-coordinate of the rectangle's right edge.</db:para>
<db:para>Note that for historical reasons this function returns <db:link xlink:href="qrect.xml#left">left</db:link>() + <db:link xlink:href="qrect.xml#width">width</db:link>() - 1; use <db:link xlink:href="qrect.xml#x">x</db:link>() + <db:link xlink:href="qrect.xml#width">width</db:link>() to retrieve the true x-coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setRight">setRight</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#topRight">topRight</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#bottomRight">bottomRight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBottom">
<db:title>[constexpr] void QRect::setBottom(int <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBottom</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBottom(int y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the bottom edge of the rectangle to the given <db:code role="parameter">y</db:code> coordinate. May change the height, but will never change the top edge of the rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#bottom">bottom</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveBottom">moveBottom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBottomLeft">
<db:title>[constexpr] void QRect::setBottomLeft(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBottomLeft</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBottomLeft(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the bottom-left corner of the rectangle to the given <db:code role="parameter">position</db:code>. May change the size, but will never change the top-right corner of the rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#bottomLeft">bottomLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveBottomLeft">moveBottomLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBottomRight">
<db:title>[constexpr] void QRect::setBottomRight(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBottomRight</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBottomRight(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the bottom-right corner of the rectangle to the given <db:code role="parameter">position</db:code>. May change the size, but will never change the top-left corner of the rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#bottomRight">bottomRight</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveBottomRight">moveBottomRight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCoords">
<db:title>[constexpr] void QRect::setCoords(int <db:emphasis>x1</db:emphasis>, int <db:emphasis>y1</db:emphasis>, int <db:emphasis>x2</db:emphasis>, int <db:emphasis>y2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCoords</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCoords(int x1, int y1, int x2, int y2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the coordinates of the rectangle's top-left corner to (<db:code role="parameter">x1</db:code>, <db:code role="parameter">y1</db:code>), and the coordinates of its bottom-right corner to (<db:code role="parameter">x2</db:code>, <db:code role="parameter">y2</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#getCoords">getCoords</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setRect">setRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeight">
<db:title>[constexpr] void QRect::setHeight(int <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHeight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHeight(int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the height of the rectangle to the given <db:code role="parameter">height</db:code>. The bottom edge is changed, but not the top one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setSize">setSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLeft">
<db:title>[constexpr] void QRect::setLeft(int <db:emphasis>x</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLeft</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLeft(int x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the left edge of the rectangle to the given <db:code role="parameter">x</db:code> coordinate. May change the width, but will never change the right edge of the rectangle.</db:para>
<db:para>Equivalent to <db:link xlink:href="qrect.xml#setX">setX</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveLeft">moveLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRect">
<db:title>[constexpr] void QRect::setRect(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRect(int x, int y, int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the coordinates of the rectangle's top-left corner to (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), and its size to the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#getRect">getRect</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setCoords">setCoords</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRight">
<db:title>[constexpr] void QRect::setRight(int <db:emphasis>x</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRight(int x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the right edge of the rectangle to the given <db:code role="parameter">x</db:code> coordinate. May change the width, but will never change the left edge of the rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveRight">moveRight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSize">
<db:title>[constexpr] void QRect::setSize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSize</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSize(const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the size of the rectangle to the given <db:code role="parameter">size</db:code>. The top-left corner is not moved.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setWidth">setWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setHeight">setHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTop">
<db:title>[constexpr] void QRect::setTop(int <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTop</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTop(int y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the top edge of the rectangle to the given <db:code role="parameter">y</db:code> coordinate. May change the height, but will never change the bottom edge of the rectangle.</db:para>
<db:para>Equivalent to <db:link xlink:href="qrect.xml#setY">setY</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#top">top</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveTop">moveTop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTopLeft">
<db:title>[constexpr] void QRect::setTopLeft(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTopLeft</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTopLeft(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the top-left corner of the rectangle to the given <db:code role="parameter">position</db:code>. May change the size, but will never change the bottom-right corner of the rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#topLeft">topLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveTopLeft">moveTopLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTopRight">
<db:title>[constexpr] void QRect::setTopRight(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTopRight</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTopRight(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the top-right corner of the rectangle to the given <db:code role="parameter">position</db:code>. May change the size, but will never change the bottom-left corner of the rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#topRight">topRight</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveTopRight">moveTopRight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWidth">
<db:title>[constexpr] void QRect::setWidth(int <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWidth(int width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the width of the rectangle to the given <db:code role="parameter">width</db:code>. The right edge is changed, but not the left one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#width">width</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setSize">setSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setX">
<db:title>[constexpr] void QRect::setX(int <db:emphasis>x</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setX</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setX(int x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the left edge of the rectangle to the given <db:code role="parameter">x</db:code> coordinate. May change the width, but will never change the right edge of the rectangle.</db:para>
<db:para>Equivalent to <db:link xlink:href="qrect.xml#setLeft">setLeft</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setY">setY</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setTopLeft">setTopLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setY">
<db:title>[constexpr] void QRect::setY(int <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setY</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setY(int y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the top edge of the rectangle to the given <db:code role="parameter">y</db:code> coordinate. May change the height, but will never change the bottom edge of the rectangle.</db:para>
<db:para>Equivalent to <db:link xlink:href="qrect.xml#setTop">setTop</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#setTopLeft">setTopLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>[constexpr] QSize QRect::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setSize">setSize</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#width">width</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#height">height</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="span">
<db:title>[static constexpr, since 6.0] QRect QRect::span(const QPoint &amp;<db:emphasis>p1</db:emphasis>, const QPoint &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QRect</db:type>
<db:methodname>span</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect span(const QPoint &amp;p1, const QPoint &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a rectangle spanning the two points <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code>, including both and everything in between.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="toCGRect">
<db:title>CGRect QRect::toCGRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>CGRect</db:type>
<db:methodname>toCGRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">CGRect toCGRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a CGRect from a <db:link xlink:href="qrect.xml">QRect</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrectf.xml#fromCGRect">QRectF::fromCGRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toRectF">
<db:title>[constexpr, since 6.4] QRectF QRect::toRectF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>toRectF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF toRectF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this rectangle as a rectangle with floating point accuracy.</db:para>
<db:note>
<db:para>This function, like the <db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:link xlink:href="qrect.xml">QRect</db:link>) constructor, preserves the <db:link xlink:href="qrect.xml#size">size</db:link>() of the rectangle, not its <db:link xlink:href="qrect.xml#bottomRight">bottomRight</db:link>() corner.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrectf.xml#toRect">QRectF::toRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="top">
<db:title>[constexpr] int QRect::top() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>top</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int top() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the y-coordinate of the rectangle's top edge. Equivalent to <db:link xlink:href="qrect.xml#y">y</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setTop">setTop</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#topLeft">topLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#topRight">topRight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="topLeft">
<db:title>[constexpr] QPoint QRect::topLeft() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>topLeft</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint topLeft() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the rectangle's top-left corner.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setTopLeft">setTopLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#top">top</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#left">left</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="topRight">
<db:title>[constexpr] QPoint QRect::topRight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>topRight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint topRight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the rectangle's top-right corner.</db:para>
<db:para>Note that for historical reasons this function returns <db:link xlink:href="qpoint.xml">QPoint</db:link>(<db:link xlink:href="qrect.xml#left">left</db:link>() + <db:link xlink:href="qrect.xml#width">width</db:link>() -1, <db:link xlink:href="qrect.xml#top">top</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setTopRight">setTopRight</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#top">top</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#right">right</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate">
<db:title>[constexpr] void QRect::translate(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(int dx, int dy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the rectangle <db:code role="parameter">dx</db:code> along the x axis and <db:code role="parameter">dy</db:code> along the y axis, relative to the current position. Positive values move the rectangle to the right and down.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#moveTopLeft">moveTopLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#moveTo">moveTo</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#translated">translated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate-1">
<db:title>[constexpr] void QRect::translate(const QPoint &amp;<db:emphasis>offset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(const QPoint &amp;offset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Moves the rectangle <db:code role="parameter">offset</db:code>.<db:link xlink:href="qpoint.xml#x">x</db:link>() along the x axis and <db:code role="parameter">offset</db:code>.<db:link xlink:href="qpoint.xml#y">y</db:link>() along the y axis, relative to the current position.</db:para>
</db:section>
<db:section xml:id="translated">
<db:title>[constexpr] QRect QRect::translated(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>translated</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect translated(int dx, int dy) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of the rectangle that is translated <db:code role="parameter">dx</db:code> along the x axis and <db:code role="parameter">dy</db:code> along the y axis, relative to the current position. Positive values move the rectangle to the right and down.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translated-1">
<db:title>[constexpr] QRect QRect::translated(const QPoint &amp;<db:emphasis>offset</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>translated</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect translated(const QPoint &amp;offset) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a copy of the rectangle that is translated <db:code role="parameter">offset</db:code>.<db:link xlink:href="qpoint.xml#x">x</db:link>() along the x axis and <db:code role="parameter">offset</db:code>.<db:link xlink:href="qpoint.xml#y">y</db:link>() along the y axis, relative to the current position.</db:para>
</db:section>
<db:section xml:id="transposed">
<db:title>[constexpr] QRect QRect::transposed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>transposed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect transposed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of the rectangle that has its width and height exchanged:</db:para>
<db:programlisting language="cpp">QRect r = {15, 51, 42, 24};
r = r.transposed(); // r == {15, 51, 24, 42}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#transposed">QSize::transposed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="united">
<db:title>QRect QRect::united(const QRect &amp;<db:emphasis>rectangle</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>united</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect united(const QRect &amp;rectangle) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rectangle of this rectangle and the given <db:code role="parameter">rectangle</db:code>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qrect-unite.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#intersected">intersected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width">
<db:title>[constexpr] int QRect::width() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>width</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int width() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of the rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setWidth">setWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="x">
<db:title>[constexpr] int QRect::x() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>x</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int x() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the x-coordinate of the rectangle's left edge. Equivalent to <db:link xlink:href="qrect.xml#left">left</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#topLeft">topLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y">
<db:title>[constexpr] int QRect::y() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>y</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int y() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the y-coordinate of the rectangle's top edge. Equivalent to <db:link xlink:href="qrect.xml#top">top</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#setY">setY</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#topLeft">topLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-and">
<db:title>QRect QRect::operator&amp;(const QRect &amp;<db:emphasis>rectangle</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>operator&amp;</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect operator&amp;(const QRect &amp;rectangle) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the intersection of this rectangle and the given <db:code role="parameter">rectangle</db:code>. Returns an empty rectangle if there is no intersection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#intersected">intersected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-and-eq">
<db:title>QRect &amp;QRect::operator&amp;=(const QRect &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRect &amp;</db:type>
<db:methodname>operator&amp;=</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect &amp; operator&amp;=(const QRect &amp;rectangle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Intersects this rectangle with the given <db:code role="parameter">rectangle</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#intersected">intersected</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#operator-and">operator&amp;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>[constexpr] QRect &amp;QRect::operator+=(const QMargins &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRect &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>margins</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect &amp; operator+=(const QMargins &amp;margins)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the <db:code role="parameter">margins</db:code> to the rectangle, growing it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#marginsAdded">marginsAdded</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#marginsRemoved">marginsRemoved</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--eq">
<db:title>[constexpr] QRect &amp;QRect::operator-=(const QMargins &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRect &amp;</db:type>
<db:methodname>operator-=</db:methodname>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>margins</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect &amp; operator-=(const QMargins &amp;margins)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a rectangle shrunk by the <db:code role="parameter">margins</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#marginsRemoved">marginsRemoved</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#marginsAdded">marginsAdded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c">
<db:title>QRect QRect::operator|(const QRect &amp;<db:emphasis>rectangle</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>operator|</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect operator|(const QRect &amp;rectangle) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rectangle of this rectangle and the given <db:code role="parameter">rectangle</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#operator-7c-eq">operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#united">united</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c-eq">
<db:title>QRect &amp;QRect::operator|=(const QRect &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRect &amp;</db:type>
<db:methodname>operator|=</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect &amp; operator|=(const QRect &amp;rectangle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unites this rectangle with the given <db:code role="parameter">rectangle</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrect.xml#united">united</db:link>()</db:member>
<db:member><db:link xlink:href="qrect.xml#operator-7c">operator|</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[constexpr] bool operator!=(const QRect &amp;<db:emphasis>r1</db:emphasis>, const QRect &amp;<db:emphasis>r2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QRect &amp;r1, const QRect &amp;r2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the rectangles <db:code role="parameter">r1</db:code> and <db:code role="parameter">r2</db:code> are different, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-2b">
<db:title>[constexpr] QRect operator+(const QRect &amp;<db:emphasis>rectangle</db:emphasis>, const QMargins &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRect</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>margins</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect operator+(const QRect &amp;rectangle, const QMargins &amp;margins)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:code role="parameter">rectangle</db:code> grown by the <db:code role="parameter">margins</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2b-1">
<db:title>[constexpr] QRect operator+(const QMargins &amp;<db:emphasis>margins</db:emphasis>, const QRect &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRect</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>margins</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect operator+(const QMargins &amp;margins, const QRect &amp;rectangle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the <db:code role="parameter">rectangle</db:code> grown by the <db:code role="parameter">margins</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-">
<db:title>[constexpr] QRect operator-(const QRect &amp;<db:emphasis>lhs</db:emphasis>, const QMargins &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRect</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect operator-(const QRect &amp;lhs, const QMargins &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:code role="parameter">lhs</db:code> rectangle shrunk by the <db:code role="parameter">rhs</db:code> margins.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QRect &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QRect &amp;rectangle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the given <db:code role="parameter">rectangle</db:code> to the given <db:code role="parameter">stream</db:code>, and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[constexpr] bool operator==(const QRect &amp;<db:emphasis>r1</db:emphasis>, const QRect &amp;<db:emphasis>r2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QRect &amp;r1, const QRect &amp;r2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the rectangles <db:code role="parameter">r1</db:code> and <db:code role="parameter">r2</db:code> are equal, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QRect &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QRect &amp;rectangle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a rectangle from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">rectangle</db:code>, and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
