<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Magic 8 Ball</db:title>
<db:productname>QtGrpc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GRPC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Creating a HTTP2 connection between a Qt GRPC client and a C++ gRPC server.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Magic 8 ball shows an answer it receives from a server:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/answer.webp"/>
</db:imageobject>
</db:mediaobject>
<db:para>Magic 8 ball has the following components:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>magic8ball</db:code> Qt GRPC client application that includes the <db:link xlink:href="qt-add-protobuf.xml">qt_add_protobuf()</db:link> and <db:link xlink:href="qt-add-grpc.xml">qt_add_grpc()</db:link> CMake functions for message and service Qt code generation.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>SimpleGrpcServer</db:code> application that calls C++ gRPC plugin for generating server code and implementing simple server logic.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>you need the C++ gRPC plugin installed. Find details here: <db:link xlink:href="qtgrpc-index.xml#module-prerequisites">Module prerequisites</db:link></db:para>
</db:note>
<db:para>Both components use generated messages from the protobuf schema described in the <db:code>exampleservice.proto</db:code> file:</db:para>
<db:programlisting language="cpp">syntax = &quot;proto3&quot;;

package qtgrpc.examples;

message AnswerRequest {
    string message = 1;
}

message AnswerResponse {
    string message = 1;
}

service ExampleService {
    rpc answerMethod(AnswerRequest) returns (AnswerResponse) {}
}
</db:programlisting>
<db:para>The client application binds on the <db:code>localhost</db:code> with port <db:code>50051</db:code>:</db:para>
<db:programlisting language="cpp">QGrpcChannelOptions channelOptions(QUrl(&quot;http://localhost:50051&quot;, QUrl::StrictMode));
m_client-&amp;gt;attachChannel(std::make_shared&amp;lt;QGrpcHttp2Channel&amp;gt;(channelOptions));
</db:programlisting>
<db:para>And sends a request to the server part:</db:para>
<db:programlisting language="cpp">void ClientService::sendRequest()
{
    // clean error on UI before new request
    emit errorRecieved(&quot;&quot;);

    AnswerRequest request;
    request.setMessage(&quot;sleep&quot;);

    m_client-&amp;gt;answerMethod(request, m_response.get());
}
</db:programlisting>
<db:para>Click the <db:guilabel>Ask question</db:guilabel> button to send the request to the SimpleGrpcServer application.</db:para>
<db:para>The SimpleGrpcServer application chooses a random answer from the list of answers and sends the data to the client's port.</db:para>
<db:programlisting language="cpp">Status ExampleServiceServiceImpl::answerMethod(grpc::ServerContext *,
                                               const AnswerRequest *request,
                                               AnswerResponse *response)
{
    if (request-&amp;gt;message() == &quot;sleep&quot;)
        QThread::msleep(2000);

    response-&amp;gt;set_message(std::string(answers[generateRandomIndex()]));
    return Status();
}
</db:programlisting>
<db:para>After receiving a response the client application shows the answer.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtgrpc.git/tree/examples/grpc/magic8ball?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
