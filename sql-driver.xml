<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SQL Database Drivers</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to configure and install Qt SQL drivers for supported databases.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt SQL module uses driver plugins to communicate with the different database APIs. Since Qt's SQL Module API is database-independent, all database-specific code is contained within these drivers. Several drivers are supplied with Qt and other drivers can be added. The driver source code is supplied and can be used as a model for <db:link xlink:href="sql-driver.xml#how-to-write-your-own-database-driver">writing your own drivers</db:link>.</db:para>
<db:section xml:id="supported-databases">
<db:title>Supported Databases</db:title>
<db:para>The table below lists the drivers included with Qt. Due to license incompatibilities with the GPL, not all of the plugins are provided with Open Source Versions of Qt.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Driver name</db:para>
</db:th>
<db:th>
<db:para>DBMS</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qdb2-for-ibm-db2-version-7-1-and-above">QDB2</db:link></db:para>
</db:td>
<db:td>
<db:para>IBM DB2 (version 7.1 and above)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qibase-for-borland-interbase">QIBASE</db:link></db:para>
</db:td>
<db:td>
<db:para>Borland InterBase</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qmysql-for-mysql-4-and-higher">QMYSQL</db:link></db:para>
</db:td>
<db:td>
<db:para>MySQL</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qoci-for-the-oracle-call-interface-oci">QOCI</db:link></db:para>
</db:td>
<db:td>
<db:para>Oracle Call Interface Driver</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qodbc-for-open-database-connectivity-odbc">QODBC</db:link></db:para>
</db:td>
<db:td>
<db:para>Open Database Connectivity (ODBC) - Microsoft SQL Server and other ODBC-compliant databases</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qpsql-for-postgresql-version-7-3-and-above">QPSQL</db:link></db:para>
</db:td>
<db:td>
<db:para>PostgreSQL (versions 7.3 and above)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qsqlite2-for-sqlite-version-2">QSQLITE2</db:link></db:para>
</db:td>
<db:td>
<db:para>SQLite version 2</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qsqlite-for-sqlite-version-3-and-above">QSQLITE</db:link></db:para>
</db:td>
<db:td>
<db:para>SQLite version 3</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qtds-for-sybase-adaptive-server">QTDS</db:link></db:para>
</db:td>
<db:td>
<db:para>Sybase Adaptive Server</db:para>
<db:note>
<db:para>obsolete from Qt 4.7</db:para>
</db:note>
</db:td>
</db:tr>
</db:informaltable>
<db:para>SQLite is the in-process database system with the best test coverage and support on all platforms. Oracle via OCI, and PostreSQL and MySQL through either ODBC or a native driver are well-tested on Windows and Linux. The completeness of the support for other systems depends on the availability and quality of client libraries.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> To build a driver plugin you need to have the appropriate client library for your Database Management System (DBMS). This provides access to the API exposed by the DBMS, and is typically shipped with it. Most installation programs also allow you to install &quot;development libraries&quot;, and these are what you need. These libraries are responsible for the low-level communication with the DBMS.</db:para>
<db:anchor xml:id="building"/>
</db:section>
<db:section xml:id="building-the-drivers-using-configure">
<db:title>Building the Drivers Using Configure</db:title>
<db:para>On Unix and Mac OS X, the Qt <db:code>configure</db:code> script tries to automatically detect the available client libraries on your machine. Run <db:code>configure -help</db:code> to see what drivers can be built. You should get an output similar to this:</db:para>
<db:programlisting language="cpp">-no-sql-&lt;driver&gt; ... Disable SQL &lt;driver&gt; entirely.
-qt-sql-&lt;driver&gt; ... Enable a SQL &lt;driver&gt; in the Qt Library, by default
                     none are turned on.
-plugin-sql-&lt;driver&gt; Enable SQL &lt;driver&gt; as a plugin to be linked to
                     at run time.

                     Possible values for &lt;driver&gt;:
                     [ db2 ibase mysql oci odbc psql sqlite sqlite2 tds ]
</db:programlisting>
<db:para>The <db:code>configure</db:code> script cannot detect the necessary libraries and include files if they are not in the standard paths, so it may be necessary to specify these paths using the <db:code>-I</db:code> and <db:code>-L</db:code> command-line options. For example, if your MySQL include files are installed in <db:code>/usr/local/mysql</db:code> (or in <db:code>C:\mysql\include</db:code> on Windows), then pass the following parameter to configure: <db:code>-I/usr/local/mysql</db:code> (or <db:code>-I C:\mysql\include</db:code> for Windows).</db:para>
<db:para>On Windows the <db:code>-I</db:code> parameter doesn't accept spaces in filenames, so use the 8.3 name instead; for example, use <db:code>C:\progra~1\mysql</db:code> instead of <db:code>C:\Program Files\mysql</db:code>.</db:para>
<db:para>Use the <db:code>-qt-sql-&lt;driver&gt;</db:code> parameter to build the database driver statically into your Qt library or <db:code>-plugin-sql-&lt;driver&gt;</db:code> to build the driver as a plugin. Look at the sections that follow for additional information about required libraries.</db:para>
<db:anchor xml:id="buildingmanually"/>
</db:section>
<db:section xml:id="building-the-plugins-manually">
<db:title>Building the Plugins Manually</db:title>
<db:anchor xml:id="qmysql"/>
<db:section xml:id="qmysql-for-mysql-4-and-higher">
<db:title>QMYSQL for MySQL 4 and higher</db:title>
<db:section xml:id="qmysql-stored-procedure-support">
<db:title>QMYSQL Stored Procedure Support</db:title>
<db:para>MySQL 5 introduces stored procedure support at the SQL level, but no API to control IN, OUT and INOUT parameters. Therefore, parameters have to be set and read using SQL commands instead of QSqlQuery::bindValue().</db:para>
<db:para>Example stored procedure:</db:para>
<db:programlisting language="cpp">create procedure qtestproc (OUT param1 INT, OUT param2 INT)
BEGIN
    set param1 = 42;
    set param2 = 43;
END
</db:programlisting>
<db:para>Source code to access the OUT values:</db:para>
<db:programlisting language="cpp">QSqlQuery q;
q.exec(&quot;call qtestproc (@outval1, @outval2)&quot;);
q.exec(&quot;select @outval1, @outval2&quot;);
q.next();
qDebug() &lt;&lt; q.value(0) &lt;&lt; q.value(1); // outputs &quot;42&quot; and &quot;43&quot;
</db:programlisting>
<db:para><db:emphasis role="bold">Note:</db:emphasis> <db:code>@outval1</db:code> and <db:code>@outval2</db:code> are variables local to the current connection and will not be affected by queries sent from another host or connection.</db:para>
</db:section>
<db:section xml:id="embedded-mysql-server">
<db:title>Embedded MySQL Server</db:title>
<db:para>The MySQL embedded server is a drop-in replacement for the normal client library. With the embedded MySQL server, a MySQL server is not required to use MySQL functionality.</db:para>
<db:para>To use the embedded MySQL server, simply link the Qt plugin to <db:code>libmysqld</db:code> instead of libmysqlclient. This can be done by replacing <db:code>-lmysqlclient_r</db:code> by <db:code>-lmysqld</db:code> in the <db:code>qmake</db:code> command in the section below.</db:para>
<db:para>Please refer to the MySQL documentation, chapter &quot;libmysqld, the Embedded MySQL Server Library&quot; for more information about the MySQL embedded server.</db:para>
</db:section>
<db:section xml:id="how-to-build-the-qmysql-plugin-on-unix-and-mac-os-x">
<db:title>How to Build the QMYSQL Plugin on Unix and Mac OS X</db:title>
<db:para>You need the MySQL header files and as well as the shared library <db:code>libmysqlclient.so</db:code>. Depending on your Linux distribution you may need to install a package which is usually called &quot;mysql-devel&quot;.</db:para>
<db:para>Tell qmake where to find the MySQL header files and shared libraries (here it is assumed that MySQL is installed in <db:code>/usr/local</db:code>) and run <db:code>make</db:code>:</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/mysql
qmake &quot;INCLUDEPATH+=/usr/local/include&quot; &quot;LIBS+=-L/usr/local/lib -lmysqlclient_r&quot; mysql.pro
make
</db:programlisting>
<db:para>After installing Qt, you also need to install the plugin in the standard location:</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/mysql
make install
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-qmysql-plugin-on-windows">
<db:title>How to Build the QMYSQL Plugin on Windows</db:title>
<db:para>You need to get the MySQL installation files. Run <db:code>SETUP.EXE</db:code> and choose &quot;Custom Install&quot;. Install the &quot;Libs &amp; Include Files&quot; Module. Build the plugin as follows (here it is assumed that MySQL is installed in <db:code>C:\MySQL</db:code>):</db:para>
<db:programlisting language="cpp">cd %QTDIR%\qtbase\src\plugins\sqldrivers\mysql
qmake &quot;INCLUDEPATH+=C:/MySQL/include&quot; &quot;LIBS+=C:/MYSQL/MySQL Server &lt;version&gt;/lib/opt/libmysql.lib&quot; mysql.pro
nmake
</db:programlisting>
<db:para>If you are not using a Microsoft compiler, replace <db:code>nmake</db:code> with <db:code>make</db:code> in the line above.</db:para>
<db:note>
<db:para>This database plugin is not supported for Windows CE.</db:para>
</db:note>
<db:note>
<db:para>Including <db:code>&quot;-o Makefile&quot;</db:code> as an argument to qmake to tell it where to build the makefile can cause the plugin to be built in release mode only. If you are expecting a debug version to be built as well, don't use the <db:code>&quot;-o Makefile&quot;</db:code> option.</db:para>
</db:note>
<db:anchor xml:id="qoci"/>
</db:section>
</db:section>
<db:section xml:id="qoci-for-the-oracle-call-interface-oci">
<db:title>QOCI for the Oracle Call Interface (OCI)</db:title>
<db:section xml:id="general-information-about-the-oci-plugin">
<db:title>General Information about the OCI plugin</db:title>
<db:para>The Qt OCI plugin supports Oracle 9i, 10g and higher. After connecting to the Oracle server, the plugin will auto-detect the database version and enable features accordingly.</db:para>
<db:para>It's possible to connect to a Oracle database without a tnsnames.ora file. This requires that the database SID is passed to the driver as the database name and that a hostname is given.</db:para>
</db:section>
<db:section xml:id="oci-user-authentication">
<db:title>OCI User Authentication</db:title>
<db:para>The Qt OCI plugin supports authentication using external credentials (OCI_CRED_EXT). Usually, this means that the database server will use the user authentication provided by the operating system instead of its own authentication mechanism.</db:para>
<db:para>Leave the username and password empty when opening a connection with QSqlDatabase to use the external credentials authentication.</db:para>
</db:section>
<db:section xml:id="oci-blob-lob-support">
<db:title>OCI BLOB/LOB Support</db:title>
<db:para>Binary Large Objects (BLOBs) can be read and written, but be aware that this process may require a lot of memory. You should use a forward only query to select LOB fields (see QSqlQuery::setForwardOnly()).</db:para>
<db:para>Inserting BLOBs should be done using either a prepared query where the BLOBs are bound to placeholders or QSqlTableModel, which uses a prepared query to do this internally.</db:para>
</db:section>
<db:section xml:id="how-to-build-the-oci-plugin-on-unix-and-mac-os-x">
<db:title>How to Build the OCI Plugin on Unix and Mac OS X</db:title>
<db:para>For Oracle 10g, all you need is the &quot;Instant Client Package - Basic&quot; and &quot;Instant Client Package - SDK&quot;. For Oracle prior to 10g, you require the standard Oracle client and the SDK packages.</db:para>
<db:para>Oracle library files required to build the driver:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>libclntsh.so</db:code> (all versions)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>libwtc9.so</db:code> (only Oracle 9)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Tell <db:code>qmake</db:code> where to find the Oracle header files and shared libraries and run make:</db:para>
<db:para>For Oracle version 9:</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/oci
qmake &quot;INCLUDEPATH+=$ORACLE_HOME/rdbms/public $ORACLE_HOME/rdbms/demo&quot; &quot;LIBS+=-L$ORACLE_HOME/lib -lclntsh -lwtc9&quot; oci.pro
make
</db:programlisting>
<db:para>For Oracle version 10, we assume that you installed the RPM packages of the Instant Client Package SDK (you need to adjust the version number accordingly):</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/oci
qmake &quot;INCLUDEPATH+=/usr/include/oracle/10.1.0.3/client/&quot; &quot;LIBS+=-L/usr/lib/oracle/10.1.0.3/client/lib -lclntsh&quot; oci.pro
make
</db:programlisting>
<db:para><db:emphasis role="bold">Note:</db:emphasis> If you are using the Oracle Instant Client package, you will need to set LD_LIBRARY_PATH when building the OCI SQL plugin and when running an application that uses the OCI SQL plugin. You can avoid this requirement by setting and RPATH and listing all of the libraries to link to. Here is an example:</db:para>
<db:programlisting language="cpp">configure -I /usr/include/oracle/10.1.0.3/client -L /usr/lib/oracle/10.1.0.3/client/lib -R /usr/lib/oracle/10.1.0.3/client/lib -lclntsh -lnnz10
make
</db:programlisting>
<db:para>If you wish to build the OCI plugin manually with this method the procedure looks like this:</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/oci
qmake &quot;INCLUDEPATH+=/usr/include/oracle/10.1.0.3/client&quot; &quot;LIBS+=-L/usr/lib/oracle/10.1.0.3/client/lib -Wl,-rpath,/usr/lib/oracle/10.1.0.3/client/lib -lclntsh -lnnz10&quot; oci.pro
make
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-oci-plugin-on-windows">
<db:title>How to Build the OCI Plugin on Windows</db:title>
<db:para>Choosing the option &quot;Programmer&quot; in the Oracle Client Installer from the Oracle Client Installation CD is generally sufficient to build the plugin. For some versions of Oracle Client, you may also need to select the &quot;Call Interface (OCI)&quot; option if it is available.</db:para>
<db:para>Build the plugin as follows (here it is assumed that Oracle Client is installed in <db:code>C:\oracle</db:code>):</db:para>
<db:programlisting language="cpp">set INCLUDE=%INCLUDE%;c:\oracle\oci\include
set LIB=%LIB%;c:\oracle\oci\lib\msvc
cd %QTDIR%\qtbase\src\plugins\sqldrivers\oci
qmake oci.pro
nmake
</db:programlisting>
<db:para>If you are not using a Microsoft compiler, replace <db:code>nmake</db:code> with <db:code>make</db:code> in the line above.</db:para>
<db:para>When you run your application you will also need to add the <db:code>oci.dll</db:code> path to your <db:code>PATH</db:code> environment variable:</db:para>
<db:programlisting language="cpp">set PATH=%PATH%;c:\oracle\bin
</db:programlisting>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This database plugin is not supported for Windows CE.</db:para>
<db:anchor xml:id="qodbc"/>
</db:section>
</db:section>
<db:section xml:id="qodbc-for-open-database-connectivity-odbc">
<db:title>QODBC for Open Database Connectivity (ODBC)</db:title>
<db:section xml:id="general-information-about-the-odbc-plugin">
<db:title>General Information about the ODBC plugin</db:title>
<db:para>ODBC is a general interface that allows you to connect to multiple DBMSs using a common interface. The QODBC driver allows you to connect to an ODBC driver manager and access the available data sources. Note that you also need to install and configure ODBC drivers for the ODBC driver manager that is installed on your system. The QODBC plugin then allows you to use these data sources in your Qt applications.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> You should use native drivers in preference to the ODBC driver where they are available. ODBC support can be used as a fallback for compliant databases if no native drivers are available.</db:para>
<db:para>On Windows an ODBC driver manager should be installed by default. For Unix systems there are some implementations which must be installed first. Note that every client that uses your application is required to have an ODBC driver manager installed, otherwise the QODBC plugin will not work.</db:para>
<db:para>Be aware that when connecting to an ODBC datasource you must pass in the name of the ODBC datasource to the QSqlDatabase::setDatabaseName() function rather than the actual database name.</db:para>
<db:para>The QODBC Plugin needs an ODBC compliant driver manager version 2.0 or later to work. Some ODBC drivers claim to be version 2.0 compliant, but do not offer all the necessary functionality. The QODBC plugin therefore checks whether the data source can be used after a connection has been established and refuses to work if the check fails. If you don't like this behavior, you can remove the <db:code>#define ODBC_CHECK_DRIVER</db:code> line from the file <db:code>qsql_odbc.cpp</db:code>. Do this at your own risk!</db:para>
<db:para>By default, Qt instructs the ODBC driver to behave as an ODBC 2.x driver. However, for some <db:emphasis>driver-manager/ODBC 3.x-driver</db:emphasis> combinations (e.g., <db:emphasis>unixODBC/MaxDB ODBC</db:emphasis>), telling the ODBC driver to behave as a 2.x driver can cause the driver plugin to have unexpected behavior. To avoid this problem, instruct the ODBC driver to behave as a 3.x driver by <db:link xlink:href="">setting the connect option</db:link> <db:code>&quot;SQL_ATTR_ODBC_VERSION=SQL_OV_ODBC3&quot;</db:code> before you <db:link xlink:href="">open your database connection</db:link>. Note that this will affect multiple aspects of ODBC driver behavior, e.g., the SQLSTATEs. Before setting this connect option, consult your ODBC documentation about behavior differences you can expect.</db:para>
<db:para>If you experience very slow access of the ODBC datasource, make sure that ODBC call tracing is turned off in the ODBC datasource manager.</db:para>
<db:para>Some drivers don't support scrollable cursors. In that case case only queries in forwardOnly mode can be used successfully.</db:para>
</db:section>
<db:section xml:id="odbc-stored-procedure-support">
<db:title>ODBC Stored Procedure Support</db:title>
<db:para>With Microsoft SQL Server the result set returned by a stored procedure that uses the return statement, or returns multiple result sets, will be accessible only if you set the query's forward only mode to <db:emphasis>forward</db:emphasis> using <db:link xlink:href="">QSqlQuery::setForwardOnly()</db:link>.</db:para>
<db:programlisting language="cpp">// STORED_PROC uses the return statement or returns multiple result sets
QSqlQuery query;
query.setForwardOnly(true);
query.exec(&quot;{call STORED_PROC}&quot;);
</db:programlisting>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The value returned by the stored procedure's return statement is discarded.</db:para>
</db:section>
<db:section xml:id="odbc-unicode-support">
<db:title>ODBC Unicode Support</db:title>
<db:para>The QODBC Plugin will use the Unicode API if UNICODE is defined. On Windows NT based systems, this is the default. Note that the ODBC driver and the DBMS must also support Unicode.</db:para>
<db:para>Some driver managers and drivers don't support UNICODE. To use the QODBC plugin with such drivers it has to be compiled with the Q_ODBC_VERSION_2 defined.</db:para>
<db:para>For the Oracle 9 ODBC driver (Windows), it is necessary to check &quot;SQL_WCHAR support&quot; in the ODBC driver manager otherwise Oracle will convert all Unicode strings to local 8-bit.</db:para>
</db:section>
<db:section xml:id="how-to-build-the-odbc-plugin-on-unix-and-mac-os-x">
<db:title>How to Build the ODBC Plugin on Unix and Mac OS X</db:title>
<db:para>It is recommended that you use unixODBC. You can find the latest version and ODBC drivers at <db:link xlink:href="http://www.unixodbc.org">http://www.unixodbc.org</db:link>. You need the unixODBC header files and shared libraries.</db:para>
<db:para>Tell <db:code>qmake</db:code> where to find the unixODBC header files and shared libraries (here it is assumed that unixODBC is installed in <db:code>/usr/local/unixODBC</db:code>) and run <db:code>make</db:code>:</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/odbc
qmake &quot;INCLUDEPATH+=/usr/local/unixODBC/include&quot; &quot;LIBS+=-L/usr/local/unixODBC/lib -lodbc&quot;
make
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-odbc-plugin-on-windows">
<db:title>How to Build the ODBC Plugin on Windows</db:title>
<db:para>The ODBC header and include files should already be installed in the right directories. You just have to build the plugin as follows:</db:para>
<db:programlisting language="cpp">cd %QTDIR%\qtbase\src\plugins\sqldrivers\odbc
qmake odbc.pro
nmake
</db:programlisting>
<db:para>If you are not using a Microsoft compiler, replace <db:code>nmake</db:code> with <db:code>make</db:code> in the line above.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This database plugin is not officially supported for Windows CE.</db:para>
<db:anchor xml:id="qpsql"/>
</db:section>
</db:section>
<db:section xml:id="qpsql-for-postgresql-version-7-3-and-above">
<db:title>QPSQL for PostgreSQL (Version 7.3 and Above)</db:title>
<db:section xml:id="general-information-about-the-qpsql-driver">
<db:title>General Information about the QPSQL driver</db:title>
<db:para>The QPSQL driver supports version 7.3 and higher of the PostgreSQL server. We recommend that you use a client library from version 7.3.15, 7.4.13, 8.0.8, 8.1.4 or more recent as these versions contain security fixes, and as the QPSQL driver might not build with older versions of the client library depending on your platform.</db:para>
<db:para>For more information about PostgreSQL visit <db:link xlink:href="http://www.postgresql.org">http://www.postgresql.org</db:link>.</db:para>
</db:section>
<db:section xml:id="qpsql-unicode-support">
<db:title>QPSQL Unicode Support</db:title>
<db:para>The QPSQL driver automatically detects whether the PostgreSQL database you are connecting to supports Unicode or not. Unicode is automatically used if the server supports it. Note that the driver only supports the UTF-8 encoding. If your database uses any other encoding, the server must be compiled with Unicode conversion support.</db:para>
<db:para>Unicode support was introduced in PostgreSQL version 7.1 and it will only work if both the server and the client library have been compiled with multibyte support. More information about how to set up a multibyte enabled PostgreSQL server can be found in the PostgreSQL Administrator Guide, Chapter 5.</db:para>
</db:section>
<db:section xml:id="qpsql-blob-support">
<db:title>QPSQL BLOB Support</db:title>
<db:para>Binary Large Objects are supported through the <db:code>BYTEA</db:code> field type in PostgreSQL server versions &gt;= 7.1.</db:para>
</db:section>
<db:section xml:id="how-to-build-the-qpsql-plugin-on-unix-and-mac-os-x">
<db:title>How to Build the QPSQL Plugin on Unix and Mac OS X</db:title>
<db:para>You need the PostgreSQL client library and headers installed.</db:para>
<db:para>To make <db:code>qmake</db:code> find the PostgreSQL header files and shared libraries, run <db:code>qmake</db:code> the following way (assuming that the PostgreSQL client is installed in <db:code>/usr</db:code>):</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/psql
qmake &quot;INCLUDEPATH+=/usr/include/pgsql&quot; &quot;LIBS+=-L/usr/lib -lpq&quot; psql.pro
make
</db:programlisting>
<db:para>After installing Qt, you also need to install the plugin in the standard location:</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/psql
make install
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-qpsql-plugin-on-windows">
<db:title>How to Build the QPSQL Plugin on Windows</db:title>
<db:para>Install the appropriate PostgreSQL developer libraries for your compiler. Assuming that PostgreSQL was installed in <db:code>C:\psql</db:code>, build the plugin as follows:</db:para>
<db:programlisting language="cpp">cd %QTDIR%\qtbase\src\plugins\sqldrivers\psql
qmake &quot;INCLUDEPATH+=C:/psql/include&quot; &quot;LIBS+=C:/psql/lib/ms/libpq.lib&quot; psql.pro
nmake
</db:programlisting>
<db:para>Users of MinGW may wish to consult the following online document: <db:link xlink:href="http://www.postgresql.org/docs/current/static/installation-platform-notes.html#INSTALLATION-NOTES-MINGW">PostgreSQL MinGW/Native Windows</db:link>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This database plugin is not supported for Windows CE.</db:para>
<db:anchor xml:id="qtds"/>
</db:section>
</db:section>
<db:section xml:id="qtds-for-sybase-adaptive-server">
<db:title>QTDS for Sybase Adaptive Server</db:title>
<db:note>
<db:para>TDS is no longer used by MS Sql Server, and is superceded by <db:link xlink:href="sql-driver.xml#qodbc-for-open-database-connectivity-odbc">ODBC</db:link>. QTDS is obsolete from Qt 4.7.</db:para>
</db:note>
<db:section xml:id="general-information-about-qtds">
<db:title>General Information about QTDS</db:title>
<db:para>It is not possible to set the port with QSqlDatabase::setPort() due to limitations in the Sybase client library. Refer to the Sybase documentation for information on how to set up a Sybase client configuration file to enable connections to databases on non-default ports.</db:para>
</db:section>
<db:section xml:id="how-to-build-the-qtds-plugin-on-unix-and-mac-os-x">
<db:title>How to Build the QTDS Plugin on Unix and Mac OS X</db:title>
<db:para>Under Unix, two libraries are available which support the TDS protocol:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>FreeTDS, a free implementation of the TDS protocol (<db:link xlink:href="http://www.freetds.org">http://www.freetds.org</db:link>). Note that FreeTDS is not yet stable, so some functionality may not work as expected.</db:para>
</db:listitem>
<db:listitem>
<db:para>Sybase Open Client, available from <db:link xlink:href="http://www.sybase.com">http://www.sybase.com</db:link>. Note for Linux users: Get the Open Client RPM from <db:link xlink:href="http://linux.sybase.com">http://linux.sybase.com</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Regardless of which library you use, the shared object file <db:code>libsybdb.so</db:code> is needed. Set the <db:code>SYBASE</db:code> environment variable to point to the directory where you installed the client library and execute <db:code>qmake</db:code>:</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/tds
qmake &quot;INCLUDEPATH=$SYBASE/include&quot; &quot;LIBS=-L$SYBASE/lib -lsybdb&quot;
make
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-qdts-plugin-on-windows">
<db:title>How to Build the QDTS Plugin on Windows</db:title>
<db:para>You can either use the DB-Library supplied by Microsoft or the Sybase Open Client (<db:link xlink:href="http://www.sybase.com">http://www.sybase.com</db:link>). You must include <db:code>NTWDBLIB.LIB</db:code> to build the plugin:</db:para>
<db:programlisting language="cpp">cd %QTDIR%\qtbase\src\plugins\sqldrivers\tds
qmake &quot;LIBS+=NTWDBLIB.LIB&quot; tds.pro
nmake
</db:programlisting>
<db:para>By default the Microsoft library is used on Windows, if you want to force the use of the Sybase Open Client, you must define <db:code>Q_USE_SYBASE</db:code> in <db:code>%QTDIR%\qtbase\src\sql\drivers\tds\qsql_tds.cpp</db:code>. If you are not using a Microsoft compiler, replace <db:code>nmake</db:code> with <db:code>make</db:code> in the line above.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This database plugin is not supported for Windows CE.</db:para>
<db:anchor xml:id="qdb2"/>
</db:section>
</db:section>
<db:section xml:id="qdb2-for-ibm-db2-version-7-1-and-above">
<db:title>QDB2 for IBM DB2 (Version 7.1 and Above)</db:title>
<db:section xml:id="general-information-about-qdb2">
<db:title>General Information about QDB2</db:title>
<db:para>The Qt DB2 plugin makes it possible to access IBM DB2 databases. It has been tested with IBM DB2 v7.1 and 7.2. You must install the IBM DB2 development client library, which contains the header and library files necessary for compiling the QDB2 plugin.</db:para>
<db:para>The QDB2 driver supports prepared queries, reading/writing of Unicode strings and reading/writing of BLOBs.</db:para>
<db:para>We suggest using a forward-only query when calling stored procedures in DB2 (see QSqlQuery::setForwardOnly()).</db:para>
</db:section>
<db:section xml:id="how-to-build-the-qdb2-plugin-on-unix-and-mac-os-x">
<db:title>How to Build the QDB2 Plugin on Unix and Mac OS X</db:title>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/db2
qmake &quot;INCLUDEPATH+=$DB2DIR/include&quot; &quot;LIBS+=-L$DB2DIR/lib -ldb2&quot;
make
</db:programlisting>
<db:para>After installing Qt, you also need to install the plugin in the standard location:</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/db2
make install
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-qdb2-plugin-on-windows">
<db:title>How to Build the QDB2 Plugin on Windows</db:title>
<db:para>The DB2 header and include files should already be installed in the right directories. You just have to build the plugin as follows:</db:para>
<db:programlisting language="cpp">cd %QTDIR%\qtbase\src\plugins\sqldrivers\db2
qmake &quot;INCLUDEPATH+=&lt;DB2 home&gt;/sqllib/include&quot; &quot;LIBS+=&lt;DB2 home&gt;/sqllib/lib/db2cli.lib&quot;
nmake
</db:programlisting>
<db:para>If you are not using a Microsoft compiler, replace <db:code>nmake</db:code> with <db:code>make</db:code> in the line above.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This database plugin is not supported for Windows CE.</db:para>
<db:anchor xml:id="qsqlite2"/>
</db:section>
</db:section>
<db:section xml:id="qsqlite2-for-sqlite-version-2">
<db:title>QSQLITE2 for SQLite Version 2</db:title>
<db:para>The Qt SQLite 2 plugin is offered for compatibility. Whenever possible, use the <db:link xlink:href="sql-driver.xml#qsqlite-for-sqlite-version-3-and-above">version 3 plugin</db:link> instead. The build instructions for version 3 apply to version 2 as well.</db:para>
<db:anchor xml:id="qsqlite"/>
</db:section>
<db:section xml:id="qsqlite-for-sqlite-version-3-and-above">
<db:title>QSQLITE for SQLite (Version 3 and Above)</db:title>
<db:section xml:id="general-information-about-qsqlite">
<db:title>General Information about QSQLITE</db:title>
<db:para>The Qt SQLite plugin makes it possible to access SQLite databases. SQLite is an in-process database, which means that it is not necessary to have a database server. SQLite operates on a single file, which must be set as the database name when opening a connection. If the file does not exist, SQLite will try to create it. SQLite also supports in-memory and temporary databases. Simply pass respectively &quot;:memory:&quot; or an empty string as the database name.</db:para>
<db:para>SQLite has some restrictions regarding multiple users and multiple transactions. If you try to read/write on a resource from different transactions, your application might freeze until one transaction commits or rolls back. The Qt SQLite driver will retry to write to a locked resource until it runs into a timeout (see <db:code>QSQLITE_BUSY_TIMEOUT</db:code> at QSqlDatabase::setConnectOptions()).</db:para>
<db:para>In SQLite any column, with the exception of an INTEGER PRIMARY KEY column, may be used to store any type of value. For instance, a column declared as INTEGER may contain an integer value in one row and a text value in the next. This is due to SQLite associating the type of a value with the value itself rather than with the column it is stored in. A consequence of this is that the type returned by QSqlField::type() only indicates the field's recommended type. No assumption of the actual type should be made from this and the type of the individual values should be checked.</db:para>
<db:para>The driver is locked for updates while a select is executed. This may cause problems when using QSqlTableModel because Qt's item views fetch data as needed (with QSqlQuery::fetchMore() in the case of QSqlTableModel).</db:para>
<db:para>You can find information about SQLite on <db:link xlink:href="http://www.sqlite.org">http://www.sqlite.org</db:link>.</db:para>
</db:section>
<db:section xml:id="how-to-build-the-qsqlite-plugin">
<db:title>How to Build the QSQLITE Plugin</db:title>
<db:para>SQLite version 3 is included as a third-party library within Qt. It can be built by passing the following parameters to the configure script: <db:code>-plugin-sql-sqlite</db:code> (build as a plugin) or <db:code>-qt-sql-sqlite</db:code> (linked directly into the Qt library).</db:para>
<db:para>If you don't want to use the SQLite library included with Qt, you can pass <db:code>-system-sqlite</db:code> to the configure script to use sqlite libraries in the operating system. Alternatively, you can build it manually (replace <db:code>$SQLITE</db:code> with the directory where SQLite resides):</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/sqlite
qmake &quot;INCLUDEPATH+=$SQLITE/include&quot; &quot;LIBS+=-L$SQLITE/lib -lsqlite&quot;
make
</db:programlisting>
<db:para>After installing Qt, you also need to install the plugin in the standard location:</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/sqlite
make install
</db:programlisting>
<db:para>On Windows:</db:para>
<db:programlisting language="cpp">cd %QTDIR%\qtbase\src\plugins\sqldrivers\sqlite
qmake &quot;INCLUDEPATH+=C:/SQLITE/INCLUDE&quot; &quot;LIBS+=C:/SQLITE/LIB/SQLITE3.LIB&quot; sqlite.pro
nmake
</db:programlisting>
</db:section>
<db:section xml:id="qsqlite-file-format-compatibility">
<db:title>QSQLITE File Format Compatibility</db:title>
<db:para>SQLite minor releases sometimes break file format forward compatibility. For example, SQLite 3.3 can read database files created with SQLite 3.2, but databases created with SQLite 3.3 cannot be read by SQLite 3.2. Please refer to the SQLite documentation and change logs for information about file format compatibility between versions.</db:para>
<db:para>Qt minor releases usually follow the SQLite minor releases, while Qt patch releases follow SQLite patch releases. Patch releases are therefore both backward and forward compatible.</db:para>
<db:para>To force SQLite to use a specific file format, it is necessary to build and ship your own database plugin with your own SQLite library as illustrated above. Some versions of SQLite can be forced to write a specific file format by setting the <db:code>SQLITE_DEFAULT_FILE_FORMAT</db:code> define when building SQLite.</db:para>
<db:anchor xml:id="qibase"/>
</db:section>
</db:section>
<db:section xml:id="qibase-for-borland-interbase">
<db:title>QIBASE for Borland InterBase</db:title>
<db:section xml:id="general-information-about-qibase">
<db:title>General Information about QIBASE</db:title>
<db:para>The Qt InterBase plugin makes it possible to access the InterBase and Firebird databases. InterBase can either be used as a client/server or without a server in which case it operates on local files. The database file must exist before a connection can be established. Firebird must be used with a server configuration.</db:para>
<db:para>Note that InterBase requires you to specify the full path to the database file, no matter whether it is stored locally or on another server.</db:para>
<db:programlisting language="cpp">db.setHostName(&quot;MyServer&quot;);
db.setDatabaseName(&quot;C:\\test.gdb&quot;);
</db:programlisting>
<db:para>You need the InterBase/Firebird development headers and libraries to build this plugin.</db:para>
<db:para>Due to license incompatibilities with the GPL, users of the Qt Open Source Edition are not allowed to link this plugin to the commercial editions of InterBase. Please use Firebird or the free edition of InterBase.</db:para>
</db:section>
<db:section xml:id="qibase-unicode-support-and-text-encoding">
<db:title>QIBASE Unicode Support and Text Encoding</db:title>
<db:para>By default the driver connects to the database using UNICODE_FSS. This can be overridden by setting the ISC_DPB_LC_CTYPE parameter with QSqlDatabase::setConnectOptions() before opening the connection.</db:para>
<db:programlisting language="cpp">// connect to database using the Latin-1 character set
db.setConnectOptions(&quot;ISC_DPB_LC_CTYPE=Latin1&quot;);
db.open();
</db:programlisting>
<db:para>If Qt doesn't support the given text encoding the driver will issue a warning message and connect to the database using UNICODE_FSS.</db:para>
<db:para>Note that if the text encoding set when connecting to the database is not the same as in the database, problems with transliteration might arise.</db:para>
</db:section>
<db:section xml:id="qibase-stored-procedures">
<db:title>QIBASE Stored procedures</db:title>
<db:para>InterBase/Firebird return OUT values as result set, so when calling stored procedure, only IN values need to be bound via QSqlQuery::bindValue(). The RETURN/OUT values can be retrieved via QSqlQuery::value(). Example:</db:para>
<db:programlisting language="cpp">QSqlQuery q;
q.exec(&quot;execute procedure my_procedure&quot;);
q.next();
qDebug() &lt;&lt; q.value(0); // outputs the first RETURN/OUT value
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-qibase-plugin-on-unix-and-mac-os-x">
<db:title>How to Build the QIBASE Plugin on Unix and Mac OS X</db:title>
<db:para>The following assumes InterBase or Firebird is installed in <db:code>/opt/interbase</db:code>:</db:para>
<db:para>If you are using InterBase:</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/ibase
qmake &quot;INCLUDEPATH+=/opt/interbase/include&quot; &quot;LIBS+=-L/opt/interbase/lib&quot; ibase.pro
make
</db:programlisting>
<db:para>If you are using Firebird, the Firebird library has to be set explicitly:</db:para>
<db:programlisting language="cpp">cd $QTDIR/qtbase/src/plugins/sqldrivers/ibase
qmake &quot;INCLUDEPATH+=/opt/interbase/include&quot; &quot;LIBS+=-L/opt/interbase/lib -lfbclient&quot; ibase.pro
make
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-qibase-plugin-on-windows">
<db:title>How to Build the QIBASE Plugin on Windows</db:title>
<db:para>The following assumes InterBase or Firebird is installed in <db:code>C:\interbase</db:code>:</db:para>
<db:para>If you are using InterBase:</db:para>
<db:programlisting language="cpp">cd %QTDIR%\qtbase\src\plugins\sqldrivers\ibase
qmake &quot;INCLUDEPATH+=C:/interbase/include&quot; ibase.pro
nmake
</db:programlisting>
<db:para>If you are using Firebird, the Firebird library has to be set explicitly:</db:para>
<db:programlisting language="cpp">cd %QTDIR%\qtbase\src\plugins\sqldrivers\ibase
qmake &quot;INCLUDEPATH+=C:/interbase/include&quot; &quot;LIBS+=-lfbclient&quot; ibase.pro
nmake
</db:programlisting>
<db:para>If you are not using a Microsoft compiler, replace <db:code>nmake</db:code> with <db:code>make</db:code> in the line above.</db:para>
<db:para>Note that <db:code>C:\interbase\bin</db:code> must be in the <db:code>PATH</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This database plugin is not supported for Windows CE.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="troubleshooting">
<db:title>Troubleshooting</db:title>
<db:para>You should always use client libraries that have been compiled with the same compiler as you are using for your project. If you cannot get a source distibution to compile the client libraries yourself, you must make sure that the pre-compiled library is compatible with your compiler, otherwise you will get a lot of &quot;undefined symbols&quot; errors. Some compilers have tools to convert libraries, e.g. Borland ships the tool <db:code>COFF2OMF.EXE</db:code> to convert libraries that have been generated with Microsoft Visual C++.</db:para>
<db:para>If the compilation of a plugin succeeds but it cannot be loaded, make sure that the following requirements are met:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Ensure that you are using a shared Qt library; you cannot use the plugins with a static build.</db:para>
</db:listitem>
<db:listitem>
<db:para>Ensure that the plugin is in the correct directory. You can use QApplication::libraryPaths() to determine where Qt looks for plugins.</db:para>
</db:listitem>
<db:listitem>
<db:para>Ensure that the client libraries of the DBMS are available on the system. On Unix, run the command <db:code>ldd</db:code> and pass the name of the plugin as parameter, for example <db:code>ldd libqsqlmysql.so</db:code>. You will get a warning if any of the client libraries couldn't be found. On Windows, you can use Visual Studio's dependency walker. With Qt Creator, you can update the <db:code>PATH</db:code> environment variable in the <db:emphasis role="bold">Run</db:emphasis> section of the <db:emphasis role="bold">Project</db:emphasis> panel to include the path to the folder containing the client libraries.</db:para>
</db:listitem>
<db:listitem>
<db:para>Compile Qt with <db:code>QT_DEBUG_COMPONENT</db:code> defined to get very verbose debug output when loading plugins.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Make sure you have followed the guide to <db:link xlink:href="">Deploying Plugins</db:link>. If you experience plugin load problems and see output like this:</db:para>
<db:programlisting language="cpp">QSqlDatabase: QMYSQL driver not loaded
QSqlDatabase: available drivers: QMYSQL
</db:programlisting>
<db:para>the problem is usually that the plugin had the wrong build key. This might require removing an entry from the plugin cache.</db:para>
<db:anchor xml:id="development"/>
</db:section>
<db:section xml:id="how-to-write-your-own-database-driver">
<db:title>How to Write Your Own Database Driver</db:title>
<db:para>QSqlDatabase is responsible for loading and managing database driver plugins. When a database is added (see QSqlDatabase::addDatabase()), the appropriate driver plugin is loaded (using QSqlDriverPlugin). QSqlDatabase relies on the driver plugin to provide interfaces for QSqlDriver and QSqlResult.</db:para>
<db:para>QSqlDriver is an abstract base class which defines the functionality of a SQL database driver. This includes functions such as QSqlDriver::open() and QSqlDriver::close(). QSqlDriver is responsible for connecting to a database, establish the proper environment, etc. In addition, QSqlDriver can create QSqlQuery objects appropriate for the particular database API. QSqlDatabase forwards many of its function calls directly to QSqlDriver which provides the concrete implementation.</db:para>
<db:para>QSqlResult is an abstract base class which defines the functionality of a SQL database query. This includes statements such as <db:code>SELECT</db:code>, <db:code>UPDATE</db:code>, and <db:code>ALTER</db:code> <db:code>TABLE</db:code>. QSqlResult contains functions such as QSqlResult::next() and QSqlResult::value(). QSqlResult is responsible for sending queries to the database, returning result data, etc. QSqlQuery forwards many of its function calls directly to QSqlResult which provides the concrete implementation.</db:para>
<db:para>QSqlDriver and QSqlResult are closely connected. When implementing a Qt SQL driver, both of these classes must to be subclassed and the abstract virtual methods in each class must be implemented.</db:para>
<db:para>To implement a Qt SQL driver as a plugin (so that it is recognized and loaded by the Qt library at runtime), the driver must use the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro. Read <db:link xlink:href="">How to Create Qt Plugins</db:link> for more information on this. You can also check out how this is done in the SQL plugins that are provided with Qt in <db:code>QTDIR/qtbase/src/plugins/sqldrivers</db:code> and <db:code>QTDIR/qtbase/src/sql/drivers</db:code>.</db:para>
<db:para>The following code can be used as a skeleton for a SQL driver:</db:para>
<db:programlisting language="cpp">class XyzResult : public QSqlResult
{
public:
    XyzResult(const QSqlDriver *driver)
        : QSqlResult(driver) {}
    ~XyzResult() {}

protected:
    QVariant data(int /* index */) { return QVariant(); }
    bool isNull(int /* index */) { return false; }
    bool reset(const QString &amp; /* query */) { return false; }
    bool fetch(int /* index */) { return false; }
    bool fetchFirst() { return false; }
    bool fetchLast() { return false; }
    int size() { return 0; }
    int numRowsAffected() { return 0; }
    QSqlRecord record() const { return QSqlRecord(); }
};

class XyzDriver : public QSqlDriver
{
public:
    XyzDriver() {}
    ~XyzDriver() {}

    bool hasFeature(DriverFeature /* feature */) const { return false; }
    bool open(const QString &amp; /* db */, const QString &amp; /* user */,
              const QString &amp; /* password */, const QString &amp; /* host */,
              int /* port */, const QString &amp; /* options */)
        { return false; }
    void close() {}
    QSqlResult *createResult() const { return new XyzResult(this); }
};
</db:programlisting>
</db:section>
</db:article>
