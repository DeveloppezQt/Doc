<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SQL Database Drivers</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to configure and install Qt SQL drivers for supported databases.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt SQL module uses driver <db:link xlink:href="plugins-howto.xml">plugins</db:link> to communicate with the different database APIs. Since Qt's SQL Module API is database-independent, all database-specific code is contained within these drivers. Several drivers are supplied with Qt, and other drivers can be added. The driver source code is supplied and can be used as a model for <db:link xlink:href="sql-driver.xml#development">writing your own drivers</db:link>.</db:para>
<db:section xml:id="supported-databases">
<db:title>Supported Databases</db:title>
<db:para>The table below lists the drivers included with Qt:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Driver name</db:para>
</db:th>
<db:th>
<db:para>DBMS</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qdb2">QDB2</db:link></db:para>
</db:td>
<db:td>
<db:para>IBM DB2 (version 7.1 and above)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qibase">#QIBASE</db:link></db:para>
</db:td>
<db:td>
<db:para>Borland InterBase / Firebird</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qmysql">QMYSQL / MARIADB</db:link></db:para>
</db:td>
<db:td>
<db:para>MySQL or MariaDB (version 5.6 and above)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qoci">QOCI</db:link></db:para>
</db:td>
<db:td>
<db:para>Oracle Call Interface Driver (version 12.1 and above)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qodbc">QODBC</db:link></db:para>
</db:td>
<db:td>
<db:para>Open Database Connectivity (ODBC) - Microsoft SQL Server and other ODBC-compliant databases</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qpsql">QPSQL</db:link></db:para>
</db:td>
<db:td>
<db:para>PostgreSQL (versions 7.3 and above)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="sql-driver.xml#qsqlite">QSQLITE</db:link></db:para>
</db:td>
<db:td>
<db:para>SQLite version 3</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>SQLite is the in-process database system with the best test coverage and support on all platforms. Oracle via OCI, PostgreSQL, and MySQL through either ODBC or a native driver are well-tested on Windows and Linux. The completeness of the support for other systems depends on the availability and quality of client libraries.</db:para>
<db:note>
<db:para>To build a driver plugin you need to have the appropriate client library for your Database Management System (DBMS). This provides access to the API exposed by the DBMS, and is typically shipped with it. Most installation programs also allow you to install &quot;development libraries&quot;, and these are what you need. These libraries are responsible for the low-level communication with the DBMS. Also make sure to install the correct database libraries for your Qt architecture (32 or 64 bit).</db:para>
</db:note>
<db:note>
<db:para>When using Qt under Open Source terms but with a proprietary database, verify the client library's license compatibility with the LGPL.</db:para>
</db:note>
<db:anchor xml:id="building"/>
</db:section>
<db:section xml:id="building-the-drivers">
<db:title>Building the Drivers</db:title>
<db:anchor xml:id="driverwithqt"/>
<db:section xml:id="compile-qt-with-a-specific-driver">
<db:title>Compile Qt with a specific driver</db:title>
<db:para>The Qt <db:code>configure</db:code> script tries to automatically detect the available client libraries on your machine. Run <db:code>configure -help</db:code> to see what drivers can be built. You should get an output similar to this:</db:para>
<db:programlisting language="cpp">[...]

Database options:

  -sql-&amp;lt;driver&amp;gt; ........ Enable SQL &amp;lt;driver&amp;gt; plugin. Supported drivers:
                         db2 ibase mysql oci odbc psql sqlite
                         [all auto]
  -sqlite .............. Select used sqlite [system/qt]

[...]
</db:programlisting>
<db:para>The <db:code>configure</db:code> script cannot detect the necessary libraries and include files if they are not in the standard paths, so it may be necessary to specify these paths using either driver-specific include and library path variables or <db:code>CMAKE_INCLUDE_PATH</db:code> and <db:code>CMAKE_LIBRARY_PATH</db:code>. For example, if your MySQL files are installed in <db:code>C:\mysql-connector-c-6.1.11-winx64</db:code> on Windows, then pass the following parameter to double-dash part of configure line:</db:para>
<db:programlisting language="cpp">C:\Qt\6.0.0\Src\configure.bat -sql-mysql -- -DMySQL_INCLUDE_DIR=&quot;C:\mysql-8.0.22-winx64\include&quot; -DMySQL_LIBRARY=&quot;C:\mysql-8.0.22-winx64\lib\libmysql.lib&quot;
Configure summary:

...
Qt Sql Drivers:
  DB2 (IBM) .............................. no
  InterBase .............................. no
  MySql .................................. yes
  OCI (Oracle) ........................... no
  ODBC ................................... yes
  PostgreSQL ............................. no
  SQLite ................................. yes
    Using system provided SQLite ......... no
...
</db:programlisting>
<db:para>When you configure drivers in the manner described above, CMake skips any dependency checks and uses the provided paths as is. This is especially useful if the package provides its own set of system libraries that should not be recognized by the build routine.</db:para>
<db:para>In some cases it's more convenient to use <db:code>CMAKE_INCLUDE_PATH</db:code> and <db:code>CMAKE_LIBRARY_PATH</db:code> variables to locate required libraries. You should prefer this method if module needs to set properties for the provided target libraries (e.g. this is required for PostgreSQL and SQLite). For example, you can do this as follows, to locate MySQL:</db:para>
<db:programlisting language="cpp">C:\Qt\6.0.0\Src\configure.bat -sql-mysql -- -DCMAKE_INCLUDE_PATH=&quot;C:\mysql-8.0.22-winx64\include&quot; -DCMAKE_LIBRARY_PATH=&quot;C:\mysql-8.0.22-winx64\lib&quot;
Configure summary:

...
Qt Sql Drivers:
  DB2 (IBM) .............................. no
  InterBase .............................. no
  MySql .................................. yes
  OCI (Oracle) ........................... no
  ODBC ................................... yes
  PostgreSQL ............................. no
  SQLite ................................. yes
    Using system provided SQLite ......... no
...
</db:programlisting>
<db:para>The particulars for each driver are explained below.</db:para>
<db:note>
<db:para>If something goes wrong and you want CMake to recheck your available drivers, you might need to remove <db:emphasis>CMakeCache.txt</db:emphasis> from the build directory.</db:para>
</db:note>
<db:anchor xml:id="driverstandalone"/>
</db:section>
<db:section xml:id="compile-only-a-specific-sql-driver">
<db:title>Compile only a specific sql driver</db:title>
<db:para>A typical <db:code>qt-cmake</db:code> run (in this case to configure for MySQL) looks like this:</db:para>
<db:programlisting language="cpp">C:\Qt\6.0.0\mingw81_64\bin\qt-cmake -G Ninja C:\Qt\6.0.0\Src\qtbase\src\plugins\sqldrivers -DMySQL_INCLUDE_DIR=&quot;C:\mysql-8.0.22-winx64\include&quot; -DMySQL_LIBRARY=&quot;C:\mysql-8.0.22-winx64\lib\libmysql.lib&quot; -DCMAKE_INSTALL_PREFIX=&quot;C:\Qt\6.0.0\mingw81_64&quot;
Configure summary:

Qt Sql Drivers:
  DB2 (IBM) .............................. no
  InterBase .............................. no
  MySql .................................. yes
  OCI (Oracle) ........................... no
  ODBC ................................... yes
  PostgreSQL ............................. no
  SQLite ................................. yes
    Using system provided SQLite ......... no

-- Configuring done
-- Generating done
-- Build files have been written to: C:/build-qt6-sqldrivers
</db:programlisting>
<db:note>
<db:para>As mentioned in <db:link xlink:href="sql-driver.xml#driverwithqt">Compile Qt with a specific driver</db:link>, if the driver could not be found or is not enabled, start over by removing <db:emphasis>CMakeCache.txt</db:emphasis>.</db:para>
</db:note>
<db:para>Due to the practicalities of dealing with external dependencies, only the SQLite plugin is shipped with binary builds of Qt. Binary builds of Qt for Windows also include the ODBC plugin. To be able to add additional drivers to the Qt installation without re-building all of Qt, it is possible to configure and build the <db:code>qtbase/src/plugins/sqldrivers</db:code> directory outside of a full Qt build directory. Note that it is not possible to <db:emphasis>configure</db:emphasis> each driver separately, only all of them at once. Drivers can be <db:emphasis>built</db:emphasis> separately, though.</db:para>
<db:note>
<db:para>You need to specify <db:code>CMAKE_INSTALL_PREFIX</db:code>, if you want to install plugins after the build is finished.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="driver-specifics">
<db:title>Driver Specifics</db:title>
<db:anchor xml:id="qmysql"/>
<db:section xml:id="qmysql-for-mysql-or-mariadb-5-6-and-higher">
<db:title>QMYSQL for MySQL or MariaDB 5.6 and higher</db:title>
<db:para>MariaDB is a fork of MySQL intended to remain free and open-source software under the GNU General Public License. MariaDB intended to maintain high compatibility with MySQL, ensuring a drop-in replacement capability with library binary parity and exact matching with MySQL APIs and commands. Therefore the plugin for MySQL and MariaDB are combined into one Qt plugin.</db:para>
<db:section xml:id="qmysql-stored-procedure-support">
<db:title>QMYSQL Stored Procedure Support</db:title>
<db:para>MySQL 5 has stored procedure support at the SQL level, but no API to control IN, OUT, and INOUT parameters. Therefore, parameters have to be set and read using SQL commands instead of <db:link xlink:href="qsqlquery.xml#bindValue">QSqlQuery::bindValue</db:link>().</db:para>
<db:para>Example stored procedure:</db:para>
<db:programlisting language="cpp">create procedure qtestproc (OUT param1 INT, OUT param2 INT)
BEGIN
    set param1 = 42;
    set param2 = 43;
END
</db:programlisting>
<db:para>Source code to access the OUT values:</db:para>
<db:programlisting language="cpp">QSqlQuery q;
q.exec(&quot;call qtestproc (@outval1, @outval2)&quot;);
q.exec(&quot;select @outval1, @outval2&quot;);
if (q.next())
    qDebug() &amp;lt;&amp;lt; q.value(0) &amp;lt;&amp;lt; q.value(1); // outputs &quot;42&quot; and &quot;43&quot;
</db:programlisting>
<db:note>
<db:para><db:code>@outval1</db:code> and <db:code>@outval2</db:code> are variables local to the current connection and will not be affected by queries sent from another host or connection.</db:para>
</db:note>
</db:section>
<db:section xml:id="embedded-mysql-server">
<db:title>Embedded MySQL Server</db:title>
<db:para>The MySQL embedded server is a drop-in replacement for the normal client library. With the embedded MySQL server, a MySQL server is not required to use MySQL functionality.</db:para>
<db:para>To use the embedded MySQL server, simply link the Qt plugin to <db:code>libmysqld</db:code> instead of <db:code>libmysqlclient</db:code>. This can be done by adding <db:code>-DMySQL_LIBRARY=&lt;path/to/mysqld/&gt;libmysqld.&lt;so|lib|dylib&gt;</db:code> to the configure command line.</db:para>
<db:para>Please refer to the MySQL documentation, chapter &quot;libmysqld, the Embedded MySQL Server Library&quot; for more information about the MySQL embedded server.</db:para>
</db:section>
<db:section xml:id="how-to-build-the-qmysql-plugin-on-unix-and-macos">
<db:title>How to Build the QMYSQL Plugin on Unix and macOS</db:title>
<db:para>You need the MySQL / MariaDB header files, as well as the shared library <db:code>libmysqlclient.&lt;so|dylib&gt;</db:code> / <db:code>libmariadb.&lt;so|dylib&gt;</db:code>. Depending on your Linux distribution, you may need to install a package which is usually called &quot;mysql-devel&quot; or &quot;mariadb-devel&quot;.</db:para>
<db:para>Tell <db:code>qt-cmake</db:code> where to find the MySQL / MariaDB header files and shared libraries (here it is assumed that MySQL / MariaDB is installed in <db:code>/usr/local</db:code>) and build:</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;/Src/qtbase/src/plugins/sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;/&amp;lt;platform&amp;gt; -DMySQL_INCLUDE_DIR=&quot;/usr/local/mysql/include&quot; -DMySQL_LIBRARY=&quot;/usr/local/mysql/lib/libmysqlclient.&amp;lt;so|dylib&amp;gt;&quot;
cmake --build .
cmake --install .
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-qmysql-plugin-on-windows">
<db:title>How to Build the QMYSQL Plugin on Windows</db:title>
<db:para>You need to get the MySQL installation files (e.g. <db:link xlink:href="https://dev.mysql.com/downloads/installer/">mysql-installer-web-community-8.0.22.0.msi</db:link> or <db:link xlink:href="https://downloads.mariadb.com/Connectors/c/connector-c-3.1.11/">mariadb-connector-c-3.1.11-win64.msi</db:link>). Run the installer, select custom installation and install the MySQL C Connector which matches your Qt installation (x86 or x64). After installation check that the needed files are there:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>&lt;MySQL dir&gt;/lib/libmysql.lib</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>&lt;MySQL dir&gt;/lib/libmysql.dll</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>&lt;MySQL dir&gt;/include/mysql.h</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>and for MariaDB</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>&lt;MariaDB dir&gt;/lib/libmariadb.lib</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>&lt;MariaDB dir&gt;/lib/libmariadb.dll</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>&lt;MariaDB dir&gt;/include/mysql.h</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>As of MySQL 8.0.19, the C Connector is no longer offered as a standalone installable component. Instead, you can get <db:code>mysql.h</db:code> and <db:code>libmysql.*</db:code> by installing the full MySQL Server (x64 only) or the <db:link xlink:href="https://downloads.mariadb.org/connector-c/">MariaDB C Connector</db:link>.</db:para>
</db:note>
<db:para>Build the plugin as follows (here it is assumed that <db:code>&lt;MySQL dir&gt;</db:code> is <db:code>C:\mysql-8.0.22-winx64</db:code>):</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;\Src\qtbase\src\plugins\sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;\&amp;lt;platform&amp;gt; -DMySQL_INCLUDE_DIR=&quot;C:\mysql-8.0.22-winx64\include&quot; -DMySQL_LIBRARY=&quot;C:\mysql-8.0.22-winx64\lib\libmysql.lib&quot;
cmake --build .
cmake --install .
</db:programlisting>
<db:para>When you distribute your application, remember to include <db:emphasis>libmysql.dll</db:emphasis> / <db:emphasis>libmariadb.dll</db:emphasis> in your installation package. It must be placed in the same folder as the application executable. <db:emphasis>libmysql.dll</db:emphasis> additionally needs the MSVC runtime libraries which can be installed with <db:link xlink:href="https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads">vcredist.exe</db:link></db:para>
<db:anchor xml:id="qoci"/>
</db:section>
</db:section>
<db:section xml:id="qoci-for-the-oracle-call-interface-oci">
<db:title>QOCI for the Oracle Call Interface (OCI)</db:title>
<db:para>The Qt OCI plugin supports connecting to Oracle database as determined by the version of the instant client used. This is dependent on what Oracle indicates it supports. The plugin will auto-detect the database version and enable features accordingly.</db:para>
<db:para>It's possible to connect to a Oracle database without a tnsnames.ora file. This requires that the database SID is passed to the driver as the database name, and that a hostname is given.</db:para>
<db:section xml:id="oci-user-authentication">
<db:title>OCI User Authentication</db:title>
<db:para>The Qt OCI plugin supports authentication using external credentials (OCI_CRED_EXT). Usually, this means that the database server will use the user authentication provided by the operating system instead of its own authentication mechanism.</db:para>
<db:para>Leave the username and password empty when opening a connection with <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> to use the external credentials authentication.</db:para>
</db:section>
<db:section xml:id="oci-blob-lob-support">
<db:title>OCI BLOB/LOB Support</db:title>
<db:para>Binary Large Objects (BLOBs) can be read and written, but be aware that this process may require a lot of memory. You should use a forward only query to select LOB fields (see <db:link xlink:href="qsqlquery.xml#setForwardOnly">QSqlQuery::setForwardOnly</db:link>()).</db:para>
<db:para>Inserting BLOBs should be done using either a prepared query where the BLOBs are bound to placeholders or <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link>, which uses a prepared query to do this internally.</db:para>
</db:section>
<db:section xml:id="how-to-build-the-oci-plugin-on-unix-and-macos">
<db:title>How to Build the OCI Plugin on Unix and macOS</db:title>
<db:para>All you need is the &quot; - Basic&quot; and &quot;Instant Client Package - SDK&quot;.</db:para>
<db:para>Oracle library files required to build the driver:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>libclntsh.&lt;so|dylib&gt;</db:code> (all versions)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Tell <db:code>qt-cmake</db:code> where to find the Oracle header files and shared libraries and build.</db:para>
<db:para>We assume that you installed the RPM packages of the Instant Client Package SDK (you need to adjust the version number accordingly):</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;/Src/qtbase/src/plugins/sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;/&amp;lt;platform&amp;gt; -DOracle_INCLUDE_DIR=&quot;/usr/include/oracle/21/client64&quot; -DOracle_LIBRARY=&quot;/usr/lib/oracle/21/client64/lib/libclntsh.&amp;lt;so|dylib&amp;gt;&quot;
cmake --build .
cmake --install .
</db:programlisting>
<db:note>
<db:para>If you are using the Oracle Instant Client package, you will need to set LD_LIBRARY_PATH when building the OCI SQL plugin, and when running an application that uses the OCI SQL plugin.</db:para>
</db:note>
</db:section>
<db:section xml:id="how-to-build-the-oci-plugin-on-windows">
<db:title>How to Build the OCI Plugin on Windows</db:title>
<db:para>Choosing the option &quot;Programmer&quot; in the Oracle Client Installer from the Oracle Client Installation CD is generally sufficient to build the plugin. For some versions of Oracle Client, you may also need to select the &quot;Call Interface (OCI)&quot; option if it is available.</db:para>
<db:para>Build the plugin as follows (here it is assumed that Oracle Client is installed in <db:code>C:\oracle</db:code> and SDK is installed in <db:code>C:\oracle\sdk</db:code>):</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers
qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;\Src\qtbase\src\plugins\sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;\&amp;lt;platform&amp;gt; -DOracle_INCLUDE_DIR=&quot;C:\oracle\sdk\include&quot; -DOracle_LIBRARY=&quot;C:\oracle\oci.lib&quot;
cmake --build .
cmake --install .
</db:programlisting>
<db:para>When you run your application, you will also need to add the <db:code>oci.lib</db:code> path to your <db:code>PATH</db:code> environment variable:</db:para>
<db:programlisting language="cpp">set PATH=%PATH%;C:\oracle
</db:programlisting>
<db:anchor xml:id="qodbc"/>
</db:section>
</db:section>
<db:section xml:id="qodbc-for-open-database-connectivity-odbc">
<db:title>QODBC for Open Database Connectivity (ODBC)</db:title>
<db:para>ODBC is a general interface that allows you to connect to multiple DBMSs using a common interface. The QODBC driver allows you to connect to an ODBC driver manager and access the available data sources. Note that you also need to install and configure ODBC drivers for the ODBC driver manager that is installed on your system. The QODBC plugin then allows you to use these data sources in your Qt applications.</db:para>
<db:note>
<db:para>You should use the native driver, if it is available, instead of the ODBC driver. ODBC support can be used as a fallback for compliant databases if no native driver is available.</db:para>
</db:note>
<db:para>On Windows, an ODBC driver manager should be installed by default. For Unix systems, there are some implementations which must be installed first. Note that every end user of your application is required to have an ODBC driver manager installed, otherwise the QODBC plugin will not work.</db:para>
<db:para>When connecting to an ODBC datasource, you should pass the name of the ODBC datasource to the <db:link xlink:href="qsqldatabase.xml#setDatabaseName">QSqlDatabase::setDatabaseName</db:link>() function, rather than the actual database name.</db:para>
<db:para>The QODBC Plugin needs an ODBC compliant driver manager version 2.0 or later. Some ODBC drivers claim to be version-2.0-compliant, but do not offer all the necessary functionality. The QODBC plugin therefore checks whether the data source can be used after a connection has been established, and refuses to work if the check fails. If you do not like this behavior, you can remove the <db:code>#define ODBC_CHECK_DRIVER</db:code> line from the file <db:code>qsql_odbc.cpp</db:code>. Do this at your own risk!</db:para>
<db:para>By default, Qt instructs the ODBC driver to behave as an ODBC 2.x driver. However, for some <db:emphasis>driver-manager/ODBC 3.x-driver</db:emphasis> combinations (e.g., <db:emphasis>unixODBC/MaxDB ODBC</db:emphasis>), telling the ODBC driver to behave as a 2.x driver can cause the driver plugin to have unexpected behavior. To avoid this problem, instruct the ODBC driver to behave as a 3.x driver by <db:link xlink:href="qsqldatabase.xml#setConnectOptions">setting the connect option</db:link> <db:code>&quot;SQL_ATTR_ODBC_VERSION=SQL_OV_ODBC3&quot;</db:code> before you <db:link xlink:href="qsqldatabase.xml#open">open your database connection</db:link>. Note that this will affect multiple aspects of ODBC driver behavior, e.g., the SQLSTATEs. Before setting this connect option, consult your ODBC documentation about behavior differences you can expect.</db:para>
<db:para>When using the SAP HANA database, the connection has to be established using the option &quot;SCROLLABLERESULT=TRUE&quot;, as the HANA ODBC driver does not provide scrollable results by default, e.g.:</db:para>
<db:programlisting language="cpp">QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QODBC&quot;);
QString connectString = QStringLiteral(
    &quot;DRIVER=/path/to/installation/libodbcHDB.so;&quot;
    &quot;SERVERNODE=hostname:port;&quot;
    &quot;UID=USER;&quot;
    &quot;PWD=PASSWORD;&quot;
    &quot;SCROLLABLERESULT=true&quot;);
db.setDatabaseName(connectString);
</db:programlisting>
<db:para>If you experience very slow access of the ODBC datasource, make sure that ODBC call tracing is turned off in the ODBC datasource manager.</db:para>
<db:para>Some drivers do not support scrollable cursors. In that case, only queries in forwardOnly mode can be used successfully.</db:para>
<db:section xml:id="odbc-stored-procedure-support">
<db:title>ODBC Stored Procedure Support</db:title>
<db:para>With Microsoft SQL Server the result set returned by a stored procedure that uses the return statement, or returns multiple result sets, will be accessible only if you set the query's forward only mode to <db:emphasis>forward</db:emphasis> using <db:link xlink:href="qsqlquery.xml#setForwardOnly">QSqlQuery::setForwardOnly</db:link>().</db:para>
<db:programlisting language="cpp">// STORED_PROC uses the return statement or returns multiple result sets
QSqlQuery query;
query.setForwardOnly(true);
query.exec(&quot;{call STORED_PROC}&quot;);
</db:programlisting>
<db:note>
<db:para>The value returned by the stored procedure's return statement is discarded.</db:para>
</db:note>
</db:section>
<db:section xml:id="odbc-unicode-support">
<db:title>ODBC Unicode Support</db:title>
<db:para>The QODBC Plugin will use the Unicode API if UNICODE is defined. On Windows NT based systems, this is the default. Note that the ODBC driver and the DBMS must also support Unicode.</db:para>
<db:para>For the Oracle 9 ODBC driver (Windows), it is necessary to check &quot;SQL_WCHAR support&quot; in the ODBC driver manager otherwise Oracle will convert all Unicode strings to local 8-bit.</db:para>
</db:section>
<db:section xml:id="how-to-build-the-odbc-plugin-on-unix-and-macos">
<db:title>How to Build the ODBC Plugin on Unix and macOS</db:title>
<db:para>It is recommended that you use unixODBC. You can find the latest version and ODBC drivers at <db:link xlink:href="http://www.unixodbc.org">http://www.unixodbc.org</db:link>. You need the unixODBC header files and shared libraries.</db:para>
<db:para>Tell <db:code>qt-cmake</db:code> where to find the unixODBC header files and shared libraries (here it is assumed that unixODBC is installed in <db:code>/usr/local/unixODBC</db:code>) and build:</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;/Src/qtbase/src/plugins/sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;/&amp;lt;platform&amp;gt; -DODBC_INCLUDE_DIR=&quot;/usr/local/unixODBC/include&quot; -DODBC_LIBRARY=&quot;/usr/local/unixODBC/lib/libodbc.&amp;lt;so|dylib&amp;gt;&quot;
cmake --build .
cmake --install .
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-odbc-plugin-on-windows">
<db:title>How to Build the ODBC Plugin on Windows</db:title>
<db:para>The ODBC header and include files should already be installed in the right directories. You just have to build the plugin as follows:</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;\Src\qtbase\src\plugins\sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;\&amp;lt;platform&amp;gt;
cmake --build .
cmake --install .
</db:programlisting>
<db:anchor xml:id="qpsql"/>
</db:section>
</db:section>
<db:section xml:id="qpsql-for-postgresql-version-7-3-and-above">
<db:title>QPSQL for PostgreSQL (Version 7.3 and Above)</db:title>
<db:para>The QPSQL driver supports version 7.3 and higher of the PostgreSQL server.</db:para>
<db:para>For more information about PostgreSQL visit <db:link xlink:href="http://www.postgresql.org">http://www.postgresql.org</db:link>.</db:para>
<db:section xml:id="qpsql-unicode-support">
<db:title>QPSQL Unicode Support</db:title>
<db:para>The QPSQL driver automatically detects whether the PostgreSQL database you are connecting to supports Unicode or not. Unicode is automatically used if the server supports it. Note that the driver only supports the UTF-8 encoding. If your database uses any other encoding, the server must be compiled with Unicode conversion support.</db:para>
<db:para>Unicode support was introduced in PostgreSQL version 7.1 and it will only work if both the server and the client library have been compiled with multibyte support. More information about how to set up a multibyte enabled PostgreSQL server can be found in the PostgreSQL Administrator Guide, Chapter 5.</db:para>
</db:section>
<db:section xml:id="qpsql-case-sensitivity">
<db:title>QPSQL Case Sensitivity</db:title>
<db:para>PostgreSQL databases will only respect case sensitivity if the table or field name is quoted when the table is created. So for example, a SQL query such as:</db:para>
<db:programlisting language="cpp">CREATE TABLE &quot;testTable&quot; (&quot;id&quot; INTEGER);
</db:programlisting>
<db:para>will ensure that it can be accessed with the same case that was used. If the table or field name is not quoted when created, the actual table name or field name will be lower-case. When <db:link xlink:href="qsqldatabase.xml#record">QSqlDatabase::record</db:link>() or <db:link xlink:href="qsqldatabase.xml#primaryIndex">QSqlDatabase::primaryIndex</db:link>() access a table or field that was unquoted when created, the name passed to the function must be lower-case to ensure it is found. For example:</db:para>
<db:programlisting language="cpp">QString tableString(&quot;testTable&quot;);
QSqlQuery q;
// Create table query is not quoted, therefore it is mapped to lower case
q.exec(QString(&quot;CREATE TABLE %1 (id INTEGER)&quot;).arg(tableString));
// Call toLower() on the string so that it can be matched
QSqlRecord rec = database.record(tableString.toLower());
</db:programlisting>
</db:section>
<db:section xml:id="qpsql-forward-only-query-support">
<db:title>QPSQL Forward-only query support</db:title>
<db:para>To use forward-only queries, you must build the QPSQL plugin with PostreSQL client library version 9.2 or later. If the plugin is built with an older version, then forward-only mode will not be available - calling <db:link xlink:href="qsqlquery.xml#setForwardOnly">QSqlQuery::setForwardOnly</db:link>() with <db:code>true</db:code> will have no effect.</db:para>
<db:warning>
<db:para>If you build the QPSQL plugin with PostgreSQL version 9.2 or later, then you must distribute your application with libpq version 9.2 or later. Otherwise, loading the QPSQL plugin will fail with the following message:</db:para>
</db:warning>
<db:programlisting language="cpp">QSqlDatabase: QPSQL driver not loaded
QSqlDatabase: available drivers: QSQLITE QMYSQL QMARIADB QODBC QPSQL
Could not create database object
</db:programlisting>
<db:para>While navigating the results in forward-only mode, the handle of <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link> may change. Applications that use the low-level handle of SQL result must get a new handle after each call to any of <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link> fetch functions. Example:</db:para>
<db:programlisting language="cpp">QSqlQuery query;
QVariant v;
query.setForwardOnly(true);
query.exec(&quot;SELECT * FROM table&quot;);
while (query.next()) {
    // Handle changes in every iteration of the loop
    v = query.result()-&amp;gt;handle();

    if (qstrcmp(v.typeName(), &quot;PGresult*&quot;) == 0) {
        PGresult *handle = *static_cast&amp;lt;PGresult **&amp;gt;(v.data());
        if (handle) {
            // Do something...
        }
    }
}
</db:programlisting>
<db:para>While reading the results of a forward-only query with PostgreSQL, the database connection cannot be used to execute other queries. This is a limitation of libpq library. Example:</db:para>
<db:programlisting language="cpp">int value;
QSqlQuery query1;
query1.setForwardOnly(true);
query1.exec(&quot;select * FROM table1&quot;);
while (query1.next()) {
    value = query1.value(0).toInt();
    if (value == 1) {
        QSqlQuery query2;
        query2.exec(&quot;update table2 set col=2&quot;);  // WRONG: This will discard all results of
    }                                            // query1, and cause the loop to quit
}
</db:programlisting>
<db:para>This problem will not occur if query1 and query2 use different database connections, or if we execute query2 after the while loop.</db:para>
<db:note>
<db:para>Some methods of <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> like tables(), primaryIndex() implicitly execute SQL queries, so these also cannot be used while navigating the results of forward-only query.</db:para>
</db:note>
<db:note>
<db:para>QPSQL will print the following warning if it detects a loss of query results:</db:para>
</db:note>
<db:programlisting language="cpp">QPSQLDriver::getResult: Query results lost - probably discarded on executing another SQL query.
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-qpsql-plugin-on-unix-and-macos">
<db:title>How to Build the QPSQL Plugin on Unix and macOS</db:title>
<db:para>You need the PostgreSQL client library and headers installed.</db:para>
<db:para>To make <db:code>qt-cmake</db:code> find the PostgreSQL header files and shared libraries, build the plugin the following way (assuming that the PostgreSQL client is installed in <db:code>/usr/local/pgsql</db:code>):</db:para>
<db:programlisting language="cpp">mkdir build-psql-driver
cd build-psql-driver

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;/Src/qtbase/src/plugins/sqldrivers-DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;/&amp;lt;platform&amp;gt; -DCMAKE_INCLUDE_PATH=&quot;/usr/local/pgsql/include&quot; -DCMAKE_LIBRARY_PATH=&quot;/usr/local/pgsql/lib&quot;
cmake --build .
cmake --install .
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-qpsql-plugin-on-windows">
<db:title>How to Build the QPSQL Plugin on Windows</db:title>
<db:para>Install the appropriate PostgreSQL developer libraries for your compiler. Assuming that PostgreSQL was installed in <db:code>C:\pgsql</db:code>, build the plugin as follows:</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;\Src\qtbase\src\plugins\sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;\&amp;lt;platform&amp;gt; -DCMAKE_INCLUDE_PATH=&quot;C:\pgsql\include&quot; -DCMAKE_LIBRARY_PATH=&quot;C:\pgsql\lib&quot;
cmake --build .
cmake --install .
</db:programlisting>
<db:para>Users of MinGW may wish to consult the following online document: <db:link xlink:href="http://www.postgresql.org/docs/current/static/installation-platform-notes.html#INSTALLATION-NOTES-MINGW">PostgreSQL MinGW/Native Windows</db:link>.</db:para>
<db:para>When you distribute your application, remember to include libpq.dll in your installation package. It must be placed in the same folder as the application executable.</db:para>
<db:anchor xml:id="qdb2"/>
</db:section>
</db:section>
<db:section xml:id="qdb2-for-ibm-db2-version-7-1-and-above">
<db:title>QDB2 for IBM DB2 (Version 7.1 and Above)</db:title>
<db:para>The Qt DB2 plugin makes it possible to access IBM DB2 databases. It has been tested with IBM DB2 v7.1 and 7.2. You must install the IBM DB2 development client library, which contains the header and library files necessary for compiling the QDB2 plugin.</db:para>
<db:para>The QDB2 driver supports prepared queries, reading/writing of Unicode strings and reading/writing of BLOBs.</db:para>
<db:para>We suggest using a forward-only query when calling stored procedures in DB2 (see <db:link xlink:href="qsqlquery.xml#setForwardOnly">QSqlQuery::setForwardOnly</db:link>()).</db:para>
<db:section xml:id="how-to-build-the-qdb2-plugin-on-unix-and-macos">
<db:title>How to Build the QDB2 Plugin on Unix and macOS</db:title>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;/Src/qtbase/src/plugins/sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;/&amp;lt;platform&amp;gt; -DDB2_INCLUDE_DIR=&quot;/usr/local/db2/include&quot; -DDB2_LIBRARY=&quot;/usr/local/db2/lib/libdb2.&amp;lt;so|dylib&amp;gt;&quot;
cmake --build .
cmake --install .
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-qdb2-plugin-on-windows">
<db:title>How to Build the QDB2 Plugin on Windows</db:title>
<db:para>The DB2 header and include files should already be installed in the right directories. You just have to build the plugin as follows:</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;\Src\qtbase\src\plugins\sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;\&amp;lt;platform&amp;gt; -DDB2_INCLUDE_DIR=&quot;C:\db2\include&quot; -DDB2_LIBRARY=&quot;C:\db2\lib\db2.lib&quot;
cmake --build .
cmake --install .
</db:programlisting>
<db:anchor xml:id="qsqlite"/>
</db:section>
</db:section>
<db:section xml:id="qsqlite-for-sqlite-version-3-and-above">
<db:title>QSQLITE for SQLite (Version 3 and Above)</db:title>
<db:para>The Qt SQLite plugin makes it possible to access SQLite databases. SQLite is an in-process database, which means that it is not necessary to have a database server. SQLite operates on a single file, which must be set as the database name when opening a connection. If the file does not exist, SQLite will try to create it. SQLite also supports in-memory and temporary databases. Simply pass respectively &quot;:memory:&quot; or an empty string as the database name.</db:para>
<db:para>SQLite has some restrictions regarding multiple users and multiple transactions. If you try to read/write on a resource from different transactions, your application might freeze until one transaction commits or rolls back. The Qt SQLite driver will retry to write to a locked resource until it runs into a timeout (see <db:code>QSQLITE_BUSY_TIMEOUT</db:code> at <db:link xlink:href="qsqldatabase.xml#setConnectOptions">QSqlDatabase::setConnectOptions</db:link>()).</db:para>
<db:para>In SQLite any column, with the exception of an INTEGER PRIMARY KEY column, may be used to store any type of value. For instance, a column declared as INTEGER may contain an integer value in one row and a text value in the next. This is due to SQLite associating the type of a value with the value itself rather than with the column it is stored in. A consequence of this is that the type returned by QSqlField::type() only indicates the field's recommended type. No assumption of the actual type should be made from this and the type of the individual values should be checked.</db:para>
<db:para>The driver is locked for updates while a select is executed. This may cause problems when using <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> because Qt's item views fetch data as needed (with QSqlQuery::fetchMore() in the case of <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link>).</db:para>
<db:para>You can find information about SQLite on <db:link xlink:href="http://www.sqlite.org">http://www.sqlite.org</db:link>.</db:para>
<db:section xml:id="how-to-build-the-qsqlite-plugin">
<db:title>How to Build the QSQLITE Plugin</db:title>
<db:para>SQLite version 3 is included as a third-party library within Qt. It can be built by passing the <db:code>-DFEATURE_system_sqlite=OFF</db:code> parameter to the <db:code>qt-cmake</db:code> command line.</db:para>
<db:para>If you do not want to use the SQLite library included with Qt, you can pass <db:code>-DFEATURE_system_sqlite=ON</db:code> to the <db:code>qt-cmake</db:code> command line to use the SQLite libraries of the operating system. This is recommended whenever possible, as it reduces the installation size and removes one component for which you need to track security advisories.</db:para>
<db:para>On Unix and macOS (replace <db:code>$SQLITE</db:code> with the directory where SQLite resides):</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;/Src/qtbase/src/plugins/sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;/&amp;lt;platform&amp;gt; -DFEATURE_system_sqlite=ON -DCMAKE_INCLUDE_PATH=&quot;$SQLITE/include&quot; -DCMAKE_LIBRARY_PATH=&quot;$SQLITE/lib&quot;
cmake --build .
cmake --install .
</db:programlisting>
<db:para>On Windows (assuming that SQLite is installed in <db:code>C:\SQLITE</db:code>):</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;\Src\qtbase\src\plugins\sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;\&amp;lt;platform&amp;gt; -DFEATURE_system_sqlite=ON -DCMAKE_INCLUDE_PATH=&quot;C:\SQLITE\include&quot; -DCMAKE_LIBRARY_PATH=&quot;C:\SQLITE\lib&quot;
cmake --build .
cmake --install .
</db:programlisting>
</db:section>
<db:section xml:id="enable-regexp-operator">
<db:title>Enable REGEXP operator</db:title>
<db:para>SQLite comes with a REGEXP operation. However the needed implementation must be provided by the user. For convenience a default implementation can be enabled by <db:link xlink:href="qsqldatabase.xml#setConnectOptions">setting the connect option</db:link> <db:code>QSQLITE_ENABLE_REGEXP</db:code> before <db:link xlink:href="qsqldatabase.xml#open">the database connection is opened</db:link>. Then a SQL statement like &quot;column REGEXP 'pattern'&quot; basically expands to the Qt code</db:para>
<db:programlisting language="cpp">column.contains(QRegularExpression(&quot;pattern&quot;));
</db:programlisting>
<db:para>For better performance the regular expressions are cached internally. By default the cache size is 25, but it can be changed through the option's value. For example passing &quot;<db:code>QSQLITE_ENABLE_REGEXP=10</db:code>&quot; reduces the cache size to 10.</db:para>
</db:section>
<db:section xml:id="qsqlite-file-format-compatibility">
<db:title>QSQLITE File Format Compatibility</db:title>
<db:para>SQLite minor releases sometimes break file format forward compatibility. For example, SQLite 3.3 can read database files created with SQLite 3.2, but databases created with SQLite 3.3 cannot be read by SQLite 3.2. Please refer to the SQLite documentation and change logs for information about file format compatibility between versions.</db:para>
<db:para>Qt minor releases usually follow the SQLite minor releases, while Qt patch releases follow SQLite patch releases. Patch releases are therefore both backward and forward compatible.</db:para>
<db:para>To force SQLite to use a specific file format, it is necessary to build and ship your own database plugin with your own SQLite library as illustrated above. Some versions of SQLite can be forced to write a specific file format by setting the <db:code>SQLITE_DEFAULT_FILE_FORMAT</db:code> define when building SQLite.</db:para>
<db:anchor xml:id="qibase"/>
</db:section>
</db:section>
<db:section xml:id="qibase-for-borland-interbase">
<db:title>QIBASE for Borland InterBase</db:title>
<db:para>The Qt InterBase plugin makes it possible to access the InterBase and Firebird databases. InterBase can either be used as a client/server or without a server in which case it operates on local files. The database file must exist before a connection can be established. Firebird must be used with a server configuration.</db:para>
<db:para>Note that InterBase requires you to specify the full path to the database file, no matter whether it is stored locally or on another server.</db:para>
<db:programlisting language="cpp">QSqlDatabase db;
db.setHostName(&quot;MyServer&quot;);
db.setDatabaseName(&quot;C:\\test.gdb&quot;);
</db:programlisting>
<db:para>You need the InterBase/Firebird development headers and libraries to build this plugin.</db:para>
<db:para>Due to license incompatibilities with the GPL, users of the Qt Open Source Edition are not allowed to link this plugin to the commercial editions of InterBase. Please use Firebird or the free edition of InterBase.</db:para>
<db:section xml:id="qibase-unicode-support-and-text-encoding">
<db:title>QIBASE Unicode Support and Text Encoding</db:title>
<db:para>By default the driver connects to the database using UNICODE_FSS. This can be overridden by setting the ISC_DPB_LC_CTYPE parameter with <db:link xlink:href="qsqldatabase.xml#setConnectOptions">QSqlDatabase::setConnectOptions</db:link>() before opening the connection.</db:para>
<db:programlisting language="cpp">// connect to database using the Latin-1 character set
db.setConnectOptions(&quot;ISC_DPB_LC_CTYPE=Latin1&quot;);
if (db.open())
    qDebug(&quot;The database connection is open.&quot;);
</db:programlisting>
<db:para>If Qt does not support the given text encoding the driver will issue a warning message and connect to the database using UNICODE_FSS.</db:para>
<db:para>Note that if the text encoding set when connecting to the database is not the same as in the database, problems with transliteration might arise.</db:para>
</db:section>
<db:section xml:id="qibase-stored-procedures">
<db:title>QIBASE Stored procedures</db:title>
<db:para>InterBase/Firebird return OUT values as result set, so when calling stored procedure, only IN values need to be bound via <db:link xlink:href="qsqlquery.xml#bindValue">QSqlQuery::bindValue</db:link>(). The RETURN/OUT values can be retrieved via <db:link xlink:href="qsqlquery.xml#value">QSqlQuery::value</db:link>(). Example:</db:para>
<db:programlisting language="cpp">QSqlQuery q;
q.exec(&quot;execute procedure my_procedure&quot;);
if (q.next())
    qDebug() &amp;lt;&amp;lt; q.value(0); // outputs the first RETURN/OUT value
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-qibase-plugin-on-unix-and-macos">
<db:title>How to Build the QIBASE Plugin on Unix and macOS</db:title>
<db:para>The following assumes InterBase or Firebird is installed in <db:code>/opt/interbase</db:code>:</db:para>
<db:para>If you are using InterBase:</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;/Src/qtbase/src/plugins/sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;/&amp;lt;platform&amp;gt; -DInterbase_INCLUDE_DIR=&quot;/opt/interbase/include&quot; -DInterbase_LIBRARY=&quot;/opt/interbase/lib/libgds.&amp;lt;so|dylib&amp;gt;&quot;
cmake --build .
cmake --install .
</db:programlisting>
<db:para>If you are using Firebird, the Firebird library has to be set explicitly:</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;/Src/qtbase/src/plugins/sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;/&amp;lt;platform&amp;gt; -DInterbase_INCLUDE_DIR=&quot;/opt/interbase/include&quot; -DInterbase_LIBRARY=&quot;/opt/interbase/lib/libfbclient.&amp;lt;so|dylib&amp;gt;&quot;
cmake --build .
cmake --install .
</db:programlisting>
</db:section>
<db:section xml:id="how-to-build-the-qibase-plugin-on-windows">
<db:title>How to Build the QIBASE Plugin on Windows</db:title>
<db:para>The following assumes InterBase or Firebird is installed in <db:code>C:\interbase</db:code>:</db:para>
<db:para>If you are using InterBase:</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;\Src\qtbase\src\plugins\sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;\&amp;lt;platform&amp;gt; -DInterbase_INCLUDE_DIR=&quot;C:\interbase\include&quot; -DInterbase_LIBRARY=&quot;C:\interbase\gds.lib&quot;
cmake --build .
cmake --install .
</db:programlisting>
<db:para>If you are using Firebird:</db:para>
<db:programlisting language="cpp">mkdir build-sqldrivers
cd build-sqldrivers

qt-cmake -G Ninja &amp;lt;qt_installation_path&amp;gt;\Src\qtbase\src\plugins\sqldrivers -DCMAKE_INSTALL_PREFIX=&amp;lt;qt_installation_path&amp;gt;\&amp;lt;platform&amp;gt; -DInterbase_INCLUDE_DIR=&quot;C:\interbase\include&quot; -DInterbase_LIBRARY=&quot;C:\interbase\lib\fbclient_ms.lib&quot;
cmake --build .
cmake --install .
</db:programlisting>
<db:para>Note that <db:code>C:\interbase\bin</db:code> must be in the <db:code>PATH</db:code>.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="troubleshooting">
<db:title>Troubleshooting</db:title>
<db:para>You should always use client libraries that have been compiled with the same compiler as you are using for your project. If you cannot get a source distribution to compile the client libraries yourself, you must make sure that the pre-compiled library is compatible with your compiler, otherwise you will get a lot of &quot;undefined symbols&quot; errors. Some compilers have tools to convert libraries, e.g. Borland ships the tool <db:code>COFF2OMF.EXE</db:code> to convert libraries that have been generated with Microsoft Visual C++.</db:para>
<db:para>If the compilation of a plugin succeeds but it cannot be loaded, make sure that the following requirements are met:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Ensure that the plugin is in the correct directory. You can use <db:link xlink:href="qcoreapplication.xml#libraryPaths">QApplication::libraryPaths</db:link>() to determine where Qt looks for plugins.</db:para>
</db:listitem>
<db:listitem>
<db:para>Ensure that the client libraries of the DBMS are available on the system. On Unix, run the command <db:code>ldd</db:code> and pass the name of the plugin as parameter, for example <db:code>ldd libqsqlmysql.so</db:code>. You will get a warning if any of the client libraries could not be found. On Windows, you can use Visual Studio's dependency walker. With Qt Creator, you can update the <db:code>PATH</db:code> environment variable in the <db:emphasis role="bold">Run</db:emphasis> section of the <db:emphasis role="bold">Project</db:emphasis> panel to include the path to the folder containing the client libraries.</db:para>
</db:listitem>
<db:listitem>
<db:para>Compile Qt with <db:code>QT_DEBUG_COMPONENT</db:code> defined to get very verbose debug output when loading plugins.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Make sure you have followed the guide to <db:link xlink:href="deployment-plugins.xml">Deploying Plugins</db:link>.</db:para>
<db:anchor xml:id="development"/>
</db:section>
<db:section xml:id="how-to-write-your-own-database-driver">
<db:title>How to Write Your Own Database Driver</db:title>
<db:para><db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> is responsible for loading and managing database driver plugins. When a database is added (see <db:link xlink:href="qsqldatabase.xml#addDatabase">QSqlDatabase::addDatabase</db:link>()), the appropriate driver plugin is loaded (using <db:link xlink:href="qsqldriverplugin.xml">QSqlDriverPlugin</db:link>). <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> relies on the driver plugin to provide interfaces for <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link> and <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link>.</db:para>
<db:para><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link> is an abstract base class which defines the functionality of a SQL database driver. This includes functions such as <db:link xlink:href="qsqldriver.xml#open">QSqlDriver::open</db:link>() and <db:link xlink:href="qsqldriver.xml#close">QSqlDriver::close</db:link>(). <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link> is responsible for connecting to a database, establish the proper environment, etc. In addition, <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link> can create <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> objects appropriate for the particular database API. <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> forwards many of its function calls directly to <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link> which provides the concrete implementation.</db:para>
<db:para><db:link xlink:href="qsqlresult.xml">QSqlResult</db:link> is an abstract base class which defines the functionality of a SQL database query. This includes statements such as <db:code>SELECT</db:code>, <db:code>UPDATE</db:code>, and <db:code>ALTER</db:code> <db:code>TABLE</db:code>. <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link> contains functions such as QSqlResult::next() and QSqlResult::value(). <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link> is responsible for sending queries to the database, returning result data, etc. <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> forwards many of its function calls directly to <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link> which provides the concrete implementation.</db:para>
<db:para><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link> and <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link> are closely connected. When implementing a Qt SQL driver, both of these classes must to be subclassed and the abstract virtual methods in each class must be implemented.</db:para>
<db:para>To implement a Qt SQL driver as a plugin (so that it is recognized and loaded by the Qt library at runtime), the driver must use the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro. Read <db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link> for more information on this. You can also check out how this is done in the SQL plugins that are provided with Qt in <db:code>QTDIR/qtbase/src/plugins/sqldrivers</db:code>.</db:para>
<db:para>The following code can be used as a skeleton for a SQL driver:</db:para>
<db:programlisting language="cpp">class XyzResult : public QSqlResult
{
public:
    XyzResult(const QSqlDriver *driver)
        : QSqlResult(driver) {}
    ~XyzResult() {}

protected:
    QVariant data(int /* index */) override { return QVariant(); }
    bool isNull(int /* index */) override { return false; }
    bool reset(const QString &amp;amp; /* query */) override { return false; }
    bool fetch(int /* index */) override { return false; }
    bool fetchFirst() override { return false; }
    bool fetchLast() override { return false; }
    int size() override { return 0; }
    int numRowsAffected() override { return 0; }
    QSqlRecord record() const override { return QSqlRecord(); }
};

class XyzDriver : public QSqlDriver
{
public:
    XyzDriver() {}
    ~XyzDriver() {}

    bool hasFeature(DriverFeature /* feature */) const override { return false; }
    bool open(const QString &amp;amp; /* db */, const QString &amp;amp; /* user */,
              const QString &amp;amp; /* password */, const QString &amp;amp; /* host */,
              int /* port */, const QString &amp;amp; /* options */) override
        { return false; }
    void close() override {}
    QSqlResult *createResult() const override { return new XyzResult(this); }
};
</db:programlisting>
</db:section>
</db:article>
