<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Basic Sort/Filter Model Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Basic Sort/Filter Model example illustrates how to use <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> to perform basic sorting and filtering.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;window.h&quot;

Window::Window()
{
    proxyModel = new QSortFilterProxyModel;

    sourceView = new QTreeView;
    sourceView-&amp;gt;setRootIsDecorated(false);
    sourceView-&amp;gt;setAlternatingRowColors(true);

    proxyView = new QTreeView;
    proxyView-&amp;gt;setRootIsDecorated(false);
    proxyView-&amp;gt;setAlternatingRowColors(true);
    proxyView-&amp;gt;setModel(proxyModel);
    proxyView-&amp;gt;setSortingEnabled(true);

    sortCaseSensitivityCheckBox = new QCheckBox(tr(&quot;Case sensitive sorting&quot;));
    filterCaseSensitivityCheckBox = new QCheckBox(tr(&quot;Case sensitive filter&quot;));

    filterPatternLineEdit = new QLineEdit;
    filterPatternLabel = new QLabel(tr(&quot;&amp;amp;Filter pattern:&quot;));
    filterPatternLabel-&amp;gt;setBuddy(filterPatternLineEdit);

    filterSyntaxComboBox = new QComboBox;
    filterSyntaxComboBox-&amp;gt;addItem(tr(&quot;Regular expression&quot;), QRegExp::RegExp);
    filterSyntaxComboBox-&amp;gt;addItem(tr(&quot;Wildcard&quot;), QRegExp::Wildcard);
    filterSyntaxComboBox-&amp;gt;addItem(tr(&quot;Fixed string&quot;), QRegExp::FixedString);
    filterSyntaxLabel = new QLabel(tr(&quot;Filter &amp;amp;syntax:&quot;));
    filterSyntaxLabel-&amp;gt;setBuddy(filterSyntaxComboBox);

    filterColumnComboBox = new QComboBox;
    filterColumnComboBox-&amp;gt;addItem(tr(&quot;Subject&quot;));
    filterColumnComboBox-&amp;gt;addItem(tr(&quot;Sender&quot;));
    filterColumnComboBox-&amp;gt;addItem(tr(&quot;Date&quot;));
    filterColumnLabel = new QLabel(tr(&quot;Filter &amp;amp;column:&quot;));
    filterColumnLabel-&amp;gt;setBuddy(filterColumnComboBox);

    connect(filterPatternLineEdit, &amp;amp;QLineEdit::textChanged,
            this, &amp;amp;Window::filterRegExpChanged);
    connect(filterSyntaxComboBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QComboBox::currentIndexChanged),
            this, &amp;amp;Window::filterRegExpChanged);
    connect(filterColumnComboBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QComboBox::currentIndexChanged),
            this, &amp;amp;Window::filterColumnChanged);
    connect(filterCaseSensitivityCheckBox, &amp;amp;QAbstractButton::toggled,
            this, &amp;amp;Window::filterRegExpChanged);
    connect(sortCaseSensitivityCheckBox, &amp;amp;QAbstractButton::toggled,
            this, &amp;amp;Window::sortChanged);

    sourceGroupBox = new QGroupBox(tr(&quot;Original Model&quot;));
    proxyGroupBox = new QGroupBox(tr(&quot;Sorted/Filtered Model&quot;));

    QHBoxLayout *sourceLayout = new QHBoxLayout;
    sourceLayout-&amp;gt;addWidget(sourceView);
    sourceGroupBox-&amp;gt;setLayout(sourceLayout);

    QGridLayout *proxyLayout = new QGridLayout;
    proxyLayout-&amp;gt;addWidget(proxyView, 0, 0, 1, 3);
    proxyLayout-&amp;gt;addWidget(filterPatternLabel, 1, 0);
    proxyLayout-&amp;gt;addWidget(filterPatternLineEdit, 1, 1, 1, 2);
    proxyLayout-&amp;gt;addWidget(filterSyntaxLabel, 2, 0);
    proxyLayout-&amp;gt;addWidget(filterSyntaxComboBox, 2, 1, 1, 2);
    proxyLayout-&amp;gt;addWidget(filterColumnLabel, 3, 0);
    proxyLayout-&amp;gt;addWidget(filterColumnComboBox, 3, 1, 1, 2);
    proxyLayout-&amp;gt;addWidget(filterCaseSensitivityCheckBox, 4, 0, 1, 2);
    proxyLayout-&amp;gt;addWidget(sortCaseSensitivityCheckBox, 4, 2);
    proxyGroupBox-&amp;gt;setLayout(proxyLayout);

    QVBoxLayout *mainLayout = new QVBoxLayout;

    mainLayout-&amp;gt;addWidget(sourceGroupBox);
    mainLayout-&amp;gt;addWidget(proxyGroupBox);

    setLayout(mainLayout);

    setWindowTitle(tr(&quot;Basic Sort/Filter Model&quot;));
    resize(500, 450);

    proxyView-&amp;gt;sortByColumn(1, Qt::AscendingOrder);
    filterColumnComboBox-&amp;gt;setCurrentIndex(1);

    filterPatternLineEdit-&amp;gt;setText(&quot;Andy|Grace&quot;);
    filterCaseSensitivityCheckBox-&amp;gt;setChecked(true);
    sortCaseSensitivityCheckBox-&amp;gt;setChecked(true);
}

void Window::setSourceModel(QAbstractItemModel *model)
{
    proxyModel-&amp;gt;setSourceModel(model);
    sourceView-&amp;gt;setModel(model);
}

void Window::filterRegExpChanged()
{
    QRegExp::PatternSyntax syntax =
            QRegExp::PatternSyntax(filterSyntaxComboBox-&amp;gt;itemData(
                    filterSyntaxComboBox-&amp;gt;currentIndex()).toInt());
    Qt::CaseSensitivity caseSensitivity =
            filterCaseSensitivityCheckBox-&amp;gt;isChecked() ? Qt::CaseSensitive
                                                       : Qt::CaseInsensitive;

    QRegExp regExp(filterPatternLineEdit-&amp;gt;text(), caseSensitivity, syntax);
    proxyModel-&amp;gt;setFilterRegExp(regExp);
}

void Window::filterColumnChanged()
{
    proxyModel-&amp;gt;setFilterKeyColumn(filterColumnComboBox-&amp;gt;currentIndex());
}

void Window::sortChanged()
{
    proxyModel-&amp;gt;setSortCaseSensitivity(
            sortCaseSensitivityCheckBox-&amp;gt;isChecked() ? Qt::CaseSensitive
                                                     : Qt::CaseInsensitive);
}

</db:programlisting>
</db:article>
