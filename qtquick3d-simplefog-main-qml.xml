<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Simple Fog Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to enable fog in the 3D scene.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import QtQuick.Dialogs
import QtQuick3D
import QtQuick3D.Helpers

Window {
    id: window
    width: 1280
    height: 800
    color: &quot;black&quot;
    visible: true

    View3D {
        id: root
        anchors.fill: parent

        Fog {
            id: theFog

            enabled: cbFogEnabled.checked
            depthEnabled: cbDepthEnabled.checked
            heightEnabled: cbHeightEnabled.checked
            transmitEnabled: cbTransmitEnabled.checked

            density: valDensity.value
            depthNear: valDepth.first.value
            depthFar: valDepth.second.value
            depthCurve: valDepthCurve.value
            leastIntenseY: valHeightMin.value
            mostIntenseY: valHeightMax.value
            heightCurve: valHeightCurve.value
            transmitCurve: valTransmitCurve.value
        }

        environment: SceneEnvironment {
            backgroundMode: SceneEnvironment.Color
            clearColor: theFog.color
            fog: theFog
        }

        PerspectiveCamera {
            id: camera
            z: 300

            SequentialAnimation on z {
                running: cbAutoMove.checked
                loops: -1
                NumberAnimation {
                    from: 600
                    to: -600
                    duration: 5000
                }
                NumberAnimation {
                    from: -600
                    to: 600
                    duration: 5000
                }
            }
        }

        DirectionalLight {
        }

        PointLight {
            y: 100
        }

        Model {
            source: &quot;#Rectangle&quot;
            eulerRotation.x: -75
            y: -200
            scale: Qt.vector3d(100, 100, 100)
            materials: PrincipledMaterial {
                baseColor: &quot;green&quot;
            }
        }

        RandomInstancing {
            id: randomInstancing
            instanceCount: 2000

            position: InstanceRange {
                from: Qt.vector3d(-500, -300, 0)
                to: Qt.vector3d(500, 300, -2000)
            }
            scale: InstanceRange {
                from: Qt.vector3d(1, 1, 1)
                to: Qt.vector3d(50, 50, 50)
            }
            rotation: InstanceRange {
                from: Qt.vector3d(0, 0, 0)
                to: Qt.vector3d(180, 180, 180)
            }
            color: InstanceRange {
                from: &quot;#000000&quot;
                to: &quot;#ffffff&quot;
            }
            randomSeed: 2022
        }

        Model {
            instancing: randomInstancing
            source: &quot;#Sphere&quot;
            materials: PrincipledMaterial { }
            scale: Qt.vector3d(0.005, 0.005, 0.005)
        }

        WasdController {
            controlledObject: camera
        }
    }

    Rectangle {
        color: &quot;lightGray&quot;
        width: 350
        height: parent.height - 40
        anchors.verticalCenter: parent.verticalCenter
        x: 8
        radius: 8
        ColumnLayout {
            anchors.centerIn: parent
            GroupBox {
                title: &quot;Fog&quot;
                ColumnLayout {
                    RowLayout {
                        CheckBox {
                            id: cbFogEnabled
                            text: &quot;Enabled&quot;
                            checked: true
                        }
                        Button {
                            text: &quot;Color: &quot; + theFog.color
                            onClicked: colorDialog.open()
                        }
                    }
                }
            }
            GroupBox {
                title: &quot;Depth Fog&quot;
                ColumnLayout {
                    CheckBox {
                        id: cbDepthEnabled
                        text: &quot;Enabled&quot;
                        checked: true
                    }
                    RowLayout {
                        Label {
                            text: &quot;Density&quot;
                        }
                        Slider {
                            id: valDensity
                            focusPolicy: Qt.NoFocus
                            from: 0.0
                            to: 1.0
                            value: 1.0
                        }
                        Label {
                            text: valDensity.value.toFixed(2)
                        }
                    }
                    RowLayout {
                        Label {
                            text: &quot;Near/Far&quot;
                        }
                        RangeSlider {
                            id: valDepth
                            focusPolicy: Qt.NoFocus
                            from: -1000.0
                            to: 1000.0
                            first.value: 10.0
                            second.value: 1000.0
                        }
                    }
                    Label {
                        text: &quot;Near: &quot; + valDepth.first.value.toFixed(2) + &quot; Far: &quot; + valDepth.second.value.toFixed(2)
                    }
                    RowLayout {
                        Label {
                            text: &quot;Curve&quot;
                        }
                        Slider {
                            id: valDepthCurve
                            focusPolicy: Qt.NoFocus
                            from: 0.0
                            to: 1.0
                            value: 1.0
                        }
                        Label {
                            text: valDepthCurve.value.toFixed(2)
                        }
                    }
                }
            }
            GroupBox {
                title: &quot;Height Fog&quot;
                ColumnLayout {
                    CheckBox {
                        id: cbHeightEnabled
                        text: &quot;Enabled&quot;
                        checked: false
                    }
                    RowLayout {
                        Label {
                            text: &quot;Least Intense Y&quot;
                        }
                        Slider {
                            id: valHeightMin
                            focusPolicy: Qt.NoFocus
                            from: -1000.0
                            to: 1000.0
                            value: 10.0
                        }
                    }
                    RowLayout {
                        Label {
                            text: &quot;Most Intense Y&quot;
                        }
                        Slider {
                            id: valHeightMax
                            focusPolicy: Qt.NoFocus
                            from: -1000.0
                            to: 1000.0
                            value: 0.0
                        }
                    }
                    Label {
                        text: &quot;Least intense Y: &quot; + valHeightMin.value.toFixed(2) + &quot; Most intense Y: &quot; + valHeightMax.value.toFixed(2)
                    }
                    RowLayout {
                        Label {
                            text: &quot;Curve&quot;
                        }
                        Slider {
                            id: valHeightCurve
                            focusPolicy: Qt.NoFocus
                            from: 0.0
                            to: 100.0
                            value: 1.0
                        }
                        Label {
                            text: valHeightCurve.value.toFixed(2)
                        }
                    }
                }
            }
            GroupBox {
                title: &quot;Light Transmission&quot;
                ColumnLayout {
                    CheckBox {
                        id: cbTransmitEnabled
                        text: &quot;Enabled&quot;
                        checked: false
                    }
                    RowLayout {
                        Label {
                            text: &quot;Curve&quot;
                        }
                        Slider {
                            id: valTransmitCurve
                            focusPolicy: Qt.NoFocus
                            from: 0.0
                            to: 100.0
                            value: 1.0
                        }
                        Label {
                            text: valTransmitCurve.value.toFixed(2)
                        }
                    }
                }
            }
        }
    }

    Item {
        width: debugViewToggleText.implicitWidth
        height: debugViewToggleText.implicitHeight
        anchors.right: parent.right
        Label {
            id: debugViewToggleText
            text: &quot;Click here &quot; + (dbg.visible ? &quot;to hide DebugView&quot; : &quot;for DebugView&quot;)
            anchors.right: parent.right
            anchors.top: parent.top
        }
        MouseArea {
            anchors.fill: parent
            onClicked: dbg.visible = !dbg.visible
            DebugView {
                y: debugViewToggleText.height * 2
                anchors.right: parent.right
                source: root
                id: dbg
                visible: false
            }
        }
    }

    CheckBox {
        id: cbAutoMove
        anchors.right: parent.right
        anchors.bottom: parent.bottom
        text: &quot;Auto Move&quot;
        checked: true
    }

    ColorDialog {
        id: colorDialog
        selectedColor: theFog.color
        onAccepted: theFog.color = selectedColor
    }
}

</db:programlisting>
</db:article>
