<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Icons Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Icons example shows how QIcon can generate pixmaps reflecting an icon's state, mode and size.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;iconpreviewarea.h&quot;
#include &quot;iconsizespinbox.h&quot;
#include &quot;imagedelegate.h&quot;
#include &quot;mainwindow.h&quot;

MainWindow::MainWindow()
{
    centralWidget = new QWidget;
    setCentralWidget(centralWidget);

    createPreviewGroupBox();
    createImagesGroupBox();
    createIconSizeGroupBox();

    createActions();
    createMenus();
    createContextMenu();

    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&gt;addWidget(previewGroupBox, 0, 0, 1, 2);
    mainLayout-&gt;addWidget(imagesGroupBox, 1, 0);
    mainLayout-&gt;addWidget(iconSizeGroupBox, 1, 1);
    centralWidget-&gt;setLayout(mainLayout);

    setWindowTitle(tr(&quot;Icons&quot;));
    checkCurrentStyle();
    otherRadioButton-&gt;click();

    resize(minimumSizeHint());
}

void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About Icons&quot;),
            tr(&quot;The &lt;b&gt;Icons&lt;/b&gt; example illustrates how Qt renders an icon in &quot;
               &quot;different modes (active, normal, disabled, and selected) and &quot;
               &quot;states (on and off) based on a set of images.&quot;));
}

void MainWindow::changeStyle(bool checked)
{
    if (!checked)
        return;

    QAction *action = qobject_cast&lt;QAction *&gt;(sender());
    QStyle *style = QStyleFactory::create(action-&gt;data().toString());
    Q_ASSERT(style);
    QApplication::setStyle(style);

    smallRadioButton-&gt;setText(tr(&quot;Small (%1 x %1)&quot;)
            .arg(style-&gt;pixelMetric(QStyle::PM_SmallIconSize)));
    largeRadioButton-&gt;setText(tr(&quot;Large (%1 x %1)&quot;)
            .arg(style-&gt;pixelMetric(QStyle::PM_LargeIconSize)));
    toolBarRadioButton-&gt;setText(tr(&quot;Toolbars (%1 x %1)&quot;)
            .arg(style-&gt;pixelMetric(QStyle::PM_ToolBarIconSize)));
    listViewRadioButton-&gt;setText(tr(&quot;List views (%1 x %1)&quot;)
            .arg(style-&gt;pixelMetric(QStyle::PM_ListViewIconSize)));
    iconViewRadioButton-&gt;setText(tr(&quot;Icon views (%1 x %1)&quot;)
            .arg(style-&gt;pixelMetric(QStyle::PM_IconViewIconSize)));
    tabBarRadioButton-&gt;setText(tr(&quot;Tab bars (%1 x %1)&quot;)
            .arg(style-&gt;pixelMetric(QStyle::PM_TabBarIconSize)));

    changeSize();
}

void MainWindow::changeSize(bool checked)
{
    if (!checked)
        return;

    int extent;

    if (otherRadioButton-&gt;isChecked()) {
        extent = otherSpinBox-&gt;value();
    } else {
        QStyle::PixelMetric metric;

        if (smallRadioButton-&gt;isChecked()) {
            metric = QStyle::PM_SmallIconSize;
        } else if (largeRadioButton-&gt;isChecked()) {
            metric = QStyle::PM_LargeIconSize;
        } else if (toolBarRadioButton-&gt;isChecked()) {
            metric = QStyle::PM_ToolBarIconSize;
        } else if (listViewRadioButton-&gt;isChecked()) {
            metric = QStyle::PM_ListViewIconSize;
        } else if (iconViewRadioButton-&gt;isChecked()) {
            metric = QStyle::PM_IconViewIconSize;
        } else {
            metric = QStyle::PM_TabBarIconSize;
        }
        extent = QApplication::style()-&gt;pixelMetric(metric);
    }
    previewArea-&gt;setSize(QSize(extent, extent));
    otherSpinBox-&gt;setEnabled(otherRadioButton-&gt;isChecked());
}

void MainWindow::changeIcon()
{
    QIcon icon;

    for (int row = 0; row &lt; imagesTable-&gt;rowCount(); ++row) {
        QTableWidgetItem *item0 = imagesTable-&gt;item(row, 0);
        QTableWidgetItem *item1 = imagesTable-&gt;item(row, 1);
        QTableWidgetItem *item2 = imagesTable-&gt;item(row, 2);

        if (item0-&gt;checkState() == Qt::Checked) {
            QIcon::Mode mode;
            if (item1-&gt;text() == tr(&quot;Normal&quot;)) {
                mode = QIcon::Normal;
            } else if (item1-&gt;text() == tr(&quot;Active&quot;)) {
                mode = QIcon::Active;
            } else if (item1-&gt;text() == tr(&quot;Disabled&quot;)) {
                mode = QIcon::Disabled;
            } else {
                mode = QIcon::Selected;
            }

            QIcon::State state;
            if (item2-&gt;text() == tr(&quot;On&quot;)) {
                state = QIcon::On;
            } else {
                state = QIcon::Off;
            }

            QString fileName = item0-&gt;data(Qt::UserRole).toString();
            QImage image(fileName);
            if (!image.isNull())
                icon.addPixmap(QPixmap::fromImage(image), mode, state);
        }
    }

    previewArea-&gt;setIcon(icon);
}

void MainWindow::addImages()
{
    QStringList fileNames = QFileDialog::getOpenFileNames(this,
                                    tr(&quot;Open Images&quot;), &quot;&quot;,
                                    tr(&quot;Images (*.png *.xpm *.jpg);;&quot;
                                       &quot;All Files (*)&quot;));
    if (!fileNames.isEmpty()) {
        foreach (QString fileName, fileNames) {
            int row = imagesTable-&gt;rowCount();
            imagesTable-&gt;setRowCount(row + 1);

            QString imageName = QFileInfo(fileName).baseName();
            QTableWidgetItem *item0 = new QTableWidgetItem(imageName);
            item0-&gt;setData(Qt::UserRole, fileName);
            item0-&gt;setFlags(item0-&gt;flags() &amp; ~Qt::ItemIsEditable);

            QTableWidgetItem *item1 = new QTableWidgetItem(tr(&quot;Normal&quot;));
            QTableWidgetItem *item2 = new QTableWidgetItem(tr(&quot;Off&quot;));

            if (guessModeStateAct-&gt;isChecked()) {
                if (fileName.contains(&quot;_act&quot;)) {
                    item1-&gt;setText(tr(&quot;Active&quot;));
                } else if (fileName.contains(&quot;_dis&quot;)) {
                    item1-&gt;setText(tr(&quot;Disabled&quot;));
                } else if (fileName.contains(&quot;_sel&quot;)) {
                    item1-&gt;setText(tr(&quot;Selected&quot;));
                }

                if (fileName.contains(&quot;_on&quot;))
                    item2-&gt;setText(tr(&quot;On&quot;));
            }

            imagesTable-&gt;setItem(row, 0, item0);
            imagesTable-&gt;setItem(row, 1, item1);
            imagesTable-&gt;setItem(row, 2, item2);
            imagesTable-&gt;openPersistentEditor(item1);
            imagesTable-&gt;openPersistentEditor(item2);

            item0-&gt;setCheckState(Qt::Checked);
        }
    }
}

void MainWindow::removeAllImages()
{
    imagesTable-&gt;setRowCount(0);
    changeIcon();
}

void MainWindow::createPreviewGroupBox()
{
    previewGroupBox = new QGroupBox(tr(&quot;Preview&quot;));

    previewArea = new IconPreviewArea;

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;addWidget(previewArea);
    previewGroupBox-&gt;setLayout(layout);
}

void MainWindow::createImagesGroupBox()
{
    imagesGroupBox = new QGroupBox(tr(&quot;Images&quot;));

    imagesTable = new QTableWidget;
    imagesTable-&gt;setSelectionMode(QAbstractItemView::NoSelection);
    imagesTable-&gt;setItemDelegate(new ImageDelegate(this));

    QStringList labels;
    labels &lt;&lt; tr(&quot;Image&quot;) &lt;&lt; tr(&quot;Mode&quot;) &lt;&lt; tr(&quot;State&quot;);

    imagesTable-&gt;horizontalHeader()-&gt;setDefaultSectionSize(90);
    imagesTable-&gt;setColumnCount(3);
    imagesTable-&gt;setHorizontalHeaderLabels(labels);
    imagesTable-&gt;horizontalHeader()-&gt;setSectionResizeMode(0, QHeaderView::Stretch);
    imagesTable-&gt;horizontalHeader()-&gt;setSectionResizeMode(1, QHeaderView::Fixed);
    imagesTable-&gt;horizontalHeader()-&gt;setSectionResizeMode(2, QHeaderView::Fixed);
    imagesTable-&gt;verticalHeader()-&gt;hide();

    connect(imagesTable, SIGNAL(itemChanged(QTableWidgetItem*)),
            this, SLOT(changeIcon()));

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;addWidget(imagesTable);
    imagesGroupBox-&gt;setLayout(layout);
}

void MainWindow::createIconSizeGroupBox()
{
    iconSizeGroupBox = new QGroupBox(tr(&quot;Icon Size&quot;));

    smallRadioButton = new QRadioButton;
    largeRadioButton = new QRadioButton;
    toolBarRadioButton = new QRadioButton;
    listViewRadioButton = new QRadioButton;
    iconViewRadioButton = new QRadioButton;
    tabBarRadioButton = new QRadioButton;
    otherRadioButton = new QRadioButton(tr(&quot;Other:&quot;));

    otherSpinBox = new IconSizeSpinBox;
    otherSpinBox-&gt;setRange(8, 128);
    otherSpinBox-&gt;setValue(64);

    connect(smallRadioButton, SIGNAL(toggled(bool)),
            this, SLOT(changeSize(bool)));
    connect(largeRadioButton, SIGNAL(toggled(bool)),
            this, SLOT(changeSize(bool)));
    connect(toolBarRadioButton, SIGNAL(toggled(bool)),
            this, SLOT(changeSize(bool)));
    connect(listViewRadioButton, SIGNAL(toggled(bool)),
            this, SLOT(changeSize(bool)));
    connect(iconViewRadioButton, SIGNAL(toggled(bool)),
            this, SLOT(changeSize(bool)));
    connect(tabBarRadioButton, SIGNAL(toggled(bool)),
            this, SLOT(changeSize(bool)));
    connect(otherRadioButton, SIGNAL(toggled(bool)),
            this, SLOT(changeSize(bool)));
    connect(otherSpinBox, SIGNAL(valueChanged(int)), this, SLOT(changeSize()));

    QHBoxLayout *otherSizeLayout = new QHBoxLayout;
    otherSizeLayout-&gt;addWidget(otherRadioButton);
    otherSizeLayout-&gt;addWidget(otherSpinBox);
    otherSizeLayout-&gt;addStretch();

    QGridLayout *layout = new QGridLayout;
    layout-&gt;addWidget(smallRadioButton, 0, 0);
    layout-&gt;addWidget(largeRadioButton, 1, 0);
    layout-&gt;addWidget(toolBarRadioButton, 2, 0);
    layout-&gt;addWidget(listViewRadioButton, 0, 1);
    layout-&gt;addWidget(iconViewRadioButton, 1, 1);
    layout-&gt;addWidget(tabBarRadioButton, 2, 1);
    layout-&gt;addLayout(otherSizeLayout, 3, 0, 1, 2);
    layout-&gt;setRowStretch(4, 1);
    iconSizeGroupBox-&gt;setLayout(layout);
}

void MainWindow::createActions()
{
    addImagesAct = new QAction(tr(&quot;&amp;Add Images...&quot;), this);
    addImagesAct-&gt;setShortcut(tr(&quot;Ctrl+A&quot;));
    connect(addImagesAct, SIGNAL(triggered()), this, SLOT(addImages()));

    removeAllImagesAct = new QAction(tr(&quot;&amp;Remove All Images&quot;), this);
    removeAllImagesAct-&gt;setShortcut(tr(&quot;Ctrl+R&quot;));
    connect(removeAllImagesAct, SIGNAL(triggered()),
            this, SLOT(removeAllImages()));

    exitAct = new QAction(tr(&quot;&amp;Quit&quot;), this);
    exitAct-&gt;setShortcuts(QKeySequence::Quit);
    connect(exitAct, SIGNAL(triggered()), this, SLOT(close()));

    styleActionGroup = new QActionGroup(this);
    foreach (QString styleName, QStyleFactory::keys()) {
        QAction *action = new QAction(styleActionGroup);
        action-&gt;setText(tr(&quot;%1 Style&quot;).arg(styleName));
        action-&gt;setData(styleName);
        action-&gt;setCheckable(true);
        connect(action, SIGNAL(triggered(bool)), this, SLOT(changeStyle(bool)));
    }

    guessModeStateAct = new QAction(tr(&quot;&amp;Guess Image Mode/State&quot;), this);
    guessModeStateAct-&gt;setCheckable(true);
    guessModeStateAct-&gt;setChecked(true);

    aboutAct = new QAction(tr(&quot;&amp;About&quot;), this);
    connect(aboutAct, SIGNAL(triggered()), this, SLOT(about()));

    aboutQtAct = new QAction(tr(&quot;About &amp;Qt&quot;), this);
    connect(aboutQtAct, SIGNAL(triggered()), qApp, SLOT(aboutQt()));
}

void MainWindow::createMenus()
{
    fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));
    fileMenu-&gt;addAction(addImagesAct);
    fileMenu-&gt;addAction(removeAllImagesAct);
    fileMenu-&gt;addSeparator();
    fileMenu-&gt;addAction(exitAct);

    viewMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;View&quot;));
    foreach (QAction *action, styleActionGroup-&gt;actions())
        viewMenu-&gt;addAction(action);
    viewMenu-&gt;addSeparator();
    viewMenu-&gt;addAction(guessModeStateAct);

    menuBar()-&gt;addSeparator();

    helpMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Help&quot;));
    helpMenu-&gt;addAction(aboutAct);
    helpMenu-&gt;addAction(aboutQtAct);
}

void MainWindow::createContextMenu()
{
    imagesTable-&gt;setContextMenuPolicy(Qt::ActionsContextMenu);
    imagesTable-&gt;addAction(addImagesAct);
    imagesTable-&gt;addAction(removeAllImagesAct);
}

void MainWindow::checkCurrentStyle()
{
    foreach (QAction *action, styleActionGroup-&gt;actions()) {
        QString styleName = action-&gt;data().toString();
        QStyle *candidate = QStyleFactory::create(styleName);
        Q_ASSERT(candidate);
        if (candidate-&gt;metaObject()-&gt;className()
                == QApplication::style()-&gt;metaObject()-&gt;className()) {
            action-&gt;trigger();
            return;
        }
        delete candidate;
    }
}

</db:programlisting>
</db:article>
