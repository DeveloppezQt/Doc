<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSensorManager Class</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsensormanager.xml">QSensorManager</db:link> class handles registration and creation of sensor backends.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSensorManager</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Sensors)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Sensors)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sensors</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSensorManager is part of <db:simplelist><db:member>sensors_backend</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Sensor plugins register backends using the <db:link xlink:href="qsensormanager.xml#registerBackend">registerBackend</db:link>() function.</db:para>
<db:para>When <db:link xlink:href="qsensor.xml#connectToBackend">QSensor::connectToBackend</db:link>() is called, the <db:link xlink:href="qsensormanager.xml#createBackend">createBackend</db:link>() function will be called.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="createBackend">
<db:title>[static] QSensorBackend *QSensorManager::createBackend(QSensor *<db:emphasis>sensor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QSensorBackend *</db:type>
<db:methodname>createBackend</db:methodname>
<db:methodparam>
<db:type>QSensor *</db:type>
<db:parameter>sensor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSensorBackend * createBackend(QSensor *sensor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Create a backend for <db:code role="parameter">sensor</db:code>. Returns null if no suitable backend exists.</db:para>
</db:section>
<db:section xml:id="isBackendRegistered">
<db:title>[static] bool QSensorManager::isBackendRegistered(const QByteArray &amp;<db:emphasis>type</db:emphasis>, const QByteArray &amp;<db:emphasis>identifier</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBackendRegistered</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>identifier</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBackendRegistered(const QByteArray &amp;type, const QByteArray &amp;identifier)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the backend identified by <db:code role="parameter">type</db:code> and <db:code role="parameter">identifier</db:code> is registered.</db:para>
<db:para>This is a convenience method that helps out plugins doing dynamic registration.</db:para>
</db:section>
<db:section xml:id="registerBackend">
<db:title>[static] void QSensorManager::registerBackend(const QByteArray &amp;<db:emphasis>type</db:emphasis>, const QByteArray &amp;<db:emphasis>identifier</db:emphasis>, QSensorBackendFactory *<db:emphasis>factory</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>registerBackend</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>identifier</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSensorBackendFactory *</db:type>
<db:parameter>factory</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void registerBackend(const QByteArray &amp;type, const QByteArray &amp;identifier, QSensorBackendFactory *factory)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Register a sensor for <db:code role="parameter">type</db:code>. The <db:code role="parameter">identifier</db:code> must be unique.</db:para>
<db:para>The <db:code role="parameter">factory</db:code> will be asked to create instances of the backend.</db:para>
<db:para>Sensor identifiers starting with <db:code>generic</db:code> or <db:code>dummy</db:code> are given lower priority when choosing the default sensor if other sensors are found.</db:para>
</db:section>
<db:section xml:id="setDefaultBackend">
<db:title>[static] void QSensorManager::setDefaultBackend(const QByteArray &amp;<db:emphasis>type</db:emphasis>, const QByteArray &amp;<db:emphasis>identifier</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setDefaultBackend</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>identifier</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDefaultBackend(const QByteArray &amp;type, const QByteArray &amp;identifier)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets or overwrite the sensor <db:code role="parameter">type</db:code> with the backend <db:code role="parameter">identifier</db:code>.</db:para>
</db:section>
<db:section xml:id="unregisterBackend">
<db:title>[static] void QSensorManager::unregisterBackend(const QByteArray &amp;<db:emphasis>type</db:emphasis>, const QByteArray &amp;<db:emphasis>identifier</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>unregisterBackend</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>identifier</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unregisterBackend(const QByteArray &amp;type, const QByteArray &amp;identifier)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unregister the backend for <db:code role="parameter">type</db:code> with <db:code role="parameter">identifier</db:code>.</db:para>
<db:para>Note that this only prevents new instance of the backend from being created. It does not invalidate the existing instances of the backend. The backend code should handle the disappearance of the underlying hardware itself.</db:para>
</db:section>
</db:section>
</db:article>
