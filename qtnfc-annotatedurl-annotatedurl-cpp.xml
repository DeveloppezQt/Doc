<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Annotated URL Example</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An example showing reading from formatted NFC Data Exchange Format (NDEF) messages.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtNfc module.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;annotatedurl.h&quot;

#include &lt;qnearfieldmanager.h&gt;
#include &lt;qnearfieldtarget.h&gt;
#include &lt;qndefmessage.h&gt;
#include &lt;qndefrecord.h&gt;
#include &lt;qndefnfctextrecord.h&gt;
#include &lt;qndefnfcurirecord.h&gt;

#include &lt;QtCore/QUrl&gt;
#include &lt;QtCore/QLocale&gt;

#include &lt;QGridLayout&gt;
#include &lt;QLabel&gt;
#include &lt;QMouseEvent&gt;
#include &lt;QDesktopServices&gt;
#include &lt;QDebug&gt;

AnnotatedUrl::AnnotatedUrl(QObject *parent)
:   QObject(parent)
{
    manager = new QNearFieldManager(this);
    if (!manager-&gt;isAvailable()) {
        qWarning() &lt;&lt; &quot;NFC not available&quot;;
        return;
    }

    QNdefFilter filter;
    filter.setOrderMatch(false);
    filter.appendRecord&lt;QNdefNfcTextRecord&gt;(1, UINT_MAX);
    filter.appendRecord&lt;QNdefNfcUriRecord&gt;();
    // type parameter cannot specify substring so filter for &quot;image/&quot; below
    filter.appendRecord(QNdefRecord::Mime, QByteArray(), 0, 1);

    int result = manager-&gt;registerNdefMessageHandler(filter, this,
                                       SLOT(handleMessage(QNdefMessage,QNearFieldTarget*)));

    if (result &lt; 0)
        qWarning() &lt;&lt; &quot;Platform does not support NDEF message handler registration&quot;;

    manager-&gt;startTargetDetection();
    connect(manager, SIGNAL(targetDetected(QNearFieldTarget*)),
            this, SLOT(targetDetected(QNearFieldTarget*)));
    connect(manager, SIGNAL(targetLost(QNearFieldTarget*)),
            this, SLOT(targetLost(QNearFieldTarget*)));
}

AnnotatedUrl::~AnnotatedUrl()
{

}

void AnnotatedUrl::targetDetected(QNearFieldTarget *target)
{
    if (!target)
        return;

    connect(target, SIGNAL(ndefMessageRead(QNdefMessage)),
            this, SLOT(handlePolledNdefMessage(QNdefMessage)));
    target-&gt;readNdefMessages();
}

void AnnotatedUrl::targetLost(QNearFieldTarget *target)
{
    if (target)
        target-&gt;deleteLater();
}

void AnnotatedUrl::handlePolledNdefMessage(QNdefMessage message)
{
    QNearFieldTarget *target = qobject_cast&lt;QNearFieldTarget *&gt;(sender());
    handleMessage(message, target);
}

void AnnotatedUrl::handleMessage(const QNdefMessage &amp;message, QNearFieldTarget *target)
{
    Q_UNUSED(target);

    enum {
        MatchedNone,
        MatchedFirst,
        MatchedEnglish,
        MatchedLanguage,
        MatchedLanguageAndCountry
    } bestMatch = MatchedNone;

    QLocale defaultLocale;

    QString title;
    QUrl url;
    QPixmap pixmap;

    foreach (const QNdefRecord &amp;record, message) {
        if (record.isRecordType&lt;QNdefNfcTextRecord&gt;()) {
            QNdefNfcTextRecord textRecord(record);

            title = textRecord.text();
            QLocale locale(textRecord.locale());
            // already found best match
            if (bestMatch == MatchedLanguageAndCountry) {
                // do nothing
            } else if (bestMatch &lt;= MatchedLanguage &amp;&amp; locale == defaultLocale) {
                bestMatch = MatchedLanguageAndCountry;
            } else if (bestMatch &lt;= MatchedEnglish &amp;&amp;
                       locale.language() == defaultLocale.language()) {
                bestMatch = MatchedLanguage;
            } else if (bestMatch &lt;= MatchedFirst &amp;&amp; locale.language() == QLocale::English) {
                bestMatch = MatchedEnglish;
            } else if (bestMatch == MatchedNone) {
                bestMatch = MatchedFirst;
            }
        } else if (record.isRecordType&lt;QNdefNfcUriRecord&gt;()) {
            QNdefNfcUriRecord uriRecord(record);

            url = uriRecord.uri();
        } else if (record.typeNameFormat() == QNdefRecord::Mime &amp;&amp;
                   record.type().startsWith(&quot;image/&quot;)) {
            pixmap = QPixmap::fromImage(QImage::fromData(record.payload()));
        }
    }

    emit annotatedUrl(url, title, pixmap);
}

</db:programlisting>
</db:article>
