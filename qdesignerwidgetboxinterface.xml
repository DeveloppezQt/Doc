<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDesignerWidgetBoxInterface Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdesignerwidgetboxinterface.xml">QDesignerWidgetBoxInterface</db:link> class allows you to control the contents of Qt Designer's widget box.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDesignerWidgetBoxInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdesignerwidgetboxinterface.xml">QDesignerWidgetBoxInterface</db:link> contains a collection of functions that is typically used to manipulate the contents of <db:emphasis>Qt Designer</db:emphasis>'s widget box.</db:para>
<db:para><db:emphasis>Qt Designer</db:emphasis> uses an XML file to populate its widget box. The name of that file is one of the widget box's properties, and you can retrieve it using the <db:link xlink:href="qdesignerwidgetboxinterface.xml#fileName">fileName</db:link>() function.</db:para>
<db:para><db:link xlink:href="qdesignerwidgetboxinterface.xml">QDesignerWidgetBoxInterface</db:link> also provides the <db:link xlink:href="qdesignerwidgetboxinterface.xml#save">save</db:link>() function that saves the contents of the widget box in the file specified by the widget box's file name property. If you have made changes to the widget box, for example by dropping a widget into the widget box, without calling the <db:link xlink:href="qdesignerwidgetboxinterface.xml#save">save</db:link>() function, the original content can be restored by a simple invocation of the <db:link xlink:href="qdesignerwidgetboxinterface.xml#load">load</db:link>() function:</db:para>
<db:programlisting language="cpp">        QDesignerWidgetBoxInterface *widgetBox = 0:
        widgetBox = formEditor-&gt;widgetBox();

        widgetBox-&gt;load();
</db:programlisting>
<db:para>The <db:link xlink:href="qdesignerwidgetboxinterface.xml">QDesignerWidgetBoxInterface</db:link> class is not intended to be instantiated directly. You can retrieve an interface to Qt Designer's widget box using the <db:link xlink:href="qdesignerformeditorinterface.xml#widgetBox">QDesignerFormEditorInterface::widgetBox</db:link>() function. A pointer to <db:emphasis>Qt Designer</db:emphasis>'s current <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> object (<db:code>formEditor</db:code> in the example above) is provided by the <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">QDesignerCustomWidgetInterface::initialize</db:link>() function's parameter. When implementing a custom widget plugin, you must subclass the <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> to expose your plugin to <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para>If you want to save your changes, and at the same time preserve the original contents, you can use the <db:link xlink:href="qdesignerwidgetboxinterface.xml#save">save</db:link>() function combined with the <db:link xlink:href="qdesignerwidgetboxinterface.xml#setFileName">setFileName</db:link>() function to save your changes into another file. Remember to store the name of the original file first:</db:para>
<db:programlisting language="cpp">        QString originalFile = widgetBox-&gt;fileName();

        widgetBox-&gt;setFileName(&quot;myWidgetBox.xml&quot;);
        widgetBox-&gt;save();
</db:programlisting>
<db:para>Then you can restore the original contents of the widget box by resetting the file name to the original file and calling <db:link xlink:href="qdesignerwidgetboxinterface.xml#load">load</db:link>():</db:para>
<db:programlisting language="cpp">        widgetBox-&gt;setFileName(originalFile);
        widgetBox-&gt;load();
</db:programlisting>
<db:para>In a similar way, you can later use your customized XML file:</db:para>
<db:programlisting language="cpp">        if (widgetBox-&gt;filename() != &quot;myWidgetBox.xml&quot;) {
            widgetBox-&gt;setFileName(&quot;myWidgetBox.xml&quot;);
            widgetBox-&gt;load();
        }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDesignerWidgetBoxInterface">
<db:title>[explicit] QDesignerWidgetBoxInterface::QDesignerWidgetBoxInterface(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>Constructs a widget box interface with the given <db:code role="parameter">parent</db:code> and the specified window <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDesignerWidgetBoxInterface">
<db:title>[virtual noexcept] QDesignerWidgetBoxInterface::~QDesignerWidgetBoxInterface()</db:title>
<db:para>Destroys the widget box interface.</db:para>
</db:section>
<db:section xml:id="fileName">
<db:title>[pure virtual] QString QDesignerWidgetBoxInterface::fileName() const</db:title>
<db:para>Returns the name of the XML file <db:emphasis>Qt Designer</db:emphasis> is currently using to populate its widget box.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerwidgetboxinterface.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load">
<db:title>[pure virtual] bool QDesignerWidgetBoxInterface::load()</db:title>
<db:para>Populates <db:emphasis>Qt Designer</db:emphasis>'s widget box by loading (or reloading) the currently specified XML file. Returns true if the file is successfully loaded; otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerwidgetboxinterface.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="save">
<db:title>[pure virtual] bool QDesignerWidgetBoxInterface::save()</db:title>
<db:para>Saves the contents of <db:emphasis>Qt Designer</db:emphasis>'s widget box in the file specified by the <db:link xlink:href="qdesignerwidgetboxinterface.xml#fileName">fileName</db:link>() function. Returns true if the content is successfully saved; otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerwidgetboxinterface.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerwidgetboxinterface.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>[pure virtual] void QDesignerWidgetBoxInterface::setFileName(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Sets the XML file that <db:emphasis>Qt Designer</db:emphasis> will use to populate its widget box, to <db:code role="parameter">fileName</db:code>. You must call <db:link xlink:href="qdesignerwidgetboxinterface.xml#load">load</db:link>() to update the widget box with the new XML file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerwidgetboxinterface.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerwidgetboxinterface.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
