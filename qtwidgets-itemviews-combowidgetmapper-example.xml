<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Combo Widget Mapper Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Combo Widget Mapper example shows how to use a custom delegate to map information from a model to specific widgets on a form.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/combowidgetmapper-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We create a Window class with an almost identical user interface, except that, instead of providing a spin box so that each person's age can be entered, we provide a combo box to allow their addresses to be classified as &quot;Home&quot;, &quot;Work&quot; or &quot;Other&quot;.</db:para>
<db:section xml:id="window-class-definition">
<db:title>Window Class Definition</db:title>
<db:para>The class provides a constructor, a slot to keep the buttons up to date, and a private function to set up the model:</db:para>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT

public:
    Window(QWidget *parent = nullptr);

private slots:
    void updateButtons(int row);

private:
    void setupModel();

    QLabel *nameLabel;
    QLabel *addressLabel;
    QLabel *typeLabel;
    QLineEdit *nameEdit;
    QTextEdit *addressEdit;
    QComboBox *typeComboBox;
    QPushButton *nextButton;
    QPushButton *previousButton;

    QStandardItemModel *model;
    QStringListModel *typeModel;
    QDataWidgetMapper *mapper;
};
</db:programlisting>
<db:para>In addition to the <db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> object and the controls used to make up the user interface, we use a <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> to hold our data and a <db:link xlink:href="qstringlistmodel.xml">QStringListModel</db:link> to hold information about the types of address that can be applied to each person's data.</db:para>
</db:section>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:para>The constructor of the Window class can be explained in three parts. In the first part, we set up the widgets used for the user interface:</db:para>
<db:programlisting language="cpp">Window::Window(QWidget *parent)
    : QWidget(parent)
{
    setupModel();

    nameLabel = new QLabel(tr(&quot;Na&amp;amp;me:&quot;));
    nameEdit = new QLineEdit();
    addressLabel = new QLabel(tr(&quot;&amp;amp;Address:&quot;));
    addressEdit = new QTextEdit();
    typeLabel = new QLabel(tr(&quot;&amp;amp;Type:&quot;));
    typeComboBox = new QComboBox();
    nextButton = new QPushButton(tr(&quot;&amp;amp;Next&quot;));
    previousButton = new QPushButton(tr(&quot;&amp;amp;Previous&quot;));

    nameLabel-&amp;gt;setBuddy(nameEdit);
    addressLabel-&amp;gt;setBuddy(addressEdit);
    typeLabel-&amp;gt;setBuddy(typeComboBox);

    typeComboBox-&amp;gt;setModel(typeModel);
</db:programlisting>
<db:para>Note that we set up the mapping the combo box in the same way as for other widgets, but that we apply its own model to it so that it will display data from its own model, the typeModel, rather than from the model containing data about each person.</db:para>
<db:para>Next, we set up the widget mapper, relating each input widget to a column in the model specified by the call to <db:link xlink:href="qdatawidgetmapper.xml#setModel">setModel</db:link>():</db:para>
<db:programlisting language="cpp">    mapper = new QDataWidgetMapper(this);
    mapper-&amp;gt;setModel(model);
    mapper-&amp;gt;addMapping(nameEdit, 0);
    mapper-&amp;gt;addMapping(addressEdit, 1);
    mapper-&amp;gt;addMapping(typeComboBox, 2, &quot;currentIndex&quot;);
</db:programlisting>
<db:para>For the combo box, we pass an extra argument to tell the widget mapper which property to relate to values from the model. As a result, the user is able to select an item from the combo box, and the corresponding value stored in the widget's currentIndex property will be stored in the model.</db:para>
<db:para>The rest of the constructor sets up connections and layouts:</db:para>
<db:programlisting language="cpp">    connect(previousButton, &amp;amp;QAbstractButton::clicked,
            mapper, &amp;amp;QDataWidgetMapper::toPrevious);
    connect(nextButton, &amp;amp;QAbstractButton::clicked,
            mapper, &amp;amp;QDataWidgetMapper::toNext);
    connect(mapper, &amp;amp;QDataWidgetMapper::currentIndexChanged,
            this, &amp;amp;Window::updateButtons);

    QGridLayout *layout = new QGridLayout();
    layout-&amp;gt;addWidget(nameLabel, 0, 0, 1, 1);
    layout-&amp;gt;addWidget(nameEdit, 0, 1, 1, 1);
    layout-&amp;gt;addWidget(previousButton, 0, 2, 1, 1);
    layout-&amp;gt;addWidget(addressLabel, 1, 0, 1, 1);
    layout-&amp;gt;addWidget(addressEdit, 1, 1, 2, 1);
    layout-&amp;gt;addWidget(nextButton, 1, 2, 1, 1);
    layout-&amp;gt;addWidget(typeLabel, 3, 0, 1, 1);
    layout-&amp;gt;addWidget(typeComboBox, 3, 1, 1, 1);
    setLayout(layout);

    setWindowTitle(tr(&quot;Delegate Widget Mapper&quot;));
    mapper-&amp;gt;toFirst();
}
</db:programlisting>
<db:para>The model is initialized in the window's setupModel() function. Here, we create a standard model with 5 rows and 3 columns. In each row, we insert a name, address, and a value that indicates the type of address. The address types are stored in a string list model.</db:para>
<db:programlisting language="cpp">void Window::setupModel()
{
    QStringList items;
    items &amp;lt;&amp;lt; tr(&quot;Home&quot;) &amp;lt;&amp;lt; tr(&quot;Work&quot;) &amp;lt;&amp;lt; tr(&quot;Other&quot;);
    typeModel = new QStringListModel(items, this);

    model = new QStandardItemModel(5, 3, this);
    QStringList names;
    names &amp;lt;&amp;lt; &quot;Alice&quot; &amp;lt;&amp;lt; &quot;Bob&quot; &amp;lt;&amp;lt; &quot;Carol&quot; &amp;lt;&amp;lt; &quot;Donald&quot; &amp;lt;&amp;lt; &quot;Emma&quot;;
    QStringList addresses;
    addresses &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;123 Main Street&amp;lt;br/&amp;gt;Market Town&amp;lt;/qt&amp;gt;&quot;
              &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;PO Box 32&amp;lt;br/&amp;gt;Mail Handling Service&quot;
                 &quot;&amp;lt;br/&amp;gt;Service City&amp;lt;/qt&amp;gt;&quot;
              &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;The Lighthouse&amp;lt;br/&amp;gt;Remote Island&amp;lt;/qt&amp;gt;&quot;
              &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;47338 Park Avenue&amp;lt;br/&amp;gt;Big City&amp;lt;/qt&amp;gt;&quot;
              &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;Research Station&amp;lt;br/&amp;gt;Base Camp&amp;lt;br/&amp;gt;Big Mountain&amp;lt;/qt&amp;gt;&quot;;

    QStringList types;
    types &amp;lt;&amp;lt; &quot;0&quot; &amp;lt;&amp;lt; &quot;1&quot; &amp;lt;&amp;lt; &quot;2&quot; &amp;lt;&amp;lt; &quot;0&quot; &amp;lt;&amp;lt; &quot;2&quot;;

    for (int row = 0; row &amp;lt; 5; ++row) {
      QStandardItem *item = new QStandardItem(names[row]);
      model-&amp;gt;setItem(row, 0, item);
      item = new QStandardItem(addresses[row]);
      model-&amp;gt;setItem(row, 1, item);
      item = new QStandardItem(types[row]);
      model-&amp;gt;setItem(row, 2, item);
    }
}
</db:programlisting>
<db:para>As we insert each row into the model, like a record in a database, we store values that correspond to items in typeModel for each person's address type. When the widget mapper reads these values from the final column of each row, it will need to use them as references to values in typeModel, as shown in the following diagram. This is where the delegate is used.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/widgetmapper-combo-mapping.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We show the implementation of the updateButtons() slot for completeness:</db:para>
<db:programlisting language="cpp">void Window::updateButtons(int row)
{
    previousButton-&amp;gt;setEnabled(row &amp;gt; 0);
    nextButton-&amp;gt;setEnabled(row &amp;lt; model-&amp;gt;rowCount() - 1);
}
</db:programlisting>
</db:section>
<db:section xml:id="summary-and-further-reading">
<db:title>Summary and Further Reading</db:title>
<db:para>The use of a separate model for the combo box provides a menu of choices that are separate from the data stored in the main model. Using a named mapping that relates the combo box's currentIndex property to a column in the model effectively allows us to store a look-up value in the model.</db:para>
<db:para>However, when reading the model outside the context of the widget mapper, we need to know about the typeModel to make sense of these look-up values. It would be useful to be able to store both the data and the choices held by the typeModel in one place. This is covered by the <db:link xlink:href="qtsql-sqlwidgetmapper-example.xml">SQL Widget Mapper Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/itemviews/combowidgetmapper?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
