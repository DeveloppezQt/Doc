<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextStream Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextstream.xml">QTextStream</db:link> class provides a convenient interface for reading and writing text.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextStream</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextStream is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member><db:member>string-processing</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qtextstream.xml">QTextStream</db:link> can operate on a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>, a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> or a <db:link xlink:href="qstring.xml">QString</db:link>. Using <db:link xlink:href="qtextstream.xml">QTextStream</db:link>'s streaming operators, you can conveniently read and write words, lines and numbers. For generating text, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> supports formatting options for field padding and alignment, and formatting of numbers. Example:</db:para>
<db:programlisting language="cpp">QFile data(&quot;output.txt&quot;);
if (data.open(QFile::WriteOnly | QFile::Truncate)) {
    QTextStream out(&amp;data);
    out &lt;&lt; &quot;Result: &quot; &lt;&lt; qSetFieldWidth(10) &lt;&lt; left &lt;&lt; 3.14 &lt;&lt; 2.7;
    // writes &quot;Result: 3.14      2.7       &quot;
}
</db:programlisting>
<db:para>It's also common to use <db:link xlink:href="qtextstream.xml">QTextStream</db:link> to read console input and write console output. <db:link xlink:href="qtextstream.xml">QTextStream</db:link> is locale aware, and will automatically decode standard input using the correct codec. Example:</db:para>
<db:programlisting language="cpp">QTextStream stream(stdin);
QString line;
do {
    line = stream.readLine();
} while (!line.isNull());
</db:programlisting>
<db:para>Besides using <db:link xlink:href="qtextstream.xml">QTextStream</db:link>'s constructors, you can also set the device or string <db:link xlink:href="qtextstream.xml">QTextStream</db:link> operates on by calling <db:link xlink:href="qtextstream.xml#setDevice">setDevice</db:link>() or <db:link xlink:href="qtextstream.xml#setString">setString</db:link>(). You can seek to a position by calling <db:link xlink:href="qtextstream.xml#seek">seek</db:link>(), and <db:link xlink:href="qtextstream.xml#atEnd">atEnd</db:link>() will return true when there is no data left to be read. If you call <db:link xlink:href="qtextstream.xml#flush">flush</db:link>(), <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will empty all data from its write buffer into the device and call <db:link xlink:href="qtextstream.xml#flush">flush</db:link>() on the device.</db:para>
<db:para>Internally, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> uses a Unicode based buffer, and <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> is used by <db:link xlink:href="qtextstream.xml">QTextStream</db:link> to automatically support different character sets. By default, QTextCodec::codecForLocale() is used for reading and writing, but you can also set the codec by calling setCodec(). Automatic Unicode detection is also supported. When this feature is enabled (the default behavior), <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will detect the UTF-16 or the UTF-32 BOM (Byte Order Mark) and switch to the appropriate UTF codec when reading. <db:link xlink:href="qtextstream.xml">QTextStream</db:link> does not write a BOM by default, but you can enable this by calling setGenerateByteOrderMark(true). When <db:link xlink:href="qtextstream.xml">QTextStream</db:link> operates on a <db:link xlink:href="qstring.xml">QString</db:link> directly, the codec is disabled.</db:para>
<db:para>There are three general ways to use <db:link xlink:href="qtextstream.xml">QTextStream</db:link> when reading text files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Chunk by chunk, by calling <db:link xlink:href="qtextstream.xml#readLine">readLine</db:link>() or <db:link xlink:href="qtextstream.xml#readAll">readAll</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>Word by word. <db:link xlink:href="qtextstream.xml">QTextStream</db:link> supports streaming into <db:link xlink:href="qstring.xml">QString</db:link>s, <db:link xlink:href="qbytearray.xml">QByteArray</db:link>s and char* buffers. Words are delimited by space, and leading white space is automatically skipped.</db:para>
</db:listitem>
<db:listitem>
<db:para>Character by character, by streaming into <db:link xlink:href="qchar.xml">QChar</db:link> or char types. This method is often used for convenient input handling when parsing files, independent of character encoding and end-of-line semantics. To skip white space, call <db:link xlink:href="qtextstream.xml#skipWhiteSpace">skipWhiteSpace</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Since the text stream uses a buffer, you should not read from the stream using the implementation of a superclass. For instance, if you have a <db:link xlink:href="qfile.xml">QFile</db:link> and read from it directly using QFile::readLine() instead of using the stream, the text stream's internal position will be out of sync with the file's position.</db:para>
<db:para>By default, when reading numbers from a stream of text, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will automatically detect the number's base representation. For example, if the number starts with &quot;0x&quot;, it is assumed to be in hexadecimal form. If it starts with the digits 1-9, it is assumed to be in decimal form, and so on. You can set the integer base, thereby disabling the automatic detection, by calling <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>(). Example:</db:para>
<db:programlisting language="cpp">QTextStream in(&quot;0x50 0x20&quot;);
int firstNumber, secondNumber;

in &gt;&gt; firstNumber;             // firstNumber == 80
in &gt;&gt; dec &gt;&gt; secondNumber;     // secondNumber == 0

char ch;
in &gt;&gt; ch;                      // ch == 'x'
</db:programlisting>
<db:para><db:link xlink:href="qtextstream.xml">QTextStream</db:link> supports many formatting options for generating text. You can set the field width and pad character by calling <db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>() and setPadChar(). Use <db:link xlink:href="qtextstream.xml#setFieldAlignment">setFieldAlignment</db:link>() to set the alignment within each field. For real numbers, call <db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>() and <db:link xlink:href="qtextstream.xml#setRealNumberPrecision">setRealNumberPrecision</db:link>() to set the notation (<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">SmartNotation</db:link>, <db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">ScientificNotation</db:link>, <db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">FixedNotation</db:link>) and precision in digits of the generated number. Some extra number formatting options are also available through <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>().</db:para>
<db:para>Like <db:code>&lt;iostream&gt;</db:code> in the standard C++ library, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> also defines several global manipulator functions:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Manipulator</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>bin</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>(2).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>oct</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>(8).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>dec</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>(10).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>hex</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>(16).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>showbase</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">ShowBase</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>forcesign</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">ForceSign</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>forcepoint</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">ForcePoint</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>noshowbase</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">ShowBase</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>noforcesign</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">ForceSign</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>noforcepoint</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">ForcePoint</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>uppercasebase</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">UppercaseBase</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>uppercasedigits</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">UppercaseDigits</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>lowercasebase</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">UppercaseBase</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>lowercasedigits</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">UppercaseDigits</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>fixed</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>(<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">FixedNotation</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>scientific</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>(<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">ScientificNotation</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>left</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setFieldAlignment">setFieldAlignment</db:link>(<db:link xlink:href="qtextstream.xml#FieldAlignment-enum">AlignLeft</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>right</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setFieldAlignment">setFieldAlignment</db:link>(<db:link xlink:href="qtextstream.xml#FieldAlignment-enum">AlignRight</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>center</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setFieldAlignment">setFieldAlignment</db:link>(<db:link xlink:href="qtextstream.xml#FieldAlignment-enum">AlignCenter</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>endl</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as operator&lt;&lt;('\n') and <db:link xlink:href="qtextstream.xml#flush">flush</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>flush</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#flush">flush</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>reset</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#reset">reset</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>ws</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#skipWhiteSpace">skipWhiteSpace</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>bom</db:code></db:para>
</db:td>
<db:td>
<db:para>Same as setGenerateByteOrderMark(true).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In addition, Qt provides three global manipulators that take a parameter: <db:link xlink:href="qtextstream.xml#qSetFieldWidth">qSetFieldWidth</db:link>(), qSetPadChar(), and <db:link xlink:href="qtextstream.xml#qSetRealNumberPrecision">qSetRealNumberPrecision</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:member>
<db:member><db:link xlink:href="qiodevice.xml">QIODevice</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
<db:member><db:link xlink:href="qbuffer.xml">QBuffer</db:link></db:member>
<db:member>QTcpSocket</db:member>
<db:member><db:link xlink:href="">Text Codecs Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FieldAlignment-enum">
<db:title>enum QTextStream::FieldAlignment</db:title>
<db:para>This enum specifies how to align text in fields when the field is wider than the text that occupies it.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::AlignLeft</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Pad on the right side of fields.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::AlignRight</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Pad on the left side of fields.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::AlignCenter</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Pad on both sides of field.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::AlignAccountingStyle</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Same as AlignRight, except that the sign of a number is flush left.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setFieldAlignment">setFieldAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="NumberFlag-enum">
<db:title>enum QTextStream::NumberFlag</db:title>
<db:bridgehead renderas="sect2">flags QTextStream::NumberFlags</db:bridgehead>
<db:para>This enum specifies various flags that can be set to affect the output of integers, <db:code>float</db:code>s, and <db:code>double</db:code>s.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::ShowBase</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Show the base as a prefix if the base is 16 (&quot;0x&quot;), 8 (&quot;0&quot;), or 2 (&quot;0b&quot;).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::ForcePoint</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>Always put the decimal separator in numbers, even if there are no decimals.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::ForceSign</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>Always put the sign in numbers, even for positive numbers.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::UppercaseBase</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>Use uppercase versions of base prefixes (&quot;0X&quot;, &quot;0B&quot;).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::UppercaseDigits</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Use uppercase letters for expressing digits 10 to 35 instead of lowercase.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>NumberFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;NumberFlag&gt;. </db:code>It stores an OR combination of <db:code>NumberFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="RealNumberNotation-enum">
<db:title>enum QTextStream::RealNumberNotation</db:title>
<db:para>This enum specifies which notations to use for expressing <db:code>float</db:code> and <db:code>double</db:code> as strings.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::ScientificNotation</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Scientific notation (<db:code>printf()</db:code>'s <db:code>%e</db:code> flag).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::FixedNotation</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Fixed-point notation (<db:code>printf()</db:code>'s <db:code>%f</db:code> flag).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::SmartNotation</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Scientific or fixed-point notation, depending on which makes most sense (<db:code>printf()</db:code>'s <db:code>%g</db:code> flag).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QTextStream::Status</db:title>
<db:para>This enum describes the current status of the text stream.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::Ok</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The text stream is operating normally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::ReadPastEnd</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The text stream has read past the end of the data in the underlying device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::ReadCorruptData</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The text stream has read corrupt data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::WriteFailed</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The text stream cannot write to the underlying device.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#status">status</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextStream">
<db:title>QTextStream::QTextStream()</db:title>
<db:para>Constructs a <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. Before you can use it for reading or writing, you must assign a device or a string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setDevice">setDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setString">setString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTextStream-1">
<db:title>[explicit] QTextStream::QTextStream(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> that operates on <db:code role="parameter">device</db:code>.</db:para>
</db:section>
<db:section xml:id="QTextStream-2">
<db:title>[explicit] QTextStream::QTextStream(FILE *<db:emphasis>fileHandle</db:emphasis>, QIODevice::OpenMode <db:emphasis>openMode</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> that operates on <db:code role="parameter">fileHandle</db:code>, using <db:code role="parameter">openMode</db:code> to define the open mode. Internally, a <db:link xlink:href="qfile.xml">QFile</db:link> is created to handle the FILE pointer.</db:para>
<db:para>This constructor is useful for working directly with the common FILE based input and output streams: stdin, stdout and stderr. Example:</db:para>
<db:programlisting language="cpp">QString str;
QTextStream in(stdin);
in &gt;&gt; str;
</db:programlisting>
</db:section>
<db:section xml:id="QTextStream-3">
<db:title>[explicit] QTextStream::QTextStream(QByteArray *<db:emphasis>array</db:emphasis>, QIODevice::OpenMode <db:emphasis>openMode</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> that operates on <db:code role="parameter">array</db:code>, using <db:code role="parameter">openMode</db:code> to define the open mode. Internally, the array is wrapped by a <db:link xlink:href="qbuffer.xml">QBuffer</db:link>.</db:para>
</db:section>
<db:section xml:id="QTextStream-4">
<db:title>[explicit] QTextStream::QTextStream(QString *<db:emphasis>string</db:emphasis>, QIODevice::OpenMode <db:emphasis>openMode</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> that operates on <db:code role="parameter">string</db:code>, using <db:code role="parameter">openMode</db:code> to define the open mode.</db:para>
</db:section>
<db:section xml:id="QTextStream-5">
<db:title>[explicit] QTextStream::QTextStream(const QByteArray &amp;<db:emphasis>array</db:emphasis>, QIODevice::OpenMode <db:emphasis>openMode</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> that operates on <db:code role="parameter">array</db:code>, using <db:code role="parameter">openMode</db:code> to define the open mode. The array is accessed as read-only, regardless of the values in <db:code role="parameter">openMode</db:code>.</db:para>
<db:para>This constructor is convenient for working on constant strings. Example:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    // read numeric arguments (123, 0x20, 4.5...)
    for (int i = 1; i &lt; argc; ++i) {
          int number;
          QTextStream in(argv[i]);
          in &gt;&gt; number;
          ...
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="dtor.QTextStream">
<db:title>[virtual noexcept] QTextStream::~QTextStream()</db:title>
<db:para>Destroys the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>.</db:para>
<db:para>If the stream operates on a device, <db:link xlink:href="qtextstream.xml#flush">flush</db:link>() will be called implicitly. Otherwise, the device is unaffected.</db:para>
</db:section>
<db:section xml:id="atEnd">
<db:title>bool QTextStream::atEnd() const</db:title>
<db:para>Returns <db:code>true</db:code> if there is no more data to be read from the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>; otherwise returns <db:code>false</db:code>. This is similar to, but not the same as calling QIODevice::atEnd(), as <db:link xlink:href="qtextstream.xml">QTextStream</db:link> also takes into account its internal Unicode buffer.</db:para>
</db:section>
<db:section xml:id="device">
<db:title>QIODevice *QTextStream::device() const</db:title>
<db:para>Returns the current device associated with the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>, or 0 if no device has been assigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setDevice">setDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fieldAlignment">
<db:title>QTextStream::FieldAlignment QTextStream::fieldAlignment() const</db:title>
<db:para>Returns the current field alignment.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setFieldAlignment">setFieldAlignment</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#fieldWidth">fieldWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fieldWidth">
<db:title>int QTextStream::fieldWidth() const</db:title>
<db:para>Returns the current field width.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flush">
<db:title>void QTextStream::flush()</db:title>
<db:para>Flushes any buffered data waiting to be written to the device.</db:para>
<db:para>If <db:link xlink:href="qtextstream.xml">QTextStream</db:link> operates on a string, this function does nothing.</db:para>
</db:section>
<db:section xml:id="integerBase">
<db:title>int QTextStream::integerBase() const</db:title>
<db:para>Returns the current base of integers. 0 means that the base is detected when reading, or 10 (decimal) when generating numbers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>()</db:member>
<db:member><db:link xlink:href="">QString::number()</db:link></db:member>
<db:member><db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="locale">
<db:title>[since 4.5] int QTextStream::locale() const</db:title>
<db:para>Returns the locale for this stream. The default locale is C.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setLocale()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="numberFlags">
<db:title>QTextStream::NumberFlags QTextStream::numberFlags() const</db:title>
<db:para>Returns the current number flags.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#integerBase">integerBase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#realNumberNotation">realNumberNotation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="padChar">
<db:title>int QTextStream::padChar() const</db:title>
<db:para>Returns the current pad character.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setPadChar()</db:link></db:member>
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pos">
<db:title>[since 4.2] qint64 QTextStream::pos() const</db:title>
<db:para>Returns the device position corresponding to the current position of the stream, or -1 if an error occurs (e.g., if there is no device or string, or if there's a device error).</db:para>
<db:para>Because <db:link xlink:href="qtextstream.xml">QTextStream</db:link> is buffered, this function may have to seek the device to reconstruct a valid device position. This operation can be expensive, so you may want to avoid calling this function in a tight loop.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#seek">seek</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="read">
<db:title>[since 4.1] QString QTextStream::read(qint64 <db:emphasis>maxlen</db:emphasis>)</db:title>
<db:para>Reads at most <db:code role="parameter">maxlen</db:code> characters from the stream, and returns the data read as a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#readAll">readAll</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#readLine">readLine</db:link>()</db:member>
<db:member><db:link xlink:href="">QIODevice::read</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readAll">
<db:title>QString QTextStream::readAll()</db:title>
<db:para>Reads the entire content of the stream, and returns it as a <db:link xlink:href="qstring.xml">QString</db:link>. Avoid this function when working on large files, as it will consume a significant amount of memory.</db:para>
<db:para>Calling <db:link xlink:href="qtextstream.xml#readLine">readLine</db:link>() is better if you do not know how much data is available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#readLine">readLine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readLine">
<db:title>QString QTextStream::readLine(qint64 <db:emphasis>maxlen</db:emphasis> = 0)</db:title>
<db:para>Reads one line of text from the stream, and returns it as a <db:link xlink:href="qstring.xml">QString</db:link>. The maximum allowed line length is set to <db:code role="parameter">maxlen</db:code>. If the stream contains lines longer than this, then the lines will be split after <db:code role="parameter">maxlen</db:code> characters and returned in parts.</db:para>
<db:para>If <db:code role="parameter">maxlen</db:code> is 0, the lines can be of any length.</db:para>
<db:para>The returned line has no trailing end-of-line characters (&quot;\n&quot; or &quot;\r\n&quot;), so calling QString::trimmed() can be unnecessary.</db:para>
<db:para>If the stream has read to the end of the file, readLine() will return a null <db:link xlink:href="qstring.xml">QString</db:link>. For strings, or for devices that support it, you can explicitly test for the end of the stream using <db:link xlink:href="qtextstream.xml#atEnd">atEnd</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#readAll">readAll</db:link>()</db:member>
<db:member><db:link xlink:href="">QIODevice::readLine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="realNumberNotation">
<db:title>QTextStream::RealNumberNotation QTextStream::realNumberNotation() const</db:title>
<db:para>Returns the current real number notation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#realNumberPrecision">realNumberPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#integerBase">integerBase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="realNumberPrecision">
<db:title>int QTextStream::realNumberPrecision() const</db:title>
<db:para>Returns the current real number precision, or the number of fraction digits <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will write when generating real numbers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberPrecision">setRealNumberPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#realNumberNotation">realNumberNotation</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#integerBase">integerBase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>void QTextStream::reset()</db:title>
<db:para>Resets <db:link xlink:href="qtextstream.xml">QTextStream</db:link>'s formatting options, bringing it back to its original constructed state. The device, string and any buffered data is left untouched.</db:para>
</db:section>
<db:section xml:id="resetStatus">
<db:title>[since 4.1] void QTextStream::resetStatus()</db:title>
<db:para>Resets the status of the text stream.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#Status-enum">QTextStream::Status</db:link></db:member>
<db:member><db:link xlink:href="qtextstream.xml#status">status</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setStatus">setStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="seek">
<db:title>bool QTextStream::seek(qint64 <db:emphasis>pos</db:emphasis>)</db:title>
<db:para>Seeks to the position <db:code role="parameter">pos</db:code> in the device. Returns <db:code>true</db:code> on success; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="setDevice">
<db:title>void QTextStream::setDevice(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Sets the current device to <db:code role="parameter">device</db:code>. If a device has already been assigned, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will call <db:link xlink:href="qtextstream.xml#flush">flush</db:link>() before the old device is replaced.</db:para>
<db:note>
<db:para>This function resets locale to the default locale ('C') and codec to the default codec, QTextCodec::codecForLocale().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#device">device</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setString">setString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFieldAlignment">
<db:title>void QTextStream::setFieldAlignment(QTextStream::FieldAlignment <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the field alignment to <db:code role="parameter">mode</db:code>. When used together with <db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>(), this function allows you to generate formatted output with text aligned to the left, to the right or center aligned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#fieldAlignment">fieldAlignment</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFieldWidth">
<db:title>void QTextStream::setFieldWidth(int <db:emphasis>width</db:emphasis>)</db:title>
<db:para>Sets the current field width to <db:code role="parameter">width</db:code>. If <db:code role="parameter">width</db:code> is 0 (the default), the field width is equal to the length of the generated text.</db:para>
<db:note>
<db:para>The field width applies to every element appended to this stream after this function has been called (e.g., it also pads endl). This behavior is different from similar classes in the STL, where the field width only applies to the next element.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#fieldWidth">fieldWidth</db:link>()</db:member>
<db:member><db:link xlink:href="">setPadChar()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIntegerBase">
<db:title>void QTextStream::setIntegerBase(int <db:emphasis>base</db:emphasis>)</db:title>
<db:para>Sets the base of integers to <db:code role="parameter">base</db:code>, both for reading and for generating numbers. <db:code role="parameter">base</db:code> can be either 2 (binary), 8 (octal), 10 (decimal) or 16 (hexadecimal). If <db:code role="parameter">base</db:code> is 0, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will attempt to detect the base by inspecting the data on the stream. When generating numbers, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> assumes base is 10 unless the base has been set explicitly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#integerBase">integerBase</db:link>()</db:member>
<db:member><db:link xlink:href="">QString::number()</db:link></db:member>
<db:member><db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNumberFlags">
<db:title>void QTextStream::setNumberFlags(QTextStream::NumberFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Sets the current number flags to <db:code role="parameter">flags</db:code>. <db:code role="parameter">flags</db:code> is a set of flags from the <db:link xlink:href="qtextstream.xml#NumberFlag-enum">NumberFlag</db:link> enum, and describes options for formatting generated code (e.g., whether or not to always write the base or sign of a number).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRealNumberNotation">
<db:title>void QTextStream::setRealNumberNotation(QTextStream::RealNumberNotation <db:emphasis>notation</db:emphasis>)</db:title>
<db:para>Sets the real number notation to <db:code role="parameter">notation</db:code> (<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">SmartNotation</db:link>, <db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">FixedNotation</db:link>, <db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">ScientificNotation</db:link>). When reading and generating numbers, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> uses this value to detect the formatting of real numbers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#realNumberNotation">realNumberNotation</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberPrecision">setRealNumberPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRealNumberPrecision">
<db:title>void QTextStream::setRealNumberPrecision(int <db:emphasis>precision</db:emphasis>)</db:title>
<db:para>Sets the precision of real numbers to <db:code role="parameter">precision</db:code>. This value describes the number of fraction digits <db:link xlink:href="qtextstream.xml">QTextStream</db:link> should write when generating real numbers.</db:para>
<db:para>The precision cannot be a negative value. The default value is 6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#realNumberPrecision">realNumberPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStatus">
<db:title>[since 4.1] void QTextStream::setStatus(QTextStream::Status <db:emphasis>status</db:emphasis>)</db:title>
<db:para>Sets the status of the text stream to the <db:code role="parameter">status</db:code> given.</db:para>
<db:para>Subsequent calls to setStatus() are ignored until <db:link xlink:href="qtextstream.xml#resetStatus">resetStatus</db:link>() is called.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#Status-enum">Status</db:link></db:member>
<db:member><db:link xlink:href="qtextstream.xml#status">status</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#resetStatus">resetStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setString">
<db:title>void QTextStream::setString(QString *<db:emphasis>string</db:emphasis>, QIODevice::OpenMode <db:emphasis>openMode</db:emphasis>)</db:title>
<db:para>Sets the current string to <db:code role="parameter">string</db:code>, using the given <db:code role="parameter">openMode</db:code>. If a device has already been assigned, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will call <db:link xlink:href="qtextstream.xml#flush">flush</db:link>() before replacing it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#string">string</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="skipWhiteSpace">
<db:title>void QTextStream::skipWhiteSpace()</db:title>
<db:para>Reads and discards whitespace from the stream until either a non-space character is detected, or until <db:link xlink:href="qtextstream.xml#atEnd">atEnd</db:link>() returns true. This function is useful when reading a stream character by character.</db:para>
<db:para>Whitespace characters are all characters for which <db:link xlink:href="qchar.xml#isSpace">QChar::isSpace</db:link>() returns <db:code>true</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#operator-gt-gt">operator&gt;&gt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status">
<db:title>QTextStream::Status QTextStream::status() const</db:title>
<db:para>Returns the status of the text stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#Status-enum">QTextStream::Status</db:link></db:member>
<db:member><db:link xlink:href="qtextstream.xml#setStatus">setStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#resetStatus">resetStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="string">
<db:title>QString *QTextStream::string() const</db:title>
<db:para>Returns the current string assigned to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>, or 0 if no string has been assigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setString">setString</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#device">device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(const QString &amp;<db:emphasis>string</db:emphasis>)</db:title>
<db:para>Writes the string <db:code role="parameter">string</db:code> to the stream, and returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. The string is first encoded using the assigned codec (the default codec is QTextCodec::codecForLocale()) before it is written to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
<db:member><db:link xlink:href="">setCodec()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(float <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Writes the real number <db:code role="parameter">f</db:code> to the stream, then returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. By default, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> stores it using <db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">SmartNotation</db:link>, with up to 6 digits of precision. You can change the textual representation <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will use for real numbers by calling <db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>(), <db:link xlink:href="qtextstream.xml#setRealNumberPrecision">setRealNumberPrecision</db:link>() and <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberPrecision">setRealNumberPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-2">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(short <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Writes the integer number <db:code role="parameter">i</db:code> to the stream, then returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. By default, the number is stored in decimal form, but you can also set the base by calling <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-3">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(char <db:emphasis>c</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Converts <db:code role="parameter">c</db:code> from ASCII to a <db:link xlink:href="qchar.xml">QChar</db:link>, then writes it to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-4">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(const QByteArray &amp;<db:emphasis>array</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes <db:code role="parameter">array</db:code> to the stream. The contents of <db:code role="parameter">array</db:code> are converted with QString::fromUtf8().</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-5">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(const char *<db:emphasis>string</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the constant string pointed to by <db:code role="parameter">string</db:code> to the stream. <db:code role="parameter">string</db:code> is assumed to be in ISO-8859-1 encoding. This operator is convenient when working with constant string data. Example:</db:para>
<db:programlisting language="cpp">QTextStream out(stdout);
out &lt;&lt; &quot;Qt rocks!&quot; &lt;&lt; endl;
</db:programlisting>
<db:para>Warning: <db:link xlink:href="qtextstream.xml">QTextStream</db:link> assumes that <db:code role="parameter">string</db:code> points to a string of text, terminated by a '\0' character. If there is no terminating '\0' character, your application may crash.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-6">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(const void *<db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes <db:code role="parameter">ptr</db:code> to the stream as a hexadecimal number with a base.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-7">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(double <db:emphasis>f</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the double <db:code role="parameter">f</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-8">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the signed int <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-9">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(long <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the signed long <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-10">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(qlonglong <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the qlonglong <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-11">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(qulonglong <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the qulonglong <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-12">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(unsigned int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the unsigned int <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-13">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(unsigned long <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the unsigned long <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-14">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(unsigned short <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the unsigned short <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:para>Reads a word from the stream and stores it in <db:code role="parameter">str</db:code>, then returns a reference to the stream. Words are separated by whitespace (i.e., all characters for which <db:link xlink:href="qchar.xml#isSpace">QChar::isSpace</db:link>() returns <db:code>true</db:code>).</db:para>
<db:para>Leading whitespace is skipped.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(float &amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:para>Reads a real number from the stream and stores it in <db:code role="parameter">f</db:code>, then returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. The number is cast to the correct type. If no real number is detect on the stream, <db:code role="parameter">f</db:code> is set to 0.0.</db:para>
<db:para>As a special exception, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> allows the strings &quot;nan&quot; and &quot;inf&quot; to represent NAN and INF floats or doubles.</db:para>
<db:para>Leading whitespace is skipped.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-2">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(short &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>Reads an integer from the stream and stores it in <db:code role="parameter">i</db:code>, then returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. The number is cast to the correct type before it is stored. If no number was detected on the stream, <db:code role="parameter">i</db:code> is set to 0.</db:para>
<db:para>By default, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will attempt to detect the base of the number using the following rules:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Prefix</db:para>
</db:th>
<db:th>
<db:para>Base</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>&quot;0b&quot; or &quot;0B&quot;</db:para>
</db:td>
<db:td>
<db:para>2 (binary)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&quot;0&quot; followed by &quot;0-7&quot;</db:para>
</db:td>
<db:td>
<db:para>8 (octal)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&quot;0&quot; otherwise</db:para>
</db:td>
<db:td>
<db:para>10 (decimal)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&quot;0x&quot; or &quot;0X&quot;</db:para>
</db:td>
<db:td>
<db:para>16 (hexadecimal)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&quot;1&quot; to &quot;9&quot;</db:para>
</db:td>
<db:td>
<db:para>10 (decimal)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>By calling <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>(), you can specify the integer base explicitly. This will disable the auto-detection, and speed up <db:link xlink:href="qtextstream.xml">QTextStream</db:link> slightly.</db:para>
<db:para>Leading whitespace is skipped.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-3">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(QByteArray &amp;<db:emphasis>array</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Converts the word to ISO-8859-1, then stores it in <db:code role="parameter">array</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toLatin1()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-4">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(char &amp;<db:emphasis>c</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads a character from the stream and stores it in <db:code role="parameter">c</db:code>. The character from the stream is converted to ISO-5589-1 before it is stored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#toLatin1">QChar::toLatin1</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-5">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(char *<db:emphasis>c</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the word in <db:code role="parameter">c</db:code>, terminated by a '\0' character. If no word is available, only the '\0' character is stored.</db:para>
<db:para>Warning: Although convenient, this operator is dangerous and must be used with care. <db:link xlink:href="qtextstream.xml">QTextStream</db:link> assumes that <db:code role="parameter">c</db:code> points to a buffer with enough space to hold the word. If the buffer is too small, your application may crash.</db:para>
<db:para>If possible, use the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> operator instead.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-6">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(double &amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the real number in the double <db:code role="parameter">f</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-7">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(int &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the signed int <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-8">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(long &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the signed long <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-9">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(qlonglong &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the qlonglong <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-10">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(qulonglong &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the qulonglong <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-11">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(unsigned int &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the unsigned int <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-12">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(unsigned long &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the unsigned long <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-13">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(unsigned short &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the unsigned short <db:code role="parameter">i</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="bin">
<db:title>QTextStream &amp;bin(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setIntegerBase">QTextStream::setIntegerBase</db:link>(2) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#oct">oct</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#dec">dec</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#hex">hex</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="center">
<db:title>QTextStream &amp;center(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setFieldAlignment">QTextStream::setFieldAlignment</db:link>(<db:link xlink:href="qtextstream.xml#FieldAlignment-enum">QTextStream::AlignCenter</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dec">
<db:title>QTextStream &amp;dec(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setIntegerBase">QTextStream::setIntegerBase</db:link>(10) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#bin">bin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#oct">oct</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#hex">hex</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endl">
<db:title>QTextStream &amp;endl(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Writes '\n' to the <db:code role="parameter">stream</db:code> and flushes the stream.</db:para>
<db:para>Equivalent to</db:para>
<db:programlisting language="cpp">stream &lt;&lt; '\n' &lt;&lt; flush;
</db:programlisting>
<db:para>Note: On Windows, all '\n' characters are written as '\r\n' if <db:link xlink:href="qtextstream.xml">QTextStream</db:link>'s device or string is opened using the QIODevice::Text flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#flush">flush</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#reset">reset</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fixed">
<db:title>QTextStream &amp;fixed(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setRealNumberNotation">QTextStream::setRealNumberNotation</db:link>(<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">QTextStream::FixedNotation</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#scientific">scientific</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flush-1">
<db:title>QTextStream &amp;flush(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#flush">flush</db:link>() on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#endl">endl</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#reset">reset</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="forcepoint">
<db:title>QTextStream &amp;forcepoint(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setNumberFlags">QTextStream::setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">QTextStream::numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">QTextStream::ForcePoint</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#noforcepoint">noforcepoint</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#forcesign">forcesign</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#showbase">showbase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="forcesign">
<db:title>QTextStream &amp;forcesign(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setNumberFlags">QTextStream::setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">QTextStream::numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">QTextStream::ForceSign</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#noforcesign">noforcesign</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#forcepoint">forcepoint</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#showbase">showbase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hex">
<db:title>QTextStream &amp;hex(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setIntegerBase">QTextStream::setIntegerBase</db:link>(16) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:note>
<db:para>The hex modifier can only be used for writing to streams.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#bin">bin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#oct">oct</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#dec">dec</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="left">
<db:title>QTextStream &amp;left(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setFieldAlignment">QTextStream::setFieldAlignment</db:link>(<db:link xlink:href="qtextstream.xml#FieldAlignment-enum">QTextStream::AlignLeft</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#center">center</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lowercasebase">
<db:title>QTextStream &amp;lowercasebase(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setNumberFlags">QTextStream::setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">QTextStream::numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">QTextStream::UppercaseBase</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#uppercasebase">uppercasebase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#lowercasedigits">lowercasedigits</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lowercasedigits">
<db:title>QTextStream &amp;lowercasedigits(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setNumberFlags">QTextStream::setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">QTextStream::numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">QTextStream::UppercaseDigits</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#uppercasedigits">uppercasedigits</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#lowercasebase">lowercasebase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="noforcepoint">
<db:title>QTextStream &amp;noforcepoint(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setNumberFlags">QTextStream::setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">QTextStream::numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">QTextStream::ForcePoint</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#forcepoint">forcepoint</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#noforcesign">noforcesign</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#noshowbase">noshowbase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="noforcesign">
<db:title>QTextStream &amp;noforcesign(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setNumberFlags">QTextStream::setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">QTextStream::numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">QTextStream::ForceSign</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#forcesign">forcesign</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#noforcepoint">noforcepoint</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#noshowbase">noshowbase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="noshowbase">
<db:title>QTextStream &amp;noshowbase(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setNumberFlags">QTextStream::setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">QTextStream::numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">QTextStream::ShowBase</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#showbase">showbase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#noforcesign">noforcesign</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#noforcepoint">noforcepoint</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="oct">
<db:title>QTextStream &amp;oct(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setIntegerBase">QTextStream::setIntegerBase</db:link>(8) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#bin">bin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#dec">dec</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#hex">hex</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qSetFieldWidth">
<db:title>QTextStreamManipulator qSetFieldWidth(int <db:emphasis>width</db:emphasis>)</db:title>
<db:para>Equivalent to <db:link xlink:href="qtextstream.xml#setFieldWidth">QTextStream::setFieldWidth</db:link>(<db:code role="parameter">width</db:code>).</db:para>
</db:section>
<db:section xml:id="qSetRealNumberPrecision">
<db:title>QTextStreamManipulator qSetRealNumberPrecision(int <db:emphasis>precision</db:emphasis>)</db:title>
<db:para>Equivalent to <db:link xlink:href="qtextstream.xml#setRealNumberPrecision">QTextStream::setRealNumberPrecision</db:link>(<db:code role="parameter">precision</db:code>).</db:para>
</db:section>
<db:section xml:id="reset-1">
<db:title>QTextStream &amp;reset(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#reset">QTextStream::reset</db:link>() on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#flush">flush</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="right">
<db:title>QTextStream &amp;right(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setFieldAlignment">QTextStream::setFieldAlignment</db:link>(<db:link xlink:href="qtextstream.xml#FieldAlignment-enum">QTextStream::AlignRight</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#center">center</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scientific">
<db:title>QTextStream &amp;scientific(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setRealNumberNotation">QTextStream::setRealNumberNotation</db:link>(<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">QTextStream::ScientificNotation</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#fixed">fixed</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showbase">
<db:title>QTextStream &amp;showbase(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setNumberFlags">QTextStream::setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">QTextStream::numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">QTextStream::ShowBase</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#noshowbase">noshowbase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#forcesign">forcesign</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#forcepoint">forcepoint</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uppercasebase">
<db:title>QTextStream &amp;uppercasebase(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setNumberFlags">QTextStream::setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">QTextStream::numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">QTextStream::UppercaseBase</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#lowercasebase">lowercasebase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#uppercasedigits">uppercasedigits</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uppercasedigits">
<db:title>QTextStream &amp;uppercasedigits(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#setNumberFlags">QTextStream::setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">QTextStream::numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">QTextStream::UppercaseDigits</db:link>) on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#lowercasedigits">lowercasedigits</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#uppercasebase">uppercasebase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ws">
<db:title>QTextStream &amp;ws(QTextStream &amp;<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Calls <db:link xlink:href="qtextstream.xml#skipWhiteSpace">skipWhiteSpace</db:link>() on <db:code role="parameter">stream</db:code> and returns <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
