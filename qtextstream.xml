<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextStream Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextstream.xml">QTextStream</db:link> class provides a convenient interface for reading and writing text.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextStream</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qiodevicebase.xml" xlink:role="class">QIODeviceBase</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextStream is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member><db:member>string-processing</db:member><db:member>qtserialization</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qtextstream.xml">QTextStream</db:link> can operate on a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>, a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> or a <db:link xlink:href="qstring.xml">QString</db:link>. Using <db:link xlink:href="qtextstream.xml">QTextStream</db:link>'s streaming operators, you can conveniently read and write words, lines and numbers. For generating text, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> supports formatting options for field padding and alignment, and formatting of numbers. Example:</db:para>
<db:programlisting language="cpp">QFile data(&quot;output.txt&quot;);
if (data.open(QFile::WriteOnly | QFile::Truncate)) {
    QTextStream out(&amp;amp;data);
    out &amp;lt;&amp;lt; &quot;Result: &quot; &amp;lt;&amp;lt; qSetFieldWidth(10) &amp;lt;&amp;lt; left &amp;lt;&amp;lt; 3.14 &amp;lt;&amp;lt; 2.7;
    // writes &quot;Result: 3.14      2.7       &quot;
}
</db:programlisting>
<db:para>It's also common to use <db:link xlink:href="qtextstream.xml">QTextStream</db:link> to read console input and write console output. <db:link xlink:href="qtextstream.xml">QTextStream</db:link> is locale aware, and will automatically decode standard input using the correct encoding. Example:</db:para>
<db:programlisting language="cpp">QTextStream stream(stdin);
QString line;
while (stream.readLineInto(&amp;amp;line)) {
    ...
}
</db:programlisting>
<db:para>Besides using <db:link xlink:href="qtextstream.xml">QTextStream</db:link>'s constructors, you can also set the device or string <db:link xlink:href="qtextstream.xml">QTextStream</db:link> operates on by calling <db:link xlink:href="qtextstream.xml#setDevice">setDevice</db:link>() or <db:link xlink:href="qtextstream.xml#setString">setString</db:link>(). You can seek to a position by calling <db:link xlink:href="qtextstream.xml#seek">seek</db:link>(), and <db:link xlink:href="qtextstream.xml#atEnd">atEnd</db:link>() will return true when there is no data left to be read. If you call <db:link xlink:href="qtextstream.xml#flush">flush</db:link>(), <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will empty all data from its write buffer into the device and call <db:link xlink:href="qtextstream.xml#flush">flush</db:link>() on the device.</db:para>
<db:para>Internally, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> uses a Unicode based buffer, and <db:link xlink:href="qstringconverter.xml">QStringConverter</db:link> is used by <db:link xlink:href="qtextstream.xml">QTextStream</db:link> to automatically support different encodings. By default, UTF-8 is used for reading and writing, but you can also set the encoding by calling <db:link xlink:href="qtextstream.xml#setEncoding">setEncoding</db:link>(). Automatic Unicode detection is also supported. When this feature is enabled (the default behavior), <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will detect the UTF-8, UTF-16 or the UTF-32 BOM (Byte Order Mark) and switch to the appropriate UTF encoding when reading. <db:link xlink:href="qtextstream.xml">QTextStream</db:link> does not write a BOM by default, but you can enable this by calling <db:link xlink:href="qtextstream.xml#setGenerateByteOrderMark">setGenerateByteOrderMark</db:link>(true). When <db:link xlink:href="qtextstream.xml">QTextStream</db:link> operates on a <db:link xlink:href="qstring.xml">QString</db:link> directly, the encoding is disabled.</db:para>
<db:para>There are three general ways to use <db:link xlink:href="qtextstream.xml">QTextStream</db:link> when reading text files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Chunk by chunk, by calling <db:link xlink:href="qtextstream.xml#readLine">readLine</db:link>() or <db:link xlink:href="qtextstream.xml#readAll">readAll</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>Word by word. <db:link xlink:href="qtextstream.xml">QTextStream</db:link> supports streaming into <db:link xlink:href="qstring.xml">QString</db:link>s, <db:link xlink:href="qbytearray.xml">QByteArray</db:link>s and char* buffers. Words are delimited by space, and leading white space is automatically skipped.</db:para>
</db:listitem>
<db:listitem>
<db:para>Character by character, by streaming into <db:link xlink:href="qchar.xml">QChar</db:link> or char types. This method is often used for convenient input handling when parsing files, independent of character encoding and end-of-line semantics. To skip white space, call <db:link xlink:href="qtextstream.xml#skipWhiteSpace">skipWhiteSpace</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Since the text stream uses a buffer, you should not read from the stream using the implementation of a superclass. For instance, if you have a <db:link xlink:href="qfile.xml">QFile</db:link> and read from it directly using <db:link xlink:href="qiodevice.xml#readLine">QFile::readLine</db:link>() instead of using the stream, the text stream's internal position will be out of sync with the file's position.</db:para>
<db:para>By default, when reading numbers from a stream of text, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will automatically detect the number's base representation. For example, if the number starts with &quot;0x&quot;, it is assumed to be in hexadecimal form. If it starts with the digits 1-9, it is assumed to be in decimal form, and so on. You can set the integer base, thereby disabling the automatic detection, by calling <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>(). Example:</db:para>
<db:programlisting language="cpp">QTextStream in(&quot;0x50 0x20&quot;);
int firstNumber, secondNumber;

in &amp;gt;&amp;gt; firstNumber;             // firstNumber == 80
in &amp;gt;&amp;gt; dec &amp;gt;&amp;gt; secondNumber;     // secondNumber == 0

char ch;
in &amp;gt;&amp;gt; ch;                      // ch == 'x'
</db:programlisting>
<db:para><db:link xlink:href="qtextstream.xml">QTextStream</db:link> supports many formatting options for generating text. You can set the field width and pad character by calling <db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>() and <db:link xlink:href="qtextstream.xml#setPadChar">setPadChar</db:link>(). Use <db:link xlink:href="qtextstream.xml#setFieldAlignment">setFieldAlignment</db:link>() to set the alignment within each field. For real numbers, call <db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>() and <db:link xlink:href="qtextstream.xml#setRealNumberPrecision">setRealNumberPrecision</db:link>() to set the notation (<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">SmartNotation</db:link>, <db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">ScientificNotation</db:link>, <db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">FixedNotation</db:link>) and precision in digits of the generated number. Some extra number formatting options are also available through <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>().</db:para>
<db:anchor xml:id="qtextstream-manipulators"/>
<db:para>Like &lt;iostream&gt; in the standard C++ library, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> also defines several global manipulator functions:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Manipulator</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#bin">Qt::bin</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>(2).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#oct">Qt::oct</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>(8).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#dec">Qt::dec</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>(10).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#hex">Qt::hex</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>(16).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#showbase">Qt::showbase</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">ShowBase</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#forcesign">Qt::forcesign</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">ForceSign</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#forcepoint">Qt::forcepoint</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">ForcePoint</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#noshowbase">Qt::noshowbase</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">ShowBase</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#noforcesign">Qt::noforcesign</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">ForceSign</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#noforcepoint">Qt::noforcepoint</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">ForcePoint</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#uppercasebase">Qt::uppercasebase</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">UppercaseBase</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#uppercasedigits">Qt::uppercasedigits</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() | <db:link xlink:href="qtextstream.xml#NumberFlag-enum">UppercaseDigits</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#lowercasebase">Qt::lowercasebase</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">UppercaseBase</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#lowercasedigits">Qt::lowercasedigits</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>(<db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>() &amp; ~<db:link xlink:href="qtextstream.xml#NumberFlag-enum">UppercaseDigits</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#fixed">Qt::fixed</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>(<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">FixedNotation</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#scientific">Qt::scientific</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>(<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">ScientificNotation</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#left">Qt::left</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setFieldAlignment">setFieldAlignment</db:link>(<db:link xlink:href="qtextstream.xml#FieldAlignment-enum">AlignLeft</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#right">Qt::right</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setFieldAlignment">setFieldAlignment</db:link>(<db:link xlink:href="qtextstream.xml#FieldAlignment-enum">AlignRight</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#center">Qt::center</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setFieldAlignment">setFieldAlignment</db:link>(<db:link xlink:href="qtextstream.xml#FieldAlignment-enum">AlignCenter</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#endl">Qt::endl</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as operator&lt;&lt;('\n') and <db:link xlink:href="qtextstream.xml#flush">flush</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#flush">Qt::flush</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#flush">flush</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#reset">Qt::reset</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#reset">reset</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ws">Qt::ws</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#skipWhiteSpace">skipWhiteSpace</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#bom">Qt::bom</db:link></db:para>
</db:td>
<db:td>
<db:para>Same as <db:link xlink:href="qtextstream.xml#setGenerateByteOrderMark">setGenerateByteOrderMark</db:link>(true).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In addition, Qt provides three global manipulators that take a parameter: <db:link xlink:href="qtextstream.xml#qSetFieldWidth">qSetFieldWidth</db:link>(), <db:link xlink:href="qtextstream.xml#qSetPadChar">qSetPadChar</db:link>(), and <db:link xlink:href="qtextstream.xml#qSetRealNumberPrecision">qSetRealNumberPrecision</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:member>
<db:member><db:link xlink:href="qiodevice.xml">QIODevice</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
<db:member><db:link xlink:href="qbuffer.xml">QBuffer</db:link></db:member>
<db:member><db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FieldAlignment-enum">
<db:title>enum QTextStream::FieldAlignment</db:title>
<db:enumsynopsis>
<db:enumname>FieldAlignment</db:enumname>
<db:enumitem>
<db:enumidentifier>AlignLeft</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlignRight</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlignCenter</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlignAccountingStyle</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies how to align text in fields when the field is wider than the text that occupies it.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::AlignLeft</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Pad on the right side of fields.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::AlignRight</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Pad on the left side of fields.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::AlignCenter</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Pad on both sides of field.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::AlignAccountingStyle</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Same as AlignRight, except that the sign of a number is flush left.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setFieldAlignment">setFieldAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="NumberFlag-enum">
<db:title>enum QTextStream::NumberFlag</db:title>
<db:bridgehead renderas="sect2">flags QTextStream::NumberFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>NumberFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>ShowBase</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ForcePoint</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ForceSign</db:enumidentifier>
<db:enumvalue>0x4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UppercaseBase</db:enumidentifier>
<db:enumvalue>0x8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UppercaseDigits</db:enumidentifier>
<db:enumvalue>0x10</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QTextStream::NumberFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum specifies various flags that can be set to affect the output of integers, floats, and doubles.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::ShowBase</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Show the base as a prefix if the base is 16 (&quot;0x&quot;), 8 (&quot;0&quot;), or 2 (&quot;0b&quot;).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::ForcePoint</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>Always put the decimal separator in numbers, even if there are no decimals.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::ForceSign</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>Always put the sign in numbers, even for positive numbers.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::UppercaseBase</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>Use uppercase versions of base prefixes (&quot;0X&quot;, &quot;0B&quot;).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::UppercaseDigits</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Use uppercase letters for expressing digits 10 to 35 instead of lowercase.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>NumberFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;NumberFlag&gt;. </db:code>It stores an OR combination of <db:code>NumberFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="RealNumberNotation-enum">
<db:title>enum QTextStream::RealNumberNotation</db:title>
<db:enumsynopsis>
<db:enumname>RealNumberNotation</db:enumname>
<db:enumitem>
<db:enumidentifier>SmartNotation</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FixedNotation</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ScientificNotation</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies which notations to use for expressing float and double as strings.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::ScientificNotation</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Scientific notation (printf()'s %e flag).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::FixedNotation</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Fixed-point notation (printf()'s %f flag).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::SmartNotation</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Scientific or fixed-point notation, depending on which makes most sense (printf()'s %g flag).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QTextStream::Status</db:title>
<db:enumsynopsis>
<db:enumname>Status</db:enumname>
<db:enumitem>
<db:enumidentifier>Ok</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadPastEnd</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadCorruptData</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WriteFailed</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the current status of the text stream.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::Ok</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The text stream is operating normally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::ReadPastEnd</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The text stream has read past the end of the data in the underlying device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::ReadCorruptData</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The text stream has read corrupt data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:emphasis>::WriteFailed</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The text stream cannot write to the underlying device.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#status">status</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextStream">
<db:title>QTextStream::QTextStream()</db:title>
<db:constructorsynopsis>
<db:methodname>QTextStream</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. Before you can use it for reading or writing, you must assign a device or a string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setDevice">setDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setString">setString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTextStream-1">
<db:title>[explicit] QTextStream::QTextStream(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextStream</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> that operates on <db:code role="parameter">device</db:code>.</db:para>
</db:section>
<db:section xml:id="QTextStream-2">
<db:title>[explicit] QTextStream::QTextStream(FILE *<db:emphasis>fileHandle</db:emphasis>, QIODeviceBase::OpenMode <db:emphasis>openMode</db:emphasis> = ReadWrite)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextStream</db:methodname>
<db:methodparam>
<db:type>FILE *</db:type>
<db:parameter>fileHandle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODeviceBase::OpenMode</db:type>
<db:parameter>openMode</db:parameter>
<db:initializer>ReadWrite</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream(FILE *fileHandle, QIODeviceBase::OpenMode openMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> that operates on <db:code role="parameter">fileHandle</db:code>, using <db:code role="parameter">openMode</db:code> to define the open mode. Internally, a <db:link xlink:href="qfile.xml">QFile</db:link> is created to handle the FILE pointer.</db:para>
<db:para>This constructor is useful for working directly with the common FILE based input and output streams: stdin, stdout and stderr. Example:</db:para>
<db:programlisting language="cpp">QString str;
QTextStream in(stdin);
in &amp;gt;&amp;gt; str;
</db:programlisting>
</db:section>
<db:section xml:id="QTextStream-3">
<db:title>[explicit] QTextStream::QTextStream(QString *<db:emphasis>string</db:emphasis>, QIODeviceBase::OpenMode <db:emphasis>openMode</db:emphasis> = ReadWrite)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextStream</db:methodname>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODeviceBase::OpenMode</db:type>
<db:parameter>openMode</db:parameter>
<db:initializer>ReadWrite</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream(QString *string, QIODeviceBase::OpenMode openMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> that operates on <db:code role="parameter">string</db:code>, using <db:code role="parameter">openMode</db:code> to define the open mode.</db:para>
</db:section>
<db:section xml:id="QTextStream-4">
<db:title>[explicit] QTextStream::QTextStream(QByteArray *<db:emphasis>array</db:emphasis>, QIODeviceBase::OpenMode <db:emphasis>openMode</db:emphasis> = ReadWrite)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextStream</db:methodname>
<db:methodparam>
<db:type>QByteArray *</db:type>
<db:parameter>array</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODeviceBase::OpenMode</db:type>
<db:parameter>openMode</db:parameter>
<db:initializer>ReadWrite</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream(QByteArray *array, QIODeviceBase::OpenMode openMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> that operates on <db:code role="parameter">array</db:code>, using <db:code role="parameter">openMode</db:code> to define the open mode. Internally, the array is wrapped by a <db:link xlink:href="qbuffer.xml">QBuffer</db:link>.</db:para>
</db:section>
<db:section xml:id="QTextStream-5">
<db:title>[explicit] QTextStream::QTextStream(const QByteArray &amp;<db:emphasis>array</db:emphasis>, QIODeviceBase::OpenMode <db:emphasis>openMode</db:emphasis> = ReadOnly)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextStream</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>array</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODeviceBase::OpenMode</db:type>
<db:parameter>openMode</db:parameter>
<db:initializer>ReadOnly</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream(const QByteArray &amp;array, QIODeviceBase::OpenMode openMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> that operates on <db:code role="parameter">array</db:code>, using <db:code role="parameter">openMode</db:code> to define the open mode. The array is accessed as read-only, regardless of the values in <db:code role="parameter">openMode</db:code>.</db:para>
<db:para>This constructor is convenient for working on constant strings. Example:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    // read numeric arguments (123, 0x20, 4.5...)
    for (int i = 1; i &amp;lt; argc; ++i) {
          int number;
          QTextStream in(argv[i]);
          in &amp;gt;&amp;gt; number;
          ...
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="dtor.QTextStream">
<db:title>[virtual] QTextStream::~QTextStream()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QTextStream</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTextStream()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>.</db:para>
<db:para>If the stream operates on a device, <db:link xlink:href="qtextstream.xml#flush">flush</db:link>() will be called implicitly. Otherwise, the device is unaffected.</db:para>
</db:section>
<db:section xml:id="atEnd">
<db:title>bool QTextStream::atEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>atEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool atEnd() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if there is no more data to be read from the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>; otherwise returns false. This is similar to, but not the same as calling <db:link xlink:href="qiodevice.xml#atEnd">QIODevice::atEnd</db:link>(), as <db:link xlink:href="qtextstream.xml">QTextStream</db:link> also takes into account its internal Unicode buffer.</db:para>
</db:section>
<db:section xml:id="autoDetectUnicode">
<db:title>bool QTextStream::autoDetectUnicode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>autoDetectUnicode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool autoDetectUnicode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if automatic Unicode detection is enabled, otherwise returns false. Automatic Unicode detection is enabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setAutoDetectUnicode">setAutoDetectUnicode</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setEncoding">setEncoding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="device">
<db:title>QIODevice *QTextStream::device() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>device</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * device() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current device associated with the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>, or nullptr if no device has been assigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setDevice">setDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="encoding">
<db:title>QStringConverter::Encoding QTextStream::encoding() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringConverter::Encoding</db:type>
<db:methodname>encoding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringConverter::Encoding encoding() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the encoding that is current assigned to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setEncoding">setEncoding</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setAutoDetectUnicode">setAutoDetectUnicode</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#locale">locale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fieldAlignment">
<db:title>QTextStream::FieldAlignment QTextStream::fieldAlignment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextStream::FieldAlignment</db:type>
<db:methodname>fieldAlignment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream::FieldAlignment fieldAlignment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current field alignment.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setFieldAlignment">setFieldAlignment</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#fieldWidth">fieldWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fieldWidth">
<db:title>int QTextStream::fieldWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>fieldWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int fieldWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current field width.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flush">
<db:title>void QTextStream::flush()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>flush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void flush()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Flushes any buffered data waiting to be written to the device.</db:para>
<db:para>If <db:link xlink:href="qtextstream.xml">QTextStream</db:link> operates on a string, this function does nothing.</db:para>
</db:section>
<db:section xml:id="generateByteOrderMark">
<db:title>bool QTextStream::generateByteOrderMark() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>generateByteOrderMark</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool generateByteOrderMark() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qtextstream.xml">QTextStream</db:link> is set to generate the UTF BOM (Byte Order Mark) when using a UTF encoding; otherwise returns false. UTF BOM generation is set to false by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setGenerateByteOrderMark">setGenerateByteOrderMark</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="integerBase">
<db:title>int QTextStream::integerBase() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>integerBase</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int integerBase() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current base of integers. 0 means that the base is detected when reading, or 10 (decimal) when generating numbers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#number">QString::number</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="locale">
<db:title>QLocale QTextStream::locale() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLocale</db:type>
<db:methodname>locale</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLocale locale() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the locale for this stream. The default locale is C.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="numberFlags">
<db:title>QTextStream::NumberFlags QTextStream::numberFlags() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextStream::NumberFlags</db:type>
<db:methodname>numberFlags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream::NumberFlags numberFlags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current number flags.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#integerBase">integerBase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#realNumberNotation">realNumberNotation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="padChar">
<db:title>QChar QTextStream::padChar() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QChar</db:type>
<db:methodname>padChar</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QChar padChar() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current pad character.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setPadChar">setPadChar</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pos">
<db:title>qint64 QTextStream::pos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>pos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 pos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device position corresponding to the current position of the stream, or -1 if an error occurs (e.g., if there is no device or string, or if there's a device error).</db:para>
<db:para>Because <db:link xlink:href="qtextstream.xml">QTextStream</db:link> is buffered, this function may have to seek the device to reconstruct a valid device position. This operation can be expensive, so you may want to avoid calling this function in a tight loop.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#seek">seek</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="read">
<db:title>QString QTextStream::read(qint64 <db:emphasis>maxlen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>read</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>maxlen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString read(qint64 maxlen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads at most <db:code role="parameter">maxlen</db:code> characters from the stream, and returns the data read as a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#readAll">readAll</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#readLine">readLine</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#read">QIODevice::read</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readAll">
<db:title>QString QTextStream::readAll()</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>readAll</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString readAll()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads the entire content of the stream, and returns it as a <db:link xlink:href="qstring.xml">QString</db:link>. Avoid this function when working on large files, as it will consume a significant amount of memory.</db:para>
<db:para>Calling <db:link xlink:href="qtextstream.xml#readLine">readLine</db:link>() is better if you do not know how much data is available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#readLine">readLine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readLine">
<db:title>QString QTextStream::readLine(qint64 <db:emphasis>maxlen</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>readLine</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>maxlen</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString readLine(qint64 maxlen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads one line of text from the stream, and returns it as a <db:link xlink:href="qstring.xml">QString</db:link>. The maximum allowed line length is set to <db:code role="parameter">maxlen</db:code>. If the stream contains lines longer than this, then the lines will be split after <db:code role="parameter">maxlen</db:code> characters and returned in parts.</db:para>
<db:para>If <db:code role="parameter">maxlen</db:code> is 0, the lines can be of any length.</db:para>
<db:para>The returned line has no trailing end-of-line characters (&quot;\n&quot; or &quot;\r\n&quot;), so calling <db:link xlink:href="qstring.xml#trimmed">QString::trimmed</db:link>() can be unnecessary.</db:para>
<db:para>If the stream has read to the end of the file, readLine() will return a null <db:link xlink:href="qstring.xml">QString</db:link>. For strings, or for devices that support it, you can explicitly test for the end of the stream using <db:link xlink:href="qtextstream.xml#atEnd">atEnd</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#readAll">readAll</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#readLine">QIODevice::readLine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readLineInto">
<db:title>[since 5.5] bool QTextStream::readLineInto(QString *<db:emphasis>line</db:emphasis>, qint64 <db:emphasis>maxlen</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>readLineInto</db:methodname>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>maxlen</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool readLineInto(QString *line, qint64 maxlen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads one line of text from the stream into <db:code role="parameter">line</db:code>. If <db:code role="parameter">line</db:code> is nullptr, the read line is not stored.</db:para>
<db:para>The maximum allowed line length is set to <db:code role="parameter">maxlen</db:code>. If the stream contains lines longer than this, then the lines will be split after <db:code role="parameter">maxlen</db:code> characters and returned in parts.</db:para>
<db:para>If <db:code role="parameter">maxlen</db:code> is 0, the lines can be of any length.</db:para>
<db:para>The resulting line has no trailing end-of-line characters (&quot;\n&quot; or &quot;\r\n&quot;), so calling <db:link xlink:href="qstring.xml#trimmed">QString::trimmed</db:link>() can be unnecessary.</db:para>
<db:para>If <db:code role="parameter">line</db:code> has sufficient capacity for the data that is about to be read, this function may not need to allocate new memory. Because of this, it can be faster than <db:link xlink:href="qtextstream.xml#readLine">readLine</db:link>().</db:para>
<db:para>Returns false if the stream has read to the end of the file or an error has occurred; otherwise returns true. The contents in <db:code role="parameter">line</db:code> before the call are discarded in any case.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#readAll">readAll</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#readLine">QIODevice::readLine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="realNumberNotation">
<db:title>QTextStream::RealNumberNotation QTextStream::realNumberNotation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextStream::RealNumberNotation</db:type>
<db:methodname>realNumberNotation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream::RealNumberNotation realNumberNotation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current real number notation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#realNumberPrecision">realNumberPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#integerBase">integerBase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="realNumberPrecision">
<db:title>int QTextStream::realNumberPrecision() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>realNumberPrecision</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int realNumberPrecision() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current real number precision, or the number of fraction digits <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will write when generating real numbers (<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">FixedNotation</db:link>, <db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">ScientificNotation</db:link>), or the maximum number of significant digits (<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">SmartNotation</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberPrecision">setRealNumberPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#realNumberNotation">realNumberNotation</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#integerBase">integerBase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>void QTextStream::reset()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets <db:link xlink:href="qtextstream.xml">QTextStream</db:link>'s formatting options, bringing it back to its original constructed state. The device, string and any buffered data is left untouched.</db:para>
</db:section>
<db:section xml:id="resetStatus">
<db:title>void QTextStream::resetStatus()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resetStatus</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resetStatus()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the status of the text stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#Status-enum">QTextStream::Status</db:link></db:member>
<db:member><db:link xlink:href="qtextstream.xml#status">status</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setStatus">setStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="seek">
<db:title>bool QTextStream::seek(qint64 <db:emphasis>pos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>seek</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool seek(qint64 pos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Seeks to the position <db:code role="parameter">pos</db:code> in the device. Returns true on success; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="setAutoDetectUnicode">
<db:title>void QTextStream::setAutoDetectUnicode(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAutoDetectUnicode</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAutoDetectUnicode(bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enabled</db:code> is true, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will attempt to detect Unicode encoding by peeking into the stream data to see if it can find the UTF-8, UTF-16, or UTF-32 Byte Order Mark (BOM). If this mark is found, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will replace the current encoding with the UTF encoding.</db:para>
<db:para>This function can be used together with <db:link xlink:href="qtextstream.xml#setEncoding">setEncoding</db:link>(). It is common to set the encoding to UTF-8, and then enable UTF-16 detection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#autoDetectUnicode">autoDetectUnicode</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setEncoding">setEncoding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevice">
<db:title>void QTextStream::setDevice(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDevice</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDevice(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current device to <db:code role="parameter">device</db:code>. If a device has already been assigned, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will call <db:link xlink:href="qtextstream.xml#flush">flush</db:link>() before the old device is replaced.</db:para>
<db:note>
<db:para>This function resets locale to the default locale ('C') and encoding to the default encoding, UTF-8.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#device">device</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setString">setString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEncoding">
<db:title>void QTextStream::setEncoding(QStringConverter::Encoding <db:emphasis>encoding</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEncoding</db:methodname>
<db:methodparam>
<db:type>QStringConverter::Encoding</db:type>
<db:parameter>encoding</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEncoding(QStringConverter::Encoding encoding)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the encoding for this stream to <db:code role="parameter">encoding</db:code>. The encoding is used for decoding any data that is read from the assigned device, and for encoding any data that is written. By default, <db:link xlink:href="qstringconverter.xml#Encoding-enum">QStringConverter::Utf8</db:link> is used, and automatic unicode detection is enabled.</db:para>
<db:para>If <db:link xlink:href="qtextstream.xml">QTextStream</db:link> operates on a string, this function does nothing.</db:para>
<db:warning>
<db:para>If you call this function while the text stream is reading from an open sequential socket, the internal buffer may still contain text decoded using the old encoding.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#encoding">encoding</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setAutoDetectUnicode">setAutoDetectUnicode</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFieldAlignment">
<db:title>void QTextStream::setFieldAlignment(QTextStream::FieldAlignment <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFieldAlignment</db:methodname>
<db:methodparam>
<db:type>QTextStream::FieldAlignment</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFieldAlignment(QTextStream::FieldAlignment mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the field alignment to <db:code role="parameter">mode</db:code>. When used together with <db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>(), this function allows you to generate formatted output with text aligned to the left, to the right or center aligned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#fieldAlignment">fieldAlignment</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFieldWidth">
<db:title>void QTextStream::setFieldWidth(int <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFieldWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFieldWidth(int width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current field width to <db:code role="parameter">width</db:code>. If <db:code role="parameter">width</db:code> is 0 (the default), the field width is equal to the length of the generated text.</db:para>
<db:note>
<db:para>The field width applies to every element appended to this stream after this function has been called (e.g., it also pads endl). This behavior is different from similar classes in the STL, where the field width only applies to the next element.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#fieldWidth">fieldWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setPadChar">setPadChar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGenerateByteOrderMark">
<db:title>void QTextStream::setGenerateByteOrderMark(bool <db:emphasis>generate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGenerateByteOrderMark</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>generate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGenerateByteOrderMark(bool generate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">generate</db:code> is true and a UTF encoding is used, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will insert the BOM (Byte Order Mark) before any data has been written to the device. If <db:code role="parameter">generate</db:code> is false, no BOM will be inserted. This function must be called before any data is written. Otherwise, it does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#generateByteOrderMark">generateByteOrderMark</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#bom">bom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIntegerBase">
<db:title>void QTextStream::setIntegerBase(int <db:emphasis>base</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setIntegerBase</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setIntegerBase(int base)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the base of integers to <db:code role="parameter">base</db:code>, both for reading and for generating numbers. <db:code role="parameter">base</db:code> can be either 2 (binary), 8 (octal), 10 (decimal) or 16 (hexadecimal). If <db:code role="parameter">base</db:code> is 0, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will attempt to detect the base by inspecting the data on the stream. When generating numbers, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> assumes base is 10 unless the base has been set explicitly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#integerBase">integerBase</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#number">QString::number</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLocale">
<db:title>void QTextStream::setLocale(const QLocale &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLocale</db:methodname>
<db:methodparam>
<db:type>const QLocale &amp;</db:type>
<db:parameter>locale</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLocale(const QLocale &amp;locale)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the locale for this stream to <db:code role="parameter">locale</db:code>. The specified locale is used for conversions between numbers and their string representations.</db:para>
<db:para>The default locale is C and it is a special case - the thousands group separator is not used for backward compatibility reasons.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#locale">locale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNumberFlags">
<db:title>void QTextStream::setNumberFlags(QTextStream::NumberFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNumberFlags</db:methodname>
<db:methodparam>
<db:type>QTextStream::NumberFlags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNumberFlags(QTextStream::NumberFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current number flags to <db:code role="parameter">flags</db:code>. <db:code role="parameter">flags</db:code> is a set of flags from the <db:link xlink:href="qtextstream.xml#NumberFlag-enum">NumberFlag</db:link> enum, and describes options for formatting generated code (e.g., whether or not to always write the base or sign of a number).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#numberFlags">numberFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPadChar">
<db:title>void QTextStream::setPadChar(QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPadChar</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPadChar(QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pad character to <db:code role="parameter">ch</db:code>. The default value is the ASCII space character (' '), or <db:link xlink:href="qchar.xml">QChar</db:link>(0x20). This character is used to fill in the space in fields when generating text.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QString s;
QTextStream out(&amp;amp;s);
out.setFieldWidth(10);
out.setFieldAlignment(QTextStream::AlignCenter);
out.setPadChar('-');
out &amp;lt;&amp;lt; &quot;Qt&quot; &amp;lt;&amp;lt; &quot;rocks!&quot;;
</db:programlisting>
<db:para>The string s contains:</db:para>
<db:programlisting language="cpp">----Qt------rocks!--
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#padChar">padChar</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRealNumberNotation">
<db:title>void QTextStream::setRealNumberNotation(QTextStream::RealNumberNotation <db:emphasis>notation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRealNumberNotation</db:methodname>
<db:methodparam>
<db:type>QTextStream::RealNumberNotation</db:type>
<db:parameter>notation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRealNumberNotation(QTextStream::RealNumberNotation notation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the real number notation to <db:code role="parameter">notation</db:code> (<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">SmartNotation</db:link>, <db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">FixedNotation</db:link>, <db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">ScientificNotation</db:link>). When reading and generating numbers, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> uses this value to detect the formatting of real numbers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#realNumberNotation">realNumberNotation</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberPrecision">setRealNumberPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRealNumberPrecision">
<db:title>void QTextStream::setRealNumberPrecision(int <db:emphasis>precision</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRealNumberPrecision</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>precision</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRealNumberPrecision(int precision)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the precision of real numbers to <db:code role="parameter">precision</db:code>. This value describes the number of fraction digits <db:link xlink:href="qtextstream.xml">QTextStream</db:link> should write when generating real numbers (<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">FixedNotation</db:link>, <db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">ScientificNotation</db:link>), or the maximum number of significant digits (<db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">SmartNotation</db:link>).</db:para>
<db:para>The precision cannot be a negative value. The default value is 6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#realNumberPrecision">realNumberPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStatus">
<db:title>void QTextStream::setStatus(QTextStream::Status <db:emphasis>status</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStatus</db:methodname>
<db:methodparam>
<db:type>QTextStream::Status</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStatus(QTextStream::Status status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the status of the text stream to the <db:code role="parameter">status</db:code> given.</db:para>
<db:para>Subsequent calls to setStatus() are ignored until <db:link xlink:href="qtextstream.xml#resetStatus">resetStatus</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#Status-enum">Status</db:link></db:member>
<db:member><db:link xlink:href="qtextstream.xml#status">status</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#resetStatus">resetStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setString">
<db:title>void QTextStream::setString(QString *<db:emphasis>string</db:emphasis>, QIODeviceBase::OpenMode <db:emphasis>openMode</db:emphasis> = ReadWrite)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setString</db:methodname>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODeviceBase::OpenMode</db:type>
<db:parameter>openMode</db:parameter>
<db:initializer>ReadWrite</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setString(QString *string, QIODeviceBase::OpenMode openMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current string to <db:code role="parameter">string</db:code>, using the given <db:code role="parameter">openMode</db:code>. If a device has already been assigned, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will call <db:link xlink:href="qtextstream.xml#flush">flush</db:link>() before replacing it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#string">string</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="skipWhiteSpace">
<db:title>void QTextStream::skipWhiteSpace()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>skipWhiteSpace</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void skipWhiteSpace()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads and discards whitespace from the stream until either a non-space character is detected, or until <db:link xlink:href="qtextstream.xml#atEnd">atEnd</db:link>() returns true. This function is useful when reading a stream character by character.</db:para>
<db:para>Whitespace characters are all characters for which <db:link xlink:href="qchar.xml#isSpace">QChar::isSpace</db:link>() returns true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#operator-gt-gt">operator&gt;&gt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status">
<db:title>QTextStream::Status QTextStream::status() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextStream::Status</db:type>
<db:methodname>status</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream::Status status() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the status of the text stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#Status-enum">QTextStream::Status</db:link></db:member>
<db:member><db:link xlink:href="qtextstream.xml#setStatus">setStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#resetStatus">resetStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="string">
<db:title>QString *QTextStream::string() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString *</db:type>
<db:methodname>string</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString * string() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current string assigned to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>, or nullptr if no string has been assigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setString">setString</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#device">device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(QChar <db:emphasis>c</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(QChar c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the character <db:code role="parameter">c</db:code> to the stream, then returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(char <db:emphasis>c</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>char</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(char c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Converts <db:code role="parameter">c</db:code> from ASCII to a <db:link xlink:href="qchar.xml">QChar</db:link>, then writes it to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-2">
<db:title>[since 6.3.1] QTextStream &amp;QTextStream::operator&lt;&lt;(char16_t <db:emphasis>c</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>char16_t</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(char16_t c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the Unicode character <db:code role="parameter">c</db:code> to the stream, then returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.3.1.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-3">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(short <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>short</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(short i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the integer number <db:code role="parameter">i</db:code> to the stream, then returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. By default, the number is stored in decimal form, but you can also set the base by calling <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-4">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(unsigned short <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>unsigned short</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(unsigned short i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the unsigned short <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-5">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(int <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(int i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the signed int <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-6">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(unsigned int <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>unsigned int</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(unsigned int i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the unsigned int <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-7">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(long <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>long</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(long i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the signed long <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-8">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(unsigned long <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>unsigned long</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(unsigned long i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the unsigned long <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-9">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(qlonglong <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>qlonglong</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(qlonglong i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the qlonglong <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-10">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(qulonglong <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>qulonglong</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(qulonglong i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the qulonglong <db:code role="parameter">i</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-11">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(float <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(float f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the real number <db:code role="parameter">f</db:code> to the stream, then returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. By default, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> stores it using <db:link xlink:href="qtextstream.xml#RealNumberNotation-enum">SmartNotation</db:link>, with up to 6 digits of precision. You can change the textual representation <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will use for real numbers by calling <db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>(), <db:link xlink:href="qtextstream.xml#setRealNumberPrecision">setRealNumberPrecision</db:link>() and <db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberNotation">setRealNumberNotation</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setRealNumberPrecision">setRealNumberPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setNumberFlags">setNumberFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-12">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(double <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">12</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(double f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the double <db:code role="parameter">f</db:code> to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-13">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(const QString &amp;<db:emphasis>string</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">13</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(const QString &amp;string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the string <db:code role="parameter">string</db:code> to the stream, and returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. The string is first encoded using the assigned encoding (the default is UTF-8) before it is written to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml#setFieldWidth">setFieldWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qtextstream.xml#setEncoding">setEncoding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-14">
<db:title>[since 5.12] QTextStream &amp;QTextStream::operator&lt;&lt;(QStringView <db:emphasis>string</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">14</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(QStringView string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes <db:code role="parameter">string</db:code> to the stream, and returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-15">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(QLatin1StringView <db:emphasis>string</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QLatin1StringView</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">15</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(QLatin1StringView string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes <db:code role="parameter">string</db:code> to the stream, and returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-16">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(const QByteArray &amp;<db:emphasis>array</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>array</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">16</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(const QByteArray &amp;array)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes <db:code role="parameter">array</db:code> to the stream. The contents of <db:code role="parameter">array</db:code> are converted with <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>().</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-17">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(const char *<db:emphasis>string</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">17</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(const char *string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes the constant string pointed to by <db:code role="parameter">string</db:code> to the stream. <db:code role="parameter">string</db:code> is assumed to be in UTF-8 encoding. This operator is convenient when working with constant string data. Example:</db:para>
<db:programlisting language="cpp">QTextStream out(stdout);
out &amp;lt;&amp;lt; &quot;Qt rocks!&quot; &amp;lt;&amp;lt; Qt::endl;
</db:programlisting>
<db:para>Warning: <db:link xlink:href="qtextstream.xml">QTextStream</db:link> assumes that <db:code role="parameter">string</db:code> points to a string of text, terminated by a '\0' character. If there is no terminating '\0' character, your application may crash.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-18">
<db:title>QTextStream &amp;QTextStream::operator&lt;&lt;(const void *<db:emphasis>ptr</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>ptr</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">18</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&lt;&lt;(const void *ptr)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Writes <db:code role="parameter">ptr</db:code> to the stream as a hexadecimal number with a base.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(QChar &amp;<db:emphasis>c</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QChar &amp;</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(QChar &amp;c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a character from the stream and stores it in <db:code role="parameter">c</db:code>. Returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>, so several operators can be nested. Example:</db:para>
<db:programlisting language="cpp">QTextStream in(file);
QChar ch1, ch2, ch3;
in &amp;gt;&amp;gt; ch1 &amp;gt;&amp;gt; ch2 &amp;gt;&amp;gt; ch3;
</db:programlisting>
<db:para>Whitespace is <db:emphasis>not</db:emphasis> skipped.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(char &amp;<db:emphasis>c</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>char &amp;</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(char &amp;c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads a character from the stream and stores it in <db:code role="parameter">c</db:code>. The character from the stream is converted to ISO-5589-1 before it is stored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#toLatin1">QChar::toLatin1</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-2">
<db:title>[since 6.4] QTextStream &amp;QTextStream::operator&gt;&gt;(char16_t &amp;<db:emphasis>c</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>char16_t &amp;</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(char16_t &amp;c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Reads a character from the stream and stores it in <db:code role="parameter">c</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-3">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(short &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>short &amp;</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(short &amp;i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads an integer from the stream and stores it in <db:code role="parameter">i</db:code>, then returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. The number is cast to the correct type before it is stored. If no number was detected on the stream, <db:code role="parameter">i</db:code> is set to 0.</db:para>
<db:para>By default, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> will attempt to detect the base of the number using the following rules:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Prefix</db:para>
</db:th>
<db:th>
<db:para>Base</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>&quot;0b&quot; or &quot;0B&quot;</db:para>
</db:td>
<db:td>
<db:para>2 (binary)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&quot;0&quot; followed by &quot;0-7&quot;</db:para>
</db:td>
<db:td>
<db:para>8 (octal)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&quot;0&quot; otherwise</db:para>
</db:td>
<db:td>
<db:para>10 (decimal)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&quot;0x&quot; or &quot;0X&quot;</db:para>
</db:td>
<db:td>
<db:para>16 (hexadecimal)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&quot;1&quot; to &quot;9&quot;</db:para>
</db:td>
<db:td>
<db:para>10 (decimal)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>By calling <db:link xlink:href="qtextstream.xml#setIntegerBase">setIntegerBase</db:link>(), you can specify the integer base explicitly. This will disable the auto-detection, and speed up <db:link xlink:href="qtextstream.xml">QTextStream</db:link> slightly.</db:para>
<db:para>Leading whitespace is skipped.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-4">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(unsigned short &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>unsigned short &amp;</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(unsigned short &amp;i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the unsigned short <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-5">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(int &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>int &amp;</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(int &amp;i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the signed int <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-6">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(unsigned int &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>unsigned int &amp;</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(unsigned int &amp;i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the unsigned int <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-7">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(long &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>long &amp;</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(long &amp;i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the signed long <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-8">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(unsigned long &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>unsigned long &amp;</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(unsigned long &amp;i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the unsigned long <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-9">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(qlonglong &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>qlonglong &amp;</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(qlonglong &amp;i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the qlonglong <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-10">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(qulonglong &amp;<db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>qulonglong &amp;</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(qulonglong &amp;i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the integer in the qulonglong <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-11">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(float &amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>float &amp;</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(float &amp;f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a real number from the stream and stores it in <db:code role="parameter">f</db:code>, then returns a reference to the <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. The number is cast to the correct type. If no real number is detect on the stream, <db:code role="parameter">f</db:code> is set to 0.0.</db:para>
<db:para>As a special exception, <db:link xlink:href="qtextstream.xml">QTextStream</db:link> allows the strings &quot;nan&quot; and &quot;inf&quot; to represent NAN and INF floats or doubles.</db:para>
<db:para>Leading whitespace is skipped.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-12">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(double &amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>double &amp;</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">12</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(double &amp;f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Stores the real number in the double <db:code role="parameter">f</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-13">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">13</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(QString &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a word from the stream and stores it in <db:code role="parameter">str</db:code>, then returns a reference to the stream. Words are separated by whitespace (i.e., all characters for which <db:link xlink:href="qchar.xml#isSpace">QChar::isSpace</db:link>() returns true).</db:para>
<db:para>Leading whitespace is skipped.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-14">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(QByteArray &amp;<db:emphasis>array</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QByteArray &amp;</db:type>
<db:parameter>array</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">14</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(QByteArray &amp;array)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Converts the word to UTF-8, then stores it in <db:code role="parameter">array</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toLatin1">QString::toLatin1</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-15">
<db:title>QTextStream &amp;QTextStream::operator&gt;&gt;(char *<db:emphasis>c</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>char *</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">15</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStream &amp; operator&gt;&gt;(char *c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Converts the word to UTF-8 and stores it in <db:code role="parameter">c</db:code>, terminated by a '\0' character. If no word is available, only the '\0' character is stored.</db:para>
<db:para>Warning: Although convenient, this operator is dangerous and must be used with care. <db:link xlink:href="qtextstream.xml">QTextStream</db:link> assumes that <db:code role="parameter">c</db:code> points to a buffer with enough space to hold the word. If the buffer is too small, your application may crash. For a word consisting of n QChars, the buffer needs to be at least 3*n+1 characters long.</db:para>
<db:para>If possible, use the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> operator instead.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qSetFieldWidth">
<db:title>QTextStreamManipulator qSetFieldWidth(int <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStreamManipulator</db:type>
<db:methodname>qSetFieldWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStreamManipulator qSetFieldWidth(int width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Equivalent to <db:link xlink:href="qtextstream.xml#setFieldWidth">QTextStream::setFieldWidth</db:link>(<db:code role="parameter">width</db:code>).</db:para>
</db:section>
<db:section xml:id="qSetPadChar">
<db:title>QTextStreamManipulator qSetPadChar(QChar <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStreamManipulator</db:type>
<db:methodname>qSetPadChar</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStreamManipulator qSetPadChar(QChar ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Equivalent to <db:link xlink:href="qtextstream.xml#setPadChar">QTextStream::setPadChar</db:link>(<db:code role="parameter">ch</db:code>).</db:para>
</db:section>
<db:section xml:id="qSetRealNumberPrecision">
<db:title>QTextStreamManipulator qSetRealNumberPrecision(int <db:emphasis>precision</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextStreamManipulator</db:type>
<db:methodname>qSetRealNumberPrecision</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>precision</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextStreamManipulator qSetRealNumberPrecision(int precision)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Equivalent to <db:link xlink:href="qtextstream.xml#setRealNumberPrecision">QTextStream::setRealNumberPrecision</db:link>(<db:code role="parameter">precision</db:code>).</db:para>
</db:section>
</db:section>
</db:article>
