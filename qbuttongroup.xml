<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QButtonGroup Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link> class provides a container to organize groups of button widgets.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QButtonGroup</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QButtonGroup is part of <db:simplelist><db:member>organizers</db:member><db:member>geomanagement</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link> provides an abstract container into which button widgets can be placed. It does not provide a visual representation of this container (see <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> for a container widget), but instead manages the states of each of the buttons in the group.</db:para>
<db:para>An <db:link xlink:href="qbuttongroup.xml#exclusive-prop">exclusive</db:link> button group switches off all checkable (toggle) buttons except the one that has been clicked. By default, a button group is exclusive. The buttons in a button group are usually checkable <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>s, <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>es (normally for non-exclusive button groups), or <db:link xlink:href="qradiobutton.xml">QRadioButton</db:link>s. If you create an exclusive button group, you should ensure that one of the buttons in the group is initially checked; otherwise, the group will initially be in a state where no buttons are checked.</db:para>
<db:para>A button can be added to the group with <db:link xlink:href="qbuttongroup.xml#addButton">addButton</db:link>() and removed with <db:link xlink:href="qbuttongroup.xml#removeButton">removeButton</db:link>(). If the group is exclusive, the currently checked button is available with <db:link xlink:href="qbuttongroup.xml#checkedButton">checkedButton</db:link>(). If a button is clicked, the <db:link xlink:href="qbuttongroup.xml#buttonClicked">buttonClicked</db:link>() signal is emitted; for a checkable button in an exclusive group this means that the button has been checked. The list of buttons in the group is returned by <db:link xlink:href="qbuttongroup.xml#buttons">buttons</db:link>().</db:para>
<db:para>In addition, <db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link> can map between integers and buttons. You can assign an integer id to a button with <db:link xlink:href="qbuttongroup.xml#setId">setId</db:link>(), and retrieve it with <db:link xlink:href="qbuttongroup.xml#id">id</db:link>(). The id of the currently checked button is available with <db:link xlink:href="qbuttongroup.xml#checkedId">checkedId</db:link>(), and there is a signal <db:link xlink:href="qbuttongroup.xml#idClicked">idClicked</db:link>() that emits the id of the button. The id <db:code>-1</db:code> is reserved by <db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link> to mean &quot;no such button&quot;. The purpose of the mapping mechanism is to simplify the representation of enum values in a user interface.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgroupbox.xml">QGroupBox</db:link></db:member>
<db:member><db:link xlink:href="qpushbutton.xml">QPushButton</db:link></db:member>
<db:member><db:link xlink:href="qcheckbox.xml">QCheckBox</db:link></db:member>
<db:member><db:link xlink:href="qradiobutton.xml">QRadioButton</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="exclusive-prop">
<db:title>exclusive : bool</db:title>
<db:para>This property holds whether the button group is exclusive</db:para>
<db:para>If this property is <db:code>true</db:code>, then only one button in the group can be checked at any given time. The user can click on any button to check it, and that button will replace the existing one as the checked button in the group.</db:para>
<db:para>In an exclusive group, the user cannot uncheck the currently checked button by clicking on it; instead, another button in the group must be clicked to set the new checked button for that group.</db:para>
<db:para>By default, this property is <db:code>true</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">exclusive</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setExclusive</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QButtonGroup">
<db:title>[explicit] QButtonGroup::QButtonGroup(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new, empty button group with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml#addButton">addButton</db:link>()</db:member>
<db:member><db:link xlink:href="qbuttongroup.xml#exclusive-prop">setExclusive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QButtonGroup">
<db:title>[virtual noexcept] QButtonGroup::~QButtonGroup()</db:title>
<db:para>Destroys the button group.</db:para>
</db:section>
<db:section xml:id="addButton">
<db:title>void QButtonGroup::addButton(QAbstractButton *<db:emphasis>button</db:emphasis>, int <db:emphasis>id</db:emphasis> = -1)</db:title>
<db:para>Adds the given <db:code role="parameter">button</db:code> to the button group. If <db:code role="parameter">id</db:code> is -1, an id will be assigned to the button. Automatically assigned ids are guaranteed to be negative, starting with -2. If you are assigning your own ids, use positive values to avoid conflicts.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml#removeButton">removeButton</db:link>()</db:member>
<db:member><db:link xlink:href="qbuttongroup.xml#buttons">buttons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="button">
<db:title>QAbstractButton *QButtonGroup::button(int <db:emphasis>id</db:emphasis>) const</db:title>
<db:para>Returns the button with the specified <db:code role="parameter">id</db:code>, or <db:code>nullptr</db:code> if no such button exists.</db:para>
</db:section>
<db:section xml:id="buttonClicked">
<db:title>void QButtonGroup::buttonClicked(QAbstractButton *<db:emphasis>button</db:emphasis>)</db:title>
<db:para>This signal is emitted when the given <db:code role="parameter">button</db:code> is clicked. A button is clicked when it is first pressed and then released, when its shortcut key is typed, or when <db:link xlink:href="qabstractbutton.xml#click">QAbstractButton::click</db:link>() or <db:link xlink:href="qabstractbutton.xml#animateClick">QAbstractButton::animateClick</db:link>() is programmatically called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml#checkedButton">checkedButton</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#clicked">QAbstractButton::clicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buttonPressed">
<db:title>void QButtonGroup::buttonPressed(QAbstractButton *<db:emphasis>button</db:emphasis>)</db:title>
<db:para>This signal is emitted when the given <db:code role="parameter">button</db:code> is pressed down.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#pressed">QAbstractButton::pressed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buttonReleased">
<db:title>void QButtonGroup::buttonReleased(QAbstractButton *<db:emphasis>button</db:emphasis>)</db:title>
<db:para>This signal is emitted when the given <db:code role="parameter">button</db:code> is released.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#released">QAbstractButton::released</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buttonToggled">
<db:title>void QButtonGroup::buttonToggled(QAbstractButton *<db:emphasis>button</db:emphasis>, bool <db:emphasis>checked</db:emphasis>)</db:title>
<db:para>This signal is emitted when the given <db:code role="parameter">button</db:code> is toggled. <db:code role="parameter">checked</db:code> is true if the button is checked, or false if the button is unchecked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#toggled">QAbstractButton::toggled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buttons">
<db:title>QList&lt;QAbstractButton *&gt; QButtonGroup::buttons() const</db:title>
<db:para>Returns the button group's list of buttons. This may be empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml#addButton">addButton</db:link>()</db:member>
<db:member><db:link xlink:href="qbuttongroup.xml#removeButton">removeButton</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkedButton">
<db:title>QAbstractButton *QButtonGroup::checkedButton() const</db:title>
<db:para>Returns the button group's checked button, or <db:code>nullptr</db:code> if no buttons are checked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml#buttonClicked">buttonClicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkedId">
<db:title>int QButtonGroup::checkedId() const</db:title>
<db:para>Returns the id of the <db:link xlink:href="qbuttongroup.xml#checkedButton">checkedButton</db:link>(), or -1 if no button is checked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml#setId">setId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="id">
<db:title>int QButtonGroup::id(QAbstractButton *<db:emphasis>button</db:emphasis>) const</db:title>
<db:para>Returns the id for the specified <db:code role="parameter">button</db:code>, or -1 if no such button exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml#setId">setId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="idClicked">
<db:title>void QButtonGroup::idClicked(int <db:emphasis>id</db:emphasis>)</db:title>
<db:para>This signal is emitted when a button with the given <db:code role="parameter">id</db:code> is clicked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml#checkedButton">checkedButton</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbutton.xml#clicked">QAbstractButton::clicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="idPressed">
<db:title>void QButtonGroup::idPressed(int <db:emphasis>id</db:emphasis>)</db:title>
<db:para>This signal is emitted when a button with the given <db:code role="parameter">id</db:code> is pressed down.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#pressed">QAbstractButton::pressed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="idReleased">
<db:title>void QButtonGroup::idReleased(int <db:emphasis>id</db:emphasis>)</db:title>
<db:para>This signal is emitted when a button with the given <db:code role="parameter">id</db:code> is released.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#released">QAbstractButton::released</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="idToggled">
<db:title>void QButtonGroup::idToggled(int <db:emphasis>id</db:emphasis>, bool <db:emphasis>checked</db:emphasis>)</db:title>
<db:para>This signal is emitted when a button with the given <db:code role="parameter">id</db:code> is toggled. <db:code role="parameter">checked</db:code> is true if the button is checked, or false if the button is unchecked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml#toggled">QAbstractButton::toggled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeButton">
<db:title>void QButtonGroup::removeButton(QAbstractButton *<db:emphasis>button</db:emphasis>)</db:title>
<db:para>Removes the given <db:code role="parameter">button</db:code> from the button group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml#addButton">addButton</db:link>()</db:member>
<db:member><db:link xlink:href="qbuttongroup.xml#buttons">buttons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setId">
<db:title>void QButtonGroup::setId(QAbstractButton *<db:emphasis>button</db:emphasis>, int <db:emphasis>id</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">id</db:code> for the specified <db:code role="parameter">button</db:code>. Note that <db:code role="parameter">id</db:code> cannot be -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml#id">id</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
