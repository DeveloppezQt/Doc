<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMetaSequence Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmetasequence.xml">QMetaSequence</db:link> class allows type erased access to sequential containers.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
<db:para>This class is <db:emphasis>equality-comparable</db:emphasis>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMetaSequence</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmetacontainer.xml" xlink:role="class">QMetaContainer</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMetaSequence is part of <db:simplelist><db:member>objectmodel</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class provides a number of primitive container operations, using void* as operands. This way, you can manipulate a generic container retrieved from a Variant without knowing its type.</db:para>
<db:para>The void* arguments to the various methods are typically created by using a <db:link xlink:href="qvariant.xml">QVariant</db:link> of the respective container or value type, and calling its <db:link xlink:href="qvariant.xml#data">QVariant::data</db:link>() or <db:link xlink:href="qvariant.xml#constData">QVariant::constData</db:link>() methods. However, you can also pass plain pointers to objects of the container or value type.</db:para>
<db:para>Iterator invalidation follows the rules given by the underlying containers and is not expressed in the API. Therefore, for a truly generic container, any iterators should be considered invalid after any write operation.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="addValue">
<db:title>void QMetaSequence::addValue(void *<db:emphasis>container</db:emphasis>, const void *<db:emphasis>value</db:emphasis>) const</db:title>
<db:para>Adds <db:code role="parameter">value</db:code> to the <db:code role="parameter">container</db:code> if possible. If <db:link xlink:href="qmetasequence.xml#canAddValue">canAddValue</db:link>() returns false, the <db:code role="parameter">value</db:code> is not added. Else, if <db:link xlink:href="qmetasequence.xml#canAddValueAtEnd">canAddValueAtEnd</db:link>() returns true, the <db:code role="parameter">value</db:code> is added to the end of the <db:code role="parameter">container</db:code>. Else, if <db:link xlink:href="qmetasequence.xml#canAddValueAtBegin">canAddValueAtBegin</db:link>() returns true, the <db:code role="parameter">value</db:code> is added to the beginning of the container. Else, the value is added in an unspecified place or not at all. The latter is the case for adding values to an unordered container, for example <db:link xlink:href="qset.xml">QSet</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#canAddValue">canAddValue</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canAddValueAtBegin">canAddValueAtBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canAddValueAtEnd">canAddValueAtEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#isSortable">isSortable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#removeValue">removeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addValueAtBegin">
<db:title>void QMetaSequence::addValueAtBegin(void *<db:emphasis>container</db:emphasis>, const void *<db:emphasis>value</db:emphasis>) const</db:title>
<db:para>Adds <db:code role="parameter">value</db:code> to the beginning of <db:code role="parameter">container</db:code> if possible. If <db:link xlink:href="qmetasequence.xml#canAddValueAtBegin">canAddValueAtBegin</db:link>() returns false, the <db:code role="parameter">value</db:code> is not added.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#canAddValueAtBegin">canAddValueAtBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#isSortable">isSortable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#removeValueAtBegin">removeValueAtBegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addValueAtEnd">
<db:title>void QMetaSequence::addValueAtEnd(void *<db:emphasis>container</db:emphasis>, const void *<db:emphasis>value</db:emphasis>) const</db:title>
<db:para>Adds <db:code role="parameter">value</db:code> to the end of <db:code role="parameter">container</db:code> if possible. If <db:link xlink:href="qmetasequence.xml#canAddValueAtEnd">canAddValueAtEnd</db:link>() returns false, the <db:code role="parameter">value</db:code> is not added.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#canAddValueAtEnd">canAddValueAtEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#isSortable">isSortable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#removeValueAtEnd">removeValueAtEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canAddValue">
<db:title>bool QMetaSequence::canAddValue() const</db:title>
<db:para>Returns true if values can be added to the container, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#addValue">addValue</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#isSortable">isSortable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canAddValueAtBegin">
<db:title>bool QMetaSequence::canAddValueAtBegin() const</db:title>
<db:para>Returns true if values added using <db:link xlink:href="qmetasequence.xml#addValue">addValue</db:link>() can be placed at the beginning of the container, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#addValueAtBegin">addValueAtBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canAddValueAtEnd">canAddValueAtEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canAddValueAtEnd">
<db:title>bool QMetaSequence::canAddValueAtEnd() const</db:title>
<db:para>Returns true if values added using <db:link xlink:href="qmetasequence.xml#addValue">addValue</db:link>() can be placed at the end of the container, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#addValueAtEnd">addValueAtEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canAddValueAtBegin">canAddValueAtBegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canEraseRangeAtIterator">
<db:title>bool QMetaSequence::canEraseRangeAtIterator() const</db:title>
<db:para>Returns true if a range between two iterators can be erased from the container, false otherwise.</db:para>
</db:section>
<db:section xml:id="canEraseValueAtIterator">
<db:title>bool QMetaSequence::canEraseValueAtIterator() const</db:title>
<db:para>Returns true if the value pointed to by a non-const iterator can be erased, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#hasIterator">hasIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#eraseValueAtIterator">eraseValueAtIterator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canGetValueAtConstIterator">
<db:title>bool QMetaSequence::canGetValueAtConstIterator() const</db:title>
<db:para>Returns true if the underlying container can retrieve the value pointed to by a const iterator, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#hasConstIterator">hasConstIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#valueAtConstIterator">valueAtConstIterator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canGetValueAtIndex">
<db:title>bool QMetaSequence::canGetValueAtIndex() const</db:title>
<db:para>Returns true if values can be retrieved from the container by index, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#valueAtIndex">valueAtIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canGetValueAtIterator">
<db:title>bool QMetaSequence::canGetValueAtIterator() const</db:title>
<db:para>Returns true if the underlying container can retrieve the value pointed to by a non-const iterator, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#hasIterator">hasIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#valueAtIterator">valueAtIterator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canInsertValueAtIterator">
<db:title>bool QMetaSequence::canInsertValueAtIterator() const</db:title>
<db:para>Returns true if the underlying container can insert a new value, taking the location pointed to by a non-const iterator into account.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#hasIterator">hasIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#insertValueAtIterator">insertValueAtIterator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canRemoveValue">
<db:title>bool QMetaSequence::canRemoveValue() const</db:title>
<db:para>Returns true if values can be removed from the container, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#removeValue">removeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#isSortable">isSortable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canRemoveValueAtBegin">
<db:title>bool QMetaSequence::canRemoveValueAtBegin() const</db:title>
<db:para>Returns true if values can be removed from the beginning of the container using <db:link xlink:href="qmetasequence.xml#removeValue">removeValue</db:link>() can be placed at the, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#removeValueAtBegin">removeValueAtBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canRemoveValueAtEnd">canRemoveValueAtEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canRemoveValueAtEnd">
<db:title>bool QMetaSequence::canRemoveValueAtEnd() const</db:title>
<db:para>Returns true if values can be removed from the end of the container using <db:link xlink:href="qmetasequence.xml#removeValue">removeValue</db:link>() can be placed at the, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#removeValueAtEnd">removeValueAtEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canRemoveValueAtBegin">canRemoveValueAtBegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canSetValueAtIndex">
<db:title>bool QMetaSequence::canSetValueAtIndex() const</db:title>
<db:para>Returns true if an value can be written to the container by index, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#setValueAtIndex">setValueAtIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canSetValueAtIterator">
<db:title>bool QMetaSequence::canSetValueAtIterator() const</db:title>
<db:para>Returns true if the underlying container can write to the value pointed to by a non-const iterator, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#hasIterator">hasIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#setValueAtIterator">setValueAtIterator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="eraseRangeAtIterator">
<db:title>void QMetaSequence::eraseRangeAtIterator(void *<db:emphasis>container</db:emphasis>, const void *<db:emphasis>iterator1</db:emphasis>, const void *<db:emphasis>iterator2</db:emphasis>) const</db:title>
<db:para>Erases the range of values between the iterators <db:code role="parameter">iterator1</db:code> and <db:code role="parameter">iterator2</db:code> from the <db:code role="parameter">container</db:code>, if possible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#canEraseValueAtIterator">canEraseValueAtIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="eraseValueAtIterator">
<db:title>void QMetaSequence::eraseValueAtIterator(void *<db:emphasis>container</db:emphasis>, const void *<db:emphasis>iterator</db:emphasis>) const</db:title>
<db:para>Erases the value pointed to by the non-const <db:code role="parameter">iterator</db:code> from the <db:code role="parameter">container</db:code>, if possible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#canEraseValueAtIterator">canEraseValueAtIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromContainer">
<db:title>[static constexpr, since 6.0] QMetaSequence QMetaSequence::fromContainer()</db:title>
<db:para>Returns the <db:link xlink:href="qmetasequence.xml">QMetaSequence</db:link> corresponding to the type given as template parameter.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="insertValueAtIterator">
<db:title>void QMetaSequence::insertValueAtIterator(void *<db:emphasis>container</db:emphasis>, const void *<db:emphasis>iterator</db:emphasis>, const void *<db:emphasis>value</db:emphasis>) const</db:title>
<db:para>Inserts <db:code role="parameter">value</db:code> into the <db:code role="parameter">container</db:code>, if possible, taking the non-const <db:code role="parameter">iterator</db:code> into account. If <db:link xlink:href="qmetasequence.xml#canInsertValueAtIterator">canInsertValueAtIterator</db:link>() returns false, the <db:code role="parameter">value</db:code> is not inserted. Else if <db:link xlink:href="qmetasequence.xml#isSortable">isSortable</db:link>() returns true, the value is inserted before the value pointed to by <db:code role="parameter">iterator</db:code>. Else, the <db:code role="parameter">value</db:code> is inserted at an unspecified place or not at all. In the latter case, the <db:code role="parameter">iterator</db:code> is taken as a hint. If it points to the correct place for the <db:code role="parameter">value</db:code>, the operation may be faster than a <db:link xlink:href="qmetasequence.xml#addValue">addValue</db:link>() without iterator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#canInsertValueAtIterator">canInsertValueAtIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#isSortable">isSortable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSortable">
<db:title>bool QMetaSequence::isSortable() const</db:title>
<db:para>Returns true if the underlying container is sortable, otherwise returns false. A container is considered sortable if values added to it are placed in a defined location. Inserting into or adding to a sortable container will always succeed. Inserting into or adding to an unsortable container may not succeed, for example if the container is a <db:link xlink:href="qset.xml">QSet</db:link> that already contains the value being inserted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#addValue">addValue</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#insertValueAtIterator">insertValueAtIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canAddValueAtBegin">canAddValueAtBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canAddValueAtEnd">canAddValueAtEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canRemoveValueAtBegin">canRemoveValueAtBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canRemoveValueAtEnd">canRemoveValueAtEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeValue">
<db:title>void QMetaSequence::removeValue(void *<db:emphasis>container</db:emphasis>) const</db:title>
<db:para>Removes an value from the <db:code role="parameter">container</db:code> if possible. If <db:link xlink:href="qmetasequence.xml#canRemoveValue">canRemoveValue</db:link>() returns false, no value is removed. Else, if <db:link xlink:href="qmetasequence.xml#canRemoveValueAtEnd">canRemoveValueAtEnd</db:link>() returns true, the last value in the <db:code role="parameter">container</db:code> is removed. Else, if <db:link xlink:href="qmetasequence.xml#canRemoveValueAtBegin">canRemoveValueAtBegin</db:link>() returns true, the first value in the <db:code role="parameter">container</db:code> is removed. Else, an unspecified value or nothing is removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#canRemoveValue">canRemoveValue</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canRemoveValueAtBegin">canRemoveValueAtBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canRemoveValueAtEnd">canRemoveValueAtEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#isSortable">isSortable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#addValue">addValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeValueAtBegin">
<db:title>void QMetaSequence::removeValueAtBegin(void *<db:emphasis>container</db:emphasis>) const</db:title>
<db:para>Removes a value from the beginning of <db:code role="parameter">container</db:code> if possible. If <db:link xlink:href="qmetasequence.xml#canRemoveValueAtBegin">canRemoveValueAtBegin</db:link>() returns false, the value is not removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#canRemoveValueAtBegin">canRemoveValueAtBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#isSortable">isSortable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#addValueAtBegin">addValueAtBegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeValueAtEnd">
<db:title>void QMetaSequence::removeValueAtEnd(void *<db:emphasis>container</db:emphasis>) const</db:title>
<db:para>Removes a value from the end of <db:code role="parameter">container</db:code> if possible. If <db:link xlink:href="qmetasequence.xml#canRemoveValueAtEnd">canRemoveValueAtEnd</db:link>() returns false, the value is not removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#canRemoveValueAtEnd">canRemoveValueAtEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#isSortable">isSortable</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#addValueAtEnd">addValueAtEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setValueAtIndex">
<db:title>void QMetaSequence::setValueAtIndex(void *<db:emphasis>container</db:emphasis>, qsizetype <db:emphasis>index</db:emphasis>, const void *<db:emphasis>value</db:emphasis>) const</db:title>
<db:para>Overwrites the value at <db:code role="parameter">index</db:code> in the <db:code role="parameter">container</db:code> using the <db:code role="parameter">value</db:code> passed as parameter if that is possible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#valueAtIndex">valueAtIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canSetValueAtIndex">canSetValueAtIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setValueAtIterator">
<db:title>void QMetaSequence::setValueAtIterator(const void *<db:emphasis>iterator</db:emphasis>, const void *<db:emphasis>value</db:emphasis>) const</db:title>
<db:para>Writes <db:code role="parameter">value</db:code> to the value pointed to by the non-const <db:code role="parameter">iterator</db:code>, if possible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#valueAtIterator">valueAtIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canSetValueAtIterator">canSetValueAtIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueAtConstIterator">
<db:title>void QMetaSequence::valueAtConstIterator(const void *<db:emphasis>iterator</db:emphasis>, void *<db:emphasis>result</db:emphasis>) const</db:title>
<db:para>Retrieves the value pointed to by the const <db:code role="parameter">iterator</db:code> and stores it in the memory location pointed to by <db:code role="parameter">result</db:code>, if possible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#canGetValueAtConstIterator">canGetValueAtConstIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueAtIndex">
<db:title>void QMetaSequence::valueAtIndex(const void *<db:emphasis>container</db:emphasis>, qsizetype <db:emphasis>index</db:emphasis>, void *<db:emphasis>result</db:emphasis>) const</db:title>
<db:para>Retrieves the value at <db:code role="parameter">index</db:code> in the <db:code role="parameter">container</db:code> and places it in the memory location pointed to by <db:code role="parameter">result</db:code>, if that is possible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#setValueAtIndex">setValueAtIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canGetValueAtIndex">canGetValueAtIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueAtIterator">
<db:title>void QMetaSequence::valueAtIterator(const void *<db:emphasis>iterator</db:emphasis>, void *<db:emphasis>result</db:emphasis>) const</db:title>
<db:para>Retrieves the value pointed to by the non-const <db:code role="parameter">iterator</db:code> and stores it in the memory location pointed to by <db:code role="parameter">result</db:code>, if possible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetasequence.xml#setValueAtIterator">setValueAtIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetasequence.xml#canGetValueAtIterator">canGetValueAtIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueMetaType">
<db:title>QMetaType QMetaSequence::valueMetaType() const</db:title>
<db:para>Returns the meta type for values stored in the container.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept, since 6.0] bool operator!=(const QMetaSequence &amp;<db:emphasis>lhs</db:emphasis>, const QMetaSequence &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if the <db:link xlink:href="qmetasequence.xml">QMetaSequence</db:link> <db:code role="parameter">lhs</db:code> represents a different container type than the <db:link xlink:href="qmetasequence.xml">QMetaSequence</db:link> <db:code role="parameter">rhs</db:code>, otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept, since 6.0] bool operator==(const QMetaSequence &amp;<db:emphasis>lhs</db:emphasis>, const QMetaSequence &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if the <db:link xlink:href="qmetasequence.xml">QMetaSequence</db:link> <db:code role="parameter">lhs</db:code> represents the same container type as the <db:link xlink:href="qmetasequence.xml">QMetaSequence</db:link> <db:code role="parameter">rhs</db:code>, otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
</db:section>
</db:article>
