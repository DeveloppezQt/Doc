<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Deploying an Application on Android</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="examples-android.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt for Android Examples"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-openssl-support.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Adding OpenSSL Support for Android"/></db:extendedlink>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This article describes the technical steps required to deploy a Qt application to an Android device.</db:para>
<db:section xml:id="android-application-bundle">
<db:title>Android Application Bundle</db:title>
<db:para>Applications on Android can be packaged in two ways; either as Application Package (APK) or Android App Bundle (AAB). Both are ZIP files which follow a predefined directory structure. The difference between the two is that APK files can be deployed and executed on a device, whereas AAB is intended to be interpreted by the Google Play store and is used to generate APK files for different device architectures.</db:para>
<db:para>For testing the application locally, the APK format is the most appropriate, as this can be uploaded directly to the device and run. For distribution to the Google Play store, it is recommended to use AAB instead, which has a similar layout. The added convenience of AAB is that you can include all target ABIs in the same bundle without increasing the size of the actual package downloaded by your users. When using AAB, the Google Play store generates optimized APK packages for the devices issuing the download request and automatically signs them with your publisher key.</db:para>
<db:para>For more information on the AAB format, see <db:link xlink:href="https://developer.android.com/guide/app-bundle">the Android App Bundles</db:link>.</db:para>
<db:para>In either case, the application bundle is generated from a specific directory structure that contains the .so file of your code, as well as all Qt's dependencies needed by your application. In addition, any .jar files, Java code, assets, resources and .xml files are included.</db:para>
<db:section xml:id="generating-the-application-bundle">
<db:title>Generating the Application Bundle</db:title>
<db:para>It is recommended to use Qt Creator or the Makefile created by qmake or CMake to create the application bundle.</db:para>
<db:para>All the steps described here are automatically handled by the build script and the <db:link xlink:href="deployment-android.xml#androiddeployqt">androiddeployqt deployment tool</db:link>, which are run by Qt Creator by default.</db:para>
<db:note>
<db:para>If you prefer building Android packages from the command line, see <db:link xlink:href="deployment-android.xml#building-the-android-application">Building the Android Application</db:link>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="android-package-templates">
<db:title>Android Package Templates</db:title>
<db:para>The default templates used by Qt are found in $Qt_install_dir/src/android/templates. The first step of making a custom package is to copy these files into an empty directory, for example android, under your project. Then, you need to define that path in your project's .pro file, using the variable <db:link xlink:href="qmake-variable-reference.xml#android-package-source-dir">ANDROID_PACKAGE_SOURCE_DIR</db:link>:</db:para>
<db:programlisting language="cpp" role="bad">android {
    ANDROID_PACKAGE_SOURCE_DIR = $$PWD/android

    DISTFILES += \
        android/AndroidManifest.xml \
        android/build.gradle \
        android/res/values/libs.xml
}
</db:programlisting>
<db:para>Qt Creator copies the package templates to your Android build directory (<db:emphasis>$ANDROID_BUILD_DIR=$BUILD_DIR/android-build</db:emphasis>) into your project build directory (<db:emphasis>$BUILD_DIR</db:emphasis>). If you want to build from the command line, use the following after running qmake or CMake:</db:para>
<db:programlisting language="cpp">make -j$(nproc) apk_install_target
</db:programlisting>
<db:para>The previous command copies the application's binaries and resources into the $ANDROID_BUILD_DIR. The build directory acts now as the packaging directory, which the application bundle is created from. The main parts of the package templates are described in the following sections.</db:para>
<db:section xml:id="androidmanifest-xml">
<db:title>AndroidManifest.xml</db:title>
<db:para>The AndroidManifest.xml file gives detailed meta-information about your application. This information is used to customize your application bundle and by the target device to decide which features to enable, the default orientation of the application, and so on. In addition, it's used by the Google Play Store for information on the version code, device support, package name, and lots more.</db:para>
<db:para>For more information about the AndroidManifest.xml, see <db:link xlink:href="http://developer.android.com/guide/topics/manifest/manifest-intro.html">Android Manifest documentation</db:link>.</db:para>
<db:para>The default manifest contains some special parameters used by Qt to set up the application and load all the necessary libraries for Qt. When you are customizing your own Android manifest, make sure that it contains these parameters. For that reason, it's recommended to start with the default templates, then customize on top of that. The <db:link xlink:href="deployment-android.xml#androiddeployqt">androiddeployqt</db:link> tool replaces content in the templates with the correct values. The parts that are filled by <db:link xlink:href="deployment-android.xml#androiddeployqt">androiddeployqt</db:link> have the value as &quot;-- %%INSERT_VALUE%% â€“&quot;, as in:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;meta-data android:name=&quot;android.app.lib_name&quot; android:value=&quot;-- %%INSERT_APP_LIB_NAME%% --&quot;/&amp;gt;
&amp;lt;meta-data android:name=&quot;android.app.qt_sources_resource_id&quot; android:resource=&quot;@array/qt_sources&quot;/&amp;gt;
&amp;lt;meta-data android:name=&quot;android.app.repository&quot; android:value=&quot;default&quot;/&amp;gt;
&amp;lt;meta-data android:name=&quot;android.app.qt_libs_resource_id&quot; android:resource=&quot;@array/qt_libs&quot;/&amp;gt;
&amp;lt;meta-data android:name=&quot;android.app.bundled_libs_resource_id&quot; android:resource=&quot;@array/bundled_libs&quot;/&amp;gt;
&amp;lt;!-- Deploy Qt libs as part of package --&amp;gt;
&amp;lt;meta-data android:name=&quot;android.app.bundle_local_qt_libs&quot; android:value=&quot;-- %%BUNDLE_LOCAL_QT_LIBS%% --&quot;/&amp;gt;

&amp;lt;!-- Run with local libs --&amp;gt;
&amp;lt;meta-data android:name=&quot;android.app.use_local_qt_libs&quot; android:value=&quot;-- %%USE_LOCAL_QT_LIBS%% --&quot;/&amp;gt;
&amp;lt;meta-data android:name=&quot;android.app.libs_prefix&quot; android:value=&quot;/data/local/tmp/qt/&quot;/&amp;gt;
&amp;lt;meta-data android:name=&quot;android.app.load_local_libs_resource_id&quot; android:resource=&quot;@array/load_local_libs&quot;/&amp;gt;
&amp;lt;meta-data android:name=&quot;android.app.load_local_jars&quot; android:value=&quot;-- %%INSERT_LOCAL_JARS%% --&quot;/&amp;gt;
&amp;lt;meta-data android:name=&quot;android.app.static_init_classes&quot; android:value=&quot;-- %%INSERT_INIT_CLASSES%% --&quot;/&amp;gt;
</db:programlisting>
<db:para>The Android Manifest is also used to define <db:link xlink:href="android-services.xml">Android Services</db:link>, and custom <db:link xlink:href="https://developer.android.com/guide/components/activities/intro-activities">Android Activities</db:link>.</db:para>
</db:section>
<db:section xml:id="java-code">
<db:title>Java Code</db:title>
<db:para>Under $Qt_install_dir/src/android/java/src/org/qtproject/qt/android/bindings/ are the files comprising the Java code of the Android application. This Java code is compiled under $ANDROID_BUILD_DIR and added to the application bundle. The regular Android application launcher is a Java process, so Qt applications have a Java-based entry point. The code in here will load the required Qt libraries, based on the meta-information given in Manifest file.</db:para>
<db:para>After loading the libraries, the Java code will call into the application's native main() function on a new thread and the application will launch. At this point, the Java code in the templates is used to delegate events from Android into Qt.</db:para>
<db:para>One thing to note about the files in this directory is that they can contain code specific to certain Android versions. Based on the minimum required Android API level of your application it might be necessary to remove some of this code. This is done automatically by androiddeployqt and Qt Creator during packaging.</db:para>
<db:para>If your minimum Android API level is 20 or lower, the code below is removed before building, since it's not a supported API on Android API level 20. However, if your minimum API level is 21 or higher, it is left in:</db:para>
<db:programlisting language="cpp">//@ANDROID-21
    @Override
    public void onActivityReenter(int resultCode, Intent data)
    {
        // Do something
        return super.onActivityReenter(resultCode, data);
    }
//@ANDROID-21
    </db:programlisting>
</db:section>
<db:section xml:id="resources">
<db:title>Resources</db:title>
<db:para>Under the $Qt_instal_dir/src/android/templates/res/ folder are Android resources that can be accessed from the AndroidManifest.xml and Java code used by all Qt applications.</db:para>
<db:section xml:id="libs-xml">
<db:title>libs.xml</db:title>
<db:para>This file can be found at $Qt_instal_dir/src/android/templates/res/values/libs.xml. One of the files containing meta information about the deployment of the application is libs.xml. It consists of the following values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>bundled_libs: Libraries in the package's library folder which should be loaded on start-up. Library names should be specified without the lib prefix and .so suffix.</db:para>
</db:listitem>
<db:listitem>
<db:para>qt_libs: Qt libraries which should be loaded on start-up. When bundled deployment is used, these are expected to be found inside the APK's library folder.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Ministro is no longer maintained.</db:para>
</db:note>
</db:section>
<db:section xml:id="strings-xml">
<db:title>strings.xml</db:title>
<db:para>This file can be found at $Qt_instal_dir/src/android/java/res/values/strings.xml. The strings.xml file contains strings used by the AndroidManifest.xml and by the deployment mechanisms.</db:para>
<db:para>In particular, the application name and the name of the application binary can be specified here. There are also strings that contain additional libraries that should be loaded and JAR files which should be included in the class path.</db:para>
</db:section>
<db:section xml:id="gradle-files">
<db:title>Gradle Files</db:title>
<db:para>The main Gradle build file can be found at $Qt_instal_dir/src/android/templates/build.gradle. This file is required by the Gradle build system used by Android to generate the application's APK. For more information, see <db:link xlink:href="https://developer.android.com/studio/build#build-files">Android Build Configuration Files</db:link>.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="customizing-the-package-templates">
<db:title>Customizing the Package Templates</db:title>
<db:section xml:id="resources">
<db:title>Resources</db:title>
<db:para>Put any resources used by your application under $ANDROID_PACKAGE_SOURCE_DIR/res/. A typical example of resources customization which should be placed here are the icons used by the application launcher to show your application.</db:para>
</db:section>
<db:section xml:id="custom-java-code">
<db:title>Custom Java Code</db:title>
<db:para>Place any Java code under the path $ANDROID_PACKAGE_SOURCE_DIR/src/. Any code here can be used with your application, for example you can call Java methods from within Qt code. When using Qt Creator, add the Java files to your project using <db:link xlink:href="qmake-variable-reference.xml#distfiles">DISTFILES</db:link>, so they are visible under the project files.</db:para>
</db:section>
<db:section xml:id="assets">
<db:title>Assets</db:title>
<db:para>You can place any assets that are intended to be accessed by Java code under $ANDROID_PACKAGE_SOURCE_DIR/assets/. For more information on using assets with Qt, see <db:link xlink:href="porting-to-android.xml">Porting to Android</db:link>.</db:para>
<db:note>
<db:para>Using <db:link xlink:href="resources.xml">The Qt Resource System</db:link> entails having .qrc files bundled in the .so files which must be unpacked first to be loaded by the linker, while the Android assets are compressed in the <db:emphasis>.apk</db:emphasis> and can be directly used in your application. That means using the Android assets can take up less space, but it's not a cross-platform solution with Qt.</db:para>
</db:note>
</db:section>
<db:section xml:id="android-libraries">
<db:title>Android Libraries</db:title>
<db:para>Under $ANDROID_PACKAGE_SOURCE_DIR/libs in your custom package directory, it's possible to place libraries that should be included in the application bundle. JAR libraries should be placed directly under $ANDROID_PACKAGE_SOURCE_DIR/libs/, while shared libraries should be put in a subdirectory named after the target ABI of the libraries. The supported ABIs are: armeabi-v7a, arm64-v8a, x86, x86_64.</db:para>
<db:para>For more information, see also <db:link xlink:href="android-3rdparty-libs.xml">Third-party Android Libraries</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="building-the-android-application">
<db:title>Building the Android Application</db:title>
<db:para>Starting from Qt 5.14.0, you may use the <db:emphasis>&quot;aab&quot;</db:emphasis> or <db:emphasis>&quot;apk&quot;</db:emphasis> build targets from the Makefile directly to build the application bundle. Use the following command to generate an AAB:</db:para>
<db:programlisting language="cpp" role="bad">make -j$(nproc) aab
</db:programlisting>
<db:para>Or to generate the APK:</db:para>
<db:programlisting language="cpp" role="bad">make -j$(nproc) apk
</db:programlisting>
<db:para>Under the hood, your Qt code is built and copied to the $ANDROID_BUILD_DIR, then <db:link xlink:href="http://www.gradle.org">Gradle</db:link> is used to build the Java code and package the application. If an APK intended for release is built, then it should be signed with jarsigner and aligned with zipalign. For more information on signing the package with Qt Creator, see <db:link xlink:href="http://doc.qt.io/qtcreator/creator-deploying-android.html#signing-android-packages">Signing Android packages</db:link>.</db:para>
</db:section>
<db:section xml:id="androiddeployqt">
<db:title>androiddeployqt</db:title>
<db:para>Building an application package is complex, so Qt comes with a tool which handles the work for you. The steps described in this document so far are handled automatically by this tool. This section describes some of the steps that this tool facilitates.</db:para>
<db:section xml:id="prerequisites-before-running-androiddeployqt">
<db:title>Prerequisites Before Running androiddeployqt</db:title>
<db:para>Before running the tool manually, you need to run qmake or CMake on your project to generate Makefiles and a JSON file (i.e. android-project-deployment-settings.json) containing important settings used by androiddeployqt.</db:para>
<db:note>
<db:para>It is not recommended to modify the androiddeployqt JSON file.</db:para>
</db:note>
<db:para>To prepare the build for androiddeployqt, it is recommended to build your project in a separate directory. Run the following commands:</db:para>
<db:programlisting language="cpp" role="bad">mkdir build-project
cd build-project
~/Qt/5.15.0/android/bin/qmake ../project/project.pro
make -j$(nproc)
make -j$(nproc) apk_install_target
</db:programlisting>
</db:section>
<db:section xml:id="command-line-arguments">
<db:title>Command Line Arguments</db:title>
<db:para>The only required command line argument when running the tool is --output. Other command line arguments are optional but useful. Here's a quick overview. More information is available by passing the --help argument to androiddeployqt.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Argument</db:para>
</db:th>
<db:th>
<db:para>Brief Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>--output &lt;destination&gt;</db:para>
</db:td>
<db:td>
<db:para>Specifies the destination of the final package. Set this to $ANDROID_BUILD_DIR, that is the build directory where you installed your application binaries.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--input &lt;file name&gt;</db:para>
</db:td>
<db:td>
<db:para>This allows you to specify the generated JSON settings file. androiddeployqt will try to guess the file name based on the current working directory.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--aab</db:para>
</db:td>
<db:td>
<db:para>Generate an Android Application Bundle, rather than an APK. Note that this invalidates some of the other arguments, such as --install.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--deployment &lt;mechanism&gt;</db:para>
</db:td>
<db:td>
<db:para>Specify this to pick a different deployment mechanism than the default.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--install</db:para>
</db:td>
<db:td>
<db:para>Specify this to install the finished package on the target device or emulator. Note that if a previous version of the package is already installed, it will be uninstalled first, removing any data it might have stored locally.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--device &lt;ID&gt;</db:para>
</db:td>
<db:td>
<db:para>Specify the ID of the target device or emulator as reported by the adb tool. If an ID is specified, it will be passed to all calls to adb. If it is unspecified, no particular device or emulator will be requested by adb, causing it to pick a default instead.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--android-platform &lt;platform&gt;</db:para>
</db:td>
<db:td>
<db:para>The SDK platform used for building the Java code of the application. By default, the latest available platform is used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--release</db:para>
</db:td>
<db:td>
<db:para>Specify this to create a release package instead of a debug package. With no other arguments, release packages are unsigned and cannot be installed to any device before they have been signed by a private key.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--sign &lt;url&gt; &lt;alias&gt;</db:para>
</db:td>
<db:td>
<db:para>Sign the resulting package. Specifying this also implies --release. The URL of the keystore file and the alias of the key have to be specified. Optionally, set the following environment variables to conceal the signing information QT_ANDROID_KEYSTORE_PATH, QT_ANDROID_KEYSTORE_ALIAS, QT_ANDROID_KEYSTORE_STORE_PASS, and QT_ANDROID_KEYSTORE_KEY_PASS. In addition, there are a number of options that can be specified which are passed through to the jarsigner tool. Pass --help to androiddeployqt for more information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--jdk &lt;path&gt;</db:para>
</db:td>
<db:td>
<db:para>Specify the path to the Java Development Kit. This is only required for signing packages, as it is only used for finding the jarsigner tool. If it is unspecified, then androiddeployqt will attempt to detect jarsigner, either using the JAVA_HOME environment variable, or on the PATH.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--verbose</db:para>
</db:td>
<db:td>
<db:para>Specify this to output more information about what androiddeployqt is doing.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--help</db:para>
</db:td>
<db:td>
<db:para>Prints the help for the tool.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>With a project named project, to directly build the application package with androiddeployqt without deploying it the device, run the following:</db:para>
<db:programlisting language="cpp" role="bad">~/Qt/5.15.0/android/bin/androiddeployqt --input $BUILD_DIR/android-project-deployment-settings.json --output $ANDROID_BUILD_DIR --android-platform android-29 --jdk /usr/lib/jvm/java-8-openjdk-amd64 --gradle
</db:programlisting>
<db:para>To deploy the built package to the device:</db:para>
<db:programlisting language="cpp" role="bad">~/Qt/5.15.0/android/bin/androiddeployqt --verbose --output $ANDROID_BUILD_DIR --no-build --input $BUILD_DIR/android-project-deployment-settings.json --gradle --reinstall --device &amp;lt;adb_device_id&amp;gt;
</db:programlisting>
</db:section>
<db:section xml:id="dependencies-detection">
<db:title>Dependencies Detection</db:title>
<db:para>Qt comes with a number of plugins which are loaded at run-time when they are needed. These can handle anything from connecting to SQL databases to loading specific image formats. Detecting plugin dependencies is impossible as the plugins are loaded at run-time, but androiddeployqt tries to guess such dependencies based on the Qt dependencies of your application. If the plugin has any Qt dependencies which are not also dependencies of your application, it will not be included by default. For instance, in order to ensure that the SVG image format plugin is included, you will need to add <db:link xlink:href="qtsvg-index.xml">Qt SVG</db:link> module to your project for it to become a dependency of your application:</db:para>
<db:programlisting language="cpp" role="bad">QT += svg
</db:programlisting>
<db:para>If you are wondering why a particular plugin is not included automatically, you can run androiddeployqt with the --verbose option to get the list of missing dependencies for each excluded plugin. You can achieve the same in Qt Creator by ticking the <db:guilabel>Verbose output</db:guilabel> check box in the <db:guilabel>Projects</db:guilabel> &gt; <db:guilabel>Build Steps</db:guilabel> &gt; <db:guilabel>Build Android APK</db:guilabel> &gt; <db:guilabel>Advanced Actions</db:guilabel>.</db:para>
<db:para>It's also possible to manually specify the dependencies of your application. For more information, see <db:link xlink:href="qmake-variable-reference.xml#android-deployment-dependencies">ANDROID_DEPLOYMENT_DEPENDENCIES</db:link> qmake variable.</db:para>
</db:section>
</db:section>
<db:section xml:id="android-specific-qmake-variables">
<db:title>Android-specific qmake Variables</db:title>
<db:para>Unless the project has special requirements such as third party libraries, it should be possible to run <db:link xlink:href="deployment-android.xml#androiddeployqt">androiddeployqt</db:link> on it with no modifications and get a working Qt for Android application.</db:para>
<db:para>There are two important environment variables used by Qt:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>ANDROID_SDK_ROOT: specifies the path to the Android SDK used for building the application. The Android SDK contains the build-tools, Android NDK, and Android toolchains.</db:para>
</db:listitem>
<db:listitem>
<db:para>ANDROID_NDK_ROOT: specifies the path to the Android NDK used to build the application. It is not recommended to hard-code this path, since different Qt for Android versions can depend on different Android NDK versions.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Qt Creator sets these variables by default.</db:para>
</db:note>
<db:para>There are a set of qmake variables that can be used to tailor your package. At some point during development, you will most likely want to look into these variables to customize your application.</db:para>
<db:para>Here is a list of some variables that are particularly interesting when making Android applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-package-source-dir">ANDROID_PACKAGE_SOURCE_DIR</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-version-code">ANDROID_VERSION_CODE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-version-name">ANDROID_VERSION_NAME</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-extra-libs">ANDROID_EXTRA_LIBS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-extra-plugins">ANDROID_EXTRA_PLUGINS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-abis">ANDROID_ABIS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-api-version">ANDROID_API_VERSION</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-deployment-dependencies">ANDROID_DEPLOYMENT_DEPENDENCIES</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-min-sdk-version">ANDROID_MIN_SDK_VERSION</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-target-sdk-version">ANDROID_TARGET_SDK_VERSION</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#java-home">JAVA_HOME</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Also, the following qmake variables are primarily useful when writing a Qt module, and not normal applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-bundled-jar-dependencies">ANDROID_BUNDLED_JAR_DEPENDENCIES</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-lib-dependencies">ANDROID_LIB_DEPENDENCIES</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-permissions">ANDROID_PERMISSIONS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-features">ANDROID_FEATURES</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>This list of variables can also be used with CMake.</db:para>
</db:note>
</db:section>
<db:section xml:id="deployment-in-qt-creator">
<db:title>Deployment in Qt Creator</db:title>
<db:para>Qt Creator runs the <db:link xlink:href="deployment-android.xml#androiddeployqt">androiddeployqt</db:link> tool by default, and provides easy and intuitive user interfaces to specify many of the options. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-deploying-android.html">Qt Creator: Deploying Applications to Android Devices</db:link>.</db:para>
</db:section>
</db:article>
