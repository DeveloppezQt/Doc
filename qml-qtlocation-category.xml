<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Category QML Type</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Category type represents a category that a <db:link xlink:href="qml-qtlocation-place.xml">Place</db:link> can be associated with.</db:para>
<db:para>This type was introduced in Qt Location 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtLocation 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt Location 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Category is part of <db:simplelist><db:member>qml-QtLocation5-places</db:member><db:member>qml-QtLocation5-places-data</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Categories are used to search for places based on the categories they are associated with. The list of available categories can be obtained from the <db:link xlink:href="qml-qtlocation-categorymodel.xml">CategoryModel</db:link>. The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> has a <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#categories-prop">categories</db:link> property that is used to limit the search results to places with the specified categories.</db:para>
<db:para>If the <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> supports it, categories can be created or removed. To create a new category construct a new Category object and set its properties, then invoke the <db:link xlink:href="qml-qtlocation-category.xml#save-method">save</db:link>() method.</db:para>
<db:programlisting language="qml">import QtPositioning 5.5
import QtLocation 5.6

Category {
    id: category

    plugin: myPlugin
    name: &quot;New Category&quot;
    visibility: Category.PrivateVisibility
}
...
category.save();
</db:programlisting>
<db:para>To remove a category ensure that the <db:link xlink:href="qml-qtlocation-category.xml#plugin-prop">plugin</db:link> and <db:link xlink:href="qml-qtlocation-category.xml#categoryId-prop">categoryId</db:link> properties are set and call the <db:link xlink:href="qml-qtlocation-category.xml#remove-method">remove</db:link>() method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-categorymodel.xml">CategoryModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="category-prop">
<db:title>category : QPlaceCategory</db:title>
<db:para>For details on how to use this property to interface between C++ and QML see &quot;<db:link xlink:href="location-cpp-qml.xml#category-qplacecategory">Interfaces between C++ and QML Code</db:link>&quot;.</db:para>
</db:section>
<db:section xml:id="categoryId-prop">
<db:title>categoryId : string</db:title>
<db:para>This property holds the identifier of the category. The categoryId is a string which uniquely identifies this category within the categories <db:link xlink:href="qml-qtlocation-category.xml#plugin-prop">plugin</db:link>.</db:para>
</db:section>
<db:section xml:id="icon-prop">
<db:title>icon : PlaceIcon</db:title>
<db:para>This property holds the image source associated with the category. To display the icon you can use the <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> type.</db:para>
</db:section>
<db:section xml:id="name-prop">
<db:title>name : string</db:title>
<db:para>This property holds string based name of the category.</db:para>
</db:section>
<db:section xml:id="plugin-prop">
<db:title>plugin : Plugin</db:title>
<db:para>This property holds the location based service to which the category belongs.</db:para>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : enumeration</db:title>
<db:para>This property holds the status of the category. It can be one of:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Category.Ready</db:para>
</db:td>
<db:td>
<db:para>No error occurred during the last operation, further operations may be performed on the category.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Category.Saving</db:para>
</db:td>
<db:td>
<db:para>The category is currently being saved, no other operations may be performed until the current operation completes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Category.Removing</db:para>
</db:td>
<db:td>
<db:para>The category is currently being removed, no other operations can be performed until the current operation completes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Category.Error</db:para>
</db:td>
<db:td>
<db:para>An error occurred during the last operation, further operations can still be performed on the category.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="visibility-prop">
<db:title>visibility : enumeration</db:title>
<db:para>This property holds the visibility of the category. It can be one of:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Category.UnspecifiedVisibility</db:para>
</db:td>
<db:td>
<db:para>The visibility of the category is unspecified. If saving a category, the plugin will automatically set a default visibility to the category saved in the backend. This default is dependent on the plugin implementation.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Category.DeviceVisibility</db:para>
</db:td>
<db:td>
<db:para>The category is limited to the current device. The category will not be transferred off of the device.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Category.PrivateVisibility</db:para>
</db:td>
<db:td>
<db:para>The category is private to the current user. The category may be transferred to an online service but is only ever visible to the current user.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Category.PublicVisibility</db:para>
</db:td>
<db:td>
<db:para>The category is public.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that visibility does not affect how <db:link xlink:href="qml-qtlocation-place.xml">Place</db:link>s associated with the category are displayed in the user-interface of an application on the device. Instead, it defines the sharing semantics of the category.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="errorString-method">
<db:title>string errorString()</db:title>
<db:para>Returns a string description of the error of the last operation. If the last operation completed successfully then the string is empty.</db:para>
</db:section>
<db:section xml:id="remove-method">
<db:title>void remove()</db:title>
<db:para>This method permanently removes the category from the backend service.</db:para>
</db:section>
<db:section xml:id="save-method">
<db:title>void save()</db:title>
<db:para>This method saves the category to the backend service.</db:para>
</db:section>
</db:section>
</db:article>
