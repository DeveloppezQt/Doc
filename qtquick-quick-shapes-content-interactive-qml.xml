<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Shapes</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt Quick example demonstrating the use of shape items.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtQuick module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.9
import QtQuick.Shapes 1.0

Rectangle {
    id: root
    width: 1024
    height: 768

    property color col: &quot;lightsteelblue&quot;
    gradient: Gradient {
        GradientStop { position: 0.0; color: Qt.tint(root.col, &quot;#20FFFFFF&quot;) }
        GradientStop { position: 0.1; color: Qt.tint(root.col, &quot;#20AAAAAA&quot;) }
        GradientStop { position: 0.9; color: Qt.tint(root.col, &quot;#20666666&quot;) }
        GradientStop { position: 1.0; color: Qt.tint(root.col, &quot;#20000000&quot;) }
    }

    property int mode: 0
    property bool showResizers: true
    property bool fill: false

    Row {
        x: 20
        y: 10
        spacing: 20
        Rectangle {
            border.color: &quot;black&quot;
            color: root.mode === 0 ? &quot;red&quot; : &quot;transparent&quot;
            width: 100
            height: 40
            Text {
                anchors.centerIn: parent
                text: &quot;Line&quot;
            }
            MouseArea {
                anchors.fill: parent
                onClicked: root.mode = 0
            }
        }
        Rectangle {
            border.color: &quot;black&quot;
            color: root.mode === 1 ? &quot;red&quot; : &quot;transparent&quot;
            width: 100
            height: 40
            Text {
                anchors.centerIn: parent
                text: &quot;Cubic&quot;
            }
            MouseArea {
                anchors.fill: parent
                onClicked: root.mode = 1
            }
        }
        Rectangle {
            border.color: &quot;black&quot;
            color: root.mode === 2 ? &quot;red&quot; : &quot;transparent&quot;
            width: 100
            height: 40
            Text {
                anchors.centerIn: parent
                text: &quot;Quadratic&quot;
            }
            MouseArea {
                anchors.fill: parent
                onClicked: root.mode = 2
            }
        }

        Slider {
            id: widthSlider
            name: &quot;Width&quot;
            min: 1
            max: 60
            init: 4
        }

        Rectangle {
            border.color: &quot;black&quot;
            color: root.showResizers ? &quot;yellow&quot; : &quot;transparent&quot;
            width: 50
            height: 40
            Text {
                anchors.centerIn: parent
                text: &quot;Manip&quot;
            }
            MouseArea {
                anchors.fill: parent
                onClicked: {
                    root.showResizers = !root.showResizers;
                    for (var i = 0; i &amp;lt; canvas.resizers.length; ++i)
                        canvas.resizers[i].visible = root.showResizers;
                }
            }
        }

        Rectangle {
            border.color: &quot;black&quot;
            color: root.fill ? &quot;yellow&quot; : &quot;transparent&quot;
            width: 50
            height: 40
            Text {
                anchors.centerIn: parent
                text: &quot;Fill&quot;
            }
            MouseArea {
                anchors.fill: parent
                onClicked: root.fill = !root.fill
            }
        }
    }

    Rectangle {
        id: canvas
        width: root.width - 40
        height: root.height - 120
        x: 20
        y: 100

        property variant activePath: null

        property variant resizers: []
        property variant funcs

        function genResizer(obj, x, y, xprop, yprop, color) {
            var ma = Qt.createQmlObject('import QtQuick 2.9; import QtQuick.Shapes 1.0; Rectangle { id: rr; property variant obj; color: &quot;' + color + '&quot;; width: 20; height: 20;'+
                                         'MouseArea { anchors.fill: parent; hoverEnabled: true;' +
                                         'onEntered: color = &quot;yellow&quot;; onExited: color = &quot;' + color + '&quot;;' +
                                         'property bool a: false; onPressed: a = true; onReleased: a = false; ' +
                                         'onPositionChanged: if (a) { var pt = mapToItem(rr.parent, mouse.x, mouse.y);' +
                                         'obj.' + xprop + ' = pt.x; obj.' + yprop + ' = pt.y; rr.x = pt.x - 10; rr.y = pt.y - 10; } } }',
                                         canvas, &quot;resizer_item&quot;);
            ma.visible = root.showResizers;
            ma.obj = obj;
            ma.x = x - 10;
            ma.y = y - 10;
            resizers.push(ma);
            return ma;
        }

        Component.onCompleted: {
            funcs = [
                        { &quot;start&quot;: function(x, y) {
                            var p = Qt.createQmlObject('import QtQuick 2.9; import QtQuick.Shapes 1.0; ShapePath {' +
                                                       'strokeColor: &quot;black&quot;; fillColor: &quot;transparent&quot;;'+
                                                       'strokeWidth: ' + widthSlider.value + ';' +
                                                       'startX: ' + x + '; startY: ' + y + ';' +
                                                       'PathLine { x: ' + x + ' + 1; y: ' + y + ' + 1 } }',
                                                       root, &quot;dynamic_visual_path&quot;);
                            shape.data.push(p);
                            activePath = p;
                        }, &quot;move&quot;: function(x, y) {
                            if (!activePath)
                                return;
                            var pathObj = activePath.pathElements[0];
                            pathObj.x = x;
                            pathObj.y = y;
                        }, &quot;end&quot;: function() {
                            canvas.genResizer(activePath, activePath.startX, activePath.startY, &quot;startX&quot;, &quot;startY&quot;, &quot;red&quot;);
                            var pathObj = activePath.pathElements[0];
                            canvas.genResizer(pathObj, pathObj.x, pathObj.y, &quot;x&quot;, &quot;y&quot;, &quot;red&quot;);
                            activePath = null;
                        }
                        },
                        { &quot;start&quot;: function(x, y) {
                            var p = Qt.createQmlObject('import QtQuick 2.9; import QtQuick.Shapes 1.0; ShapePath {' +
                                                       'strokeColor: &quot;black&quot;; fillColor: &quot;' + (root.fill ? 'green' : 'transparent') + '&quot;;'+
                                                       'strokeWidth: ' + widthSlider.value + ';' +
                                                       'startX: ' + x + '; startY: ' + y + ';' +
                                                       'PathCubic { x: ' + x + ' + 1; y: ' + y + ' + 1;' +
                                                       'control1X: ' + x + ' + 50; control1Y: ' + y + ' + 50; control2X: ' + x + ' + 150; control2Y: ' + y + ' + 50; } }',
                                                       root, &quot;dynamic_visual_path&quot;);
                            shape.data.push(p);
                            activePath = p;
                        }, &quot;move&quot;: function(x, y) {
                            if (!activePath)
                                return;
                            var pathObj = activePath.pathElements[0];
                            pathObj.x = x;
                            pathObj.y = y;
                        }, &quot;end&quot;: function() {
                            canvas.genResizer(activePath, activePath.startX, activePath.startY, &quot;startX&quot;, &quot;startY&quot;, &quot;red&quot;);
                            var pathObj = activePath.pathElements[0];
                            canvas.genResizer(pathObj, pathObj.x, pathObj.y, &quot;x&quot;, &quot;y&quot;, &quot;red&quot;);
                            canvas.genResizer(pathObj, pathObj.control1X, pathObj.control1Y, &quot;control1X&quot;, &quot;control1Y&quot;, &quot;blue&quot;);
                            canvas.genResizer(pathObj, pathObj.control2X, pathObj.control2Y, &quot;control2X&quot;, &quot;control2Y&quot;, &quot;lightBlue&quot;);
                            activePath = null;
                        }
                        },
                        { &quot;start&quot;: function(x, y) {
                            var p = Qt.createQmlObject('import QtQuick 2.9; import QtQuick.Shapes 1.0; ShapePath {' +
                                                       'strokeColor: &quot;black&quot;; fillColor: &quot;' + (root.fill ? 'green' : 'transparent') + '&quot;;'+
                                                       'strokeWidth: ' + widthSlider.value + ';' +
                                                       'startX: ' + x + '; startY: ' + y + ';' +
                                                       'PathQuad { x: ' + x + ' + 1; y: ' + y + ' + 1;' +
                                                       'controlX: ' + x + ' + 50; controlY: ' + y + ' + 50 } }',
                                                       root, &quot;dynamic_visual_path&quot;);
                            shape.data.push(p);
                            activePath = p;
                        }, &quot;move&quot;: function(x, y) {
                            if (!activePath)
                                return;
                            var pathObj = activePath.pathElements[0];
                            pathObj.x = x;
                            pathObj.y = y;
                        }, &quot;end&quot;: function() {
                            canvas.genResizer(activePath, activePath.startX, activePath.startY, &quot;startX&quot;, &quot;startY&quot;, &quot;red&quot;);
                            var pathObj = activePath.pathElements[0];
                            canvas.genResizer(pathObj, pathObj.x, pathObj.y, &quot;x&quot;, &quot;y&quot;, &quot;red&quot;);
                            canvas.genResizer(pathObj, pathObj.controlX, pathObj.controlY, &quot;controlX&quot;, &quot;controlY&quot;, &quot;blue&quot;);
                            activePath = null;
                        }
                        }
                    ];
        }

        MouseArea {
            anchors.fill: parent
            onPressed: {
                canvas.funcs[root.mode].start(mouse.x, mouse.y);
            }
            onPositionChanged: {
                canvas.funcs[root.mode].move(mouse.x, mouse.y);
            }
            onReleased: {
                canvas.funcs[root.mode].end();
            }
        }

        Shape {
            id: shape
            anchors.fill: parent

            data: []
        }
    }
}

</db:programlisting>
</db:article>
