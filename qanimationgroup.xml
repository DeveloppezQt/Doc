<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAnimationGroup Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link> class is an abstract base class for groups of animations.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAnimationGroup</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractanimation.xml" xlink:role="class">QAbstractAnimation</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qparallelanimationgroup.xml" xlink:role="class">QParallelAnimationGroup</db:link> and <db:link xlink:href="qsequentialanimationgroup.xml" xlink:role="class">QSequentialAnimationGroup</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAnimationGroup is part of <db:simplelist><db:member><db:link xlink:href="animation.xml">Animation Framework</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An animation group is a container for animations (subclasses of <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link>). A group is usually responsible for managing the <db:link xlink:href="qabstractanimation.xml#State-enum">state</db:link> of its animations, i.e., it decides when to start, stop, resume, and pause them. Currently, Qt provides two such groups: <db:link xlink:href="qparallelanimationgroup.xml">QParallelAnimationGroup</db:link> and <db:link xlink:href="qsequentialanimationgroup.xml">QSequentialAnimationGroup</db:link>. Look up their class descriptions for details.</db:para>
<db:para>Since <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link> inherits from <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link>, you can combine groups, and easily construct complex animation graphs. You can query <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> for the group it belongs to (using the <db:link xlink:href="qabstractanimation.xml#group">group</db:link>() function).</db:para>
<db:para>To start a top-level animation group, you simply use the <db:link xlink:href="qabstractanimation.xml#start">start</db:link>() function from <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link>. By a top-level animation group, we think of a group that itself is not contained within another group. Starting sub groups directly is not supported, and may lead to unexpected behavior.</db:para>
<db:para><db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link> provides methods for adding and retrieving animations. Besides that, you can remove animations by calling <db:link xlink:href="qanimationgroup.xml#removeAnimation">removeAnimation</db:link>(), and clear the animation group by calling <db:link xlink:href="qanimationgroup.xml#clear">clear</db:link>(). You may keep track of changes in the group's animations by listening to <db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildAdded</db:link> and <db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildRemoved</db:link> events.</db:para>
<db:para><db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link> takes ownership of the animations it manages, and ensures that they are deleted when the animation group is deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link></db:member>
<db:member><db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link></db:member>
<db:member><db:link xlink:href="animation-overview.xml">The Animation Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAnimationGroup">
<db:title>QAnimationGroup::QAnimationGroup(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAnimationGroup</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnimationGroup(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link>. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QAnimationGroup">
<db:title>[virtual] QAnimationGroup::~QAnimationGroup()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAnimationGroup</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAnimationGroup()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the animation group. It will also destroy all its animations.</db:para>
</db:section>
<db:section xml:id="addAnimation">
<db:title>void QAnimationGroup::addAnimation(QAbstractAnimation *<db:emphasis>animation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addAnimation</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation *</db:type>
<db:parameter>animation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addAnimation(QAbstractAnimation *animation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">animation</db:code> to this group. This will call <db:link xlink:href="qanimationgroup.xml#insertAnimation">insertAnimation</db:link> with index equals to <db:link xlink:href="qanimationgroup.xml#animationCount">animationCount</db:link>().</db:para>
<db:note>
<db:para>The group takes ownership of the animation.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanimationgroup.xml#removeAnimation">removeAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="animationAt">
<db:title>QAbstractAnimation *QAnimationGroup::animationAt(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractAnimation *</db:type>
<db:methodname>animationAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractAnimation * animationAt(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the animation at <db:code role="parameter">index</db:code> in this group. This function is useful when you need access to a particular animation. <db:code role="parameter">index</db:code> is between 0 and <db:link xlink:href="qanimationgroup.xml#animationCount">animationCount</db:link>() - 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanimationgroup.xml#animationCount">animationCount</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#indexOfAnimation">indexOfAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="animationCount">
<db:title>int QAnimationGroup::animationCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>animationCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int animationCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of animations managed by this group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanimationgroup.xml#indexOfAnimation">indexOfAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#addAnimation">addAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#animationAt">animationAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QAnimationGroup::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes and deletes all animations in this animation group, and resets the current time to 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanimationgroup.xml#addAnimation">addAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#removeAnimation">removeAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAnimationGroup::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractanimation.xml#event" role="function">QAbstractAnimation::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="indexOfAnimation">
<db:title>int QAnimationGroup::indexOfAnimation(QAbstractAnimation *<db:emphasis>animation</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOfAnimation</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation *</db:type>
<db:parameter>animation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOfAnimation(QAbstractAnimation *animation) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of <db:code role="parameter">animation</db:code>. The returned index can be passed to the other functions that take an index as an argument.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanimationgroup.xml#insertAnimation">insertAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#animationAt">animationAt</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#takeAnimation">takeAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertAnimation">
<db:title>void QAnimationGroup::insertAnimation(int <db:emphasis>index</db:emphasis>, QAbstractAnimation *<db:emphasis>animation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertAnimation</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractAnimation *</db:type>
<db:parameter>animation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertAnimation(int index, QAbstractAnimation *animation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts <db:code role="parameter">animation</db:code> into this animation group at <db:code role="parameter">index</db:code>. If <db:code role="parameter">index</db:code> is 0 the animation is inserted at the beginning. If <db:code role="parameter">index</db:code> is <db:link xlink:href="qanimationgroup.xml#animationCount">animationCount</db:link>(), the animation is inserted at the end.</db:para>
<db:note>
<db:para>The group takes ownership of the animation.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanimationgroup.xml#takeAnimation">takeAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#addAnimation">addAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#indexOfAnimation">indexOfAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#removeAnimation">removeAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAnimation">
<db:title>void QAnimationGroup::removeAnimation(QAbstractAnimation *<db:emphasis>animation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeAnimation</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation *</db:type>
<db:parameter>animation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeAnimation(QAbstractAnimation *animation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">animation</db:code> from this group. The ownership of <db:code role="parameter">animation</db:code> is transferred to the caller.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanimationgroup.xml#takeAnimation">takeAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#insertAnimation">insertAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#addAnimation">addAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeAnimation">
<db:title>QAbstractAnimation *QAnimationGroup::takeAnimation(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAbstractAnimation *</db:type>
<db:methodname>takeAnimation</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractAnimation * takeAnimation(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the animation at <db:code role="parameter">index</db:code> and removes it from the animation group.</db:para>
<db:note>
<db:para>The ownership of the animation is transferred to the caller.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanimationgroup.xml#removeAnimation">removeAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#addAnimation">addAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#insertAnimation">insertAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#indexOfAnimation">indexOfAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
