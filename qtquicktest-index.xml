<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Test</db:title>
<db:productname>QtQmlTest</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Test Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Unit testing framework for QML.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="introduction-to-qt-quick-test"/>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para><db:link xlink:href="qttest-qmlmodule.xml">Qt Quick Test</db:link> is a unit test framework for QML applications. Test cases are written as JavaScript functions within a <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type:</db:para>
<db:programlisting language="qml">import QtQuick 2.3
import QtTest 1.0

TestCase {
    name: &quot;MathTests&quot;

    function test_math() {
        compare(2 + 2, 4, &quot;2 + 2 = 4&quot;)
    }

    function test_fail() {
        compare(2 + 2, 5, &quot;2 + 2 = 5&quot;)
    }
}
</db:programlisting>
<db:para>Functions whose names start with <db:code>test_</db:code> are treated as test cases to be executed. See the documentation for the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> and <db:link xlink:href="qml-qttest-signalspy.xml">SignalSpy</db:link> types for more information on writing test cases.</db:para>
<db:note>
<db:para>There is no binary compatibility guarantee for the Qt Quick Test module. This means that an application that uses Qt Quick Test is only guaranteed to work with the Qt version it was developed against. However, source compatibility is guaranteed.</db:para>
</db:note>
</db:section>
<db:section xml:id="using-the-module">
<db:title>Using the Module</db:title>
<db:section xml:id="qml-api">
<db:title>QML API</db:title>
<db:para>The QML types in Qt Quick Test are available through the <db:code>QtTest</db:code> import. To use the types, add the following import statement to your .qml file:</db:para>
<db:programlisting language="qml">import QtTest
</db:programlisting>
</db:section>
<db:section xml:id="c-api">
<db:title>C++ API</db:title>
<db:para>Using the <db:link xlink:href="qtquicktest-module.xml">C++ API</db:link> requires linking against the module library, either directly or through other dependencies. Several build tools have dedicated support for this, including <db:link xlink:href="https://cmake.org/cmake/help/latest/">CMake</db:link> and <db:link xlink:href="qmake-manual.xml">qmake</db:link>.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Use the <db:code>find_package()</db:code> command to locate the needed module components in the Qt6 package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS QuickTest)
target_link_libraries(mytarget PRIVATE Qt6::QuickTest)
</db:programlisting>
<db:para>See also the <db:link xlink:href="cmake-manual.xml">Build with CMake</db:link> overview.</db:para>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>There are two ways to link against the corresponding C++ library. If your test project uses a QML <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link>, you should already have the following line in your project file:</db:para>
<db:programlisting language="cpp" role="bad">CONFIG += qmltestcase
</db:programlisting>
<db:para>This will cause the test to link to the C++ QtQuickTest library.</db:para>
<db:para>If you have a C++-only test project, you can add the following line to your project file:</db:para>
<db:programlisting language="cpp" role="bad">QT += qmltest
</db:programlisting>
<db:anchor xml:id="running-qt-quick-tests"/>
</db:section>
</db:section>
</db:section>
<db:section xml:id="running-tests">
<db:title>Running Tests</db:title>
<db:para>Test cases are launched by a C++ harness that consists of the following code:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtQuickTest&amp;gt;
QUICK_TEST_MAIN(example)
</db:programlisting>
<db:para>Where &quot;example&quot; is the identifier to use to uniquely identify this set of tests.</db:para>
</db:section>
<db:section xml:id="using-cmake">
<db:title>Using CMake</db:title>
<db:para>Configure your CMakeLists.txt file and build your project using your favorite generator.</db:para>
<db:programlisting language="cpp" role="bad">cmake_minimum_required(VERSION 3.2)

project(tst_example LANGUAGES CXX)

enable_testing()

find_package(Qt6 REQUIRED COMPONENTS QuickTest Qml)

#[[The test harness scans the specified source directory recursively
for &quot;tst_*.qml&quot; files. By default, it looks in the current directory,
which is usually where the executable is. This command makes it look
in the project's source directory instead.]]
add_definitions(-DQUICK_TEST_SOURCE_DIR=&quot;${CMAKE_CURRENT_SOURCE_DIR}&quot;)

qt_standard_project_setup(REQUIRES 6.6)

add_executable(tst_example tst_example.cpp)

add_test(NAME tst_example COMMAND tst_example)

target_link_libraries(tst_example
    PRIVATE
    Qt6::QuickTest
    Qt6::Qml
)
</db:programlisting>
</db:section>
<db:section xml:id="using-qmake">
<db:title>Using qmake</db:title>
<db:para>Add <db:code>CONFIG += qmltestcase</db:code> to your project file:</db:para>
<db:programlisting language="cpp" role="bad">TEMPLATE = app
TARGET = tst_example
CONFIG += warn_on qmltestcase
SOURCES += tst_example.cpp
</db:programlisting>
<db:para>If <db:code>IMPORTPATH</db:code> is specified in your .pro file, each import path added to <db:code>IMPORTPATH</db:code> will be passed as a command-line argument when the test is run using &quot;make check&quot;:</db:para>
<db:programlisting language="cpp" role="bad">IMPORTPATH += $$PWD/../imports/my_module1 $$PWD/../imports/my_module2
</db:programlisting>
<db:para>The test harness scans the specified source directory recursively for &quot;tst_*.qml&quot; files. If <db:code>QUICK_TEST_SOURCE_DIR</db:code> is not defined, then the current directory will be scanned when the harness is run. Other *.qml files may appear for auxillary QML components that are used by the test.</db:para>
<db:para>The <db:code>-input</db:code> command-line option can be set at runtime to run test cases from a different directory. This may be needed to run tests on a target device where the compiled-in directory name refers to a host. For example:</db:para>
<db:programlisting language="cpp" role="bad">tst_example -input /mnt/SDCard/qmltests
</db:programlisting>
<db:para>It is also possible to run a single file using the <db:code>-input</db:code> option. For example:</db:para>
<db:programlisting language="cpp" role="bad">tst_example -input data/test.qml
</db:programlisting>
<db:programlisting language="cpp" role="bad">tst_example -input &amp;lt;full_path&amp;gt;/test.qml
</db:programlisting>
<db:note>
<db:para>Specifying the full path to the qml test file is for example needed for shadow builds.</db:para>
</db:note>
<db:para>If your test case needs QML imports, then you can add them as <db:code>-import</db:code> options to the test program command-line.</db:para>
<db:para>The <db:code>-functions</db:code> command-line option will return a list of the current tests functions. It is possible to run a single test function using the name of the test function as an argument. For example:</db:para>
<db:programlisting language="cpp" role="bad">tst_example Test_Name::function1
</db:programlisting>
<db:para>The <db:code>-help</db:code> command-line option will return all the options available.</db:para>
<db:programlisting language="cpp" role="bad">tst_example -help
</db:programlisting>
<db:note>
<db:para>Running a Qt Quick test case will always show a window on the screen, even if the test code doesn't involve any Quick UI. To avoid that, run the test executable with <db:code>-platform offscreen</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="executing-c-before-qml-tests">
<db:title>Executing C++ Before QML Tests</db:title>
<db:para>To execute C++ code before any of the QML tests are run, the <db:link xlink:href="qquicktest.xml#QUICK_TEST_MAIN_WITH_SETUP">QUICK_TEST_MAIN_WITH_SETUP</db:link> macro can be used. This can be useful for setting context properties on the QML engine, amongst other things.</db:para>
<db:para>The macro is identical to <db:code>QUICK_TEST_MAIN</db:code>, except that it takes an additional type argument. The test framework will call slots and invokable functions with the following names:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Name</db:para>
</db:th>
<db:th>
<db:para>Purpose</db:para>
</db:th>
<db:th>
<db:para>Since</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>void applicationAvailable()</db:code></db:para>
</db:td>
<db:td>
<db:para>Called right after the <db:link xlink:href="qapplication.xml">QApplication</db:link> object was instantiated. Use this function to perform setup that does not require a <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> instance.</db:para>
</db:td>
<db:td>
<db:para>Qt 5.12</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>void qmlEngineAvailable(QQmlEngine *)</db:code></db:para>
</db:td>
<db:td>
<db:para>Called when the QML engine is available. Any <db:link xlink:href="qqmlengine.xml#addImportPath">import paths</db:link>, <db:link xlink:href="qqmlengine.xml#addPluginPath">plugin paths</db:link>, and <db:link xlink:href="qqmlfileselector.xml#setExtraSelectors">extra file selectors</db:link> will have been set on the engine by this point.</db:para>
<db:para>This function is called once for each QML test file, so any arguments are unique to that test. For example, this means that each QML test file will have its own QML engine.</db:para>
<db:para>This function can be used to <db:link xlink:href="qtqml-cppintegration-overview.xml#choosing-the-correct-integration-method-between-c-and-qml">register QML types</db:link> and <db:link xlink:href="qqmlengine.xml#addImportPath">add import paths</db:link>, amongst other things.</db:para>
</db:td>
<db:td>
<db:para>Qt 5.11</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>void cleanupTestCase()</db:code></db:para>
</db:td>
<db:td>
<db:para>Called right after the test execution has finished. Use this function to clean up before everything will start to be destructed.</db:para>
</db:td>
<db:td>
<db:para>Qt 5.12</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following example demonstrates how the macro can be used to set context properties on the QML engine:</db:para>
<db:programlisting language="cpp">// src_qmltest_qquicktest.cpp
#include &amp;lt;QtQuickTest&amp;gt;
#include &amp;lt;QQmlEngine&amp;gt;
#include &amp;lt;QQmlContext&amp;gt;
#include &amp;lt;QGuiApplication&amp;gt;

class Setup : public QObject
{
    Q_OBJECT

public:
    Setup() {}

public slots:
    void applicationAvailable()
    {
        // Initialization that only requires the QGuiApplication object to be available
    }

    void qmlEngineAvailable(QQmlEngine *engine)
    {
        // Initialization requiring the QQmlEngine to be constructed
        engine-&amp;gt;rootContext()-&amp;gt;setContextProperty(&quot;myContextProperty&quot;, QVariant(true));
    }

    void cleanupTestCase()
    {
        // Implement custom resource cleanup
    }
};

QUICK_TEST_MAIN_WITH_SETUP(mytest, Setup)

#include &quot;src_qmltest_qquicktest.moc&quot;
</db:programlisting>
<db:para>The <db:code>.moc</db:code> include is based on the file name of the <db:code>.cpp</db:code> file. For example, in the example above, the <db:code>.cpp</db:code> file is named <db:code>src_qmltest_qquicktest.cpp</db:code>. If the file was named <db:code>MyTest.cpp</db:code>, the include would be:</db:para>
<db:programlisting language="cpp">#include &quot;MyTest.moc&quot;
</db:programlisting>
</db:section>
<db:section xml:id="reference">
<db:title>Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qttest-qmlmodule.xml">QML Types</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquicktest-module.xml">C++ API</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="licenses">
<db:title>Licenses</db:title>
<db:para>Qt Quick Tests is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under free software licenses. Since Qt 5.4, these free software licenses are <db:link xlink:href="http://www.gnu.org/licenses/lgpl-3.0.html">GNU Lesser General Public License, version 3</db:link>, or the <db:link xlink:href="http://www.gnu.org/licenses/gpl-2.0.html">GNU General Public License, version 2</db:link>. See <db:link xlink:href="licensing.xml">Qt Licensing</db:link> for further details.</db:para>
</db:section>
</db:article>
