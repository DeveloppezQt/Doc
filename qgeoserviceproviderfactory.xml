<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoServiceProviderFactory Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeoserviceproviderfactory.xml">QGeoServiceProviderFactory</db:link> class is a factory class used as the plugin interface for services related to geographical information.</db:para>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoServiceProviderFactory</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoServiceProviderFactory is part of <db:simplelist><db:member>QtLocation-impl</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:note>
<db:para>There are no source or binary compatibility guarantees for the backend classes. The API is only guaranteed to work with the Qt version it was developed against. API changes will however only be made in minor releases. (6.6, 6.7, and so on.)</db:para>
</db:note>
<db:para>Implementers must provide a unique combination of providerName() and providerVersion() per plugin.</db:para>
<db:para>The other functions should be overridden if the plugin supports the associated set of functionality.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QGeoServiceProviderFactory">
<db:title>[virtual] QGeoServiceProviderFactory::~QGeoServiceProviderFactory()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGeoServiceProviderFactory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGeoServiceProviderFactory()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qgeoserviceproviderfactory.xml" role="deprecated">QGeoServiceProviderFactory</db:link> instance.</db:para>
</db:section>
<db:section xml:id="createGeocodingManagerEngine">
<db:title>[virtual] QGeoCodingManagerEngine *QGeoServiceProviderFactory::createGeocodingManagerEngine(const QVariantMap &amp;<db:emphasis>parameters</db:emphasis>, QGeoServiceProvider::Error *<db:emphasis>error</db:emphasis>, QString *<db:emphasis>errorString</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QGeoCodingManagerEngine *</db:type>
<db:methodname>createGeocodingManagerEngine</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGeoServiceProvider::Error *</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>errorString</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCodingManagerEngine * createGeocodingManagerEngine(const QVariantMap &amp;parameters, QGeoServiceProvider::Error *error, QString *errorString) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qgeocodingmanagerengine.xml">QGeoCodingManagerEngine</db:link> instance, initialized with <db:code role="parameter">parameters</db:code>, which implements the location geocoding functionality.</db:para>
<db:para>If <db:code role="parameter">error</db:code> is not <db:code>nullptr</db:code> it should be set to <db:link xlink:href="qgeoserviceprovider.xml#Error-enum">QGeoServiceProvider::NoError</db:link> on success or an appropriate <db:link xlink:href="qgeoserviceprovider.xml#Error-enum">QGeoServiceProvider::Error</db:link> on failure.</db:para>
<db:para>If <db:code role="parameter">errorString</db:code> is not <db:code>nullptr</db:code> it should be set to a string describing any error which occurred.</db:para>
<db:para>The default implementation returns <db:code>nullptr</db:code>, which causes a <db:link xlink:href="qgeoserviceprovider.xml#Error-enum">QGeoServiceProvider::NotSupportedError</db:link> in <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link>.</db:para>
</db:section>
<db:section xml:id="createPlaceManagerEngine">
<db:title>[virtual] QPlaceManagerEngine *QGeoServiceProviderFactory::createPlaceManagerEngine(const QVariantMap &amp;<db:emphasis>parameters</db:emphasis>, QGeoServiceProvider::Error *<db:emphasis>error</db:emphasis>, QString *<db:emphasis>errorString</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPlaceManagerEngine *</db:type>
<db:methodname>createPlaceManagerEngine</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGeoServiceProvider::Error *</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>errorString</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceManagerEngine * createPlaceManagerEngine(const QVariantMap &amp;parameters, QGeoServiceProvider::Error *error, QString *errorString) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qplacemanagerengine.xml">QPlaceManagerEngine</db:link> instance, initialized with <db:code role="parameter">parameters</db:code>, which implements the place searching functionality.</db:para>
<db:para>If <db:code role="parameter">error</db:code> is not <db:code>nullptr</db:code> it should be set to <db:link xlink:href="qgeoserviceprovider.xml#Error-enum">QGeoServiceProvider::NoError</db:link> on success or an appropriate <db:link xlink:href="qgeoserviceprovider.xml#Error-enum">QGeoServiceProvider::Error</db:link> on failure.</db:para>
<db:para>If <db:code role="parameter">errorString</db:code> is not <db:code>nullptr</db:code> it should be set to a string describing any error which occurred.</db:para>
<db:para>The default implementation returns <db:code>nullptr</db:code>, which causes a <db:link xlink:href="qgeoserviceprovider.xml#Error-enum">QGeoServiceProvider::NotSupportedError</db:link> in <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link>.</db:para>
</db:section>
<db:section xml:id="createRoutingManagerEngine">
<db:title>[virtual] QGeoRoutingManagerEngine *QGeoServiceProviderFactory::createRoutingManagerEngine(const QVariantMap &amp;<db:emphasis>parameters</db:emphasis>, QGeoServiceProvider::Error *<db:emphasis>error</db:emphasis>, QString *<db:emphasis>errorString</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QGeoRoutingManagerEngine *</db:type>
<db:methodname>createRoutingManagerEngine</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGeoServiceProvider::Error *</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>errorString</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRoutingManagerEngine * createRoutingManagerEngine(const QVariantMap &amp;parameters, QGeoServiceProvider::Error *error, QString *errorString) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qgeoroutingmanagerengine.xml">QGeoRoutingManagerEngine</db:link> instance, initialized with <db:code role="parameter">parameters</db:code>, which implements routing functionality.</db:para>
<db:para>If <db:code role="parameter">error</db:code> is not <db:code>nullptr</db:code> it should be set to <db:link xlink:href="qgeoserviceprovider.xml#Error-enum">QGeoServiceProvider::NoError</db:link> on success or an appropriate <db:link xlink:href="qgeoserviceprovider.xml#Error-enum">QGeoServiceProvider::Error</db:link> on failure.</db:para>
<db:para>If <db:code role="parameter">errorString</db:code> is not <db:code>nullptr</db:code> it should be set to a string describing any error which occurred.</db:para>
<db:para>The default implementation returns <db:code>nullptr</db:code>, which causes a <db:link xlink:href="qgeoserviceprovider.xml#Error-enum">QGeoServiceProvider::NotSupportedError</db:link> in <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link>.</db:para>
</db:section>
<db:section xml:id="setQmlEngine">
<db:title>[virtual] void QGeoServiceProviderFactory::setQmlEngine(QQmlEngine *<db:emphasis>engine</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setQmlEngine</db:methodname>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setQmlEngine(QQmlEngine *engine)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Notify the plugin when the qml <db:code role="parameter">engine</db:code> is ready. In this moment the plugins can use it to register Image Providers.</db:para>
<db:para>The default implementation does nothing.</db:para>
</db:section>
</db:section>
</db:article>
