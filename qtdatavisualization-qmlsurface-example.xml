<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 2 Surface Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> in a QML application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Quick 2 surface example shows how to make a simple 3D surface plot using <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> with Qt Quick 2.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlsurface-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The focus in this example is on generating a surface graph from height data, so in this section we skip explaining the application creation. For more detailed QML example documentation, see <db:link xlink:href="qtdatavisualization-qmlscatter-example.xml">Qt Quick 2 Scatter Example</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="adding-data-to-the-graph">
<db:title>Adding Data to the Graph</db:title>
<db:para>This example shows two methods to set data to surface graph, using the <db:link xlink:href="qml-qtdatavisualization-heightmapsurfacedataproxy.xml">HeightMapSurfaceDataProxy</db:link> and <db:link xlink:href="qml-qtdatavisualization-itemmodelsurfacedataproxy.xml">ItemModelSurfaceDataProxy</db:link>. First we go through setting the data using the height map specific data proxy. It is done with the code snippet below. The proxy itself is contained in a <db:link xlink:href="qml-qtdatavisualization-surface3dseries.xml">Surface3DSeries</db:link>. Inside the <db:link xlink:href="qml-qtdatavisualization-heightmapsurfacedataproxy.xml">HeightMapSurfaceDataProxy</db:link> the <db:code>heightMapFile</db:code> specifies the image file containing the height data. The value properties in the proxy define the minimum and maximum values for surface area width and depth. This example shows the terrain around Tycho crater at imaginary position from 67 to 97 and from 30 to 60. Note that on the graph the scale on the Y dimension exaggerates the height.</db:para>
<db:programlisting language="qml">Surface3DSeries {
    id: heightSeries
    flatShadingEnabled: false
    drawMode: Surface3DSeries.DrawSurface
    visible: false

    HeightMapSurfaceDataProxy {
        heightMapFile: &quot;:/heightmaps/image&quot;
        // We don't want the default data values set by heightmap proxy.
        minZValue: 30
        maxZValue: 60
        minXValue: 67
        maxXValue: 97
    }

    onDrawModeChanged: checkState()
}
</db:programlisting>
<db:para>The other method to set surface data used in this example is with model mapping. We do that by first defining a <db:code>ListModel</db:code> containing the data for the surface:</db:para>
<db:programlisting language="qml">ListModel {
    id: dataModel
    ListElement{ longitude: &quot;0&quot;; latitude: &quot;0&quot;; height: &quot;124&quot;; }
    ListElement{ longitude: &quot;0&quot;; latitude: &quot;1&quot;; height: &quot;125&quot;; }
    ListElement{ longitude: &quot;0&quot;; latitude: &quot;2&quot;; height: &quot;124&quot;; }
    ...
</db:programlisting>
<db:para>Then we set up a <db:link xlink:href="qml-qtdatavisualization-surface3dseries.xml">Surface3DSeries</db:link> with a <db:link xlink:href="qml-qtdatavisualization-itemmodelsurfacedataproxy.xml">ItemModelSurfaceDataProxy</db:link>:</db:para>
<db:programlisting language="qml">Surface3DSeries {
    id: surfaceSeries
    flatShadingEnabled: false
    drawMode: Surface3DSeries.DrawSurface

    ItemModelSurfaceDataProxy {
    ...
</db:programlisting>
<db:para>We add the actual data to the <db:code>itemModel</db:code> of the <db:link xlink:href="qml-qtdatavisualization-itemmodelsurfacedataproxy.xml">ItemModelSurfaceDataProxy</db:link>. We also define the roles for columns, rows and values. In this example the row holds values for longitude, column for latitude and the value is for height.</db:para>
<db:programlisting language="cpp">...
itemModel: surfaceData.model
rowRole: &quot;longitude&quot;
columnRole: &quot;latitude&quot;
yPosRole: &quot;height&quot;
}
</db:programlisting>
</db:section>
<db:section xml:id="showing-data">
<db:title>Showing Data</db:title>
<db:para>In the <db:code>main.qml</db:code>, we set up the <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> element to show the data and various UI elements to illustrate few interesting features.</db:para>
<db:para>First is the gradient to be used for the surface, which can be defined as seen in the following snippet. With the <db:link xlink:href="qml-qtdatavisualization-colorgradient.xml">ColorGradient</db:link> we set example colors from position 0.0 to 1.0.</db:para>
<db:programlisting language="qml">ColorGradient {
    id: surfaceGradient
    ColorGradientStop { position: 0.0; color: &quot;darkslategray&quot; }
    ColorGradientStop { id: middleGradient; position: 0.25; color: &quot;peru&quot; }
    ColorGradientStop { position: 1.0; color: &quot;red&quot; }
}
</db:programlisting>
<db:para>This element is set into the <db:code>baseGradients</db:code> property in the <db:code>theme</db:code> used in <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link>:</db:para>
<db:programlisting language="qml">theme: Theme3D {
    type: Theme3D.ThemeStoneMoss
    font.family: &quot;STCaiyun&quot;
    font.pointSize: 35
    colorStyle: Theme3D.ColorStyleRangeGradient
    baseGradients: [surfaceGradient]
}
</db:programlisting>
<db:para>Other interesting features can be controlled with buttons.</db:para>
<db:para>The first button is to toggle on and off the surface grid, for which we use the following code:</db:para>
<db:programlisting language="qml">onClicked: {
    if (surfaceSeries.drawMode &amp;amp; Surface3DSeries.DrawWireframe) {
        surfaceSeries.drawMode &amp;amp;= ~Surface3DSeries.DrawWireframe;
        heightSeries.drawMode &amp;amp;= ~Surface3DSeries.DrawWireframe;
    } else {
        surfaceSeries.drawMode |= Surface3DSeries.DrawWireframe;
        heightSeries.drawMode |= Surface3DSeries.DrawWireframe;
    }
}
</db:programlisting>
<db:para>Second button is for surface shading mode, which is controlled with this code:</db:para>
<db:programlisting language="qml">onClicked: {
    if (surfaceSeries.flatShadingEnabled === true) {
        surfaceSeries.flatShadingEnabled = false;
        heightSeries.flatShadingEnabled = false;
        text = &quot;Show Flat&quot;
    } else {
        surfaceSeries.flatShadingEnabled = true;
        heightSeries.flatShadingEnabled = true;
        text = &quot;Show Smooth&quot;
    }
}
</db:programlisting>
<db:para>Third button is for series visibility, which is controlled with this code:</db:para>
<db:programlisting language="qml">onClicked: {
    if (surfaceSeries.drawMode &amp;amp; Surface3DSeries.DrawSurface) {
        surfaceSeries.drawMode &amp;amp;= ~Surface3DSeries.DrawSurface;
        heightSeries.drawMode &amp;amp;= ~Surface3DSeries.DrawSurface;
    } else {
        surfaceSeries.drawMode |= Surface3DSeries.DrawSurface;
        heightSeries.drawMode |= Surface3DSeries.DrawSurface;
    }
}
</db:programlisting>
<db:para>Notice that the <db:code>drawMode</db:code> and <db:code>flatShadingEnable</db:code> properties are set for both series.</db:para>
<db:para>Fourth and fifth buttons are for controlling background features.</db:para>
<db:para>The last button is for switching between the two series, one of which uses <db:link xlink:href="qml-qtdatavisualization-heightmapsurfacedataproxy.xml">HeightMapSurfaceDataProxy</db:link> and the other one <db:link xlink:href="qml-qtdatavisualization-itemmodelsurfacedataproxy.xml">ItemModelSurfaceDataProxy</db:link>. For this we use the following code:</db:para>
<db:programlisting language="qml">onClicked: {
    if (surfaceSeries.visible === false) {
        surfacePlot.axisY.max = 500.0
        surfaceSeries.visible = true
        heightSeries.visible = false
        middleGradient.position = 0.25
        text = &quot;Switch to Height Map Series&quot;
    } else {
        surfacePlot.axisY.max = 250.0
        surfaceSeries.visible = false
        heightSeries.visible = true
        middleGradient.position = 0.50
        text = &quot;Switch to Item Model Series&quot;
    }
}
</db:programlisting>
<db:para>We also set the maximum value to 500 in model proxy to make the surface flatter and 250 on height map proxy to show exaggerated height. At the same time the middle color position on the gradient is modified to match the value range change.</db:para>
</db:section>
<db:section xml:id="example-contents">
<db:title>Example Contents</db:title>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmlsurface/main.cpp">qmlsurface/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlsurface/qml/qmlsurface/Data.qml">qmlsurface/qml/qmlsurface/Data.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlsurface/qml/qmlsurface/NewButton.qml">qmlsurface/qml/qmlsurface/NewButton.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlsurface/qml/qmlsurface/main.qml">qmlsurface/qml/qmlsurface/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlsurface/qmlsurface.pro">qmlsurface/qmlsurface.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlsurface/qmlsurface.qrc">qmlsurface/qmlsurface.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmlsurface/heightmap.png">qmlsurface/heightmap.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:section></db:section></db:article>
