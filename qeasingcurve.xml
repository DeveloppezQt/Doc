<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QEasingCurve Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link> class provides easing curves for controlling animation.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QEasingCurve</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QEasingCurve is part of <db:simplelist><db:member><db:link xlink:href="animation.xml">Animation Framework</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Easing curves describe a function that controls how the speed of the interpolation between 0 and 1 should be. Easing curves allow transitions from one value to another to appear more natural than a simple constant speed would allow. The <db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link> class is usually used in conjunction with the <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> and <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> classes but can be used on its own. It is usually used to accelerate the interpolation from zero velocity (ease in) or decelerate to zero velocity (ease out). Ease in and ease out can also be combined in the same easing curve.</db:para>
<db:para>To calculate the speed of the interpolation, the easing curve provides the function <db:link xlink:href="qeasingcurve.xml#valueForProgress">valueForProgress</db:link>(), where the <db:code role="parameter">progress</db:code> argument specifies the progress of the interpolation: 0 is the start value of the interpolation, 1 is the end value of the interpolation. The returned value is the effective progress of the interpolation. If the returned value is the same as the input value for all input values the easing curve is a linear curve. This is the default behaviour.</db:para>
<db:para>For example,</db:para>
<db:programlisting language="cpp">    QEasingCurve easing(QEasingCurve::InOutQuad);

    for (qreal t = 0.0; t &lt; 1.0; t += 0.1)
        qWarning() &lt;&lt; &quot;Effective progress&quot; &lt;&lt; t &lt;&lt; &quot;is&quot;
                   &lt;&lt; easing.valueForProgress(t);
</db:programlisting>
<db:para>will print the effective progress of the interpolation between 0 and 1.</db:para>
<db:para>When using a <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link>, the associated easing curve will be used to control the progress of the interpolation between startValue and endValue:</db:para>
<db:programlisting language="cpp">    QPropertyAnimation animation;
    animation.setStartValue(0);
    animation.setEndValue(1000);
    animation.setDuration(1000);
    animation.setEasingCurve(QEasingCurve::InOutQuad);
</db:programlisting>
<db:para>The ability to set an amplitude, overshoot, or period depends on the <db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link> type. Amplitude access is available to curves that behave as springs such as elastic and bounce curves. Changing the amplitude changes the height of the curve. Period access is only available to elastic curves and setting a higher period slows the rate of bounce. Only curves that have &quot;boomerang&quot; behaviors such as the <db:link xlink:href="qeasingcurve.xml#Type-enum">InBack</db:link>, <db:link xlink:href="qeasingcurve.xml#Type-enum">OutBack</db:link>, <db:link xlink:href="qeasingcurve.xml#Type-enum">InOutBack</db:link>, and <db:link xlink:href="qeasingcurve.xml#Type-enum">OutInBack</db:link> have overshoot settings. These curves will interpolate beyond the end points and return to the end point, acting similar to a boomerang.</db:para>
<db:para>The <db:link xlink:href="">Easing Curves Example</db:link> contains samples of <db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link> types and lets you change the curve settings.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="EasingFunction-typedef">
<db:title>QEasingCurve::EasingFunction</db:title>
<db:para>This is a typedef for a pointer to a function with the following signature:</db:para>
<db:programlisting language="cpp">qreal myEasingFunction(qreal progress);
</db:programlisting>
</db:section>
<db:section xml:id="Type-enum">
<db:title>enum QEasingCurve::Type</db:title>
<db:para>The type of easing curve.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::Linear</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a linear (t) function: velocity is constant.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-linear.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InQuad</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a quadratic (t^2) function: accelerating from zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inquad.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutQuad</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a quadratic (t^2) function: decelerating to zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outquad.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InOutQuad</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a quadratic (t^2) function: acceleration until halfway, then deceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inoutquad.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutInQuad</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a quadratic (t^2) function: deceleration until halfway, then acceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outinquad.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InCubic</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a cubic (t^3) function: accelerating from zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-incubic.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutCubic</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a cubic (t^3) function: decelerating to zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outcubic.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InOutCubic</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a cubic (t^3) function: acceleration until halfway, then deceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inoutcubic.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutInCubic</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a cubic (t^3) function: deceleration until halfway, then acceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outincubic.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InQuart</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a quartic (t^4) function: accelerating from zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inquart.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutQuart</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a quartic (t^4) function: decelerating to zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outquart.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InOutQuart</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a quartic (t^4) function: acceleration until halfway, then deceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inoutquart.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutInQuart</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a quartic (t^4) function: deceleration until halfway, then acceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outinquart.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InQuint</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a quintic (t^5) easing in: accelerating from zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inquint.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutQuint</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a quintic (t^5) function: decelerating to zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outquint.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InOutQuint</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a quintic (t^5) function: acceleration until halfway, then deceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inoutquint.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutInQuint</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a quintic (t^5) function: deceleration until halfway, then acceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outinquint.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InSine</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a sinusoidal (sin(t)) function: accelerating from zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-insine.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutSine</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a sinusoidal (sin(t)) function: decelerating to zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outsine.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InOutSine</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a sinusoidal (sin(t)) function: acceleration until halfway, then deceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inoutsine.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutInSine</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a sinusoidal (sin(t)) function: deceleration until halfway, then acceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outinsine.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InExpo</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for an exponential (2^t) function: accelerating from zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inexpo.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutExpo</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for an exponential (2^t) function: decelerating to zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outexpo.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InOutExpo</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for an exponential (2^t) function: acceleration until halfway, then deceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inoutexpo.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutInExpo</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for an exponential (2^t) function: deceleration until halfway, then acceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outinexpo.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InCirc</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a circular (sqrt(1-t^2)) function: accelerating from zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-incirc.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutCirc</db:code></db:para>
</db:td>
<db:td><db:code>26</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a circular (sqrt(1-t^2)) function: decelerating to zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outcirc.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InOutCirc</db:code></db:para>
</db:td>
<db:td><db:code>27</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a circular (sqrt(1-t^2)) function: acceleration until halfway, then deceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inoutcirc.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutInCirc</db:code></db:para>
</db:td>
<db:td><db:code>28</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a circular (sqrt(1-t^2)) function: deceleration until halfway, then acceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outincirc.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InElastic</db:code></db:para>
</db:td>
<db:td><db:code>29</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for an elastic (exponentially decaying sine wave) function: accelerating from zero velocity. The peak amplitude can be set with the <db:emphasis>amplitude</db:emphasis> parameter, and the period of decay by the <db:emphasis>period</db:emphasis> parameter.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inelastic.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutElastic</db:code></db:para>
</db:td>
<db:td><db:code>30</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for an elastic (exponentially decaying sine wave) function: decelerating to zero velocity. The peak amplitude can be set with the <db:emphasis>amplitude</db:emphasis> parameter, and the period of decay by the <db:emphasis>period</db:emphasis> parameter.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outelastic.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InOutElastic</db:code></db:para>
</db:td>
<db:td><db:code>31</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for an elastic (exponentially decaying sine wave) function: acceleration until halfway, then deceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inoutelastic.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutInElastic</db:code></db:para>
</db:td>
<db:td><db:code>32</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for an elastic (exponentially decaying sine wave) function: deceleration until halfway, then acceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outinelastic.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InBack</db:code></db:para>
</db:td>
<db:td><db:code>33</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a back (overshooting cubic function: (s+1)*t^3 - s*t^2) easing in: accelerating from zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inback.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutBack</db:code></db:para>
</db:td>
<db:td><db:code>34</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a back (overshooting cubic function: (s+1)*t^3 - s*t^2) easing out: decelerating to zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outback.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InOutBack</db:code></db:para>
</db:td>
<db:td><db:code>35</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a back (overshooting cubic function: (s+1)*t^3 - s*t^2) easing in/out: acceleration until halfway, then deceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inoutback.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutInBack</db:code></db:para>
</db:td>
<db:td><db:code>36</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing out/in: deceleration until halfway, then acceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outinback.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InBounce</db:code></db:para>
</db:td>
<db:td><db:code>37</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a bounce (exponentially decaying parabolic bounce) function: accelerating from zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inbounce.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutBounce</db:code></db:para>
</db:td>
<db:td><db:code>38</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a bounce (exponentially decaying parabolic bounce) function: decelerating from zero velocity.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outbounce.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::InOutBounce</db:code></db:para>
</db:td>
<db:td><db:code>39</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a bounce (exponentially decaying parabolic bounce) function easing in/out: acceleration until halfway, then deceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-inoutbounce.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::OutInBounce</db:code></db:para>
</db:td>
<db:td><db:code>40</db:code></db:td>
</db:tr>
</db:informaltable>
<db:figure>
<db:title>Easing curve for a bounce (exponentially decaying parabolic bounce) function easing out/in: deceleration until halfway, then acceleration.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qeasingcurve-outinbounce.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::BezierSpline</db:code></db:para>
</db:td>
<db:td><db:code>45</db:code></db:td>
<db:td>
<db:para>Allows defining a custom easing curve using a cubic bezier spline</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::TCBSpline</db:code></db:para>
</db:td>
<db:td><db:code>46</db:code></db:td>
<db:td>
<db:para>Allows defining a custom easing curve using a TCB spline</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:emphasis>::Custom</db:code></db:para>
</db:td>
<db:td><db:code>47</db:code></db:td>
<db:td>
<db:para>This is returned if the user specified a custom curve type with <db:link xlink:href="qeasingcurve.xml#setCustomType">setCustomType</db:link>(). Note that you cannot call <db:link xlink:href="qeasingcurve.xml#setType">setType</db:link>() with this value, but <db:link xlink:href="qeasingcurve.xml#type">type</db:link>() can return it.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeasingcurve.xml#addCubicBezierSegment">addCubicBezierSegment</db:link>()</db:member>
<db:member><db:link xlink:href="qeasingcurve.xml#addTCBSegment">addTCBSegment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QEasingCurve-1">
<db:title>QEasingCurve::QEasingCurve(QEasingCurve::Type <db:emphasis>type</db:emphasis> = Linear)</db:title>
<db:para>Constructs an easing curve of the given <db:code role="parameter">type</db:code>.</db:para>
</db:section>
<db:section xml:id="QEasingCurve-2">
<db:title>QEasingCurve::QEasingCurve(const QEasingCurve &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Construct a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QEasingCurve">
<db:title>[noexcept] QEasingCurve::QEasingCurve(QEasingCurve &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-constructs a <db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link> instance, making it point at the same object that <db:code role="parameter">other</db:code> was pointing to.</db:para>
</db:section>
<db:section xml:id="dtor.QEasingCurve">
<db:title>[noexcept] QEasingCurve::~QEasingCurve()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="addCubicBezierSegment">
<db:title>void QEasingCurve::addCubicBezierSegment(const QPointF &amp;<db:emphasis>c1</db:emphasis>, const QPointF &amp;<db:emphasis>c2</db:emphasis>, const QPointF &amp;<db:emphasis>endPoint</db:emphasis>)</db:title>
<db:para>Adds a segment of a cubic bezier spline to define a custom easing curve. It is only applicable if <db:link xlink:href="qeasingcurve.xml#type">type</db:link>() is <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::BezierSpline</db:link>. Note that the spline implicitly starts at (0.0, 0.0) and has to end at (1.0, 1.0) to be a valid easing curve. <db:code role="parameter">c1</db:code> and <db:code role="parameter">c2</db:code> are the control points used for drawing the curve. <db:code role="parameter">endPoint</db:code> is the endpoint of the curve.</db:para>
</db:section>
<db:section xml:id="addTCBSegment">
<db:title>void QEasingCurve::addTCBSegment(const QPointF &amp;<db:emphasis>nextPoint</db:emphasis>, qreal <db:emphasis>t</db:emphasis>, qreal <db:emphasis>c</db:emphasis>, qreal <db:emphasis>b</db:emphasis>)</db:title>
<db:para>Adds a segment of a TCB bezier spline to define a custom easing curve. It is only applicable if <db:link xlink:href="qeasingcurve.xml#type">type</db:link>() is <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::TCBSpline</db:link>. The spline has to start explicitly at (0.0, 0.0) and has to end at (1.0, 1.0) to be a valid easing curve. The tension <db:code role="parameter">t</db:code> changes the length of the tangent vector. The continuity <db:code role="parameter">c</db:code> changes the sharpness in change between the tangents. The bias <db:code role="parameter">b</db:code> changes the direction of the tangent vector. <db:code role="parameter">nextPoint</db:code> is the sample position. All three parameters are valid between -1 and 1 and define the tangent of the control point. If all three parameters are 0 the resulting spline is a Catmull-Rom spline. The begin and endpoint always have a bias of -1 and 1, since the outer tangent is not defined.</db:para>
</db:section>
<db:section xml:id="amplitude">
<db:title>qreal QEasingCurve::amplitude() const</db:title>
<db:para>Returns the amplitude. This is not applicable for all curve types. It is only applicable for bounce and elastic curves (curves of <db:link xlink:href="qeasingcurve.xml#type">type</db:link>() <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::InBounce</db:link>, <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::OutBounce</db:link>, <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::InOutBounce</db:link>, <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::OutInBounce</db:link>, <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::InElastic</db:link>, <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::OutElastic</db:link>, <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::InOutElastic</db:link> or <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::OutInElastic</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeasingcurve.xml#setAmplitude">setAmplitude</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="customType">
<db:title>QEasingCurve::EasingFunction QEasingCurve::customType() const</db:title>
<db:para>Returns the function pointer to the custom easing curve. If <db:link xlink:href="qeasingcurve.xml#type">type</db:link>() does not return <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::Custom</db:link>, this function will return 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeasingcurve.xml#setCustomType">setCustomType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="overshoot">
<db:title>qreal QEasingCurve::overshoot() const</db:title>
<db:para>Returns the overshoot. This is not applicable for all curve types. It is only applicable if <db:link xlink:href="qeasingcurve.xml#type">type</db:link>() is <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::InBack</db:link>, <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::OutBack</db:link>, <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::InOutBack</db:link> or <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::OutInBack</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeasingcurve.xml#setOvershoot">setOvershoot</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="period">
<db:title>qreal QEasingCurve::period() const</db:title>
<db:para>Returns the period. This is not applicable for all curve types. It is only applicable if <db:link xlink:href="qeasingcurve.xml#type">type</db:link>() is <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::InElastic</db:link>, <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::OutElastic</db:link>, <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::InOutElastic</db:link> or <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::OutInElastic</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeasingcurve.xml#setPeriod">setPeriod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAmplitude">
<db:title>void QEasingCurve::setAmplitude(qreal <db:emphasis>amplitude</db:emphasis>)</db:title>
<db:para>Sets the amplitude to <db:code role="parameter">amplitude</db:code>.</db:para>
<db:para>This will set the amplitude of the bounce or the amplitude of the elastic &quot;spring&quot; effect. The higher the number, the higher the amplitude.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeasingcurve.xml#amplitude">amplitude</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCustomType">
<db:title>void QEasingCurve::setCustomType(QEasingCurve::EasingFunction <db:emphasis>func</db:emphasis>)</db:title>
<db:para>Sets a custom easing curve that is defined by the user in the function <db:code role="parameter">func</db:code>. The signature of the function is qreal myEasingFunction(qreal progress), where <db:emphasis>progress</db:emphasis> and the return value are considered to be normalized between 0 and 1. (In some cases the return value can be outside that range) After calling this function <db:link xlink:href="qeasingcurve.xml#type">type</db:link>() will return <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::Custom</db:link>. <db:code role="parameter">func</db:code> cannot be zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeasingcurve.xml#customType">customType</db:link>()</db:member>
<db:member><db:link xlink:href="qeasingcurve.xml#valueForProgress">valueForProgress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOvershoot">
<db:title>void QEasingCurve::setOvershoot(qreal <db:emphasis>overshoot</db:emphasis>)</db:title>
<db:para>Sets the overshoot to <db:code role="parameter">overshoot</db:code>.</db:para>
<db:para>0 produces no overshoot, and the default value of 1.70158 produces an overshoot of 10 percent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeasingcurve.xml#overshoot">overshoot</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPeriod">
<db:title>void QEasingCurve::setPeriod(qreal <db:emphasis>period</db:emphasis>)</db:title>
<db:para>Sets the period to <db:code role="parameter">period</db:code>. Setting a small period value will give a high frequency of the curve. A large period will give it a small frequency.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeasingcurve.xml#period">period</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setType">
<db:title>void QEasingCurve::setType(QEasingCurve::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Sets the type of the easing curve to <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeasingcurve.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QEasingCurve::swap(QEasingCurve &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this curve with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="toCubicSpline">
<db:title>QList&lt;QPointF&gt; QEasingCurve::toCubicSpline() const</db:title>
<db:para>Returns the cubicBezierSpline that defines a custom easing curve. If the easing curve does not have a custom bezier easing curve the list is empty.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>QEasingCurve::Type QEasingCurve::type() const</db:title>
<db:para>Returns the type of the easing curve.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeasingcurve.xml#setType">setType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueForProgress">
<db:title>qreal QEasingCurve::valueForProgress(qreal <db:emphasis>progress</db:emphasis>) const</db:title>
<db:para>Return the effective progress for the easing curve at <db:code role="parameter">progress</db:code>. Whereas <db:code role="parameter">progress</db:code> must be between 0 and 1, the returned effective progress can be outside those bounds. For example, <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::InBack</db:link> will return negative values in the beginning of the function.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QEasingCurve &amp;QEasingCurve::operator=(QEasingCurve &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link> instance.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QEasingCurve &amp;QEasingCurve::operator=(const QEasingCurve &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copy <db:code role="parameter">other</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QEasingCurve &amp;<db:emphasis>lhs</db:emphasis>, const QEasingCurve &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Compares easing curve <db:code role="parameter">lhs</db:code> with <db:code role="parameter">rhs</db:code> and returns true if they are not equal; otherwise returns false. It will also compare the properties of the curves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeasingcurve.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-2">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QEasingCurve &amp;<db:emphasis>easing</db:emphasis>)</db:title>
<db:para>Writes the given <db:code role="parameter">easing</db:code> curve to the given <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
<db:warning>
<db:para>Writing easing curves of <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::Custom</db:link> type (that is, curves with a custom easing function) is not supported.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool operator==(const QEasingCurve &amp;<db:emphasis>lhs</db:emphasis>, const QEasingCurve &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Compares easing curve <db:code role="parameter">lhs</db:code> with <db:code role="parameter">rhs</db:code> and returns true if they are equal; otherwise returns false. It will also compare the properties of the curves.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QEasingCurve &amp;<db:emphasis>easing</db:emphasis>)</db:title>
<db:para>Reads an easing curve from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">easing</db:code> curve and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
