<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Music Player</db:title>
<db:productname>QtWinExtras</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Windows Extras Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates managing Windows DWM features, jump lists, taskbar button overlay, and thumbnail toolbar.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;musicplayer.h&quot;

#include &lt;QApplication&gt;
#include &lt;QCommandLineParser&gt;
#include &lt;QCommandLineOption&gt;
#include &lt;QDesktopWidget&gt;
#include &lt;QFileInfo&gt;
#include &lt;QMimeDatabase&gt;
#include &lt;QSettings&gt;
#include &lt;QIcon&gt;
#include &lt;QDir&gt;
#include &lt;QUrl&gt;

static bool associateFileTypes()
{
    QString displayName = QGuiApplication::applicationDisplayName();
    QString filePath = QCoreApplication::applicationFilePath();
    QString fileName = QFileInfo(filePath).fileName();

    const QString key = QStringLiteral(&quot;HKEY_CURRENT_USER\\Software\\Classes\\Applications\\&quot;) + fileName;
    QSettings settings(key, QSettings::NativeFormat);
    if (settings.status() != QSettings::NoError) {
        qWarning() &lt;&lt; &quot;Cannot access registry key&quot; &lt;&lt; key;
        return false;
    }
    settings.setValue(QStringLiteral(&quot;FriendlyAppName&quot;), displayName);

    settings.beginGroup(QStringLiteral(&quot;SupportedTypes&quot;));
    QMimeDatabase mimeDatabase;
    foreach (const QString &amp;fileType, MusicPlayer::supportedMimeTypes()) {
        foreach (QString suffix, mimeDatabase.mimeTypeForName(fileType).suffixes()) {
            suffix.prepend('.');
            settings.setValue(suffix, QString());
        }
    }
    settings.endGroup();

    settings.beginGroup(QStringLiteral(&quot;shell&quot;));
    settings.beginGroup(QStringLiteral(&quot;open&quot;));
    settings.setValue(QStringLiteral(&quot;FriendlyAppName&quot;), displayName);
    settings.beginGroup(QStringLiteral(&quot;Command&quot;));
    settings.setValue(QStringLiteral(&quot;.&quot;),
                      QLatin1Char('&quot;') + QDir::toNativeSeparators(filePath) + QStringLiteral(&quot;\&quot; \&quot;%1\&quot;&quot;));

    return true;
}

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QCoreApplication::setApplicationName(QStringLiteral(&quot;MusicPlayer&quot;));
    QCoreApplication::setApplicationVersion( QLatin1String(QT_VERSION_STR));
    QCoreApplication::setOrganizationName(QStringLiteral(&quot;QtWinExtras&quot;));
    QCoreApplication::setOrganizationDomain(&quot;qt-project.org&quot;);
    QGuiApplication::setApplicationDisplayName(QStringLiteral(&quot;QtWinExtras Music Player&quot;));

    if (!associateFileTypes())
        return -1;

    QCommandLineParser parser;
    parser.setApplicationDescription(QGuiApplication::applicationDisplayName());
    parser.addHelpOption();
    parser.addVersionOption();
    parser.addPositionalArgument(QStringLiteral(&quot;url&quot;), MusicPlayer::tr(&quot;The URL to open.&quot;));
    parser.process(app);

    MusicPlayer player;

    if (!parser.positionalArguments().isEmpty())
        player.playUrl(QUrl::fromUserInput(parser.positionalArguments().constFirst(), QDir::currentPath(), QUrl::AssumeLocalFile));

    const QRect availableGeometry = QApplication::desktop()-&gt;availableGeometry(&amp;player);
    player.resize(availableGeometry.width() / 6, availableGeometry.height() / 17);
    player.show();

    return app.exec();
}

</db:programlisting>
</db:article>
