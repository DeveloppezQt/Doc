<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Widgets Classes</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The primary elements for designing user interfaces in Qt.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="the-widget-classes">
<db:title>The Widget Classes</db:title>
<db:para>The following sections list the widget classes. See the <db:link xlink:href="gallery.xml">Qt Widget Gallery</db:link> for some examples.</db:para>
<db:section xml:id="basic-widget-classes">
<db:title>Basic Widget Classes</db:title>
<db:para>These basic widgets (controls), e.g. buttons, comboboxes and scroll bars, are designed for direct use.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-label.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-pushbutton.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/macos-progressbar.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-combobox.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-radiobutton.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/macos-lineedit.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="advanced-widget-classes">
<db:title>Advanced Widget Classes</db:title>
<db:para>Advanced GUI widgets, e.g. tab widgets and progress bars, provide more complex user interface controls.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/windows-treeview.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-calendarwidget.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qundoview.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="abstract-widget-classes">
<db:title>Abstract Widget Classes</db:title>
<db:para>The abstract widget classes are base classes. They are not usable as standalone classes but provide functionality when they are subclassed.</db:para>
</db:section>
<db:section xml:id="organizer-widget-classes">
<db:title>Organizer Widget Classes</db:title>
<db:para>Classes like splitters, tab bars, button groups, etc are used for organizing and grouping GUI primitives into more complex applications and dialogs.</db:para>
</db:section>
<db:section xml:id="graphics-view-classes">
<db:title>Graphics View Classes</db:title>
</db:section>
<db:section xml:id="model-view-classes">
<db:title>Model/View Classes</db:title>
<db:variablelist role="model-view">
<db:varlistentry>
<db:term><db:link xlink:href="qitemeditorcreator.xml" xlink:role="class">QItemEditorCreator</db:link></db:term>
<db:listitem>
<db:para>The QItemEditorCreator class makes it possible to create item editor creator bases without subclassing QItemEditorCreatorBase.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstandarditemeditorcreator.xml" xlink:role="class">QStandardItemEditorCreator</db:link></db:term>
<db:listitem>
<db:para>The QStandardItemEditorCreator class provides the possibility to register widgets without having to subclass QItemEditorCreatorBase.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="main-window-and-related-classes">
<db:title>Main Window and Related Classes</db:title>
</db:section>
<db:section xml:id="widget-appearance-and-style-related-classes">
<db:title>Widget Appearance and Style-Related Classes</db:title>
<db:para>Classes used for customizing UI appearance and style.</db:para>
<db:variablelist role="appearance">
<db:varlistentry>
<db:term><db:link xlink:href="qcolortransform.xml" xlink:role="class">QColorTransform</db:link></db:term>
<db:listitem>
<db:para>The QColorTransform class is a transformation between color spaces.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstylepainter.xml" xlink:role="class">QStylePainter</db:link></db:term>
<db:listitem>
<db:para>The QStylePainter class is a convenience class for drawing QStyle elements inside a widget.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="layout-classes">
<db:title>Layout Classes</db:title>
</db:section>
</db:section>
</db:article>
