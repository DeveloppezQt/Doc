<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHttpPart Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhttppart.xml">QHttpPart</db:link> class holds a body part to be used inside a HTTP multipart MIME message.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHttpPart</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QHttpPart is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qhttppart.xml">QHttpPart</db:link> class holds a body part to be used inside a HTTP multipart MIME message (which is represented by the <db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link> class). A <db:link xlink:href="qhttppart.xml">QHttpPart</db:link> consists of a header block and a data block, which are separated by each other by two consecutive new lines. An example for one part would be:</db:para>
<db:programlisting language="cpp">Content-Type: text/plain
Content-Disposition: form-data; name=&quot;text&quot;

here goes the body
</db:programlisting>
<db:para>For setting headers, use <db:link xlink:href="qhttppart.xml#setHeader">setHeader</db:link>() and <db:link xlink:href="qhttppart.xml#setRawHeader">setRawHeader</db:link>(), which behave exactly like <db:link xlink:href="qnetworkrequest.xml#setHeader">QNetworkRequest::setHeader</db:link>() and <db:link xlink:href="qnetworkrequest.xml#setRawHeader">QNetworkRequest::setRawHeader</db:link>().</db:para>
<db:para>For reading small pieces of data, use <db:link xlink:href="qhttppart.xml#setBody">setBody</db:link>(); for larger data blocks like e.g. images, use <db:link xlink:href="qhttppart.xml#setBodyDevice">setBodyDevice</db:link>(). The latter method saves memory by not copying the data internally, but reading directly from the device. This means that the device must be opened and readable at the moment when the multipart message containing the body part is sent on the network via <db:link xlink:href="qnetworkaccessmanager.xml#post">QNetworkAccessManager::post</db:link>().</db:para>
<db:para>To construct a <db:link xlink:href="qhttppart.xml">QHttpPart</db:link> with a small body, consider the following snippet (this produces the data shown in the example above):</db:para>
<db:programlisting language="cpp">QHttpPart textPart;
textPart.setHeader(QNetworkRequest::ContentTypeHeader, QVariant(&quot;text/plain&quot;));
textPart.setHeader(QNetworkRequest::ContentDispositionHeader, QVariant(&quot;form-data; name=\&quot;text\&quot;&quot;));
textPart.setBody(&quot;here goes the body&quot;);
</db:programlisting>
<db:para>To construct a <db:link xlink:href="qhttppart.xml">QHttpPart</db:link> reading from a device (e.g. a file), the following can be applied:</db:para>
<db:programlisting language="cpp">QHttpPart imagePart;
imagePart.setHeader(QNetworkRequest::ContentTypeHeader, QVariant(&quot;image/jpeg&quot;));
imagePart.setHeader(QNetworkRequest::ContentDispositionHeader, QVariant(&quot;form-data; name=\&quot;image\&quot;&quot;));
imagePart.setRawHeader(&quot;Content-ID&quot;, &quot;my@content.id&quot;); // add any headers you like via setRawHeader()
QFile *file = new QFile(&quot;image.jpg&quot;);
file-&amp;gt;open(QIODevice::ReadOnly);
imagePart.setBodyDevice(file);
</db:programlisting>
<db:para>Be aware that <db:link xlink:href="qhttppart.xml">QHttpPart</db:link> does not take ownership of the device when set, so it is the developer's responsibility to destroy it when it is not needed anymore. A good idea might be to set the multipart message as parent object for the device, as documented at the documentation for <db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHttpPart">
<db:title>QHttpPart::QHttpPart()</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpPart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpPart()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qhttppart.xml">QHttpPart</db:link> object.</db:para>
</db:section>
<db:section xml:id="QHttpPart-1">
<db:title>QHttpPart::QHttpPart(const QHttpPart &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpPart</db:methodname>
<db:methodparam>
<db:type>const QHttpPart &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpPart(const QHttpPart &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QHttpPart">
<db:title>QHttpPart::~QHttpPart()</db:title>
<db:destructorsynopsis>
<db:methodname>~QHttpPart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QHttpPart()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qhttppart.xml">QHttpPart</db:link>.</db:para>
</db:section>
<db:section xml:id="setBody">
<db:title>void QHttpPart::setBody(const QByteArray &amp;<db:emphasis>body</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBody</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>body</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBody(const QByteArray &amp;body)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the body of this MIME part to <db:code role="parameter">body</db:code>. The body set with this method will be used unless the device is set via <db:link xlink:href="qhttppart.xml#setBodyDevice">setBodyDevice</db:link>(). For a large amount of data (e.g. an image), use <db:link xlink:href="qhttppart.xml#setBodyDevice">setBodyDevice</db:link>(), which will not copy the data internally.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttppart.xml#setBodyDevice">setBodyDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBodyDevice">
<db:title>void QHttpPart::setBodyDevice(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBodyDevice</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBodyDevice(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the device to read the content from to <db:code role="parameter">device</db:code>. For large amounts of data this method should be preferred over <db:link xlink:href="qhttppart.xml#setBody">setBody</db:link>(), because the content is not copied when using this method, but read directly from the device. <db:code role="parameter">device</db:code> must be open and readable. <db:link xlink:href="qhttppart.xml">QHttpPart</db:link> does not take ownership of <db:code role="parameter">device</db:code>, i.e. the device must be closed and destroyed if necessary. if <db:code role="parameter">device</db:code> is sequential (e.g. sockets, but not files), <db:link xlink:href="qnetworkaccessmanager.xml#post">QNetworkAccessManager::post</db:link>() should be called after <db:code role="parameter">device</db:code> has emitted finished(). For unsetting the device and using data set via <db:link xlink:href="qhttppart.xml#setBody">setBody</db:link>(), use &quot;setBodyDevice(0)&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttppart.xml#setBody">setBody</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#post">QNetworkAccessManager::post</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeader">
<db:title>void QHttpPart::setHeader(QNetworkRequest::KnownHeaders <db:emphasis>header</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHeader</db:methodname>
<db:methodparam>
<db:type>QNetworkRequest::KnownHeaders</db:type>
<db:parameter>header</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of the known header <db:code role="parameter">header</db:code> to be <db:code role="parameter">value</db:code>, overriding any previously set headers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">QNetworkRequest::KnownHeaders</db:link></db:member>
<db:member><db:link xlink:href="qhttppart.xml#setRawHeader">setRawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setHeader">QNetworkRequest::setHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRawHeader">
<db:title>void QHttpPart::setRawHeader(const QByteArray &amp;<db:emphasis>headerName</db:emphasis>, const QByteArray &amp;<db:emphasis>headerValue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRawHeader</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>headerName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>headerValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRawHeader(const QByteArray &amp;headerName, const QByteArray &amp;headerValue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the header <db:code role="parameter">headerName</db:code> to be of value <db:code role="parameter">headerValue</db:code>. If <db:code role="parameter">headerName</db:code> corresponds to a known header (see <db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">QNetworkRequest::KnownHeaders</db:link>), the raw format will be parsed and the corresponding &quot;cooked&quot; header will be set as well.</db:para>
<db:note>
<db:para>Setting the same header twice overrides the previous setting. To accomplish the behaviour of multiple HTTP headers of the same name, you should concatenate the two values, separating them with a comma (&quot;,&quot;) and set one single raw header.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">QNetworkRequest::KnownHeaders</db:link></db:member>
<db:member><db:link xlink:href="qhttppart.xml#setHeader">setHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setRawHeader">QNetworkRequest::setRawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QHttpPart::swap(QHttpPart &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QHttpPart &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QHttpPart &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this HTTP part with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QHttpPart::operator!=(const QHttpPart &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QHttpPart &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QHttpPart &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this object is not the same as <db:code role="parameter">other</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttppart.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QHttpPart &amp;QHttpPart::operator=(const QHttpPart &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QHttpPart &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QHttpPart &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpPart &amp; operator=(const QHttpPart &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QHttpPart::operator==(const QHttpPart &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QHttpPart &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QHttpPart &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this object is the same as <db:code role="parameter">other</db:code> (i.e., if they have the same headers and body).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttppart.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
