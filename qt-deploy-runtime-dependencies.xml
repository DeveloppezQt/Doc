<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_deploy_runtime_dependencies</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Deploy Qt plugins, Qt and non-Qt libraries needed by an executable.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Deploy Qt plugins, Qt and non-Qt libraries needed by an executable.</db:para>
<db:para>The command is defined in the Core component of the Qt6 package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
</db:programlisting>
<db:para>Unlike most other CMake commands provided by Qt, qt_deploy_runtime_dependencies() can only be called from a deployment script. It cannot be called directly by the project during the configure stage.</db:para>
<db:para>This command was introduced in Qt 6.3.</db:para>
<db:note>
<db:para>This command does not usually need to be called directly. It is used internally by other higher level commands, but projects wishing to implement more customized deployment logic may find it useful.</db:para>
</db:note>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_deploy_runtime_dependencies(
    EXECUTABLE executable
    [ADDITIONAL_EXECUTABLES files...]
    [ADDITIONAL_LIBRARIES files...]
    [ADDITIONAL_MODULES files...]
    [GENERATE_QT_CONF]
    [BIN_DIR bin_dir]
    [LIB_DIR lib_dir]
    [PLUGINS_DIR plugins_dir]
    [QML_DIR qml_dir]
    [VERBOSE]
    [NO_OVERWRITE]
    [NO_APP_STORE_COMPLIANCE]
    [NO_TRANSLATIONS]
    [NO_COMPILER_RUNTIME]
    [PRE_INCLUDE_REGEXES regexes...]
    [PRE_EXCLUDE_REGEXES regexes...]
    [POST_INCLUDE_REGEXES regexes...]
    [POST_EXCLUDE_REGEXES regexes...]
    [POST_INCLUDE_FILES files...]
    [POST_EXCLUDE_FILES files...]
)
</db:programlisting>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>When installing an application, it may be desirable to also install the libraries and plugins it depends on. When the application is a macOS app bundle or a Windows executable, qt_deploy_runtime_dependencies() can be called from an install-time script to deploy those dependencies. It will install non-system Qt libraries plus an appropriate set of Qt plugins.</db:para>
<db:para>On Linux, the command will deploy additional libraries, beyond just those related to Qt, that are included with the project. However, when executed on macOS or Windows, the command will use either macdeployqt or windeployqt, which will only deploy libraries that are specific to Qt.</db:para>
<db:para>This command only considers runtime dependencies for which linking relationships exist in the underlying binaries. It does not deploy QML modules, see <db:link xlink:href="qt-deploy-qml-imports.xml">qt_deploy_qml_imports()</db:link> for that.</db:para>
</db:section>
<db:section xml:id="arguments">
<db:title>Arguments</db:title>
<db:para>The EXECUTABLE option must be provided.</db:para>
<db:para>The executable argument should be the path to the executable file in the build directory. For example, ${CMAKE_CURRENT_BINARY_DIR}/MyApp.exe, or more dynamically $&lt;TARGET_FILE:MyApp&gt;. Specifying raw target names not wrapped in a generator expression like &lt;TARGET_FILE:&gt; is not supported.</db:para>
<db:para>For macOS app bundles, the executable argument should be a path to the bundle directory, relative to the base install location. For example MyApp.app, or more dynamically $&lt;TARGET_FILE_NAME:MyApp&gt;.app. Specifying raw target names not wrapped in a generator epxression like &lt;TARGET_FILE_NAME:&gt; is not supported.</db:para>
<db:para>It may also be desirable to install dependencies for other binaries related to the executable. For example, plugins provided by the project might have further dependencies, but because those plugins won't be linked directly to the executable, qt_deploy_runtime_dependencies() won't automatically discover them. The ADDITIONAL_EXECUTABLES, ADDITIONAL_LIBRARIES, and ADDITIONAL_MODULES options can be used to specify additional binaries whose dependencies should also be deployed (installing the named binaries themselves is still the project's responsibility). The naming of these keywords follows CMake's conventions, so Qt plugins would be specified using ADDITIONAL_MODULES. Each value should be a path relative to the base install location. The values can use generator expressions, same as with the EXECUTABLE option. Specifying raw target names not wrapped in a generator epxression like &lt;TARGET_FILE_NAME:&gt; is not supported.</db:para>
<db:para>When installing a Windows application, it is common to need a <db:link xlink:href="qt-conf.xml">qt.conf</db:link> file when following CMake's default install directory structure. If the GENERATE_QT_CONF option is given, an appropriate qt.conf file will be written to the same directory as the executable. The paths in that qt.conf file will be based on the CMAKE_INSTALL_xxxDIR variables, whose defaults are provided by CMake's <db:link xlink:href="https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html">GNUInstallDirs</db:link> module. You can override some of those defaults with the BIN_DIR, LIB_DIR, PLUGINS_DIR, and QML_DIR options, all of which are expected to be relative to the base install location. A qt.conf file is always written if executable is a macOS app bundle, regardless of whether or not GENERATE_QT_CONF is provided. The ..._DIR options are also ignored in that case, since the directory layout of an app bundle is dictated by Apple's requirements.</db:para>
<db:para>More verbose output about the deployment steps can be enabled by providing the VERBOSE option. Alternatively, the <db:link xlink:href="cmake-variable-qt-enable-verbose-deployment.xml">QT_ENABLE_VERBOSE_DEPLOYMENT</db:link> variable can be set in the project before the first find_package(Qt6) call to make deployment output verbose by default.</db:para>
<db:para>The qt_deploy_runtime_dependencies() command overwrites existing files by default (some warnings may still be issued). Use the NO_OVERWRITE option to prevent overwriting existing files. Note that this option currently only affects macOS and Windows deployments.</db:para>
<db:para>By default, if executable is a macOS app bundle, only Qt plugins and Qt libraries that comply with Apple's app store requirements are deployed. The NO_APP_STORE_COMPLIANCE option can be given to disable that constraint.</db:para>
<db:para>On platforms other than macOS, Qt translations are automatically deployed. To inhibit this behavior, specify NO_TRANSLATIONS. Use <db:link xlink:href="qt-deploy-translations.xml">qt_deploy_translations()</db:link> to deploy translations in a customized way.</db:para>
<db:para>For Windows desktop applications, the required runtime files for the compiler are also installed by default. To prevent this, specify NO_COMPILER_RUNTIME.</db:para>
<db:para>On Linux, deploying runtime dependencies is based on CMake's file(GET_RUNTIME_DEPENDENCIES) command. The options PRE_INCLUDE_REGEXES, PRE_EXCLUDE_REGEXES, POST_INCLUDE_REGEXES, POST_EXCLUDE_REGEXES, POST_INCLUDE_FILES, and POST_EXCLUDE_FILES are only meaningful in this context and are forwarded unaltered to file(GET_RUNTIME_DEPENDENCIES). See the documentation of that command for details.</db:para>
<db:para>On Linux, runtime dependencies that are located in system library directories are not deployed by default. If POST_EXCLUDE_REGEXES is specified, this automatic exclusion is not performed.</db:para>
<db:para>The default value of POST_EXCLUDE_REGEXES is constructed from the value of <db:link xlink:href="cmake-variable-qt-deploy-ignored-lib-dirs.xml">QT_DEPLOY_IGNORED_LIB_DIRS</db:link>.</db:para>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:programlisting language="cpp" role="bad">cmake_minimum_required(VERSION 3.16...3.22)
project(MyThings)

find_package(Qt6 REQUIRED COMPONENTS Core)
qt_standard_project_setup()

qt_add_executable(MyApp main.cpp)

set_target_properties(MyApp PROPERTIES
    WIN32_EXECUTABLE TRUE
    MACOSX_BUNDLE TRUE
)

# App bundles on macOS have an .app suffix
if(APPLE)
    set(executable_path &quot;$&amp;lt;TARGET_FILE_NAME:MyApp&amp;gt;.app&quot;)
else()
    set(executable_path &quot;\${QT_DEPLOY_BIN_DIR}/$&amp;lt;TARGET_FILE_NAME:MyApp&amp;gt;&quot;)
endif()

# Helper app, not necessarily built as part of this project.
qt_add_executable(HelperApp helper.cpp)
set(helper_app_path &quot;\${QT_DEPLOY_BIN_DIR}/$&amp;lt;TARGET_FILE_NAME:HelperApp&amp;gt;&quot;)

# Generate a deployment script to be executed at install time
qt_generate_deploy_script(
    TARGET MyApp
    OUTPUT_SCRIPT deploy_script
    CONTENT &quot;
qt_deploy_runtime_dependencies(
    EXECUTABLE \&quot;${executable_path}\&quot;
    ADDITIONAL_EXECUTABLES \&quot;${helper_app_path}\&quot;
    GENERATE_QT_CONF
    VERBOSE
)&quot;)

# Omitting RUNTIME DESTINATION will install a non-bundle target to CMAKE_INSTALL_BINDIR,
# which coincides with the default value of QT_DEPLOY_BIN_DIR used above, './bin'.
# Installing macOS bundles always requires an explicit BUNDLE DESTINATION option.
install(TARGETS MyApp HelperApp    # Install to CMAKE_INSTALL_PREFIX/bin/MyApp.exe
                                   #                           and ./binHelperApp.exe
        BUNDLE  DESTINATION .      # Install to CMAKE_INSTALL_PREFIX/MyApp.app/Contents/MacOS/MyApp
)
install(SCRIPT ${deploy_script})    # Add its runtime dependencies
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-generate-deploy-app-script.xml">qt_generate_deploy_app_script()</db:link></db:member>
<db:member><db:link xlink:href="qt-deploy-qt-conf.xml">qt_deploy_qt_conf()</db:link></db:member>
<db:member><db:link xlink:href="qt-deploy-qml-imports.xml">qt_deploy_qml_imports()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
