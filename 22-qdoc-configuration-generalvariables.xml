<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Generic Configuration Variables</db:title>
<db:productname>QDoc</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="21-0-qdoc-configuration.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="The QDoc Configuration File"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="22-creating-help-project-files.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Creating Help Project Files"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>With the general QDoc configuration variables, you can define where QDoc will find the various source files it needs to generate the documentation, as well as the directory to put the generated documentation. You can also do some minor manipulation of QDoc itself, controlling its output and processing behavior.</db:para>
<db:anchor xml:id="alias-variable"/>
<db:section xml:id="alias">
<db:title>alias</db:title>
<db:para>The alias variable renames a QDoc command.</db:para>
<db:para>The general syntax is <db:code>alias.<db:emphasis>original-command-name</db:emphasis> = <db:emphasis>temporary-command-name</db:emphasis></db:code>.</db:para>
<db:programlisting language="cpp" role="bad">alias.e = i
</db:programlisting>
<db:para>This renames the built-in command \e (italics) to be \i. The alias variable is often used for compatibility reasons.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#macro-variable">macro</db:link>.</db:para>
<db:anchor xml:id="codeindent-variable"/>
</db:section>
<db:section xml:id="codeindent">
<db:title>codeindent</db:title>
<db:para>The codeindent variable specifies the level of indentation that QDoc uses when writing code snippets.</db:para>
<db:para>QDoc originally used a hard-coded value of four spaces for code indentation to ensure that code snippets could be easily distinguished from surrounding text. Since we can use <db:link xlink:href="24-qdoc-configuration-htmlvariables.xml#html-stylesheets">stylesheets</db:link> to adjust the appearance of certain types of HTML elements, this level of indentation is not always required.</db:para>
<db:anchor xml:id="codeprefix-variable"/>
<db:anchor xml:id="codesuffix-variable"/>
</db:section>
<db:section xml:id="codeprefix-codesuffix">
<db:title>codeprefix, codesuffix</db:title>
<db:para>The codeprefix and codesuffix variables specify a pair of strings that each code snippet is enclosed in.</db:para>
<db:anchor xml:id="defines-variable"/>
</db:section>
<db:section xml:id="defines">
<db:title>defines</db:title>
<db:para>The defines variable specifies the C++ preprocessor symbols that QDoc will recognize and respond to.</db:para>
<db:para>When a preprocessor symbol is specified using the defines variable, you can also use the <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#if-command">\if</db:link> command to enclose documentation that only will be included if the preprocessor symbol is defined.</db:para>
<db:programlisting language="cpp" role="bad">defines = QT_GUI_LIB
</db:programlisting>
<db:para>This ensures that QDoc will process the code that requires these symbols to be defined. For example:</db:para>
<db:programlisting language="cpp">#ifdef Q_GUI_LIB
void keyClick(QWidget *widget, Qt::Key key, Qt::KeyboardModifiers modifier = Qt::NoModifier, int delay = -1)
#endif
</db:programlisting>
<db:para>You can also define preprocessor symbols manually on the command line using the -D option. For example:</db:para>
<db:programlisting language="cpp" role="bad">currentdirectory$ qdoc -Dqtforpython qtgui.qdocconf
</db:programlisting>
<db:para>In this case the -D option ensures that the qtforpython preprocessor symbol is defined when QDoc processes the source files defined in the qtgui.qdocconf file.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#falsehoods-variable">falsehoods</db:link> and <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#if-command">\if</db:link>.</db:para>
<db:anchor xml:id="depends-variable"/>
</db:section>
<db:section xml:id="depends">
<db:title>depends</db:title>
<db:para>The depends variable defines a list of other documentation projects that this project depends on for resolving link targets for type inheritance and anything else the documentation needs to link to.</db:para>
<db:para>Like Qt itself, documentation for Qt is distributed across multiple modules. In a multi-module documentation project, the minimum set of dependencies for a single module consists of actual build dependencies. In addition, if there is a documentation project (module) that acts as a top-level entry point for the entire documentation set and provides <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#navigation-variable">navigation</db:link> links, each module documentation should include it as a dependency.</db:para>
<db:para>When QDoc generates documentation for a project, it will also generate an .index file containing URLs to each linkable entity in the project. Each dependency is a (lowercase) name of a project. This name must match with the base name of the index file generated for that project.</db:para>
<db:programlisting language="cpp" role="bad">depends = \
    qtdoc \
    qtcore \
    qtquick
</db:programlisting>
<db:para>When invoking QDoc on a project that has dependencies and uses the depends variable, one or more -indexdir path(s) must be passed as command line option(s). QDoc uses these paths to search for the dependencies' index files.</db:para>
<db:programlisting language="cpp" role="bad">qdoc mydoc.qdocconf -outputdir $PWD/html -indexdir $QT_INSTALL_DOCS
</db:programlisting>
<db:para>With above, QDoc will search for a file $QT_INSTALL_DOCS/qtdoc/qtdoc.index for a dependency to qtdoc. If an index file for a dependency is not found, QDoc will output a warning.</db:para>
<db:para>The depends command accepts also a special value of '*'. This instructs QDoc to load all index files found in specified index directories; that is, &quot;depends on everything&quot;.</db:para>
<db:programlisting language="cpp" role="bad">depends = *
</db:programlisting>
<db:para>See also <db:link xlink:href="25-qdoc-configuration-derivedprojects.xml#indexes">indexes</db:link>, <db:link xlink:href="25-qdoc-configuration-derivedprojects.xml#project">project</db:link>, and <db:link xlink:href="stylesheet-reference.xml#url">url</db:link>.</db:para>
<db:anchor xml:id="exampledirs-variable"/>
</db:section>
<db:section xml:id="exampledirs">
<db:title>exampledirs</db:title>
<db:para>The exampledirs variable specifies the directories containing the source code of the example files.</db:para>
<db:para>The <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#examples-variable">examples</db:link> and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs-variable">exampledirs</db:link> variables are used by the <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#quotefromfile-command">\quotefromfile</db:link>, <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#quotefile-command">\quotefile</db:link> and <db:link xlink:href="13-qdoc-commands-topics.xml#example-command">\example</db:link> commands. If both the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#examples-variable">examples</db:link> and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs-variable">exampledirs</db:link> variables are defined, QDoc will search in both, first in <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#examples-variable">examples</db:link> then in <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs-variable">exampledirs</db:link>.</db:para>
<db:para>QDoc will search through the directories in the specified order, and accept the first matching file it finds. It will only search in the specified directories, <db:emphasis>not</db:emphasis> in subdirectories.</db:para>
<db:programlisting language="cpp" role="bad">exampledirs = $QTDIR/doc/src \
              $QTDIR/examples \
              $QTDIR \
              $QTDIR/qmake/examples

examples    = $QTDIR/examples/widgets/analogclock/analogclock.cpp
</db:programlisting>
<db:para>When processing</db:para>
<db:programlisting language="cpp" role="bad">\quotefromfile widgets/calculator/calculator.cpp
</db:programlisting>
<db:para>QDoc will see if there is a file called calculator.cpp listed as a value in the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#examples-variable">examples</db:link> variable. If there isn't, it will search in the exampledirs variable, and first see if there exists a file called</db:para>
<db:programlisting language="cpp" role="bad">$QTDIR/doc/src/widgets/calculator/calculator.cpp
</db:programlisting>
<db:para>If it doesn't, QDoc will continue looking for a file called</db:para>
<db:programlisting language="cpp" role="bad">$QTDIR/examples/widgets/calculator/calculator.cpp
</db:programlisting>
<db:para>and so forth.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#examples-variable">examples</db:link>.</db:para>
<db:anchor xml:id="examples-variable"/>
</db:section>
<db:section xml:id="examples">
<db:title>examples</db:title>
<db:para>The examples variable allows you to specify individual example files in addition to those located in the directories specified by the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs-variable">exampledirs</db:link> variable.</db:para>
<db:para>The examples and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs-variable">exampledirs</db:link> variables are used by the <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#quotefromfile-command">\quotefromfile</db:link>, <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#quotefile-command">\quotefile</db:link> and <db:link xlink:href="13-qdoc-commands-topics.xml#example-command">\example</db:link> commands. If both the examples and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs-variable">exampledirs</db:link> variables are defined, QDoc will search in both, first in examples then in <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs-variable">exampledirs</db:link>.</db:para>
<db:para>QDoc will search through the values listed for the examples variable, in the specified order, and accept the first one it finds.</db:para>
<db:para>For an extensive example, see the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs-variable">exampledirs</db:link> command. But note that if you know the file is listed in the examples variable, you don't need to specify its path:</db:para>
<db:programlisting language="cpp" role="bad">\quotefromfile calculator.cpp
</db:programlisting>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs-variable">exampledirs</db:link>.</db:para>
<db:anchor xml:id="examplesinstallpath-variable"/>
</db:section>
<db:section xml:id="examplesinstallpath">
<db:title>examplesinstallpath</db:title>
<db:para>The examplesinstallpath variable sets the root path for this project's examples under the <db:emphasis>installed</db:emphasis> example directory.</db:para>
<db:para>Assuming a root install path of QT_INSTALL_EXAMPLES for all examples, then the path</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;QT_INSTALL_EXAMPLES&amp;gt;/&amp;lt;examplesinstallpath&amp;gt;/&amp;lt;example_path&amp;gt;
</db:programlisting>
<db:para>will be used to refer to a path of a single example within this documentation project. These paths are recorded in the <db:link xlink:href="26-qdoc-configuration-example-manifest-files.xml">example manifest file</db:link>, read by Qt Creator.</db:para>
<db:para>To ensure correct paths, examplesinstallpath must match with one of the directories listed in <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs-variable">exampledirs</db:link>. The path passed as an argument for each <db:link xlink:href="13-qdoc-commands-topics.xml#example-command">\example</db:link> command is relative to the path in <db:emphasis>exampledirs</db:emphasis>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp" role="bad">exampledirs = ./snippets \
              ../../../examples/mymodule

examplesinstallpath = mymodule
</db:programlisting>
<db:para>And given a following \example command:</db:para>
<db:programlisting language="cpp" role="bad">/*!
    \example basic/hello
    ...
*/
</db:programlisting>
<db:para>Then, the path mymodule/basic/hello is recorded in the manifest file for this example.</db:para>
<db:note>
<db:para>It is possible to override examplesinstallpath for an individual <db:link xlink:href="13-qdoc-commands-topics.xml#example-command">\example</db:link> using the <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#meta-command">\meta</db:link> command.</db:para>
</db:note>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs">exampledirs</db:link>, <db:link xlink:href="13-qdoc-commands-topics.xml#example-command">\example</db:link>, and <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#meta-command">\meta</db:link>.</db:para>
<db:anchor xml:id="examples-fileextensions-variable"/>
</db:section>
<db:section xml:id="examples-fileextensions">
<db:title>examples.fileextensions</db:title>
<db:para>The examples.fileextensions variable specifies the file extensions that QDoc will look for when collecting example files for display in the documentation.</db:para>
<db:para>The default extensions are *.cpp, *.h, *.js, *.xq, *.svg, *.xml and *.ui.</db:para>
<db:para>The extensions are given as standard wildcard expressions. You can add a file extension to the filter using '+='. For example:</db:para>
<db:programlisting language="cpp" role="bad">examples.fileextensions += *.qrc
</db:programlisting>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#headers-fileextensions">headers.fileextensions</db:link>.</db:para>
<db:anchor xml:id="excludedirs-variable"/>
</db:section>
<db:section xml:id="excludedirs">
<db:title>excludedirs</db:title>
<db:para>The excludedirs variable is for listing directories that should <db:emphasis>not</db:emphasis> be processed by QDoc, even if the same directories are included by the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sourcedirs-variable">sourcedirs</db:link> or <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#headerdirs-variable">headerdirs</db:link> variables.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp" role="bad">sourcedirs =  src/corelib
excludedirs = src/corelib/tmp
</db:programlisting>
<db:para>When executed, QDoc will exclude the listed directories from further consideration. Files in these directories will not be read by QDoc.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#excludefiles-variable">excludefiles</db:link>.</db:para>
<db:anchor xml:id="excludefiles-variable"/>
</db:section>
<db:section xml:id="excludefiles">
<db:title>excludefiles</db:title>
<db:para>The excludefiles variable allows you to specify individual files that should <db:emphasis>not</db:emphasis> be processed by QDoc.</db:para>
<db:programlisting language="cpp" role="bad">excludefiles += $QT_CORE_SOURCES/../../src/widgets/kernel/qwidget.h \
                $QT_CORE_SOURCES/../../src/widgets/kernel/qwidget.cpp
</db:programlisting>
<db:para>If you include the above in your qdocconf file for qtbase, there will be no class documentation generated for <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
<db:para>Since Qt 5.6, also simple wildcards ('*' and '?') are recognized by excludefiles. For example, to exclude all private Qt header files from being parsed, define the following:</db:para>
<db:programlisting language="cpp" role="bad">excludefiles += &quot;*_p.h&quot;
</db:programlisting>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#excludedirs-variable">excludedirs</db:link>.</db:para>
<db:anchor xml:id="extraimages-variable"/>
</db:section>
<db:section xml:id="extraimages">
<db:title>extraimages</db:title>
<db:para>The extraimages variable tells QDoc to incorporate specific images in the generated documentation.</db:para>
<db:para>QDoc will not recognize images used within HTML (or any other markup language). If we want the images to be copied from the directories specified by <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#imagedirs">imagedirs</db:link> (the images in question must be located in these directories) to the output directory, we must specify the images using the extraimages variable.</db:para>
<db:para>The general syntax is <db:code>extraimages.<db:emphasis>format</db:emphasis> = <db:emphasis>image</db:emphasis></db:code>. The file extension is optional.</db:para>
<db:para>For example, in <db:link xlink:href="21-2-qtgui-qdocconf.xml">qtgui.qdocconf</db:link> we use a couple of images within the HTML.postheader variable which value is pure HTML. For that reason, these images are specified using the extraimages variable:</db:para>
<db:programlisting language="cpp" role="bad">extraimages.HTML = qt-logo
</db:programlisting>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#images">images</db:link> and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#imagedirs">imagedirs</db:link>.</db:para>
<db:anchor xml:id="falsehoods-variable"/>
</db:section>
<db:section xml:id="falsehoods">
<db:title>falsehoods</db:title>
<db:para>The falsehoods variable defines the truth value of specified preprocessor symbols as false.</db:para>
<db:para>The values of the variable are regular expressions (see <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> for details). If this variable is not set for a preprocessor symbol, QDoc assumes its truth value is true. The exception is '0', which is always false.</db:para>
<db:para>QDoc will recognize, and is able to evaluate, the following preprocessor syntax:</db:para>
<db:programlisting language="cpp">#ifdef NOTYET
 ...
#endif

#if defined (NOTYET)
 ...
#end if
</db:programlisting>
<db:para>However, faced with unknown syntax like</db:para>
<db:programlisting language="cpp">#if NOTYET
    ...
#endif
</db:programlisting>
<db:para>QDoc will evaluate it as true by default, <db:emphasis>unless</db:emphasis> the preprocessor symbol is specified within the falsehoods variable entry:</db:para>
<db:programlisting language="cpp" role="bad">falsehoods = NOTYET
</db:programlisting>
<db:para>See also <db:link xlink:href="qmake-variable-reference.xml#defines">defines</db:link>.</db:para>
<db:anchor xml:id="generateindex-variable"/>
</db:section>
<db:section xml:id="generateindex">
<db:title>generateindex</db:title>
<db:para>The generateindex variable contains a boolean value that specifies whether to generate an index file when HTML documentation is generated.</db:para>
<db:para>By default, an index file is always generated with HTML documentation, so this variable is typically only used when disabling this feature (by setting the value to false) or when enabling index generation for the WebXML output (by setting the value to true).</db:para>
<db:anchor xml:id="headerdirs-variable"/>
</db:section>
<db:section xml:id="headerdirs">
<db:title>headerdirs</db:title>
<db:para>The headerdirs variable specifies the directories containing the header files associated with the .cpp source files used in the documentation.</db:para>
<db:programlisting language="cpp" role="bad">headerdirs = $QTDIR/src \
             $QTDIR/extensions/activeqt \
             $QTDIR/extensions/motif \
             $QTDIR/tools/designer/src/lib/extension \
             $QTDIR/tools/designer/src/lib/sdk \
             $QTDIR/tools/designer/src/lib/uilib
</db:programlisting>
<db:para>When executed, the first thing QDoc will do is to read through the headers specified in the <db:link xlink:href="qmake-variable-reference.xml#headers">headers</db:link> variable, and the ones located in the directories specified in the headerdir variable (including all subdirectories), building an internal structure of the classes and their functions.</db:para>
<db:para>Then it will read through the sources specified in the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sources-variable">sources</db:link>, and the ones located in the directories specified in the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sourcedirs-variable">sourcedirs</db:link> varible (including all subdirectories), merging the documentation with the structure it retrieved from the header files.</db:para>
<db:para>If both the headers and headerdirs variables are defined, QDoc will read through both, first <db:link xlink:href="qmake-variable-reference.xml#headers">headers</db:link> then headerdirs.</db:para>
<db:para>In the specified directories, QDoc will only read the files with the fileextensions specified in the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#headers-fileextensions">headers.fileextensions</db:link> variable. The files specified by <db:link xlink:href="qmake-variable-reference.xml#headers">headers</db:link> will be read without taking into account their fileextensions.</db:para>
<db:para>See also <db:link xlink:href="qmake-variable-reference.xml#headers">headers</db:link> and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#headers-fileextensions">headers.fileextensions</db:link>.</db:para>
<db:anchor xml:id="headers-variable"/>
</db:section>
<db:section xml:id="headers">
<db:title>headers</db:title>
<db:para>The headers variable allows you to specify individual header files in addition to those located in the directories specified by the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#headerdirs">headerdirs</db:link> variable.</db:para>
<db:programlisting language="cpp" role="bad">headers = $QTDIR/src/gui/widgets/qlineedit.h \
          $QTDIR/src/gui/widgets/qpushbutton.h
</db:programlisting>
<db:para>When processing the headers variable, QDoc behaves in the same way as it does when processing the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#headerdirs">headerdirs</db:link> variable. For more information, see the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#headerdirs">headerdirs</db:link> variable.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#headerdirs">headerdirs</db:link>.</db:para>
<db:anchor xml:id="headers-fileextensions-variable"/>
</db:section>
<db:section xml:id="headers-fileextensions">
<db:title>headers.fileextensions</db:title>
<db:para>The headers.fileextensions variable specify the extension used by the headers.</db:para>
<db:para>When processing the header files specified in the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#headerdirs">headerdirs</db:link> variable, QDoc will only read the files with the fileextensions specified in the headers.fileextensions variable. In this way QDoc avoids spending time reading irrelevant files.</db:para>
<db:para>The default extensions are *.ch, *.h, *.h++, *.hh, *.hpp, and *.hxx.</db:para>
<db:para>The extensions are given as standard wildcard expressions. You can add a file extension to the filter using '+='. For example:</db:para>
<db:programlisting language="cpp" role="bad">header.fileextensions += *.H
</db:programlisting>
<db:warning>
<db:para>The above assignment may not work as described.</db:para>
</db:warning>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#headerdirs">headerdirs</db:link>.</db:para>
<db:anchor xml:id="includepaths-variable"/>
</db:section>
<db:section xml:id="includepaths">
<db:title>includepaths</db:title>
<db:para>The includepaths variable is used for passing additional include paths to the Clang parser that QDoc uses for parsing C++ code for documentation comments.</db:para>
<db:para>The variable accepts a list of paths, prefixed with -I (include path), -F (macOS framework include path), or -isystem (system include path). If a prefix is omitted, -I is used by default.</db:para>
<db:para>Paths relative to the current .qdocconf file are resolved into absolute paths. Paths that do not exist in the file system are ignored.</db:para>
<db:note>
<db:para>For Qt documentation projects, the build system typically provides the required include paths as command line arguments when invoking QDoc.</db:para>
</db:note>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#moduleheader">moduleheader</db:link>.</db:para>
<db:anchor xml:id="ignorewords-variable"/>
</db:section>
<db:section xml:id="ignorewords">
<db:title>ignorewords</db:title>
<db:para>The ignorewords variable is used for specifying a list of strings that QDoc will ignore when resolving hyperlink targets.</db:para>
<db:para>QDoc has an auto-linking feature, where linking is attempted for words that resemble C++ or QML entities. Specifically, a string qualifies for auto-linking if it is at least three characters in length, has no whitespace, and it</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>is a <db:emphasis>camelCase</db:emphasis> word, that is, it contains at least one uppercase character at index greater than zero, or</db:para>
</db:listitem>
<db:listitem>
<db:para>contains the substring () or ::, or</db:para>
</db:listitem>
<db:listitem>
<db:para>contains at least one special character, @ or _.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Adding a qualified word to ignorewords stops QDoc from linking that word automatically. For example, if the word <db:emphasis>OpenGL</db:emphasis> is a valid link target (a section, <db:link xlink:href="13-qdoc-commands-topics.xml#page-command">\page</db:link>, or <db:link xlink:href="13-qdoc-commands-topics.xml#externalpage-command">\externalpage</db:link> title), a hyperlink for each occurrence can be avoided with</db:para>
<db:programlisting language="cpp" role="bad">ignorewords += OpenGL
</db:programlisting>
<db:para>Linking explicitly with <db:link xlink:href="08-qdoc-commands-creatinglinks.xml#l-command">\l</db:link> continues to work for ignored words.</db:para>
<db:para>The ignorewords variable was introduced in QDoc 5.14.</db:para>
<db:anchor xml:id="ignoresince-variable"/>
</db:section>
<db:section xml:id="ignoresince">
<db:title>ignoresince</db:title>
<db:para>The ignoresince variable is used for setting a cutoff value for versions passed to the <db:link xlink:href="16-qdoc-commands-status.xml#since-command">\since</db:link> command. All \since commands that define a version lower than the cutoff are ignored and do not generate output.</db:para>
<db:para>The cutoff values are project-specific. The project name can be defined as a subvariable. The default project name is <db:emphasis>Qt</db:emphasis>. For example:</db:para>
<db:programlisting language="cpp" role="bad">ignoresince      = 5.0
ignoresince.QDoc = 5.0
</db:programlisting>
<db:para>These will ignore \since commands where the major version is 4 or lower and the project is either QDoc or undefined.</db:para>
<db:programlisting language="cpp" role="bad">\since 3.2          # Ignored
\since 5.2          # Documented (as 'Qt 5.2')
\since QDoc 4.6     # Ignored
\since QtQuick 2.5  # Documented
</db:programlisting>
<db:para>The ignoresince variable was introduced in QDoc 5.15.</db:para>
<db:para>See also <db:link xlink:href="16-qdoc-commands-status.xml#since-command">\since</db:link>.</db:para>
<db:anchor xml:id="imagedirs-variable"/>
</db:section>
<db:section xml:id="imagedirs">
<db:title>imagedirs</db:title>
<db:para>The imagedirs variable specifies the directories containing the images used in the documentation.</db:para>
<db:para>The <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#images">images</db:link> and imagedirs variables are used by the <db:link xlink:href="09-qdoc-commands-includingimages.xml#image-command">\image</db:link> and <db:link xlink:href="09-qdoc-commands-includingimages.xml#inlineimage-command">\inlineimage</db:link> commands. If both the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#images">images</db:link> and imagedirs variables are defined, QDoc will search in both. First in <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#images">images</db:link>, then in imagedirs.</db:para>
<db:para>QDoc will search through the directories in the specified order, and accept the first matching file it finds. It will only search in the specified directories, <db:emphasis>not</db:emphasis> in subdirectories.</db:para>
<db:programlisting language="cpp" role="bad">imagedirs = $QTDIR/doc/src/images \
            $QTDIR/examples

images    = $QTDIR/doc/src/images/calculator-example.png
</db:programlisting>
<db:para>When processing</db:para>
<db:programlisting language="cpp" role="bad">\image calculator-example.png
</db:programlisting>
<db:para>QDoc will then see if there is a file called calculator-example.png listed as a value in the images variable. If there isn't, it will search in the imagedirs variable for:</db:para>
<db:programlisting language="cpp" role="bad">$QTDIR/doc/src/images/calculator-example.png
</db:programlisting>
<db:para>If the file doesn't exist, QDoc will look for a file called</db:para>
<db:programlisting language="cpp" role="bad">$QTDIR/examples/calculator-example.png
</db:programlisting>
<db:para>You can filter the images in an image directory using the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#images-fileextensions">images.fileextensions</db:link> variable. The general idea behind the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#images-fileextensions">images.fileextensions</db:link> variable is to enable different image format for different output format.</db:para>
<db:warning>
<db:para>The <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#images-fileextensions">images.fileextensions</db:link> variable's functionality is preliminary since QDoc at this point only supports HTML.</db:para>
</db:warning>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#images">images</db:link> and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#images-fileextensions">images.fileextensions</db:link>.</db:para>
<db:anchor xml:id="images-variable"/>
</db:section>
<db:section xml:id="images">
<db:title>images</db:title>
<db:para>The images variable allows you to specify individual image files in addition to those located in the directories specified by the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#imagedirs">imagedirs</db:link> variable.</db:para>
<db:programlisting language="cpp" role="bad">images = $QTDIR/doc/src/images/calculator-example.png
</db:programlisting>
<db:para>When processing the images variable, QDoc behaves in the same way as it does when processing the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#imagedirs">imagedirs</db:link> variable. For more information, see the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#imagedirs">imagedirs</db:link> variable.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#imagedirs">imagedirs</db:link> and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#images-fileextensions">images.fileextensions</db:link>.</db:para>
<db:anchor xml:id="images-fileextensions-variable"/>
</db:section>
<db:section xml:id="images-fileextensions">
<db:title>images.fileextensions</db:title>
<db:para>The images.fileextensions variable filters the files within an image directory.</db:para>
<db:para>The variable's values (the extensions) are given as standard wildcard expressions. The general syntax is: <db:code>images.fileextensions.<db:emphasis>format</db:emphasis> = *.<db:emphasis>extension</db:emphasis></db:code>.</db:para>
<db:para>The idea is to enable different image format for different output format.</db:para>
<db:programlisting language="cpp" role="bad">images.fileextensions.HTML = *.png
images.fileextensions.LOUT = *.eps
</db:programlisting>
<db:para>Then, when processing the <db:link xlink:href="09-qdoc-commands-includingimages.xml#image-command">\image</db:link> and <db:link xlink:href="09-qdoc-commands-includingimages.xml#inlineimage-command">\inlineimage</db:link> commands, QDoc will only search for files with extensions specified in the variable containing the list of output formats.</db:para>
<db:warning>
<db:para>This is only a preliminary functionality since QDoc at this point only supports HTML.</db:para>
</db:warning>
<db:para>The default extensions for HTML are *.png, *.jpg, *.jpeg, and *.gif.</db:para>
<db:para>You can add a file extension to the filter using '+='. For example:</db:para>
<db:programlisting language="cpp" role="bad">images.fileextensions.HTML += *.eps
</db:programlisting>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#imagedirs">imagedirs</db:link> and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#images">images</db:link>.</db:para>
<db:anchor xml:id="language-variable"/>
</db:section>
<db:section xml:id="language">
<db:title>language</db:title>
<db:para>The language variable specifies the language of the source code that is used in the documentation.</db:para>
<db:para>Currently, C++ is the only language that QDoc understands. It is also the default language, and doesn't really need to be specified. However, a possible example of a language variable statement:</db:para>
<db:programlisting language="cpp" role="bad">language = Cpp
</db:programlisting>
<db:para>This identifies C++ as the language of the Qt source code.</db:para>
<db:anchor xml:id="locationinfo-variable"/>
</db:section>
<db:section xml:id="locationinfo">
<db:title>locationinfo</db:title>
<db:para>The locationinfo boolean variable determines whether detailed location information about each entity is written to .index-files and .webxml-files (when using the WebXML output format).</db:para>
<db:para>Location information consists of the full path and line number of either the declaration or documentation comment block in the source code.</db:para>
<db:para>Setting this to false turns off location info:</db:para>
<db:programlisting language="cpp" role="bad">locationinfo = false
</db:programlisting>
<db:para>The default value is true.</db:para>
<db:para>The locationinfo variable was introduced in QDoc 5.15.</db:para>
<db:anchor xml:id="macro-variable"/>
</db:section>
<db:section xml:id="macro">
<db:title>macro</db:title>
<db:para>The macro variable is used to create your own simple QDoc commands. The syntax is <db:code>macro.<db:emphasis>command</db:emphasis> = <db:emphasis>definition</db:emphasis></db:code>, where the definition is written using QDoc syntax.</db:para>
<db:para>A macro variable can be restricted for use in one type of output generation. By appending .HTML to the macro name, for example, the macro is only used when generating HTML output.</db:para>
<db:programlisting language="cpp" role="bad">macro.gui              = &quot;\\b&quot;
macro.raisedaster.HTML = &quot;&amp;lt;sup&amp;gt;*&amp;lt;/sup&amp;gt;&quot;
</db:programlisting>
<db:para>The first macro defines the \gui command to render its argument using a bold font. The second macro defines the \raisedaster command to render a superscript asterisk, but only when generating HTML.</db:para>
<db:para>A macro can also take up to seven parameters:</db:para>
<db:programlisting language="cpp" role="bad">macro.hello            = &quot;Hello \1!&quot;
</db:programlisting>
<db:para>Parameters are passed to macros the same way as to other commands:</db:para>
<db:programlisting language="cpp" role="bad">\hello World
</db:programlisting>
<db:para>When using more than one parameter, or when an argument contains whitespace, enclose each argument in braces:</db:para>
<db:programlisting language="cpp" role="bad">macro.verinfo          = &quot;\1 (version \2)&quot;
</db:programlisting>
<db:programlisting language="cpp" role="bad">\verinfo {QFooBar} {1.0 beta}
</db:programlisting>
<db:para>A special macro option, <db:emphasis>match</db:emphasis>, can be added for additional regular expression pattern matching for expanded macros.</db:para>
<db:para>For example,</db:para>
<db:programlisting language="cpp" role="bad">macro.qtminorversion       = &quot;$QT_VER&quot;
macro.qtminorversion.match = &quot;\\d+\\.(\\d+)&quot;
</db:programlisting>
<db:para>This creates a macro \qtminorversion that expands to the minor version based on the QT_VER environment variable.</db:para>
<db:para>A macro that defines a match pattern outputs all capture groups (parentheses) concatenated together, or the exact matched string if the pattern does not contain any capture groups.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#alias-variable">alias</db:link>.</db:para>
<db:anchor xml:id="manifestmeta-variable"/>
</db:section>
<db:section xml:id="manifestmeta">
<db:title>manifestmeta</db:title>
<db:para>The manifestmeta variable specifies additional meta-content for the example manifest files generated by QDoc.</db:para>
<db:para>See the <db:link xlink:href="26-qdoc-configuration-example-manifest-files.xml#manifest-meta-content">Manifest Meta Content</db:link> section for more information.</db:para>
<db:anchor xml:id="moduleheader-variable"/>
</db:section>
<db:section xml:id="moduleheader">
<db:title>moduleheader</db:title>
<db:para>The moduleheader variable defines the name of the module header of a documented C++ module.</db:para>
<db:para>Projects that document C++ APIs require a module-level header that includes all public classes, namespaces and header files for the module. The Clang parser in QDoc uses this file to build a pre-compiled header (PCH) for the module to increase the speed of parsing source files.</db:para>
<db:para>By default, the <db:link xlink:href="25-qdoc-configuration-derivedprojects.xml#project-variable">project</db:link> name is used also as the module header name.</db:para>
<db:programlisting language="cpp" role="bad">project = QtCore
</db:programlisting>
<db:para>With the above project name, QDoc searches a module header <db:emphasis>QtCore</db:emphasis> in all known include paths; first using the paths passed as command line arguments, then the paths listed in the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#includepaths">includepaths</db:link> variable.</db:para>
<db:para>QDoc will issue a warning if the module header is not found. It will then attempt to build an artificial module header based on the headers listed in the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#headerdirs-variable">headerdirs</db:link> variable.</db:para>
<db:para>For Qt documentation projects, the build system typically provides QDoc with correct include paths to locate the module header, provided that the project variable is set correctly. The moduleheader variable provides an alternative file name for QDoc to search for.</db:para>
<db:para>If the project contains no C++ documentation, QDoc should be instructed to skip generating a PCH by setting moduleheader to an empty string:</db:para>
<db:programlisting language="cpp" role="bad"># No C++ code to document in this project
moduleheader =
</db:programlisting>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#includepaths">includepaths</db:link> and <db:link xlink:href="25-qdoc-configuration-derivedprojects.xml#project">project</db:link>.</db:para>
<db:anchor xml:id="naturallanguage-variable"/>
</db:section>
<db:section xml:id="naturallanguage">
<db:title>naturallanguage</db:title>
<db:para>The naturallanguage variable specifies the natural language used for the documentation generated by QDoc.</db:para>
<db:programlisting language="cpp" role="bad">naturallanguage = zh-Hans
</db:programlisting>
<db:para>By default, the natural language is en for compatibility with legacy documentation.</db:para>
<db:para>QDoc will add the natural language information to the HTML it generates, using the lang and xml:lang attributes.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sourceencoding-variable">sourceencoding</db:link>, <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#outputencoding-variable">outputencoding</db:link>, <db:link xlink:href="http://www.w3.org/TR/xhtml1/#C_7">C.7. The lang and xml:lang Attributes</db:link> and <db:link xlink:href="http://www.w3.org/TR/i18n-html-tech-lang/#ri20040429.113217290">Best Practice 13: Using Hans and Hant codes</db:link>.</db:para>
<db:anchor xml:id="navigation-variable"/>
</db:section>
<db:section xml:id="navigation">
<db:title>navigation</db:title>
<db:para>The navigation sub-variables, if defined, set the home page, landing page, C++ classes page, and QML types page that are visible in the generated navigation bar for each page.</db:para>
<db:para>In a project with multiple sub-projects (for example, Qt modules), each sub-project typically defines its own landing page while the same home page is used across all sub-projects.</db:para>
<db:para><db:emphasis role="bold">Sub-variables</db:emphasis></db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>navigation.homepage</db:para>
</db:td>
<db:td>
<db:para>Project home page.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>navigation.hometitle</db:para>
</db:td>
<db:td>
<db:para>(Optional) User-visible title for the home page. Default value is taken from homepage.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>navigation.landingpage</db:para>
</db:td>
<db:td>
<db:para>Sub-project landing page.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>navigation.landingtitle</db:para>
</db:td>
<db:td>
<db:para>(Optional) User-visible title for the landing page. Defaults value is taken from landingpage.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>navigation.cppclassespage</db:para>
</db:td>
<db:td>
<db:para>Top-level page that lists all C++ classes for this (sub-)project. Typically, the title of a <db:link xlink:href="13-qdoc-commands-topics.xml#module-command">\module</db:link> page.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>navigation.cppclassestitle</db:para>
</db:td>
<db:td>
<db:para>(Optional) User-visible title for the C++ classes page. Default is &quot;C++ Classes&quot;.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>navigation.qmltypespage</db:para>
</db:td>
<db:td>
<db:para>Top-level page that lists all QML types for this (sub-)project. Typically, the title of a <db:link xlink:href="13-qdoc-commands-topics.xml#qmlmodule-command">\qmlmodule</db:link> page.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>navigation.qmltypestitle</db:para>
</db:td>
<db:td>
<db:para>(Optional) User-visible title for the QML types page. Default is &quot;QML Types&quot;.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>navigation.toctitles (Since QDoc 6.0)</db:para>
</db:td>
<db:td>
<db:para>Page title(s) containing a <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#list-command">\list</db:link> structure that acts as a table of contents (TOC). QDoc generates navigation links for pages listed in the TOC, without the need for <db:link xlink:href="15-qdoc-commands-navigation.xml#nextpage-command">\nextpage</db:link> and <db:link xlink:href="15-qdoc-commands-navigation.xml#previouspage-command">\previouspage</db:link> commands, as well as a navigation hierarchy that's visible in the navigation bar (breadcrumbs) for HTML output.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>navigation.toctitles.inclusive (Since QDoc 6.3)</db:para>
</db:td>
<db:td>
<db:para>If set to true, page(s) listed in navigation.toctitles will also appear in the navigation bar as a root item.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example:</db:para>
<db:programlisting language="cpp" role="bad"># Common configuration
navigation.homepage  = index.html
navigation.hometitle = &quot;Qt $QT_VER&quot;

# qtquick.qdocconf
navigation.landingpage    = &quot;Qt Quick&quot;
navigation.cppclassespage = &quot;Qt Quick C++ Classes&quot;
navigation.qmltypespage   = &quot;Qt Quick QML Types&quot;
</db:programlisting>
<db:para>The above configuration produces the following navigation bar for Item QML type:</db:para>
<db:programlisting language="cpp" role="bad">Qt 5.10 &amp;gt; Qt Quick &amp;gt; QML Types &amp;gt; Item QML Type
</db:programlisting>
<db:anchor xml:id="outputdir-variable"/>
</db:section>
<db:section xml:id="outputdir">
<db:title>outputdir</db:title>
<db:para>The outputdir variable specifies the directory where QDoc will put the generated documentation.</db:para>
<db:programlisting language="cpp" role="bad">outputdir = $QTDIR/doc/html
</db:programlisting>
<db:para>locates the generated Qt reference documentation in $QTDIR/doc/html. For example, the documentation of the <db:link xlink:href="qwidget.xml">QWidget</db:link> class is located in</db:para>
<db:programlisting language="cpp" role="bad">$QTDIR/doc/html/qwidget.html
</db:programlisting>
<db:para>The associated images will be put in an images subdirectory.</db:para>
<db:warning>
<db:para>When running QDoc multiple times using the same output directory, all files from the previous run will be lost.</db:para>
</db:warning>
<db:anchor xml:id="outputencoding-variable"/>
</db:section>
<db:section xml:id="outputencoding">
<db:title>outputencoding</db:title>
<db:para>The outputencoding variable specifies the encoding used for the documentation generated by QDoc.</db:para>
<db:programlisting language="cpp" role="bad">outputencoding = UTF-8
</db:programlisting>
<db:para>By default, the output encoding is ISO-8859-1 (Latin1) for compatibility with legacy documentation. When generating documentation for some languages, particularly non-European languages, this is not sufficient and an encoding such as UTF-8 is required.</db:para>
<db:para>QDoc will encode HTML using this encoding and generate the correct declarations to indicate to browsers which encoding is being used. The <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#naturallanguage">naturallanguage</db:link> configuration variable should also be specified to provide browsers with a complete set of character encoding and language information.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#outputencoding">outputencoding</db:link> and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#naturallanguage">naturallanguage</db:link>.</db:para>
<db:anchor xml:id="outputformats-variable"/>
</db:section>
<db:section xml:id="outputformats">
<db:title>outputformats</db:title>
<db:para>The outputformats variable specifies the format(s) of the generated documentation.</db:para>
<db:para>Since Qt 5.11, QDoc supports the HTML and WebXML formats; since Qt 5.15, it can also generate the documentation in DocBook. If no outputformats are specified, QDoc generates the documentation in HTML (the default format). All output formats can be specified, with dedicated output directories and other settings. For example:</db:para>
<db:programlisting language="cpp" role="bad">outputformats = WebXML HTML
WebXML.nosubdirs = true
WebXML.outputsubdir = webxml
WebXML.quotinginformation = true
</db:programlisting>
<db:para>This generates HTML documentation using the default settings, as well as WebXML documentation into output subdirectory <db:emphasis>webxml</db:emphasis>.</db:para>
<db:anchor xml:id="outputprefixes-variable"/>
</db:section>
<db:section xml:id="outputprefixes">
<db:title>outputprefixes</db:title>
<db:para>The outputprefixes variable specifies a mapping between types of files and the prefixes to prepend to the HTML file names in the generated documentation.</db:para>
<db:programlisting language="cpp" role="bad">outputprefixes     = QML
outputprefixes.QML = uicomponents-
</db:programlisting>
<db:para>By default, files containing the API documentation for QML types are prefixed with &quot;qml-&quot;. In the above example, the prefix &quot;uicomponents&quot; is used instead.</db:para>
<db:para>The output prefix is applied to file names for documentation on QML.</db:para>
<db:anchor xml:id="outputsuffixes-variable"/>
</db:section>
<db:section xml:id="outputsuffixes">
<db:title>outputsuffixes</db:title>
<db:para>The outputsuffixes variable specifies a mapping between types of files and module name suffixes to append to the HTML file names.</db:para>
<db:programlisting language="cpp" role="bad">outputsuffixes     = QML
outputsuffixes.QML = -tp
</db:programlisting>
<db:para>Given a QML module name <db:emphasis>FooBar</db:emphasis> and the default <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#outputprefixes-variable">output prefix</db:link> (&quot;qml-&quot;), the file name of the generated HTML page for a QML type <db:emphasis>FooWidget</db:emphasis> would be qml-foobar-tp-foowidget.html.</db:para>
<db:para>By default, no suffix is used. The output suffix, if defined, is applied to file names for documentation on QML and its module page.</db:para>
<db:para>The outputsuffixes variable was introduced in QDoc 5.6.</db:para>
<db:anchor xml:id="qhp-variable"/>
</db:section>
<db:section xml:id="qhp">
<db:title>qhp</db:title>
<db:para>The qhp variable is used to define the information to be written out to Qt Help Project (qhp) files.</db:para>
<db:para>See the <db:link xlink:href="22-creating-help-project-files.xml">Creating Help Project Files</db:link> chapter for information about this process.</db:para>
<db:anchor xml:id="sourcedirs-variable"/>
</db:section>
<db:section xml:id="sourcedirs">
<db:title>sourcedirs</db:title>
<db:para>The sourcedirs variable specifies the directories containing the .cpp or .qdoc files used in the documentation.</db:para>
<db:programlisting language="cpp" role="bad">sourcedirs  += .. \
               ../../../examples/gui/doc/src
</db:programlisting>
<db:para>When executed, the first thing QDoc will do is to read through the headers specified in the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#header-command">header</db:link> variable, and the ones located in the directories specified in the headerdir variable (including all subdirectories), building an internal structure of the classes and their functions.</db:para>
<db:para>Then it will read through the sources specified in the <db:link xlink:href="qmake-variable-reference.xml#sources">sources</db:link>, and the ones located in the directories specified in the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sourcedirs">sourcedirs</db:link> variable (including all subdirectories), merging the documentation with the structure it retrieved from the header files.</db:para>
<db:para>If both the sources and sourcedirs variables are defined, QDoc will read through both, first <db:link xlink:href="qmake-variable-reference.xml#sources">sources</db:link> then sourcedirs.</db:para>
<db:para>In the specified directories, QDoc will only read the files with the fileextensions specified in the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sources-fileextensions">sources.fileextensions</db:link> variable. The files specified by <db:link xlink:href="qmake-variable-reference.xml#sources">sources</db:link> will be read independent of their fileextensions.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sources-variable">sources</db:link> and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sources-fileextensions-variable">sources.fileextensions</db:link>.</db:para>
<db:anchor xml:id="sourceencoding-variable"/>
</db:section>
<db:section xml:id="sourceencoding">
<db:title>sourceencoding</db:title>
<db:para>The sourceencoding variable specifies the encoding used for the source code and documentation.</db:para>
<db:programlisting language="cpp" role="bad">sourceencoding = UTF-8
</db:programlisting>
<db:para>By default, the source encoding is ISO-8859-1 (Latin1) for compatibility with legacy documentation. For some languages, particularly non-European languages, this is not sufficient and an encoding such as UTF-8 is required.</db:para>
<db:para>Although QDoc will use the encoding to read source and documentation files, limitations of C++ compilers may prevent you from using non-ASCII characters in source code comments. In cases like these, it is possible to write API documentation completely in documentation files.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#naturallanguage-variable">naturallanguage</db:link> and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#outputencoding-variable">outputencoding</db:link>.</db:para>
<db:anchor xml:id="sources-variable"/>
</db:section>
<db:section xml:id="sources">
<db:title>sources</db:title>
<db:para>The sources variable allows you to specify individual source files in addition to those located in the directories specified by the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sourcedirs-variable">sourcedirs</db:link> variable.</db:para>
<db:programlisting language="cpp" role="bad">sources = $QTDIR/src/gui/widgets/qlineedit.cpp \
          $QTDIR/src/gui/widgets/qpushbutton.cpp
</db:programlisting>
<db:para>When processing the sources variable, QDoc behaves in the same way as it does when processing the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sourcedirs-variable">sourcedirs</db:link> variable. For more information, see the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sourcedirs-variable">sourcedirs</db:link> variable.</db:para>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sourcedirs-variable">sourcedirs</db:link>.</db:para>
<db:anchor xml:id="sources-fileextensions-variable"/>
</db:section>
<db:section xml:id="sources-fileextensions">
<db:title>sources.fileextensions</db:title>
<db:para>The sources.fileextensions variable filters the files within a source directory.</db:para>
<db:para>When processing the source files specified in the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sourcedirs">sourcedirs</db:link> variable, QDoc will only read the files with the fileextensions specified in the sources.fileextensions variable. In this way QDoc avoid spending time reading irrelevant files.</db:para>
<db:para>The default extensions are *.c++, *.cc, *.cpp, *.cxx, *.mm, *.qml and *.qdoc.</db:para>
<db:para>The extensions are given as standard wildcard expressions. You can add a file extension to the filter using '+='. For example:</db:para>
<db:programlisting language="cpp" role="bad">sources.fileextensions += *.CC
</db:programlisting>
<db:warning>
<db:para>The above assignment may not work as described.</db:para>
</db:warning>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sourcedirs-variable">sourcedirs</db:link> and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#sources-variable">(sources-variable}</db:link> {sources}.</db:para>
<db:anchor xml:id="spurious-variable"/>
</db:section>
<db:section xml:id="spurious">
<db:title>spurious</db:title>
<db:para>The spurious variable excludes specified QDoc warnings from the output. The warnings are specified using standard wildcard expressions.</db:para>
<db:programlisting language="cpp" role="bad">spurious = &quot;Cannot find .*&quot; \
&quot;Missing .*&quot;
</db:programlisting>
<db:para>makes sure that warnings matching either of these expressions, will not be part of the output when running QDoc. For example would the following warning be omitted from the output:</db:para>
<db:programlisting language="cpp" role="bad">src/opengl/qgl_mac.cpp:156: Missing parameter name
</db:programlisting>
</db:section>
<db:section xml:id="syntaxhighlighting">
<db:title>syntaxhighlighting</db:title>
<db:para>The syntaxhighlighting variable specifies whether QDoc should perform syntax highlighting on source code quoted in the documentation it generates.</db:para>
<db:programlisting language="cpp" role="bad">syntaxhighlighting = true
</db:programlisting>
<db:para>will enable syntax highlighting for all supported programming languages.</db:para>
<db:anchor xml:id="tabsize-variable"/>
</db:section>
<db:section xml:id="tabsize">
<db:title>tabsize</db:title>
<db:para>The tabsize variable defines the size of a tab character.</db:para>
<db:programlisting language="cpp" role="bad">tabsize = 4
</db:programlisting>
<db:para>will give the tab character the size of 4 spaces. The default value of the variable is 8, and doesn't need to be specified.</db:para>
<db:anchor xml:id="tagfile-variable"/>
</db:section>
<db:section xml:id="tagfile">
<db:title>tagfile</db:title>
<db:para>The tagfile variable specifies the Doxygen tag file to be written when HTML is generated.</db:para>
<db:anchor xml:id="version-variable"/>
</db:section>
<db:section xml:id="version">
<db:title>version</db:title>
<db:para>The version variable specifies the version number of the documented software.</db:para>
<db:programlisting language="cpp" role="bad">version = 5.6.0
</db:programlisting>
<db:para>When a version number is specified (using the <db:code><db:link xlink:href="qmake-variable-reference.xml#version">version</db:link></db:code> or <db:code><db:link xlink:href="22-qdoc-configuration-generalvariables.xml#versionsym">versionsym</db:link></db:code> variables in a .qdocconf file), it is accessible through the corresponding \version command for use in the documentation.</db:para>
<db:warning>
<db:para>The \version command's functionality is not fully implemented; currently it only works within raw HTML code.</db:para>
</db:warning>
<db:para>See also <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#versionsym">versionsym</db:link>.</db:para>
<db:anchor xml:id="versionsym-variable"/>
</db:section>
<db:section xml:id="versionsym">
<db:title>versionsym</db:title>
<db:para>The versionsym variable specifies a C++ preprocessor symbol that defines the version number of the documented software.</db:para>
<db:programlisting language="cpp" role="bad">versionsym = QT_VERSION_STR
</db:programlisting>
<db:para><db:link xlink:href="qtglobal.xml#QT_VERSION_STR">QT_VERSION_STR</db:link> is defined in qglobal.h as follows</db:para>
<db:programlisting language="cpp" role="bad">#define QT_VERSION_STR   &quot;5.14.1&quot;
</db:programlisting>
<db:para>When a version number is specified (using the <db:code><db:link xlink:href="qmake-variable-reference.xml#version">version</db:link></db:code> or <db:code><db:link xlink:href="22-qdoc-configuration-generalvariables.xml#versionsym">versionsym</db:link></db:code> variables in a .qdocconf file), it is accessible through the corresponding \version command for use in the documentation.</db:para>
<db:warning>
<db:para>The \version command's functionality is not fully implemented. Currently, it only works within raw HTML code.</db:para>
</db:warning>
<db:para>See also <db:link xlink:href="qmake-variable-reference.xml#version">\version</db:link>.</db:para>
<db:anchor xml:id="warninglimit-variable"/>
</db:section>
<db:section xml:id="warninglimit">
<db:title>warninglimit</db:title>
<db:para>The warninglimit variable sets the maximum number of documentation warnings allowed. If this limit is exceeded, QDoc continues as normal but exits with the warning count as the error code. If the limit was not exceeded or warninglimit was not defined, QDoc process exits with 0, assuming there were no other critical errors.</db:para>
<db:para>Setting the warninglimit to 0 means failure on any warning.</db:para>
<db:note>
<db:para>By default, QDoc does not enforce the warning limit. Enable it with warninglimit.enabled = true or by defining the QDOC_ENABLE_WARNINGLIMIT environment variable.</db:para>
</db:note>
<db:para>For example,</db:para>
<db:programlisting language="cpp" role="bad"># Fail the documentation build if we have more than 100 warnings
warninglimit = 100
warninglimit.enabled = true
</db:programlisting>
<db:para>The warninglimit variable was introduced in Qt 5.11.</db:para>
</db:section>
</db:article>
