<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Custom Completer Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Custom Completer example shows how to provide string-completion facilities for an input widget based on data provided by a model. The completer pops up suggestions for possible words based on the first three characters input by the user and the user's choice of word is inserted into the TextEdit using <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;textedit.h&quot;
#include &amp;lt;QCompleter&amp;gt;
#include &amp;lt;QKeyEvent&amp;gt;
#include &amp;lt;QAbstractItemView&amp;gt;
#include &amp;lt;QtDebug&amp;gt;
#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QModelIndex&amp;gt;
#include &amp;lt;QAbstractItemModel&amp;gt;
#include &amp;lt;QScrollBar&amp;gt;

TextEdit::TextEdit(QWidget *parent)
: QTextEdit(parent), c(0)
{
    setPlainText(tr(&quot;This TextEdit provides autocompletions for words that have more than&quot;
                    &quot; 3 characters. You can trigger autocompletion using &quot;) +
                    QKeySequence(&quot;Ctrl+E&quot;).toString(QKeySequence::NativeText));
}

TextEdit::~TextEdit()
{
}

void TextEdit::setCompleter(QCompleter *completer)
{
    if (c)
        QObject::disconnect(c, 0, this, 0);

    c = completer;

    if (!c)
        return;

    c-&amp;gt;setWidget(this);
    c-&amp;gt;setCompletionMode(QCompleter::PopupCompletion);
    c-&amp;gt;setCaseSensitivity(Qt::CaseInsensitive);
    QObject::connect(c, SIGNAL(activated(QString)),
                     this, SLOT(insertCompletion(QString)));
}

QCompleter *TextEdit::completer() const
{
    return c;
}

void TextEdit::insertCompletion(const QString&amp;amp; completion)
{
    if (c-&amp;gt;widget() != this)
        return;
    QTextCursor tc = textCursor();
    int extra = completion.length() - c-&amp;gt;completionPrefix().length();
    tc.movePosition(QTextCursor::Left);
    tc.movePosition(QTextCursor::EndOfWord);
    tc.insertText(completion.right(extra));
    setTextCursor(tc);
}

QString TextEdit::textUnderCursor() const
{
    QTextCursor tc = textCursor();
    tc.select(QTextCursor::WordUnderCursor);
    return tc.selectedText();
}

void TextEdit::focusInEvent(QFocusEvent *e)
{
    if (c)
        c-&amp;gt;setWidget(this);
    QTextEdit::focusInEvent(e);
}

void TextEdit::keyPressEvent(QKeyEvent *e)
{
    if (c &amp;amp;&amp;amp; c-&amp;gt;popup()-&amp;gt;isVisible()) {
        // The following keys are forwarded by the completer to the widget
       switch (e-&amp;gt;key()) {
       case Qt::Key_Enter:
       case Qt::Key_Return:
       case Qt::Key_Escape:
       case Qt::Key_Tab:
       case Qt::Key_Backtab:
            e-&amp;gt;ignore();
            return; // let the completer do default behavior
       default:
           break;
       }
    }

    bool isShortcut = ((e-&amp;gt;modifiers() &amp;amp; Qt::ControlModifier) &amp;amp;&amp;amp; e-&amp;gt;key() == Qt::Key_E); // CTRL+E
    if (!c || !isShortcut) // do not process the shortcut when we have a completer
        QTextEdit::keyPressEvent(e);

    const bool ctrlOrShift = e-&amp;gt;modifiers() &amp;amp; (Qt::ControlModifier | Qt::ShiftModifier);
    if (!c || (ctrlOrShift &amp;amp;&amp;amp; e-&amp;gt;text().isEmpty()))
        return;

    static QString eow(&quot;~!@#$%^&amp;amp;*()_+{}|:\&quot;&amp;lt;&amp;gt;?,./;'[]\\-=&quot;); // end of word
    bool hasModifier = (e-&amp;gt;modifiers() != Qt::NoModifier) &amp;amp;&amp;amp; !ctrlOrShift;
    QString completionPrefix = textUnderCursor();

    if (!isShortcut &amp;amp;&amp;amp; (hasModifier || e-&amp;gt;text().isEmpty()|| completionPrefix.length() &amp;lt; 3
                      || eow.contains(e-&amp;gt;text().right(1)))) {
        c-&amp;gt;popup()-&amp;gt;hide();
        return;
    }

    if (completionPrefix != c-&amp;gt;completionPrefix()) {
        c-&amp;gt;setCompletionPrefix(completionPrefix);
        c-&amp;gt;popup()-&amp;gt;setCurrentIndex(c-&amp;gt;completionModel()-&amp;gt;index(0, 0));
    }
    QRect cr = cursorRect();
    cr.setWidth(c-&amp;gt;popup()-&amp;gt;sizeHintForColumn(0)
                + c-&amp;gt;popup()-&amp;gt;verticalScrollBar()-&amp;gt;sizeHint().width());
    c-&amp;gt;complete(cr); // popup it up!
}

</db:programlisting>
</db:article>
