<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Positioning Gypsy plugin</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Uses the Gypsy daemon to provide satellite information.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>The plugin is an interface to the <db:link xlink:href="https://gypsy.freedesktop.org/wiki/">Gypsy daemon</db:link>. It requires the daemon to be installed and running on the system to function.</db:para>
<db:para>The plugin uses D-Bus and GLib to connect to GPS device and provide satellite information.</db:para>
<db:para>Currently the plugin <db:emphasis>does not</db:emphasis> provide positioning information.</db:para>
<db:para>The plugin can be loaded using provider name <db:emphasis role="bold">gypsy</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="parameters">
<db:title>Parameters</db:title>
<db:para>The following table lists parameters that <db:emphasis>can</db:emphasis> be passed to the gypsy plugin.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Parameter</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>deviceName</db:para>
</db:td>
<db:td>
<db:para>The name of the device (or path to the device file) that will be used to provide satellite information. The typical values can be <db:code>/dev/ttyUSB0</db:code> or <db:code>/dev/ttyACM0</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>gconfKey</db:para>
</db:td>
<db:td>
<db:para>The key that will be used to extract device name from the GConf configuration system.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The plugin supports two ways of specifying the device name:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Specify the device name directly with the <db:emphasis>deviceName</db:emphasis> plugin parameter.</db:para>
</db:listitem>
<db:listitem>
<db:para>Specify the configuration key using <db:emphasis>gconfKey</db:emphasis> plugin parameter and extract the device name from the GConf configuration system. This approach is useful when the device name is already specified for some other GConf-based application.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>By default, when none of the parameters is specified, the plugin will try to extract the device name from the GConf configuration system using the following hardcoded key:</db:para>
<db:programlisting language="cpp" role="bad">/apps/geoclue/master/org.freedesktop.Geoclue.GPSDevice
</db:programlisting>
<db:section xml:id="using-gconf-to-set-parameters">
<db:title>Using GConf to set parameters</db:title>
<db:para>To specify a value for a key in the GConf configuration system, use <db:emphasis>gconftool-2</db:emphasis> as follows:</db:para>
<db:programlisting language="cpp" role="bad">gconftool-2 -t string -s /apps/geoclue/master/org.freedesktop.Geoclue.GPSDevice /dev/ttyUSB0
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="usage-example">
<db:title>Usage example</db:title>
<db:para>The following examples show how to create a <db:emphasis role="bold">gypsy</db:emphasis> satellite info source from C++.</db:para>
<db:para>Specifying device name directly:</db:para>
<db:programlisting language="cpp">QVariantMap parameters;
parameters[&quot;deviceName&quot;] = &quot;/dev/ttyACM0&quot;;
QGeoSatelliteInfoSource *source = QGeoSatelliteInfoSource::createSource(&quot;gypsy&quot;, parameters, this);
</db:programlisting>
<db:para>Using GConf key:</db:para>
<db:programlisting language="cpp">QVariantMap parameters;
parameters[&quot;gconfKey&quot;] = &quot;/apps/myapp/mykey&quot;;
QGeoSatelliteInfoSource *source = QGeoSatelliteInfoSource::createSource(&quot;gypsy&quot;, parameters, this);
</db:programlisting>
</db:section>
</db:article>
