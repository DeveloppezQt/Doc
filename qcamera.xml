<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCamera Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcamera.xml">QCamera</db:link> class provides interface for system camera devices.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCamera</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediaobject.xml" xlink:role="class">QMediaObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCamera is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_camera</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcamera.xml">QCamera</db:link> can be used with <db:link xlink:href="qcameraviewfinder.xml">QCameraViewfinder</db:link> for viewfinder display, <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> for video recording and <db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link> for image taking.</db:para>
<db:para>You can use <db:link xlink:href="qcamerainfo.xml">QCameraInfo</db:link> to list available cameras and choose which one to use.</db:para>
<db:programlisting language="cpp">QList&lt;QCameraInfo&gt; cameras = QCameraInfo::availableCameras();
foreach (const QCameraInfo &amp;cameraInfo, cameras) {
    if (cameraInfo.deviceName() == &quot;mycamera&quot;)
        camera = new QCamera(cameraInfo);
}
</db:programlisting>
<db:para>See the <db:link xlink:href="cameraoverview.xml">camera overview</db:link> for more information.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CaptureMode-enum">
<db:title>enum QCamera::CaptureMode</db:title>
<db:bridgehead renderas="sect2">flags QCamera::CaptureModes</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::CaptureViewfinder</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Camera is only configured to display viewfinder.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::CaptureStillImage</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Camera is configured for still frames capture.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::CaptureVideo</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Camera is configured for video capture.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>CaptureModes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;CaptureMode&gt;. </db:code>It stores an OR combination of <db:code>CaptureMode</db:code> values.</db:para>
</db:section>
<db:section xml:id="Error-enum">
<db:title>enum QCamera::Error</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No errors have occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::CameraError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::InvalidRequestError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>System resource doesn't support requested functionality.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ServiceMissingError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>No camera service available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::NotSupportedFeatureError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The feature is not supported.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="LockChangeReason-enum">
<db:title>enum QCamera::LockChangeReason</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::UserRequest</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The lock status changed in result of user request, usually to unlock camera settings.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::LockAcquired</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The lock status successfuly changed to <db:link xlink:href="qcamera.xml#LockStatus-enum">QCamera::Locked</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::LockFailed</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The camera failed to acquire the requested lock in result of autofocus failure, exposure out of supported range, etc.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::LockLost</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The camera is not able to maintain the requested lock any more. Lock status is changed to <db:link xlink:href="qcamera.xml#LockStatus-enum">QCamera::Unlocked</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::LockTemporaryLost</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The lock is lost, but the camera is working hard to reacquire it. This value may be used in continuous focusing mode, when the camera loses the focus, the focus lock state is changed to Qcamera::Searching with LockTemporaryLost reason.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="LockStatus-enum">
<db:title>enum QCamera::LockStatus</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::Unlocked</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The application is not interested in camera settings value. The camera may keep this parameter without changes, this is common with camera focus, or adjust exposure and white balance constantly to keep the viewfinder image nice.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::Searching</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The application has requested the camera focus, exposure or white balance lock with <db:link xlink:href="qcamera.xml#searchAndLock">QCamera::searchAndLock</db:link>(). This state indicates the camera is focusing or calculating exposure and white balance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::Locked</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The camera focus, exposure or white balance is locked. The camera is ready to capture, application may check the exposure parameters.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The locked state usually means the requested parameter stays the same, except of the cases when the parameter is requested to be constantly updated. For example in continuous focusing mode, the focus is considered locked as long and the object is in focus, even while the actual focusing distance may be constantly changing.</db:para>
</db:section>
<db:section xml:id="LockType-enum">
<db:title>enum QCamera::LockType</db:title>
<db:bridgehead renderas="sect2">flags QCamera::LockTypes</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::NoLock</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::LockExposure</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Lock camera exposure.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::LockWhiteBalance</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Lock the white balance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::LockFocus</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Lock camera focus.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>LockTypes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;LockType&gt;. </db:code>It stores an OR combination of <db:code>LockType</db:code> values.</db:para>
</db:section>
<db:section xml:id="Position-enum">
<db:title>[since 5.3] enum QCamera::Position</db:title>
<db:para>This enum specifies the physical position of the camera on the system hardware.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::UnspecifiedPosition</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The camera position is unspecified or unknown.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::BackFace</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The camera is on the back face of the system hardware. For example on a mobile device, it means it is on the opposite side to that of the screen.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::FrontFace</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The camera is on the front face of the system hardware. For example on a mobile device, it means it is on the same side as that of the screen. Viewfinder frames of front-facing cameras are mirrored horizontally, so the users can see themselves as looking into a mirror. Captured images or videos are not mirrored.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamerainfo.xml#position">QCameraInfo::position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="State-enum">
<db:title>enum QCamera::State</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::UnloadedState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The initial camera state, with camera not loaded, the camera capabilities except of supported capture modes are unknown.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>While the supported settings are unknown in this state, it's allowed to set the camera capture settings like codec, resolution, or frame rate.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::LoadedState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The camera is loaded and ready to be configured.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In the Idle state it's allowed to query camera capabilities, set capture resolution, codecs, etc.</db:para>
<db:para>The viewfinder is not active in the loaded state.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ActiveState</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>In the active state as soon as camera is started the viewfinder displays video frames and the camera is ready for capture.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QCamera::Status</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ActiveStatus</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The camera has been started and can produce data. The viewfinder displays video frames in active state.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Depending on backend, changing some camera settings like capture mode, codecs or resolution in <db:link xlink:href="qcamera.xml#State-enum">ActiveState</db:link> may lead to changing the camera status to LoadedStatus and StartingStatus while the settings are applied and back to ActiveStatus when the camera is ready.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::StartingStatus</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The camera is starting in result of state transition to <db:link xlink:href="qcamera.xml#State-enum">QCamera::ActiveState</db:link>. The camera service is not ready to capture yet.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::StoppingStatus</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The camera is stopping in result of state transition from <db:link xlink:href="qcamera.xml#State-enum">QCamera::ActiveState</db:link> to <db:link xlink:href="qcamera.xml#State-enum">QCamera::LoadedState</db:link> or <db:link xlink:href="qcamera.xml#State-enum">QCamera::UnloadedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::StandbyStatus</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The camera is in the power saving standby mode. The camera may come to the standby mode after some time of inactivity in the <db:link xlink:href="qcamera.xml#State-enum">QCamera::LoadedState</db:link> state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::LoadedStatus</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The camera is loaded and ready to be configured. This status indicates the camera device is opened and it's possible to query for supported image and video capture settings, like resolution, framerate and codecs.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::LoadingStatus</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The camera device loading in result of state transition from <db:link xlink:href="qcamera.xml#State-enum">QCamera::UnloadedState</db:link> to <db:link xlink:href="qcamera.xml#State-enum">QCamera::LoadedState</db:link> or <db:link xlink:href="qcamera.xml#State-enum">QCamera::ActiveState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::UnloadingStatus</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The camera device is unloading in result of state transition from <db:link xlink:href="qcamera.xml#State-enum">QCamera::LoadedState</db:link> or <db:link xlink:href="qcamera.xml#State-enum">QCamera::ActiveState</db:link> to <db:link xlink:href="qcamera.xml#State-enum">QCamera::UnloadedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::UnloadedStatus</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The initial camera status, with camera not loaded. The camera capabilities including supported capture settings may be unknown.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::UnavailableStatus</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The camera or camera backend is not available.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="captureMode-prop">
<db:title>captureMode : QCamera::CaptureModes</db:title>
<db:para>The type of media (video or still images), the camera is configured to capture.</db:para>
<db:para>It's allowed to change capture mode in any camera state, but if the camera is currently active, chaging capture mode is likely to lead to camera status chaged to <db:link xlink:href="qcamera.xml#Status-enum">QCamera::LoadedStatus</db:link>, <db:link xlink:href="qcamera.xml#Status-enum">QCamera::LoadingStatus</db:link>, and when the camera is ready to <db:link xlink:href="qcamera.xml#Status-enum">QCamera::ActiveStatus</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamera.xml#CaptureMode-enum">QCamera::CaptureModes</db:link></db:type> <db:emphasis role="bold">captureMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCaptureMode</db:emphasis>(<db:type><db:link xlink:href="qcamera.xml#CaptureMode-enum">QCamera::CaptureModes</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#captureModeChanged">captureModeChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qcamera.xml#CaptureMode-enum">QCamera::CaptureModes</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="lockStatus-prop">
<db:title>[read-only] lockStatus : const QCamera::LockStatus</db:title>
<db:para>This property holds the overall status for all the requested camera locks.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamera.xml#LockStatus-enum">QCamera::LockStatus</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#lockStatus">lockStatus</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamera.xml#LockStatus-enum">QCamera::LockStatus</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#lockStatus-1">lockStatus</db:link></db:emphasis>(<db:type><db:link xlink:href="qcamera.xml#LockType-enum">QCamera::LockType</db:link></db:type> <db:emphasis>lockType</db:emphasis>) const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#lockStatusChanged">lockStatusChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qcamera.xml#LockStatus-enum">QCamera::LockStatus</db:link></db:type> <db:emphasis>status</db:emphasis>, <db:type><db:link xlink:href="qcamera.xml#LockChangeReason-enum">QCamera::LockChangeReason</db:link></db:type> <db:emphasis>reason</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#lockStatusChanged-1">lockStatusChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qcamera.xml#LockType-enum">QCamera::LockType</db:link></db:type> <db:emphasis>lock</db:emphasis>, <db:type><db:link xlink:href="qcamera.xml#LockStatus-enum">QCamera::LockStatus</db:link></db:type> <db:emphasis>status</db:emphasis>, <db:type><db:link xlink:href="qcamera.xml#LockChangeReason-enum">QCamera::LockChangeReason</db:link></db:type> <db:emphasis>reason</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="state-prop">
<db:title>[read-only] state : const QCamera::State</db:title>
<db:para>This property holds the current state of the camera object.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamera.xml#State-enum">QCamera::State</db:link></db:type> <db:emphasis role="bold">state</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#stateChanged">stateChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qcamera.xml#State-enum">QCamera::State</db:link></db:type> <db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : const QCamera::Status</db:title>
<db:para>This property holds the current status of the camera object.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamera.xml#Status-enum">QCamera::Status</db:link></db:type> <db:emphasis role="bold">status</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#statusChanged">statusChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qcamera.xml#Status-enum">QCamera::Status</db:link></db:type> <db:emphasis>status</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCamera">
<db:title>[explicit] QCamera::QCamera(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Construct a <db:link xlink:href="qcamera.xml">QCamera</db:link> with a <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QCamera-1">
<db:title>[explicit, since 5.3] QCamera::QCamera(QCamera::Position <db:emphasis>position</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Construct a <db:link xlink:href="qcamera.xml">QCamera</db:link> which uses a hardware camera located a the specified <db:code role="parameter">position</db:code>.</db:para>
<db:para>For example on a mobile phone it can be used to easily choose between front-facing and back-facing cameras.</db:para>
<db:para>If no camera is available at the specified <db:code role="parameter">position</db:code> or if <db:code role="parameter">position</db:code> is <db:link xlink:href="qcamera.xml#Position-enum">QCamera::UnspecifiedPosition</db:link>, the default camera is used.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="QCamera-2">
<db:title>[explicit] QCamera::QCamera(const QByteArray &amp;<db:emphasis>deviceName</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Construct a <db:link xlink:href="qcamera.xml">QCamera</db:link> from <db:code role="parameter">deviceName</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
<db:para>If no camera with that <db:code role="parameter">deviceName</db:code> exists, the camera object will be invalid.</db:para>
</db:section>
<db:section xml:id="QCamera-3">
<db:title>[explicit, since 5.3] QCamera::QCamera(const QCameraInfo &amp;<db:emphasis>cameraInfo</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Construct a <db:link xlink:href="qcamera.xml">QCamera</db:link> from a camera description <db:code role="parameter">cameraInfo</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="dtor.QCamera">
<db:title>[virtual noexcept] QCamera::~QCamera()</db:title>
<db:para>Destroys the camera object.</db:para>
</db:section>
<db:section xml:id="availability">
<db:title>[override virtual] QMultimedia::AvailabilityStatus QCamera::availability() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qmediaobject.xml#availability" role="function">QMediaObject::availability() const</db:link>.</db:para>
<db:para>Returns the availability state of the camera service.</db:para>
</db:section>
<db:section xml:id="captureModeChanged">
<db:title>void QCamera::captureModeChanged(QCamera::CaptureModes <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Signals the capture <db:code role="parameter">mode</db:code> has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcamera.xml#captureMode-prop">captureMode</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="error">
<db:title>QCamera::Error QCamera::error() const</db:title>
<db:para>Returns the error state of the object.</db:para>
</db:section>
<db:section xml:id="error-1">
<db:title>void QCamera::error(QCamera::Error <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Signal emitted when error state changes to <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QCamera::errorString() const</db:title>
<db:para>Returns a string describing a camera's error state.</db:para>
</db:section>
<db:section xml:id="exposure">
<db:title>QCameraExposure *QCamera::exposure() const</db:title>
<db:para>Returns the camera exposure control object.</db:para>
</db:section>
<db:section xml:id="focus">
<db:title>QCameraFocus *QCamera::focus() const</db:title>
<db:para>Returns the camera focus control object.</db:para>
</db:section>
<db:section xml:id="imageProcessing">
<db:title>QCameraImageProcessing *QCamera::imageProcessing() const</db:title>
<db:para>Returns the camera image processing control object.</db:para>
</db:section>
<db:section xml:id="isCaptureModeSupported">
<db:title>bool QCamera::isCaptureModeSupported(QCamera::CaptureModes <db:emphasis>mode</db:emphasis>) const</db:title>
<db:para>Returns true if the capture <db:code role="parameter">mode</db:code> is suported.</db:para>
</db:section>
<db:section xml:id="load">
<db:title>void QCamera::load()</db:title>
<db:para>Open the camera device. The camera state is changed to <db:link xlink:href="qcamera.xml#Status-enum">QCamera::LoadedStatus</db:link>.</db:para>
<db:para>It's not necessary to explcitly load the camera, unless unless the application have to read the supported camera settings and change the default depending on the camera capabilities.</db:para>
<db:para>In all the other cases it's possible to start the camera directly from unloaded state.</db:para>
</db:section>
<db:section xml:id="lockFailed">
<db:title>void QCamera::lockFailed()</db:title>
<db:para>Signals locking of at least one requested camera settings failed.</db:para>
</db:section>
<db:section xml:id="lockStatus">
<db:title>QCamera::LockStatus QCamera::lockStatus() const</db:title>
<db:para>Returns the status of requested camera settings locks.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qcamera.xml#lockStatus-prop">lockStatus</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="lockStatus-1">
<db:title>QCamera::LockStatus QCamera::lockStatus(QCamera::LockType <db:emphasis>lockType</db:emphasis>) const</db:title>
<db:para>Returns the lock status for a given <db:code role="parameter">lockType</db:code>.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qcamera.xml#lockStatus-prop">lockStatus</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="lockStatusChanged">
<db:title>void QCamera::lockStatusChanged(QCamera::LockStatus <db:emphasis>status</db:emphasis>, QCamera::LockChangeReason <db:emphasis>reason</db:emphasis>)</db:title>
<db:para>Signals the overall <db:code role="parameter">status</db:code> for all the requested camera locks was changed with specified <db:code role="parameter">reason</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcamera.xml#lockStatus-prop">lockStatus</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="lockStatusChanged-1">
<db:title>void QCamera::lockStatusChanged(QCamera::LockType <db:emphasis>lock</db:emphasis>, QCamera::LockStatus <db:emphasis>status</db:emphasis>, QCamera::LockChangeReason <db:emphasis>reason</db:emphasis>)</db:title>
<db:para>Signals the <db:code role="parameter">lock</db:code> <db:code role="parameter">status</db:code> was changed with specified <db:code role="parameter">reason</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcamera.xml#lockStatus-prop">lockStatus</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="locked">
<db:title>void QCamera::locked()</db:title>
<db:para>Signals all the requested camera settings are locked.</db:para>
</db:section>
<db:section xml:id="requestedLocks">
<db:title>QCamera::LockTypes QCamera::requestedLocks() const</db:title>
<db:para>Returns the requested lock types.</db:para>
</db:section>
<db:section xml:id="searchAndLock">
<db:title>void QCamera::searchAndLock()</db:title>
<db:para>Lock all the supported camera settings.</db:para>
</db:section>
<db:section xml:id="searchAndLock-1">
<db:title>void QCamera::searchAndLock(QCamera::LockTypes <db:emphasis>locks</db:emphasis>)</db:title>
<db:para>Locks the camera settings with the requested <db:code role="parameter">locks</db:code>, including focusing in the single autofocus mode, exposure and white balance if the exposure and white balance modes are not manual.</db:para>
<db:para>The camera settings are usually locked before taking one or multiple still images, in responce to the shutter button being half pressed.</db:para>
<db:para>The <db:link xlink:href="qcamera.xml#locked">QCamera::locked</db:link>() signal is emitted when camera settings are successfully locked, otherwise <db:link xlink:href="qcamera.xml#lockFailed">QCamera::lockFailed</db:link>() is emitted.</db:para>
<db:para><db:link xlink:href="qcamera.xml">QCamera</db:link> also emits <db:link xlink:href="qcamera.xml#lockStatusChanged">lockStatusChanged</db:link>(<db:link xlink:href="qcamera.xml#LockType-enum">QCamera::LockType</db:link>, <db:link xlink:href="qcamera.xml#LockStatus-enum">QCamera::LockStatus</db:link>) on individual lock status changes and <db:link xlink:href="qcamera.xml#lockStatusChanged">lockStatusChanged</db:link>(<db:link xlink:href="qcamera.xml#LockStatus-enum">QCamera::LockStatus</db:link>) signal on composite status changes.</db:para>
<db:para>Locking serves two roles: it initializes calculation of automatic parameter (focusing, calculating the correct exposure and white balance) and allows to keep some or all of those parameters during number of shots.</db:para>
<db:para>If the camera doesn't support keeping one of parameters between shots, the related lock state changes to <db:link xlink:href="qcamera.xml#LockStatus-enum">QCamera::Unlocked</db:link>.</db:para>
<db:para>It's also acceptable to relock already locked settings, depending on the lock parameter this initiates new focusing, exposure or white balance calculation.</db:para>
</db:section>
<db:section xml:id="setViewfinder">
<db:title>void QCamera::setViewfinder(QAbstractVideoSurface *<db:emphasis>surface</db:emphasis>)</db:title>
<db:para>Sets a video <db:code role="parameter">surface</db:code> as the viewfinder of a camera.</db:para>
<db:para>If a viewfinder has already been set on the camera the new surface will replace it.</db:para>
</db:section>
<db:section xml:id="setViewfinderSettings">
<db:title>[since 5.5] void QCamera::setViewfinderSettings(const QCameraViewfinderSettings &amp;<db:emphasis>settings</db:emphasis>)</db:title>
<db:para>Sets the viewfinder <db:code role="parameter">settings</db:code>.</db:para>
<db:para>If some parameters are not specified, or null settings are passed, the camera will choose default values.</db:para>
<db:para>If the camera is used to capture videos or images, the viewfinder settings might be ignored if they conflict with the capture settings. You can check the actual viewfinder settings once the camera is in the <db:code>QCamera::ActiveStatus</db:code> status.</db:para>
<db:para>Changing the viewfinder settings while the camera is in the <db:link xlink:href="qcamera.xml#State-enum">QCamera::ActiveState</db:link> state may cause the camera to be restarted.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#viewfinderSettings">viewfinderSettings</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#supportedViewfinderResolutions">supportedViewfinderResolutions</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#supportedViewfinderFrameRateRanges">supportedViewfinderFrameRateRanges</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#supportedViewfinderPixelFormats">supportedViewfinderPixelFormats</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QCamera::start()</db:title>
<db:para>Starts the camera.</db:para>
<db:para>State is changed to <db:link xlink:href="qcamera.xml#State-enum">QCamera::ActiveState</db:link> if camera is started successfully, otherwise <db:link xlink:href="qcamera.xml#error">error</db:link>() signal is emitted.</db:para>
<db:para>While the camera state is changed to <db:link xlink:href="qcamera.xml#State-enum">QCamera::ActiveState</db:link>, starting the camera service can be asynchronous with the actual status reported with <db:link xlink:href="qcamera.xml#status-prop">QCamera::status</db:link> property.</db:para>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QCamera::stateChanged(QCamera::State <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Signals the camera <db:code role="parameter">state</db:code> has changed.</db:para>
<db:para>Usually the state changes is caused by calling <db:link xlink:href="qcamera.xml#load">load</db:link>(), <db:link xlink:href="qcamera.xml#unload">unload</db:link>(), <db:link xlink:href="qcamera.xml#start">start</db:link>() and <db:link xlink:href="qcamera.xml#stop">stop</db:link>(), but the state can also be changed change as a result of camera error.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcamera.xml#state-prop">state</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="statusChanged">
<db:title>void QCamera::statusChanged(QCamera::Status <db:emphasis>status</db:emphasis>)</db:title>
<db:para>Signals the camera <db:code role="parameter">status</db:code> has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcamera.xml#status-prop">status</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="stop">
<db:title>void QCamera::stop()</db:title>
<db:para>Stops the camera. The camera state is changed from <db:link xlink:href="qcamera.xml#State-enum">QCamera::ActiveState</db:link> to <db:link xlink:href="qcamera.xml#State-enum">QCamera::LoadedState</db:link>.</db:para>
</db:section>
<db:section xml:id="supportedLocks">
<db:title>QCamera::LockTypes QCamera::supportedLocks() const</db:title>
<db:para>Returns the lock types, camera supports.</db:para>
</db:section>
<db:section xml:id="supportedViewfinderFrameRateRanges">
<db:title>[since 5.5] QList&lt;QCamera::FrameRateRange&gt; QCamera::supportedViewfinderFrameRateRanges(const QCameraViewfinderSettings &amp;<db:emphasis>settings</db:emphasis> = QCameraViewfinderSettings()) const</db:title>
<db:para>Returns a list of supported viewfinder frame rate ranges.</db:para>
<db:para>This is a convenience function which retrieves unique frame rate ranges from the supported settings.</db:para>
<db:para>If non null viewfinder <db:code role="parameter">settings</db:code> are passed, the returned list is reduced to frame rate ranges supported with partial <db:code role="parameter">settings</db:code> applied.</db:para>
<db:para>The camera must be loaded before calling this function, otherwise the returned list is empty.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#minimumFrameRate">QCameraViewfinderSettings::minimumFrameRate</db:link>()</db:member>
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#maximumFrameRate">QCameraViewfinderSettings::maximumFrameRate</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#setViewfinderSettings">setViewfinderSettings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedViewfinderPixelFormats">
<db:title>[since 5.5] QList&lt;QVideoFrame::PixelFormat&gt; QCamera::supportedViewfinderPixelFormats(const QCameraViewfinderSettings &amp;<db:emphasis>settings</db:emphasis> = QCameraViewfinderSettings()) const</db:title>
<db:para>Returns a list of supported viewfinder pixel formats.</db:para>
<db:para>This is a convenience function which retrieves unique pixel formats from the supported settings.</db:para>
<db:para>If non null viewfinder <db:code role="parameter">settings</db:code> are passed, the returned list is reduced to pixel formats supported with partial <db:code role="parameter">settings</db:code> applied.</db:para>
<db:para>The camera must be loaded before calling this function, otherwise the returned list is empty.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#pixelFormat">QCameraViewfinderSettings::pixelFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#setViewfinderSettings">setViewfinderSettings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedViewfinderResolutions">
<db:title>[since 5.5] QList&lt;QSize&gt; QCamera::supportedViewfinderResolutions(const QCameraViewfinderSettings &amp;<db:emphasis>settings</db:emphasis> = QCameraViewfinderSettings()) const</db:title>
<db:para>Returns a list of supported viewfinder resolutions.</db:para>
<db:para>This is a convenience function which retrieves unique resolutions from the supported settings.</db:para>
<db:para>If non null viewfinder <db:code role="parameter">settings</db:code> are passed, the returned list is reduced to resolutions supported with partial <db:code role="parameter">settings</db:code> applied.</db:para>
<db:para>The camera must be loaded before calling this function, otherwise the returned list is empty.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraviewfindersettings.xml#resolution">QCameraViewfinderSettings::resolution</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#setViewfinderSettings">setViewfinderSettings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedViewfinderSettings">
<db:title>[since 5.5] QList&lt;QCameraViewfinderSettings&gt; QCamera::supportedViewfinderSettings(const QCameraViewfinderSettings &amp;<db:emphasis>settings</db:emphasis> = QCameraViewfinderSettings()) const</db:title>
<db:para>Returns a list of supported viewfinder settings.</db:para>
<db:para>The list is ordered by preference; preferred settings come first.</db:para>
<db:para>The optional <db:code role="parameter">settings</db:code> argument can be used to conveniently filter the results. If <db:code role="parameter">settings</db:code> is non null, the returned list is reduced to settings matching the given partial <db:code role="parameter">settings</db:code>.</db:para>
<db:para>The camera must be loaded before calling this function, otherwise the returned list is empty.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#setViewfinderSettings">setViewfinderSettings</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#supportedViewfinderResolutions">supportedViewfinderResolutions</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#supportedViewfinderFrameRateRanges">supportedViewfinderFrameRateRanges</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#supportedViewfinderPixelFormats">supportedViewfinderPixelFormats</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unload">
<db:title>void QCamera::unload()</db:title>
<db:para>Close the camera device and deallocate the related resources. The camera state is changed to <db:link xlink:href="qcamera.xml#Status-enum">QCamera::UnloadedStatus</db:link>.</db:para>
</db:section>
<db:section xml:id="unlock">
<db:title>void QCamera::unlock()</db:title>
<db:para>Unlock all the requested camera locks.</db:para>
</db:section>
<db:section xml:id="unlock-1">
<db:title>void QCamera::unlock(QCamera::LockTypes <db:emphasis>locks</db:emphasis>)</db:title>
<db:para>Unlocks the camera settings specified with <db:code role="parameter">locks</db:code> or cancel the current locking if one is active.</db:para>
</db:section>
<db:section xml:id="viewfinderSettings">
<db:title>[since 5.5] QCameraViewfinderSettings QCamera::viewfinderSettings() const</db:title>
<db:para>Returns the viewfinder settings being used by the camera.</db:para>
<db:para>Settings may change when the camera is started, for example if the viewfinder settings are undefined or if unsupported values are set.</db:para>
<db:para>If viewfinder settings are not supported by the camera, it always returns a null <db:link xlink:href="qcameraviewfindersettings.xml">QCameraViewfinderSettings</db:link> object.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#setViewfinderSettings">setViewfinderSettings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QCamera</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qcamera.xml">QCamera</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="availableDevices">
<db:title>[static, deprecated] QList&lt;QByteArray&gt; QCamera::availableDevices()</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns a list of camera device's available from the default service provider.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamerainfo.xml#availableCameras">QCameraInfo::availableCameras</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deviceDescription">
<db:title>[static, deprecated] QString QCamera::deviceDescription(const QByteArray &amp;<db:emphasis>device</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the description of the <db:code role="parameter">device</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamerainfo.xml#availableCameras">QCameraInfo::availableCameras</db:link>()</db:member>
<db:member><db:link xlink:href="qcamerainfo.xml#description">QCameraInfo::description</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
