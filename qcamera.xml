<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCamera Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcamera.xml">QCamera</db:link> class provides interface for system camera devices.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCamera</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Multimedia)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Multimedia)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtmultimedia-camera.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCamera is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_camera</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcamera.xml">QCamera</db:link> can be used within a <db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link> for video recording and image taking.</db:para>
<db:para>You can use <db:link xlink:href="qcameradevice.xml">QCameraDevice</db:link> to list available cameras and choose which one to use.</db:para>
<db:programlisting language="cpp">const QList&amp;lt;QCameraDevice&amp;gt; cameras = QMediaDevices::videoInputs();
for (const QCameraDevice &amp;amp;cameraDevice : cameras) {
    if (cameraDevice.description() == &quot;mycamera&quot;)
        camera = new QCamera(cameraDevice);
}
</db:programlisting>
<db:para>On hardware that supports it, <db:link xlink:href="qcamera.xml">QCamera</db:link> lets you adjust the focus and zoom. This also includes functionality such as a &quot;Macro&quot; mode for close up work (e.g. reading barcodes, or recognizing letters), or &quot;touch to focus&quot; - indicating an interesting area of the image for the hardware to attempt to focus on.</db:para>
<db:programlisting language="cpp">camera-&amp;gt;setFocusPointMode(QCamera::FocusModeManual);
camera-&amp;gt;setCustomFocusPoint(QPointF(0.25f, 0.75f)); // A point near the bottom left, 25% away from the corner, near that shiny vase
</db:programlisting>
<db:para>The <db:link xlink:href="qcamera.xml#minimumZoomFactor-prop">minimumZoomFactor</db:link>() and <db:link xlink:href="qcamera.xml#maximumZoomFactor-prop">maximumZoomFactor</db:link>() methods provide the range of supported zoom factors. The <db:link xlink:href="qcamera.xml#zoomTo">zoomTo</db:link>() method allows changing the zoom factor.</db:para>
<db:programlisting language="cpp">camera-&amp;gt;setZoomFactor(3.0);
</db:programlisting>
<db:para>After capturing the raw data for a camera frame, the camera hardware and software performs various image processing tasks to produce the final image. This includes compensating for ambient light color, reducing noise, as well as making some other adjustments to the image.</db:para>
<db:para>You can control many of these processing steps through the Camera properties. For example, you can set the white balance (or color temperature) used for processing images:</db:para>
<db:programlisting language="cpp">camera-&amp;gt;setWhiteBalanceMode(QCamera::WhiteBalanceFluorescent);
</db:programlisting>
<db:para>For more information on image processing of camera frames, see <db:link xlink:href="cameraoverview.xml#camera-image-processing">Camera Image Processing</db:link>.</db:para>
<db:para>See the <db:link xlink:href="cameraoverview.xml">camera overview</db:link> for more information.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QCamera::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CameraError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum holds the last error code.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No errors have occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::CameraError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An error has occurred.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ExposureMode-enum">
<db:title>enum QCamera::ExposureMode</db:title>
<db:enumsynopsis>
<db:enumname>ExposureMode</db:enumname>
<db:enumitem>
<db:enumidentifier>ExposureAuto</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureManual</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposurePortrait</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureNight</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureSports</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureSnow</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureBeach</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureAction</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureLandscape</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureNightPortrait</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureTheatre</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureSunset</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureSteadyPhoto</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureFireworks</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureParty</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureCandlelight</db:enumidentifier>
<db:enumvalue>15</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureBarcode</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureAuto</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Automatic mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureManual</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Manual mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposurePortrait</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Portrait exposure mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureNight</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Night mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureSports</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Spots exposure mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureSnow</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Snow exposure mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureBeach</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Beach exposure mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureAction</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Action mode. Since 5.5</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureLandscape</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Landscape mode. Since 5.5</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureNightPortrait</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Night portrait mode. Since 5.5</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureTheatre</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Theatre mode. Since 5.5</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureSunset</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Sunset mode. Since 5.5</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureSteadyPhoto</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Steady photo mode. Since 5.5</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureFireworks</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Fireworks mode. Since 5.5</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureParty</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>Party mode. Since 5.5</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureCandlelight</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>Candlelight mode. Since 5.5</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::ExposureBarcode</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Barcode mode. Since 5.5</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Feature-enum">
<db:title>enum QCamera::Feature</db:title>
<db:bridgehead renderas="sect2">flags QCamera::Features</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Feature</db:enumname>
<db:enumitem>
<db:enumidentifier>ColorTemperature</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExposureCompensation</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IsoSensitivity</db:enumidentifier>
<db:enumvalue>0x4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ManualExposureTime</db:enumidentifier>
<db:enumvalue>0x8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CustomFocusPoint</db:enumidentifier>
<db:enumvalue>0x10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FocusDistance</db:enumidentifier>
<db:enumvalue>0x20</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QCamera::Features</db:typedefname>
</db:typedefsynopsis>
<db:para>Describes a set of features supported by the camera. The returned value can be a combination of:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::<db:emphasis role="bold">Feature</db:emphasis>::ColorTemperature</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>The Camera supports setting a custom <db:link xlink:href="qcamera.xml#colorTemperature-prop">colorTemperature</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::<db:emphasis role="bold">Feature</db:emphasis>::ExposureCompensation</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>The Camera supports setting a custom <db:link xlink:href="qcamera.xml#exposureCompensation-prop">exposureCompensation</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::<db:emphasis role="bold">Feature</db:emphasis>::IsoSensitivity</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>The Camera supports setting a custom <db:link xlink:href="qcamera.xml#isoSensitivity-prop">isoSensitivity</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::<db:emphasis role="bold">Feature</db:emphasis>::ManualExposureTime</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>The Camera supports setting a <db:link xlink:href="qcamera.xml#manualExposureTime">manual exposure Time</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::<db:emphasis role="bold">Feature</db:emphasis>::CustomFocusPoint</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>The Camera supports setting a <db:link xlink:href="qcamera.xml#customFocusPoint-prop">custom focus point</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::<db:emphasis role="bold">Feature</db:emphasis>::FocusDistance</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>The Camera supports setting the <db:link xlink:href="qcamera.xml#focusDistance-prop">focusDistance</db:link> property.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Features</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Feature&gt;. </db:code>It stores an OR combination of <db:code>Feature</db:code> values.</db:para>
</db:section>
<db:section xml:id="FlashMode-enum">
<db:title>enum QCamera::FlashMode</db:title>
<db:enumsynopsis>
<db:enumname>FlashMode</db:enumname>
<db:enumitem>
<db:enumidentifier>FlashOff</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FlashOn</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FlashAuto</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::FlashOff</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Flash is Off.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::FlashOn</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Flash is On.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::FlashAuto</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Automatic flash.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="FocusMode-enum">
<db:title>enum QCamera::FocusMode</db:title>
<db:enumsynopsis>
<db:enumname>FocusMode</db:enumname>
<db:enumitem>
<db:enumidentifier>FocusModeAuto</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FocusModeAutoNear</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FocusModeAutoFar</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FocusModeHyperfocal</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FocusModeInfinity</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FocusModeManual</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::FocusModeAuto</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Continuous auto focus mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::FocusModeAutoNear</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Continuous auto focus mode on near objects.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::FocusModeAutoFar</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Continuous auto focus mode on objects far away.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::FocusModeHyperfocal</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Focus to hyperfocal distance, with the maximum depth of field achieved. All objects at distances from half of this distance out to infinity will be acceptably sharp.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::FocusModeInfinity</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Focus strictly to infinity.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::FocusModeManual</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Manual or fixed focus mode.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="TorchMode-enum">
<db:title>enum QCamera::TorchMode</db:title>
<db:enumsynopsis>
<db:enumname>TorchMode</db:enumname>
<db:enumitem>
<db:enumidentifier>TorchOff</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TorchOn</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TorchAuto</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::TorchOff</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Torch is Off.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::TorchOn</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Torch is On.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::TorchAuto</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Automatic torch.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="WhiteBalanceMode-enum">
<db:title>enum QCamera::WhiteBalanceMode</db:title>
<db:enumsynopsis>
<db:enumname>WhiteBalanceMode</db:enumname>
<db:enumitem>
<db:enumidentifier>WhiteBalanceAuto</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WhiteBalanceManual</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WhiteBalanceSunlight</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WhiteBalanceCloudy</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WhiteBalanceShade</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WhiteBalanceTungsten</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WhiteBalanceFluorescent</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WhiteBalanceFlash</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WhiteBalanceSunset</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::WhiteBalanceAuto</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Auto white balance mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::WhiteBalanceManual</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Manual white balance. In this mode the white balance should be set with <db:link xlink:href="qcamera.xml#setColorTemperature">setColorTemperature</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::WhiteBalanceSunlight</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Sunlight white balance mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::WhiteBalanceCloudy</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Cloudy white balance mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::WhiteBalanceShade</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Shade white balance mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::WhiteBalanceTungsten</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Tungsten (incandescent) white balance mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::WhiteBalanceFluorescent</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Fluorescent white balance mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::WhiteBalanceFlash</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Flash white balance mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamera.xml">QCamera</db:link></db:emphasis>::WhiteBalanceSunset</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Sunset white balance mode.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="active-prop">
<db:title>active : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>active</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isActive</db:synopsisinfo>
<db:synopsisinfo role="setter">setActive</db:synopsisinfo>
<db:synopsisinfo role="notifier">activeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Describes whether the camera is currently active.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#isActive">isActive</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#setActive">setActive</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>active</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">activeChanged</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="cameraDevice-prop">
<db:title>cameraDevice : QCameraDevice</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QCameraDevice</db:type>
<db:varname>cameraDevice</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cameraDevice</db:synopsisinfo>
<db:synopsisinfo role="setter">setCameraDevice</db:synopsisinfo>
<db:synopsisinfo role="notifier">cameraDeviceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the <db:link xlink:href="qcameradevice.xml">QCameraDevice</db:link> object associated with this camera.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcameradevice.xml">QCameraDevice</db:link></db:type> <db:emphasis role="bold">cameraDevice</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#setCameraDevice">setCameraDevice</db:link></db:emphasis>(const <db:type><db:link xlink:href="qcameradevice.xml">QCameraDevice</db:link></db:type> &amp;<db:emphasis>cameraDevice</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">cameraDeviceChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="cameraFormat-prop">
<db:title>cameraFormat : QCameraFormat</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QCameraFormat</db:type>
<db:varname>cameraFormat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cameraFormat</db:synopsisinfo>
<db:synopsisinfo role="setter">setCameraFormat</db:synopsisinfo>
<db:synopsisinfo role="notifier">cameraFormatChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the camera format currently used by the camera.</db:para>
<db:note>
<db:para>When using the FFMPEG backend on an Android target device if you request <db:emphasis role="bold">YUV420P</db:emphasis> format, you will receive either a fully planar 4:2:0 YUV420P or a semi-planar NV12/NV21. This depends on the codec implemented by the device OEM.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcameraformat.xml">QCameraFormat</db:link></db:type> <db:emphasis role="bold">cameraFormat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#setCameraFormat">setCameraFormat</db:link></db:emphasis>(const <db:type><db:link xlink:href="qcameraformat.xml">QCameraFormat</db:link></db:type> &amp;<db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">cameraFormatChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameradevice.xml#videoFormats-prop">QCameraDevice::videoFormats</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="colorTemperature-prop">
<db:title>colorTemperature : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>colorTemperature</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">colorTemperature</db:synopsisinfo>
<db:synopsisinfo role="setter">setColorTemperature</db:synopsisinfo>
<db:synopsisinfo role="notifier">colorTemperatureChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the current color temperature if the current white balance mode is <db:code>WhiteBalanceManual</db:code>. For other modes the return value is undefined.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">colorTemperature</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#setColorTemperature">setColorTemperature</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>colorTemperature</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">colorTemperatureChanged</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="customFocusPoint-prop">
<db:title>customFocusPoint : QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>customFocusPoint</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">customFocusPoint</db:synopsisinfo>
<db:synopsisinfo role="setter">setCustomFocusPoint</db:synopsisinfo>
<db:synopsisinfo role="notifier">customFocusPointChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property represents the position of the custom focus point, in relative frame coordinates: <db:link xlink:href="qpointf.xml">QPointF</db:link>(0,0) points to the left top frame point, <db:link xlink:href="qpointf.xml">QPointF</db:link>(0.5,0.5) points to the frame center.</db:para>
<db:para>The custom focus point property is used only in <db:code>FocusPointCustom</db:code> focus mode.</db:para>
<db:para>You can check whether custom focus points are supported by querying <db:link xlink:href="qcamera.xml#supportedFeatures-prop">supportedFeatures</db:link>() with the Feature.<db:link xlink:href="qcamera.xml#Feature-enum">CustomFocusPoint</db:link> flag.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">customFocusPoint</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCustomFocusPoint</db:emphasis>(const <db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> &amp;<db:emphasis>point</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">customFocusPointChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="error-prop">
<db:title>[read-only] error : const Error</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Error</db:type>
<db:varname>error</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">error</db:synopsisinfo>
<db:synopsisinfo role="notifier">errorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the error state of the camera.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamera.xml#Error-enum">QCamera::Error</db:link></db:type> <db:emphasis role="bold">error</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#errorChanged">errorChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="errorString-prop">
<db:title>[read-only] errorString : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>errorString</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">errorString</db:synopsisinfo>
<db:synopsisinfo role="notifier">errorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns a human readable string describing a camera's error state.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">errorString</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#errorChanged">errorChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="exposureCompensation-prop">
<db:title>exposureCompensation : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>exposureCompensation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">exposureCompensation</db:synopsisinfo>
<db:synopsisinfo role="setter">setExposureCompensation</db:synopsisinfo>
<db:synopsisinfo role="notifier">exposureCompensationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Exposure compensation in EV units.</db:para>
<db:para>Exposure compensation property allows to adjust the automatically calculated exposure.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">exposureCompensation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setExposureCompensation</db:emphasis>(<db:type>float</db:type> <db:emphasis>ev</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#exposureCompensationChanged">exposureCompensationChanged</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="exposureMode-prop">
<db:title>exposureMode : QCamera::ExposureMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QCamera::ExposureMode</db:type>
<db:varname>exposureMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">exposureMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setExposureMode</db:synopsisinfo>
<db:synopsisinfo role="notifier">exposureModeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the exposure mode being used.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamera.xml#ExposureMode-enum">QCamera::ExposureMode</db:link></db:type> <db:emphasis role="bold">exposureMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setExposureMode</db:emphasis>(<db:type><db:link xlink:href="qcamera.xml#ExposureMode-enum">QCamera::ExposureMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">exposureModeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#isExposureModeSupported">QCamera::isExposureModeSupported</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exposureTime-prop">
<db:title>[read-only] exposureTime : const float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>exposureTime</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">exposureTime</db:synopsisinfo>
<db:synopsisinfo role="notifier">exposureTimeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Camera's exposure time in seconds.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#exposureTime">exposureTime</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#exposureTimeChanged">exposureTimeChanged</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>speed</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#minimumExposureTime">minimumExposureTime</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#maximumExposureTime">maximumExposureTime</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#manualExposureTime-prop">setManualExposureTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flashMode-prop">
<db:title>flashMode : QCamera::FlashMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QCamera::FlashMode</db:type>
<db:varname>flashMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">flashMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setFlashMode</db:synopsisinfo>
<db:synopsisinfo role="notifier">flashModeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the flash mode being used.</db:para>
<db:para>Enables a certain flash mode if the camera has a flash.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamera.xml#FlashMode-enum">QCamera::FlashMode</db:link></db:type> <db:emphasis role="bold">flashMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFlashMode</db:emphasis>(<db:type><db:link xlink:href="qcamera.xml#FlashMode-enum">QCamera::FlashMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">flashModeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#FlashMode-enum">QCamera::FlashMode</db:link></db:member>
<db:member><db:link xlink:href="qcamera.xml#isFlashModeSupported">QCamera::isFlashModeSupported</db:link></db:member>
<db:member><db:link xlink:href="qcamera.xml#isFlashReady">QCamera::isFlashReady</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flashReady-prop">
<db:title>[read-only] flashReady : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>flashReady</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isFlashReady</db:synopsisinfo>
<db:synopsisinfo role="notifier">flashReady</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Indicates if the flash is charged and ready to use.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#isFlashReady">isFlashReady</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#flashReady">flashReady</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>ready</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="focusDistance-prop">
<db:title>focusDistance : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>focusDistance</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">focusDistance</db:synopsisinfo>
<db:synopsisinfo role="setter">setFocusDistance</db:synopsisinfo>
<db:synopsisinfo role="notifier">focusDistanceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property return an approximate focus distance of the camera. The value reported is between 0 and 1, 0 being the closest possible focus distance, 1 being as far away as possible. Note that 1 is often, but not always infinity.</db:para>
<db:para>Setting the focus distance will be ignored unless the focus mode is set to <db:link xlink:href="qcamera.xml#FocusMode-enum">FocusModeManual</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">focusDistance</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFocusDistance</db:emphasis>(<db:type>float</db:type> <db:emphasis>d</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">focusDistanceChanged</db:emphasis>(<db:emphasis>float</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="focusMode-prop">
<db:title>focusMode : FocusMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>FocusMode</db:type>
<db:varname>focusMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">focusMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setFocusMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current camera focus mode.</db:para>
<db:para>Sets up different focus modes for the camera. All auto focus modes will focus continuously. Locking the focus is possible by setting the focus mode to <db:link xlink:href="qcamera.xml#FocusMode-enum">FocusModeManual</db:link>. This will keep the current focus and stop any automatic focusing.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamera.xml#FocusMode-enum">QCamera::FocusMode</db:link></db:type> <db:emphasis role="bold">focusMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFocusMode</db:emphasis>(<db:type><db:link xlink:href="qcamera.xml#FocusMode-enum">QCamera::FocusMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#isFocusModeSupported">isFocusModeSupported</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusPoint-prop">
<db:title>[read-only] focusPoint : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>focusPoint</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">focusPoint</db:synopsisinfo>
<db:synopsisinfo role="notifier">focusPointChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the point currently used by the auto focus system to focus onto.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">focusPoint</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">focusPointChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="isoSensitivity-prop">
<db:title>[read-only] isoSensitivity : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>isoSensitivity</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isoSensitivity</db:synopsisinfo>
<db:synopsisinfo role="notifier">isoSensitivityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the sensor ISO sensitivity.</db:para>
<db:para>Describes the ISO sensitivity currently used by the camera.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">isoSensitivity</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#isoSensitivityChanged">isoSensitivityChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#setAutoIsoSensitivity">setAutoIsoSensitivity</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#manualIsoSensitivity-prop">setManualIsoSensitivity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="manualExposureTime-prop">
<db:title>manualExposureTime : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>manualExposureTime</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">manualExposureTime</db:synopsisinfo>
<db:synopsisinfo role="setter">setManualExposureTime</db:synopsisinfo>
<db:synopsisinfo role="notifier">manualExposureTimeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Set the manual exposure time to <db:code role="parameter">seconds</db:code></db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#manualExposureTime">manualExposureTime</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setManualExposureTime</db:emphasis>(<db:type>float</db:type> <db:emphasis>seconds</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">manualExposureTimeChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>speed</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="manualIsoSensitivity-prop">
<db:title>manualIsoSensitivity : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>manualIsoSensitivity</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">manualIsoSensitivity</db:synopsisinfo>
<db:synopsisinfo role="setter">setManualIsoSensitivity</db:synopsisinfo>
<db:synopsisinfo role="notifier">manualIsoSensitivityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Describes a manually set ISO sensitivity</db:para>
<db:para>Setting this property to -1 (the default), implies that the camera automatically adjusts the ISO sensitivity.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">manualIsoSensitivity</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setManualIsoSensitivity</db:emphasis>(<db:type>int</db:type> <db:emphasis>iso</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">manualIsoSensitivityChanged</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximumZoomFactor-prop">
<db:title>[read-only] maximumZoomFactor : const float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>maximumZoomFactor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maximumZoomFactor</db:synopsisinfo>
<db:synopsisinfo role="notifier">maximumZoomFactorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the maximum zoom factor.</db:para>
<db:para>This will be <db:code>1.0</db:code> on cameras that do not support zooming.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">maximumZoomFactor</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">maximumZoomFactorChanged</db:emphasis>(<db:emphasis>float</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="minimumZoomFactor-prop">
<db:title>[read-only] minimumZoomFactor : const float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>minimumZoomFactor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minimumZoomFactor</db:synopsisinfo>
<db:synopsisinfo role="notifier">minimumZoomFactorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the minimum zoom factor.</db:para>
<db:para>This will be <db:code>1.0</db:code> on cameras that do not support zooming.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">minimumZoomFactor</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">minimumZoomFactorChanged</db:emphasis>(<db:emphasis>float</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="supportedFeatures-prop">
<db:title>[read-only] supportedFeatures : const Features</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Features</db:type>
<db:varname>supportedFeatures</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">supportedFeatures</db:synopsisinfo>
<db:synopsisinfo role="notifier">supportedFeaturesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the features supported by this camera.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamera.xml#Feature-enum">QCamera::Features</db:link></db:type> <db:emphasis role="bold">supportedFeatures</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">supportedFeaturesChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#Feature-enum">QCamera::Feature</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="torchMode-prop">
<db:title>torchMode : QCamera::TorchMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QCamera::TorchMode</db:type>
<db:varname>torchMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">torchMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setTorchMode</db:synopsisinfo>
<db:synopsisinfo role="notifier">torchModeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the torch mode being used.</db:para>
<db:para>A torch is a continuous source of light. It can be used during video recording in low light conditions. Enabling torch mode will usually override any currently set flash mode.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamera.xml#TorchMode-enum">QCamera::TorchMode</db:link></db:type> <db:emphasis role="bold">torchMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTorchMode</db:emphasis>(<db:type><db:link xlink:href="qcamera.xml#TorchMode-enum">QCamera::TorchMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">torchModeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#TorchMode-enum">QCamera::TorchMode</db:link></db:member>
<db:member><db:link xlink:href="qcamera.xml#isTorchModeSupported">QCamera::isTorchModeSupported</db:link></db:member>
<db:member><db:link xlink:href="qcamera.xml#flashMode-prop">QCamera::flashMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="whiteBalanceMode-prop">
<db:title>whiteBalanceMode : WhiteBalanceMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>WhiteBalanceMode</db:type>
<db:varname>whiteBalanceMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">whiteBalanceMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setWhiteBalanceMode</db:synopsisinfo>
<db:synopsisinfo role="notifier">whiteBalanceModeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the white balance mode being used.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamera.xml#WhiteBalanceMode-enum">QCamera::WhiteBalanceMode</db:link></db:type> <db:emphasis role="bold">whiteBalanceMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#setWhiteBalanceMode">setWhiteBalanceMode</db:link></db:emphasis>(<db:type><db:link xlink:href="qcamera.xml#WhiteBalanceMode-enum">QCamera::WhiteBalanceMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">whiteBalanceModeChanged</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="zoomFactor-prop">
<db:title>zoomFactor : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>zoomFactor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">zoomFactor</db:synopsisinfo>
<db:synopsisinfo role="setter">setZoomFactor</db:synopsisinfo>
<db:synopsisinfo role="notifier">zoomFactorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current zoom factor.</db:para>
<db:para>Gets or sets the current zoom factor. Values will be clamped between <db:link xlink:href="qcamera.xml#minimumZoomFactor-prop">minimumZoomFactor</db:link> and <db:link xlink:href="qcamera.xml#maximumZoomFactor-prop">maximumZoomFactor</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">zoomFactor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamera.xml#setZoomFactor">setZoomFactor</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>factor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">zoomFactorChanged</db:emphasis>(<db:emphasis>float</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCamera">
<db:title>[explicit] QCamera::QCamera(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCamera</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCamera(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a <db:link xlink:href="qcamera.xml">QCamera</db:link> with a <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Selects the default camera on the system if more than one camera is available.</db:para>
</db:section>
<db:section xml:id="QCamera-1">
<db:title>[explicit] QCamera::QCamera(const QCameraDevice &amp;<db:emphasis>cameraDevice</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCamera</db:methodname>
<db:methodparam>
<db:type>const QCameraDevice &amp;</db:type>
<db:parameter>cameraDevice</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCamera(const QCameraDevice &amp;cameraDevice, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a <db:link xlink:href="qcamera.xml">QCamera</db:link> from a camera description <db:code role="parameter">cameraDevice</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QCamera-2">
<db:title>[explicit] QCamera::QCamera(QCameraDevice::Position <db:emphasis>position</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCamera</db:methodname>
<db:methodparam>
<db:type>QCameraDevice::Position</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QCamera(QCameraDevice::Position position, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a <db:link xlink:href="qcamera.xml">QCamera</db:link> which uses a hardware camera located a the specified <db:code role="parameter">position</db:code>.</db:para>
<db:para>For example on a mobile phone it can be used to easily choose between front-facing and back-facing cameras.</db:para>
<db:para>If no camera is available at the specified <db:code role="parameter">position</db:code> or if <db:code role="parameter">position</db:code> is <db:link xlink:href="qcameradevice.xml#Position-enum">QCameraDevice::UnspecifiedPosition</db:link>, the default camera is used.</db:para>
</db:section>
<db:section xml:id="dtor.QCamera">
<db:title>[virtual] QCamera::~QCamera()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QCamera</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCamera()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the camera object.</db:para>
</db:section>
<db:section xml:id="captureSession">
<db:title>QMediaCaptureSession *QCamera::captureSession() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaCaptureSession *</db:type>
<db:methodname>captureSession</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaCaptureSession * captureSession() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the capture session this camera is connected to, or a nullptr if the camera is not connected to a capture session.</db:para>
<db:para>use <db:link xlink:href="qmediacapturesession.xml#camera-prop">QMediaCaptureSession::setCamera</db:link>() to connect the camera to a session.</db:para>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QCamera::errorOccurred(QCamera::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QCamera::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>errorString</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QCamera::Error error, const QString &amp;errorString)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when error state changes to <db:code role="parameter">error</db:code>. A description of the error is provided as <db:code role="parameter">errorString</db:code>.</db:para>
</db:section>
<db:section xml:id="exposureCompensationChanged">
<db:title>void QCamera::exposureCompensationChanged(float <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>exposureCompensationChanged</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">exposureCompensation</db:synopsisinfo>
<db:synopsisinfo role="signature">void exposureCompensationChanged(float value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the exposure compensation changes to <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcamera.xml#exposureCompensation-prop">exposureCompensation</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="exposureTime">
<db:title>float QCamera::exposureTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>exposureTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">exposureTime</db:synopsisinfo>
<db:synopsisinfo role="signature">float exposureTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current exposure time in seconds.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qcamera.xml#exposureTime-prop">exposureTime</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="exposureTimeChanged">
<db:title>void QCamera::exposureTimeChanged(float <db:emphasis>speed</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>exposureTimeChanged</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>speed</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">exposureTime</db:synopsisinfo>
<db:synopsisinfo role="signature">void exposureTimeChanged(float speed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a camera's exposure <db:code role="parameter">speed</db:code> has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcamera.xml#exposureTime-prop">exposureTime</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="flashReady">
<db:title>void QCamera::flashReady(bool <db:emphasis>ready</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>flashReady</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>ready</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">flashReady</db:synopsisinfo>
<db:synopsisinfo role="signature">void flashReady(bool ready)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal the flash <db:code role="parameter">ready</db:code> status has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcamera.xml#flashReady-prop">flashReady</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="focusModeChanged">
<db:title>void QCamera::focusModeChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>focusModeChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusModeChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals when the <db:link xlink:href="qcamera.xml#focusMode-prop">focusMode</db:link> changes.</db:para>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QCamera::isActive() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isActive</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">active</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isActive() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the camera is currently active.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qcamera.xml#active-prop">active</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="isAvailable">
<db:title>bool QCamera::isAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAvailable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the camera can be used.</db:para>
</db:section>
<db:section xml:id="isExposureModeSupported">
<db:title>bool QCamera::isExposureModeSupported(QCamera::ExposureMode <db:emphasis>mode</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isExposureModeSupported</db:methodname>
<db:methodparam>
<db:type>QCamera::ExposureMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isExposureModeSupported(QCamera::ExposureMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the exposure <db:code role="parameter">mode</db:code> is supported.</db:para>
</db:section>
<db:section xml:id="isFlashModeSupported">
<db:title>bool QCamera::isFlashModeSupported(QCamera::FlashMode <db:emphasis>mode</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFlashModeSupported</db:methodname>
<db:methodparam>
<db:type>QCamera::FlashMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFlashModeSupported(QCamera::FlashMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the flash <db:code role="parameter">mode</db:code> is supported.</db:para>
</db:section>
<db:section xml:id="isFlashReady">
<db:title>bool QCamera::isFlashReady() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFlashReady</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">flashReady</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFlashReady() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if flash is charged.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qcamera.xml#flashReady-prop">flashReady</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="isFocusModeSupported">
<db:title>bool QCamera::isFocusModeSupported(QCamera::FocusMode <db:emphasis>mode</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFocusModeSupported</db:methodname>
<db:methodparam>
<db:type>QCamera::FocusMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFocusModeSupported(QCamera::FocusMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the focus <db:code role="parameter">mode</db:code> is supported by the camera.</db:para>
</db:section>
<db:section xml:id="isTorchModeSupported">
<db:title>bool QCamera::isTorchModeSupported(QCamera::TorchMode <db:emphasis>mode</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isTorchModeSupported</db:methodname>
<db:methodparam>
<db:type>QCamera::TorchMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isTorchModeSupported(QCamera::TorchMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the torch <db:code role="parameter">mode</db:code> is supported.</db:para>
</db:section>
<db:section xml:id="isWhiteBalanceModeSupported">
<db:title>bool QCamera::isWhiteBalanceModeSupported(QCamera::WhiteBalanceMode <db:emphasis>mode</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isWhiteBalanceModeSupported</db:methodname>
<db:methodparam>
<db:type>QCamera::WhiteBalanceMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWhiteBalanceModeSupported(QCamera::WhiteBalanceMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the white balance <db:code role="parameter">mode</db:code> is supported.</db:para>
</db:section>
<db:section xml:id="isoSensitivityChanged">
<db:title>void QCamera::isoSensitivityChanged(int <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>isoSensitivityChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">isoSensitivity</db:synopsisinfo>
<db:synopsisinfo role="signature">void isoSensitivityChanged(int value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when sensitivity changes to <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcamera.xml#isoSensitivity-prop">isoSensitivity</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="manualExposureTime">
<db:title>float QCamera::manualExposureTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>manualExposureTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">manualExposureTime</db:synopsisinfo>
<db:synopsisinfo role="signature">float manualExposureTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the manual exposure time in seconds, or -1 if the camera is using automatic exposure times.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qcamera.xml#manualExposureTime-prop">manualExposureTime</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#manualExposureTime-prop">setManualExposureTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumExposureTime">
<db:title>float QCamera::maximumExposureTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>maximumExposureTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float maximumExposureTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The maximal exposure time in seconds.</db:para>
</db:section>
<db:section xml:id="maximumIsoSensitivity">
<db:title>int QCamera::maximumIsoSensitivity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maximumIsoSensitivity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maximumIsoSensitivity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum ISO sensitivity supported by the camera.</db:para>
</db:section>
<db:section xml:id="minimumExposureTime">
<db:title>float QCamera::minimumExposureTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>minimumExposureTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float minimumExposureTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The minimal exposure time in seconds.</db:para>
</db:section>
<db:section xml:id="minimumIsoSensitivity">
<db:title>int QCamera::minimumIsoSensitivity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>minimumIsoSensitivity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int minimumIsoSensitivity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum ISO sensitivity supported by the camera.</db:para>
</db:section>
<db:section xml:id="setActive">
<db:title>void QCamera::setActive(bool <db:emphasis>active</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setActive</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>active</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">active</db:synopsisinfo>
<db:synopsisinfo role="signature">void setActive(bool active)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Turns the camera on if <db:code role="parameter">active</db:code> is <db:code>true</db:code>, or off if it's <db:code>false</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qcamera.xml#active-prop">active</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#isActive">isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAutoExposureTime">
<db:title>void QCamera::setAutoExposureTime()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAutoExposureTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAutoExposureTime()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Use automatically calculated exposure time</db:para>
</db:section>
<db:section xml:id="setAutoIsoSensitivity">
<db:title>void QCamera::setAutoIsoSensitivity()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAutoIsoSensitivity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAutoIsoSensitivity()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Turn on auto sensitivity</db:para>
</db:section>
<db:section xml:id="setCameraDevice">
<db:title>void QCamera::setCameraDevice(const QCameraDevice &amp;<db:emphasis>cameraDevice</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCameraDevice</db:methodname>
<db:methodparam>
<db:type>const QCameraDevice &amp;</db:type>
<db:parameter>cameraDevice</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">cameraDevice</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCameraDevice(const QCameraDevice &amp;cameraDevice)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Connects the camera object to the physical camera device described by <db:code role="parameter">cameraDevice</db:code>. Using a default constructed <db:link xlink:href="qcameradevice.xml">QCameraDevice</db:link> object as <db:code role="parameter">cameraDevice</db:code> will connect the camera to the system default camera device.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qcamera.xml#cameraDevice-prop">cameraDevice</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#cameraDevice-prop">cameraDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCameraFormat">
<db:title>void QCamera::setCameraFormat(const QCameraFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCameraFormat</db:methodname>
<db:methodparam>
<db:type>const QCameraFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">cameraFormat</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCameraFormat(const QCameraFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Tells the camera to use the format described by <db:code role="parameter">format</db:code>. This can be used to define a specific resolution and frame rate to be used for recording and image capture.</db:para>
<db:note>
<db:para>When using the FFMPEG backend on an Android target device if you request <db:emphasis role="bold">YUV420P</db:emphasis> format, you will receive either a fully planar 4:2:0 YUV420P or a semi-planar NV12/NV21. This depends on the codec implemented by the device OEM.</db:para>
</db:note>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qcamera.xml#cameraFormat-prop">cameraFormat</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#cameraFormat-prop">cameraFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColorTemperature">
<db:title>void QCamera::setColorTemperature(int <db:emphasis>colorTemperature</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColorTemperature</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>colorTemperature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">colorTemperature</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColorTemperature(int colorTemperature)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets manual white balance to <db:code role="parameter">colorTemperature</db:code>. This is used when <db:link xlink:href="qcamera.xml#whiteBalanceMode-prop">whiteBalanceMode</db:link>() is set to <db:code>WhiteBalanceManual</db:code>. The units are Kelvin.</db:para>
<db:para>Setting a color temperature will only have an effect if <db:link xlink:href="qcamera.xml#WhiteBalanceMode-enum">WhiteBalanceManual</db:link> is supported. In this case, setting a temperature greater 0 will automatically set the white balance mode to <db:link xlink:href="qcamera.xml#WhiteBalanceMode-enum">WhiteBalanceManual</db:link>. Setting the temperature to 0 will reset the white balance mode to <db:link xlink:href="qcamera.xml#WhiteBalanceMode-enum">WhiteBalanceAuto</db:link>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qcamera.xml#colorTemperature-prop">colorTemperature</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#colorTemperature-prop">colorTemperature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWhiteBalanceMode">
<db:title>void QCamera::setWhiteBalanceMode(QCamera::WhiteBalanceMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWhiteBalanceMode</db:methodname>
<db:methodparam>
<db:type>QCamera::WhiteBalanceMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">whiteBalanceMode</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWhiteBalanceMode(QCamera::WhiteBalanceMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the white balance to <db:code role="parameter">mode</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qcamera.xml#whiteBalanceMode-prop">whiteBalanceMode</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#whiteBalanceMode-prop">whiteBalanceMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setZoomFactor">
<db:title>void QCamera::setZoomFactor(float <db:emphasis>factor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setZoomFactor</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">zoomFactor</db:synopsisinfo>
<db:synopsisinfo role="signature">void setZoomFactor(float factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Zooms to a zoom factor <db:code role="parameter">factor</db:code> at a rate of 1 factor per second.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qcamera.xml#zoomFactor-prop">zoomFactor</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#zoomFactor-prop">zoomFactor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QCamera::start()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void start()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the camera.</db:para>
<db:para>Same as <db:link xlink:href="qcamera.xml#setActive">setActive</db:link>(true).</db:para>
<db:para>If the camera can't be started for some reason, the <db:link xlink:href="qcamera.xml#errorOccurred">errorOccurred</db:link>() signal is emitted.</db:para>
</db:section>
<db:section xml:id="stop">
<db:title>void QCamera::stop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops the camera. Same as <db:link xlink:href="qcamera.xml#setActive">setActive</db:link>(false).</db:para>
</db:section>
<db:section xml:id="zoomTo">
<db:title>void QCamera::zoomTo(float <db:emphasis>factor</db:emphasis>, float <db:emphasis>rate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>zoomTo</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>rate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void zoomTo(float factor, float rate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Zooms to a zoom factor <db:code role="parameter">factor</db:code> using <db:code role="parameter">rate</db:code>.</db:para>
<db:para>The <db:code role="parameter">rate</db:code> is specified in powers of two per second. At a rate of 1 it would take 2 seconds to go from a zoom factor of 1 to 4.</db:para>
<db:note>
<db:para>Using a specific rate is not supported on all cameras. If not supported, zooming will happen as fast as possible.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
