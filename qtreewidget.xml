<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTreeWidget Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> class provides a tree view that uses a predefined tree model.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTreeWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtreeview.xml" xlink:role="class">QTreeView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTreeWidget is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> class is a convenience class that provides a standard tree widget with a classic item-based interface similar to that used by the <db:link xlink:href="qlistview.xml">QListView</db:link> class in Qt 3. This class is based on Qt's Model/View architecture and uses a default model to hold items, each of which is a <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link>.</db:para>
<db:para>Developers who do not need the flexibility of the Model/View framework can use this class to create simple hierarchical lists very easily. A more flexible approach involves combining a <db:link xlink:href="qtreeview.xml">QTreeView</db:link> with a standard item model. This allows the storage of data to be separated from its representation.</db:para>
<db:para>In its simplest form, a tree widget can be constructed in the following way:</db:para>
<db:programlisting language="cpp">QTreeWidget *treeWidget = new QTreeWidget();
treeWidget-&gt;setColumnCount(1);
QList&lt;QTreeWidgetItem *&gt; items;
for (int i = 0; i &lt; 10; ++i)
    items.append(new QTreeWidgetItem((QTreeWidget*)0, QStringList(QString(&quot;item: %1&quot;).arg(i))));
treeWidget-&gt;insertTopLevelItems(0, items);
</db:programlisting>
<db:para>Before items can be added to the tree widget, the number of columns must be set with <db:link xlink:href="qtreewidget.xml#columnCount-prop">setColumnCount</db:link>(). This allows each item to have one or more labels or other decorations. The number of columns in use can be found with the <db:link xlink:href="qtreewidget.xml#columnCount-prop">columnCount</db:link>() function.</db:para>
<db:para>The tree can have a header that contains a section for each column in the widget. It is easiest to set up the labels for each section by supplying a list of strings with <db:link xlink:href="qtreewidget.xml#setHeaderLabels">setHeaderLabels</db:link>(), but a custom header can be constructed with a <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link> and inserted into the tree with the <db:link xlink:href="qtreewidget.xml#setHeaderItem">setHeaderItem</db:link>() function.</db:para>
<db:para>The items in the tree can be sorted by column according to a predefined sort order. If sorting is enabled, the user can sort the items by clicking on a column header. Sorting can be enabled or disabled by calling <db:link xlink:href="qtreeview.xml#sortingEnabled-prop">setSortingEnabled</db:link>(). The <db:link xlink:href="qtreeview.xml#sortingEnabled-prop">isSortingEnabled</db:link>() function indicates whether sorting is enabled.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-treeview.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Windows Vista style tree widget</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/macintosh-treeview.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Macintosh style tree widget</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-treeview.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Fusion style tree widget</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>A <db:link xlink:href="gallery-windowsvista.xml">Windows Vista style</db:link> tree widget.</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="gallery-macintosh.xml">Macintosh style</db:link> tree widget.</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="gallery-fusion.xml">Fusion style</db:link> tree widget.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link></db:member>
<db:member><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:member>
<db:member><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-tools-settingseditor-example.xml">Settings Editor Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="columnCount-prop">
<db:title>columnCount : int</db:title>
<db:para>This property holds the number of columns displayed in the tree widget</db:para>
<db:para>By default, this property has a value of 1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">columnCount</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setColumnCount</db:emphasis>(<db:type>int</db:type> <db:emphasis>columns</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="topLevelItemCount-prop">
<db:title>[read-only] topLevelItemCount : const int</db:title>
<db:para>This property holds the number of top-level items</db:para>
<db:para>By default, this property has a value of 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">topLevelItemCount</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#columnCount-prop">columnCount</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#currentItem">currentItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTreeWidget">
<db:title>[explicit] QTreeWidget::QTreeWidget(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a tree widget with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTreeWidget">
<db:title>[virtual noexcept] QTreeWidget::~QTreeWidget()</db:title>
<db:para>Destroys the tree widget and all its items.</db:para>
</db:section>
<db:section xml:id="addTopLevelItem">
<db:title>[since 4.1] void QTreeWidget::addTopLevelItem(QTreeWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Appends the <db:code role="parameter">item</db:code> as a top-level item in the widget.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#insertTopLevelItem">insertTopLevelItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addTopLevelItems">
<db:title>void QTreeWidget::addTopLevelItems(const QList&lt;QTreeWidgetItem *&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:para>Appends the list of <db:code role="parameter">items</db:code> as a top-level items in the widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#insertTopLevelItems">insertTopLevelItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QTreeWidget::clear()</db:title>
<db:para>Clears the tree widget by removing all of its items and selections.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Since each item is removed from the tree widget before being deleted, the return value of <db:link xlink:href="qtreewidgetitem.xml#treeWidget">QTreeWidgetItem::treeWidget</db:link>() will be invalid when called from an item's destructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#takeTopLevelItem">takeTopLevelItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#topLevelItemCount-prop">topLevelItemCount</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#columnCount-prop">columnCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closePersistentEditor">
<db:title>void QTreeWidget::closePersistentEditor(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis> = 0)</db:title>
<db:para>Closes the persistent editor for the <db:code role="parameter">item</db:code> in the given <db:code role="parameter">column</db:code>.</db:para>
<db:para>This function has no effect if no persistent editor is open for this combination of item and column.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#openPersistentEditor">openPersistentEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="collapseItem">
<db:title>void QTreeWidget::collapseItem(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Closes the <db:code role="parameter">item</db:code>. This causes the tree containing the item's children to be collapsed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#expandItem">expandItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#currentItem">currentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#topLevelItem">topLevelItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentColumn">
<db:title>[since 4.1] int QTreeWidget::currentColumn() const</db:title>
<db:para>Returns the current column in the tree widget.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#setCurrentItem">setCurrentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#columnCount-prop">columnCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentItem">
<db:title>QTreeWidgetItem *QTreeWidget::currentItem() const</db:title>
<db:para>Returns the current item in the tree widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#setCurrentItem">setCurrentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#currentItemChanged">currentItemChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentItemChanged">
<db:title>void QTreeWidget::currentItemChanged(QTreeWidgetItem *<db:emphasis>current</db:emphasis>, QTreeWidgetItem *<db:emphasis>previous</db:emphasis>)</db:title>
<db:para>This signal is emitted when the current item changes. The current item is specified by <db:code role="parameter">current</db:code>, and this replaces the <db:code role="parameter">previous</db:code> current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#setCurrentItem">setCurrentItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QTreeWidget::dropEvent(QDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#dropEvent" role="function">QAbstractItemView::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[virtual protected] bool QTreeWidget::dropMimeData(QTreeWidgetItem *<db:emphasis>parent</db:emphasis>, int <db:emphasis>index</db:emphasis>, const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>)</db:title>
<db:para>Handles the <db:code role="parameter">data</db:code> supplied by a drag and drop operation that ended with the given <db:code role="parameter">action</db:code> in the <db:code role="parameter">index</db:code> in the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:para>The default implementation returns true if the drop was successfully handled by decoding the mime data and inserting it into the model; otherwise it returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#supportedDropActions">supportedDropActions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="editItem">
<db:title>void QTreeWidget::editItem(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis> = 0)</db:title>
<db:para>Starts editing the <db:code role="parameter">item</db:code> in the given <db:code role="parameter">column</db:code> if it is editable.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QTreeWidget::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#event" role="function">QAbstractItemView::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="expandItem">
<db:title>void QTreeWidget::expandItem(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Expands the <db:code role="parameter">item</db:code>. This causes the tree containing the item's children to be expanded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#collapseItem">collapseItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#currentItem">currentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#topLevelItem">topLevelItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#itemExpanded">itemExpanded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findItems">
<db:title>QList&lt;QTreeWidgetItem *&gt; QTreeWidget::findItems(const QString &amp;<db:emphasis>text</db:emphasis>, Qt::MatchFlags <db:emphasis>flags</db:emphasis>, int <db:emphasis>column</db:emphasis> = 0) const</db:title>
<db:para>Returns a list of items that match the given <db:code role="parameter">text</db:code>, using the given <db:code role="parameter">flags</db:code>, in the given <db:code role="parameter">column</db:code>.</db:para>
</db:section>
<db:section xml:id="headerItem">
<db:title>QTreeWidgetItem *QTreeWidget::headerItem() const</db:title>
<db:para>Returns the item used for the tree widget's header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#setHeaderItem">setHeaderItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexFromItem">
<db:title>[protected] QModelIndex QTreeWidget::indexFromItem(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis> = 0) const</db:title>
<db:para>Returns the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> associated with the given <db:code role="parameter">item</db:code> in the given <db:code role="parameter">column</db:code>.</db:para>
<db:note>
<db:para>In Qt versions prior to 5.7, this function took a non-const <db:code role="parameter">item</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#itemFromIndex">itemFromIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#topLevelItem">topLevelItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfTopLevelItem">
<db:title>int QTreeWidget::indexOfTopLevelItem(QTreeWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the index of the given top-level <db:code role="parameter">item</db:code>, or -1 if the item cannot be found.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#sortItems">sortItems</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#topLevelItemCount-prop">topLevelItemCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertTopLevelItem">
<db:title>void QTreeWidget::insertTopLevelItem(int <db:emphasis>index</db:emphasis>, QTreeWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Inserts the <db:code role="parameter">item</db:code> at <db:code role="parameter">index</db:code> in the top level in the view.</db:para>
<db:para>If the item has already been inserted somewhere else it won't be inserted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#addTopLevelItem">addTopLevelItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#columnCount-prop">columnCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertTopLevelItems">
<db:title>[since 4.1] void QTreeWidget::insertTopLevelItems(int <db:emphasis>index</db:emphasis>, const QList&lt;QTreeWidgetItem *&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:para>Inserts the list of <db:code role="parameter">items</db:code> at <db:code role="parameter">index</db:code> in the top level in the view.</db:para>
<db:para>Items that have already been inserted somewhere else won't be inserted.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#addTopLevelItems">addTopLevelItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invisibleRootItem">
<db:title>[since 4.2] QTreeWidgetItem *QTreeWidget::invisibleRootItem() const</db:title>
<db:para>Returns the tree widget's invisible root item.</db:para>
<db:para>The invisible root item provides access to the tree widget's top-level items through the <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link> API, making it possible to write functions that can treat top-level items and their children in a uniform way; for example, recursive functions.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="isFirstItemColumnSpanned">
<db:title>[since 4.3] bool QTreeWidget::isFirstItemColumnSpanned(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns true if the given <db:code role="parameter">item</db:code> is set to show only one section over all columns; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#setFirstItemColumnSpanned">setFirstItemColumnSpanned</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemAbove">
<db:title>[since 4.3] QTreeWidgetItem *QTreeWidget::itemAbove(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the item above the given <db:code role="parameter">item</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="itemActivated">
<db:title>void QTreeWidget::itemActivated(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user activates an item by single- or double-clicking (depending on the platform, i.e. on the <db:link xlink:href="qstyle.xml#StyleHint-enum">QStyle::SH_ItemView_ActivateItemOnSingleClick</db:link> style hint) or pressing a special key (e.g., <db:guilabel>Enter</db:guilabel>).</db:para>
<db:para>The specified <db:code role="parameter">item</db:code> is the item that was clicked, or 0 if no item was clicked. The <db:code role="parameter">column</db:code> is the item's column that was clicked, or -1 if no item was clicked.</db:para>
</db:section>
<db:section xml:id="itemAt">
<db:title>QTreeWidgetItem *QTreeWidget::itemAt(const QPoint &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>Returns a pointer to the item at the coordinates <db:code role="parameter">p</db:code>. The coordinates are relative to the tree widget's <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#visualItemRect">visualItemRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemAt-1">
<db:title>QTreeWidgetItem *QTreeWidget::itemAt(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a pointer to the item at the coordinates (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>). The coordinates are relative to the tree widget's <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>().</db:para>
</db:section>
<db:section xml:id="itemBelow">
<db:title>[since 4.3] QTreeWidgetItem *QTreeWidget::itemBelow(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the item visually below the given <db:code role="parameter">item</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="itemChanged">
<db:title>void QTreeWidget::itemChanged(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>This signal is emitted when the contents of the <db:code role="parameter">column</db:code> in the specified <db:code role="parameter">item</db:code> changes.</db:para>
</db:section>
<db:section xml:id="itemClicked">
<db:title>void QTreeWidget::itemClicked(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user clicks inside the widget.</db:para>
<db:para>The specified <db:code role="parameter">item</db:code> is the item that was clicked. The <db:code role="parameter">column</db:code> is the item's column that was clicked. If no item was clicked, no signal will be emitted.</db:para>
</db:section>
<db:section xml:id="itemCollapsed">
<db:title>void QTreeWidget::itemCollapsed(QTreeWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted when the specified <db:code role="parameter">item</db:code> is collapsed so that none of its children are displayed.</db:para>
<db:note>
<db:para>This signal will not be emitted if an item changes its state when <db:link xlink:href="qtreeview.xml#collapseAll">collapseAll</db:link>() is invoked.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#isExpanded">QTreeWidgetItem::isExpanded</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#itemExpanded">itemExpanded</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#collapseItem">collapseItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemDoubleClicked">
<db:title>void QTreeWidget::itemDoubleClicked(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user double clicks inside the widget.</db:para>
<db:para>The specified <db:code role="parameter">item</db:code> is the item that was clicked, or 0 if no item was clicked. The <db:code role="parameter">column</db:code> is the item's column that was clicked. If no item was double clicked, no signal will be emitted.</db:para>
</db:section>
<db:section xml:id="itemEntered">
<db:title>void QTreeWidget::itemEntered(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>This signal is emitted when the mouse cursor enters an <db:code role="parameter">item</db:code> over the specified <db:code role="parameter">column</db:code>. <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> mouse tracking needs to be enabled for this feature to work.</db:para>
</db:section>
<db:section xml:id="itemExpanded">
<db:title>void QTreeWidget::itemExpanded(QTreeWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted when the specified <db:code role="parameter">item</db:code> is expanded so that all of its children are displayed.</db:para>
<db:note>
<db:para>This signal will not be emitted if an item changes its state when <db:link xlink:href="qtreeview.xml#expandAll">expandAll</db:link>() is invoked.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitem.xml#isExpanded">QTreeWidgetItem::isExpanded</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#itemCollapsed">itemCollapsed</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#expandItem">expandItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemFromIndex">
<db:title>[protected] QTreeWidgetItem *QTreeWidget::itemFromIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns a pointer to the <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link> associated with the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#indexFromItem">indexFromItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemPressed">
<db:title>void QTreeWidget::itemPressed(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user presses a mouse button inside the widget.</db:para>
<db:para>The specified <db:code role="parameter">item</db:code> is the item that was clicked, or 0 if no item was clicked. The <db:code role="parameter">column</db:code> is the item's column that was clicked, or -1 if no item was clicked.</db:para>
</db:section>
<db:section xml:id="itemSelectionChanged">
<db:title>void QTreeWidget::itemSelectionChanged()</db:title>
<db:para>This signal is emitted when the selection changes in the tree widget. The current selection can be found with <db:link xlink:href="qtreewidget.xml#selectedItems">selectedItems</db:link>().</db:para>
</db:section>
<db:section xml:id="itemWidget">
<db:title>[since 4.1] QWidget *QTreeWidget::itemWidget(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis>) const</db:title>
<db:para>Returns the widget displayed in the cell specified by <db:code role="parameter">item</db:code> and the given <db:code role="parameter">column</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#setItemWidget">setItemWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mimeData">
<db:title>[virtual protected] QMimeData *QTreeWidget::mimeData(const QList&lt;QTreeWidgetItem *&gt; <db:emphasis>items</db:emphasis>) const</db:title>
<db:para>Returns an object that contains a serialized description of the specified <db:code role="parameter">items</db:code>. The format used to describe the items is obtained from the <db:link xlink:href="qtreewidget.xml#mimeTypes">mimeTypes</db:link>() function.</db:para>
<db:para>If the list of items is empty, 0 is returned rather than a serialized empty list.</db:para>
</db:section>
<db:section xml:id="mimeTypes">
<db:title>[virtual protected] QStringList QTreeWidget::mimeTypes() const</db:title>
<db:para>Returns a list of MIME types that can be used to describe a list of treewidget items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#mimeData">mimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="openPersistentEditor">
<db:title>void QTreeWidget::openPersistentEditor(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis> = 0)</db:title>
<db:para>Opens a persistent editor for the <db:code role="parameter">item</db:code> in the given <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#closePersistentEditor">closePersistentEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeItemWidget">
<db:title>[since 4.3] void QTreeWidget::removeItemWidget(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Removes the widget set in the given <db:code role="parameter">item</db:code> in the given <db:code role="parameter">column</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="scrollToItem">
<db:title>void QTreeWidget::scrollToItem(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>, QAbstractItemView::ScrollHint <db:emphasis>hint</db:emphasis> = EnsureVisible)</db:title>
<db:para>Ensures that the <db:code role="parameter">item</db:code> is visible, scrolling the view if necessary using the specified <db:code role="parameter">hint</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#currentItem">currentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#topLevelItem">topLevelItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedItems">
<db:title>QList&lt;QTreeWidgetItem *&gt; QTreeWidget::selectedItems() const</db:title>
<db:para>Returns a list of all selected non-hidden items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#itemSelectionChanged">itemSelectionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentItem">
<db:title>void QTreeWidget::setCurrentItem(QTreeWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Sets the current <db:code role="parameter">item</db:code> in the tree widget.</db:para>
<db:para>Unless the selection mode is <db:link xlink:href="qabstractitemview.xml#SelectionMode-enum">NoSelection</db:link>, the item is also selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#currentItem">currentItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#currentItemChanged">currentItemChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentItem-1">
<db:title>[since 4.1] void QTreeWidget::setCurrentItem(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Sets the current <db:code role="parameter">item</db:code> in the tree widget and the current column to <db:code role="parameter">column</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#currentItem">currentItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentItem-2">
<db:title>[since 4.4] void QTreeWidget::setCurrentItem(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>command</db:emphasis>)</db:title>
<db:para>Sets the current <db:code role="parameter">item</db:code> in the tree widget and the current column to <db:code role="parameter">column</db:code>, using the given <db:code role="parameter">command</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#currentItem">currentItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFirstItemColumnSpanned">
<db:title>[since 4.3] void QTreeWidget::setFirstItemColumnSpanned(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>, bool <db:emphasis>span</db:emphasis>)</db:title>
<db:para>Sets the given <db:code role="parameter">item</db:code> to only show one section for all columns if <db:code role="parameter">span</db:code> is true; otherwise the item will show one section per column.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#isFirstItemColumnSpanned">isFirstItemColumnSpanned</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeaderItem">
<db:title>void QTreeWidget::setHeaderItem(QTreeWidgetItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Sets the header <db:code role="parameter">item</db:code> for the tree widget. The label for each column in the header is supplied by the corresponding label in the item.</db:para>
<db:para>The tree widget takes ownership of the item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#headerItem">headerItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#setHeaderLabels">setHeaderLabels</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeaderLabel">
<db:title>[since 4.2] void QTreeWidget::setHeaderLabel(const QString &amp;<db:emphasis>label</db:emphasis>)</db:title>
<db:para>Same as <db:link xlink:href="qtreewidget.xml#setHeaderLabels">setHeaderLabels</db:link>(<db:link xlink:href="qstringlist.xml">QStringList</db:link>(<db:code role="parameter">label</db:code>)).</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="setHeaderLabels">
<db:title>void QTreeWidget::setHeaderLabels(const QStringList &amp;<db:emphasis>labels</db:emphasis>)</db:title>
<db:para>Adds a column in the header for each item in the <db:code role="parameter">labels</db:code> list, and sets the label for each column.</db:para>
<db:para>Note that setHeaderLabels() won't remove existing columns.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#setHeaderItem">setHeaderItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#setHeaderLabel">setHeaderLabel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemWidget">
<db:title>[since 4.1] void QTreeWidget::setItemWidget(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>column</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets the given <db:code role="parameter">widget</db:code> to be displayed in the cell specified by the given <db:code role="parameter">item</db:code> and <db:code role="parameter">column</db:code>.</db:para>
<db:para>The given <db:code role="parameter">widget</db:code>'s <db:link xlink:href="qwidget.xml#autoFillBackground-prop">autoFillBackground</db:link> property must be set to true, otherwise the widget's background will be transparent, showing both the model data and the tree widget item.</db:para>
<db:para>This function should only be used to display static content in the place of a tree widget item. If you want to display custom dynamic content or implement a custom editor widget, use <db:link xlink:href="qtreeview.xml">QTreeView</db:link> and subclass <db:link xlink:href="qitemdelegate.xml">QItemDelegate</db:link> instead.</db:para>
<db:para>This function cannot be called before the item hierarchy has been set up, i.e., the <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link> that will hold <db:code role="parameter">widget</db:code> must have been added to the view before <db:code role="parameter">widget</db:code> is set.</db:para>
<db:note>
<db:para>The tree takes ownership of the widget.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#itemWidget">itemWidget</db:link>()</db:member>
<db:member><db:link xlink:href="model-view-programming.xml#delegate-classes">Delegate Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelectionModel">
<db:title>[override virtual] void QTreeWidget::setSelectionModel(QItemSelectionModel *<db:emphasis>selectionModel</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qtreeview.xml#setSelectionModel" role="function">QTreeView::setSelectionModel(QItemSelectionModel *selectionModel)</db:link>.</db:para>
</db:section>
<db:section xml:id="sortColumn">
<db:title>[since 4.1] int QTreeWidget::sortColumn() const</db:title>
<db:para>Returns the column used to sort the contents of the widget.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#sortItems">sortItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortItems">
<db:title>void QTreeWidget::sortItems(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis>)</db:title>
<db:para>Sorts the items in the widget in the specified <db:code role="parameter">order</db:code> by the values in the given <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#sortColumn">sortColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedDropActions">
<db:title>[virtual protected] Qt::DropActions QTreeWidget::supportedDropActions() const</db:title>
<db:para>Returns the drop actions supported by this view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#DropAction-enum">Qt::DropActions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeTopLevelItem">
<db:title>QTreeWidgetItem *QTreeWidget::takeTopLevelItem(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes the top-level item at the given <db:code role="parameter">index</db:code> in the tree and returns it, otherwise returns 0;</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#insertTopLevelItem">insertTopLevelItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#topLevelItem">topLevelItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#topLevelItemCount-prop">topLevelItemCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="topLevelItem">
<db:title>QTreeWidgetItem *QTreeWidget::topLevelItem(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the top level item at the given <db:code role="parameter">index</db:code>, or 0 if the item does not exist.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#topLevelItemCount-prop">topLevelItemCount</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#insertTopLevelItem">insertTopLevelItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visualItemRect">
<db:title>QRect QTreeWidget::visualItemRect(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the rectangle on the viewport occupied by the item at <db:code role="parameter">item</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#itemAt">itemAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QTreeWidget</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="isItemExpanded">
<db:title>[deprecated] bool QTreeWidget::isItemExpanded(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns true if the given <db:code role="parameter">item</db:code> is open; otherwise returns false.</db:para>
<db:para>This function is deprecated. Use <db:link xlink:href="qtreewidgetitem.xml#isExpanded">QTreeWidgetItem::isExpanded</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#itemExpanded">itemExpanded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isItemHidden">
<db:title>[deprecated] bool QTreeWidget::isItemHidden(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns true if the <db:code role="parameter">item</db:code> is explicitly hidden, otherwise returns false.</db:para>
<db:para>This function is deprecated. Use <db:link xlink:href="qtreewidgetitem.xml#isHidden">QTreeWidgetItem::isHidden</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="isItemSelected">
<db:title>[deprecated] bool QTreeWidget::isItemSelected(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns true if the <db:code role="parameter">item</db:code> is selected; otherwise returns false.</db:para>
<db:para>This function is deprecated. Use <db:link xlink:href="qtreewidgetitem.xml#isSelected">QTreeWidgetItem::isSelected</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#itemSelectionChanged">itemSelectionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items">
<db:title>[protected, deprecated] QList&lt;QTreeWidgetItem *&gt; QTreeWidget::items(const QMimeData *<db:emphasis>data</db:emphasis>) const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns an empty list</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#mimeData">mimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemExpanded">
<db:title>[deprecated] void QTreeWidget::setItemExpanded(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>, bool <db:emphasis>expand</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Sets the item referred to by <db:code role="parameter">item</db:code> to either closed or opened, depending on the value of <db:code role="parameter">expand</db:code>.</db:para>
<db:para>This function is deprecated. Use <db:link xlink:href="qtreewidgetitem.xml#setExpanded">QTreeWidgetItem::setExpanded</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#expandItem">expandItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#collapseItem">collapseItem</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#itemExpanded">itemExpanded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemHidden">
<db:title>[deprecated] void QTreeWidget::setItemHidden(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>, bool <db:emphasis>hide</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Hides the given <db:code role="parameter">item</db:code> if <db:code role="parameter">hide</db:code> is true; otherwise shows the item.</db:para>
<db:para>This function is deprecated. Use <db:link xlink:href="qtreewidgetitem.xml#setHidden">QTreeWidgetItem::setHidden</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#isItemHidden">isItemHidden</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#itemChanged">itemChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemSelected">
<db:title>[deprecated] void QTreeWidget::setItemSelected(const QTreeWidgetItem *<db:emphasis>item</db:emphasis>, bool <db:emphasis>select</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>If <db:code role="parameter">select</db:code> is true, the given <db:code role="parameter">item</db:code> is selected; otherwise it is deselected.</db:para>
<db:para>This function is deprecated. Use <db:link xlink:href="qtreewidgetitem.xml#setSelected">QTreeWidgetItem::setSelected</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml#isItemSelected">isItemSelected</db:link>()</db:member>
<db:member><db:link xlink:href="qtreewidget.xml#itemSelectionChanged">itemSelectionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
