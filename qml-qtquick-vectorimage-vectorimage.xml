<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>VectorImage QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Loads a vector image file and displays it in a Qt Quick scene.</db:para>
<db:para>This type was introduced in Qt 6.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.VectorImage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-item.xml">Item</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-vectorimage-vectorimage.xml">VectorImage</db:link> can be used to load a vector image file and display this as an item in a Qt Quick scene. It currently supports the SVG file format.</db:para>
<db:note>
<db:para>This complements the approach of loading the vector image file through an <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> element: <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> creates a raster version of the image at the requested size. <db:link xlink:href="qml-qtquick-vectorimage-vectorimage.xml">VectorImage</db:link> builds a Qt Quick scene that represents the image. This means the resulting item can be scaled and rotated without losing quality, and it will typically consume less memory than the rasterized version.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="fillMode-prop">
<db:title>fillMode : enumeration</db:title>
<db:para>This property defines what happens if the width and height of the <db:link xlink:href="qml-qtquick-vectorimage-vectorimage.xml">VectorImage</db:link> differs from the implicit size of its contents.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>VectorImage.NoResize</db:para>
</db:td>
<db:td>
<db:para>The contents are still rendered at the size provided by the input.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>VectorImage.Stretch</db:para>
</db:td>
<db:td>
<db:para>The contents are scaled to match the width and height of the VectorImage. (This is the default.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>VectorImage.PreserveAspectFit</db:para>
</db:td>
<db:td>
<db:para>The contents are scaled to fit inside the bounds of the VectorImage, while preserving aspect ratio. The actual bounding rect of the contents will sometimes be smaller than the VectorImage item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>VectorImage.PreserveAspectCrop</db:para>
</db:td>
<db:td>
<db:para>The contents are scaled to fill the VectorImage item, while preserving the aspect ratio. The actual bounds of the contents will sometimes be larger than the VectorImage item.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="preferredRendererType-prop">
<db:title>preferredRendererType : enumeration</db:title>
<db:para>Requests a specific backend to use for rendering shapes in the VectorImage.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>VectorImage.GeometryRenderer</db:para>
</db:td>
<db:td>
<db:para>Equivalent to Shape.<db:link xlink:href="qml-qt3d-render-geometryrenderer.xml">GeometryRenderer</db:link>. This backend flattens curves and triangulates the result. It will give aliased results unless multi-sampling is enabled, and curve flattening may be visible when the item is scaled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>VectorImage.CurveRenderer</db:para>
</db:td>
<db:td>
<db:para>Equivalent to Shape.CurveRenderer. With this backend, curves are rendered on the GPU and anti-aliasing is built in. Will typically give better visual results, but at some extra cost to performance.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default is VectorImage.GeometryRenderer.</db:para>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : url</db:title>
<db:para>This property holds the URL of the vector image file to load.</db:para>
<db:para><db:link xlink:href="qml-qtquick-vectorimage-vectorimage.xml">VectorImage</db:link> currently only supports the SVG file format.</db:para>
</db:section>
</db:section>
</db:article>
