<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHstsPolicy Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhstspolicy.xml">QHstsPolicy</db:link> class specifies that a host supports HTTP Strict Transport Security policy (HSTS).</db:para>
<db:para>This class was introduced in Qt 5.9.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHstsPolicy</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.9</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QHstsPolicy is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>HSTS policy defines a period of time during which <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> should only access a host in a secure fashion. HSTS policy is defined by RFC6797.</db:para>
<db:para>You can set expiry time and host name for this policy, and control whether it applies to subdomains, either in the constructor or by calling <db:link xlink:href="qhstspolicy.xml#setExpiry">setExpiry</db:link>(), <db:link xlink:href="qhstspolicy.xml#setHost">setHost</db:link>() and setIncludesSubdomains().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setStrictTransportSecurityEnabled">QNetworkAccessManager::setStrictTransportSecurityEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PolicyFlag-enum">
<db:title>enum QHstsPolicy::PolicyFlag</db:title>
<db:bridgehead renderas="sect2">flags QHstsPolicy::PolicyFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>PolicyFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>IncludeSubDomains</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QHstsPolicy::PolicyFlags</db:typedefname>
</db:typedefsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhstspolicy.xml">QHstsPolicy</db:link></db:emphasis>::IncludeSubDomains</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Indicates whether a policy must include subdomains</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PolicyFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PolicyFlag&gt;. </db:code>It stores an OR combination of <db:code>PolicyFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHstsPolicy">
<db:title>QHstsPolicy::QHstsPolicy()</db:title>
<db:constructorsynopsis>
<db:methodname>QHstsPolicy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QHstsPolicy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an invalid (expired) policy with empty host name and subdomains not included.</db:para>
</db:section>
<db:section xml:id="QHstsPolicy-1">
<db:title>QHstsPolicy::QHstsPolicy(const QDateTime &amp;<db:emphasis>expiry</db:emphasis>, QHstsPolicy::PolicyFlags <db:emphasis>flags</db:emphasis>, const QString &amp;<db:emphasis>host</db:emphasis>, QUrl::ParsingMode <db:emphasis>mode</db:emphasis> = QUrl::DecodedMode)</db:title>
<db:constructorsynopsis>
<db:methodname>QHstsPolicy</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>expiry</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHstsPolicy::PolicyFlags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>host</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QUrl::ParsingMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>QUrl::DecodedMode</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QHstsPolicy(const QDateTime &amp;expiry, QHstsPolicy::PolicyFlags flags, const QString &amp;host, QUrl::ParsingMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs <db:link xlink:href="qhstspolicy.xml">QHstsPolicy</db:link> with <db:code role="parameter">expiry</db:code> (in UTC); <db:code role="parameter">flags</db:code> is a value indicating whether this policy must also include subdomains, <db:code role="parameter">host</db:code> data is interpreted according to <db:code role="parameter">mode</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qurl.xml#setHost">QUrl::setHost</db:link>()</db:member>
<db:member><db:link xlink:href="qurl.xml#ParsingMode-enum">QUrl::ParsingMode</db:link></db:member>
<db:member><db:link xlink:href="qhstspolicy.xml#PolicyFlag-enum">QHstsPolicy::PolicyFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QHstsPolicy-2">
<db:title>QHstsPolicy::QHstsPolicy(const QHstsPolicy &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QHstsPolicy</db:methodname>
<db:methodparam>
<db:type>const QHstsPolicy &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QHstsPolicy(const QHstsPolicy &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a copy of <db:code role="parameter">other</db:code> object.</db:para>
</db:section>
<db:section xml:id="dtor.QHstsPolicy">
<db:title>QHstsPolicy::~QHstsPolicy()</db:title>
<db:destructorsynopsis>
<db:methodname>~QHstsPolicy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QHstsPolicy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="expiry">
<db:title>QDateTime QHstsPolicy::expiry() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>expiry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime expiry() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the expiration date for the policy (in UTC).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhstspolicy.xml#setExpiry">setExpiry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="host">
<db:title>QString QHstsPolicy::host(QUrl::ComponentFormattingOptions <db:emphasis>options</db:emphasis> = QUrl::FullyDecoded) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>host</db:methodname>
<db:methodparam>
<db:type>QUrl::ComponentFormattingOptions</db:type>
<db:parameter>options</db:parameter>
<db:initializer>QUrl::FullyDecoded</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString host(QUrl::ComponentFormattingOptions options) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a host for a given policy, formatted according to <db:code role="parameter">options</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhstspolicy.xml#setHost">setHost</db:link>()</db:member>
<db:member><db:link xlink:href="qurl.xml#host">QUrl::host</db:link>()</db:member>
<db:member><db:link xlink:href="qurl.xml#ComponentFormattingOption-enum">QUrl::ComponentFormattingOptions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="includesSubDomains">
<db:title>bool QHstsPolicy::includesSubDomains() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>includesSubDomains</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool includesSubDomains() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this policy also includes subdomains.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhstspolicy.xml#setIncludesSubDomains">setIncludesSubDomains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isExpired">
<db:title>bool QHstsPolicy::isExpired() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isExpired</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isExpired() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return true if this policy has a valid expiration date and this date is greater than QDateTime::currentGetDateTimeUtc().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhstspolicy.xml#setExpiry">setExpiry</db:link>()</db:member>
<db:member><db:link xlink:href="qhstspolicy.xml#expiry">expiry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setExpiry">
<db:title>void QHstsPolicy::setExpiry(const QDateTime &amp;<db:emphasis>expiry</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setExpiry</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>expiry</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setExpiry(const QDateTime &amp;expiry)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the expiration date for the policy (in UTC) to <db:code role="parameter">expiry</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhstspolicy.xml#expiry">expiry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHost">
<db:title>void QHstsPolicy::setHost(const QString &amp;<db:emphasis>host</db:emphasis>, QUrl::ParsingMode <db:emphasis>mode</db:emphasis> = QUrl::DecodedMode)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHost</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>host</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QUrl::ParsingMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>QUrl::DecodedMode</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHost(const QString &amp;host, QUrl::ParsingMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a host, <db:code role="parameter">host</db:code> data is interpreted according to <db:code role="parameter">mode</db:code> parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhstspolicy.xml#host">host</db:link>()</db:member>
<db:member><db:link xlink:href="qurl.xml#setHost">QUrl::setHost</db:link>()</db:member>
<db:member><db:link xlink:href="qurl.xml#ParsingMode-enum">QUrl::ParsingMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIncludesSubDomains">
<db:title>void QHstsPolicy::setIncludesSubDomains(bool <db:emphasis>include</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setIncludesSubDomains</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>include</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setIncludesSubDomains(bool include)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether subdomains are included for this policy to <db:code role="parameter">include</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhstspolicy.xml#includesSubDomains">includesSubDomains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QHstsPolicy::swap(QHstsPolicy &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QHstsPolicy &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QHstsPolicy &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this policy with the <db:code role="parameter">other</db:code> policy.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QHstsPolicy &amp;QHstsPolicy::operator=(const QHstsPolicy &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QHstsPolicy &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QHstsPolicy &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QHstsPolicy &amp; operator=(const QHstsPolicy &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copy-assignment operator, makes a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QHstsPolicy &amp;<db:emphasis>lhs</db:emphasis>, const QHstsPolicy &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QHstsPolicy &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHstsPolicy &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QHstsPolicy &amp;lhs, const QHstsPolicy &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the two policies <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> do not have the same host or expiration date, or do not agree on whether to include or exclude subdomains.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QHstsPolicy &amp;<db:emphasis>lhs</db:emphasis>, const QHstsPolicy &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QHstsPolicy &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHstsPolicy &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QHstsPolicy &amp;lhs, const QHstsPolicy &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the two policies <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> have the same host and expiration date while agreeing on whether to include or exclude subdomains.</db:para>
</db:section>
</db:section>
</db:article>
