<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Integrating with JavaScript values from C++</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Description of how to load and access JavaScript from C++ code.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The following classes can be used to load and access JavaSript from C++ code:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qjsvalue.xml">QJSValue</db:link>, which acts as a container for Qt/JavaScript data types.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link>, which represents a value on the JavaScript heap belonging to a <db:link xlink:href="qjsengine.xml">QJSEngine</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link>, which operates on primitive types in JavaScript semantics.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Use <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> to transfer values to and from the engine, and use <db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link> to interact with JavaScript values. Only use QJSPrimitiveValues if you have to emulate the semantics of JS primitive values in C++.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qjsvalue.xml">QJSValue</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Persistently store values</db:para>
</db:td>
<db:td>
<db:para>Short lived</db:para>
</db:td>
<db:td>
<db:para>Short lived</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Transport values to/from engine</db:para>
</db:td>
<db:td>
<db:para>Access properties</db:para>
</db:td>
<db:td>
<db:para>Only Primitives</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para>Call methods</db:para>
</db:td>
<db:td>
<db:para>Basic arithmetic and comparison</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="qjsvalue-as-a-container-type">
<db:title>QJSValue as a Container Type</db:title>
<db:para><db:link xlink:href="qjsvalue.xml">QJSValue</db:link> stores the Qt/JavaScript data types supported in ECMAScript including function, array and arbitrary object types as well as anything supported by <db:link xlink:href="qvariant.xml">QVariant</db:link>. As a container, it can be used to pass values to and receive values from a <db:link xlink:href="qjsengine.xml">QJSEngine</db:link>.</db:para>
<db:programlisting language="cpp">    class Cache : public QObject
    {
      Q_OBJECT
      QML_ELEMENT

      public:
        Q_INVOKABLE QJSValue lookup(const QString &amp;amp;key) {
          if (auto it = m_cache.constFind(key); it != m_cache.constEnd()) {
            return *it; // impicit conversion
          } else {
            return QJSValue::UndefinedValue; // implicit conversion
          }
        }

      QHash&amp;lt;QString, QString&amp;gt; m_cache;
    }
</db:programlisting>
<db:para>In case of a cache miss, <db:code>undefined</db:code> is returned. Otherwise, the cached value is returned. Note that implicit conversions (from <db:link xlink:href="qstring.xml">QString</db:link> and <db:link xlink:href="qjsvalue.xml#SpecialValue-enum">QJSValue::SpecialValue</db:link> respectively) occur when the value is returned.</db:para>
<db:para><db:link xlink:href="qjsvalue.xml">QJSValue</db:link> also has an API to interact with the contained value, but using <db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link> is recommended.</db:para>
</db:section>
<db:section xml:id="primitive-and-managed-values">
<db:title>Primitive and Managed Values</db:title>
<db:para><db:link xlink:href="qjsvalue.xml">QJSValue</db:link> and <db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link> store values that can be either managed or primitive. In QML’s JS engine, a managed value can be thought of as a pointer to some data structure on the heap, whose memory is managed by the engine’s garbage collector. The actual content of primitive values is stored directly, using a technique called NaN-boxing that enables you to represent a NaN-value in multiple ways, even though only two are actually needed; one for signalling and one for quiet NaN-value.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Primitive Values</db:para>
</db:th>
<db:th>
<db:para>Managed Values</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>int</db:para>
</db:td>
<db:td>
<db:para>Function</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>double</db:para>
</db:td>
<db:td>
<db:para>Array</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>undefined</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qvariant.xml">QVariant</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>null</db:para>
</db:td>
<db:td>
<db:para>string object</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
</db:informaltable>
<db:para>A pointer to the engine can be obtained from a managed value, but not from a primitive one. When using <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> for its JavaScript API, you need access to the engine to evaluate JavaScript. For example, to run the <db:code>call(args)</db:code> function, you have to interpret it in the engine. This works, as the function is a managed value, and you can obtain the engine from it.</db:para>
<db:para>Similarly, where the engine is needed when you call a function or access a property on a primitive number or string. Whenever you call a method on a primitive, an instance of its corresponding non-primitive objects is created. This is referred as boxing. When you write <db:code>(42).constructor</db:code>, that is equivalent to <db:code>(new Number(42)).constructor</db:code>, and it returns the constructor method of the global number object. Accordingly, if you write <db:code>QJSValue(42).property(&quot;constructor&quot;)</db:code>, you would expect to obtain a <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> containing that function. However, what you get is instead a <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> containing <db:code>undefined</db:code>.</db:para>
<db:para>The <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> that you constructed contains only a primitive value, and thus you have no way to access the engine. You also can’t simply hardcode the property lookup for primitive values in <db:link xlink:href="qjsengine.xml">QJSEngine</db:link>, as in one engine you might set <db:emphasis>Number.prototype.constructor.additionalProperty = &quot;the Spanish Inquisition&quot;</db:emphasis> whereas in another <db:emphasis>Number.prototype.constructor.additionalProperty = 42</db:emphasis>. The end result would then clearly be unexpected.</db:para>
<db:para>To ensure that property accesses always work, you would need to always store boxed values in <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> or store an additional pointer to the engine.</db:para>
<db:para>However, this would be incompatible with how <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> is currently used, lead to pointless JS heap allocations when passing around primitives, and increase the size needed to store a <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>. Therefore, you should use <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> only for storage and <db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link> to obtain the engine.</db:para>
</db:section>
<db:section xml:id="qjsmanagedvalue">
<db:title>QJSManagedValue</db:title>
<db:para><db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link> is similar to <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>, with a few differences:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The constructors (except for the default and move constructor2) require passing a <db:link xlink:href="qjsengine.xml">QJSEngine</db:link> pointer.</db:para>
</db:listitem>
<db:listitem>
<db:para>Methods like <db:link xlink:href="qjsmanagedvalue.xml#deleteProperty">deleteProperty</db:link> and <db:link xlink:href="qjsmanagedvalue.xml#isSymbol">isSymbol</db:link> are added.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link> methods encounter an exception, they leave it intact.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To obtain the engine in code, either you are in a scripting context where you’ve already got access to an engine to create new objects with <db:code>QJSEngine::newObject</db:code> and to evaluate expressions with <db:code>QJSEngine::evaluate</db:code>, or you want to evaluate some JavaScript in a <db:link xlink:href="qobject.xml">QObject</db:link> that has been registered with the engine. In the latter case, you can use <db:code>qjsEngine(this)</db:code> to obtain the currently active <db:link xlink:href="qjsengine.xml">QJSEngine</db:link>.</db:para>
<db:para><db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link> also provides a few methods that have no equivalent in <db:link xlink:href="qjsengine.xml">QJSEngine</db:link>.</db:para>
<db:para>In the example below, <db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link> methods encounter an exception, and <db:link xlink:href="qjsengine.xml#catchError">QJSEngine::catchError</db:link> is used to handle the exception.</db:para>
<db:programlisting language="cpp">    QJSEngine engine;
    // We create an object with a read-only property whose getter throws an exception
    auto val = engine.evaluate(&quot;let o = { get f()  {throw 42;} }; o&quot;);
    val.property(&quot;f&quot;);
    qDebug() &amp;lt;&amp;lt; engine.hasError(); // prints false

    // This time, we  construct a QJSManagedValue before accessing the property
    val = engine.evaluate(&quot;let o = { get f()  {throw 42;} }; o&quot;);
    QJSManagedValue managed(std::move(val), &amp;amp;engine);
    managed.property(&quot;f&quot;);
    qDebug() &amp;lt;&amp;lt; engine.hasError(); // prints true

    QJSValue error = engine.catchError();
    Q_ASSERT(error.toInt(), 42);
</db:programlisting>
<db:para>However, inside a method of a registered object, you might want to instead let the exception bubble up the call stack.</db:para>
<db:para><db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link> should be temporarily created on the stack, and discarded once you don’t need to work any longer on the contained value. Since <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> can store primitive values in a more efficient way, <db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link> should also not be used as an interface type which is the return or parameter type of functions, and the type of properties, as the engine does not treat it in a special way, and will not convert values to it (in contrast to <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>).</db:para>
</db:section>
<db:section xml:id="qjsprimitivevalue">
<db:title>QJSPrimitiveValue</db:title>
<db:para><db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> can store any of the primitive types, and supports arithmetic operations and comparisons according to the ECMA-262 standard. It allows for low-overhead operations on primitives in contrast to <db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link>, which always goes through the engine, while still yielding results that are indistinguishable from what the engine would return. As <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> is comparatively large, it is not recommended to store values.</db:para>
</db:section>
</db:article>
