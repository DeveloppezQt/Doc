<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Dynamic Layouts Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to re-orient widgets in running applications.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Dynamic Layouts</db:emphasis> implements dynamically placed widgets within running applications. The widget placement depends on whether Horizontal or Vertical is chosen.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/dynamiclayouts-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>For more information, visit the <db:link xlink:href="layout.xml">Layout Management</db:link> page.</db:para>
<db:section xml:id="dialog-constructor">
<db:title>Dialog Constructor</db:title>
<db:para>To begin with, the application creates the UI components by calling the following methods:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>createRotatableGroupBox()</db:para>
</db:listitem>
<db:listitem>
<db:para>createOptionsGroupBox()</db:para>
</db:listitem>
<db:listitem>
<db:para>createButtonBox()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>It then adds the UI components to a <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml">GridLayout</db:link> (mainLayout).</db:para>
<db:para>Finally, Dialog::rotateWidgets() is called.</db:para>
<db:programlisting language="cpp">    createOptionsGroupBox();
    createButtonBox();

    mainLayout = new QGridLayout;
    mainLayout-&amp;gt;addWidget(rotatableGroupBox, 0, 0);
    mainLayout-&amp;gt;addWidget(optionsGroupBox, 1, 0);
    mainLayout-&amp;gt;addWidget(buttonBox, 2, 0);
    setLayout(mainLayout);

    mainLayout-&amp;gt;setSizeConstraint(QLayout::SetMinimumSize);

    setWindowTitle(tr(&quot;Dynamic Layouts&quot;));
</db:programlisting>
</db:section>
<db:section xml:id="creating-the-main-widgets">
<db:title>Creating the Main Widgets</db:title>
<db:para>The createRotatableGroupBox() method creates a rotatable group box, then adds a series of widgets:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qspinbox.xml">QSpinBox</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qslider.xml">QSlider</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdial.xml">QDial</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprogressbar.xml">QProgressBar</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>It goes on to add signals and slots to each widget, and assigns a <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> called <db:code role="parameter">rotatableLayout</db:code>.</db:para>
<db:programlisting language="cpp">void Dialog::createRotatableGroupBox()
{
    rotatableGroupBox = new QGroupBox(tr(&quot;Rotatable Widgets&quot;));

    rotatableWidgets.enqueue(new QSpinBox);
    rotatableWidgets.enqueue(new QSlider);
    rotatableWidgets.enqueue(new QDial);
    rotatableWidgets.enqueue(new QProgressBar);

    int n = rotatableWidgets.count();
    for (int i = 0; i &amp;lt; n; ++i) {
        connect(rotatableWidgets[i], SIGNAL(valueChanged(int)),
                rotatableWidgets[(i + 1) % n], SLOT(setValue(int)));
    }

    rotatableLayout = new QGridLayout;
    rotatableGroupBox-&amp;gt;setLayout(rotatableLayout);

    rotateWidgets();
}
</db:programlisting>
</db:section>
<db:section xml:id="adding-options">
<db:title>Adding Options</db:title>
<db:para>createOptionsGroupBox() creates the following widgets:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>optionsGroupBox</db:para>
</db:listitem>
<db:listitem>
<db:para>buttonsOrientationLabel</db:para>
</db:listitem>
<db:listitem>
<db:para>buttonsOrientationComboBox. The orientation of the <db:link xlink:href="qml-qtquick-controls2-combobox.xml">ComboBox</db:link> is either horizontal (default value) or vertical. These two values are added during the startup of the application. It is not possible to leave the option empty.</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">void Dialog::createOptionsGroupBox()
{
    optionsGroupBox = new QGroupBox(tr(&quot;Options&quot;));

    buttonsOrientationLabel = new QLabel(tr(&quot;Orientation of buttons:&quot;));

    buttonsOrientationComboBox = new QComboBox;
    buttonsOrientationComboBox-&amp;gt;addItem(tr(&quot;Horizontal&quot;), Qt::Horizontal);
    buttonsOrientationComboBox-&amp;gt;addItem(tr(&quot;Vertical&quot;), Qt::Vertical);

    connect(buttonsOrientationComboBox,
            &amp;amp;QComboBox::currentIndexChanged,
            this,
            &amp;amp;Dialog::buttonsOrientationChanged);

    optionsLayout = new QGridLayout;
    optionsLayout-&amp;gt;addWidget(buttonsOrientationLabel, 0, 0);
    optionsLayout-&amp;gt;addWidget(buttonsOrientationComboBox, 0, 1);
    optionsLayout-&amp;gt;setColumnStretch(2, 1);
    optionsGroupBox-&amp;gt;setLayout(optionsLayout);
}
</db:programlisting>
</db:section>
<db:section xml:id="adding-buttons">
<db:title>Adding Buttons</db:title>
<db:para>createButtonBox() constructs a <db:link xlink:href="qdialogbuttonbox.xml">QDialogButtonBox</db:link> called buttonBox to which are added a closeButton, a helpButton and a rotateWidgetsButton. It then assigns a signal and a slot to each button in buttonBox.</db:para>
<db:programlisting language="cpp">void Dialog::createButtonBox()
{
    buttonBox = new QDialogButtonBox;

    closeButton = buttonBox-&amp;gt;addButton(QDialogButtonBox::Close);
    helpButton = buttonBox-&amp;gt;addButton(QDialogButtonBox::Help);
    rotateWidgetsButton = buttonBox-&amp;gt;addButton(tr(&quot;Rotate &amp;amp;Widgets&quot;),
                                               QDialogButtonBox::ActionRole);

    connect(rotateWidgetsButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Dialog::rotateWidgets);
    connect(closeButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Dialog::close);
    connect(helpButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Dialog::help);
}
</db:programlisting>
</db:section>
<db:section xml:id="rotating-the-widgets">
<db:title>Rotating the Widgets</db:title>
<db:para>Removes the current widgets and activates the next widget.</db:para>
<db:programlisting language="cpp">void Dialog::rotateWidgets()
{
    Q_ASSERT(rotatableWidgets.count() % 2 == 0);

    for (QWidget *widget : std::as_const(rotatableWidgets))
        rotatableLayout-&amp;gt;removeWidget(widget);

    rotatableWidgets.enqueue(rotatableWidgets.dequeue());

    const int n = rotatableWidgets.count();
    for (int i = 0; i &amp;lt; n / 2; ++i) {
        rotatableLayout-&amp;gt;addWidget(rotatableWidgets[n - i - 1], 0, i);
        rotatableLayout-&amp;gt;addWidget(rotatableWidgets[i], 1, i);
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/layouts/dynamiclayouts?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
