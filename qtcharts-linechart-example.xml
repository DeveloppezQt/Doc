<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>LineChart Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a simple line chart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_linechart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To create a line chart, a QLineSeries instance is needed. Let's create one.</db:para>
<db:programlisting language="cpp">    QLineSeries *series = new QLineSeries();
</db:programlisting>
<db:para>Then we add data to the series. We can use the append() member function or use the stream operator.</db:para>
<db:programlisting language="cpp">    series-&gt;append(0, 6);
    series-&gt;append(2, 4);
    series-&gt;append(3, 8);
    series-&gt;append(7, 4);
    series-&gt;append(10, 5);
    *series &lt;&lt; QPointF(11, 1) &lt;&lt; QPointF(13, 3) &lt;&lt; QPointF(17, 6) &lt;&lt; QPointF(18, 3) &lt;&lt; QPointF(20, 2);
</db:programlisting>
<db:para>To present the data on the chart we need a QChart instance. We add the series to it, create the default axes, and set the title of the chart.</db:para>
<db:programlisting language="cpp">    QChart *chart = new QChart();
    chart-&gt;legend()-&gt;hide();
    chart-&gt;addSeries(series);
    chart-&gt;createDefaultAxes();
    chart-&gt;setTitle(&quot;Simple line chart example&quot;);
</db:programlisting>
<db:para>Then we create a QChartView object with QChart as a parameter. This way we don't need to create a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> scene ourselves. We also set the Antialiasing on to have the rendered lines look nicer.</db:para>
<db:programlisting language="cpp">    QChartView *chartView = new QChartView(chart);
    chartView-&gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>The chart is ready to be shown.</db:para>
<db:programlisting language="cpp">    QMainWindow window;
    window.setCentralWidget(chartView);
    window.resize(400, 300);
    window.show();
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="linechart/linechart.pro">linechart/linechart.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="linechart/main.cpp">linechart/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
