<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>LineChart Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a simple line chart.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_linechart.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-line-charts">
<db:title>Creating Line Charts</db:title>
<db:para>To create a line chart, a <db:link xlink:href="qlineseries.xml">QLineSeries</db:link> instance is needed. Let's create one.</db:para>
<db:programlisting language="cpp">    QLineSeries *series = new QLineSeries();
</db:programlisting>
<db:para>Then we add data to the series. We can use the append() member function or use the stream operator.</db:para>
<db:programlisting language="cpp">    series-&amp;gt;append(0, 6);
    series-&amp;gt;append(2, 4);
    series-&amp;gt;append(3, 8);
    series-&amp;gt;append(7, 4);
    series-&amp;gt;append(10, 5);
    *series &amp;lt;&amp;lt; QPointF(11, 1) &amp;lt;&amp;lt; QPointF(13, 3) &amp;lt;&amp;lt; QPointF(17, 6) &amp;lt;&amp;lt; QPointF(18, 3) &amp;lt;&amp;lt; QPointF(20, 2);
</db:programlisting>
<db:para>To present the data on the chart we need a <db:link xlink:href="qchart.xml">QChart</db:link> instance. We add the series to it, create the default axes, and set the title of the chart.</db:para>
<db:programlisting language="cpp">    QChart *chart = new QChart();
    chart-&amp;gt;legend()-&amp;gt;hide();
    chart-&amp;gt;addSeries(series);
    chart-&amp;gt;createDefaultAxes();
    chart-&amp;gt;setTitle(&quot;Simple line chart example&quot;);
</db:programlisting>
<db:para>Then we create a <db:link xlink:href="qchartview.xml">QChartView</db:link> object with <db:link xlink:href="qchart.xml">QChart</db:link> as a parameter. This way we don't need to create a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> scene ourselves. We also set the Antialiasing on to have the rendered lines look nicer.</db:para>
<db:programlisting language="cpp">    QChartView *chartView = new QChartView(chart);
    chartView-&amp;gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>The chart is ready to be shown.</db:para>
<db:programlisting language="cpp">    QMainWindow window;
    window.setCentralWidget(chartView);
    window.resize(400, 300);
    window.show();
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/linechart?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
