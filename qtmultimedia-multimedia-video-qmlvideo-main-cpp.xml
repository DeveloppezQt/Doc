<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Video Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Transforming video and camera viewfinder content.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtCore/QStandardPaths&gt;
#include &lt;QtCore/QString&gt;
#include &lt;QtCore/QStringList&gt;
#include &lt;QtQml/QQmlContext&gt;
#include &lt;QtQml/QQmlEngine&gt;
#include &lt;QtGui/QGuiApplication&gt;
#include &lt;QtQuick/QQuickItem&gt;
#include &lt;QtQuick/QQuickView&gt;
#include &quot;trace.h&quot;

#ifdef PERFORMANCEMONITOR_SUPPORT
#include &quot;performancemonitordeclarative.h&quot;
#endif

static const QString DefaultFileName1 = &quot;&quot;;
static const QString DefaultFileName2 = &quot;&quot;;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

#ifdef PERFORMANCEMONITOR_SUPPORT
    PerformanceMonitor::qmlRegisterTypes();
#endif

    QString source1, source2;
    qreal volume = 0.5;
    QStringList args = app.arguments();
#ifdef PERFORMANCEMONITOR_SUPPORT
    PerformanceMonitor::State performanceMonitorState;
#endif
    bool sourceIsUrl = false;
    for (int i = 1; i &lt; args.size(); ++i) {
        const QByteArray arg = args.at(i).toUtf8();
        if (arg.startsWith('-')) {
            if (&quot;-volume&quot; == arg) {
                if (i+1 &lt; args.count())
                    volume = 0.01 * args.at(++i).toInt();
                else
                    qtTrace() &lt;&lt; &quot;Option \&quot;-volume\&quot; takes a value&quot;;
            }
#ifdef PERFORMANCEMONITOR_SUPPORT
            else if (performanceMonitorState.parseArgument(arg)) {
                // Do nothing
            }
#endif
            else if (&quot;-url&quot; == arg) {
                sourceIsUrl = true;
            } else {
                qtTrace() &lt;&lt; &quot;Option&quot; &lt;&lt; arg &lt;&lt; &quot;ignored&quot;;
            }
        } else {
            if (source1.isEmpty())
                source1 = arg;
            else if (source2.isEmpty())
                source2 = arg;
            else
                qtTrace() &lt;&lt; &quot;Argument&quot; &lt;&lt; arg &lt;&lt; &quot;ignored&quot;;
        }
    }

    QUrl url1, url2;
    if (sourceIsUrl) {
        url1 = source1;
        url2 = source2;
    } else {
        if (!source1.isEmpty())
            url1 = QUrl::fromLocalFile(source1);
        if (!source2.isEmpty())
            url2 = QUrl::fromLocalFile(source2);
    }

    QQuickView viewer;
    viewer.setSource(QUrl(&quot;qrc:///qml/qmlvideo/main.qml&quot;));
    QObject::connect(viewer.engine(), SIGNAL(quit()), &amp;viewer, SLOT(close()));

    QQuickItem *rootObject = viewer.rootObject();
    rootObject-&gt;setProperty(&quot;source1&quot;, url1);
    rootObject-&gt;setProperty(&quot;source2&quot;, url2);
    rootObject-&gt;setProperty(&quot;volume&quot;, volume);

#ifdef PERFORMANCEMONITOR_SUPPORT
    if (performanceMonitorState.valid) {
        rootObject-&gt;setProperty(&quot;perfMonitorsLogging&quot;, performanceMonitorState.logging);
        rootObject-&gt;setProperty(&quot;perfMonitorsVisible&quot;, performanceMonitorState.visible);
    }
    QObject::connect(&amp;viewer, SIGNAL(afterRendering()),
                     rootObject, SLOT(qmlFramePainted()));
#endif

    const QStringList moviesLocation = QStandardPaths::standardLocations(QStandardPaths::MoviesLocation);
    const QUrl videoPath =
            QUrl::fromLocalFile(moviesLocation.isEmpty() ?
                                    app.applicationDirPath() :
                                    moviesLocation.front());
    viewer.rootContext()-&gt;setContextProperty(&quot;videoPath&quot;, videoPath);

    QMetaObject::invokeMethod(rootObject, &quot;init&quot;);

    viewer.setMinimumSize(QSize(640, 360));
    viewer.show();

    return app.exec();
}

</db:programlisting>
</db:article>
