<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Custom Materials Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates writing shaded custom materials.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/custommaterial-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example shows how to write <db:emphasis>shaded</db:emphasis> <db:link xlink:href="qml-qtquick3d-custommaterial.xml">custom materials</db:link>. With shaded materials, we don't have to write complete shader programs. Instead, we write functions that modify Qt's standard shaders. This way the resulting material will by default participate in lighting, shadow mapping, and be compatible with light probes. We only have to write custom logic for the cases where we want special behavior. This is achieved by effectively augmenting the shader code that would be generated for a <db:link xlink:href="qml-qtquick3d-principledmaterial.xml">PrincipledMaterial</db:link> with our own custom functions that get called at certain stages in the vertex and fragment shaders.</db:para>
<db:para>To make a shaded custom material, set the <db:link xlink:href="qml-qtquick3d-custommaterial.xml#shadingMode-prop">shadingMode</db:link> property to <db:code>CustomMaterial.Shaded</db:code>.</db:para>
<db:section xml:id="a-simple-material">
<db:title>A simple material</db:title>
<db:para>The first model uses a simple material that does not add any custom logic. We set the custom material on the model just like any other material:</db:para>
<db:programlisting language="qml">Model {
    source: &quot;weirdShape.mesh&quot;
    scale: Qt.vector3d(100, 100, 100)
    rotation: Quaternion.fromEulerAngles(-90, 0, 0)
    x: v3d.radius

    materials: [
        CustomMaterial {
            shadingMode: CustomMaterial.Shaded
            fragmentShader: &quot;material_simple.frag&quot;
            property color uDiffuse: &quot;fuchsia&quot;
            property real uSpecular: 1.0
        }
    ]
}
</db:programlisting>
<db:para>In addition to setting the <db:code>shadingMode</db:code> and <db:code>fragmentShader</db:code>, we also add two properties to the material: <db:code>uDiffuse</db:code> and <db:code>Specular</db:code>. These will get picked up by the fragment shader.</db:para>
<db:para>The code for the fragment shader is short:</db:para>
<db:programlisting language="cpp">void MAIN()
{
    SPECULAR_AMOUNT = uSpecular;
    BASE_COLOR = uDiffuse;
}
</db:programlisting>
<db:para>All shaders have to implement the <db:code>MAIN</db:code> function. In this one, we use the properties defined in the materials to set values that will be used by Qt's standard shader code. Note that we do not have to declare these as uniforms: all we need to do is to make sure the names match. We would get a shader compile error if the material did not have matching properties.</db:para>
<db:para>The special variables <db:code>SPECULAR_AMOUNT</db:code> and <db:code>BASE_COLOR</db:code> correspond to <db:link xlink:href="qml-qtquick3d-principledmaterial.xml#specularAmount-prop">specularAmount</db:link> and <db:link xlink:href="qml-qtquick3d-principledmaterial.xml#baseColor-prop">baseColor</db:link> of <db:link xlink:href="qml-qtquick3d-principledmaterial.xml">PrincipledMaterial</db:link>. These are then used by the standard shader code to perform lighting calculations just as if we had used a <db:link xlink:href="qml-qtquick3d-principledmaterial.xml">PrincipledMaterial</db:link>.</db:para>
</db:section>
<db:section xml:id="custom-handling-of-lights">
<db:title>Custom handling of lights</db:title>
<db:para>The next object uses a more complex material that implements custom lighting. The material has different uniform names, but otherwise we use it in the same way:</db:para>
<db:programlisting language="qml">materials: [
    CustomMaterial {
        shadingMode: CustomMaterial.Shaded
        fragmentShader: &quot;material_customlights.frag&quot;
        property color uDiffuse: &quot;orange&quot;
        property real uShininess: 150
    }
]
</db:programlisting>
<db:para>The fragment shader implements custom logic for all the different types of light:</db:para>
<db:programlisting language="cpp">void MAIN()
{
    SPECULAR_AMOUNT = 1.0;
    ROUGHNESS = 0.5;
    BASE_COLOR = uDiffuse;
}

void AMBIENT_LIGHT()
{
    DIFFUSE += uDiffuse.rgb * TOTAL_AMBIENT_COLOR;
}

void DIRECTIONAL_LIGHT()
{
    DIFFUSE += uDiffuse.rgb * LIGHT_COLOR * SHADOW_CONTRIB * vec3(max(0.0, dot(normalize(NORMAL), TO_LIGHT_DIR)));
}

void POINT_LIGHT()
{
    DIFFUSE += uDiffuse.rgb * LIGHT_COLOR * LIGHT_ATTENUATION * SHADOW_CONTRIB * vec3(max(0.0, dot(normalize(NORMAL), TO_LIGHT_DIR)));
}

void SPOT_LIGHT()
{
     DIFFUSE += uDiffuse.rgb * LIGHT_COLOR * LIGHT_ATTENUATION * SPOT_FACTOR * SHADOW_CONTRIB * vec3(max(0.0, dot(normalize(VAR_WORLD_NORMAL), TO_LIGHT_DIR)));
}
</db:programlisting>
<db:para>Here we use many new special keywords referring to properties of the various light types. See the <db:link xlink:href="qml-qtquick3d-custommaterial.xml">CustomMaterial</db:link> documentation for a description each keyword. Note that each light type has its own function. Any function not implemented will use the default implementation, behaving like <db:link xlink:href="qml-qtquick3d-principledmaterial.xml">PrincipledMaterial</db:link>. For example: in this shader, we have not implemented <db:code>SPECULAR_LIGHT()</db:code>, so we will get the built-in specular reflection.</db:para>
</db:section>
<db:section xml:id="adding-a-vertex-shader">
<db:title>Adding a vertex shader</db:title>
<db:para>A custom material can also use a vertex shader to modify the geometry of the model. Here we specify both the fragment and vertex shaders, and add several more properties that will be picked up as uniform values:</db:para>
<db:programlisting language="qml">materials: [
    CustomMaterial {
        id: material
        shadingMode: CustomMaterial.Shaded
        vertexShader: &quot;material_distortion.vert&quot;
        fragmentShader: &quot;material_customlights.frag&quot;
        property real uTime: 0.0
        property real uAmplitude: 0.3
        property color uDiffuse: &quot;yellow&quot;
        property real uShininess: 50
        NumberAnimation {
            target: material
            property: &quot;uTime&quot;
            from: 0.0
            to: 31.4
            duration: 10000
            loops: Animation.Infinite
            running: true
        }
    }
]
</db:programlisting>
<db:para>The vertex shader is very short:</db:para>
<db:programlisting language="cpp">// Copyright (C) 2023 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

void MAIN()
{
    VERTEX.y += sin(uTime + VERTEX.x*10.0) * uAmplitude;
}
</db:programlisting>
<db:para>This deforms the model by displacing each vertex according to a sine-wave that changes with time.</db:para>
</db:section>
<db:section xml:id="a-transparent-material">
<db:title>A transparent material</db:title>
<db:para>Finally, we add a sphere with a material that is transparent. For performance reasons, Qt does not implement transparency in a completely realistic way. Instead, Qt renders all the opaque object in the scene to a texture, and then transparent materials read from this texture. This means that transparent materials will give the best result when placed in front of other objects:</db:para>
<db:programlisting language="qml">Model {
    id: screenSphere
    source: &quot;#Sphere&quot;
    scale: Qt.vector3d(0.75, 0.75, 0.75)
    y: 60
    z: 750;
    materials: [
        CustomMaterial {
            shadingMode: CustomMaterial.Shaded
            fragmentShader: &quot;material_transparent.frag&quot;
        }
    ]
</db:programlisting>
<db:para>For this example, we implement a simplistic distortion function that does not try to do real physical refraction:</db:para>
<db:programlisting language="cpp">void MAIN()
{
    vec2 size = vec2(textureSize(SCREEN_TEXTURE, 0));
    vec2 uv = FRAGCOORD.xy / size;

    vec3 view = normalize(VIEW_VECTOR);
    vec3 projection = view - view * normalize(NORMAL);
    vec3 refraction = projection * projection;
    uv += refraction.xy * 0.5;

    vec3 col = texture(SCREEN_TEXTURE, uv).rgb;
    col = col * 0.8 + vec3(0.2);

    BASE_COLOR = vec4(col, 1.0);
}
</db:programlisting>
<db:para><db:code>SCREEN_TEXTURE</db:code> refers to the texture showing all the opaque objects in the scene. We first calculate the uv coordinates inside this texture that matches the screen position of the current vertex. We then add an offset to this position, simulating a refraction effect, before doing a texture lookup.</db:para>
<db:para>Finally, we blend in 20% white to get a slight cloudiness. Note that the output is assigned to <db:code>BASE_COLOR</db:code>, so Qt will add lighting on top of this. This is why we can see reflections on the surface of the sphere.</db:para>
</db:section>
<db:section xml:id="unshaded-materials">
<db:title>Unshaded materials</db:title>
<db:para>It is also possible to have custom materials that use complete shader programs (while still using the convenience keywords). The <db:link xlink:href="qtquick3d-customshaders-example.xml">customshaders example</db:link> demonstrates the other group of custom materials: <db:emphasis>unshaded</db:emphasis> custom materials.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="custommaterial/CMakeLists.txt">custommaterial/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custommaterial/custommaterial.pro">custommaterial/custommaterial.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custommaterial/main.cpp">custommaterial/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custommaterial/main.qml">custommaterial/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custommaterial/material_customlights.frag">custommaterial/material_customlights.frag</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custommaterial/material_customspecular.frag">custommaterial/material_customspecular.frag</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custommaterial/material_distortion.vert">custommaterial/material_distortion.vert</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custommaterial/material_metallic.frag">custommaterial/material_metallic.frag</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custommaterial/material_simple.frag">custommaterial/material_simple.frag</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custommaterial/material_transparent.frag">custommaterial/material_transparent.frag</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custommaterial/materials.qrc">custommaterial/materials.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custommaterial/qml.qrc">custommaterial/qml.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="custommaterial/screen.frag">custommaterial/screen.frag</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
