<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Module Definition qmldir Files</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Defines a QML module.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>There are two distinct types of qmldir files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QML document directory listing files</db:para>
</db:listitem>
<db:listitem>
<db:para>QML module definition files</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This documentation covers only the second form of qmldir file, which lists the QML types, JavaScript files, and plugins that are available under a module. For more information about the first form of qmldir file, see <db:link xlink:href="qtqml-syntax-directoryimports.xml#directory-listing-qmldir-files">directory listing qmldir files</db:link>.</db:para>
<db:section xml:id="contents-of-a-module-definition-qmldir-file">
<db:title>Contents of a Module Definition qmldir File</db:title>
<db:para>A qmldir file is a plain-text file that contains the following commands:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtqml-modules-qmldir.xml#module-identifier-declaration">Module Identifier Declaration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-modules-qmldir.xml#object-type-declaration">Object Type Declaration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-modules-qmldir.xml#internal-object-type-declaration">Internal Object Type Declaration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-modules-qmldir.xml#javascript-resource-declaration">JavaScript Resource Declaration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-modules-qmldir.xml#plugin-declaration">Plugin Declaration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-modules-qmldir.xml#plugin-classname-declaration">Plugin Classname Declaration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-modules-qmldir.xml#type-description-file-declaration">Type Description File Declaration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-modules-qmldir.xml#module-dependencies-declaration">Module Dependencies Declaration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-modules-qmldir.xml#module-import-declaration">Module Import Declaration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-modules-qmldir.xml#designer-support-declaration">Designer Support Declaration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-modules-qmldir.xml#preferred-path-declaration">Preferred Path Declaration</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Each command in a qmldir file must be on a separate line.</db:para>
</db:note>
<db:para>In addition to commands, you can also add comments, which are lines starting with #.</db:para>
<db:section xml:id="module-identifier-declaration">
<db:title>Module Identifier Declaration</db:title>
<db:programlisting language="cpp">module &amp;lt;ModuleIdentifier&amp;gt;
</db:programlisting>
<db:para>Declares the module identifier of the module. The &lt;ModuleIdentifier&gt; is the (dotted URI notation) identifier for the module, which must match the module's install path.</db:para>
<db:para>The <db:link xlink:href="qtqml-modules-identifiedmodules.xml#semantics-of-identified-modules">module identifier directive</db:link> must be the first line of the file. Exactly one module identifier directive may exist in the qmldir file.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">module ExampleModule
</db:programlisting>
</db:section>
<db:section xml:id="object-type-declaration">
<db:title>Object Type Declaration</db:title>
<db:programlisting language="cpp">[singleton] &amp;lt;TypeName&amp;gt; &amp;lt;InitialVersion&amp;gt; &amp;lt;File&amp;gt;
</db:programlisting>
<db:para>Declares a <db:link xlink:href="qtqml-typesystem-objecttypes.xml">QML object type</db:link> to be made available by the module.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>[singleton] Optional. Used to declare a singleton type.</db:para>
</db:listitem>
<db:listitem>
<db:para>&lt;TypeName&gt; is the type being made available</db:para>
</db:listitem>
<db:listitem>
<db:para>&lt;InitialVersion&gt; is the module version for which the type is to be made available</db:para>
</db:listitem>
<db:listitem>
<db:para>&lt;File&gt; is the (relative) file name of the QML file that defines the type</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Zero or more object type declarations may exist in the qmldir file. However, each object type must have a unique type name within any particular version of the module.</db:para>
<db:note>
<db:para>To declare a singleton type, the QML file defining the type must include the pragma Singleton statement.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">//Style.qml with custom singleton type definition
pragma Singleton
import QtQuick 2.0

QtObject {
    property int textSize: 20
    property color textColor: &quot;green&quot;
}

// qmldir declaring the singleton type
module CustomStyles
singleton Style 1.0 Style.qml

// singleton type in use
import QtQuick 2.0
import CustomStyles 1.0

Text {
    font.pixelSize: Style.textSize
    color: Style.textColor
    text: &quot;Hello World&quot;
}
</db:programlisting>
</db:section>
<db:section xml:id="internal-object-type-declaration">
<db:title>Internal Object Type Declaration</db:title>
<db:programlisting language="cpp">internal &amp;lt;TypeName&amp;gt; &amp;lt;File&amp;gt;
</db:programlisting>
<db:para>Declares an object type that is in the module but should not be made available to users of the module.</db:para>
<db:para>Zero or more internal object type declarations may exist in the qmldir file.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">internal MyPrivateType MyPrivateType.qml
</db:programlisting>
<db:para>This is necessary if the module is imported remotely (see <db:link xlink:href="qtqml-modules-identifiedmodules.xml#remotely-installed-identified-modules">Remotely Installed Identified Modules</db:link>) because if an exported type depends on a non-exported type within the module, the engine must also load the non-exported type.</db:para>
</db:section>
<db:section xml:id="javascript-resource-declaration">
<db:title>JavaScript Resource Declaration</db:title>
<db:programlisting language="cpp">&amp;lt;ResourceIdentifier&amp;gt; &amp;lt;InitialVersion&amp;gt; &amp;lt;File&amp;gt;
</db:programlisting>
<db:para>Declares a JavaScript file to be made available by the module. The resource will be made available via the specified identifier with the specified version number.</db:para>
<db:para>Zero or more JavaScript resource declarations may exist in the qmldir file. However, each JavaScript resource must have a unique identifier within any particular version of the module.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">MyScript 1.0 MyScript.js
</db:programlisting>
<db:para>See the documentation about <db:link xlink:href="qtqml-javascript-resources.xml">defining JavaScript resources</db:link> and <db:link xlink:href="qtqml-javascript-imports.xml">Importing JavaScript Resources In QML</db:link> for more information.</db:para>
</db:section>
<db:section xml:id="plugin-declaration">
<db:title>Plugin Declaration</db:title>
<db:programlisting language="cpp">[optional] plugin &amp;lt;Name&amp;gt; [&amp;lt;Path&amp;gt;]
</db:programlisting>
<db:para>Declares a plugin to be made available by the module.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>optional denotes that the plugin itself does not contain any relevant code and only serves to load a library it links to. If given, and if any types for the module are already available, indicating that the library has been loaded by some other means, QML will not load the plugin.</db:para>
</db:listitem>
<db:listitem>
<db:para>&lt;Name&gt; is the plugin library name. This is usually not the same as the file name of the plugin binary, which is platform dependent. For example, the library MyAppTypes would produce libMyAppTypes.so on Linux and MyAppTypes.dll on Windows.</db:para>
</db:listitem>
<db:listitem>
<db:para>&lt;Path&gt; (optional) specifies either:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>an absolute path to the directory containing the plugin file, or</db:para>
</db:listitem>
<db:listitem>
<db:para>a relative path from the directory containing the qmldir file to the directory containing the plugin file.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:para>By default, the engine searches for the plugin library in the directory that contains the qmldir file. (The plugin search path can be queried with <db:link xlink:href="qqmlengine.xml#pluginPathList">QQmlEngine::pluginPathList</db:link>() and modified using <db:link xlink:href="qqmlengine.xml#addPluginPath">QQmlEngine::addPluginPath</db:link>().)</db:para>
<db:para>Zero or more C++ plugin declarations may exist in the qmldir file. However, since plugin loading is a relatively expensive operation, clients are advised to specify at most a single plugin.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">plugin MyPluginLibrary
</db:programlisting>
</db:section>
<db:section xml:id="plugin-classname-declaration">
<db:title>Plugin Classname Declaration</db:title>
<db:programlisting language="cpp">classname &amp;lt;C++ plugin class&amp;gt;
</db:programlisting>
<db:para>Provides the class name of the C++ plugin used by the module.</db:para>
<db:para>This information is required for all the QML modules that depend on a C++ plugin for additional functionality. Qt Quick applications built with static linking cannot resolve the module imports without this information.</db:para>
</db:section>
<db:section xml:id="type-description-file-declaration">
<db:title>Type Description File Declaration</db:title>
<db:programlisting language="cpp">typeinfo &amp;lt;File&amp;gt;
</db:programlisting>
<db:para>Declares a <db:link xlink:href="qtqml-modules-qmldir.xml#type-description-files">type description file</db:link> for the module that can be read by QML tools such as Qt Creator to access information about the types defined by the module's plugins. &lt;File&gt; is the (relative) file name of a .qmltypes file.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">typeinfo mymodule.qmltypes
</db:programlisting>
<db:para>Without such a file, QML tools may be unable to offer features such as code completion for the types defined in your plugins.</db:para>
</db:section>
<db:section xml:id="module-dependencies-declaration">
<db:title>Module Dependencies Declaration</db:title>
<db:programlisting language="cpp">depends &amp;lt;ModuleIdentifier&amp;gt; &amp;lt;InitialVersion&amp;gt;
</db:programlisting>
<db:para>Declares that this module depends on another.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">depends MyOtherModule 1.0
</db:programlisting>
<db:para>This declaration is necessary only in cases when the dependency is hidden: for example, when the C++ code for one module is used to load QML (perhaps conditionally), which then depends on other modules. In such cases, the depends declaration is necessary to include the other modules in application packages.</db:para>
</db:section>
<db:section xml:id="module-import-declaration">
<db:title>Module Import Declaration</db:title>
<db:programlisting language="cpp">import &amp;lt;ModuleIdentifier&amp;gt; [&amp;lt;Version&amp;gt;]
</db:programlisting>
<db:para>Declares that this module imports another.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">import MyOtherModule 1.0
</db:programlisting>
<db:para>The types from the other module are made available in the same type namespace as this module is imported into. Omitting the version imports the latest version available of the other module. Specifying auto as version imports the same version as the version of this module specified in the QML import statement.</db:para>
</db:section>
<db:section xml:id="designer-support-declaration">
<db:title>Designer Support Declaration</db:title>
<db:programlisting language="cpp">designersupported
</db:programlisting>
<db:para>Set this property if the plugin is supported by Qt Quick Designer. By default, the plugin will not be supported.</db:para>
<db:para>A plugin that is supported by Qt Quick Designer has to be properly tested. This means that the plugin does not crash when running inside the qml2puppet that is used by Qt Quick Designer to execute QML. Generally, the plugin should work well in the Qt Quick Designer and not cause any show stoppers, like taking excessive amounts of memory, slowing down the qml2puppet heavily, or anything else that renders the plugin effectively unusable in the Qt Quick Designer.</db:para>
<db:para>The items of an unsupported plugin are not painted in the Qt Quick Designer, but they are still available as empty boxes and the properties can be edited.</db:para>
</db:section>
<db:section xml:id="preferred-path-declaration">
<db:title>Preferred Path Declaration</db:title>
<db:programlisting language="cpp">prefer &amp;lt;Path&amp;gt;
</db:programlisting>
<db:para>This property directs the QML engine to load any further files for this module from &lt;path&gt;, rather than the current directory. This can be used to load files compiled with qmlcachegen.</db:para>
<db:para>For example, you can add a module's QML files as resources to a resource path :/my/path/MyModule/. Then, add prefer :/my/path/MyModule to the qmldir file in order to use the files in the resource system, rather than the ones in the file system. If you then use qmlcachegen for those, the pre-compiled files will be available to any clients of the module.</db:para>
</db:section>
</db:section>
<db:section xml:id="versioning-semantics">
<db:title>Versioning Semantics</db:title>
<db:para>All QML types that are exported for a particular major version are available with the latest version of the same major version. For example, if a module provides a MyButton type in version 1.0 and MyWindow type in version 1.1, clients importing version 1.1 of the module get to use the MyButton and MyWindow types. However, the reverse is not true: a type exported for a particular minor version cannot be used by importing an older or earlier minor version. In the example mentioned earlier, if the client had imported version 1.0 of the module, they can use the MyButton type only but not the MyWindow type.</db:para>
<db:para>A module can offer multiple major versions but the clients have access to one major version only at a time. For example, importing MyExampleModule 2.0 provides access to that major version only and not the previous major version. Although you can organize the artifacts that belong to different major versions under a sigle directory and a qmldir file, it is recommended to use different directories for each major version. If you choose to go with the earlier approach (one directory and a qmldir file), try to use the version suffix for the file names. For example, artifacts that belong to MyExampleModule 2.0 can use .2 suffix in their file name.</db:para>
<db:para>A version cannot be imported if no types have been explicitly exported for that version. If a module provides a MyButton type in version 1.0 and a MyWindow type in version 1.1, you cannot import version 1.2 or version 2.0 of that module.</db:para>
<db:para>A type can be defined by different files in different minor versions. In this case, the most closely matching version is used when imported by clients. For example, if a module had specified the following types via its qmldir file:</db:para>
<db:programlisting language="cpp">module ExampleModule
MyButton 1.0 MyButton.qml
MyButton 1.1 MyButton11.qml
MyButton 1.3 MyButton13.qml
MyRectangle 1.2 MyRectangle12.qml
</db:programlisting>
<db:para>a client who imports version 1.2 of ExampleModule can use the MyButton type definition provided by MyButton11.qml as it is the latest version of that type, and the MyRectangle type definition provided by MyRectangle12.qml.</db:para>
<db:para>The version system ensures that a given QML file works regardless of the version of installed software, as a versioned import only imports types for that version, leaving other identifiers available, even if the actual installed version might otherwise provide those identifiers.</db:para>
</db:section>
<db:section xml:id="example-of-a-qmldir-file">
<db:title>Example of a qmldir File</db:title>
<db:para>One example of a qmldir file follows:</db:para>
<db:programlisting language="cpp">module ExampleModule
CustomButton 2.0 CustomButton20.qml
CustomButton 2.1 CustomButton21.qml
plugin examplemodule
MathFunctions 2.0 mathfuncs.js
</db:programlisting>
<db:para>The above qmldir file defines a module called &quot;ExampleModule&quot;. It defines the CustomButton QML object type in versions 2.0 and 2.1 of the module, with different implementations for each version. It specifies a plugin that must be loaded by the engine when the module is imported by clients, and that plugin may register various C++-defined types with the QML type system. On Unix-like systems the QML engine attempts to load libexamplemodule.so as a <db:link xlink:href="qqmlextensionplugin.xml">QQmlExtensionPlugin</db:link>, and on Windows it loads examplemodule.dll as a <db:link xlink:href="qqmlextensionplugin.xml">QQmlExtensionPlugin</db:link>. Finally, the qmldir file specifies a <db:link xlink:href="qtqml-javascript-resources.xml">JavaScript resource</db:link>, which is only available if version 2.0 or a later version (under the same major version) of the module is imported.</db:para>
<db:para>If the module is <db:link xlink:href="qtqml-modules-identifiedmodules.xml">installed</db:link> into the QML import path, clients could import and use the module in the following manner:</db:para>
<db:programlisting language="qml">import QtQuick 2.0
import ExampleModule 2.1

Rectangle {
    width: 400
    height: 400
    color: &quot;lightsteelblue&quot;

    CustomButton {
        color: &quot;gray&quot;
        text: &quot;Click Me!&quot;
        onClicked: MathFunctions.generateRandom() &amp;gt; 10 ? color = &quot;red&quot; : color = &quot;gray&quot;;
    }
}
</db:programlisting>
<db:para>The CustomButton type used above would come from the definition specified in the CustomButton21.qml file, and the JavaScript resource identified by the MathFunctions identifier would be defined in the mathfuncs.js file.</db:para>
</db:section>
<db:section xml:id="type-description-files">
<db:title>Type Description Files</db:title>
<db:para>QML modules may refer to one or more type information files in their qmldir file. These usually have the .qmltypes extension and are read by external tools to gain information about types defined in C++ and typically imported via plugins.</db:para>
<db:para>As such qmltypes files have no effect on the functionality of a QML module. Their only use is to allow tools such as Qt Creator to provide code completion, error checking and other functionality to users of your module.</db:para>
<db:para>Any module that defines QML types in C++ should also ship a type description file.</db:para>
<db:para>The best way to create a qmltypes file for your module is to generate it using the build system and the <db:link xlink:href="qqmlengine.xml#QML_ELEMENT">QML_ELEMENT</db:link> macros. If you follow the documentation on this, no further action is needed. qmltyperegistrar will automatically generate the .qmltypes files.</db:para>
<db:para>Example: If your module is in /tmp/imports/My/Module, a file called plugins.qmltypes should be generated alongside the actual plugin binary.</db:para>
<db:para>Add the line</db:para>
<db:programlisting language="cpp">typeinfo plugins.qmltypes
</db:programlisting>
<db:para>to /tmp/imports/My/Module/qmldir to register it.</db:para>
</db:section>
</db:article>
