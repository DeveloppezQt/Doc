<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QUndoCommand Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link> class is the base class of all commands stored on a <db:link xlink:href="qundostack.xml">QUndoStack</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QUndoCommand</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>For an overview of Qt's Undo Framework, see the <db:link xlink:href="qundo.xml">overview document</db:link>.</db:para>
<db:para>A <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link> represents a single editing action on a document; for example, inserting or deleting a block of text in a text editor. <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link> can apply a change to the document with <db:link xlink:href="qundocommand.xml#redo">redo</db:link>() and undo the change with <db:link xlink:href="qundocommand.xml#undo">undo</db:link>(). The implementations for these functions must be provided in a derived class.</db:para>
<db:programlisting language="cpp">class AppendText : public QUndoCommand
{
public:
    AppendText(QString *doc, const QString &amp;amp;text)
        : m_document(doc), m_text(text) { setText(&quot;append text&quot;); }
    void undo() override
        { m_document-&amp;gt;chop(m_text.length()); }
    void redo() override
        { m_document-&amp;gt;append(m_text); }
private:
    QString *m_document;
    QString m_text;
};
</db:programlisting>
<db:para>A <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link> has an associated <db:link xlink:href="qundocommand.xml#text">text</db:link>(). This is a short string describing what the command does. It is used to update the text properties of the stack's undo and redo actions; see <db:link xlink:href="qundostack.xml#createUndoAction">QUndoStack::createUndoAction</db:link>() and <db:link xlink:href="qundostack.xml#createRedoAction">QUndoStack::createRedoAction</db:link>().</db:para>
<db:para><db:link xlink:href="qundocommand.xml">QUndoCommand</db:link> objects are owned by the stack they were pushed on. <db:link xlink:href="qundostack.xml">QUndoStack</db:link> deletes a command if it has been undone and a new command is pushed. For example:</db:para>
<db:programlisting language="cpp">MyCommand *command1 = new MyCommand();
stack-&amp;gt;push(command1);
MyCommand *command2 = new MyCommand();
stack-&amp;gt;push(command2);

stack-&amp;gt;undo();

MyCommand *command3 = new MyCommand();
stack-&amp;gt;push(command3); // command2 gets deleted
</db:programlisting>
<db:para>In effect, when a command is pushed, it becomes the top-most command on the stack.</db:para>
<db:para>To support command compression, <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link> has an <db:link xlink:href="qundocommand.xml#id">id</db:link>() and the virtual function <db:link xlink:href="qundocommand.xml#mergeWith">mergeWith</db:link>(). These functions are used by <db:link xlink:href="qundostack.xml#push">QUndoStack::push</db:link>().</db:para>
<db:para>To support command macros, a <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link> object can have any number of child commands. Undoing or redoing the parent command will cause the child commands to be undone or redone. A command can be assigned to a parent explicitly in the constructor. In this case, the command will be owned by the parent.</db:para>
<db:para>The parent in this case is usually an empty command, in that it doesn't provide its own implementation of <db:link xlink:href="qundocommand.xml#undo">undo</db:link>() and <db:link xlink:href="qundocommand.xml#redo">redo</db:link>(). Instead, it uses the base implementations of these functions, which simply call <db:link xlink:href="qundocommand.xml#undo">undo</db:link>() or <db:link xlink:href="qundocommand.xml#redo">redo</db:link>() on all its children. The parent should, however, have a meaningful <db:link xlink:href="qundocommand.xml#text">text</db:link>().</db:para>
<db:programlisting language="cpp">QUndoCommand *insertRed = new QUndoCommand(); // an empty command
insertRed-&amp;gt;setText(&quot;insert red text&quot;);

new InsertText(document, idx, text, insertRed); // becomes child of insertRed
new SetColor(document, idx, text.length(), Qt::red, insertRed);

stack.push(insertRed);
</db:programlisting>
<db:para>Another way to create macros is to use the convenience functions <db:link xlink:href="qundostack.xml#beginMacro">QUndoStack::beginMacro</db:link>() and <db:link xlink:href="qundostack.xml#endMacro">QUndoStack::endMacro</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundostack.xml">QUndoStack</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QUndoCommand">
<db:title>[explicit] QUndoCommand::QUndoCommand(QUndoCommand *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QUndoCommand</db:methodname>
<db:methodparam>
<db:type>QUndoCommand *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QUndoCommand(QUndoCommand *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link> object with parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>If <db:code role="parameter">parent</db:code> is not <db:code>nullptr</db:code>, this command is appended to parent's child list. The parent command then owns this command and will delete it in its destructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#dtor.QUndoCommand">~QUndoCommand</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QUndoCommand-1">
<db:title>[explicit] QUndoCommand::QUndoCommand(const QString &amp;<db:emphasis>text</db:emphasis>, QUndoCommand *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QUndoCommand</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QUndoCommand *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QUndoCommand(const QString &amp;text, QUndoCommand *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link> object with the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">text</db:code>.</db:para>
<db:para>If <db:code role="parameter">parent</db:code> is not <db:code>nullptr</db:code>, this command is appended to parent's child list. The parent command then owns this command and will delete it in its destructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#dtor.QUndoCommand">~QUndoCommand</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QUndoCommand">
<db:title>[virtual] QUndoCommand::~QUndoCommand()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QUndoCommand</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QUndoCommand()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link> object and all child commands.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#QUndoCommand">QUndoCommand</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="actionText">
<db:title>QString QUndoCommand::actionText() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>actionText</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString actionText() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a short text string describing what this command does; for example, &quot;insert text&quot;.</db:para>
<db:para>The text is used when the text properties of the stack's undo and redo actions are updated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#text">text</db:link>()</db:member>
<db:member><db:link xlink:href="qundocommand.xml#setText">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#createUndoAction">QUndoStack::createUndoAction</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#createRedoAction">QUndoStack::createRedoAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="child">
<db:title>const QUndoCommand *QUndoCommand::child(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QUndoCommand *</db:type>
<db:methodname>child</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QUndoCommand * child(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the child command at <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#childCount">childCount</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#command">QUndoStack::command</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childCount">
<db:title>int QUndoCommand::childCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>childCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int childCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of child commands in this command.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#child">child</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="id">
<db:title>[virtual] int QUndoCommand::id() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>id</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int id() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the ID of this command.</db:para>
<db:para>A command ID is used in command compression. It must be an integer unique to this command's class, or -1 if the command doesn't support compression.</db:para>
<db:para>If the command supports compression this function must be overridden in the derived class to return the correct ID. The base implementation returns -1.</db:para>
<db:para><db:link xlink:href="qundostack.xml#push">QUndoStack::push</db:link>() will only try to merge two commands if they have the same ID, and the ID is not -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#mergeWith">mergeWith</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#push">QUndoStack::push</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isObsolete">
<db:title>[since 5.9] bool QUndoCommand::isObsolete() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isObsolete</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isObsolete() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the command is obsolete.</db:para>
<db:para>The boolean is used for the automatic removal of commands that are not necessary in the stack anymore. The isObsolete function is checked in the functions <db:link xlink:href="qundostack.xml#push">QUndoStack::push</db:link>(), <db:link xlink:href="qundostack.xml#undo">QUndoStack::undo</db:link>(), <db:link xlink:href="qundostack.xml#redo">QUndoStack::redo</db:link>(), and <db:link xlink:href="qundostack.xml#setIndex">QUndoStack::setIndex</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#setObsolete">setObsolete</db:link>()</db:member>
<db:member><db:link xlink:href="qundocommand.xml#mergeWith">mergeWith</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#push">QUndoStack::push</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#undo">QUndoStack::undo</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#redo">QUndoStack::redo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mergeWith">
<db:title>[virtual] bool QUndoCommand::mergeWith(const QUndoCommand *<db:emphasis>command</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>mergeWith</db:methodname>
<db:methodparam>
<db:type>const QUndoCommand *</db:type>
<db:parameter>command</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool mergeWith(const QUndoCommand *command)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to merge this command with <db:code role="parameter">command</db:code>. Returns <db:code>true</db:code> on success; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If this function returns <db:code>true</db:code>, calling this command's <db:link xlink:href="qundocommand.xml#redo">redo</db:link>() must have the same effect as redoing both this command and <db:code role="parameter">command</db:code>. Similarly, calling this command's <db:link xlink:href="qundocommand.xml#undo">undo</db:link>() must have the same effect as undoing <db:code role="parameter">command</db:code> and this command.</db:para>
<db:para><db:link xlink:href="qundostack.xml">QUndoStack</db:link> will only try to merge two commands if they have the same id, and the id is not -1.</db:para>
<db:para>The default implementation returns <db:code>false</db:code>.</db:para>
<db:programlisting language="cpp">bool AppendText::mergeWith(const QUndoCommand *other)
{
    if (other-&amp;gt;id() != id()) // make sure other is also an AppendText command
        return false;
    m_text += static_cast&amp;lt;const AppendText*&amp;gt;(other)-&amp;gt;m_text;
    return true;
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#id">id</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#push">QUndoStack::push</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redo">
<db:title>[virtual] void QUndoCommand::redo()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>redo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void redo()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Applies a change to the document. This function must be implemented in the derived class. Calling <db:link xlink:href="qundostack.xml#push">QUndoStack::push</db:link>(), <db:link xlink:href="qundostack.xml#undo">QUndoStack::undo</db:link>() or <db:link xlink:href="qundostack.xml#redo">QUndoStack::redo</db:link>() from this function leads to undefined beahavior.</db:para>
<db:para>The default implementation calls redo() on all child commands.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#undo">undo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setObsolete">
<db:title>[since 5.9] void QUndoCommand::setObsolete(bool <db:emphasis>obsolete</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setObsolete</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>obsolete</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setObsolete(bool obsolete)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether the command is obsolete to <db:code role="parameter">obsolete</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#isObsolete">isObsolete</db:link>()</db:member>
<db:member><db:link xlink:href="qundocommand.xml#mergeWith">mergeWith</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#push">QUndoStack::push</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#undo">QUndoStack::undo</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#redo">QUndoStack::redo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setText">
<db:title>void QUndoCommand::setText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setText(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the command's text to be the <db:code role="parameter">text</db:code> specified.</db:para>
<db:para>The specified text should be a short user-readable string describing what this command does.</db:para>
<db:para>If you need to have two different strings for <db:link xlink:href="qundocommand.xml#text">text</db:link>() and <db:link xlink:href="qundocommand.xml#actionText">actionText</db:link>(), separate them with &quot;\n&quot; and pass into this function. Even if you do not use this feature for English strings during development, you can still let translators use two different strings in order to match specific languages' needs. The described feature and the function <db:link xlink:href="qundocommand.xml#actionText">actionText</db:link>() are available since Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#text">text</db:link>()</db:member>
<db:member><db:link xlink:href="qundocommand.xml#actionText">actionText</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#createUndoAction">QUndoStack::createUndoAction</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#createRedoAction">QUndoStack::createRedoAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text">
<db:title>QString QUndoCommand::text() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>text</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString text() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a short text string describing what this command does; for example, &quot;insert text&quot;.</db:para>
<db:para>The text is used for names of items in <db:link xlink:href="qundoview.xml">QUndoView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#actionText">actionText</db:link>()</db:member>
<db:member><db:link xlink:href="qundocommand.xml#setText">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#createUndoAction">QUndoStack::createUndoAction</db:link>()</db:member>
<db:member><db:link xlink:href="qundostack.xml#createRedoAction">QUndoStack::createRedoAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undo">
<db:title>[virtual] void QUndoCommand::undo()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>undo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void undo()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reverts a change to the document. After undo() is called, the state of the document should be the same as before <db:link xlink:href="qundocommand.xml#redo">redo</db:link>() was called. This function must be implemented in the derived class. Calling <db:link xlink:href="qundostack.xml#push">QUndoStack::push</db:link>(), <db:link xlink:href="qundostack.xml#undo">QUndoStack::undo</db:link>() or <db:link xlink:href="qundostack.xml#redo">QUndoStack::redo</db:link>() from this function leads to undefined beahavior.</db:para>
<db:para>The default implementation calls undo() on all child commands in reverse order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundocommand.xml#redo">redo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
