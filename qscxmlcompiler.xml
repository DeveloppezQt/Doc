<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScxmlCompiler Class</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt SCXML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscxmlcompiler.xml">QScxmlCompiler</db:link> class is a compiler for SCXML files.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScxmlCompiler</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Scxml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Scxml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += scxml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Parses an <db:link xlink:href="http://www.w3.org/TR/scxml/">SCXML</db:link> file and dynamically instantiates a state machine for a successfully parsed SCXML file. If parsing fails, the new state machine cannot start. All errors are returned by <db:link xlink:href="qscxmlstatemachine.xml#parseErrors-prop">QScxmlStateMachine::parseErrors</db:link>().</db:para>
<db:para>To load an SCXML file, <db:link xlink:href="qscxmlstatemachine.xml#fromFile">QScxmlStateMachine::fromFile</db:link> or <db:link xlink:href="qscxmlstatemachine.xml#fromData">QScxmlStateMachine::fromData</db:link> should be used. Using <db:link xlink:href="qscxmlcompiler.xml">QScxmlCompiler</db:link> directly is only needed when the compiler needs to use a custom <db:link xlink:href="qscxmlcompiler-loader.xml">QScxmlCompiler::Loader</db:link>.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScxmlCompiler">
<db:title>QScxmlCompiler::QScxmlCompiler(QXmlStreamReader *<db:emphasis>reader</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QScxmlCompiler</db:methodname>
<db:methodparam>
<db:type>QXmlStreamReader *</db:type>
<db:parameter>reader</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QScxmlCompiler(QXmlStreamReader *reader)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new SCXML compiler for the specified <db:code role="parameter">reader</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QScxmlCompiler">
<db:title>QScxmlCompiler::~QScxmlCompiler()</db:title>
<db:destructorsynopsis>
<db:methodname>~QScxmlCompiler</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QScxmlCompiler()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the SCXML compiler.</db:para>
</db:section>
<db:section xml:id="compile">
<db:title>QScxmlStateMachine *QScxmlCompiler::compile()</db:title>
<db:methodsynopsis>
<db:type>QScxmlStateMachine *</db:type>
<db:methodname>compile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QScxmlStateMachine * compile()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Parses an SCXML file and creates a new state machine from it.</db:para>
<db:para>If parsing is successful, the returned state machine can be initialized and started. If parsing fails, <db:link xlink:href="qscxmlstatemachine.xml#parseErrors-prop">QScxmlStateMachine::parseErrors</db:link>() can be used to retrieve a list of errors.</db:para>
</db:section>
<db:section xml:id="errors">
<db:title>QList&lt;QScxmlError&gt; QScxmlCompiler::errors() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QScxmlError&gt;</db:type>
<db:methodname>errors</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QScxmlError&gt; errors() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of parse errors.</db:para>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QScxmlCompiler::fileName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the file name associated with the current input.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlcompiler.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loader">
<db:title>QScxmlCompiler::Loader *QScxmlCompiler::loader() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QScxmlCompiler::Loader *</db:type>
<db:methodname>loader</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QScxmlCompiler::Loader * loader() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the loader that is currently used to resolve and load URIs for the SCXML compiler.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlcompiler.xml#setLoader">setLoader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>void QScxmlCompiler::setFileName(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFileName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFileName(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the file name for the current input to <db:code role="parameter">fileName</db:code>.</db:para>
<db:para>The file name is used for error reporting and for resolving relative path URIs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlcompiler.xml#fileName">fileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLoader">
<db:title>void QScxmlCompiler::setLoader(QScxmlCompiler::Loader *<db:emphasis>newLoader</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLoader</db:methodname>
<db:methodparam>
<db:type>QScxmlCompiler::Loader *</db:type>
<db:parameter>newLoader</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLoader(QScxmlCompiler::Loader *newLoader)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">newLoader</db:code> to be used for resolving and loading URIs for the SCXML compiler.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlcompiler.xml#loader">loader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
