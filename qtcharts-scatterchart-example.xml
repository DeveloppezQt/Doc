<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Creating Scatter Charts</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a simple scatter chart.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:note>
<db:para>This is part of the <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> example.</db:para>
</db:note>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_scatterchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To create scatter charts, a <db:link xlink:href="qscatterseries.xml">QScatterSeries</db:link> instance is needed. Here we create a scatter series instance, and set the type and width of outline for the scatter points.</db:para>
<db:programlisting language="cpp">auto series0 = new QScatterSeries;
series0-&amp;gt;setName(&quot;scatter1&quot;);
series0-&amp;gt;setMarkerShape(QScatterSeries::MarkerShapeCircle);
series0-&amp;gt;setMarkerSize(15.0);

auto series1 = new QScatterSeries;
series1-&amp;gt;setName(&quot;scatter2&quot;);
series1-&amp;gt;setMarkerShape(QScatterSeries::MarkerShapeRectangle);
series1-&amp;gt;setMarkerSize(20.0);

auto series2 = new QScatterSeries;
series2-&amp;gt;setName(&quot;scatter3&quot;);
series2-&amp;gt;setMarkerShape(QScatterSeries::MarkerShapeRectangle);
series2-&amp;gt;setMarkerSize(30.0);
</db:programlisting>
<db:para>We add the data to be shown. We can use the append() member function or use the stream operator.</db:para>
<db:programlisting language="cpp">series0-&amp;gt;append(0, 6);
series0-&amp;gt;append(2, 4);
series0-&amp;gt;append(3, 8);
series0-&amp;gt;append(7, 4);
series0-&amp;gt;append(10, 5);

*series1 &amp;lt;&amp;lt; QPointF(1, 1) &amp;lt;&amp;lt; QPointF(3, 3) &amp;lt;&amp;lt; QPointF(7, 6) &amp;lt;&amp;lt; QPointF(8, 3) &amp;lt;&amp;lt; QPointF(10, 2);
*series2 &amp;lt;&amp;lt; QPointF(1, 5) &amp;lt;&amp;lt; QPointF(4, 6) &amp;lt;&amp;lt; QPointF(6, 3) &amp;lt;&amp;lt; QPointF(9, 5);
</db:programlisting>
<db:para>We can define the brush of the scatter series to be an image. Here the image is a star created using <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link>.</db:para>
<db:programlisting language="cpp">QPainterPath starPath;
starPath.moveTo(28, 15);
for (int i = 1; i &amp;lt; 5; ++i) {
    starPath.lineTo(14 + 14 * qCos(0.8 * i * M_PI),
                    15 + 14 * qSin(0.8 * i * M_PI));
}
starPath.closeSubpath();

QImage star(30, 30, QImage::Format_ARGB32);
star.fill(Qt::transparent);

QPainter painter(&amp;amp;star);
painter.setRenderHint(QPainter::Antialiasing);
painter.setPen(QRgb(0xf6a625));
painter.setBrush(painter.pen().color());
painter.drawPath(starPath);

series2-&amp;gt;setBrush(star);
series2-&amp;gt;setPen(QColor(Qt::transparent));
</db:programlisting>
<db:para>In the end we enable anti-aliasing, set the chart title, and add the scatter series onto the chart. We also disable drop shadow, because it would not look good on an application with only chart view shown.</db:para>
<db:programlisting language="cpp">auto chart = new QChart;
chart-&amp;gt;addSeries(series0);
chart-&amp;gt;addSeries(series1);
chart-&amp;gt;addSeries(series2);

chart-&amp;gt;setTitle(&quot;Simple Scatter Chart&quot;);
chart-&amp;gt;createDefaultAxes();
chart-&amp;gt;setDropShadowEnabled(false);
</db:programlisting>
<db:para>We can also use the scatter points as legend markers.</db:para>
<db:programlisting language="cpp">chart-&amp;gt;legend()-&amp;gt;setMarkerShape(QLegend::MarkerShapeFromSeries);
</db:programlisting>
<db:para>The chart is ready to be shown.</db:para>
</db:article>
