<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCheckBox Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> widget provides a checkbox with a text label.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCheckBox</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml" xlink:role="class">QAbstractButton</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCheckBox is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/windows-checkbox.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> is an option button that can be switched on (checked) or off (unchecked). Checkboxes are typically used to represent features in an application that can be enabled or disabled without affecting others. Different types of behavior can be implemented. For example, a <db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link> can be used to group check buttons logically, allowing exclusive checkboxes. However, <db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link> does not provide any visual representation.</db:para>
<db:para>The image below further illustrates the differences between exclusive and non-exclusive checkboxes.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/checkboxes-exclusive.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/checkboxes-non-exclusive.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Whenever a checkbox is checked or cleared, it emits the signal <db:link xlink:href="qcheckbox.xml#stateChanged">stateChanged</db:link>(). Connect to this signal if you want to trigger an action each time the checkbox changes state. You can use <db:link xlink:href="qabstractbutton.xml#checked-prop">isChecked</db:link>() to query whether or not a checkbox is checked.</db:para>
<db:para>In addition to the usual checked and unchecked states, <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> optionally provides a third state to indicate &quot;no change&quot;. This is useful whenever you need to give the user the option of neither checking nor unchecking a checkbox. If you need this third state, enable it with <db:link xlink:href="qcheckbox.xml#tristate-prop">setTristate</db:link>(), and use <db:link xlink:href="qcheckbox.xml#checkState">checkState</db:link>() to query the current toggle state.</db:para>
<db:para>Just like <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>, a checkbox displays text, and optionally a small icon. The icon is set with <db:link xlink:href="qabstractbutton.xml#icon-prop">setIcon</db:link>(). The text can be set in the constructor or with <db:link xlink:href="qabstractbutton.xml#text-prop">setText</db:link>(). A shortcut key can be specified by preceding the preferred character with an ampersand. For example:</db:para>
<db:programlisting language="cpp">QCheckBox *checkbox = new QCheckBox(&quot;C&amp;amp;ase sensitive&quot;, this);
</db:programlisting>
<db:para>In this example, the shortcut is <db:emphasis>Alt+A</db:emphasis>. See the <db:link xlink:href="qshortcut.xml#mnemonic">QShortcut</db:link> documentation for details. To display an actual ampersand, use '&amp;&amp;'.</db:para>
<db:para>Important inherited functions: <db:link xlink:href="qabstractbutton.xml#text-prop">text</db:link>(), <db:link xlink:href="qabstractbutton.xml#text-prop">setText</db:link>(), <db:link xlink:href="qabstractbutton.xml#text-prop">text</db:link>(), pixmap(), setPixmap(), accel(), setAccel(), isToggleButton(), <db:link xlink:href="qabstractbutton.xml#down-prop">setDown</db:link>(), <db:link xlink:href="qabstractbutton.xml#down-prop">isDown</db:link>(), isOn(), <db:link xlink:href="qcheckbox.xml#checkState">checkState</db:link>(), <db:link xlink:href="qabstractbutton.xml#autoRepeat-prop">autoRepeat</db:link>(), isExclusiveToggle(), <db:link xlink:href="qabstractbutton.xml#group">group</db:link>(), <db:link xlink:href="qabstractbutton.xml#autoRepeat-prop">setAutoRepeat</db:link>(), <db:link xlink:href="qabstractbutton.xml#toggle">toggle</db:link>(), <db:link xlink:href="qabstractbutton.xml#pressed">pressed</db:link>(), <db:link xlink:href="qabstractbutton.xml#released">released</db:link>(), <db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>(), <db:link xlink:href="qabstractbutton.xml#toggled">toggled</db:link>(), <db:link xlink:href="qcheckbox.xml#checkState">checkState</db:link>(), and <db:link xlink:href="qcheckbox.xml#stateChanged">stateChanged</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link></db:member>
<db:member><db:link xlink:href="qradiobutton.xml">QRadioButton</db:link></db:member>
<db:member><db:link xlink:href="guibooks.xml#fowler">GUI Design Handbook: Check Box</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="tristate-prop">
<db:title>tristate : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>tristate</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isTristate</db:synopsisinfo>
<db:synopsisinfo role="setter">setTristate</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the checkbox is a tri-state checkbox</db:para>
<db:para>The default is false, i.e., the checkbox has only two states.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isTristate</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTristate</db:emphasis>(<db:type>bool</db:type> <db:emphasis>y</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCheckBox">
<db:title>[explicit] QCheckBox::QCheckBox(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCheckBox</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCheckBox(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a checkbox with the given <db:code role="parameter">parent</db:code>, but with no text.</db:para>
<db:para><db:code role="parameter">parent</db:code> is passed on to the <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="QCheckBox-1">
<db:title>[explicit] QCheckBox::QCheckBox(const QString &amp;<db:emphasis>text</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCheckBox</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCheckBox(const QString &amp;text, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a checkbox with the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">text</db:code>.</db:para>
<db:para><db:code role="parameter">parent</db:code> is passed on to the <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QCheckBox">
<db:title>[virtual] QCheckBox::~QCheckBox()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QCheckBox</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCheckBox()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="checkState">
<db:title>Qt::CheckState QCheckBox::checkState() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::CheckState</db:type>
<db:methodname>checkState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::CheckState checkState() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the checkbox's check state. If you do not need tristate support, you can also use <db:link xlink:href="qabstractbutton.xml#checked-prop">QAbstractButton::isChecked</db:link>(), which returns a boolean.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcheckbox.xml#setCheckState">setCheckState</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#CheckState-enum">Qt::CheckState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkStateSet">
<db:title>[override virtual protected] void QCheckBox::checkStateSet()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>checkStateSet</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void checkStateSet() override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#checkStateSet" role="function">QAbstractButton::checkStateSet()</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QCheckBox::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#event" role="function">QAbstractButton::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="hitButton">
<db:title>[override virtual protected] bool QCheckBox::hitButton(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hitButton</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hitButton(const QPoint &amp;pos) const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#hitButton" role="function">QAbstractButton::hitButton(const QPoint &amp;pos) const</db:link>.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[virtual protected] void QCheckBox::initStyleOption(QStyleOptionButton *<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>initStyleOption</db:methodname>
<db:methodparam>
<db:type>QStyleOptionButton *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initStyleOption(QStyleOptionButton *option) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>. This method is useful for subclasses that require a <db:link xlink:href="qstyleoptionbutton.xml">QStyleOptionButton</db:link>, but do not want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QCheckBox::minimumSizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>minimumSizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize minimumSizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#minimumSizeHint-prop" role="property">QWidget::minimumSizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QCheckBox::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#mouseMoveEvent" role="function">QAbstractButton::mouseMoveEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="nextCheckState">
<db:title>[override virtual protected] void QCheckBox::nextCheckState()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>nextCheckState</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void nextCheckState() override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#nextCheckState" role="function">QAbstractButton::nextCheckState()</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QCheckBox::paintEvent(<db:emphasis>QPaintEvent *</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#paintEvent" role="function">QAbstractButton::paintEvent(QPaintEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="setCheckState">
<db:title>void QCheckBox::setCheckState(Qt::CheckState <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCheckState</db:methodname>
<db:methodparam>
<db:type>Qt::CheckState</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCheckState(Qt::CheckState state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the checkbox's check state to <db:code role="parameter">state</db:code>. If you do not need tristate support, you can also use <db:link xlink:href="qabstractbutton.xml#checked-prop">QAbstractButton::setChecked</db:link>(), which takes a boolean.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcheckbox.xml#checkState">checkState</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#CheckState-enum">Qt::CheckState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QCheckBox::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QCheckBox::stateChanged(int <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(int state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the checkbox's state changes, i.e., whenever the user checks or unchecks it.</db:para>
<db:para><db:code role="parameter">state</db:code> contains the checkbox's new <db:link xlink:href="qt.xml#CheckState-enum">Qt::CheckState</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
