<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsPixmapItem Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link> class provides a pixmap item that you can add to a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsPixmapItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsitem.xml" xlink:role="class">QGraphicsItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsPixmapItem is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To set the item's pixmap, pass a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> to <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link>'s constructor, or call the <db:link xlink:href="qgraphicspixmapitem.xml#setPixmap">setPixmap</db:link>() function. The <db:link xlink:href="qgraphicspixmapitem.xml#pixmap">pixmap</db:link>() function returns the current pixmap.</db:para>
<db:para><db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link> uses pixmap's optional alpha mask to provide a reasonable implementation of <db:link xlink:href="qgraphicspixmapitem.xml#boundingRect">boundingRect</db:link>(), <db:link xlink:href="qgraphicspixmapitem.xml#shape">shape</db:link>(), and <db:link xlink:href="qgraphicspixmapitem.xml#contains">contains</db:link>().</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicsview-pixmapitem.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The pixmap is drawn at the item's (0, 0) coordinate, as returned by <db:link xlink:href="qgraphicspixmapitem.xml#offset">offset</db:link>(). You can change the drawing offset by calling <db:link xlink:href="qgraphicspixmapitem.xml#setOffset">setOffset</db:link>().</db:para>
<db:para>You can set the pixmap's transformation mode by calling <db:link xlink:href="qgraphicspixmapitem.xml#setTransformationMode">setTransformationMode</db:link>(). By default, <db:link xlink:href="qt.xml#TransformationMode-enum">Qt::FastTransformation</db:link> is used, which provides fast, non-smooth scaling. <db:link xlink:href="qt.xml#TransformationMode-enum">Qt::SmoothTransformation</db:link> enables <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::SmoothPixmapTransform</db:link> on the painter, and the quality depends on the platform and viewport. The result is usually not as good as calling QPixmap::scale() directly. Call <db:link xlink:href="qgraphicspixmapitem.xml#transformationMode">transformationMode</db:link>() to get the current transformation mode for the item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspathitem.xml">QGraphicsPathItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsrectitem.xml">QGraphicsRectItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsellipseitem.xml">QGraphicsEllipseItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicstextitem.xml">QGraphicsTextItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicspolygonitem.xml">QGraphicsPolygonItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslineitem.xml">QGraphicsLineItem</db:link></db:member>
<db:member><db:link xlink:href="graphicsview.xml">Graphics View Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ShapeMode-enum">
<db:title>enum QGraphicsPixmapItem::ShapeMode</db:title>
<db:para>This enum describes how <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link> calculates its shape and opaque area.</db:para>
<db:para>The default value is MaskShape.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link></db:emphasis>::MaskShape</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The shape is determined by calling <db:link xlink:href="qpixmap.xml#mask">QPixmap::mask</db:link>(). This shape includes only the opaque pixels of the pixmap. Because the shape is more complex, however, it can be slower than the other modes, and uses more memory.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link></db:emphasis>::BoundingRectShape</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The shape is determined by tracing the outline of the pixmap. This is the fastest shape mode, but it does not take into account any transparent areas on the pixmap.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link></db:emphasis>::HeuristicMaskShape</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The shape is determine by calling <db:link xlink:href="qpixmap.xml#createHeuristicMask">QPixmap::createHeuristicMask</db:link>(). The performance and memory consumption is similar to MaskShape.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="anonymous-enum">
<db:title>enum QGraphicsPixmapItem::anonymous</db:title>
<db:para>The value returned by the virtual <db:link xlink:href="qgraphicspixmapitem.xml#type">type</db:link>() function.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link></db:emphasis>::Type</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>A graphics pixmap item</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsPixmapItem">
<db:title>[explicit] QGraphicsPixmapItem::QGraphicsPixmapItem(QGraphicsItem *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link>. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGraphicsPixmapItem-1">
<db:title>[explicit] QGraphicsPixmapItem::QGraphicsPixmapItem(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, QGraphicsItem *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link>, using <db:code role="parameter">pixmap</db:code> as the default pixmap. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QGraphicsPixmapItem">
<db:title>[virtual noexcept] QGraphicsPixmapItem::~QGraphicsPixmapItem()</db:title>
<db:para>Destroys the <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link>.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>[override virtual] QRectF QGraphicsPixmapItem::boundingRect() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#boundingRect" role="function">QGraphicsItem::boundingRect() const</db:link>.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>[override virtual] bool QGraphicsPixmapItem::contains(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#contains" role="function">QGraphicsItem::contains(const QPointF &amp;point) const</db:link>.</db:para>
</db:section>
<db:section xml:id="isObscuredBy">
<db:title>[override virtual] bool QGraphicsPixmapItem::isObscuredBy(const QGraphicsItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#isObscuredBy" role="function">QGraphicsItem::isObscuredBy(const QGraphicsItem *item) const</db:link>.</db:para>
</db:section>
<db:section xml:id="offset">
<db:title>QPointF QGraphicsPixmapItem::offset() const</db:title>
<db:para>Returns the pixmap item's <db:emphasis>offset</db:emphasis>, which defines the point of the top-left corner of the pixmap, in local coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspixmapitem.xml#setOffset">setOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="opaqueArea">
<db:title>[override virtual] QPainterPath QGraphicsPixmapItem::opaqueArea() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#opaqueArea" role="function">QGraphicsItem::opaqueArea() const</db:link>.</db:para>
</db:section>
<db:section xml:id="paint">
<db:title>[override virtual] void QGraphicsPixmapItem::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QStyleOptionGraphicsItem *<db:emphasis>option</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#paint" role="function">QGraphicsItem::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</db:link>.</db:para>
</db:section>
<db:section xml:id="pixmap">
<db:title>QPixmap QGraphicsPixmapItem::pixmap() const</db:title>
<db:para>Returns the item's pixmap, or an invalid <db:link xlink:href="qpixmap.xml">QPixmap</db:link> if no pixmap has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspixmapitem.xml#setPixmap">setPixmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOffset">
<db:title>void QGraphicsPixmapItem::setOffset(const QPointF &amp;<db:emphasis>offset</db:emphasis>)</db:title>
<db:para>Sets the pixmap item's offset to <db:code role="parameter">offset</db:code>. <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link> will draw its pixmap using <db:code role="parameter">offset</db:code> for its top-left corner.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspixmapitem.xml#offset">offset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOffset-1">
<db:title>void QGraphicsPixmapItem::setOffset(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicspixmapitem.xml#setOffset">setOffset</db:link>(<db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="setPixmap">
<db:title>void QGraphicsPixmapItem::setPixmap(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>Sets the item's pixmap to <db:code role="parameter">pixmap</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspixmapitem.xml#pixmap">pixmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setShapeMode">
<db:title>void QGraphicsPixmapItem::setShapeMode(QGraphicsPixmapItem::ShapeMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the item's shape mode to <db:code role="parameter">mode</db:code>. The shape mode describes how <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link> calculates its shape. The default mode is <db:link xlink:href="qgraphicspixmapitem.xml#ShapeMode-enum">MaskShape</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspixmapitem.xml#shapeMode">shapeMode</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicspixmapitem.xml#ShapeMode-enum">ShapeMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransformationMode">
<db:title>void QGraphicsPixmapItem::setTransformationMode(Qt::TransformationMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the pixmap item's transformation mode to <db:code role="parameter">mode</db:code>, and toggles an update of the item. The default mode is <db:link xlink:href="qt.xml#TransformationMode-enum">Qt::FastTransformation</db:link>, which provides quick transformation with no smoothing.</db:para>
<db:para><db:link xlink:href="qt.xml#TransformationMode-enum">Qt::SmoothTransformation</db:link> enables <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::SmoothPixmapTransform</db:link> on the painter, and the quality depends on the platform and viewport. The result is usually not as good as calling QPixmap::scale() directly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspixmapitem.xml#transformationMode">transformationMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shape">
<db:title>[override virtual] QPainterPath QGraphicsPixmapItem::shape() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#shape" role="function">QGraphicsItem::shape() const</db:link>.</db:para>
</db:section>
<db:section xml:id="shapeMode">
<db:title>QGraphicsPixmapItem::ShapeMode QGraphicsPixmapItem::shapeMode() const</db:title>
<db:para>Returns the item's shape mode. The shape mode describes how <db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link> calculates its shape. The default mode is <db:link xlink:href="qgraphicspixmapitem.xml#ShapeMode-enum">MaskShape</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspixmapitem.xml#setShapeMode">setShapeMode</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicspixmapitem.xml#ShapeMode-enum">ShapeMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transformationMode">
<db:title>Qt::TransformationMode QGraphicsPixmapItem::transformationMode() const</db:title>
<db:para>Returns the transformation mode of the pixmap. The default mode is <db:link xlink:href="qt.xml#TransformationMode-enum">Qt::FastTransformation</db:link>, which provides quick transformation with no smoothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspixmapitem.xml#setTransformationMode">setTransformationMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] int QGraphicsPixmapItem::type() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#type" role="function">QGraphicsItem::type() const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
