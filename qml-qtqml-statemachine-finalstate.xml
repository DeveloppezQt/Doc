<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>FinalState QML Type</db:title>
<db:productname>QtStateMachine</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt State Machine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a final state.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml.StateMachine 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>QAbstractState</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>FinalState is part of <db:simplelist><db:member>statemachine-qmltypes</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A final state is used to communicate that (part of) a <db:link xlink:href="qml-qtqml-statemachine-statemachine.xml">StateMachine</db:link> has finished its work. When a final top-level state is entered, the state machine's <db:link xlink:href="qml-qtqml-statemachine-state.xml#finished-signal">finished</db:link>() signal is emitted. In general, when a final substate (a child of a State) is entered, the parent state's <db:link xlink:href="qml-qtqml-statemachine-state.xml#finished-signal">finished</db:link>() signal is emitted. <db:link xlink:href="qml-qtqml-statemachine-finalstate.xml">FinalState</db:link> is part of <db:link xlink:href="qmlstatemachine-qml-guide.xml">Qt State Machine QML API</db:link></db:para>
<db:para>To use a final state, you create a <db:link xlink:href="qml-qtqml-statemachine-finalstate.xml">FinalState</db:link> object and add a transition to it from another state.</db:para>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:programlisting language="qml">import QtQuick
import QtQml.StateMachine as DSM

Rectangle {
    DSM.StateMachine {
        id: stateMachine
        initialState: state
        running: true
        DSM.State {
            id: state
            DSM.TimeoutTransition {
                targetState: finalState
                timeout: 200
            }
        }
        DSM.FinalState {
            id: finalState
        }
        onFinished: console.log(&quot;state finished&quot;)
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml">StateMachine</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-state.xml">State</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
