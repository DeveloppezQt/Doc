<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Media Player Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Playing audio and video.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/mediaplayerex.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Media Player</db:emphasis> demonstrates a simple multimedia player that can play audio and or video files using various codecs.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
<db:para>The example uses a <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> object passed into a <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> to control the video output. To give the application playlist capability we also use a QPlayList object.</db:para>
<db:para>To activate the various functions such as play and stop on the dialog, the button clicked events emit the play() and stop() signals, which are connected to the play() and stop() slots of <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link>.</db:para>
<db:programlisting language="cpp">connect(controls, SIGNAL(play()), player, SLOT(play()));
connect(controls, SIGNAL(pause()), player, SLOT(pause()));
connect(controls, SIGNAL(stop()), player, SLOT(stop()));
</db:programlisting>
<db:para>We can get the volume (and set our user interface representation)</db:para>
<db:programlisting language="cpp">controls-&amp;gt;setVolume(player-&amp;gt;volume());
</db:programlisting>
<db:para>and we can make widget 'volume' changes change the volume</db:para>
<db:programlisting language="cpp">connect(controls, SIGNAL(changeVolume(int)), player, SLOT(setVolume(int)));
</db:programlisting>
<db:para>The example also allows us to change video properties by means of the <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> object. We can go to Full Screen mode with a single button click, and back again.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtmultimedia.git/tree/examples/multimedia/player?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
