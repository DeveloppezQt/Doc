<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Photo Surface</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML app for touch devices that uses a Repeater with a <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> to access content in a folder, and a <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link> to handle pinch gestures on the fetched content.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquick-demo-photosurface-small.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Photo Surface</db:emphasis> demonstrates how to use a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> with a <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> and a <db:link xlink:href="qml-qt-labs-platform-folderdialog.xml">FolderDialog</db:link> to access images from a folder selected by a user, and how to handle dragging, rotation and pinch zooming within the same item using <db:link xlink:href="qtquickhandlers-index.xml">Qt Quick Input Handlers</db:link>.</db:para>
<db:para>All the app code is contained in one QML file, photosurface.qml. Inline JavaScript code is used to place, rotate, and scale images on the photo surface.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-the-main-window">
<db:title>Creating the Main Window</db:title>
<db:para>To create the main window for the Photo Surface app, we use the <db:link xlink:href="qt3dextras-module.xml#window">Window</db:link> QML type as the root item. It automatically sets up the window for use with <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> graphical types:</db:para>
<db:programlisting language="cpp">Window {
    id: root
    visible: true
    width: 1024; height: 600
    color: &quot;black&quot;
    title: Application.displayName + &quot; : &quot; + folderModel.folder
    property real defaultSize: 200
    property real surfaceViewportRatio: 1.5
    property var imageNameFilters: [&quot;*.png&quot;, &quot;*.jpg&quot;, &quot;*.gif&quot;] // overridden in main.cpp
</db:programlisting>
</db:section>
<db:section xml:id="accessing-folder-contents">
<db:title>Accessing Folder Contents</db:title>
<db:para>We use a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> QML type together with the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> to display at least the GIF, JPG, and PNG images located in a folder (although main.cpp may expand the list of supported image types):</db:para>
<db:programlisting language="cpp">        Repeater {
            model: FolderListModel {
                id: folderModel
                objectName: &quot;folderModel&quot;
                showDirs: false
                nameFilters: root.imageNameFilters
            }
</db:programlisting>
<db:para>To use the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> type, we must import it:</db:para>
<db:programlisting language="cpp">import Qt.labs.folderlistmodel
</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qt-labs-platform-folderdialog.xml">FolderDialog</db:link> to enable users to select the folder that contains the images:</db:para>
<db:programlisting language="cpp">    FolderDialog {
        id: folderDialog
        title: qsTr(&quot;Choose a folder with some images&quot;)
        onAccepted: folderModel.folder = selectedFolder
    }
</db:programlisting>
<db:para>To use the <db:link xlink:href="qml-qt-labs-platform-folderdialog.xml">FolderDialog</db:link> type, we add the following import statement:</db:para>
<db:programlisting language="cpp">import QtQuick.Dialogs
</db:programlisting>
<db:para>We use the folderDialog.open() function to open the file dialog when the initial slide show finishes, unless a folder path has been given as a command-line argument:</db:para>
<db:programlisting language="cpp">        Component.onDestruction: {
            folderIcon.visible = true
            const lastArg = Application.arguments.slice(-1)[0]
            const standardPicturesLocations = StandardPaths.standardLocations(StandardPaths.PicturesLocation)
            const hasValidPicturesLocation = standardPicturesLocations.length &amp;gt; 0
            if (hasValidPicturesLocation)
                folderDialog.currentFolder = standardPicturesLocations[0]
            if (/.*hotosurface.*|--+/.test(lastArg)) {
                if (hasValidPicturesLocation)
                    folderModel.folder = standardPicturesLocations[0]
                else
                    folderDialog.open()
            }
</db:programlisting>
<db:para>Users can also click the folder dialog icon to open it. We use an <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> QML type to display the icon. Inside the <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> type, we use a <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> with the onTapped signal handler to call the folderDialog.open() function:</db:para>
<db:programlisting language="cpp">    Image {
        id: folderIcon
        visible: false
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.margins: 10
        source: &quot;resources/folder.png&quot;

        TapHandler { onTapped: folderDialog.open() }

        HoverHandler { id: folderMouse }

        ToolTip.visible: folderMouse.hovered
        ToolTip.text: qsTr(`Open an image directory (${openShortcut.nativeText})`)
        ToolTip.delay: 1000

        Shortcut {
            id: openShortcut
            sequence: StandardKey.Open
            onActivated: folderDialog.open()
        }
    }
</db:programlisting>
</db:section>
<db:section xml:id="displaying-images-on-the-photo-surface">
<db:title>Displaying Images on the Photo Surface</db:title>
<db:para>We use a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> as a delegate for a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> to provide a frame for each image that the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> finds in the selected folder. We use JavaScript Math() methods to place the frames randomly on the photo surface and to rotate them at random angles, as well as to scale the images. The border color indicates the state of interaction:</db:para>
<db:programlisting language="cpp">            delegate: Rectangle {
                required property date fileModified
                required property string fileName
                required property url fileUrl
                id: photoFrame
                objectName: &quot;frame-&quot; + fileName
                width: image.width * (1 + 0.10 * image.height / image.width)
                height: image.height * 1.10
                scale: root.defaultSize / Math.max(image.sourceSize.width, image.sourceSize.height)
                border.color: pinchHandler.active || dragHandler.active ? &quot;darkturquoise&quot;
                                                                        : mouse.hovered ? &quot;darkseagreen&quot;
                                                                                        : &quot;saddlebrown&quot;
                border.width: 3 / scale
                antialiasing: true
                Component.onCompleted: {
                    x = Math.random() * root.width - width / 2
                    y = Math.random() * root.height - height / 2
                    rotation = Math.random() * 13 - 6
                }

                Image {
                    id: image
                    anchors.centerIn: parent
                    fillMode: Image.PreserveAspectFit
                    source: photoFrame.fileUrl
                    antialiasing: true
                }
</db:programlisting>
</db:section>
<db:section xml:id="handling-drag-and-pinch-gestures-and-the-mouse">
<db:title>Handling Drag and Pinch Gestures, and the Mouse</db:title>
<db:para>We use a <db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> and a <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link> in each photo frame to handle dragging, pinch zooming and rotation:</db:para>
<db:programlisting language="cpp">                PinchHandler {
                    id: pinchHandler
                    minimumRotation: -360
                    maximumRotation: 360
                    minimumScale: 0.1
                    maximumScale: 10
                    grabPermissions: PointerHandler.CanTakeOverFromAnything // and never gonna give it up
                    onActiveChanged: if (active) photoFrame.z = ++flick.highestZ
                }

                DragHandler {
                    id: dragHandler
                    onActiveChanged: {
                        if (active)
                            photoFrame.z = ++flick.highestZ
                        else
                            anim.restart(centroid.velocity)
                    }
                }
</db:programlisting>
<db:para>Because the <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link> is declared inside the Rectangle, the PinchHandler.target property is implicitly set so that pinch gestures manipulate the Rectangle. The rotation properties specify that the frames can be rotated to all angles, and the scale properties specify that they can be scaled between 0.1 and 10. The pinch gesture works equally well on a touchscreen or multi-touch touchpad. Transforming the frame transforms its contents (the <db:link xlink:href="qml-qtquick-image.xml">Image</db:link>).</db:para>
<db:para>The DragHandler.target property is implicitly set as well, so that you can drag a photo with one finger on a touchscreen or touchpad, or with a mouse. In the <db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link>'s onActiveChanged signal handler, we raise the selected photo frame to the top by increasing the value of its z property (while the shared highestZ property holds the largest z value that has been used so far). When dragging ends, we begin an animation to keep it moving in the same direction for a little while, slowing down and coming to a stop. If you &quot;fling&quot; a photo past the edge of the surface, the surface expands to accommodate its new position. You can move around to view different parts of the surface via the <db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link> that contains the Repeater and all the photo frames that it populates.</db:para>
<db:para>Since you can drag two photos with two fingers via their DragHandlers, and you can also pinch one <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link> with two fingers, and collections of photos tend to pile on top of each other, we need to adjust grabPermissions so that the <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link> has priority: when the pinch gesture begins, it does not allow the DragHandlers to take over the touchpoint grabs again.</db:para>
<db:para>To make the example more interactive on computers without touch devices, we add the <db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link> on which the border.color above depends, and two <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandlers</db:link>. One allows you to hold down the Ctrl key and use the mouse wheel to twirl the photo around the mouse cursor; with the other, you can hold down the Shift key and use the mouse wheel to zoom in or out of the position under the cursor. Both of these also raise the photo in the same way that the <db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> above does it:</db:para>
<db:programlisting language="cpp">                HoverHandler { id: mouse }

                WheelHandler {
                    acceptedModifiers: Qt.ControlModifier
                    property: &quot;rotation&quot;
                    onActiveChanged: if (active) photoFrame.z = ++flick.highestZ
                }

                WheelHandler {
                    acceptedModifiers: Qt.ShiftModifier
                    property: &quot;scale&quot;
                    onActiveChanged: if (active) photoFrame.z = ++flick.highestZ
                }
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdoc.git/tree/examples/demos/photosurface?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmlapplications.xml">QML Applications</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
