<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Demo - Photo Surface</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML app for touch devices that uses a Repeater with a <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> to access content in a folder, and a <db:link xlink:href="qml-qtquick-pincharea.xml">PinchArea</db:link> that contains a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to handle pinch gestures on the fetched content.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquick-demo-photosurface-small.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Photo Surface</db:emphasis> demonstrates how to use a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> with a <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> and a <db:link xlink:href="qml-qt-labs-platform-folderdialog.xml">FolderDialog</db:link> to access images from a folder selected by a user and how to handle dragging, rotation and pinch zooming within the same item using a <db:link xlink:href="qml-qtquick-pincharea.xml">PinchArea</db:link> that contains a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>.</db:para>
<db:para>All the app code is contained in one QML file, photosurface.qml. Inline JavaScript code is used to place, rotate, and scale images on the photo surface.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-the-main-window">
<db:title>Creating the Main Window</db:title>
<db:para>To create the main window for the Photo Surface app, we use the <db:link xlink:href="qt3dextras-module.xml#window">Window</db:link> QML type as the root item. It automatically sets up the window for use with <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> graphical types:</db:para>
<db:programlisting language="cpp">Window {
    id: root
    visible: true
    width: 1024; height: 600
    color: &quot;black&quot;
    property int highestZ: 0
    property real defaultSize: 200
    property var currentFrame: undefined
</db:programlisting>
<db:para>To use the <db:link xlink:href="qt3dextras-module.xml#window">Window</db:link> type, we must import it:</db:para>
<db:programlisting language="cpp">import QtQuick.Window
</db:programlisting>
</db:section>
<db:section xml:id="accessing-folder-contents">
<db:title>Accessing Folder Contents</db:title>
<db:para>We use a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> QML type together with the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> to display GIF, JPG, and PNG images located in a folder:</db:para>
<db:programlisting language="cpp">        Repeater {
            model: FolderListModel {
                id: folderModel
                objectName: &quot;folderModel&quot;
                showDirs: false
                nameFilters: imageNameFilters
            }
</db:programlisting>
<db:para>To use the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> type, we must import it:</db:para>
<db:programlisting language="cpp">import Qt.labs.folderlistmodel
</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qt-labs-platform-folderdialog.xml">FolderDialog</db:link> to enable users to select the folder that contains the images:</db:para>
<db:programlisting language="cpp">    FolderDialog {
        id: folderDialog
        title: &quot;Choose a folder with some images&quot;
        folder: picturesLocation
        onAccepted: folderModel.folder = folder + &quot;/&quot;
    }
</db:programlisting>
<db:para>To use the <db:link xlink:href="qml-qt-labs-platform-folderdialog.xml">FolderDialog</db:link> type, we add the following import statement:</db:para>
<db:programlisting language="cpp">import Qt.labs.platform
</db:programlisting>
<db:para>We use the folderDialog.open() function to open the file dialog when the app starts:</db:para>
<db:programlisting language="cpp">Component.onCompleted: folderDialog.open()
</db:programlisting>
<db:para>Users can also click the folder dialog icon to open it. We use an <db:link xlink:href="09-qdoc-commands-includingimages.xml#image">Image</db:link> QML type to display the icon. Inside the <db:link xlink:href="09-qdoc-commands-includingimages.xml#image">Image</db:link> type, we use a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> with the onClicked signal handler to call the folderDialog.open() function:</db:para>
<db:programlisting language="cpp">    Image {
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.margins: 10
        source: &quot;resources/folder.png&quot;
        MouseArea {
            anchors.fill: parent
            anchors.margins: -10
            onClicked: folderDialog.open()
            hoverEnabled: true
            onPositionChanged: {
                tooltip.visible = false
                hoverTimer.start()
            }
            onExited: {
                tooltip.visible = false
                hoverTimer.stop()
            }
</db:programlisting>
</db:section>
<db:section xml:id="displaying-images-on-the-photo-surface">
<db:title>Displaying Images on the Photo Surface</db:title>
<db:para>We use a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> as a delegate for a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> to provide a frame for each image that the <db:link xlink:href="qml-qt-labs-folderlistmodel-folderlistmodel.xml">FolderListModel</db:link> finds in the selected folder. We use JavaScript Math() methods to place the frames randomly on the photo surface and to rotate them at random angles, as well as to scale the images:</db:para>
<db:programlisting language="cpp">            Rectangle {
                id: photoFrame
                width: image.width * (1 + 0.10 * image.height / image.width)
                height: image.height * 1.10
                scale: defaultSize / Math.max(image.sourceSize.width, image.sourceSize.height)
                Behavior on scale { NumberAnimation { duration: 200 } }
                Behavior on x { NumberAnimation { duration: 200 } }
                Behavior on y { NumberAnimation { duration: 200 } }
                border.color: &quot;black&quot;
                border.width: 2
                smooth: true
                antialiasing: true
                Component.onCompleted: {
                    x = Math.random() * root.width - width / 2
                    y = Math.random() * root.height - height / 2
                    rotation = Math.random() * 13 - 6
                }
</db:programlisting>
</db:section>
<db:section xml:id="handling-pinch-gestures">
<db:title>Handling Pinch Gestures</db:title>
<db:para>We use a <db:link xlink:href="qml-qtquick-pincharea.xml">PinchArea</db:link> that contains a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> in the photo frames to handle dragging, rotation and pinch zooming of the frame:</db:para>
<db:programlisting language="cpp">                PinchArea {
                    anchors.fill: parent
                    pinch.target: photoFrame
                    pinch.minimumRotation: -360
                    pinch.maximumRotation: 360
                    pinch.minimumScale: 0.1
                    pinch.maximumScale: 10
                    pinch.dragAxis: Pinch.XAndYAxis
                    onPinchStarted: setFrameColor();
</db:programlisting>
<db:para>We use the pinch group property to control how the photo frames react to pinch gestures. The pinch.target sets photoFrame as the item to manipulate. The rotation properties specify that the frames can be rotated at all angles and the scale properties specify that they can be scaled between 0.1 and 10.</db:para>
<db:para>In the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>'s onPressed signal handler, we raise the selected photo frame to the top by increasing the value of its z property. The root item stores the z value of the top-most frame. The border color of the photo frame is controlled in the onEntered signal handler to highlight the selected image:</db:para>
<db:programlisting language="cpp">                    MouseArea {
                        id: dragArea
                        hoverEnabled: true
                        anchors.fill: parent
                        drag.target: photoFrame
                        scrollGestureEnabled: false  // 2-finger-flick gesture should pass through to the Flickable
                        onPressed: {
                            photoFrame.z = ++root.highestZ;
                            parent.setFrameColor();
                        }
                        onEntered: parent.setFrameColor();
</db:programlisting>
<db:para>To enable you to test the example on the desktop, we use the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>'s onWheel signal handler to simulate pinch gestures by using a mouse:</db:para>
<db:programlisting language="cpp">                        onWheel: {
                            if (wheel.modifiers &amp;amp; Qt.ControlModifier) {
                                photoFrame.rotation += wheel.angleDelta.y / 120 * 5;
                                if (Math.abs(photoFrame.rotation) &amp;lt; 4)
                                    photoFrame.rotation = 0;
                            } else {
                                photoFrame.rotation += wheel.angleDelta.x / 120;
                                if (Math.abs(photoFrame.rotation) &amp;lt; 0.6)
                                    photoFrame.rotation = 0;
                                var scaleBefore = photoFrame.scale;
                                photoFrame.scale += photoFrame.scale * wheel.angleDelta.y / 120 / 10;
                            }
                        }
</db:programlisting>
<db:para>The onWheel signal handler is called in response to mouse wheel gestures. Use the vertical wheel to zoom and Ctrl and the vertical wheel to rotate frames. If the mouse has a horizontal wheel, use it to rotate frames.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdoc.git/tree/examples/demos/photosurface?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmlapplications.xml">QML Applications</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
