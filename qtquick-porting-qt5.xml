<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Porting QML Applications to Qt 5</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lists the Qt 5.0 changes that affect the existing QML applications.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>When porting QML-related code from Qt 4.8 to Qt 5, application developers should be aware that the QML infrastructure has undergone considerable changes in Qt 5. The sections below describe these changes and the impact they have on your existing code.</db:para>
<db:section xml:id="qml-language-changes">
<db:title>QML Language Changes</db:title>
<db:para>There are very few changes in the QML language that affect the porting of existing Qt 4.8 QML code to Qt 5. These are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Individual file imports no longer work (for example, import &quot;MyType.qml&quot;). Import the containing directory instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>Relative file paths in JavaScript files are now resolved relative to the location of the JavaScript file instead of the QML file that imported it.</db:para>
</db:listitem>
<db:listitem>
<db:para>It's no longer possible to override signals from the base component.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qtquick-module">
<db:title>QtQuick Module</db:title>
<db:para>The <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> module has been updated to version 2. All QML applications should update their import statements to use the new version:</db:para>
<db:programlisting language="cpp">import QtQuick 2.3
</db:programlisting>
<db:section xml:id="property-and-method-changes">
<db:title>Property and Method Changes</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>'s highlightMoveSpeed and highlightResizeSpeed properties have been renamed to <db:link xlink:href="qml-qtquick-listview.xml#highlightMoveVelocity-prop">highlightMoveVelocity</db:link> and <db:link xlink:href="qml-qtquick-listview.xml#highlightResizeVelocity-prop">highlightResizeVelocity</db:link>, respectively.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> and <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>'s openSoftwareInputPanel() and closeSoftwareInputPanel() methods have been removed. Use the new Qt.inputMethod property and call Qt.inputMethod.show() Qt.inputMethod.hide() to show and hide the virtual keyboard.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="type-and-api-changes">
<db:title>Type and API Changes</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link> has moved into its own module, <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.<db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link>. Any code that uses the <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link> and <db:link xlink:href="qml-qtquick-xmllistmodel-xmlrole.xml">XmlRole</db:link> types must import <db:emphasis><db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.<db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link></db:emphasis> instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>The local storage API that enables SQL support has been moved from the <db:link xlink:href="qtqml-javascript-qmlglobalobject.xml">QML Global Object</db:link> into a QtQuick.LocalStorage singleton type. Any code that requires the local storage API must import <db:emphasis><db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.LocalStorage</db:emphasis> instead. See the <db:link xlink:href="qtquick-localstorage-qmlmodule.xml">Qt Quick Local Storage</db:link> documentation for examples.</db:para>
</db:listitem>
<db:listitem>
<db:para>The LayoutItem type has been removed from the QtQuick module as it was specific to the Graphics View framework backend used in <db:link xlink:href="qtquick-porting-qt5.xml#qtdeclarative-module-in-qt-5">Qt Quick 1</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="behavioral-changes">
<db:title>Behavioral Changes</db:title>
<db:para><db:link xlink:href="qtquick-module.xml">QtQuick</db:link> 2 includes a number of behavioral changes and you should thoroughly test your applications after porting. These changes will not necessarily lead to run-time errors, but may break certain assumptions in your code. Below are the prominent changes to be aware of when porting your applications.</db:para>
<db:para>Item opacity and visibility:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The input handling details of <db:link xlink:href="qml-qtquick-item.xml#opacity-prop">opacity</db:link> and <db:link xlink:href="qml-qtquick-item.xml#visible-prop">visible</db:link> have changed. An opacity of zero no longer affects input handling, where previously it stopped mouse input. A visibility of false no longer affects keyboard input, but still stops mouse input. The new <db:link xlink:href="qml-qtquick-item.xml#enabled-prop">enabled</db:link> property stops mouse and keyboard input, but does not affect how or whether the item is rendered. A workaround for applying the old behavior in most cases is to bind enabled to <db:code>(visible &amp;&amp; opacity &gt; 0.0)</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Previously, if an item was in a positioner (i.e. a <db:link xlink:href="10-qdoc-commands-tablesandlists.xml">Row</db:link>, <db:link xlink:href="qml-qtquick-column.xml">Column</db:link>, <db:link xlink:href="qml-qtquick-grid.xml">Grid</db:link> and <db:link xlink:href="qml-qtquick-flow.xml">Flow</db:link>) and the item's opacity changed to 0, or its visible value became false, the positioner would remove the item from its layout and collapse the space for that item. In <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> 2, this now only happens when an item's visible is false; the item opacity no longer affects whether the item is laid out. (This is consistent with the existing behavior of <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> and <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>).</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Text:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="qml-qtquick-textedit.xml#textFormat-prop">TextEdit::textFormat</db:link> property now defaults to PlainText instead of AutoText.</db:para>
</db:listitem>
<db:listitem>
<db:para>When <db:link xlink:href="qml-qtquick-text.xml#textFormat-prop">Text::textFormat</db:link> is set to Text.AutoText format, the text object will automatically switch to Text.StyledText instead of Text.RichText.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Other:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Modifying the <db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">Image::sourceSize</db:link> now fits the image to the size, maintaining aspect ratio.</db:para>
</db:listitem>
<db:listitem>
<db:para>For <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> and <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>, the cacheBuffer property now has a non-zero default and delegates in the cache buffer are created asynchronously. Also, using a RightToLeft layout now also reverses the preferredHighlightBegin and preferredHighlightEnd.</db:para>
</db:listitem>
<db:listitem>
<db:para>For <db:link xlink:href="qml-qtquick-loader.xml">Loader</db:link>, the sourceChanged and sourceComponentChanged signals are now only emitted when their respective properties change value. (Previously <db:link xlink:href="qml-qtquick-loader.xml">Loader</db:link> emitted both of these signals when either of the relevant properties had changed.)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-experimental-qt-labs-modules">
<db:title>Changes to experimental Qt.labs modules</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The Qt.labs.particles module has been removed. It is replaced by the fully-fledged <db:link xlink:href="qtquick-particles-qmlmodule.xml">QtQuick.Particles</db:link> module which is an enormous improvement on its predecessor.</db:para>
</db:listitem>
<db:listitem>
<db:para>The Qt.labs.shaders module has been removed as the ShaderEffectItem and <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> types from this module have been moved into the QtQuick module. Note the ShaderEffectItem type has been renamed to <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="c-code">
<db:title>C++ code</db:title>
<db:para>In Qt 5, all QML applications are rendered with an OpenGL scenegraph architecture rather than the Graphics View framework used in Qt 4. Due to the scale of this architectural change, the C++ API has been extensively restructured and the QtDeclarative module has been deprecated in favor of two new modules: <db:link xlink:href="qtqml-index.xml">Qt QML</db:link>, which implements the QML engine and language infrastructure, and <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link>, which implements the visual canvas and scenegraph backend.</db:para>
<db:para>All classes that were previously in the QtDeclarative module have been moved into the <db:link xlink:href="qtqml-index.xml">Qt QML</db:link> and <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> modules, and their class names have been changed to reflect their new module locations. The class name changes are as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Qt QML</db:para>
</db:th>
<db:th>
<db:para>Qt Quick</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>QDeclarativeComponent -&gt; <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativeContext -&gt; <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativeEngine -&gt; <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativeError -&gt; <db:link xlink:href="qqmlerror.xml">QQmlError</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativeExpression -&gt; <db:link xlink:href="qqmlexpression.xml">QQmlExpression</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativeExtensionPlugin -&gt; <db:link xlink:href="qqmlextensionplugin.xml">QQmlExtensionPlugin</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativeInfo -&gt; QQmlInfo</db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativeListReference -&gt; <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativeNetworkAccessManagerFactory -&gt; <db:link xlink:href="qqmlnetworkaccessmanagerfactory.xml">QQmlNetworkAccessManagerFactory</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativeParserStatus -&gt; <db:link xlink:href="qqmlparserstatus.xml">QQmlParserStatus</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativeProperty -&gt; <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativePropertyMap -&gt; <db:link xlink:href="qqmlpropertymap.xml">QQmlPropertyMap</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativePropertyValueSource -&gt; <db:link xlink:href="qqmlpropertyvaluesource.xml">QQmlPropertyValueSource</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativeScriptString -&gt; <db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>QDeclarativeItem -&gt; <db:link xlink:href="qquickitem.xml">QQuickItem</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativeView -&gt; <db:link xlink:href="qquickview.xml">QQuickView</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>QDeclarativeImageProvider -&gt; <db:link xlink:href="qquickimageprovider.xml">QQuickImageProvider</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
</db:informaltable>
<db:para>To use the new QQml* and QQuick* classes in Qt 5, link against the approprate module from your qmake .pro file. For example the following will link against both the <db:link xlink:href="qtqml-index.xml">Qt QML</db:link> and <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> modules:</db:para>
<db:programlisting language="cpp">QT += qml quick
</db:programlisting>
<db:para>Required header files can then be included:</db:para>
<db:programlisting language="cpp">#include &lt;QtQml/QQmlEngine&gt;
#include &lt;QtQuick/QQuickView&gt;
</db:programlisting>
<db:para>(The QtDeclarative module is still available to developers as the Qt Quick 1 module, as discussed <db:link xlink:href="qtquick-porting-qt5.xml#qtdeclarative-module-in-qt-5">below</db:link>. However, it should not be used for new applications.)</db:para>
<db:section xml:id="qdeclarativeitem-and-qdeclarativeview">
<db:title>QDeclarativeItem and QDeclarativeView</db:title>
<db:para>When porting to <db:link xlink:href="qquickitem.xml">QQuickItem</db:link>, note that QDeclarativeItem inherited from <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>; in contrast, <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> inherits directly from <db:link xlink:href="qobject.xml">QObject</db:link>, and any <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>-specific functionality is no longer available. In particular, <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> does not have a paint() method for performing custom rendering through the <db:link xlink:href="qpainter.xml">QPainter</db:link> API. Instead, in Qt 5, custom rendering should be performed through the new QSG* classes to take full advantage of the scene graph. See the <db:link xlink:href="topics-graphics.xml#qt-quick-scene-graph">Qt Quick Scene Graph</db:link> documentation details on using these classes.</db:para>
<db:para>Alternatively, the <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> provides a paint() method and can be used as a convenient way to port QDeclarativeItem-based classes that use the <db:link xlink:href="qpainter.xml">QPainter</db:link> API. Note this method is less performant than using the QSG* classes.</db:para>
<db:para>When porting from QDeclarativeView to <db:link xlink:href="qquickview.xml">QQuickView</db:link>, note that QDeclarativeView inherited from <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>. In contrast, <db:link xlink:href="qquickview.xml">QQuickView</db:link> inherits from <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> and uses the <db:link xlink:href="qwindow.xml">QWindow</db:link> infrastructure introduced in Qt 5; any <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>-specific functionality is no longer available.</db:para>
</db:section>
<db:section xml:id="qmlscene-utility">
<db:title>qmlscene Utility</db:title>
<db:para>The qmlviewer tool provided for prototyping and testing QML applications in Qt 4.x has been replaced with the qmlscene tool which integrates with the new scenegraph features in Qt 5.</db:para>
</db:section>
<db:section xml:id="qml-plugins">
<db:title>QML plugins</db:title>
<db:para>All QML plugins should extend <db:link xlink:href="qqmlextensionplugin.xml">QQmlExtensionPlugin</db:link> in Qt 5.</db:para>
<db:para>Additionally, plugins should use the new Qt plugin infrastructure introduced in Qt 5. QML plugins no longer require the Q_EXPORT_PLUGIN2() macro. Instead, they should use the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro within the plugin class declaration.</db:para>
<db:para>See the updated <db:link xlink:href="qtqml-modules-cppplugins.xml">Creating C++ Plugins For QML</db:link> documentation for an overview of creating QML plugins in Qt 5.</db:para>
</db:section>
<db:section xml:id="qtdeclarative-module-in-qt-5">
<db:title>QtDeclarative module in Qt 5</db:title>
<db:para>For the purposes of porting older applications, the QtDeclarative module is still available in Qt 5 but has been renamed to Qt Quick 1. Applications that required Qt Quick 1 specific API (e.g. QDeclarativeView or QDeclarativeItem and the Graphics View integration) can use this module. Note that new applications should use the new <db:link xlink:href="qtqml-index.xml">Qt QML</db:link> and <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> modules instead.</db:para>
<db:para>To use the Qt Quick 1 module, add &quot;declarative&quot; to your qmake .pro file:</db:para>
<db:programlisting language="cpp">QT += declarative
</db:programlisting>
<db:para>Required header files can be included as follows:</db:para>
<db:programlisting language="cpp">#include &lt;QtDeclarative/QDeclarativeView&gt;
#include &lt;QtDeclarative/QDeclarativeItem&gt;
</db:programlisting>
</db:section>
</db:section>
</db:article>
