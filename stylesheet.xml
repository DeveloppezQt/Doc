<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Style Sheets</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="style-reference.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Styles"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="stylesheet-syntax.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="The Style Sheet Syntax"/></db:extendedlink>
<db:abstract>
<db:para>How to use style sheets to customize the appearance of widgets.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Style Sheets are a powerful mechanism that allows you to customize the appearance of widgets, in addition to what is already possible by subclassing <db:link xlink:href="qstyle.xml">QStyle</db:link>. The concepts, terminology, and syntax of Qt Style Sheets are heavily inspired by HTML <db:link xlink:href="http://www.w3.org/Style/CSS/">Cascading Style Sheets (CSS)</db:link> but adapted to the world of widgets.</db:para>
<db:para>Topics:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="stylesheet.xml#overview">Overview</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="stylesheet-syntax.xml">The Style Sheet Syntax</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="stylesheet-designer.xml">Qt Widgets Designer Integration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="stylesheet-customizing.xml">Customizing Qt Widgets Using Style Sheets</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="stylesheet-reference.xml">Qt Style Sheets Reference</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="stylesheet-examples.xml">Qt Style Sheets Examples</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>If Qt Style Sheets are used on the same widget as functions that set the appearance of widgets, such as <db:link xlink:href="qwidget.xml#font-prop">QWidget::setFont</db:link>() or <db:link xlink:href="qtreewidgetitem.xml#setBackground">QTreeWidgetItem::setBackground</db:link>(), style sheets will take precedence if the settings conflict.</db:para>
</db:note>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>Styles sheets are textual specifications that can be set on the whole application using <db:link xlink:href="qapplication.xml#styleSheet-prop">QApplication::setStyleSheet</db:link>() or on a specific widget (and its children) using <db:link xlink:href="qwidget.xml#styleSheet-prop">QWidget::setStyleSheet</db:link>(). If several style sheets are set at different levels, Qt derives the effective style sheet from all of those that are set. This is called cascading.</db:para>
<db:para>For example, the following style sheet specifies that all <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>s should use yellow as their background color, and all <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>es should use red as the text color:</db:para>
<db:programlisting language="cpp">QLineEdit { background: yellow }
QCheckBox { color: red }
</db:programlisting>
<db:para>For this kind of customization, style sheets are much more powerful than <db:link xlink:href="qpalette.xml">QPalette</db:link>. For example, it might be tempting to set the <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Button</db:link> role to red for a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> to obtain a red push button. However, this wasn't guaranteed to work for all styles, because style authors are restricted by the different platforms' guidelines and (on Windows and macOS) by the native theme engine.</db:para>
<db:para>Style sheets let you perform all kinds of customizations that are difficult or impossible to perform using <db:link xlink:href="qpalette.xml">QPalette</db:link> alone. If you want yellow backgrounds for mandatory fields, red text for potentially destructive push buttons, or fancy check boxes, style sheets are the answer.</db:para>
<db:para>Style sheets are applied on top of the current <db:link xlink:href="qstyle.xml">widget style</db:link>, meaning that your applications will look as native as possible, but any style sheet constraints will be taken into consideration. Unlike palette fiddling, style sheets offer guarantees: If you set the background color of a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> to be red, you can be assured that the button will have a red background in all styles, on all platforms. In addition, Qt Widgets Designer provides style sheet integration, making it easy to view the effects of a style sheet in different <db:link xlink:href="qstyle.xml">widget styles</db:link>.</db:para>
<db:para>In addition, style sheets can be used to provide a distinctive look and feel for your application, without having to subclass <db:link xlink:href="qstyle.xml">QStyle</db:link>. For example, you can specify arbitrary images for radio buttons and check boxes to make them stand out. Using this technique, you can also achieve minor customizations that would normally require subclassing several style classes, such as specifying a <db:link xlink:href="qstyle.xml#styleHint">style hint</db:link>.</db:para>
<db:para>When a style sheet is active, the <db:link xlink:href="qstyle.xml">QStyle</db:link> returned by <db:link xlink:href="qwidget.xml#style">QWidget::style</db:link>() is a wrapper &quot;style sheet&quot; style, <db:emphasis>not</db:emphasis> the platform-specific style. The wrapper style ensures that any active style sheet is respected and otherwise forwards the drawing operations to the underlying, platform-specific style (e.g., QWindowsVistaStyle on Windows).</db:para>
<db:para>Since Qt 4.5, Qt style sheets fully supports macOS.</db:para>
</db:section>
</db:article>
