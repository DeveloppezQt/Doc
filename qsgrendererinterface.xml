<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSGRendererInterface Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An interface providing access to some of the graphics API specific internals of the scenegraph.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSGRendererInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Renderer interfaces allow accessing graphics API specific functionality in the scenegraph. Such internals are not typically exposed. However, when integrating custom rendering via <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> for example, it may become necessary to query certain values, for instance the graphics device (e.g. the Direct3D or Vulkan device) that is used by the scenegraph.</db:para>
<db:para><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link>'s functions have varying availability. API and language queries, such as, <db:link xlink:href="qsgrendererinterface.xml#graphicsApi">graphicsApi</db:link>() or <db:link xlink:href="qsgrendererinterface.xml#shaderType">shaderType</db:link>() are always available, meaning it is sufficient to construct a <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> or <db:link xlink:href="qquickview.xml">QQuickView</db:link>, and the graphics API or shading language in use can be queried right after via <db:link xlink:href="qquickwindow.xml#rendererInterface">QQuickWindow::rendererInterface</db:link>(). This guarantees that utilities like the <db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link> QML type are able to report the correct values as early as possible, without having conditional property values - depending on for instance <db:link xlink:href="qsgrendererinterface.xml#shaderType">shaderType</db:link>() - evaluate to unexpected values.</db:para>
<db:para>Engine-specific accessors, like <db:link xlink:href="qsgrendererinterface.xml#getResource">getResource</db:link>(), are however available only after the scenegraph is initialized. Additionally, there may be backend-specific limitations on when such functions can be called. The only way that is guaranteed to succeed is calling them when the rendering of a node (i.e. the preparation of the command list for the next frame) is active. In practice this typically means <db:link xlink:href="qsgrendernode.xml#render">QSGRenderNode::render</db:link>().</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="GraphicsApi-enum">
<db:title>enum QSGRendererInterface::GraphicsApi</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>An unknown graphics API is in use</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::Software</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The Qt Quick 2D Renderer is in use</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::OpenVG</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>OpenVG via EGL</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::OpenGL (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>OpenGL ES 2.0 or higher via a graphics abstraction layer.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::Direct3D11 (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Direct3D 11 via a graphics abstraction layer.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::Direct3D12 (since Qt 6.6)</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Direct3D 12 via a graphics abstraction layer.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::Vulkan (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Vulkan 1.0 via a graphics abstraction layer.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::Metal (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Metal via a graphics abstraction layer.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::Null (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Null (no output) via a graphics abstraction layer.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="RenderMode-enum">
<db:title>enum QSGRendererInterface::RenderMode</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::RenderMode2D</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Normal 2D rendering</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::RenderMode2DNoDepthBuffer</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Normal 2D rendering with depth buffer disabled</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::RenderMode3D</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Scene is rendered as part of a 3D graph</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Resource-enum">
<db:title>enum QSGRendererInterface::Resource</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::DeviceResource</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to the graphics device, when applicable. For example, a <db:code>VkDevice *</db:code>, <db:code>MTLDevice *</db:code> or <db:code>ID3D11Device *</db:code>. Note that with Vulkan the returned value is a pointer to the VkDevice, not the handle itself. This is because Vulkan handles may not be pointers, and may use a different size from the architecture's pointer size so merely casting to/from <db:code>void *</db:code> is wrong.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::CommandQueueResource</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to the graphics command queue used by the scenegraph, when applicable. For example, a <db:code>VkQueue *</db:code> or <db:code>MTLCommandQueue *</db:code>. Note that with Vulkan the returned value is a pointer to the VkQueue, not the handle itself.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::CommandListResource</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to the command list or buffer used by the scenegraph, when applicable. For example, a <db:code>VkCommandBuffer *</db:code> or <db:code>MTLCommandBuffer *</db:code>. This object has limited validity, and is only valid while the scene graph is preparing the next frame. Note that with Vulkan the returned value is a pointer to the VkCommandBuffer, not the handle itself.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::PainterResource</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to the active <db:link xlink:href="qpainter.xml">QPainter</db:link> used by the scenegraph, when running with the software backend.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::RhiResource (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to the <db:link xlink:href="qrhi.xml">QRhi</db:link> instance used by the scenegraph, when applicable.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::RhiSwapchainResource (since Qt 6.0)</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to a QRhiSwapchain instance that is associated with the window. The value is null when the window is used in combination with <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::RhiRedirectCommandBuffer (since Qt 6.0)</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to a <db:link xlink:href="qrhicommandbuffer.xml">QRhiCommandBuffer</db:link> instance that is associated with the window and its <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link>. The value is null when the window is not associated with a <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::RhiRedirectRenderTarget (since Qt 6.0)</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to a <db:link xlink:href="qrhitexturerendertarget.xml">QRhiTextureRenderTarget</db:link> instance that is associated with the window and its <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link>. The value is null when the window is not associated with a <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link>. Note that the value always reflects the main texture render target and it does not depend on the Qt Quick scene, meaning it does not take any additional texture-targeting render passes generated by <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> or <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> layers into account.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::PhysicalDeviceResource (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to the pysical device object used by the scenegraph, when applicable. For example, a <db:code>VkPhysicalDevice *</db:code>. Note that with Vulkan the returned value is a pointer to the VkPhysicalDevice, not the handle itself.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::OpenGLContextResource (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> used by the scenegraph (on the render thread), when applicable.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::DeviceContextResource (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to the device context used by the scenegraph, when applicable. For example, a <db:code>ID3D11DeviceContext *</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::CommandEncoderResource (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to the currently active render command encoder object used by the scenegraph, when applicable. For example, a <db:code>MTLRenderCommandEncoder *</db:code>. This object has limited validity, and is only valid while the scene graph is recording a render pass for the next frame.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::VulkanInstanceResource (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to the <db:link xlink:href="qvulkaninstance.xml">QVulkanInstance</db:link> used by the scenegraph, when applicable.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::RenderPassResource (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to the main render pass used by the scenegraph, describing the color and depth/stecil attachments and how they are used. For example, a <db:code>VkRenderPass *</db:code>. Note that the value always reflects the main render target (either the on-screen window or the texture <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> redirects to) and it does not depend on the Qt Quick scene, meaning it does not take any additional texture-targeting render passes generated by <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> or <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> layers into account.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::RedirectPaintDevice (since Qt 6.4)</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> instance that is associated with the window and its <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link>. The value is null when the window is not associated with a <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::GraphicsQueueFamilyIndexResource (since Qt 6.6)</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to the graphics queue family index used by the scenegraph, when applicable. With Vulkan, this is a pointer to a <db:code>uint32_t</db:code> index value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::GraphicsQueueIndexResource (since Qt 6.6)</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>The resource is a pointer to the graphics queue index (uint32_t) used by the scenegraph, when applicable. With Vulkan, this is a pointer to a <db:code>uint32_t</db:code> index value, which in practice is the index of the VkQueue reported for <db:code>CommandQueueResource</db:code>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ShaderCompilationType-enum">
<db:title>enum QSGRendererInterface::ShaderCompilationType</db:title>
<db:bridgehead renderas="sect2">flags QSGRendererInterface::ShaderCompilationTypes</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::RuntimeCompilation</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Runtime compilation of shader source code is supported</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::OfflineCompilation</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Pre-compiled bytecode supported</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ShaderCompilationTypes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ShaderCompilationType&gt;. </db:code>It stores an OR combination of <db:code>ShaderCompilationType</db:code> values.</db:para>
</db:section>
<db:section xml:id="ShaderSourceType-enum">
<db:title>enum QSGRendererInterface::ShaderSourceType</db:title>
<db:bridgehead renderas="sect2">flags QSGRendererInterface::ShaderSourceTypes</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::ShaderSourceString</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Shader source can be provided as a string in the corresponding properties of <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::ShaderSourceFile</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Local or resource files containing shader source code are supported</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::ShaderByteCode</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Local or resource files containing shader bytecode are supported</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ShaderSourceTypes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ShaderSourceType&gt;. </db:code>It stores an OR combination of <db:code>ShaderSourceType</db:code> values.</db:para>
</db:section>
<db:section xml:id="ShaderType-enum">
<db:title>enum QSGRendererInterface::ShaderType</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::UnknownShadingLanguage</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Not yet known due to no window and scenegraph associated</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::GLSL</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>GLSL or GLSL ES</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::HLSL</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>HLSL</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:emphasis>::RhiShader (since Qt 5.14)</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Consumes <db:link xlink:href="qshader.xml">QShader</db:link> instances containing shader variants for multiple target languages and intermediate formats.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="getResource">
<db:title>[virtual] void *QSGRendererInterface::getResource(QQuickWindow *<db:emphasis>window</db:emphasis>, QSGRendererInterface::Resource <db:emphasis>resource</db:emphasis>) const</db:title>
<db:para>Queries a graphics <db:code role="parameter">resource</db:code> in <db:code role="parameter">window</db:code>. Returns null when the resource in question is not supported or not available.</db:para>
<db:para>When successful, the returned pointer is either a direct pointer to an interface, or a pointer to an opaque handle that needs to be dereferenced first (for example, <db:code>VkDevice dev = *static_cast&lt;VkDevice *&gt;(result)</db:code>). The latter is necessary since such handles may have sizes different from a pointer.</db:para>
<db:note>
<db:para>The ownership of the returned pointer is never transferred to the caller.</db:para>
</db:note>
<db:note>
<db:para>This function must only be called on the render thread.</db:para>
</db:note>
</db:section>
<db:section xml:id="getResource-1">
<db:title>[virtual] void *QSGRendererInterface::getResource(QQuickWindow *<db:emphasis>window</db:emphasis>, const char *<db:emphasis>resource</db:emphasis>) const</db:title>
<db:para>Queries a graphics resource. <db:code role="parameter">resource</db:code> is a backend-specific key. This allows supporting any future resources that are not listed in the Resource enum.</db:para>
<db:note>
<db:para>The ownership of the returned pointer is never transferred to the caller.</db:para>
</db:note>
<db:note>
<db:para>This function must only be called on the render thread.</db:para>
</db:note>
</db:section>
<db:section xml:id="graphicsApi">
<db:title>[pure virtual] QSGRendererInterface::GraphicsApi QSGRendererInterface::graphicsApi() const</db:title>
<db:para>Returns the graphics API that is in use by the Qt Quick scenegraph.</db:para>
<db:note>
<db:para>This function can be called on any thread.</db:para>
</db:note>
</db:section>
<db:section xml:id="isApiRhiBased">
<db:title>[static] bool QSGRendererInterface::isApiRhiBased(QSGRendererInterface::GraphicsApi <db:emphasis>api</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">api</db:code> is based on a graphics abstraction layer (<db:link xlink:href="qrhi.xml">QRhi</db:link>) instead of directly calling the native graphics API.</db:para>
<db:note>
<db:para>This function can be called on any thread.</db:para>
</db:note>
</db:section>
<db:section xml:id="shaderCompilationType">
<db:title>[pure virtual] QSGRendererInterface::ShaderCompilationTypes QSGRendererInterface::shaderCompilationType() const</db:title>
<db:para>Returns a bitmask of the shader compilation approaches supported by the Qt Quick backend the application is using.</db:para>
<db:note>
<db:para>This function can be called on any thread.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-graphicsinfo.xml">QtQuick::GraphicsInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shaderSourceType">
<db:title>[pure virtual] QSGRendererInterface::ShaderSourceTypes QSGRendererInterface::shaderSourceType() const</db:title>
<db:para>Returns a bitmask of the supported ways of providing shader sources in <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> items.</db:para>
<db:note>
<db:para>This function can be called on any thread.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-graphicsinfo.xml">QtQuick::GraphicsInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shaderType">
<db:title>[pure virtual] QSGRendererInterface::ShaderType QSGRendererInterface::shaderType() const</db:title>
<db:para>Returns the shading language supported by the Qt Quick backend the application is using.</db:para>
<db:note>
<db:para>This function can be called on any thread.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-graphicsinfo.xml">QtQuick::GraphicsInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
