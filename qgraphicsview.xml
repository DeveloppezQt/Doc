<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsView Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> class provides a widget for displaying the contents of a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractscrollarea.xml" xlink:role="class">QAbstractScrollArea</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qchartview.xml" xlink:role="class">QChartView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsView is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> visualizes the contents of a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> in a scrollable viewport. To create a scene with geometrical items, see <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>'s documentation. <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> is part of the <db:link xlink:href="graphicsview.xml">Graphics View Framework</db:link>.</db:para>
<db:para>To visualize a scene, you start by constructing a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> object, passing the address of the scene you want to visualize to <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>'s constructor. Alternatively, you can call <db:link xlink:href="qgraphicsview.xml#setScene">setScene</db:link>() to set the scene at a later point. After you call <db:link xlink:href="qwidget.xml#show">show</db:link>(), the view will by default scroll to the center of the scene and display any items that are visible at this point. For example:</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;
scene.addText(&quot;Hello, world!&quot;);

QGraphicsView view(&amp;amp;scene);
view.show();
</db:programlisting>
<db:para>You can explicitly scroll to any position on the scene by using the scroll bars, or by calling <db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>(). By passing a point to <db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>(), <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will scroll its viewport to ensure that the point is centered in the view. An overload is provided for scrolling to a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>, in which case <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will see to that the center of the item is centered in the view. If all you want is to ensure that a certain area is visible, (but not necessarily centered,) you can call <db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>() instead.</db:para>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> can be used to visualize a whole scene, or only parts of it. The visualized area is by default detected automatically when the view is displayed for the first time (by calling <db:link xlink:href="qgraphicsscene.xml#itemsBoundingRect">QGraphicsScene::itemsBoundingRect</db:link>()). To set the visualized area rectangle yourself, you can call <db:link xlink:href="qgraphicsview.xml#sceneRect-prop">setSceneRect</db:link>(). This will adjust the scroll bars' ranges appropriately. Note that although the scene supports a virtually unlimited size, the range of the scroll bars will never exceed the range of an integer (INT_MIN, INT_MAX).</db:para>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> visualizes the scene by calling <db:link xlink:href="qgraphicsview.xml#render">render</db:link>(). By default, the items are drawn onto the viewport by using a regular <db:link xlink:href="qpainter.xml">QPainter</db:link>, and using default render hints. To change the default render hints that <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> passes to <db:link xlink:href="qpainter.xml">QPainter</db:link> when painting items, you can call <db:link xlink:href="qgraphicsview.xml#renderHints-prop">setRenderHints</db:link>().</db:para>
<db:para>By default, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> provides a regular <db:link xlink:href="qwidget.xml">QWidget</db:link> for the viewport widget. You can access this widget by calling <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>(), or you can replace it by calling <db:link xlink:href="qabstractscrollarea.xml#setViewport">setViewport</db:link>(). To render using OpenGL, simply call setViewport(new <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>). <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> takes ownership of the viewport widget.</db:para>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> supports affine transformations, using <db:link xlink:href="qtransform.xml">QTransform</db:link>. You can either pass a matrix to <db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>(), or you can call one of the convenience functions <db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>(), <db:link xlink:href="qgraphicsview.xml#scale">scale</db:link>(), <db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>() or <db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>(). The most two common transformations are scaling, which is used to implement zooming, and rotation. <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> keeps the center of the view fixed during a transformation. Because of the scene alignment (<db:link xlink:href="qgraphicsview.xml#alignment-prop">setAlignment</db:link>()), translating the view will have no visual impact.</db:para>
<db:para>You can interact with the items on the scene by using the mouse and keyboard. <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> translates the mouse and key events into <db:emphasis>scene</db:emphasis> events, (events that inherit <db:link xlink:href="qgraphicssceneevent.xml">QGraphicsSceneEvent</db:link>,), and forward them to the visualized scene. In the end, it's the individual item that handles the events and reacts to them. For example, if you click on a selectable item, the item will typically let the scene know that it has been selected, and it will also redraw itself to display a selection rectangle. Similarly, if you click and drag the mouse to move a movable item, it's the item that handles the mouse moves and moves itself. Item interaction is enabled by default, and you can toggle it by calling <db:link xlink:href="qgraphicsview.xml#interactive-prop">setInteractive</db:link>().</db:para>
<db:para>You can also provide your own custom scene interaction, by creating a subclass of <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>, and reimplementing the mouse and key event handlers. To simplify how you programmatically interact with items in the view, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> provides the mapping functions <db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>() and <db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>(), and the item accessors <db:link xlink:href="qgraphicsview.xml#items">items</db:link>() and <db:link xlink:href="qgraphicsview.xml#itemAt">itemAt</db:link>(). These functions allow you to map points, rectangles, polygons and paths between view coordinates and scene coordinates, and to find items on the scene using view coordinates.</db:para>
<db:para>When using a <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link> as a viewport, stereoscopic rendering is supported. This is done using the same pattern as <db:link xlink:href="qopenglwidget.xml#paintGL">QOpenGLWidget::paintGL</db:link>. To enable it, enable the <db:link xlink:href="qsurfaceformat.xml#FormatOption-enum">QSurfaceFormat::StereoBuffers</db:link> flag. Because of how the flag is handled internally, set <db:link xlink:href="qsurfaceformat.xml#FormatOption-enum">QSurfaceFormat::StereoBuffers</db:link> flag globally before the window is created using <db:link xlink:href="qsurfaceformat.xml#setDefaultFormat">QSurfaceFormat::setDefaultFormat</db:link>(). If the flag is enabled and there is hardware support for stereoscopic rendering, then <db:link xlink:href="qgraphicsview.xml#drawBackground">drawBackground</db:link>() and <db:link xlink:href="qgraphicsview.xml#drawForeground">drawForeground</db:link>() will be triggered twice each frame. Call <db:link xlink:href="qopenglwidget.xml#currentTargetBuffer">QOpenGLWidget::currentTargetBuffer</db:link>() to query which buffer is currently being drawn to.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicsview-view.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>Using an OpenGL viewport limits the ability to use <db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link>. Not all combinations of widgets and styles can be supported with such a setup. You should carefully test your UI and make the necessary adjustments.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicssceneevent.xml">QGraphicsSceneEvent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CacheModeFlag-enum">
<db:title>enum QGraphicsView::CacheModeFlag</db:title>
<db:bridgehead renderas="sect2">flags QGraphicsView::CacheMode</db:bridgehead>
<db:enumsynopsis>
<db:enumname>CacheModeFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>CacheNone</db:enumidentifier>
<db:enumvalue>0x0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CacheBackground</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGraphicsView::CacheMode</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes the flags that you can set for a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>'s cache mode.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::CacheNone</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>All painting is done directly onto the viewport.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::CacheBackground</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>The background is cached. This affects both custom backgrounds, and backgrounds based on the <db:link xlink:href="qgraphicsview.xml#backgroundBrush-prop">backgroundBrush</db:link> property. When this flag is enabled, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will allocate one pixmap with the full size of the viewport.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>CacheMode</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;CacheModeFlag&gt;. </db:code>It stores an OR combination of <db:code>CacheModeFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#cacheMode-prop">cacheMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="DragMode-enum">
<db:title>enum QGraphicsView::DragMode</db:title>
<db:enumsynopsis>
<db:enumname>DragMode</db:enumname>
<db:enumitem>
<db:enumidentifier>NoDrag</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ScrollHandDrag</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RubberBandDrag</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the default action for the view when pressing and dragging the mouse over the viewport.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::NoDrag</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Nothing happens; the mouse event is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::ScrollHandDrag</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The cursor changes into a pointing hand, and dragging the mouse around will scroll the scrolbars. This mode works both in <db:link xlink:href="qgraphicsview.xml#interactive-prop">interactive</db:link> and non-interactive mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::RubberBandDrag</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A rubber band will appear. Dragging the mouse will set the rubber band geometry, and all items covered by the rubber band are selected. This mode is disabled for non-interactive views.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#dragMode-prop">dragMode</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#setSelectionArea">QGraphicsScene::setSelectionArea</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="OptimizationFlag-enum">
<db:title>enum QGraphicsView::OptimizationFlag</db:title>
<db:bridgehead renderas="sect2">flags QGraphicsView::OptimizationFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>OptimizationFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>DontSavePainterState</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DontAdjustForAntialiasing</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IndirectPainting</db:enumidentifier>
<db:enumvalue>0x4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGraphicsView::OptimizationFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes flags that you can enable to improve rendering performance in <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>. By default, none of these flags are set. Note that setting a flag usually imposes a side effect, and this effect can vary between paint devices and platforms.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::DontSavePainterState</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>When rendering, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> protects the painter state (see <db:link xlink:href="qpainter.xml#save">QPainter::save</db:link>()) when rendering the background or foreground, and when rendering each item. This allows you to leave the painter in an altered state (i.e., you can call <db:link xlink:href="qpainter.xml#setPen">QPainter::setPen</db:link>() or <db:link xlink:href="qpainter.xml#setBrush">QPainter::setBrush</db:link>() without restoring the state after painting). However, if the items consistently do restore the state, you should enable this flag to prevent <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> from doing the same.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::DontAdjustForAntialiasing</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>Disables <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>'s antialiasing auto-adjustment of exposed areas. Items that render antialiased lines on the boundaries of their <db:link xlink:href="qgraphicsitem.xml#boundingRect">QGraphicsItem::boundingRect</db:link>() can end up rendering parts of the line outside. To prevent rendering artifacts, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> expands all exposed regions by 2 pixels in all directions. If you enable this flag, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will no longer perform these adjustments, minimizing the areas that require redrawing, which improves performance. A common side effect is that items that do draw with antialiasing can leave painting traces behind on the scene as they are moved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::IndirectPainting</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>Since Qt 4.6, restore the old painting algorithm that calls QGraphicsView::drawItems() and QGraphicsScene::drawItems(). To be used only for compatibility with old code.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>OptimizationFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;OptimizationFlag&gt;. </db:code>It stores an OR combination of <db:code>OptimizationFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="ViewportAnchor-enum">
<db:title>enum QGraphicsView::ViewportAnchor</db:title>
<db:enumsynopsis>
<db:enumname>ViewportAnchor</db:enumname>
<db:enumitem>
<db:enumidentifier>NoAnchor</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnchorViewCenter</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnchorUnderMouse</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enums describe the possible anchors that <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> can use when the user resizes the view or when the view is transformed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::NoAnchor</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No anchor, i.e. the view leaves the scene's position unchanged.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::AnchorViewCenter</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The scene point at the center of the view is used as the anchor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::AnchorUnderMouse</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The point under the mouse is used as the anchor.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#resizeAnchor-prop">resizeAnchor</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#transformationAnchor-prop">transformationAnchor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ViewportUpdateMode-enum">
<db:title>enum QGraphicsView::ViewportUpdateMode</db:title>
<db:enumsynopsis>
<db:enumname>ViewportUpdateMode</db:enumname>
<db:enumitem>
<db:enumidentifier>FullViewportUpdate</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MinimalViewportUpdate</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SmartViewportUpdate</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoViewportUpdate</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BoundingRectViewportUpdate</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes how <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> updates its viewport when the scene contents change or are exposed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::FullViewportUpdate</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>When any visible part of the scene changes or is reexposed, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will update the entire viewport. This approach is fastest when <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> spends more time figuring out what to draw than it would spend drawing (e.g., when very many small items are repeatedly updated). This is the preferred update mode for viewports that do not support partial updates, such as <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>, and for viewports that need to disable scroll optimization.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::MinimalViewportUpdate</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will determine the minimal viewport region that requires a redraw, minimizing the time spent drawing by avoiding a redraw of areas that have not changed. This is <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>'s default mode. Although this approach provides the best performance in general, if there are many small visible changes on the scene, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> might end up spending more time finding the minimal approach than it will spend drawing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::SmartViewportUpdate</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will attempt to find an optimal update mode by analyzing the areas that require a redraw.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::BoundingRectViewportUpdate</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The bounding rectangle of all changes in the viewport will be redrawn. This mode has the advantage that <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> searches only one region for changes, minimizing time spent determining what needs redrawing. The disadvantage is that areas that have not changed also need to be redrawn.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::NoViewportUpdate</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will never update its viewport when the scene changes; the user is expected to control all updates. This mode disables all (potentially slow) item visibility testing in <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>, and is suitable for scenes that either require a fixed frame rate, or where the viewport is otherwise updated externally.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#viewportUpdateMode-prop">viewportUpdateMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="alignment-prop">
<db:title>alignment : Qt::Alignment</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::Alignment</db:type>
<db:varname>alignment</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">alignment</db:synopsisinfo>
<db:synopsisinfo role="setter">setAlignment</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the alignment of the scene in the view when the whole scene is visible.</db:para>
<db:para>If the whole scene is visible in the view, (i.e., there are no visible scroll bars,) the view's alignment will decide where the scene will be rendered in the view. For example, if the alignment is <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignCenter</db:link>, which is default, the scene will be centered in the view, and if the alignment is (<db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link> | <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link>), the scene will be rendered in the top-left corner of the view.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis role="bold">alignment</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAlignment</db:emphasis>(<db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis>alignment</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="backgroundBrush-prop">
<db:title>backgroundBrush : QBrush</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QBrush</db:type>
<db:varname>backgroundBrush</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">backgroundBrush</db:synopsisinfo>
<db:synopsisinfo role="setter">setBackgroundBrush</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the background brush of the scene.</db:para>
<db:para>This property sets the background brush for the scene in this view. It is used to override the scene's own background, and defines the behavior of <db:link xlink:href="qgraphicsview.xml#drawBackground">drawBackground</db:link>(). To provide custom background drawing for this view, you can reimplement <db:link xlink:href="qgraphicsview.xml#drawBackground">drawBackground</db:link>() instead.</db:para>
<db:para>By default, this property contains a brush with the <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::NoBrush</db:link> pattern.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbrush.xml">QBrush</db:link></db:type> <db:emphasis role="bold">backgroundBrush</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBackgroundBrush</db:emphasis>(const <db:type><db:link xlink:href="qbrush.xml">QBrush</db:link></db:type> &amp;<db:emphasis>brush</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#backgroundBrush-prop">QGraphicsScene::backgroundBrush</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#foregroundBrush-prop">foregroundBrush</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cacheMode-prop">
<db:title>cacheMode : CacheMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>CacheMode</db:type>
<db:varname>cacheMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cacheMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setCacheMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds which parts of the view are cached</db:para>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> can cache pre-rendered content in a <db:link xlink:href="qpixmap.xml">QPixmap</db:link>, which is then drawn onto the viewport. The purpose of such caching is to speed up the total rendering time for areas that are slow to render. Texture, gradient and alpha blended backgrounds, for example, can be notibly slow to render; especially with a transformed view. The <db:link xlink:href="qgraphicsview.xml#CacheModeFlag-enum">CacheBackground</db:link> flag enables caching of the view's background. For example:</db:para>
<db:programlisting language="cpp">QGraphicsView view;
view.setBackgroundBrush(QImage(&quot;:/images/backgroundtile.png&quot;));
view.setCacheMode(QGraphicsView::CacheBackground);
</db:programlisting>
<db:para>The cache is invalidated every time the view is transformed. However, when scrolling, only partial invalidation is required.</db:para>
<db:para>By default, nothing is cached.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qgraphicsview.xml#CacheModeFlag-enum">QGraphicsView::CacheMode</db:link></db:type> <db:emphasis role="bold">cacheMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCacheMode</db:emphasis>(<db:type><db:link xlink:href="qgraphicsview.xml#CacheModeFlag-enum">QGraphicsView::CacheMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#resetCachedContent">resetCachedContent</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmapcache.xml">QPixmapCache</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragMode-prop">
<db:title>dragMode : DragMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>DragMode</db:type>
<db:varname>dragMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">dragMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setDragMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the behavior for dragging the mouse over the scene while the left mouse button is pressed.</db:para>
<db:para>This property defines what should happen when the user clicks on the scene background and drags the mouse (e.g., scrolling the viewport contents using a pointing hand cursor, or selecting multiple items with a rubber band). The default value, <db:link xlink:href="qgraphicsview.xml#DragMode-enum">NoDrag</db:link>, does nothing.</db:para>
<db:para>This behavior only affects mouse clicks that are not handled by any item. You can define a custom behavior by creating a subclass of <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> and reimplementing <db:link xlink:href="qgraphicsview.xml#mouseMoveEvent">mouseMoveEvent</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qgraphicsview.xml#DragMode-enum">QGraphicsView::DragMode</db:link></db:type> <db:emphasis role="bold">dragMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDragMode</db:emphasis>(<db:type><db:link xlink:href="qgraphicsview.xml#DragMode-enum">QGraphicsView::DragMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="foregroundBrush-prop">
<db:title>foregroundBrush : QBrush</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QBrush</db:type>
<db:varname>foregroundBrush</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">foregroundBrush</db:synopsisinfo>
<db:synopsisinfo role="setter">setForegroundBrush</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the foreground brush of the scene.</db:para>
<db:para>This property sets the foreground brush for the scene in this view. It is used to override the scene's own foreground, and defines the behavior of <db:link xlink:href="qgraphicsview.xml#drawForeground">drawForeground</db:link>(). To provide custom foreground drawing for this view, you can reimplement <db:link xlink:href="qgraphicsview.xml#drawForeground">drawForeground</db:link>() instead.</db:para>
<db:para>By default, this property contains a brush with the <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::NoBrush</db:link> pattern.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbrush.xml">QBrush</db:link></db:type> <db:emphasis role="bold">foregroundBrush</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setForegroundBrush</db:emphasis>(const <db:type><db:link xlink:href="qbrush.xml">QBrush</db:link></db:type> &amp;<db:emphasis>brush</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#foregroundBrush-prop">QGraphicsScene::foregroundBrush</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#backgroundBrush-prop">backgroundBrush</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="interactive-prop">
<db:title>interactive : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>interactive</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isInteractive</db:synopsisinfo>
<db:synopsisinfo role="setter">setInteractive</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the view allows scene interaction.</db:para>
<db:para>If enabled, this view is set to allow scene interaction. Otherwise, this view will not allow interaction, and any mouse or key events are ignored (i.e., it will act as a read-only view).</db:para>
<db:para>By default, this property is <db:code>true</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isInteractive</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setInteractive</db:emphasis>(<db:type>bool</db:type> <db:emphasis>allowed</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="optimizationFlags-prop">
<db:title>optimizationFlags : OptimizationFlags</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>OptimizationFlags</db:type>
<db:varname>optimizationFlags</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">optimizationFlags</db:synopsisinfo>
<db:synopsisinfo role="setter">setOptimizationFlags</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>flags that can be used to tune <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>'s performance.</db:para>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> uses clipping, extra bounding rect adjustments, and certain other aids to improve rendering quality and performance for the common case graphics scene. However, depending on the target platform, the scene, and the viewport in use, some of these operations can degrade performance.</db:para>
<db:para>The effect varies from flag to flag; see the <db:link xlink:href="qgraphicsview.xml#OptimizationFlag-enum">OptimizationFlags</db:link> documentation for details.</db:para>
<db:para>By default, no optimization flags are enabled.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qgraphicsview.xml#OptimizationFlag-enum">QGraphicsView::OptimizationFlags</db:link></db:type> <db:emphasis role="bold">optimizationFlags</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOptimizationFlags</db:emphasis>(<db:type><db:link xlink:href="qgraphicsview.xml#OptimizationFlag-enum">QGraphicsView::OptimizationFlags</db:link></db:type> <db:emphasis>flags</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setOptimizationFlag">setOptimizationFlag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderHints-prop">
<db:title>renderHints : QPainter::RenderHints</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPainter::RenderHints</db:type>
<db:varname>renderHints</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">renderHints</db:synopsisinfo>
<db:synopsisinfo role="setter">setRenderHints</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the default render hints for the view</db:para>
<db:para>These hints are used to initialize <db:link xlink:href="qpainter.xml">QPainter</db:link> before each visible item is drawn. <db:link xlink:href="qpainter.xml">QPainter</db:link> uses render hints to toggle rendering features such as antialiasing and smooth pixmap transformation.</db:para>
<db:para><db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::TextAntialiasing</db:link> is enabled by default.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;
scene.addRect(QRectF(-10, -10, 20, 20));

QGraphicsView view(&amp;amp;scene);
view.setRenderHints(QPainter::Antialiasing | QPainter::SmoothPixmapTransform);
view.show();
</db:programlisting>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::RenderHints</db:link></db:type> <db:emphasis role="bold">renderHints</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRenderHints</db:emphasis>(<db:type><db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::RenderHints</db:link></db:type> <db:emphasis>hints</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="resizeAnchor-prop">
<db:title>resizeAnchor : ViewportAnchor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ViewportAnchor</db:type>
<db:varname>resizeAnchor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">resizeAnchor</db:synopsisinfo>
<db:synopsisinfo role="setter">setResizeAnchor</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>how the view should position the scene when the view is resized.</db:para>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> uses this property to decide how to position the scene in the viewport when the viewport widget's size changes. The default behavior, <db:link xlink:href="qgraphicsview.xml#ViewportAnchor-enum">NoAnchor</db:link>, leaves the scene's position unchanged during a resize; the top-left corner of the view will appear to be anchored while resizing.</db:para>
<db:para>Note that the effect of this property is noticeable when only a part of the scene is visible (i.e., when there are scroll bars). Otherwise, if the whole scene fits in the view, <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> uses the view <db:link xlink:href="stylesheet-reference.xml#alignment">alignment</db:link> to position the scene in the view.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qgraphicsview.xml#ViewportAnchor-enum">QGraphicsView::ViewportAnchor</db:link></db:type> <db:emphasis role="bold">resizeAnchor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setResizeAnchor</db:emphasis>(<db:type><db:link xlink:href="qgraphicsview.xml#ViewportAnchor-enum">QGraphicsView::ViewportAnchor</db:link></db:type> <db:emphasis>anchor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="stylesheet-reference.xml#alignment">alignment</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#transformationAnchor-prop">transformationAnchor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rubberBandSelectionMode-prop">
<db:title>rubberBandSelectionMode : Qt::ItemSelectionMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::ItemSelectionMode</db:type>
<db:varname>rubberBandSelectionMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">rubberBandSelectionMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setRubberBandSelectionMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the behavior for selecting items with a rubber band selection rectangle.</db:para>
<db:para>This property defines how items are selected when using the <db:link xlink:href="qgraphicsview.xml#DragMode-enum">RubberBandDrag</db:link> drag mode.</db:para>
<db:para>The default value is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>; all items whose shape intersects with or is contained by the rubber band are selected.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::ItemSelectionMode</db:link></db:type> <db:emphasis role="bold">rubberBandSelectionMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRubberBandSelectionMode</db:emphasis>(<db:type><db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::ItemSelectionMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#dragMode-prop">dragMode</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#items">items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rubberBandRect">rubberBandRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sceneRect-prop">
<db:title>sceneRect : QRectF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRectF</db:type>
<db:varname>sceneRect</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sceneRect</db:synopsisinfo>
<db:synopsisinfo role="setter">setSceneRect</db:synopsisinfo>
<db:synopsisinfo role="setter">setSceneRect</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the area of the scene visualized by this view.</db:para>
<db:para>The scene rectangle defines the extent of the scene, and in the view's case, this means the area of the scene that you can navigate using the scroll bars.</db:para>
<db:para>If unset, or if a null <db:link xlink:href="qrectf.xml">QRectF</db:link> is set, this property has the same value as <db:link xlink:href="qgraphicsscene.xml#sceneRect-prop">QGraphicsScene::sceneRect</db:link>, and it changes with <db:link xlink:href="qgraphicsscene.xml#sceneRect-prop">QGraphicsScene::sceneRect</db:link>. Otherwise, the view's scene rect is unaffected by the scene.</db:para>
<db:para>Note that, although the scene supports a virtually unlimited size, the range of the scroll bars will never exceed the range of an integer (INT_MIN, INT_MAX). When the scene is larger than the scroll bars' values, you can choose to use <db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>() to navigate the scene instead.</db:para>
<db:para>By default, this property contains a rectangle at the origin with zero width and height.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> <db:emphasis role="bold">sceneRect</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSceneRect</db:emphasis>(const <db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> &amp;<db:emphasis>rect</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSceneRect</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>x</db:emphasis>, <db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>y</db:emphasis>, <db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>w</db:emphasis>, <db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>h</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#sceneRect-prop">QGraphicsScene::sceneRect</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transformationAnchor-prop">
<db:title>transformationAnchor : ViewportAnchor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ViewportAnchor</db:type>
<db:varname>transformationAnchor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">transformationAnchor</db:synopsisinfo>
<db:synopsisinfo role="setter">setTransformationAnchor</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>how the view should position the scene during transformations.</db:para>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> uses this property to decide how to position the scene in the viewport when the transformation matrix changes, and the coordinate system of the view is transformed. The default behavior, <db:link xlink:href="qgraphicsview.xml#ViewportAnchor-enum">AnchorViewCenter</db:link>, ensures that the scene point at the center of the view remains unchanged during transformations (e.g., when rotating, the scene will appear to rotate around the center of the view).</db:para>
<db:para>Note that the effect of this property is noticeable when only a part of the scene is visible (i.e., when there are scroll bars). Otherwise, if the whole scene fits in the view, <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> uses the view <db:link xlink:href="stylesheet-reference.xml#alignment">alignment</db:link> to position the scene in the view.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qgraphicsview.xml#ViewportAnchor-enum">QGraphicsView::ViewportAnchor</db:link></db:type> <db:emphasis role="bold">transformationAnchor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTransformationAnchor</db:emphasis>(<db:type><db:link xlink:href="qgraphicsview.xml#ViewportAnchor-enum">QGraphicsView::ViewportAnchor</db:link></db:type> <db:emphasis>anchor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="stylesheet-reference.xml#alignment">alignment</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#resizeAnchor-prop">resizeAnchor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewportUpdateMode-prop">
<db:title>viewportUpdateMode : ViewportUpdateMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ViewportUpdateMode</db:type>
<db:varname>viewportUpdateMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">viewportUpdateMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setViewportUpdateMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>how the viewport should update its contents.</db:para>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> uses this property to decide how to update areas of the scene that have been reexposed or changed. Usually you do not need to modify this property, but there are some cases where doing so can improve rendering performance. See the <db:link xlink:href="qgraphicsview.xml#ViewportUpdateMode-enum">ViewportUpdateMode</db:link> documentation for specific details.</db:para>
<db:para>The default value is <db:link xlink:href="qgraphicsview.xml#ViewportUpdateMode-enum">MinimalViewportUpdate</db:link>, where <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will update as small an area of the viewport as possible when the contents change.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qgraphicsview.xml#ViewportUpdateMode-enum">QGraphicsView::ViewportUpdateMode</db:link></db:type> <db:emphasis role="bold">viewportUpdateMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setViewportUpdateMode</db:emphasis>(<db:type><db:link xlink:href="qgraphicsview.xml#ViewportUpdateMode-enum">QGraphicsView::ViewportUpdateMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#ViewportUpdateMode-enum">ViewportUpdateMode</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#cacheMode-prop">cacheMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsView">
<db:title>QGraphicsView::QGraphicsView(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGraphicsView</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsView(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qwidget.xml">QWidget</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="QGraphicsView-1">
<db:title>QGraphicsView::QGraphicsView(QGraphicsScene *<db:emphasis>scene</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGraphicsView</db:methodname>
<db:methodparam>
<db:type>QGraphicsScene *</db:type>
<db:parameter>scene</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsView(QGraphicsScene *scene, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> and sets the visualized scene to <db:code role="parameter">scene</db:code>. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qwidget.xml">QWidget</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QGraphicsView">
<db:title>[virtual] QGraphicsView::~QGraphicsView()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGraphicsView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGraphicsView()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> object.</db:para>
</db:section>
<db:section xml:id="centerOn">
<db:title>void QGraphicsView::centerOn(const QPointF &amp;<db:emphasis>pos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>centerOn</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void centerOn(const QPointF &amp;pos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scrolls the contents of the viewport to ensure that the scene coordinate <db:code role="parameter">pos</db:code>, is centered in the view.</db:para>
<db:para>Because <db:code role="parameter">pos</db:code> is a floating point coordinate, and the scroll bars operate on integer coordinates, the centering is only an approximation.</db:para>
<db:note>
<db:para>If the item is close to or outside the border, it will be visible in the view, but not centered.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="centerOn-1">
<db:title>void QGraphicsView::centerOn(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>centerOn</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void centerOn(qreal x, qreal y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>(<db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="centerOn-2">
<db:title>void QGraphicsView::centerOn(const QGraphicsItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>centerOn</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void centerOn(const QGraphicsItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Scrolls the contents of the viewport to ensure that <db:code role="parameter">item</db:code> is centered in the view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QGraphicsView::contextMenuEvent(QContextMenuEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>contextMenuEvent</db:methodname>
<db:methodparam>
<db:type>QContextMenuEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void contextMenuEvent(QContextMenuEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#contextMenuEvent" role="function">QAbstractScrollArea::contextMenuEvent(QContextMenuEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[override virtual protected] void QGraphicsView::dragEnterEvent(QDragEnterEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragEnterEvent</db:methodname>
<db:methodparam>
<db:type>QDragEnterEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragEnterEvent(QDragEnterEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragEnterEvent" role="function">QAbstractScrollArea::dragEnterEvent(QDragEnterEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QGraphicsView::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragLeaveEvent</db:methodname>
<db:methodparam>
<db:type>QDragLeaveEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragLeaveEvent(QDragLeaveEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragLeaveEvent" role="function">QAbstractScrollArea::dragLeaveEvent(QDragLeaveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QGraphicsView::dragMoveEvent(QDragMoveEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragMoveEvent</db:methodname>
<db:methodparam>
<db:type>QDragMoveEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragMoveEvent(QDragMoveEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragMoveEvent" role="function">QAbstractScrollArea::dragMoveEvent(QDragMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawBackground">
<db:title>[virtual protected] void QGraphicsView::drawBackground(QPainter *<db:emphasis>painter</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawBackground</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawBackground(QPainter *painter, const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the background of the scene using <db:code role="parameter">painter</db:code>, before any items and the foreground are drawn. Reimplement this function to provide a custom background for this view.</db:para>
<db:para>If all you want is to define a color, texture or gradient for the background, you can call <db:link xlink:href="qgraphicsview.xml#backgroundBrush-prop">setBackgroundBrush</db:link>() instead.</db:para>
<db:para>All painting is done in <db:emphasis>scene</db:emphasis> coordinates. <db:code role="parameter">rect</db:code> is the exposed rectangle.</db:para>
<db:para>The default implementation fills <db:code role="parameter">rect</db:code> using the view's <db:link xlink:href="qgraphicsview.xml#backgroundBrush-prop">backgroundBrush</db:link>. If no such brush is defined (the default), the scene's drawBackground() function is called instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#drawForeground">drawForeground</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#drawBackground">QGraphicsScene::drawBackground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawForeground">
<db:title>[virtual protected] void QGraphicsView::drawForeground(QPainter *<db:emphasis>painter</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawForeground</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawForeground(QPainter *painter, const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the foreground of the scene using <db:code role="parameter">painter</db:code>, after the background and all items are drawn. Reimplement this function to provide a custom foreground for this view.</db:para>
<db:para>If all you want is to define a color, texture or gradient for the foreground, you can call <db:link xlink:href="qgraphicsview.xml#foregroundBrush-prop">setForegroundBrush</db:link>() instead.</db:para>
<db:para>All painting is done in <db:emphasis>scene</db:emphasis> coordinates. <db:code role="parameter">rect</db:code> is the exposed rectangle.</db:para>
<db:para>The default implementation fills <db:code role="parameter">rect</db:code> using the view's <db:link xlink:href="qgraphicsview.xml#foregroundBrush-prop">foregroundBrush</db:link>. If no such brush is defined (the default), the scene's drawForeground() function is called instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#drawBackground">drawBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#drawForeground">QGraphicsScene::drawForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QGraphicsView::dropEvent(QDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dropEvent</db:methodname>
<db:methodparam>
<db:type>QDropEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dropEvent(QDropEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dropEvent" role="function">QAbstractScrollArea::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="ensureVisible">
<db:title>void QGraphicsView::ensureVisible(const QRectF &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>xmargin</db:emphasis> = 50, int <db:emphasis>ymargin</db:emphasis> = 50)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ensureVisible</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>xmargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>ymargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void ensureVisible(const QRectF &amp;rect, int xmargin, int ymargin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scrolls the contents of the viewport so that the scene rectangle <db:code role="parameter">rect</db:code> is visible, with margins specified in pixels by <db:code role="parameter">xmargin</db:code> and <db:code role="parameter">ymargin</db:code>. If the specified rect cannot be reached, the contents are scrolled to the nearest valid position. The default value for both margins is 50 pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ensureVisible-1">
<db:title>void QGraphicsView::ensureVisible(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>, int <db:emphasis>xmargin</db:emphasis> = 50, int <db:emphasis>ymargin</db:emphasis> = 50)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ensureVisible</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>xmargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>ymargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void ensureVisible(qreal x, qreal y, qreal w, qreal h, int xmargin, int ymargin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>), <db:code role="parameter">xmargin</db:code>, <db:code role="parameter">ymargin</db:code>).</db:para>
</db:section>
<db:section xml:id="ensureVisible-2">
<db:title>void QGraphicsView::ensureVisible(const QGraphicsItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>xmargin</db:emphasis> = 50, int <db:emphasis>ymargin</db:emphasis> = 50)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ensureVisible</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>xmargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>ymargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void ensureVisible(const QGraphicsItem *item, int xmargin, int ymargin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Scrolls the contents of the viewport so that the center of item <db:code role="parameter">item</db:code> is visible, with margins specified in pixels by <db:code role="parameter">xmargin</db:code> and <db:code role="parameter">ymargin</db:code>. If the specified point cannot be reached, the contents are scrolled to the nearest valid position. The default value for both margins is 50 pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QGraphicsView::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#event" role="function">QAbstractScrollArea::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="fitInView">
<db:title>void QGraphicsView::fitInView(const QRectF &amp;<db:emphasis>rect</db:emphasis>, Qt::AspectRatioMode <db:emphasis>aspectRatioMode</db:emphasis> = Qt::IgnoreAspectRatio)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fitInView</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::AspectRatioMode</db:type>
<db:parameter>aspectRatioMode</db:parameter>
<db:initializer>Qt::IgnoreAspectRatio</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fitInView(const QRectF &amp;rect, Qt::AspectRatioMode aspectRatioMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scales the view matrix and scrolls the scroll bars to ensure that the scene rectangle <db:code role="parameter">rect</db:code> fits inside the viewport. <db:code role="parameter">rect</db:code> must be inside the scene rect; otherwise, fitInView() cannot guarantee that the whole rect is visible.</db:para>
<db:para>This function keeps the view's rotation, translation, or shear. The view is scaled according to <db:code role="parameter">aspectRatioMode</db:code>. <db:code role="parameter">rect</db:code> will be centered in the view if it does not fit tightly.</db:para>
<db:para>It's common to call fitInView() from inside a reimplementation of <db:link xlink:href="qgraphicsview.xml#resizeEvent">resizeEvent</db:link>(), to ensure that the whole scene, or parts of the scene, scales automatically to fit the new size of the viewport as the view is resized. Note though, that calling fitInView() from inside <db:link xlink:href="qgraphicsview.xml#resizeEvent">resizeEvent</db:link>() can lead to unwanted resize recursion, if the new transformation toggles the automatic state of the scrollbars. You can toggle the scrollbar policies to always on or always off to prevent this (see <db:link xlink:href="qabstractscrollarea.xml#horizontalScrollBarPolicy-prop">horizontalScrollBarPolicy</db:link>() and <db:link xlink:href="qabstractscrollarea.xml#verticalScrollBarPolicy-prop">verticalScrollBarPolicy</db:link>()).</db:para>
<db:para>If <db:code role="parameter">rect</db:code> is empty, or if the viewport is too small, this function will do nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fitInView-1">
<db:title>void QGraphicsView::fitInView(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>, Qt::AspectRatioMode <db:emphasis>aspectRatioMode</db:emphasis> = Qt::IgnoreAspectRatio)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fitInView</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::AspectRatioMode</db:type>
<db:parameter>aspectRatioMode</db:parameter>
<db:initializer>Qt::IgnoreAspectRatio</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void fitInView(qreal x, qreal y, qreal w, qreal h, Qt::AspectRatioMode aspectRatioMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsview.xml#fitInView">fitInView</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>), <db:code role="parameter">aspectRatioMode</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fitInView-2">
<db:title>void QGraphicsView::fitInView(const QGraphicsItem *<db:emphasis>item</db:emphasis>, Qt::AspectRatioMode <db:emphasis>aspectRatioMode</db:emphasis> = Qt::IgnoreAspectRatio)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fitInView</db:methodname>
<db:methodparam>
<db:type>const QGraphicsItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::AspectRatioMode</db:type>
<db:parameter>aspectRatioMode</db:parameter>
<db:initializer>Qt::IgnoreAspectRatio</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void fitInView(const QGraphicsItem *item, Qt::AspectRatioMode aspectRatioMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Ensures that <db:code role="parameter">item</db:code> fits tightly inside the view, scaling the view according to <db:code role="parameter">aspectRatioMode</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QGraphicsView::focusInEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusInEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusInEvent(QFocusEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[override virtual protected] bool QGraphicsView::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>focusNextPrevChild</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>next</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool focusNextPrevChild(bool next) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusNextPrevChild" role="function">QWidget::focusNextPrevChild(bool next)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QGraphicsView::focusOutEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusOutEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusOutEvent(QFocusEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="inputMethodEvent">
<db:title>[override virtual protected] void QGraphicsView::inputMethodEvent(QInputMethodEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>inputMethodEvent</db:methodname>
<db:methodparam>
<db:type>QInputMethodEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void inputMethodEvent(QInputMethodEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodEvent" role="function">QWidget::inputMethodEvent(QInputMethodEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="inputMethodQuery">
<db:title>[override virtual] QVariant QGraphicsView::inputMethodQuery(Qt::InputMethodQuery <db:emphasis>query</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>inputMethodQuery</db:methodname>
<db:methodparam>
<db:type>Qt::InputMethodQuery</db:type>
<db:parameter>query</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant inputMethodQuery(Qt::InputMethodQuery query) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodQuery" role="function">QWidget::inputMethodQuery(Qt::InputMethodQuery query) const</db:link>.</db:para>
</db:section>
<db:section xml:id="invalidateScene">
<db:title>void QGraphicsView::invalidateScene(const QRectF &amp;<db:emphasis>rect</db:emphasis> = QRectF(), QGraphicsScene::SceneLayers <db:emphasis>layers</db:emphasis> = QGraphicsScene::AllLayers)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>invalidateScene</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
<db:initializer>QRectF()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGraphicsScene::SceneLayers</db:type>
<db:parameter>layers</db:parameter>
<db:initializer>QGraphicsScene::AllLayers</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void invalidateScene(const QRectF &amp;rect, QGraphicsScene::SceneLayers layers)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Invalidates and schedules a redraw of <db:code role="parameter">layers</db:code> inside <db:code role="parameter">rect</db:code>. <db:code role="parameter">rect</db:code> is in scene coordinates. Any cached content for <db:code role="parameter">layers</db:code> inside <db:code role="parameter">rect</db:code> is unconditionally invalidated and redrawn.</db:para>
<db:para>You can call this function to notify <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> of changes to the background or the foreground of the scene. It is commonly used for scenes with tile-based backgrounds to notify changes when <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> has enabled background caching.</db:para>
<db:para>Note that <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> currently supports background caching only (see <db:link xlink:href="qgraphicsview.xml#CacheModeFlag-enum">QGraphicsView::CacheBackground</db:link>). This function is equivalent to calling <db:link xlink:href="qwidget.xml#update">update</db:link>() if any layer but <db:link xlink:href="qgraphicsscene.xml#SceneLayer-enum">QGraphicsScene::BackgroundLayer</db:link> is passed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#invalidate">QGraphicsScene::invalidate</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#update">update</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isTransformed">
<db:title>bool QGraphicsView::isTransformed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isTransformed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isTransformed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the view is transformed (i.e., a non-identity transform has been assigned, or the scrollbars are adjusted).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractscrollarea.xml#horizontalScrollBar">horizontalScrollBar</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractscrollarea.xml#verticalScrollBar">verticalScrollBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemAt">
<db:title>QGraphicsItem *QGraphicsView::itemAt(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsItem *</db:type>
<db:methodname>itemAt</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItem * itemAt(const QPoint &amp;pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item at position <db:code role="parameter">pos</db:code>, which is in viewport coordinates. If there are several items at this position, this function returns the topmost item.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void CustomView::mousePressEvent(QMouseEvent *event)
{
    if (QGraphicsItem *item = itemAt(event-&amp;gt;pos())) {
        qDebug() &amp;lt;&amp;lt; &quot;You clicked on item&quot; &amp;lt;&amp;lt; item;
    } else {
        qDebug(&quot;You didn't click on an item.&quot;);
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#items">items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemAt-1">
<db:title>QGraphicsItem *QGraphicsView::itemAt(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsItem *</db:type>
<db:methodname>itemAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsItem * itemAt(int x, int y) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#itemAt">itemAt</db:link>(<db:link xlink:href="qpoint.xml">QPoint</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="items">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsView::items() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGraphicsItem *&gt;</db:type>
<db:methodname>items</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGraphicsItem *&gt; items() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all the items in the associated scene, in descending stacking order (i.e., the first item in the returned list is the uppermost item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#items">QGraphicsScene::items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items-1">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsView::items(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGraphicsItem *&gt;</db:type>
<db:methodname>items</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGraphicsItem *&gt; items(const QPoint &amp;pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all the items at the position <db:code role="parameter">pos</db:code> in the view. The items are listed in descending stacking order (i.e., the first item in the list is the uppermost item, and the last item is the lowermost item). <db:code role="parameter">pos</db:code> is in viewport coordinates.</db:para>
<db:para>This function is most commonly called from within mouse event handlers in a subclass in <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>. <db:code role="parameter">pos</db:code> is in untransformed viewport coordinates, just like QMouseEvent::pos().</db:para>
<db:programlisting language="cpp">void CustomView::mousePressEvent(QMouseEvent *event)
{
    qDebug() &amp;lt;&amp;lt; &quot;There are&quot; &amp;lt;&amp;lt; items(event-&amp;gt;pos()).size()
             &amp;lt;&amp;lt; &quot;items at position&quot; &amp;lt;&amp;lt; mapToScene(event-&amp;gt;pos());
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#items">QGraphicsScene::items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items-2">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsView::items(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGraphicsItem *&gt;</db:type>
<db:methodname>items</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGraphicsItem *&gt; items(int x, int y) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is provided for convenience. It's equivalent to calling items(<db:link xlink:href="qpoint.xml">QPoint</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="items-3">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsView::items(const QRect &amp;<db:emphasis>rect</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGraphicsItem *&gt;</db:type>
<db:methodname>items</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ItemSelectionMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::IntersectsItemShape</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGraphicsItem *&gt; items(const QRect &amp;rect, Qt::ItemSelectionMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of all the items that, depending on <db:code role="parameter">mode</db:code>, are either contained by or intersect with <db:code role="parameter">rect</db:code>. <db:code role="parameter">rect</db:code> is in viewport coordinates.</db:para>
<db:para>The default value for <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>; all items whose exact shape intersects with or is contained by <db:code role="parameter">rect</db:code> are returned.</db:para>
<db:para>The items are sorted in descending stacking order (i.e., the first item in the returned list is the uppermost item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#items">items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items-4">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsView::items(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGraphicsItem *&gt;</db:type>
<db:methodname>items</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ItemSelectionMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::IntersectsItemShape</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGraphicsItem *&gt; items(int x, int y, int w, int h, Qt::ItemSelectionMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling items(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>), <db:code role="parameter">mode</db:code>).</db:para>
</db:section>
<db:section xml:id="items-5">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsView::items(const QPolygon &amp;<db:emphasis>polygon</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGraphicsItem *&gt;</db:type>
<db:methodname>items</db:methodname>
<db:methodparam>
<db:type>const QPolygon &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ItemSelectionMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::IntersectsItemShape</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGraphicsItem *&gt; items(const QPolygon &amp;polygon, Qt::ItemSelectionMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of all the items that, depending on <db:code role="parameter">mode</db:code>, are either contained by or intersect with <db:code role="parameter">polygon</db:code>. <db:code role="parameter">polygon</db:code> is in viewport coordinates.</db:para>
<db:para>The default value for <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>; all items whose exact shape intersects with or is contained by <db:code role="parameter">polygon</db:code> are returned.</db:para>
<db:para>The items are sorted by descending stacking order (i.e., the first item in the returned list is the uppermost item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#items">items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items-6">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsView::items(const QPainterPath &amp;<db:emphasis>path</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGraphicsItem *&gt;</db:type>
<db:methodname>items</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ItemSelectionMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::IntersectsItemShape</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGraphicsItem *&gt; items(const QPainterPath &amp;path, Qt::ItemSelectionMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of all the items that, depending on <db:code role="parameter">mode</db:code>, are either contained by or intersect with <db:code role="parameter">path</db:code>. <db:code role="parameter">path</db:code> is in viewport coordinates.</db:para>
<db:para>The default value for <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>; all items whose exact shape intersects with or is contained by <db:code role="parameter">path</db:code> are returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#items">items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QGraphicsView::keyPressEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyPressEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyPressEvent(QKeyEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#keyPressEvent" role="function">QAbstractScrollArea::keyPressEvent(QKeyEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[override virtual protected] void QGraphicsView::keyReleaseEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyReleaseEvent(QKeyEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyReleaseEvent" role="function">QWidget::keyReleaseEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mapFromScene">
<db:title>QPoint QGraphicsView::mapFromScene(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>mapFromScene</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint mapFromScene(const QPointF &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scene coordinate <db:code role="parameter">point</db:code> to viewport coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromScene-1">
<db:title>QPolygon QGraphicsView::mapFromScene(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygon</db:type>
<db:methodname>mapFromScene</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygon mapFromScene(const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scene rectangle <db:code role="parameter">rect</db:code> to a viewport coordinate polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromScene-2">
<db:title>QPolygon QGraphicsView::mapFromScene(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygon</db:type>
<db:methodname>mapFromScene</db:methodname>
<db:methodparam>
<db:type>const QPolygonF &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygon mapFromScene(const QPolygonF &amp;polygon) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scene coordinate polygon <db:code role="parameter">polygon</db:code> to a viewport coordinate polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromScene-3">
<db:title>QPainterPath QGraphicsView::mapFromScene(const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>mapFromScene</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath mapFromScene(const QPainterPath &amp;path) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scene coordinate painter path <db:code role="parameter">path</db:code> to a viewport coordinate painter path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromScene-4">
<db:title>QPoint QGraphicsView::mapFromScene(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>mapFromScene</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint mapFromScene(qreal x, qreal y) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>(<db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapFromScene-5">
<db:title>QPolygon QGraphicsView::mapFromScene(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygon</db:type>
<db:methodname>mapFromScene</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygon mapFromScene(qreal x, qreal y, qreal w, qreal h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapToScene">
<db:title>QPointF QGraphicsView::mapToScene(const QPoint &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapToScene</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapToScene(const QPoint &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the viewport coordinate <db:code role="parameter">point</db:code> mapped to scene coordinates.</db:para>
<db:para>Note: It can be useful to map the whole rectangle covered by the pixel at <db:code role="parameter">point</db:code> instead of the point itself. To do this, you can call mapToScene(<db:link xlink:href="qrect.xml">QRect</db:link>(<db:code role="parameter">point</db:code>, <db:link xlink:href="qsize.xml">QSize</db:link>(2, 2))).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToScene-1">
<db:title>QPolygonF QGraphicsView::mapToScene(const QRect &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapToScene</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapToScene(const QRect &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the viewport rectangle <db:code role="parameter">rect</db:code> mapped to a scene coordinate polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToScene-2">
<db:title>QPolygonF QGraphicsView::mapToScene(const QPolygon &amp;<db:emphasis>polygon</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapToScene</db:methodname>
<db:methodparam>
<db:type>const QPolygon &amp;</db:type>
<db:parameter>polygon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapToScene(const QPolygon &amp;polygon) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the viewport polygon <db:code role="parameter">polygon</db:code> mapped to a scene coordinate polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToScene-3">
<db:title>QPainterPath QGraphicsView::mapToScene(const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>mapToScene</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath mapToScene(const QPainterPath &amp;path) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the viewport painter path <db:code role="parameter">path</db:code> mapped to a scene coordinate painter path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToScene-4">
<db:title>QPointF QGraphicsView::mapToScene(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapToScene</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapToScene(int x, int y) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>(<db:link xlink:href="qpoint.xml">QPoint</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapToScene-5">
<db:title>QPolygonF QGraphicsView::mapToScene(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPolygonF</db:type>
<db:methodname>mapToScene</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolygonF mapToScene(int x, int y, int w, int h) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>(<db:link xlink:href="qrect.xml">QRect</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QGraphicsView::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseDoubleClickEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseDoubleClickEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseDoubleClickEvent" role="function">QAbstractScrollArea::mouseDoubleClickEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QGraphicsView::mouseMoveEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseMoveEvent" role="function">QAbstractScrollArea::mouseMoveEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QGraphicsView::mousePressEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mousePressEvent" role="function">QAbstractScrollArea::mousePressEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QGraphicsView::mouseReleaseEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseReleaseEvent" role="function">QAbstractScrollArea::mouseReleaseEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QGraphicsView::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#paintEvent" role="function">QAbstractScrollArea::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="render">
<db:title>void QGraphicsView::render(QPainter *<db:emphasis>painter</db:emphasis>, const QRectF &amp;<db:emphasis>target</db:emphasis> = QRectF(), const QRect &amp;<db:emphasis>source</db:emphasis> = QRect(), Qt::AspectRatioMode <db:emphasis>aspectRatioMode</db:emphasis> = Qt::KeepAspectRatio)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>render</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>target</db:parameter>
<db:initializer>QRectF()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>source</db:parameter>
<db:initializer>QRect()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::AspectRatioMode</db:type>
<db:parameter>aspectRatioMode</db:parameter>
<db:initializer>Qt::KeepAspectRatio</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void render(QPainter *painter, const QRectF &amp;target, const QRect &amp;source, Qt::AspectRatioMode aspectRatioMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renders the <db:code role="parameter">source</db:code> rect, which is in view coordinates, from the scene into <db:code role="parameter">target</db:code>, which is in paint device coordinates, using <db:code role="parameter">painter</db:code>. This function is useful for capturing the contents of the view onto a paint device, such as a <db:link xlink:href="qimage.xml">QImage</db:link> (e.g., to take a screenshot), or for printing to <db:link xlink:href="qprinter.xml">QPrinter</db:link>. For example:</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;
scene.addItem(...
...

QGraphicsView view(&amp;amp;scene);
view.show();
...

QPrinter printer(QPrinter::HighResolution);
printer.setPageSize(QPrinter::A4);
QPainter painter(&amp;amp;printer);

// print, fitting the viewport contents into a full page
view.render(&amp;amp;painter);

// print the upper half of the viewport into the lower.
// half of the page.
QRect viewport = view.viewport()-&amp;gt;rect();
view.render(&amp;amp;painter,
            QRectF(0, printer.height() / 2,
                   printer.width(), printer.height() / 2),
            viewport.adjusted(0, 0, 0, -viewport.height() / 2));
</db:programlisting>
<db:para>If <db:code role="parameter">source</db:code> is a null rect, this function will use <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>()-&gt;<db:link xlink:href="qwidget.xml#rect-prop">rect</db:link>() to determine what to draw. If <db:code role="parameter">target</db:code> is a null rect, the full dimensions of <db:code role="parameter">painter</db:code>'s paint device (e.g., for a <db:link xlink:href="qprinter.xml">QPrinter</db:link>, the page size) will be used.</db:para>
<db:para>The source rect contents will be transformed according to <db:code role="parameter">aspectRatioMode</db:code> to fit into the target rect. By default, the aspect ratio is kept, and <db:code role="parameter">source</db:code> is scaled to fit in <db:code role="parameter">target</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#render">QGraphicsScene::render</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetCachedContent">
<db:title>void QGraphicsView::resetCachedContent()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resetCachedContent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resetCachedContent()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets any cached content. Calling this function will clear <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>'s cache. If the current cache mode is <db:link xlink:href="qgraphicsview.xml#CacheModeFlag-enum">CacheNone</db:link>, this function does nothing.</db:para>
<db:para>This function is called automatically for you when the <db:link xlink:href="qgraphicsview.xml#backgroundBrush-prop">backgroundBrush</db:link> or <db:link xlink:href="qgraphicsscene.xml#backgroundBrush-prop">QGraphicsScene::backgroundBrush</db:link> properties change; you only need to call this function if you have reimplemented <db:link xlink:href="qgraphicsscene.xml#drawBackground">QGraphicsScene::drawBackground</db:link>() or <db:link xlink:href="qgraphicsview.xml#drawBackground">QGraphicsView::drawBackground</db:link>() to draw a custom background, and need to trigger a full redraw.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#cacheMode-prop">cacheMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetTransform">
<db:title>void QGraphicsView::resetTransform()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resetTransform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resetTransform()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the view transformation to the identity matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QGraphicsView::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#resizeEvent" role="function">QAbstractScrollArea::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="rotate">
<db:title>void QGraphicsView::rotate(qreal <db:emphasis>angle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rotate</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>angle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rotate(qreal angle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Rotates the current view transformation <db:code role="parameter">angle</db:code> degrees clockwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rubberBandChanged">
<db:title>void QGraphicsView::rubberBandChanged(QRect <db:emphasis>rubberBandRect</db:emphasis>, QPointF <db:emphasis>fromScenePoint</db:emphasis>, QPointF <db:emphasis>toScenePoint</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rubberBandChanged</db:methodname>
<db:methodparam>
<db:type>QRect</db:type>
<db:parameter>rubberBandRect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPointF</db:type>
<db:parameter>fromScenePoint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPointF</db:type>
<db:parameter>toScenePoint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rubberBandChanged(QRect rubberBandRect, QPointF fromScenePoint, QPointF toScenePoint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the rubber band rect is changed. The viewport Rect is specified by <db:code role="parameter">rubberBandRect</db:code>. The drag start position and drag end position are provided in scene points with <db:code role="parameter">fromScenePoint</db:code> and <db:code role="parameter">toScenePoint</db:code>.</db:para>
<db:para>When rubberband selection ends this signal will be emitted with null vales.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#rubberBandRect">rubberBandRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rubberBandRect">
<db:title>QRect QGraphicsView::rubberBandRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>rubberBandRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect rubberBandRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This functions returns the current rubber band area (in viewport coordinates) if the user is currently doing an itemselection with rubber band. When the user is not using the rubber band this functions returns (a null) QRectF().</db:para>
<db:para>Notice that part of this <db:link xlink:href="qrect.xml">QRect</db:link> can be outise the visual viewport. It can e.g contain negative values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#rubberBandSelectionMode-prop">rubberBandSelectionMode</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rubberBandChanged">rubberBandChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scale">
<db:title>void QGraphicsView::scale(qreal <db:emphasis>sx</db:emphasis>, qreal <db:emphasis>sy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scale</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>sx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>sy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scale(qreal sx, qreal sy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scales the current view transformation by (<db:code role="parameter">sx</db:code>, <db:code role="parameter">sy</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scene">
<db:title>QGraphicsScene *QGraphicsView::scene() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsScene *</db:type>
<db:methodname>scene</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsScene * scene() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the scene that is currently visualized in the view. If no scene is currently visualized, <db:code>nullptr</db:code> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setScene">setScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scrollContentsBy">
<db:title>[override virtual protected] void QGraphicsView::scrollContentsBy(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>scrollContentsBy</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scrollContentsBy(int dx, int dy) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#scrollContentsBy" role="function">QAbstractScrollArea::scrollContentsBy(int dx, int dy)</db:link>.</db:para>
</db:section>
<db:section xml:id="setOptimizationFlag">
<db:title>void QGraphicsView::setOptimizationFlag(QGraphicsView::OptimizationFlag <db:emphasis>flag</db:emphasis>, bool <db:emphasis>enabled</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOptimizationFlag</db:methodname>
<db:methodparam>
<db:type>QGraphicsView::OptimizationFlag</db:type>
<db:parameter>flag</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOptimizationFlag(QGraphicsView::OptimizationFlag flag, bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables <db:code role="parameter">flag</db:code> if <db:code role="parameter">enabled</db:code> is true; otherwise disables <db:code role="parameter">flag</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#optimizationFlags-prop">optimizationFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRenderHint">
<db:title>void QGraphicsView::setRenderHint(QPainter::RenderHint <db:emphasis>hint</db:emphasis>, bool <db:emphasis>enabled</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRenderHint</db:methodname>
<db:methodparam>
<db:type>QPainter::RenderHint</db:type>
<db:parameter>hint</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRenderHint(QPainter::RenderHint hint, bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enabled</db:code> is true, the render hint <db:code role="parameter">hint</db:code> is enabled; otherwise it is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#renderHints-prop">renderHints</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScene">
<db:title>void QGraphicsView::setScene(QGraphicsScene *<db:emphasis>scene</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setScene</db:methodname>
<db:methodparam>
<db:type>QGraphicsScene *</db:type>
<db:parameter>scene</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setScene(QGraphicsScene *scene)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current scene to <db:code role="parameter">scene</db:code>. If <db:code role="parameter">scene</db:code> is already being viewed, this function does nothing.</db:para>
<db:para>When a scene is set on a view, the <db:link xlink:href="qgraphicsscene.xml#changed">QGraphicsScene::changed</db:link>() signal is automatically connected to this view's <db:link xlink:href="qgraphicsview.xml#updateScene">updateScene</db:link>() slot, and the view's scroll bars are adjusted to fit the size of the scene.</db:para>
<db:para>The view does not take ownership of <db:code role="parameter">scene</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#scene">scene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransform">
<db:title>void QGraphicsView::setTransform(const QTransform &amp;<db:emphasis>matrix</db:emphasis>, bool <db:emphasis>combine</db:emphasis> = false)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransform</db:methodname>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>combine</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransform(const QTransform &amp;matrix, bool combine)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the view's current transformation matrix to <db:code role="parameter">matrix</db:code>.</db:para>
<db:para>If <db:code role="parameter">combine</db:code> is true, then <db:code role="parameter">matrix</db:code> is combined with the current matrix; otherwise, <db:code role="parameter">matrix</db:code> <db:emphasis>replaces</db:emphasis> the current matrix. <db:code role="parameter">combine</db:code> is false by default.</db:para>
<db:para>The transformation matrix transforms the scene into view coordinates. Using the default transformation, provided by the identity matrix, one pixel in the view represents one unit in the scene (e.g., a 10x10 rectangular item is drawn using 10x10 pixels in the view). If a 2x2 scaling matrix is applied, the scene will be drawn in 1:2 (e.g., a 10x10 rectangular item is then drawn using 20x20 pixels in the view).</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;
scene.addText(&quot;GraphicsView rotated clockwise&quot;);

QGraphicsView view(&amp;amp;scene);
view.rotate(90); // the text is rendered with a 90 degree clockwise rotation
view.show();
</db:programlisting>
<db:para>To simplify interaction with items using a transformed view, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> provides mapTo... and mapFrom... functions that can translate between scene and view coordinates. For example, you can call <db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>() to map a view coordinate to a floating point scene coordinate, or <db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>() to map from floating point scene coordinates to view coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#resetTransform">resetTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setupViewport">
<db:title>[override virtual protected] void QGraphicsView::setupViewport(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setupViewport</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setupViewport(QWidget *widget) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#setupViewport" role="function">QAbstractScrollArea::setupViewport(QWidget *viewport)</db:link>.</db:para>
<db:para>This slot is called by <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> after <db:link xlink:href="qabstractscrollarea.xml#setViewport">setViewport</db:link>() has been called. Reimplement this function in a subclass of <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> to initialize the new viewport <db:code role="parameter">widget</db:code> before it is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#setViewport">setViewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shear">
<db:title>void QGraphicsView::shear(qreal <db:emphasis>sh</db:emphasis>, qreal <db:emphasis>sv</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>shear</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>sh</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>sv</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void shear(qreal sh, qreal sv)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shears the current view transformation by (<db:code role="parameter">sh</db:code>, <db:code role="parameter">sv</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QGraphicsView::showEvent(QShowEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>showEvent</db:methodname>
<db:methodparam>
<db:type>QShowEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showEvent(QShowEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QGraphicsView::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#sizeHint" role="function">QAbstractScrollArea::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="transform">
<db:title>QTransform QGraphicsView::transform() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>transform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform transform() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current transformation matrix for the view. If no current transformation is set, the identity matrix is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate">
<db:title>void QGraphicsView::translate(qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(qreal dx, qreal dy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Translates the current view transformation by (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateScene">
<db:title>void QGraphicsView::updateScene(const QList&lt;QRectF&gt; &amp;<db:emphasis>rects</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>updateScene</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QRectF&gt; &amp;</db:type>
<db:parameter>rects</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateScene(const QList&lt;QRectF&gt; &amp;rects)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Schedules an update of the scene rectangles <db:code role="parameter">rects</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#changed">QGraphicsScene::changed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateSceneRect">
<db:title>void QGraphicsView::updateSceneRect(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>updateSceneRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateSceneRect(const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Notifies <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> that the scene's scene rect has changed. <db:code role="parameter">rect</db:code> is the new scene rect. If the view already has an explicitly set scene rect, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#sceneRect-prop">sceneRect</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#sceneRectChanged">QGraphicsScene::sceneRectChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewportEvent">
<db:title>[override virtual protected] bool QGraphicsView::viewportEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>viewportEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool viewportEvent(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#viewportEvent" role="function">QAbstractScrollArea::viewportEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="viewportTransform">
<db:title>QTransform QGraphicsView::viewportTransform() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>viewportTransform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform viewportTransform() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a matrix that maps scene coordinates to viewport coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QGraphicsView::wheelEvent(QWheelEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>wheelEvent</db:methodname>
<db:methodparam>
<db:type>QWheelEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void wheelEvent(QWheelEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#wheelEvent" role="function">QAbstractScrollArea::wheelEvent(QWheelEvent *e)</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QGraphicsView</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="drawItems">
<db:title>[virtual protected] void QGraphicsView::drawItems(QPainter *<db:emphasis>painter</db:emphasis>, int <db:emphasis>numItems</db:emphasis>, QGraphicsItem *[] <db:emphasis>items</db:emphasis>, const QStyleOptionGraphicsItem[] <db:emphasis>options</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawItems</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>numItems</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGraphicsItem *[]</db:type>
<db:parameter>items</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOptionGraphicsItem[]</db:type>
<db:parameter>options</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawItems(QPainter *painter, int numItems, QGraphicsItem *[] items, const QStyleOptionGraphicsItem[] options)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Draws the items <db:code role="parameter">items</db:code> in the scene using <db:code role="parameter">painter</db:code>, after the background and before the foreground are drawn. <db:code role="parameter">numItems</db:code> is the number of items in <db:code role="parameter">items</db:code> and options in <db:code role="parameter">options</db:code>. <db:code role="parameter">options</db:code> is a list of styleoptions; one for each item. Reimplement this function to provide custom item drawing for this view.</db:para>
<db:para>The default implementation calls the scene's drawItems() function.</db:para>
<db:para>Since Qt 4.6, this function is not called anymore unless the <db:link xlink:href="qgraphicsview.xml#OptimizationFlag-enum">QGraphicsView::IndirectPainting</db:link> flag is given as an Optimization flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#drawForeground">drawForeground</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#drawBackground">drawBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#drawItems">QGraphicsScene::drawItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
