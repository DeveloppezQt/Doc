<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QGraphicsView Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> class provides a widget for displaying the contents of a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractscrollarea.xml" xlink:role="class">QAbstractScrollArea</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsView is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> visualizes the contents of a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> in a scrollable viewport. To create a scene with geometrical items, see <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>'s documentation. <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> is part of the <db:link xlink:href="graphicsview.xml">Graphics View Framework</db:link>.</db:para>
<db:para>To visualize a scene, you start by constructing a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> object, passing the address of the scene you want to visualize to <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>'s constructor. Alternatively, you can call <db:link xlink:href="qgraphicsview.xml#setScene">setScene</db:link>() to set the scene at a later point. After you call <db:link xlink:href="qwidget.xml#show">show</db:link>(), the view will by default scroll to the center of the scene and display any items that are visible at this point. For example:</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;
scene.addText(&quot;Hello, world!&quot;);

QGraphicsView view(&amp;scene);
view.show();
</db:programlisting>
<db:para>You can explicitly scroll to any position on the scene by using the scroll bars, or by calling <db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>(). By passing a point to <db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>(), <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will scroll its viewport to ensure that the point is centered in the view. An overload is provided for scrolling to a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>, in which case <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will see to that the center of the item is centered in the view. If all you want is to ensure that a certain area is visible, (but not necessarily centered,) you can call <db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>() instead.</db:para>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> can be used to visualize a whole scene, or only parts of it. The visualized area is by default detected automatically when the view is displayed for the first time (by calling <db:link xlink:href="qgraphicsscene.xml#itemsBoundingRect">QGraphicsScene::itemsBoundingRect</db:link>()). To set the visualized area rectangle yourself, you can call setSceneRect(). This will adjust the scroll bars' ranges appropriately. Note that although the scene supports a virtually unlimited size, the range of the scroll bars will never exceed the range of an integer (INT_MIN, INT_MAX).</db:para>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> visualizes the scene by calling <db:link xlink:href="qgraphicsview.xml#render">render</db:link>(). By default, the items are drawn onto the viewport by using a regular <db:link xlink:href="qpainter.xml">QPainter</db:link>, and using default render hints. To change the default render hints that <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> passes to <db:link xlink:href="qpainter.xml">QPainter</db:link> when painting items, you can call setRenderHints().</db:para>
<db:para>By default, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> provides a regular <db:link xlink:href="qwidget.xml">QWidget</db:link> for the viewport widget. You can access this widget by calling <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>(), or you can replace it by calling <db:link xlink:href="qabstractscrollarea.xml#setViewport">setViewport</db:link>(). To render using OpenGL, simply call setViewport(new <db:link xlink:href="qglwidget.xml">QGLWidget</db:link>). <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> takes ownership of the viewport widget.</db:para>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> supports affine transformations, using <db:link xlink:href="qtransform.xml">QTransform</db:link>. You can either pass a matrix to <db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>(), or you can call one of the convenience functions <db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>(), <db:link xlink:href="qgraphicsview.xml#scale">scale</db:link>(), <db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>() or <db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>(). The most two common transformations are scaling, which is used to implement zooming, and rotation. <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> keeps the center of the view fixed during a transformation. Because of the scene alignment (setAligment()), translating the view will have no visual impact.</db:para>
<db:para>You can interact with the items on the scene by using the mouse and keyboard. <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> translates the mouse and key events into <db:emphasis>scene</db:emphasis> events, (events that inherit <db:link xlink:href="qgraphicssceneevent.xml">QGraphicsSceneEvent</db:link>,), and forward them to the visualized scene. In the end, it's the individual item that handles the events and reacts to them. For example, if you click on a selectable item, the item will typically let the scene know that it has been selected, and it will also redraw itself to display a selection rectangle. Similiary, if you click and drag the mouse to move a movable item, it's the item that handles the mouse moves and moves itself. Item interaction is enabled by default, and you can toggle it by calling setInteractive().</db:para>
<db:para>You can also provide your own custom scene interaction, by creating a subclass of <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>, and reimplementing the mouse and key event handlers. To simplify how you programmatically interact with items in the view, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> provides the mapping functions <db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>() and <db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>(), and the item accessors <db:link xlink:href="qgraphicsview.xml#items">items</db:link>() and <db:link xlink:href="qgraphicsview.xml#itemAt">itemAt</db:link>(). These functions allow you to map points, rectangles, polygons and paths between view coordinates and scene coordinates, and to find items on the scene using view coordinates.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicsview-view.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicssceneevent.xml">QGraphicsSceneEvent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CacheModeFlag-enum">
<db:title>enum QGraphicsView::CacheModeFlag</db:title>
<db:bridgehead renderas="sect2">flags QGraphicsView::CacheMode</db:bridgehead>
<db:para>This enum describes the flags that you can set for a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>'s cache mode.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::CacheNone</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>All painting is done directly onto the viewport.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::CacheBackground</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>The background is cached. This affects both custom backgrounds, and backgrounds based on the backgroundBrush property. When this flag is enabled, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will allocate one pixmap with the full size of the viewport.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>CacheMode</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;CacheModeFlag&gt;. </db:code>It stores an OR combination of <db:code>CacheModeFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>cacheMode</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="DragMode-enum">
<db:title>enum QGraphicsView::DragMode</db:title>
<db:para>This enum describes the default action for the view when pressing and dragging the mouse over the viewport.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::NoDrag</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Nothing happens; the mouse event is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::ScrollHandDrag</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The cursor changes into a pointing hand, and dragging the mouse around will scroll the scrolbars. This mode works both in interactive and non-interactive mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::RubberBandDrag</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A rubber band will appear. Dragging the mouse will set the rubber band geometry, and all items covered by the rubber band are selected. This mode is disabled for non-interactive views.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>dragMode</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#setSelectionArea">QGraphicsScene::setSelectionArea</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="OptimizationFlag-enum">
<db:title>[since 4.3] enum QGraphicsView::OptimizationFlag</db:title>
<db:bridgehead renderas="sect2">flags QGraphicsView::OptimizationFlags</db:bridgehead>
<db:para>This enum describes flags that you can enable to improve rendering performance in <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>. By default, none of these flags are set. Note that setting a flag usually imposes a side effect, and this effect can vary between paint devices and platforms.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::DontClipPainter</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>This value is obsolete and has no effect.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::DontSavePainterState</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>When rendering, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> protects the painter state (see <db:link xlink:href="qpainter.xml#save">QPainter::save</db:link>()) when rendering the background or foreground, and when rendering each item. This allows you to leave the painter in an altered state (i.e., you can call <db:link xlink:href="qpainter.xml#setPen">QPainter::setPen</db:link>() or <db:link xlink:href="qpainter.xml#setBrush">QPainter::setBrush</db:link>() without restoring the state after painting). However, if the items consistently do restore the state, you should enable this flag to prevent <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> from doing the same.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::DontAdjustForAntialiasing</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>Disables <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>'s antialiasing auto-adjustment of exposed areas. Items that render antialiased lines on the boundaries of their <db:link xlink:href="qgraphicsitem.xml#boundingRect">QGraphicsItem::boundingRect</db:link>() can end up rendering parts of the line outside. To prevent rendering artifacts, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> expands all exposed regions by 2 pixels in all directions. If you enable this flag, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will no longer perform these adjustments, minimizing the areas that require redrawing, which improves performance. A common side effect is that items that do draw with antialiasing can leave painting traces behind on the scene as they are moved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::IndirectPainting</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>Since Qt 4.6, restore the old painting algorithm that calls QGraphicsView::drawItems() and QGraphicsScene::drawItems(). To be used only for compatibility with old code.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.3.</db:para>
<db:para>The <db:code>OptimizationFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;OptimizationFlag&gt;. </db:code>It stores an OR combination of <db:code>OptimizationFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="ViewportAnchor-enum">
<db:title>enum QGraphicsView::ViewportAnchor</db:title>
<db:para>This enums describe the possible anchors that <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> can use when the user resizes the view or when the view is transformed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::NoAnchor</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No anchor, i.e. the view leaves the scene's position unchanged.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::AnchorViewCenter</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The scene point at the center of the view is used as the anchor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::AnchorUnderMouse</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The point under the mouse is used as the anchor.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>resizeAnchor</db:member>
<db:member>transformationAnchor</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ViewportUpdateMode-enum">
<db:title>[since 4.3] enum QGraphicsView::ViewportUpdateMode</db:title>
<db:para>This enum describes how <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> updates its viewport when the scene contents change or are exposed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::FullViewportUpdate</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>When any visible part of the scene changes or is reexposed, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will update the entire viewport. This approach is fastest when <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> spends more time figuring out what to draw than it would spend drawing (e.g., when very many small items are repeatedly updated). This is the preferred update mode for viewports that do not support partial updates, such as <db:link xlink:href="qglwidget.xml">QGLWidget</db:link>, and for viewports that need to disable scroll optimization.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::MinimalViewportUpdate</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will determine the minimal viewport region that requires a redraw, minimizing the time spent drawing by avoiding a redraw of areas that have not changed. This is <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>'s default mode. Although this approach provides the best performance in general, if there are many small visible changes on the scene, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> might end up spending more time finding the minimal approach than it will spend drawing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::SmartViewportUpdate</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will attempt to find an optimal update mode by analyzing the areas that require a redraw.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::BoundingRectViewportUpdate</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The bounding rectangle of all changes in the viewport will be redrawn. This mode has the advantage that <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> searches only one region for changes, minimizing time spent determining what needs redrawing. The disadvantage is that areas that have not changed also need to be redrawn.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:emphasis>::NoViewportUpdate</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> will never update its viewport when the scene changes; the user is expected to control all updates. This mode disables all (potentially slow) item visibility testing in <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>, and is suitable for scenes that either require a fixed frame rate, or where the viewport is otherwise updated externally.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>viewportUpdateMode</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsView">
<db:title>QGraphicsView::QGraphicsView(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qwidget.xml">QWidget</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="QGraphicsView-1">
<db:title>QGraphicsView::QGraphicsView(QGraphicsScene *<db:emphasis>scene</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> and sets the visualized scene to <db:code role="parameter">scene</db:code>. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qwidget.xml">QWidget</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QGraphicsView">
<db:title>[virtual noexcept] QGraphicsView::~QGraphicsView()</db:title>
<db:para>Destructs the <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> object.</db:para>
</db:section>
<db:section xml:id="centerOn">
<db:title>void QGraphicsView::centerOn(const QPointF &amp;<db:emphasis>pos</db:emphasis>)</db:title>
<db:para>Scrolls the contents of the viewport to ensure that the scene coordinate <db:code role="parameter">pos</db:code>, is centered in the view.</db:para>
<db:para>Because <db:code role="parameter">pos</db:code> is a floating point coordinate, and the scroll bars operate on integer coordinates, the centering is only an approximation.</db:para>
<db:note>
<db:para>If the item is close to or outside the border, it will be visible in the view, but not centered.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="centerOn-1">
<db:title>void QGraphicsView::centerOn(const QGraphicsItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Scrolls the contents of the viewport to ensure that <db:code role="parameter">item</db:code> is centered in the view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="centerOn-2">
<db:title>void QGraphicsView::centerOn(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>(<db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QGraphicsView::contextMenuEvent(QContextMenuEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#contextMenuEvent" role="function">QAbstractScrollArea::contextMenuEvent(QContextMenuEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[override virtual protected] void QGraphicsView::dragEnterEvent(QDragEnterEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragEnterEvent" role="function">QAbstractScrollArea::dragEnterEvent(QDragEnterEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QGraphicsView::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragLeaveEvent" role="function">QAbstractScrollArea::dragLeaveEvent(QDragLeaveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QGraphicsView::dragMoveEvent(QDragMoveEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragMoveEvent" role="function">QAbstractScrollArea::dragMoveEvent(QDragMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="drawBackground">
<db:title>[virtual protected] void QGraphicsView::drawBackground(QPainter *<db:emphasis>painter</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>Draws the background of the scene using <db:code role="parameter">painter</db:code>, before any items and the foreground are drawn. Reimplement this function to provide a custom background for this view.</db:para>
<db:para>If all you want is to define a color, texture or gradient for the background, you can call setBackgroundBrush() instead.</db:para>
<db:para>All painting is done in <db:emphasis>scene</db:emphasis> coordinates. <db:code role="parameter">rect</db:code> is the exposed rectangle.</db:para>
<db:para>The default implementation fills <db:code role="parameter">rect</db:code> using the view's backgroundBrush. If no such brush is defined (the default), the scene's drawBackground() function is called instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#drawForeground">drawForeground</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#drawBackground">QGraphicsScene::drawBackground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawForeground">
<db:title>[virtual protected] void QGraphicsView::drawForeground(QPainter *<db:emphasis>painter</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>Draws the foreground of the scene using <db:code role="parameter">painter</db:code>, after the background and all items are drawn. Reimplement this function to provide a custom foreground for this view.</db:para>
<db:para>If all you want is to define a color, texture or gradient for the foreground, you can call setForegroundBrush() instead.</db:para>
<db:para>All painting is done in <db:emphasis>scene</db:emphasis> coordinates. <db:code role="parameter">rect</db:code> is the exposed rectangle.</db:para>
<db:para>The default implementation fills <db:code role="parameter">rect</db:code> using the view's foregroundBrush. If no such brush is defined (the default), the scene's drawForeground() function is called instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#drawBackground">drawBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#drawForeground">QGraphicsScene::drawForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QGraphicsView::dropEvent(QDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dropEvent" role="function">QAbstractScrollArea::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="ensureVisible">
<db:title>void QGraphicsView::ensureVisible(const QRectF &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>xmargin</db:emphasis> = 50, int <db:emphasis>ymargin</db:emphasis> = 50)</db:title>
<db:para>Scrolls the contents of the viewport so that the scene rectangle <db:code role="parameter">rect</db:code> is visible, with margins specified in pixels by <db:code role="parameter">xmargin</db:code> and <db:code role="parameter">ymargin</db:code>. If the specified rect cannot be reached, the contents are scrolled to the nearest valid position. The default value for both margins is 50 pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ensureVisible-1">
<db:title>void QGraphicsView::ensureVisible(const QGraphicsItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>xmargin</db:emphasis> = 50, int <db:emphasis>ymargin</db:emphasis> = 50)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Scrolls the contents of the viewport so that the center of item <db:code role="parameter">item</db:code> is visible, with margins specified in pixels by <db:code role="parameter">xmargin</db:code> and <db:code role="parameter">ymargin</db:code>. If the specified point cannot be reached, the contents are scrolled to the nearest valid position. The default value for both margins is 50 pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ensureVisible-2">
<db:title>void QGraphicsView::ensureVisible(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>, int <db:emphasis>xmargin</db:emphasis> = 50, int <db:emphasis>ymargin</db:emphasis> = 50)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>), <db:code role="parameter">xmargin</db:code>, <db:code role="parameter">ymargin</db:code>).</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QGraphicsView::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#event" role="function">QAbstractScrollArea::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="fitInView">
<db:title>void QGraphicsView::fitInView(const QRectF &amp;<db:emphasis>rect</db:emphasis>, Qt::AspectRatioMode <db:emphasis>aspectRatioMode</db:emphasis> = Qt::IgnoreAspectRatio)</db:title>
<db:para>Scales the view matrix and scrolls the scroll bars to ensure that the scene rectangle <db:code role="parameter">rect</db:code> fits inside the viewport. <db:code role="parameter">rect</db:code> must be inside the scene rect; otherwise, fitInView() cannot guarantee that the whole rect is visible.</db:para>
<db:para>This function keeps the view's rotation, translation, or shear. The view is scaled according to <db:code role="parameter">aspectRatioMode</db:code>. <db:code role="parameter">rect</db:code> will be centered in the view if it does not fit tightly.</db:para>
<db:para>It's common to call fitInView() from inside a reimplementation of <db:link xlink:href="qgraphicsview.xml#resizeEvent">resizeEvent</db:link>(), to ensure that the whole scene, or parts of the scene, scales automatically to fit the new size of the viewport as the view is resized. Note though, that calling fitInView() from inside <db:link xlink:href="qgraphicsview.xml#resizeEvent">resizeEvent</db:link>() can lead to unwanted resize recursion, if the new transformation toggles the automatic state of the scrollbars. You can toggle the scrollbar policies to always on or always off to prevent this (see horizontalScrollBarPolicy() and verticalScrollBarPolicy()).</db:para>
<db:para>If <db:code role="parameter">rect</db:code> is empty, or if the viewport is too small, this function will do nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fitInView-1">
<db:title>void QGraphicsView::fitInView(const QGraphicsItem *<db:emphasis>item</db:emphasis>, Qt::AspectRatioMode <db:emphasis>aspectRatioMode</db:emphasis> = Qt::IgnoreAspectRatio)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Ensures that <db:code role="parameter">item</db:code> fits tightly inside the view, scaling the view according to <db:code role="parameter">aspectRatioMode</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fitInView-2">
<db:title>void QGraphicsView::fitInView(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>, Qt::AspectRatioMode <db:emphasis>aspectRatioMode</db:emphasis> = Qt::IgnoreAspectRatio)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsview.xml#fitInView">fitInView</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>), <db:code role="parameter">aspectRatioMode</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#ensureVisible">ensureVisible</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#centerOn">centerOn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QGraphicsView::focusInEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[override virtual protected] bool QGraphicsView::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusNextPrevChild" role="function">QWidget::focusNextPrevChild(bool next)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QGraphicsView::focusOutEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="inputMethodEvent">
<db:title>[override virtual protected] void QGraphicsView::inputMethodEvent(QInputMethodEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodEvent" role="function">QWidget::inputMethodEvent(QInputMethodEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="inputMethodQuery">
<db:title>[override virtual] QVariant QGraphicsView::inputMethodQuery(Qt::InputMethodQuery <db:emphasis>query</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodQuery" role="function">QWidget::inputMethodQuery(Qt::InputMethodQuery query) const</db:link>.</db:para>
</db:section>
<db:section xml:id="invalidateScene">
<db:title>void QGraphicsView::invalidateScene(const QRectF &amp;<db:emphasis>rect</db:emphasis> = QRectF(), QGraphicsScene::SceneLayers <db:emphasis>layers</db:emphasis> = QGraphicsScene::AllLayers)</db:title>
<db:para>Invalidates and schedules a redraw of <db:code role="parameter">layers</db:code> inside <db:code role="parameter">rect</db:code>. <db:code role="parameter">rect</db:code> is in scene coordinates. Any cached content for <db:code role="parameter">layers</db:code> inside <db:code role="parameter">rect</db:code> is unconditionally invalidated and redrawn.</db:para>
<db:para>You can call this function to notify <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> of changes to the background or the foreground of the scene. It is commonly used for scenes with tile-based backgrounds to notify changes when <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> has enabled background caching.</db:para>
<db:para>Note that <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> currently supports background caching only (see <db:link xlink:href="qgraphicsview.xml#CacheModeFlag-enum">QGraphicsView::CacheBackground</db:link>). This function is equivalent to calling <db:link xlink:href="qwidget.xml#update">update</db:link>() if any layer but <db:link xlink:href="qgraphicsscene.xml#SceneLayer-enum">QGraphicsScene::BackgroundLayer</db:link> is passed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#invalidate">QGraphicsScene::invalidate</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#update">update</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isTransformed">
<db:title>[since 4.6] bool QGraphicsView::isTransformed() const</db:title>
<db:para>Returns true if the view is transformed (i.e., a non-identity transform has been assigned, or the scrollbars are adjusted).</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractscrollarea.xml#horizontalScrollBar">horizontalScrollBar</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractscrollarea.xml#verticalScrollBar">verticalScrollBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemAt">
<db:title>QGraphicsItem *QGraphicsView::itemAt(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Returns the item at position <db:code role="parameter">pos</db:code>, which is in viewport coordinates. If there are several items at this position, this function returns the topmost item.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void CustomView::mousePressEvent(QMouseEvent *event)
{
    if (QGraphicsItem *item = itemAt(event-&gt;pos())) {
        qDebug() &lt;&lt; &quot;You clicked on item&quot; &lt;&lt; item;
    } else {
        qDebug() &lt;&lt; &quot;You didn't click on an item.&quot;;
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#items">items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemAt-1">
<db:title>QGraphicsItem *QGraphicsView::itemAt(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#itemAt">itemAt</db:link>(<db:link xlink:href="qpoint.xml">QPoint</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="items">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsView::items() const</db:title>
<db:para>Returns a list of all the items in the associated scene, in descending stacking order (i.e., the first item in the returned list is the uppermost item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#items">QGraphicsScene::items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items-1">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsView::items(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Returns a list of all the items at the position <db:code role="parameter">pos</db:code> in the view. The items are listed in descending stacking order (i.e., the first item in the list is the uppermost item, and the last item is the lowermost item). <db:code role="parameter">pos</db:code> is in viewport coordinates.</db:para>
<db:para>This function is most commonly called from within mouse event handlers in a subclass in <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>. <db:code role="parameter">pos</db:code> is in untransformed viewport coordinates, just like <db:link xlink:href="qmouseevent.xml#pos">QMouseEvent::pos</db:link>().</db:para>
<db:programlisting language="cpp">void CustomView::mousePressEvent(QMouseEvent *event)
{
    qDebug() &lt;&lt; &quot;There are&quot; &lt;&lt; items(event-&gt;pos()).size()
             &lt;&lt; &quot;items at position&quot; &lt;&lt; mapToScene(event-&gt;pos());
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#items">QGraphicsScene::items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items-2">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsView::items(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>) const</db:title>
<db:para>This function is provided for convenience. It's equivalent to calling items(<db:link xlink:href="qpoint.xml">QPoint</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="items-3">
<db:title>[since 4.3] QList&lt;QGraphicsItem *&gt; QGraphicsView::items(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape) const</db:title>
<db:para>This convenience function is equivalent to calling items(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>), <db:code role="parameter">mode</db:code>).</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="items-4">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsView::items(const QPainterPath &amp;<db:emphasis>path</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of all the items that, depending on <db:code role="parameter">mode</db:code>, are either contained by or intersect with <db:code role="parameter">path</db:code>. <db:code role="parameter">path</db:code> is in viewport coordinates.</db:para>
<db:para>The default value for <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>; all items whose exact shape intersects with or is contained by <db:code role="parameter">path</db:code> are returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#items">items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items-5">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsView::items(const QPolygon &amp;<db:emphasis>polygon</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of all the items that, depending on <db:code role="parameter">mode</db:code>, are either contained by or intersect with <db:code role="parameter">polygon</db:code>. <db:code role="parameter">polygon</db:code> is in viewport coordinates.</db:para>
<db:para>The default value for <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>; all items whose exact shape intersects with or is contained by <db:code role="parameter">polygon</db:code> are returned.</db:para>
<db:para>The items are sorted by descending stacking order (i.e., the first item in the returned list is the uppermost item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#items">items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items-6">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsView::items(const QRect &amp;<db:emphasis>rect</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of all the items that, depending on <db:code role="parameter">mode</db:code>, are either contained by or intersect with <db:code role="parameter">rect</db:code>. <db:code role="parameter">rect</db:code> is in viewport coordinates.</db:para>
<db:para>The default value for <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>; all items whose exact shape intersects with or is contained by <db:code role="parameter">rect</db:code> are returned.</db:para>
<db:para>The items are sorted in descending stacking order (i.e., the first item in the returned list is the uppermost item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#items">items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QGraphicsView::keyPressEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#keyPressEvent" role="function">QAbstractScrollArea::keyPressEvent(QKeyEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[override virtual protected] void QGraphicsView::keyReleaseEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyReleaseEvent" role="function">QWidget::keyReleaseEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mapFromScene">
<db:title>QPainterPath QGraphicsView::mapFromScene(const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:para>Returns the scene coordinate painter path <db:code role="parameter">path</db:code> to a viewport coordinate painter path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromScene-1">
<db:title>QPoint QGraphicsView::mapFromScene(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Returns the scene coordinate <db:code role="parameter">point</db:code> to viewport coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromScene-2">
<db:title>QPolygon QGraphicsView::mapFromScene(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>) const</db:title>
<db:para>Returns the scene coordinate polygon <db:code role="parameter">polygon</db:code> to a viewport coordinate polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromScene-3">
<db:title>QPolygon QGraphicsView::mapFromScene(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:para>Returns the scene rectangle <db:code role="parameter">rect</db:code> to a viewport coordinate polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromScene-4">
<db:title>QPoint QGraphicsView::mapFromScene(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>) const</db:title>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>(<db:link xlink:href="qpointf.xml">QPointF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapFromScene-5">
<db:title>QPolygon QGraphicsView::mapFromScene(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>) const</db:title>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapToScene">
<db:title>QPainterPath QGraphicsView::mapToScene(const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:para>Returns the viewport painter path <db:code role="parameter">path</db:code> mapped to a scene coordinate painter path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToScene-1">
<db:title>QPointF QGraphicsView::mapToScene(const QPoint &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Returns the viewport coordinate <db:code role="parameter">point</db:code> mapped to scene coordinates.</db:para>
<db:para>Note: It can be useful to map the whole rectangle covered by the pixel at <db:code role="parameter">point</db:code> instead of the point itself. To do this, you can call <db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>(<db:link xlink:href="qrect.xml">QRect</db:link>(<db:code role="parameter">point</db:code>, <db:link xlink:href="qsize.xml">QSize</db:link>(2, 2))).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToScene-2">
<db:title>QPolygonF QGraphicsView::mapToScene(const QPolygon &amp;<db:emphasis>polygon</db:emphasis>) const</db:title>
<db:para>Returns the viewport polygon <db:code role="parameter">polygon</db:code> mapped to a scene coordinate polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToScene-3">
<db:title>QPolygonF QGraphicsView::mapToScene(const QRect &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:para>Returns the viewport rectangle <db:code role="parameter">rect</db:code> mapped to a scene coordinate polygon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToScene-4">
<db:title>QPointF QGraphicsView::mapToScene(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>) const</db:title>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>(<db:link xlink:href="qpoint.xml">QPoint</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>)).</db:para>
</db:section>
<db:section xml:id="mapToScene-5">
<db:title>QPolygonF QGraphicsView::mapToScene(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>) const</db:title>
<db:para>This function is provided for convenience. It's equivalent to calling <db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>(<db:link xlink:href="qrect.xml">QRect</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>)).</db:para>
</db:section>
<db:section xml:id="matrix">
<db:title>QMatrix QGraphicsView::matrix() const</db:title>
<db:para>Returns the current transformation matrix for the view. If no current transformation is set, the identity matrix is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setMatrix">setMatrix</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QGraphicsView::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseDoubleClickEvent" role="function">QAbstractScrollArea::mouseDoubleClickEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QGraphicsView::mouseMoveEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseMoveEvent" role="function">QAbstractScrollArea::mouseMoveEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QGraphicsView::mousePressEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mousePressEvent" role="function">QAbstractScrollArea::mousePressEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QGraphicsView::mouseReleaseEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseReleaseEvent" role="function">QAbstractScrollArea::mouseReleaseEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QGraphicsView::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#paintEvent" role="function">QAbstractScrollArea::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="render">
<db:title>void QGraphicsView::render(QPainter *<db:emphasis>painter</db:emphasis>, const QRectF &amp;<db:emphasis>target</db:emphasis> = QRectF(), const QRect &amp;<db:emphasis>source</db:emphasis> = QRect(), Qt::AspectRatioMode <db:emphasis>aspectRatioMode</db:emphasis> = Qt::KeepAspectRatio)</db:title>
<db:para>Renders the <db:code role="parameter">source</db:code> rect, which is in view coordinates, from the scene into <db:code role="parameter">target</db:code>, which is in paint device coordinates, using <db:code role="parameter">painter</db:code>. This function is useful for capturing the contents of the view onto a paint device, such as a <db:link xlink:href="qimage.xml">QImage</db:link> (e.g., to take a screenshot), or for printing to <db:link xlink:href="qprinter.xml">QPrinter</db:link>. For example:</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;
scene.addItem(...
...

QGraphicsView view(&amp;scene);
view.show();
...

QPrinter printer(QPrinter::HighResolution);
printer.setPageSize(QPrinter::A4);
QPainter painter(&amp;printer);

// print, fitting the viewport contents into a full page
view.render(&amp;painter);

// print the upper half of the viewport into the lower.
// half of the page.
QRect viewport = view.viewport()-&gt;rect();
view.render(&amp;painter,
            QRectF(0, printer.height() / 2,
                   printer.width(), printer.height() / 2),
            viewport.adjusted(0, 0, 0, -viewport.height() / 2));

</db:programlisting>
<db:para>If <db:code role="parameter">source</db:code> is a null rect, this function will use <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>()-&gt;rect() to determine what to draw. If <db:code role="parameter">target</db:code> is a null rect, the full dimensions of <db:code role="parameter">painter</db:code>'s paint device (e.g., for a <db:link xlink:href="qprinter.xml">QPrinter</db:link>, the page size) will be used.</db:para>
<db:para>The source rect contents will be transformed according to <db:code role="parameter">aspectRatioMode</db:code> to fit into the target rect. By default, the aspect ratio is kept, and <db:code role="parameter">source</db:code> is scaled to fit in <db:code role="parameter">target</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#render">QGraphicsScene::render</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetCachedContent">
<db:title>void QGraphicsView::resetCachedContent()</db:title>
<db:para>Resets any cached content. Calling this function will clear <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>'s cache. If the current cache mode is <db:link xlink:href="qgraphicsview.xml#CacheModeFlag-enum">CacheNone</db:link>, this function does nothing.</db:para>
<db:para>This function is called automatically for you when the backgroundBrush or QGraphicsScene::backgroundBrush properties change; you only need to call this function if you have reimplemented <db:link xlink:href="qgraphicsscene.xml#drawBackground">QGraphicsScene::drawBackground</db:link>() or <db:link xlink:href="qgraphicsview.xml#drawBackground">QGraphicsView::drawBackground</db:link>() to draw a custom background, and need to trigger a full redraw.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">cacheMode()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetMatrix">
<db:title>void QGraphicsView::resetMatrix()</db:title>
<db:para>Resets the view transformation matrix to the identity matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#resetTransform">resetTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetTransform">
<db:title>void QGraphicsView::resetTransform()</db:title>
<db:para>Resets the view transformation to the identity matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QGraphicsView::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#resizeEvent" role="function">QAbstractScrollArea::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="rotate">
<db:title>void QGraphicsView::rotate(qreal <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Rotates the current view transformation <db:code role="parameter">angle</db:code> degrees clockwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rubberBandChanged">
<db:title>[since 5.1] void QGraphicsView::rubberBandChanged(QRect <db:emphasis>rubberBandRect</db:emphasis>, QPointF <db:emphasis>fromScenePoint</db:emphasis>, QPointF <db:emphasis>toScenePoint</db:emphasis>)</db:title>
<db:para>This signal is emitted when the rubber band rect is changed. The viewport Rect is specified by <db:code role="parameter">rubberBandRect</db:code>. The drag start position and drag end position are provided in scene points with <db:code role="parameter">fromScenePoint</db:code> and <db:code role="parameter">toScenePoint</db:code>.</db:para>
<db:para>When rubberband selection ends this signal will be emitted with null vales.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#rubberBandRect">rubberBandRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rubberBandRect">
<db:title>[since 5.1] QRect QGraphicsView::rubberBandRect() const</db:title>
<db:para>This functions returns the current rubber band area (in viewport coordinates) if the user is currently doing an itemselection with rubber band. When the user is not using the rubber band this functions returns (a null) QRectF().</db:para>
<db:para>Notice that part of this <db:link xlink:href="qrect.xml">QRect</db:link> can be outise the visual viewport. It can e.g contain negative values.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>rubberBandSelectionMode</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rubberBandChanged">rubberBandChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scale">
<db:title>void QGraphicsView::scale(qreal <db:emphasis>sx</db:emphasis>, qreal <db:emphasis>sy</db:emphasis>)</db:title>
<db:para>Scales the current view transformation by (<db:code role="parameter">sx</db:code>, <db:code role="parameter">sy</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scene">
<db:title>QGraphicsScene *QGraphicsView::scene() const</db:title>
<db:para>Returns a pointer to the scene that is currently visualized in the view. If no scene is currently visualized, 0 is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setScene">setScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scrollContentsBy">
<db:title>[override virtual protected] void QGraphicsView::scrollContentsBy(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#scrollContentsBy" role="function">QAbstractScrollArea::scrollContentsBy(int dx, int dy)</db:link>.</db:para>
</db:section>
<db:section xml:id="setMatrix">
<db:title>void QGraphicsView::setMatrix(const QMatrix &amp;<db:emphasis>matrix</db:emphasis>, bool <db:emphasis>combine</db:emphasis> = false)</db:title>
<db:para>Sets the view's current transformation matrix to <db:code role="parameter">matrix</db:code>.</db:para>
<db:para>If <db:code role="parameter">combine</db:code> is true, then <db:code role="parameter">matrix</db:code> is combined with the current matrix; otherwise, <db:code role="parameter">matrix</db:code> <db:emphasis>replaces</db:emphasis> the current matrix. <db:code role="parameter">combine</db:code> is false by default.</db:para>
<db:para>The transformation matrix tranforms the scene into view coordinates. Using the default transformation, provided by the identity matrix, one pixel in the view represents one unit in the scene (e.g., a 10x10 rectangular item is drawn using 10x10 pixels in the view). If a 2x2 scaling matrix is applied, the scene will be drawn in 1:2 (e.g., a 10x10 rectangular item is then drawn using 20x20 pixels in the view).</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;
scene.addText(&quot;GraphicsView rotated clockwise&quot;);

QGraphicsView view(&amp;scene);
view.rotate(90); // the text is rendered with a 90 degree clockwise rotation
view.show();
</db:programlisting>
<db:para>To simplify interation with items using a transformed view, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> provides mapTo... and mapFrom... functions that can translate between scene and view coordinates. For example, you can call <db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>() to map a view coordinate to a floating point scene coordinate, or <db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>() to map from floating point scene coordinates to view coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#matrix">matrix</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOptimizationFlag">
<db:title>void QGraphicsView::setOptimizationFlag(QGraphicsView::OptimizationFlag <db:emphasis>flag</db:emphasis>, bool <db:emphasis>enabled</db:emphasis> = true)</db:title>
<db:para>Enables <db:code role="parameter">flag</db:code> if <db:code role="parameter">enabled</db:code> is true; otherwise disables <db:code role="parameter">flag</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>optimizationFlags</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRenderHint">
<db:title>void QGraphicsView::setRenderHint(QPainter::RenderHint <db:emphasis>hint</db:emphasis>, bool <db:emphasis>enabled</db:emphasis> = true)</db:title>
<db:para>If <db:code role="parameter">enabled</db:code> is true, the render hint <db:code role="parameter">hint</db:code> is enabled; otherwise it is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>renderHints</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScene">
<db:title>void QGraphicsView::setScene(QGraphicsScene *<db:emphasis>scene</db:emphasis>)</db:title>
<db:para>Sets the current scene to <db:code role="parameter">scene</db:code>. If <db:code role="parameter">scene</db:code> is already being viewed, this function does nothing.</db:para>
<db:para>When a scene is set on a view, the <db:link xlink:href="qgraphicsscene.xml#changed">QGraphicsScene::changed</db:link>() signal is automatically connected to this view's <db:link xlink:href="qgraphicsview.xml#updateScene">updateScene</db:link>() slot, and the view's scroll bars are adjusted to fit the size of the scene.</db:para>
<db:para>The view does not take ownership of <db:code role="parameter">scene</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#scene">scene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransform">
<db:title>void QGraphicsView::setTransform(const QTransform &amp;<db:emphasis>matrix</db:emphasis>, bool <db:emphasis>combine</db:emphasis> = false)</db:title>
<db:para>Sets the view's current transformation matrix to <db:code role="parameter">matrix</db:code>.</db:para>
<db:para>If <db:code role="parameter">combine</db:code> is true, then <db:code role="parameter">matrix</db:code> is combined with the current matrix; otherwise, <db:code role="parameter">matrix</db:code> <db:emphasis>replaces</db:emphasis> the current matrix. <db:code role="parameter">combine</db:code> is false by default.</db:para>
<db:para>The transformation matrix tranforms the scene into view coordinates. Using the default transformation, provided by the identity matrix, one pixel in the view represents one unit in the scene (e.g., a 10x10 rectangular item is drawn using 10x10 pixels in the view). If a 2x2 scaling matrix is applied, the scene will be drawn in 1:2 (e.g., a 10x10 rectangular item is then drawn using 20x20 pixels in the view).</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;
scene.addText(&quot;GraphicsView rotated clockwise&quot;);

QGraphicsView view(&amp;scene);
view.rotate(90); // the text is rendered with a 90 degree clockwise rotation
view.show();
</db:programlisting>
<db:para>To simplify interation with items using a transformed view, <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> provides mapTo... and mapFrom... functions that can translate between scene and view coordinates. For example, you can call <db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>() to map a view coordiate to a floating point scene coordinate, or <db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>() to map from floating point scene coordinates to view coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setupViewport">
<db:title>[override virtual protected] void QGraphicsView::setupViewport(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#setupViewport" role="function">QAbstractScrollArea::setupViewport(QWidget *viewport)</db:link>.</db:para>
<db:para>This slot is called by <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> after <db:link xlink:href="qabstractscrollarea.xml#setViewport">setViewport</db:link>() has been called. Reimplement this function in a subclass of <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> to initialize the new viewport <db:code role="parameter">widget</db:code> before it is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#setViewport">setViewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shear">
<db:title>void QGraphicsView::shear(qreal <db:emphasis>sh</db:emphasis>, qreal <db:emphasis>sv</db:emphasis>)</db:title>
<db:para>Shears the current view transformation by (<db:code role="parameter">sh</db:code>, <db:code role="parameter">sv</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QGraphicsView::showEvent(QShowEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QGraphicsView::sizeHint() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#sizeHint" role="function">QAbstractScrollArea::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="transform">
<db:title>QTransform QGraphicsView::transform() const</db:title>
<db:para>Returns the current transformation matrix for the view. If no current transformation is set, the identity matrix is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#scale">scale</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate">
<db:title>void QGraphicsView::translate(qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>)</db:title>
<db:para>Translates the current view transformation by (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#setTransform">setTransform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#transform">transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#rotate">rotate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#shear">shear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateScene">
<db:title>void QGraphicsView::updateScene(const QList&lt;QRectF&gt; &amp;<db:emphasis>rects</db:emphasis>)</db:title>
<db:para>Schedules an update of the scene rectangles <db:code role="parameter">rects</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#changed">QGraphicsScene::changed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateSceneRect">
<db:title>void QGraphicsView::updateSceneRect(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>Notifies <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> that the scene's scene rect has changed. <db:code role="parameter">rect</db:code> is the new scene rect. If the view already has an explicitly set scene rect, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>sceneRect</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#sceneRectChanged">QGraphicsScene::sceneRectChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewportEvent">
<db:title>[override virtual protected] bool QGraphicsView::viewportEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#viewportEvent" role="function">QAbstractScrollArea::viewportEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="viewportTransform">
<db:title>QTransform QGraphicsView::viewportTransform() const</db:title>
<db:para>Returns a matrix that maps viewport coordinates to scene coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#mapToScene">mapToScene</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#mapFromScene">mapFromScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QGraphicsView::wheelEvent(QWheelEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#wheelEvent" role="function">QAbstractScrollArea::wheelEvent(QWheelEvent *e)</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QGraphicsView</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="drawItems">
<db:title>[virtual protected, deprecated] void QGraphicsView::drawItems(QPainter *<db:emphasis>painter</db:emphasis>, int <db:emphasis>numItems</db:emphasis>, QGraphicsItem *[] <db:emphasis>items</db:emphasis>, const QStyleOptionGraphicsItem[] <db:emphasis>options</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Draws the items <db:code role="parameter">items</db:code> in the scene using <db:code role="parameter">painter</db:code>, after the background and before the foreground are drawn. <db:code role="parameter">numItems</db:code> is the number of items in <db:code role="parameter">items</db:code> and options in <db:code role="parameter">options</db:code>. <db:code role="parameter">options</db:code> is a list of styleoptions; one for each item. Reimplement this function to provide custom item drawing for this view.</db:para>
<db:para>The default implementation calls the scene's drawItems() function.</db:para>
<db:para>Since Qt 4.6, this function is not called anymore unless the <db:link xlink:href="qgraphicsview.xml#OptimizationFlag-enum">QGraphicsView::IndirectPainting</db:link> flag is given as an Optimization flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#drawForeground">drawForeground</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#drawBackground">drawBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#drawItems">QGraphicsScene::drawItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
