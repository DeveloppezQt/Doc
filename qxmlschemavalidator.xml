<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlSchemaValidator Class</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlschemavalidator.xml">QXmlSchemaValidator</db:link> class validates XML instance documents against a W3C XML Schema.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlSchemaValidator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xmlpatterns</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlSchemaValidator is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qxmlschemavalidator.xml">QXmlSchemaValidator</db:link> class loads, parses an XML instance document and validates it against a W3C XML Schema that has been compiled with <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link>.</db:para>
<db:para>The following example shows how to load a XML Schema from a local file, check whether it is a valid schema document and use it for validation of an XML instance document:</db:para>
<db:programlisting language="cpp">    QUrl schemaUrl(&quot;file:///home/user/schema.xsd&quot;);

    QXmlSchema schema;
    schema.load(schemaUrl);

    if (schema.isValid()) {
        QFile file(&quot;test.xml&quot;);
        file.open(QIODevice::ReadOnly);

        QXmlSchemaValidator validator(schema);
        if (validator.validate(&amp;amp;file, QUrl::fromLocalFile(file.fileName())))
            qDebug() &amp;lt;&amp;lt; &quot;instance document is valid&quot;;
        else
            qDebug() &amp;lt;&amp;lt; &quot;instance document is invalid&quot;;
    }
</db:programlisting>
<db:section xml:id="xml-schema-version">
<db:title>XML Schema Version</db:title>
<db:para>This class implements schema validation according to the <db:link xlink:href="http://www.w3.org/XML/Schema">XML Schema</db:link> 1.0 specification.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link></db:member>
<db:member><db:link xlink:href="qxmlschemavalidator.xml#schema">XML Schema Validation Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlSchemaValidator">
<db:title>QXmlSchemaValidator::QXmlSchemaValidator()</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlSchemaValidator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlSchemaValidator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a schema validator. The schema used for validation must be referenced in the XML instance document via the <db:code>xsi:schemaLocation</db:code> or <db:code>xsi:noNamespaceSchemaLocation</db:code> attribute.</db:para>
</db:section>
<db:section xml:id="QXmlSchemaValidator-1">
<db:title>QXmlSchemaValidator::QXmlSchemaValidator(const QXmlSchema &amp;<db:emphasis>schema</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlSchemaValidator</db:methodname>
<db:methodparam>
<db:type>const QXmlSchema &amp;</db:type>
<db:parameter>schema</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlSchemaValidator(const QXmlSchema &amp;schema)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a schema validator that will use <db:code role="parameter">schema</db:code> for validation. If an empty <db:link xlink:href="qxmlschema.xml">QXmlSchema</db:link> schema is passed to the validator, the schema used for validation must be referenced in the XML instance document via the <db:code>xsi:schemaLocation</db:code> or <db:code>xsi:noNamespaceSchemaLocation</db:code> attribute.</db:para>
</db:section>
<db:section xml:id="dtor.QXmlSchemaValidator">
<db:title>QXmlSchemaValidator::~QXmlSchemaValidator()</db:title>
<db:destructorsynopsis>
<db:methodname>~QXmlSchemaValidator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QXmlSchemaValidator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qxmlschemavalidator.xml">QXmlSchemaValidator</db:link>.</db:para>
</db:section>
<db:section xml:id="messageHandler">
<db:title>QAbstractMessageHandler *QXmlSchemaValidator::messageHandler() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractMessageHandler *</db:type>
<db:methodname>messageHandler</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractMessageHandler * messageHandler() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the message handler that handles parsing and validation messages for this <db:link xlink:href="qxmlschemavalidator.xml">QXmlSchemaValidator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschemavalidator.xml#setMessageHandler">setMessageHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="namePool">
<db:title>QXmlNamePool QXmlSchemaValidator::namePool() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlNamePool</db:type>
<db:methodname>namePool</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNamePool namePool() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name pool used by this <db:link xlink:href="qxmlschemavalidator.xml">QXmlSchemaValidator</db:link> for constructing <db:link xlink:href="qxmlname.xml">names</db:link>. There is no setter for the name pool, because mixing name pools causes errors due to name confusion.</db:para>
</db:section>
<db:section xml:id="networkAccessManager">
<db:title>QNetworkAccessManager *QXmlSchemaValidator::networkAccessManager() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNetworkAccessManager *</db:type>
<db:methodname>networkAccessManager</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkAccessManager * networkAccessManager() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the network manager, or 0 if it has not been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschemavalidator.xml#setNetworkAccessManager">setNetworkAccessManager</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="schema">
<db:title>QXmlSchema QXmlSchemaValidator::schema() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlSchema</db:type>
<db:methodname>schema</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlSchema schema() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the schema that is used for validation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschemavalidator.xml#setSchema">setSchema</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMessageHandler">
<db:title>void QXmlSchemaValidator::setMessageHandler(QAbstractMessageHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMessageHandler</db:methodname>
<db:methodparam>
<db:type>QAbstractMessageHandler *</db:type>
<db:parameter>handler</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMessageHandler(QAbstractMessageHandler *handler)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the <db:link xlink:href="qabstractmessagehandler.xml">message handler</db:link> for this <db:link xlink:href="qxmlschemavalidator.xml">QXmlSchemaValidator</db:link> to <db:code role="parameter">handler</db:code>. The schema validator sends all parsing and validation messages to this message handler. <db:link xlink:href="qxmlschemavalidator.xml">QXmlSchemaValidator</db:link> does not take ownership of <db:code role="parameter">handler</db:code>.</db:para>
<db:para>Normally, the default message handler is sufficient. It writes compile and validation messages to <db:emphasis>stderr</db:emphasis>. The default message handler includes color codes if <db:emphasis>stderr</db:emphasis> can render colors.</db:para>
<db:para>When <db:link xlink:href="qxmlschemavalidator.xml">QXmlSchemaValidator</db:link> calls <db:link xlink:href="qabstractmessagehandler.xml#message">QAbstractMessageHandler::message</db:link>(), the arguments are as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>message() argument</db:para>
</db:th>
<db:th>
<db:para>Semantics</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtMsgType</db:link> type</db:para>
</db:td>
<db:td>
<db:para>Only <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtWarningMsg</db:link> and <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtFatalMsg</db:link> are used. The former identifies a warning, while the latter identifies an error.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>const <db:link xlink:href="qstring.xml">QString</db:link> &amp; description</db:para>
</db:td>
<db:td>
<db:para>An XHTML document which is the actual message. It is translated into the current language.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>const <db:link xlink:href="qurl.xml">QUrl</db:link> &amp;identifier</db:para>
</db:td>
<db:td>
<db:para>Identifies the error with a URI, where the fragment is the error code, and the rest of the URI is the error namespace.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>const <db:link xlink:href="qsourcelocation.xml">QSourceLocation</db:link> &amp; sourceLocation</db:para>
</db:td>
<db:td>
<db:para>Identifies where the error occurred.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschemavalidator.xml#messageHandler">messageHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNetworkAccessManager">
<db:title>void QXmlSchemaValidator::setNetworkAccessManager(QNetworkAccessManager *<db:emphasis>manager</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNetworkAccessManager</db:methodname>
<db:methodparam>
<db:type>QNetworkAccessManager *</db:type>
<db:parameter>manager</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNetworkAccessManager(QNetworkAccessManager *manager)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the network manager to <db:code role="parameter">manager</db:code>. <db:link xlink:href="qxmlschemavalidator.xml">QXmlSchemaValidator</db:link> does not take ownership of <db:code role="parameter">manager</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschemavalidator.xml#networkAccessManager">networkAccessManager</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSchema">
<db:title>void QXmlSchemaValidator::setSchema(const QXmlSchema &amp;<db:emphasis>schema</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSchema</db:methodname>
<db:methodparam>
<db:type>const QXmlSchema &amp;</db:type>
<db:parameter>schema</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSchema(const QXmlSchema &amp;schema)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">schema</db:code> that shall be used for further validation. If the schema is empty, the schema used for validation must be referenced in the XML instance document via the <db:code>xsi:schemaLocation</db:code> or <db:code>xsi:noNamespaceSchemaLocation</db:code> attribute.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschemavalidator.xml#schema">schema</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUriResolver">
<db:title>void QXmlSchemaValidator::setUriResolver(const QAbstractUriResolver *<db:emphasis>resolver</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUriResolver</db:methodname>
<db:methodparam>
<db:type>const QAbstractUriResolver *</db:type>
<db:parameter>resolver</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUriResolver(const QAbstractUriResolver *resolver)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the URI resolver to <db:code role="parameter">resolver</db:code>. <db:link xlink:href="qxmlschemavalidator.xml">QXmlSchemaValidator</db:link> does not take ownership of <db:code role="parameter">resolver</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschemavalidator.xml#uriResolver">uriResolver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uriResolver">
<db:title>const QAbstractUriResolver *QXmlSchemaValidator::uriResolver() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QAbstractUriResolver *</db:type>
<db:methodname>uriResolver</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QAbstractUriResolver * uriResolver() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the schema's URI resolver. If no URI resolver has been set, Qt XML Patterns will use the URIs in instance documents as they are.</db:para>
<db:para>The URI resolver provides a level of abstraction, or <db:emphasis>polymorphic URIs</db:emphasis>. A resolver can rewrite <db:emphasis>logical</db:emphasis> URIs to physical ones, or it can translate obsolete or invalid URIs to valid ones.</db:para>
<db:para>When Qt XML Patterns calls <db:link xlink:href="qabstracturiresolver.xml#resolve">QAbstractUriResolver::resolve</db:link>() the absolute URI is the URI mandated by the schema specification, and the relative URI is the URI specified by the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlschemavalidator.xml#setUriResolver">setUriResolver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="validate">
<db:title>bool QXmlSchemaValidator::validate(const QUrl &amp;<db:emphasis>source</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>validate</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool validate(const QUrl &amp;source) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Validates the XML instance document read from <db:code role="parameter">source</db:code> against the schema.</db:para>
<db:para>Returns <db:code>true</db:code> if the XML instance document is valid according to the schema, <db:code>false</db:code> otherwise.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    const QXmlSchema schema = getSchema();

    const QUrl url(&quot;http://www.schema-example.org/test.xml&quot;);

    QXmlSchemaValidator validator(schema);
    if (validator.validate(url))
        qDebug() &amp;lt;&amp;lt; &quot;instance document is valid&quot;;
    else
        qDebug() &amp;lt;&amp;lt; &quot;instance document is invalid&quot;;
</db:programlisting>
</db:section>
<db:section xml:id="validate-1">
<db:title>bool QXmlSchemaValidator::validate(QIODevice *<db:emphasis>source</db:emphasis>, const QUrl &amp;<db:emphasis>documentUri</db:emphasis> = QUrl()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>validate</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>documentUri</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool validate(QIODevice *source, const QUrl &amp;documentUri) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Validates the XML instance document read from <db:code role="parameter">source</db:code> with the given <db:code role="parameter">documentUri</db:code> against the schema.</db:para>
<db:para>Returns <db:code>true</db:code> if the XML instance document is valid according to the schema, <db:code>false</db:code> otherwise.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    const QXmlSchema schema = getSchema();

    QFile file(&quot;test.xml&quot;);
    file.open(QIODevice::ReadOnly);

    QXmlSchemaValidator validator(schema);
    if (validator.validate(&amp;amp;file, QUrl::fromLocalFile(file.fileName())))
        qDebug() &amp;lt;&amp;lt; &quot;instance document is valid&quot;;
    else
        qDebug() &amp;lt;&amp;lt; &quot;instance document is invalid&quot;;
</db:programlisting>
</db:section>
<db:section xml:id="validate-2">
<db:title>bool QXmlSchemaValidator::validate(const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QUrl &amp;<db:emphasis>documentUri</db:emphasis> = QUrl()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>validate</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>documentUri</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool validate(const QByteArray &amp;data, const QUrl &amp;documentUri) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Validates the XML instance document read from <db:code role="parameter">data</db:code> with the given <db:code role="parameter">documentUri</db:code> against the schema.</db:para>
<db:para>Returns <db:code>true</db:code> if the XML instance document is valid according to the schema, <db:code>false</db:code> otherwise.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    const QXmlSchema schema = getSchema();

    QByteArray data(&quot;&amp;lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&amp;gt;&quot;
                    &quot;&amp;lt;test&amp;gt;&amp;lt;/test&amp;gt;&quot;);

    QBuffer buffer(&amp;amp;data);
    buffer.open(QIODevice::ReadOnly);

    QXmlSchemaValidator validator(schema);
    if (validator.validate(&amp;amp;buffer))
        qDebug() &amp;lt;&amp;lt; &quot;instance document is valid&quot;;
    else
        qDebug() &amp;lt;&amp;lt; &quot;instance document is invalid&quot;;
</db:programlisting>
</db:section>
</db:section>
</db:article>
