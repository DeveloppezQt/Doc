<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Build System Changes in Qt 6</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Changes in Qt 6 how Qt is built.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>A lot of the work that went into Qt 6 was related to how Qt and its modules are built. The target was to make Qt future-proof by moving to a broadly-adopted, popular build tool: <db:link xlink:href="https://cmake.org/cmake/help/latest/">CMake</db:link>.</db:para>
<db:section xml:id="building-qt-from-sources">
<db:title>Building Qt from Sources</db:title>
<db:para>The Qt 5 build system was built on top of <db:link xlink:href="qmake-manual.xml">qmake</db:link>. In Qt 6, we ported the build system to CMake.</db:para>
<db:note>
<db:para>This only affects users that want to build Qt from sources. You can still use qmake as a build tool for your applications.</db:para>
</db:note>
<db:para>It is possible to configure Qt directly from the command-line by invoking <db:emphasis role="bold">cmake</db:emphasis>. However, we continue to recommend the <db:emphasis role="bold">configure</db:emphasis> command-line tool, which provides an arguably nicer interface, and additional error-checking.</db:para>
<db:para>See also <db:link xlink:href="configure-options.xml">Qt Configure Options</db:link> for an overview of the new configure API.</db:para>
<db:section xml:id="cmake-ninja-as-external-dependencies">
<db:title>CMake, Ninja as External Dependencies</db:title>
<db:para>You need a recent version of <db:emphasis role="bold">CMake</db:emphasis> to configure and build Qt. For Qt 6.0, we require <db:emphasis role="bold">CMake 3.16</db:emphasis>. Starting with Qt 6.2, we require <db:emphasis role="bold">CMake 3.21</db:emphasis> when building Qt as static libraries. Starting with Qt 6.6, we require <db:emphasis role="bold">CMake 3.21.1</db:emphasis> when building Qt for Apple platforms. You must also have an up-to date version of the <db:link xlink:href="https://ninja-build.org/">Ninja</db:link> tool installed.</db:para>
<db:para>Both CMake and Ninja are open source tools that can be installed by various means. They are also available in Qt Online Installer.</db:para>
<db:para>See <db:link xlink:href="build-sources.xml">Building Qt Sources</db:link> for a more detailed overview of the build requirements on different platforms.</db:para>
</db:section>
<db:section xml:id="selecting-a-qt-license">
<db:title>Selecting a Qt License</db:title>
<db:para>In Qt 5, configure required you to select whether you plan to use Qt under commercial or open-source licenses. If you had multiple commercial licenses, you also had to select the license you wished to use.</db:para>
<db:para>We removed both selections in Qt 6. The choice of licenses that are available to you depends on any legal contracts you have with <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>, not on any artifacts.</db:para>
<db:para>The configure options <db:emphasis role="bold">-opensource</db:emphasis>, <db:emphasis role="bold">-commercial</db:emphasis>, and <db:emphasis role="bold">-confirm-license</db:emphasis> are ignored in Qt 6, and might be removed in future versions of Qt.</db:para>
</db:section>
<db:section xml:id="re-running-configure">
<db:title>Re-running configure</db:title>
<db:para>You sometimes want to re-run configure to test different configure options. In Qt 5, configure cached various information from the environment between runs, but otherwise started from a clean state: You had to use <db:emphasis role="bold">-redo</db:emphasis>, or use the <db:emphasis role="bold">config.status</db:emphasis> shell script, to reuse arguments from a previous run. You also could use the <db:emphasis role="bold">-recheck</db:emphasis>, <db:emphasis role="bold">-recheck-all</db:emphasis> options to force a re-evaluation of cached tests.</db:para>
<db:para>CMake and therefore configure in Qt 6 caches results even more aggressively. Detected environment settings, but also selections done through other command-line arguments, are stored in a file called <db:emphasis role="bold">CMakeCache.txt</db:emphasis>. If you run configure with new options, the new options are merged into this file. Delete the file to start from scratch. The configure options above are not supported anymore.</db:para>
</db:section>
<db:section xml:id="building-only-parts-of-qt">
<db:title>Building only Parts of Qt</db:title>
<db:para>The build system of Qt 5 allowed you to run the build tool (for example make) in a sub-directory to do a partial re-build.</db:para>
<db:para>CMake follows a different paradigm and requires you to build targets from the top-level directory, taking into account the whole build. Use <db:emphasis role="bold">ninja -t targets</db:emphasis> to see all available targets in the build.</db:para>
</db:section>
<db:section xml:id="resolving-third-party-libraries">
<db:title>Resolving Third-Party Libraries</db:title>
<db:para>One of the tasks of configure is to detect the availability of different third-party packages in the environment. In Qt 5, configure optionally used pkg-config for this, but was also using various compile-time tests. These checks could be tweaked from the command line with various assignments like <db:emphasis role="bold">ICU_PREFIX</db:emphasis>, <db:emphasis role="bold">ICU_LIBS</db:emphasis>, etc.</db:para>
<db:para>In Qt 6, configure relies on CMake to resolve dependencies. For most dependencies, this requires the third-party library to provide a CMake package in the CMake search path. You can use the CMAKE_PREFIX_PATH variable to extend this path with custom locations.</db:para>
<db:para>Some dependencies like OpenSSL are also detected by logic within CMake: If OpenSSL is not picked up, you might need to set the OPENSSL_ROOT_DIR CMake variable so that it points to the installation directory.</db:para>
</db:section>
<db:section xml:id="selecting-the-toolchain">
<db:title>Selecting the Toolchain</db:title>
<db:para>In Qt 5, configure used so-called mkspecs to specify both the build and target platforms (<db:emphasis role="bold">-platform</db:emphasis>, <db:emphasis role="bold">-xplatform</db:emphasis>, and <db:emphasis role="bold">-device</db:emphasis> options). CMake does not use these, but instead relies on environment checks, and toolchain files (see also the <db:link xlink:href="https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html">CMake-toolchains documentation</db:link>). The -platform, -xplatform options are still available, but only used to set the defaults for the generated qmake tool.</db:para>
</db:section>
<db:section xml:id="cross-compiling-qt">
<db:title>Cross-Compiling Qt</db:title>
<db:para>Cross-compilation is the act of compiling code for one computer system (the target) on a different system (the host). A build environment for cross-compiling Qt applications requires Qt tools to be available on the host (think of moc, rcc), as well as Qt libraries to be built for the target.</db:para>
<db:para>In Qt 5, configure allowed you to build the host tools as well as the target tools and libraries in one step. In Qt 6, this is no longer supported. Instead, you have to have Qt installed and running on the host before you can cross-compile Qt to the target. The installed Qt must furthermore be the same version as the one to be cross-compiled.</db:para>
<db:para>For more details on cross-compiling see <db:link xlink:href="configure-linux-device.xml">Configure an Embedded Linux Device</db:link>, <db:link xlink:href="android-building.xml">Qt for Android - Building from Source</db:link>, and <db:link xlink:href="ios-building-from-source.xml">Qt for iOS - Building from Source</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="porting-qt-plugins-and-additional-libraries">
<db:title>Porting Qt Plugins and Additional Libraries</db:title>
<db:para>While qmake is still supported for building Qt applications, it can no longer be used to compile custom Qt plugins, or libraries that rely on internals from the Qt 5 build system. Such libraries or plugins must be ported to CMake for use with Qt 6.</db:para>
<db:para>At the time of the release of Qt 6.0, the API for building custom Qt plugins or libraries is still in tech preview, which means that it may still change in future versions. A public stable API will be made available in a later Qt 6 release.</db:para>
</db:section>
<db:section xml:id="related-topics">
<db:title>Related Topics</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="modulechanges.xml">Changes to Qt Modules in Qt 6</db:link> - A list of API changes in Qt modules</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="whatsnew60.xml#changes-to-supported-modules">Changes to Supported Modules</db:link> - Status of Qt 5 modules in Qt 6.0</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="cmake-qt5-and-qt6-compatibility.xml">Qt 5 and Qt 6 compatibility</db:link> - Building applications with both Qt 5 and Qt 6</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
