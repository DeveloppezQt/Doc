<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEngineClientCertificateStore Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebengineclientcertificatestore.xml">QWebEngineClientCertificateStore</db:link> class provides an in-memory store for client certificates.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEngineClientCertificateStore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS WebEngineCore)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::WebEngineCore)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginecore</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class allows to store client certificates in an in-memory store. When a web site requests an SSL client certificate, the <db:link xlink:href="qwebenginepage.xml#selectClientCertificate">QWebEnginePage::selectClientCertificate</db:link> signal is emitted with matching certificates from the native certificate store or the in-memory store.</db:para>
<db:para>The class instance can be obtained with the <db:link xlink:href="qwebengineprofile.xml#clientCertificateStore">QWebEngineProfile::clientCertificateStore</db:link>() method.</db:para>
<db:programlisting language="cpp">QFile certFile(&quot;:/resouces/certificate.crt&quot;);
certFile.open(QIODevice::ReadOnly);
const QSslCertificate cert(certFile.readAll(), QSsl::Pem);

QFile keyFile(&quot;:/resources/privatekey.key&quot;);
keyFile.open(QIODevice::ReadOnly);
const QSslKey sslKey(keyFile.readAll(), QSsl::Rsa, QSsl::Pem, QSsl::PrivateKey, &quot;&quot;);

QWebEngineProfile profile;
profile.clientCertificateStore()-&amp;gt;add(cert, sslKey);
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="add">
<db:title>void QWebEngineClientCertificateStore::add(const QSslCertificate &amp;<db:emphasis>certificate</db:emphasis>, const QSslKey &amp;<db:emphasis>privateKey</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>add</db:methodname>
<db:methodparam>
<db:type>const QSslCertificate &amp;</db:type>
<db:parameter>certificate</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSslKey &amp;</db:type>
<db:parameter>privateKey</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void add(const QSslCertificate &amp;certificate, const QSslKey &amp;privateKey)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a <db:code role="parameter">certificate</db:code> with the <db:code role="parameter">privateKey</db:code> to the in-memory client certificate store.</db:para>
</db:section>
<db:section xml:id="certificates">
<db:title>QList&lt;QSslCertificate&gt; QWebEngineClientCertificateStore::certificates() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QSslCertificate&gt;</db:type>
<db:methodname>certificates</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QSslCertificate&gt; certificates() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the client certificates in the in-memory store. Returns an empty list if the store does not contain any certificates.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QWebEngineClientCertificateStore::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears all the client certificates from the in-memory store.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>void QWebEngineClientCertificateStore::remove(const QSslCertificate &amp;<db:emphasis>certificate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const QSslCertificate &amp;</db:type>
<db:parameter>certificate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void remove(const QSslCertificate &amp;certificate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deletes all the instances of the client certificate in the in-memory client certificate store that matches the certificate <db:code role="parameter">certificate</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
