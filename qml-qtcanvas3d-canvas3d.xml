<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Canvas3D QML Type</db:title>
<db:productname>QtCanvas3D</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Canvas 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Canvas that provides a 3D rendering context.</db:para>
<db:para>This type was introduced in QtCanvas3D 1.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtCanvas3D 1.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtCanvas3D 1.0</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> is a QML element that, when placed in your Qt Quick 2 scene, allows you to get a 3D rendering context and call 3D rendering API calls through that context object. Use of the rendering API requires knowledge of OpenGL-like rendering APIs.</db:para>
<db:para>There are two functions that are called by the <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> implementation:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#initializeGL-signal">initializeGL</db:link> is emitted before the first frame is rendered, and usually during that you get the 3D context and initialize resources to be used later on during the rendering cycle.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#paintGL-signal">paintGL</db:link> is emitted for each frame to be rendered, and usually during that you submit 3D rendering calls to draw whatever 3D content you want to be displayed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="context-prop">
<db:title>context : Context3D</db:title>
<db:para>This property can be used to access the context created with <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#getContext-method">getContext</db:link>() method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#getContext-method">getContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="devicePixelRatio-prop">
<db:title>devicePixelRatio : float</db:title>
<db:para>Specifies the ratio between logical pixels (used by the Qt Quick) and actual physical on-screen pixels (used by the 3D rendering).</db:para>
</db:section>
<db:section xml:id="fps-prop">
<db:title>fps : int</db:title>
<db:para>This property specifies the current number of frames rendered per second. The value is recalculated every 500 ms, as long as any rendering is done.</db:para>
<db:note>
<db:para>This property only gets updated after a <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> frame is rendered, so if no frames are being drawn, this property value won't change. It is also based on the number of <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> frames actually rendered since the value was last updated, so it may not accurately reflect the actual rendering performance when If <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#renderOnDemand-prop">Canvas3D.renderOnDemand</db:link> property is <db:code>true</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#frameTimeMs-method">frameTimeMs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixelSize-prop">
<db:title>pixelSize : size</db:title>
<db:para>Specifies the size of the render target surface in physical on-screen pixels used by the 3D rendering.</db:para>
</db:section>
<db:section xml:id="renderOnDemand-prop">
<db:title>renderOnDemand : bool</db:title>
<db:para>If the value is <db:code>false</db:code>, the render loop runs constantly and <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#paintGL-signal">Canvas3D.paintGL</db:link>() signal is emitted once per frame. If the value is <db:code>true</db:code>, <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#paintGL-signal">Canvas3D.paintGL</db:link>() is only emitted when <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> content needs to be re-rendered because a geometry change or some other event affecting the <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> content occurred. The application can also request a render using <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#requestRender-method">Canvas3D.requestRender</db:link>() method.</db:para>
</db:section>
<db:section xml:id="renderTarget-prop">
<db:title>renderTarget : RenderTarget</db:title>
<db:para>Specifies how the rendering should be done.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Canvas3D.RenderTargetOffscreenBuffer</db:code> indicates rendering is done into an offscreen buffer and the finished texture is used for the <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> item. This is the default target.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Canvas3D.RenderTargetBackground</db:code> indicates the rendering is done to the background of the Qt Quick scene, in response to <db:link xlink:href="qquickwindow.xml#beforeRendering">QQuickWindow::beforeRendering</db:link>() signal.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Canvas3D.RenderTargetForeground</db:code> indicates the rendering is done to the foreground of the Qt Quick scene, in response to <db:link xlink:href="qquickwindow.xml#afterRendering">QQuickWindow::afterRendering</db:link>() signal.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:code>Canvas3D.RenderTargetBackground</db:code> and <db:code>Canvas3D.RenderTargetForeground</db:code> targets render directly to the same framebuffer the rest of the Qt Quick scene uses. This will improve performance on platforms that are fill-rate limited, but using these targets imposes several limitations on the usage of <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Synchronous <db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link> commands are not supported outside <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#initializeGL-signal">Canvas3D.initializeGL</db:link>() signal handler when rendering directly to Qt Quick scene framebuffer, as they cause portions of the command queue to be executed outside the normal frame render sequence, which interferes with the frame clearing logic. Using them will usually result in <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> content not rendering properly. A synchronous command is any <db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link> command that requires waiting for <db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link> command queue to finish executing before it returns, such as <db:link xlink:href="qml-qtcanvas3d-context3d.xml#getError-method">Context3D.getError</db:link>(), <db:link xlink:href="qml-qtcanvas3d-context3d.xml#finish-method">Context3D.finish</db:link>(), or <db:link xlink:href="qml-qtcanvas3d-context3d.xml#readPixels-method">Context3D.readPixels</db:link>(). When in doubt, see the individual command documentation to see if that command is synchronous. If your application requires synchronous commands outside <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#initializeGL-signal">Canvas3D.initializeGL</db:link>() signal handler, you should use <db:code>Canvas3D.RenderTargetOffscreenBuffer</db:code> render target.</db:para>
</db:listitem>
<db:listitem>
<db:para>Only <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> items that fill the entire window are supported. Note that you can still control the actual rendering area by using an appropriate viewport.</db:para>
</db:listitem>
<db:listitem>
<db:para>The default framebuffer is automatically cleared by <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> every time before the Qt Quick scene renders a frame, even if there are no <db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link> commands queued for that frame. This requires <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> to store the commands used to draw the previous frame in case the window is updated by some other component than <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> and use those commands to render the <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> content for frames that do not have fresh content. Only commands issued inside <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#paintGL-signal">Canvas3D.paintGL</db:link>() signal handler are stored this way. You need to make sure that the content of your <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#paintGL-signal">Canvas3D.paintGL</db:link>() signal handler is implemented so that it is safe to execute its commands repeatedly. Mainly this means making sure you don't use any synchronous commands or commands that create new persistent OpenGL resources there.</db:para>
</db:listitem>
<db:listitem>
<db:para>Issuing <db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link> commands outside <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#paintGL-signal">Canvas3D.paintGL</db:link>() and <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#initializeGL-signal">Canvas3D.initializeGL</db:link>() signal handlers can in some cases cause unwanted flickering of <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> content, particularly if on-demand rendering is used. It is recommended to avoid issuing any <db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link> commands outside these two signal handlers.</db:para>
</db:listitem>
<db:listitem>
<db:para>When drawing to the foreground, you should never issue a <db:link xlink:href="qml-qtcanvas3d-context3d.xml#clear-method">Context3D.clear</db:link>(Context3D.GL_COLOR_BUFFER_BIT) command targeting the default framebuffer, as that will clear all other Qt Quick items from the scene. Clearing depth and stencil buffers is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Antialiasing is only supported if the surface format of the window supports multisampling. You may need to specify the surface format of the window explicitly in your <db:code>main.cpp</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>You lose the ability to control the z-order of the <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> item itself, as it is always drawn either behind or in front of all other Qt Quick items.</db:para>
</db:listitem>
<db:listitem>
<db:para>The context attributes given as <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link>.<db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#getContext-method">getContext</db:link>() parameters are ignored and the corresponding values of the Qt Quick context are used.</db:para>
</db:listitem>
<db:listitem>
<db:para>Drawing to the background or the foreground doesn't work when Qt Quick is using OpenGL core profile, as <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> requires either OpenGL 2.x compatibility or OpenGL ES2.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This property can only be modified before the <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> item has been rendered for the first time.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="contextLost-signal">
<db:title>void contextLost()</db:title>
<db:para>Emitted when OpenGL context is lost. This happens whenever the parent window of the <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> is destroyed (or otherwise loses its context), or <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> is moved to a different window. Removing <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> from a window and adding it back to the same window doesn't cause context loss, as long as the window itself stays alive.</db:para>
<db:para>When context is lost, all objects created by <db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link> are invalidated.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onContextLost</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#contextRestored-signal">contextRestored</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextRestored-signal">
<db:title>void contextRestored()</db:title>
<db:para>Emitted when OpenGL context is restored after a loss of context occurred. The <db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link> attached to the canvas needs to be reinitialized, so <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#initializeGL-signal">initializeGL</db:link> is also emitted after this signal.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onContextRestored</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#contextLost-signal">contextLost</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initializeGL-signal">
<db:title>void initializeGL()</db:title>
<db:para>Emitted once when <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> is ready and OpenGL state initialization can be done by the client.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onInitializeGL</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="paintGL-signal">
<db:title>void paintGL()</db:title>
<db:para>Emitted each time a new frame should be drawn to <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link>. Driven by the Qt Quick scenegraph loop.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPaintGL</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="frameSetupTimeMs-method">
<db:title>[since QtCanvas3D 1.1] int frameSetupTimeMs()</db:title>
<db:para>This method returns the number of milliseconds <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> took to process the PaintGL signal for the previous frame. Before any frames have been rendered this method returns 0. This time doesn't include time spent on actual OpenGL rendering of the frame, nor the time the scene graph takes to present the frame to the screen. This value is updated after PaintGL signal handler returns.</db:para>
<db:para>This method was introduced in QtCanvas3D 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#fps-prop">fps</db:link></db:member>
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#frameTimeMs-method">frameTimeMs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameTimeMs-method">
<db:title>int frameTimeMs()</db:title>
<db:para>This method returns the number of milliseconds the renderer took to process the OpenGL portion of the rendering for the previous frame. Before any frames have been rendered this method returns 0. This time is measured from the point OpenGL commands are transferred to render thread to the time glFinish() returns, so it doesn't include the time spent parsing JavaScript, nor the time the scene graph takes to present the frame to the screen. This value is updated for the previous frame when the next frame OpenGL command transfer is done.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#fps-prop">fps</db:link></db:member>
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#frameSetupTimeMs-method">frameSetupTimeMs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getContext-method">
<db:title>Context3D getContext(string <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Returns the 3D rendering context that allows 3D rendering calls to be made. The <db:code role="parameter">type</db:code> parameter is ignored for now, but a string is expected to be given.</db:para>
</db:section>
<db:section xml:id="getContext-method-1">
<db:title>Context3D getContext(string <db:emphasis>type</db:emphasis>, Canvas3DContextAttributes <db:emphasis>options</db:emphasis>)</db:title>
<db:para>Returns the 3D rendering context that allows 3D rendering calls to be made. The <db:code role="parameter">type</db:code> parameter is ignored for now, but a string is expected to be given. If <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link>.<db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#renderTarget-prop">renderTarget</db:link> property value is either <db:code>Canvas3D.RenderTargetBackground</db:code> or <db:code>Canvas3D.RenderTargetForeground</db:code>, the <db:code role="parameter">options</db:code> parameter is also ignored, the context attributes of the Qt Quick context are used, and the <db:link xlink:href="qml-qtcanvas3d-canvas3dcontextattributes.xml#preserveDrawingBuffer-prop">Canvas3DContextAttributes.preserveDrawingBuffer</db:link> property is forced to <db:code>false</db:code>. The <db:code role="parameter">options</db:code> parameter is only parsed when the first call to <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#getContext-method">getContext</db:link>() is made and is ignored in subsequent calls if given. If the first call is made without giving the <db:code role="parameter">options</db:code> parameter, then the context and render target is initialized with default configuration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3dcontextattributes.xml">Canvas3DContextAttributes</db:link></db:member>
<db:member><db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link></db:member>
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#renderTarget-prop">renderTarget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestRender-method">
<db:title>void requestRender()</db:title>
<db:para>Queues a new frame for rendering when <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#renderOnDemand-prop">Canvas3D.renderOnDemand</db:link> property is <db:code>true</db:code>. Does nothing when <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#renderOnDemand-prop">Canvas3D.renderOnDemand</db:link> property is <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
