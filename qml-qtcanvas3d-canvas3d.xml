<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Canvas3D QML Type</db:title>
<db:productname>QtCanvas3D</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>QtCanvas3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Canvas that provides a 3D rendering context.</db:para>
<db:para>This type was introduced in QtCanvas3D 1.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtCanvas3D 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtCanvas3D 1.0</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> is a QML element that, when placed in your Qt Quick 2 scene, allows you to get a 3D rendering context and call 3D rendering API calls through that context object. Use of the rendering API requires knowledge of OpenGL like rendering APIs.</db:para>
<db:para>There are two functions that are called by the <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml">Canvas3D</db:link> implementation:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>initializeGL is emitted before the first frame is rendered, and usually during that you get the 3D context and initialize resources to be used later on during the rendering cycle.</db:para>
</db:listitem>
<db:listitem>
<db:para>paintGL is emitted for each frame to be rendered, and usually during that you submit 3D rendering calls to draw whatever 3D content you want to be displayed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="devicePixelRatio-prop">
<db:title>devicePixelRatio : float</db:title>
<db:para>Specifies the ratio between logical pixels (used by the Qt Quick) and actual physical on-screen pixels (used by the 3D rendering).</db:para>
</db:section>
<db:section xml:id="fps-prop">
<db:title>fps : int</db:title>
<db:para>This property specifies the current frames per seconds, the value is calculated every 500 ms.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#frameTimeMs-method">frameTimeMs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixelSize-prop">
<db:title>pixelSize : size</db:title>
<db:para>Specifies the size of the render target surface in physical on-screen pixels used by the 3D rendering.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="frameTimeMs-method">
<db:title>int frameTimeMs()</db:title>
<db:para>* * This method returns the number of milliseconds the last rendered frame took to process. Before * any frames have been rendered this method returns 0. This time is measured from the point * the paintGL() signal was sent to the time glFinish() returns. This excludes the time it * takes to present the frame on screen. *</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#fps-prop">fps</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getContext-method">
<db:title>Context3D getContext(string <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Returns the 3D rendering context that allows 3D rendering calls to be made. The <db:code role="parameter">type</db:code> parameter is ignored for now, but a string is expected to be given.</db:para>
</db:section>
<db:section xml:id="getContext-method-1">
<db:title>Context3D getContext(string <db:emphasis>type</db:emphasis>, Canvas3DContextAttributes <db:emphasis>options</db:emphasis>)</db:title>
<db:para>Returns the 3D rendering context that allows 3D rendering calls to be made. The <db:code role="parameter">type</db:code> parameter is ignored for now, but a string is expected to be given. The <db:code role="parameter">options</db:code> parameter is only parsed when the first call to <db:link xlink:href="qml-qtcanvas3d-canvas3d.xml#getContext-method">getContext</db:link>() is made and is ignored in subsequent calls if given. If the first call is made without giving the <db:code role="parameter">options</db:code> parameter, then the context and render target is initialized with default configuration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-canvas3dcontextattributes.xml">Canvas3DContextAttributes</db:link></db:member>
<db:member><db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
