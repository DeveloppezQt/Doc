<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Adding OpenSSL Support for Android</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides instructions to package OpenSSL libraries with your Qt application for Android.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt installation package comes with OpenSSL support but the OpenSSL libraries are not part of the package due to legal restrictions in some countries. If your application depends on OpenSSL, consider packaging the SSL libraries with your Application Package (APK) as the target device may or may not have them. You can use the <db:link xlink:href="">QSslSocket::supportsSsl()</db:link> static function to check for SSL support on the target.</db:para>
<db:para>The following instructions guide you to build and add the OpenSSL libraries to the APK:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Download the latest OpenSSL 1.1.x sources from <db:link xlink:href="http://www.openssl.org/source">http://www.openssl.org/source</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Extract the sources to a folder and navigate to that folder using the CLI.</db:para>
<db:note>
<db:para>If your development platform is Windows, you need msys with perl v5.14 or later to build OpenSSL.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Add android llvm toolchain to your path:</db:para>
<db:programlisting language="cpp" role="bad">export PATH=&quot;&amp;lt;android_ndk_path&amp;gt;/toolchains/llvm/prebuilt/&amp;lt;host&amp;gt;/bin&quot;:$PATH
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Configure the OpenSSL sources to build for Android using the following command:</db:para>
<db:programlisting language="cpp" role="bad">./Configure shared android-&amp;lt;arch&amp;gt; -D__ANDROID_API__=21
</db:programlisting>
<db:note>
<db:para>You must consider enabling/disabling the SSL features based on the legal restrictions in the region where your application is available. See the <db:link xlink:href="http://wiki.openssl.org/index.php/Compilation_and_Installation#Configure_Options">SSL configure options</db:link> for details about the configurable features.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Run make SHLIB_VERSION_NUMBER= SHLIB_EXT=_1_1.so build_libs to build libcrypto and libssl shared libraries that are not versioned, but with a <db:emphasis>_1_1</db:emphasis> suffix. If you want to use a different suffix, then you must set the ANDROID_OPENSSL_SUFFIX environment variable before you access the Qt Network API. Without a suffix, Android 5 (API 21) will load the system libraries <db:emphasis>libcrypto.so</db:emphasis> and <db:emphasis>libssl.so</db:emphasis>, which are OpenSSL 1.0, rather than your libraries.</db:para>
<db:note>
<db:para>Android does not load versioned libraries.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Open your Qt project using Qt Creator and update the &quot;Build Android APK&quot; settings to add <db:emphasis>libcrypto</db:emphasis> and <db:emphasis>libssl</db:emphasis> as additional libraries for your project.</db:para>
</db:listitem>
<db:listitem>
<db:para>Run your application to see it running on the device.</db:para>
</db:listitem>
</db:orderedlist>
<db:note>
<db:para>here <db:link xlink:href="https://github.com/KDAB/android_openssl">https://github.com/KDAB/android_openssl</db:link> you can find a script which can be used to compile openssl for all android abis and also latest prebuilt libs.</db:para>
</db:note>
<db:para>Qt Creator builds your application and creates an application package (APK) with the OpenSSL libraries bundled in it. Once the APK is ready, it uses adb to deploy the APK on the target you chose and launch the application.</db:para>
</db:article>
