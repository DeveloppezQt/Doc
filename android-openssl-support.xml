<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Adding OpenSSL Support for Android</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="deployment-android.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Deploying an Application on Android"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-manifest-file-configuration.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Qt Android Manifest File Configuration"/></db:extendedlink>
<db:abstract>
<db:para>How to package OpenSSL libraries with a Qt for Android application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt installation package comes with OpenSSL support, but the OpenSSL libraries are not part of the package due to legal restrictions in some countries. If your application depends on OpenSSL, consider packaging the SSL libraries with your Application Package (APK or AAB) as the target device may or may not have them.</db:para>
<db:para>You can use the <db:link xlink:href="qsslsocket.xml#supportsSsl">QSslSocket::supportsSsl</db:link>() static function to check for SSL support on the target device. First, include the header:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QSslSocket&amp;gt;
</db:programlisting>
<db:para>Then use the following line to check if SSL is supported:</db:para>
<db:programlisting language="cpp">qDebug() &amp;lt;&amp;lt; &quot;Device supports OpenSSL: &quot; &amp;lt;&amp;lt; QSslSocket::supportsSsl();
</db:programlisting>
<db:para>Check Qt Creator's Application Output section or the Android logcat for that log message.</db:para>
<db:section xml:id="adding-openssl-libraries">
<db:title>Adding OpenSSL Libraries</db:title>
<db:para>Using the convenience <db:link xlink:href="https://github.com/KDAB/android_openssl">OpenSSL for Android</db:link> repository, you can directly include OpenSSL libraries in your own project.</db:para>
<db:para>With CMake, add the following to your CMakeLists.txt:</db:para>
<db:programlisting language="cpp" role="bad">if (ANDROID)
    include(FetchContent)
    FetchContent_Declare(
        android_openssl
        DOWNLOAD_EXTRACT_TIMESTAMP true
        URL https://github.com/KDAB/android_openssl/archive/refs/heads/master.zip
    )
    FetchContent_MakeAvailable(android_openssl)
    include(${android_openssl_SOURCE_DIR}/android_openssl.cmake)
endif()
</db:programlisting>
<db:para><db:emphasis role="bold">Or</db:emphasis> if you cloned the repository into a subdirectory:</db:para>
<db:programlisting language="cpp" role="bad">include(&amp;lt;path/to/android_openssl&amp;gt;/android_openssl.cmake)
</db:programlisting>
<db:para>Then, add the libraries to your targets:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_executable(your_target_name ..)
qt_add_executable(your_second_target_name ..)

if (ANDROID)
    add_android_openssl_libraries(your_target_name your_second_target_name)
endif()
</db:programlisting>
<db:para>For qmake, add the following to your .pro file:</db:para>
<db:programlisting language="cpp" role="bad">android: include(&amp;lt;path/to/android_openssl/openssl.pri)
</db:programlisting>
<db:para>Alternatively, to add extra libraries, such as libcrypto and libssl. For CMake, use:</db:para>
<db:programlisting language="cpp" role="bad">set_target_properties(&amp;lt;target_name&amp;gt; PROPERTIES
    QT_ANDROID_EXTRA_LIBS &quot;&amp;lt;path_to_libs_dir&amp;gt;/libcrypto_3.so&quot; &quot;&amp;lt;path_to_libs_dir&amp;gt;/libssl_3.so&quot;
)
</db:programlisting>
<db:para>Or for qmake use:</db:para>
<db:programlisting language="cpp" role="bad">ANDROID_EXTRA_LIBS += \
    &amp;lt;path_to_libs_dir&amp;gt;/libcrypto_3.so \
    &amp;lt;path_to_libs_dir&amp;gt;/libssl_3.so
</db:programlisting>
<db:note>
<db:para>When targeting multiple architectures, include OpenSSL libraries for all the targeted architectures.</db:para>
</db:note>
<db:para>Using Qt Creator, it is possible to add extra libraries. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-project-qmake-libraries.html">Qt Creator: Adding Libraries to Projects</db:link>.</db:para>
</db:section>
<db:section xml:id="building-openssl-for-android">
<db:title>Building OpenSSL for Android</db:title>
<db:para>The following instructions guide you to build the OpenSSL libraries manually:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Download <db:link xlink:href="http://www.openssl.org/source">OpenSSL</db:link> sources.</db:para>
</db:listitem>
<db:listitem>
<db:para>Extract the sources to a folder and navigate to that folder using the CLI.</db:para>
<db:note>
<db:para>If your development platform is Windows, you need msys with perl 5.14 or later to build OpenSSL.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Add the Android LLVM toolchain to your path, for example, for Linux use:</db:para>
<db:programlisting language="cpp" role="bad">export PATH=~/Android/Sdk/ndk/26.1.10909125/toolchains/llvm/prebuilt/&amp;lt;host&amp;gt;/bin:$PATH
</db:programlisting>
<db:para>The Android SDK is commonly installed by Qt Creator or Android Studio in the following locations:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Linux: ~/Android/Sdk/</db:para>
</db:listitem>
<db:listitem>
<db:para>macOS: ~/Library/Android/sdk/</db:para>
</db:listitem>
<db:listitem>
<db:para>Windows: C:\Users\&lt;USER&gt;\AppData\Local\Android\Sdk\</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Configure the OpenSSL sources to build for Android using the following command, where &lt;arch&gt; can take a value of: arm, arm64, x86 or x86_64:</db:para>
<db:programlisting language="cpp" role="bad">./Configure shared android-&amp;lt;arch&amp;gt; -D__ANDROID_API__=26
</db:programlisting>
<db:note>
<db:para>You must consider enabling or disabling the SSL features based on the legal restrictions in the region where your application is available. For more information about the configurable features, see <db:link xlink:href="http://wiki.openssl.org/index.php/Compilation_and_Installation#Configure_Options">OpenSSL Configure Options</db:link>.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Without a suffix, Android loads the system libraries libcrypto.so and libssl.so. These may be different versions from your libraries or from what Qt expects. To ensure that Qt apps can load the manually built OpenSSL libraries, run the following commands:</db:para>
<db:programlisting language="cpp" role="bad">make -j$(nproc) SHLIB_VERSION_NUMBER= build_libs

mkdir -p ${out_path}
cp libcrypto.so ${out_path}/libcrypto_3.so
cp libssl.so ${out_path}/libssl_3.so

cd ${out_path}
patchelf --set-soname libcrypto_3.so libcrypto_3.so
patchelf --set-soname libssl_3.so libssl_3.so
patchelf --replace-needed libcrypto.so libcrypto_3.so libssl_3.so
</db:programlisting>
<db:note>
<db:para>Though the libcrypto and libssl shared libraries that are not versioned, they will have a <db:emphasis>_3</db:emphasis> suffix.</db:para>
</db:note>
<db:para>Then set the environment variable in your main.cpp file:</db:para>
<db:programlisting language="cpp">qputenv(&quot;ANDROID_OPENSSL_SUFFIX&quot;, &quot;&amp;lt;custom_suffix&amp;gt;&quot;);
</db:programlisting>
<db:note>
<db:para>Android does not load versioned libraries.</db:para>
</db:note>
</db:listitem>
</db:orderedlist>
</db:section>
</db:article>
