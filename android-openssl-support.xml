<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Adding OpenSSL Support for Android</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="deployment-android.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Deploying an Application on Android"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-manifest-file-configuration.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Qt Android Manifest File Configuration"/></db:extendedlink>
<db:abstract>
<db:para>How to package OpenSSL libraries with a Qt for Android application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt installation package comes with OpenSSL support but the OpenSSL libraries are not part of the package due to legal restrictions in some countries. If your application depends on OpenSSL, consider packaging the SSL libraries with your Application Package (APK) as the target device may or may not have them.</db:para>
<db:para>You can use the <db:link xlink:href="qsslsocket.xml#supportsSsl">QSslSocket::supportsSsl</db:link>() static function to check for SSL support on the target device. First include the header:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QSslSocket&amp;gt;
</db:programlisting>
<db:para>Then use the following line to check if SSL is supported:</db:para>
<db:programlisting language="cpp">qDebug() &amp;lt;&amp;lt; &quot;Device supports OpenSSL: &quot; &amp;lt;&amp;lt; QSslSocket::supportsSsl();
</db:programlisting>
<db:para>Check Qt Creator's Application Output section or the Android logcat for the result.</db:para>
<db:section xml:id="building-openssl-for-android">
<db:title>Building OpenSSL for Android</db:title>
<db:para>A convenient Github repository with a binary and a build script can be used without the need for a manual step-by-step build. For more information, see <db:link xlink:href="https://github.com/KDAB/android_openssl">OpenSSL for Android</db:link>. If you download the repository, you can then skip to <db:link xlink:href="android-openssl-support.xml#using-openssl-libraries-with-qt-for-android">Using OpenSSL Libraries with Qt for Android</db:link>.</db:para>
<db:para>The following instructions guide you to build the OpenSSL libraries manually:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Download <db:link xlink:href="http://www.openssl.org/source">OpenSSL</db:link> sources.</db:para>
</db:listitem>
<db:listitem>
<db:para>Extract the sources to a folder and navigate to that folder using the CLI.</db:para>
<db:note>
<db:para>If your development platform is Windows, you need msys with perl v5.14 or later to build OpenSSL.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Add the Android LLVM toolchain to your path:</db:para>
<db:programlisting language="cpp" role="bad">export PATH=&quot;&amp;lt;android_ndk_path&amp;gt;/toolchains/llvm/prebuilt/&amp;lt;host&amp;gt;/bin&quot;:$PATH
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Configure the OpenSSL sources to build for Android using the following command:</db:para>
<db:programlisting language="cpp" role="bad">./Configure shared android-&amp;lt;arch&amp;gt; -D__ANDROID_API__=XX
</db:programlisting>
<db:para>Where:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>&lt;arch&gt; can take a value of: arm, arm64, x86, x86_64.</db:para>
</db:listitem>
<db:listitem>
<db:para>XX is a two-digit number equal to the minimum API level for this Qt version: see <db:link xlink:href="windows.xml#supported-configurations">Qt for Android support</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>You must consider enabling or disabling the SSL features based on the legal restrictions in the region where your application is available. For more information about the configurable features, see <db:link xlink:href="http://wiki.openssl.org/index.php/Compilation_and_Installation#Configure_Options">OpenSSL Configure Options</db:link>.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Without a suffix, Android loads the system libraries libcrypto.so and libssl.so. These may be different versions from your libraries or from what Qt expects. To ensure that Qt apps can load the manually built OpenSSL libraries, run the following commands:</db:para>
<db:programlisting language="cpp" role="bad">make -j$(nproc) SHLIB_VERSION_NUMBER= build_libs

cp libcrypto.so &quot;${out_path}/libcrypto_3.so&quot;
cp libssl.so &quot;${out_path}/libssl_3.so&quot;

cd ${out_path}
patchelf --set-soname libcrypto_3.so libcrypto_3.so
patchelf --set-soname libssl_3.so libssl_3.so
patchelf --replace-needed libcrypto.so libcrypto_3.so libssl_3.so
</db:programlisting>
<db:note>
<db:para>Though the libcrypto and libssl shared libraries that are not versioned, they will have a <db:emphasis>_3</db:emphasis> suffix.</db:para>
</db:note>
<db:para>Then set the environment variable in your main.cpp file:</db:para>
<db:programlisting language="cpp">qputenv(&quot;ANDROID_OPENSSL_SUFFIX&quot;, &quot;&amp;lt;custom_suffix&amp;gt;&quot;);
</db:programlisting>
<db:note>
<db:para>Android does not load versioned libraries.</db:para>
</db:note>
</db:listitem>
</db:orderedlist>
</db:section>
<db:section xml:id="using-openssl-libraries-with-qt-for-android">
<db:title>Using OpenSSL Libraries with Qt for Android</db:title>
<db:para>Depending on the method you obtained the OpenSSL libraries, you can use one of the following step to include those libraries in your project:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Using the project files:</db:para>
<db:para>Using the convenience <db:link xlink:href="https://github.com/KDAB/android_openssl">OpenSSL for Android</db:link> repository, you can directly add the include projects into your own project, by adding the following to your .pro file:</db:para>
<db:programlisting language="cpp" role="bad">android: include(&amp;lt;path/to/android_openssl/openssl.pri)
</db:programlisting>
<db:para>If using CMake, add the following to your CMakeLists.txt:</db:para>
<db:programlisting language="cpp" role="bad">if (ANDROID)
    include(FetchContent)
    FetchContent_Declare(
      android_openssl
      DOWNLOAD_EXTRACT_TIMESTAMP true
      URL      https://github.com/KDAB/android_openssl/archive/refs/heads/master.zip
    )
    FetchContent_MakeAvailable(android_openssl)
    include(${android_openssl_SOURCE_DIR}/android_openssl.cmake)
endif()
</db:programlisting>
<db:para><db:emphasis role="bold">Or</db:emphasis> if you cloned the repository into a subdirectory:</db:para>
<db:programlisting language="cpp" role="bad">include(&amp;lt;path/to/android_openssl&amp;gt;/android_openssl.cmake)
</db:programlisting>
<db:para>Then add:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_executable(your_target_name ..)
qt_add_executable(your_second_target_name ..)

if (ANDROID)
    add_android_openssl_libraries(your_target_name your_second_target_name)
endif()
</db:programlisting>
<db:para>Alternatively, you can use the following project variable to add extra libraries, such as libcrypto and libssl.</db:para>
<db:para>For QMake use:</db:para>
<db:programlisting language="cpp" role="bad">ANDROID_EXTRA_LIBS += \
    &amp;lt;path_to_libs_dir&amp;gt;/libcrypto_3.so \
    &amp;lt;path_to_libs_dir&amp;gt;/libssl_3.so
</db:programlisting>
<db:para>For CMake:</db:para>
<db:programlisting language="cpp" role="bad">set_property(TARGET &amp;lt;target name&amp;gt; PROPERTY QT_ANDROID_EXTRA_LIBS
    &amp;lt;path_to_libs_dir&amp;gt;/libcrypto_3.so
    &amp;lt;path_to_libs_dir&amp;gt;/libssl_3.so)
</db:programlisting>
<db:note>
<db:para>When targeting multiple architectures, include OpenSSL libraries for all the targeted architectures.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Using Qt Creator, it is possible to add extra libraries. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-project-qmake-libraries.html">Qt Creator: Adding Libraries to Projects</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
