<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QInputDevice Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qinputdevice.xml">QInputDevice</db:link> class describes a device from which a <db:link xlink:href="qinputevent.xml">QInputEvent</db:link> originates.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QInputDevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpointingdevice.xml" xlink:role="class">QPointingDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Each <db:link xlink:href="qinputevent.xml">QInputEvent</db:link> contains a <db:link xlink:href="qinputdevice.xml">QInputDevice</db:link> pointer to allow accessing device-specific properties like type, capabilities and seat. It is the responsibility of the platform or generic plug-ins to discover, create and register an instance of this class corresponding to each available input device, via QWindowSystemInterface::registerInputDevice(), before generating any input event referring to that device.</db:para>
<db:para>Applications do not need to instantiate this class, but can read the instances pointed to by <db:link xlink:href="qinputevent.xml#device">QInputEvent::device</db:link>() and <db:link xlink:href="qinputdevice.xml#devices">QInputDevice::devices</db:link>().</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Capability-enum">
<db:title>enum QInputDevice::Capability</db:title>
<db:bridgehead renderas="sect2">flags QInputDevice::Capabilities</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Capability</db:enumname>
<db:enumitem>
<db:enumidentifier>None</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Position</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Area</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Pressure</db:enumidentifier>
<db:enumvalue>0x0004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Velocity</db:enumidentifier>
<db:enumvalue>0x0008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NormalizedPosition</db:enumidentifier>
<db:enumvalue>0x0020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MouseEmulation</db:enumidentifier>
<db:enumvalue>0x0040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PixelScroll</db:enumidentifier>
<db:enumvalue>0x0080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Scroll</db:enumidentifier>
<db:enumvalue>0x0100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Hover</db:enumidentifier>
<db:enumvalue>0x0200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Rotation</db:enumidentifier>
<db:enumvalue>0x0400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>XTilt</db:enumidentifier>
<db:enumvalue>0x0800</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>YTilt</db:enumidentifier>
<db:enumvalue>0x1000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TangentialPressure</db:enumidentifier>
<db:enumvalue>0x2000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ZPosition</db:enumidentifier>
<db:enumvalue>0x4000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>All</db:enumidentifier>
<db:enumvalue>0x7FFFFFFF</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QInputDevice::Capabilities</db:typedefname>
</db:typedefsynopsis>
<db:para>Indicates what kind of information the input device or its driver can provide.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No information about input device capabilities available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::Position</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>Indicates that position information is available, meaning that the position() family of functions in the touch points return valid points.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::Area</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>Indicates that touch area information is available, meaning that <db:link xlink:href="qeventpoint.xml#ellipseDiameters-prop">QEventPoint::ellipseDiameters</db:link>() in the touch points return valid values.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::Pressure</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>Indicates that pressure information is available, meaning that <db:link xlink:href="qeventpoint.xml#pressure-prop">QEventPoint::pressure</db:link>() returns a valid value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::Velocity</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>Indicates that velocity information is available, meaning that <db:link xlink:href="qeventpoint.xml#velocity-prop">QEventPoint::velocity</db:link>() returns a valid vector.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::NormalizedPosition</db:code></db:para>
</db:td>
<db:td><db:code>0x0020</db:code></db:td>
<db:td>
<db:para>Indicates that the normalized position is available, meaning that <db:link xlink:href="qeventpoint.xml#globalPosition-prop">QEventPoint::globalPosition</db:link>() returns a valid value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::MouseEmulation</db:code></db:para>
</db:td>
<db:td><db:code>0x0040</db:code></db:td>
<db:td>
<db:para>Indicates that the device synthesizes mouse events.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::Scroll</db:code></db:para>
</db:td>
<db:td><db:code>0x0100</db:code></db:td>
<db:td>
<db:para>Indicates that the device has a scroll capability.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::PixelScroll (since Qt 6.2)</db:code></db:para>
</db:td>
<db:td><db:code>0x0080</db:code></db:td>
<db:td>
<db:para>Indicates that the device (usually a <db:link xlink:href="qinputdevice.xml#DeviceType-enum">touchpad</db:link>) scrolls with <db:link xlink:href="qwheelevent.xml#pixelDelta">pixel precision</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::Hover</db:code></db:para>
</db:td>
<db:td><db:code>0x0200</db:code></db:td>
<db:td>
<db:para>Indicates that the device has a hover capability.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::Rotation</db:code></db:para>
</db:td>
<db:td><db:code>0x0400</db:code></db:td>
<db:td>
<db:para>Indicates that <db:link xlink:href="qeventpoint.xml#rotation-prop">rotation</db:link> information is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::XTilt</db:code></db:para>
</db:td>
<db:td><db:code>0x0800</db:code></db:td>
<db:td>
<db:para>Indicates that <db:link xlink:href="qtabletevent.xml#xTilt">tilt</db:link> information is available for the X-axis.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::YTilt</db:code></db:para>
</db:td>
<db:td><db:code>0x1000</db:code></db:td>
<db:td>
<db:para>Indicates that <db:link xlink:href="qtabletevent.xml#yTilt">tilt</db:link> information is available for the Y-axis.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::TangentialPressure</db:code></db:para>
</db:td>
<db:td><db:code>0x2000</db:code></db:td>
<db:td>
<db:para>Indicates that <db:link xlink:href="qtabletevent.xml#tangentialPressure">tangential pressure</db:link> information is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::ZPosition</db:code></db:para>
</db:td>
<db:td><db:code>0x4000</db:code></db:td>
<db:td>
<db:para>Indicates that position information for the <db:link xlink:href="qtabletevent.xml#z">Z-axis</db:link> is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">Capability</db:emphasis>::All</db:code></db:para>
</db:td>
<db:td><db:code>0x7FFFFFFF</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Capabilities</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Capability&gt;. </db:code>It stores an OR combination of <db:code>Capability</db:code> values.</db:para>
</db:section>
<db:section xml:id="DeviceType-enum">
<db:title>enum QInputDevice::DeviceType</db:title>
<db:bridgehead renderas="sect2">flags QInputDevice::DeviceTypes</db:bridgehead>
<db:enumsynopsis>
<db:enumname>DeviceType</db:enumname>
<db:enumitem>
<db:enumidentifier>Unknown</db:enumidentifier>
<db:enumvalue>0x0000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Mouse</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TouchScreen</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TouchPad</db:enumidentifier>
<db:enumvalue>0x0004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Puck</db:enumidentifier>
<db:enumvalue>0x0008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Stylus</db:enumidentifier>
<db:enumvalue>0x0010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Airbrush</db:enumidentifier>
<db:enumvalue>0x0020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Keyboard</db:enumidentifier>
<db:enumvalue>0x1000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllDevices</db:enumidentifier>
<db:enumvalue>0x7FFFFFFF</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QInputDevice::DeviceTypes</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum represents the type of device that generated a <db:link xlink:href="qpointerevent.xml">QPointerEvent</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">DeviceType</db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
<db:td>
<db:para>The device cannot be identified.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">DeviceType</db:emphasis>::Mouse</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>A mouse.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">DeviceType</db:emphasis>::TouchScreen</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>In this type of device, the touch surface and display are integrated. This means the surface and display typically have the same size, such that there is a direct relationship between the touch points' physical positions and the coordinate reported by <db:link xlink:href="qeventpoint.xml">QEventPoint</db:link>. As a result, Qt allows the user to interact directly with multiple QWidgets, QGraphicsItems, or Qt Quick Items at the same time.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">DeviceType</db:emphasis>::TouchPad</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>In this type of device, the touch surface is separate from the display. There is not a direct relationship between the physical touch location and the on-screen coordinates. Instead, they are calculated relative to the current mouse position, and the user must use the touch-pad to move this reference point. Unlike touch-screens, Qt allows users to only interact with a single <db:link xlink:href="qwidget.xml">QWidget</db:link> or <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> at a time.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">DeviceType</db:emphasis>::Stylus</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>A pen-like device used on a graphics tablet such as a Wacom tablet, or on a touchscreen that provides a separate stylus sensing capability.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">DeviceType</db:emphasis>::Airbrush</db:code></db:para>
</db:td>
<db:td><db:code>0x0020</db:code></db:td>
<db:td>
<db:para>A stylus with a thumbwheel to adjust <db:link xlink:href="qtabletevent.xml#tangentialPressure">tangentialPressure</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">DeviceType</db:emphasis>::Puck</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>A device that is similar to a flat mouse with a transparent circle with cross-hairs.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">DeviceType</db:emphasis>::Keyboard</db:code></db:para>
</db:td>
<db:td><db:code>0x1000</db:code></db:td>
<db:td>
<db:para>A keyboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdevice.xml">QInputDevice</db:link></db:emphasis>::<db:emphasis role="bold">DeviceType</db:emphasis>::AllDevices</db:code></db:para>
</db:td>
<db:td><db:code>0x7FFFFFFF</db:code></db:td>
<db:td>
<db:para>Any of the above (used as a default filter value).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>DeviceTypes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;DeviceType&gt;. </db:code>It stores an OR combination of <db:code>DeviceType</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QInputDevice">
<db:title>QInputDevice::QInputDevice(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QInputDevice</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QInputDevice(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new invalid input device instance as a child of <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QInputDevice-1">
<db:title>QInputDevice::QInputDevice(const QString &amp;<db:emphasis>name</db:emphasis>, qint64 <db:emphasis>id</db:emphasis>, QInputDevice::DeviceType <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>seatName</db:emphasis> = QString(), QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QInputDevice</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QInputDevice::DeviceType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>seatName</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QInputDevice(const QString &amp;name, qint64 id, QInputDevice::DeviceType type, const QString &amp;seatName, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new input device instance. The given <db:code role="parameter">name</db:code> is normally a manufacturer-assigned model name if available, or something else identifiable; <db:code role="parameter">id</db:code> is a platform-specific number that will be unique per device (for example the xinput ID on X11); <db:code role="parameter">type</db:code> identifies what kind of device. On window systems that are capable of handling input from multiple users or sets of input devices at the same time (such as Wayland or X11), <db:code role="parameter">seatName</db:code> identifies the name of the set of devices that will be used together. If the device is a child or slave device (for example one of several mice that can take turns moving the &quot;core pointer&quot;), the master device should be given as the <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The platform plugin creates, registers and continues to own each device instance; usually <db:code role="parameter">parent</db:code> should be given for memory management purposes even if there is no master for a particular device.</db:para>
<db:para>By default, <db:link xlink:href="qinputdevice.xml#capabilities">capabilities</db:link>() are <db:code>None</db:code>.</db:para>
</db:section>
<db:section xml:id="availableVirtualGeometry">
<db:title>QRect QInputDevice::availableVirtualGeometry() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>availableVirtualGeometry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">availableVirtualGeometry</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect availableVirtualGeometry() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the region within the <db:link xlink:href="qscreen.xml#availableVirtualGeometry-prop">virtual desktop</db:link> that this device can access.</db:para>
<db:para>For example a <db:link xlink:href="qinputdevice.xml#DeviceType-enum">TouchScreen</db:link> input device is fixed in place upon a single physical screen, and usually calibrated so that this area is the same as <db:link xlink:href="qscreen.xml#geometry-prop">QScreen::geometry</db:link>(); whereas a <db:link xlink:href="qinputdevice.xml#DeviceType-enum">Mouse</db:link> can probably access all screens on the virtual desktop. A Wacom graphics tablet may be configured in a way that it's mapped to all screens, or only to the screen where the user prefers to create drawings, or to the window in which drawing occurs. A <db:link xlink:href="qinputdevice.xml#DeviceType-enum">Stylus</db:link> device that is integrated with a touchscreen may be physically limited to that screen.</db:para>
<db:para>If the returned rectangle is <db:link xlink:href="qrect.xml#isNull">null</db:link>, it means this device can access the entire virtual desktop.</db:para>
<db:note>
<db:para>Getter function for property availableVirtualGeometry. </db:para>
</db:note>
</db:section>
<db:section xml:id="capabilities">
<db:title>QInputDevice::Capabilities QInputDevice::capabilities() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QInputDevice::Capabilities</db:type>
<db:methodname>capabilities</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">capabilities</db:synopsisinfo>
<db:synopsisinfo role="signature">QInputDevice::Capabilities capabilities() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device capabilities.</db:para>
<db:note>
<db:para>Getter function for property capabilities. </db:para>
</db:note>
</db:section>
<db:section xml:id="devices">
<db:title>[static] QList&lt;const QInputDevice *&gt; QInputDevice::devices()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;const QInputDevice *&gt;</db:type>
<db:methodname>devices</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;const QInputDevice *&gt; devices()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all registered input devices (keyboards and pointing devices).</db:para>
<db:note>
<db:para>The returned list cannot be used to add new devices. To add a simulated touch screen for an autotest, <db:link xlink:href="qtest.xml#createTouchDevice">QTest::createTouchDevice</db:link>() can be used. Platform plugins should call QWindowSystemInterface::registerInputDevice() to add devices as they are discovered.</db:para>
</db:note>
</db:section>
<db:section xml:id="hasCapability">
<db:title>bool QInputDevice::hasCapability(QInputDevice::Capability <db:emphasis>capability</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasCapability</db:methodname>
<db:methodparam>
<db:type>QInputDevice::Capability</db:type>
<db:parameter>capability</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasCapability(QInputDevice::Capability capability) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the device capabilities include the given <db:code role="parameter">capability</db:code>.</db:para>
</db:section>
<db:section xml:id="name">
<db:title>QString QInputDevice::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">name</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device name.</db:para>
<db:para>This string may be empty. It is however useful on systems that have multiple input devices: it can be used to differentiate from which device a <db:link xlink:href="qpointerevent.xml">QPointerEvent</db:link> originates.</db:para>
<db:note>
<db:para>Getter function for property name. </db:para>
</db:note>
</db:section>
<db:section xml:id="primaryKeyboard">
<db:title>[static] const QInputDevice *QInputDevice::primaryKeyboard(const QString &amp;<db:emphasis>seatName</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QInputDevice *</db:type>
<db:methodname>primaryKeyboard</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>seatName</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QInputDevice * primaryKeyboard(const QString &amp;seatName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the core or master keyboard on the given seat <db:code role="parameter">seatName</db:code>.</db:para>
</db:section>
<db:section xml:id="seatName">
<db:title>QString QInputDevice::seatName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>seatName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">seatName</db:synopsisinfo>
<db:synopsisinfo role="signature">QString seatName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the seat with which the device is associated, if known; otherwise empty.</db:para>
<db:para>Devices that are intended to be used together by one user may be configured to have the same seat name. That is only possible on Wayland and X11 platforms so far.</db:para>
<db:note>
<db:para>Getter function for property seatName. </db:para>
</db:note>
</db:section>
<db:section xml:id="seatNames">
<db:title>[static, since 6.3] QStringList QInputDevice::seatNames()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>seatNames</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList seatNames()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of seat names for all registered input devices (keyboards and pointing devices).</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="systemId">
<db:title>qint64 QInputDevice::systemId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>systemId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">systemId</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 systemId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the platform specific system ID (for example xinput ID on the X11 platform).</db:para>
<db:para>All platforms are expected to provide a unique system ID for each device.</db:para>
<db:note>
<db:para>Getter function for property systemId. </db:para>
</db:note>
</db:section>
<db:section xml:id="type">
<db:title>QInputDevice::DeviceType QInputDevice::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QInputDevice::DeviceType</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">type</db:synopsisinfo>
<db:synopsisinfo role="signature">QInputDevice::DeviceType type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device type.</db:para>
<db:note>
<db:para>Getter function for property type. </db:para>
</db:note>
</db:section>
</db:section>
</db:article>
