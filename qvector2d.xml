<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVector2D Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvector2d.xml">QVector2D</db:link> class represents a vector or vertex in 2D space.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVector2D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QVector2D is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member><db:link xlink:href="painting-3d.xml">Rendering in 3D</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Vectors are one of the main building blocks of 2D representation and drawing. They consist of two finite floating-point coordinates, traditionally called x and y.</db:para>
<db:para>The <db:link xlink:href="qvector2d.xml">QVector2D</db:link> class can also be used to represent vertices in 2D space. We therefore do not need to provide a separate vertex class.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:member>
<db:member><db:link xlink:href="qvector4d.xml">QVector4D</db:link></db:member>
<db:member><db:link xlink:href="qquaternion.xml">QQuaternion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QVector2D">
<db:title>[constexpr] QVector2D::QVector2D()</db:title>
<db:constructorsynopsis>
<db:methodname>QVector2D</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null vector, i.e. with coordinates (0, 0).</db:para>
</db:section>
<db:section xml:id="QVector2D-2">
<db:title>[constexpr] QVector2D::QVector2D(float <db:emphasis>xpos</db:emphasis>, float <db:emphasis>ypos</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QVector2D</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>xpos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>ypos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D(float xpos, float ypos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a vector with coordinates (<db:code role="parameter">xpos</db:code>, <db:code role="parameter">ypos</db:code>). Both coordinates must be finite.</db:para>
</db:section>
<db:section xml:id="QVector2D-3">
<db:title>[explicit constexpr] QVector2D::QVector2D(QPoint <db:emphasis>point</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QVector2D</db:methodname>
<db:methodparam>
<db:type>QPoint</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D(QPoint point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a vector with x and y coordinates from a 2D <db:code role="parameter">point</db:code>.</db:para>
</db:section>
<db:section xml:id="QVector2D-4">
<db:title>[explicit constexpr] QVector2D::QVector2D(QPointF <db:emphasis>point</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QVector2D</db:methodname>
<db:methodparam>
<db:type>QPointF</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D(QPointF point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a vector with x and y coordinates from a 2D <db:code role="parameter">point</db:code>.</db:para>
</db:section>
<db:section xml:id="QVector2D-5">
<db:title>[explicit constexpr] QVector2D::QVector2D(QVector3D <db:emphasis>vector</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QVector2D</db:methodname>
<db:methodparam>
<db:type>QVector3D</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D(QVector3D vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a vector with x and y coordinates from a 3D <db:code role="parameter">vector</db:code>. The z coordinate of <db:code role="parameter">vector</db:code> is dropped.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#toVector3D">toVector3D</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QVector2D-6">
<db:title>[explicit constexpr] QVector2D::QVector2D(QVector4D <db:emphasis>vector</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QVector2D</db:methodname>
<db:methodparam>
<db:type>QVector4D</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D(QVector4D vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a vector with x and y coordinates from a 3D <db:code role="parameter">vector</db:code>. The z and w coordinates of <db:code role="parameter">vector</db:code> are dropped.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#toVector4D">toVector4D</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="distanceToLine">
<db:title>[since 5.1] float QVector2D::distanceToLine(QVector2D <db:emphasis>point</db:emphasis>, QVector2D <db:emphasis>direction</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>distanceToLine</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>direction</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float distanceToLine(QVector2D point, QVector2D direction) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the distance that this vertex is from a line defined by <db:code role="parameter">point</db:code> and the unit vector <db:code role="parameter">direction</db:code>.</db:para>
<db:para>If <db:code role="parameter">direction</db:code> is a null vector, then it does not define a line. In that case, the distance from <db:code role="parameter">point</db:code> to this vertex is returned.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#distanceToPoint">distanceToPoint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="distanceToPoint">
<db:title>[since 5.1] float QVector2D::distanceToPoint(QVector2D <db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>distanceToPoint</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float distanceToPoint(QVector2D point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the distance from this vertex to a point defined by the vertex <db:code role="parameter">point</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#distanceToLine">distanceToLine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dotProduct">
<db:title>[static constexpr] float QVector2D::dotProduct(QVector2D <db:emphasis>v1</db:emphasis>, QVector2D <db:emphasis>v2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>float</db:type>
<db:methodname>dotProduct</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float dotProduct(QVector2D v1, QVector2D v2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the dot product of <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code>.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>[constexpr] bool QVector2D::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the x and y coordinates are set to 0.0, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="length">
<db:title>float QVector2D::length() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>length</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float length() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the length of the vector from the origin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#lengthSquared">lengthSquared</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#normalized">normalized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lengthSquared">
<db:title>[constexpr] float QVector2D::lengthSquared() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>lengthSquared</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float lengthSquared() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the squared length of the vector from the origin. This is equivalent to the dot product of the vector with itself.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#dotProduct">dotProduct</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalize">
<db:title>void QVector2D::normalize()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>normalize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void normalize()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Normalizes the currect vector in place. Nothing happens if this vector is a null vector or the length of the vector is very close to 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#normalized">normalized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalized">
<db:title>QVector2D QVector2D::normalized() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVector2D</db:type>
<db:methodname>normalized</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D normalized() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the normalized unit vector form of this vector.</db:para>
<db:para>If this vector is null, then a null vector is returned. If the length of the vector is very close to 1, then the vector will be returned as-is. Otherwise the normalized form of the vector of length 1 will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#normalize">normalize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setX">
<db:title>[constexpr] void QVector2D::setX(float <db:emphasis>x</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setX</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setX(float x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the x coordinate of this point to the given finite <db:code role="parameter">x</db:code> coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#setY">setY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setY">
<db:title>[constexpr] void QVector2D::setY(float <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setY</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setY(float y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the y coordinate of this point to the given finite <db:code role="parameter">y</db:code> coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#setX">setX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toPoint">
<db:title>[constexpr] QPoint QVector2D::toPoint() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>toPoint</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint toPoint() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qpoint.xml">QPoint</db:link> form of this 2D vector. Each coordinate is rounded to the nearest integer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#toPointF">toPointF</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#toVector3D">toVector3D</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toPointF">
<db:title>[constexpr] QPointF QVector2D::toPointF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>toPointF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF toPointF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qpointf.xml">QPointF</db:link> form of this 2D vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#toPoint">toPoint</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#toVector3D">toVector3D</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toVector3D">
<db:title>[constexpr] QVector3D QVector2D::toVector3D() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVector3D</db:type>
<db:methodname>toVector3D</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector3D toVector3D() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the 3D form of this 2D vector, with the z coordinate set to zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#toVector4D">toVector4D</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#toPoint">toPoint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toVector4D">
<db:title>[constexpr] QVector4D QVector2D::toVector4D() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVector4D</db:type>
<db:methodname>toVector4D</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector4D toVector4D() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the 4D form of this 2D vector, with the z and w coordinates set to zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#toVector3D">toVector3D</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#toPoint">toPoint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="x">
<db:title>[constexpr] float QVector2D::x() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>x</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float x() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the x coordinate of this point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#y">y</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y">
<db:title>[constexpr] float QVector2D::y() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>y</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float y() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the y coordinate of this point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#setY">setY</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#x">x</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QVector2D::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the 2D vector as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-2a-eq">
<db:title>[constexpr] QVector2D &amp;QVector2D::operator*=(float <db:emphasis>factor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D &amp;</db:type>
<db:methodname>operator*=</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D &amp; operator*=(float factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Multiplies this vector's coordinates by the given finite <db:code role="parameter">factor</db:code> and returns a reference to this vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#operator-2f-eq">operator/=</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#operator-2a">operator*</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-eq-1">
<db:title>[constexpr] QVector2D &amp;QVector2D::operator*=(QVector2D <db:emphasis>vector</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D &amp;</db:type>
<db:methodname>operator*=</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D &amp; operator*=(QVector2D vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Multiplies each component of this vector by the corresponding component of <db:code role="parameter">vector</db:code> and returns a reference to this vector.</db:para>
<db:note>
<db:para>This is not a cross product of this vector with <db:code role="parameter">vector</db:code>. (Its components add up to the dot product of this vector and <db:code role="parameter">vector</db:code>.)</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#operator-2f-eq">operator/=</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#operator-2a">operator*</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>[constexpr] QVector2D &amp;QVector2D::operator+=(QVector2D <db:emphasis>vector</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D &amp; operator+=(QVector2D vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">vector</db:code> to this vector and returns a reference to this vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--eq">
<db:title>[constexpr] QVector2D &amp;QVector2D::operator-=(QVector2D <db:emphasis>vector</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D &amp;</db:type>
<db:methodname>operator-=</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D &amp; operator-=(QVector2D vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Subtracts the given <db:code role="parameter">vector</db:code> from this vector and returns a reference to this vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-eq">
<db:title>[constexpr] QVector2D &amp;QVector2D::operator/=(float <db:emphasis>divisor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D &amp;</db:type>
<db:methodname>operator/=</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>divisor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D &amp; operator/=(float divisor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Divides this vector's coordinates by the given <db:code role="parameter">divisor</db:code> and returns a reference to this vector. The <db:code role="parameter">divisor</db:code> must not be either zero or NaN.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#operator-2a-eq">operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-eq-1">
<db:title>[constexpr, since 5.5] QVector2D &amp;QVector2D::operator/=(QVector2D <db:emphasis>vector</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D &amp;</db:type>
<db:methodname>operator/=</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D &amp; operator/=(QVector2D vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Divides each component of this vector by the corresponding component of <db:code role="parameter">vector</db:code> and returns a reference to this vector.</db:para>
<db:para>The <db:code role="parameter">vector</db:code> must have no component that is either zero or NaN.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#operator-2a-eq">operator*=</db:link>()</db:member>
<db:member><db:link xlink:href="qvector2d.xml#operator-2f">operator/</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>[constexpr, since 5.2] float &amp;QVector2D::operator[](int <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>float &amp;</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float &amp; operator[](int i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the component of the vector at index position <db:code role="parameter">i</db:code> as a modifiable reference.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the vector (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; 2).</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d-1">
<db:title>[constexpr, since 5.2] float QVector2D::operator[](int <db:emphasis>i</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">float operator[](int i) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the component of the vector at index position <db:code role="parameter">i</db:code>.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the vector (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; 2).</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qFuzzyCompare">
<db:title>bool qFuzzyCompare(QVector2D <db:emphasis>v1</db:emphasis>, QVector2D <db:emphasis>v2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>qFuzzyCompare</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool qFuzzyCompare(QVector2D v1, QVector2D v2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code> are equal, allowing for a small fuzziness factor for floating-point comparisons; false otherwise.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>[constexpr] bool operator!=(QVector2D <db:emphasis>v1</db:emphasis>, QVector2D <db:emphasis>v2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QVector2D v1, QVector2D v2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">v1</db:code> is not equal to <db:code role="parameter">v2</db:code>; otherwise returns <db:code>false</db:code>. This operator uses an exact floating-point comparison.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>[constexpr] QVector2D operator*(float <db:emphasis>factor</db:emphasis>, QVector2D <db:emphasis>vector</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D operator*(float factor, QVector2D vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of the given <db:code role="parameter">vector</db:code>, multiplied by the given finite <db:code role="parameter">factor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#operator-2a-eq">QVector2D::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-1">
<db:title>[constexpr] QVector2D operator*(QVector2D <db:emphasis>vector</db:emphasis>, float <db:emphasis>factor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D operator*(QVector2D vector, float factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of the given <db:code role="parameter">vector</db:code>, multiplied by the given finite <db:code role="parameter">factor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#operator-2a-eq">QVector2D::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-2">
<db:title>[constexpr] QVector2D operator*(QVector2D <db:emphasis>v1</db:emphasis>, QVector2D <db:emphasis>v2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D operator*(QVector2D v1, QVector2D v2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qvector2d.xml">QVector2D</db:link> object formed by multiplying each component of <db:code role="parameter">v1</db:code> by the corresponding component of <db:code role="parameter">v2</db:code>.</db:para>
<db:note>
<db:para>This is not a cross product of <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code> in any sense. (Its components add up to the dot product of <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code>.)</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#operator-2a-eq">QVector2D::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b">
<db:title>[constexpr] QVector2D operator+(QVector2D <db:emphasis>v1</db:emphasis>, QVector2D <db:emphasis>v2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D operator+(QVector2D v1, QVector2D v2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qvector2d.xml">QVector2D</db:link> object that is the sum of the given vectors, <db:code role="parameter">v1</db:code> and <db:code role="parameter">v2</db:code>; each component is added separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#operator-2b-eq">QVector2D::operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>[constexpr] QVector2D operator-(QVector2D <db:emphasis>v1</db:emphasis>, QVector2D <db:emphasis>v2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D operator-(QVector2D v1, QVector2D v2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qvector2d.xml">QVector2D</db:link> object that is formed by subtracting <db:code role="parameter">v2</db:code> from <db:code role="parameter">v1</db:code>; each component is subtracted separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#operator--eq">QVector2D::operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--1">
<db:title>[constexpr] QVector2D operator-(QVector2D <db:emphasis>vector</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D operator-(QVector2D vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qvector2d.xml">QVector2D</db:link> object that is formed by changing the sign of each component of the given <db:code role="parameter">vector</db:code>.</db:para>
<db:para>Equivalent to <db:code>QVector2D(0,0) - vector</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2f">
<db:title>[constexpr] QVector2D operator/(QVector2D <db:emphasis>vector</db:emphasis>, float <db:emphasis>divisor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D</db:type>
<db:methodname>operator/</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>divisor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D operator/(QVector2D vector, float divisor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qvector2d.xml">QVector2D</db:link> object formed by dividing each component of the given <db:code role="parameter">vector</db:code> by the given <db:code role="parameter">divisor</db:code>.</db:para>
<db:para>The <db:code role="parameter">divisor</db:code> must not be either zero or NaN.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#operator-2f-eq">QVector2D::operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-1">
<db:title>[constexpr, since 5.5] QVector2D operator/(QVector2D <db:emphasis>vector</db:emphasis>, QVector2D <db:emphasis>divisor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVector2D</db:type>
<db:methodname>operator/</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>divisor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D operator/(QVector2D vector, QVector2D divisor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qvector2d.xml">QVector2D</db:link> object formed by dividing each component of the given <db:code role="parameter">vector</db:code> by the corresponding component of the given <db:code role="parameter">divisor</db:code>.</db:para>
<db:para>The <db:code role="parameter">divisor</db:code> must have no component that is either zero or NaN.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvector2d.xml#operator-2f-eq">QVector2D::operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QVector2D <db:emphasis>vector</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, QVector2D vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the given <db:code role="parameter">vector</db:code> to the given <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[constexpr] bool operator==(QVector2D <db:emphasis>v1</db:emphasis>, QVector2D <db:emphasis>v2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVector2D</db:type>
<db:parameter>v2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QVector2D v1, QVector2D v2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">v1</db:code> is equal to <db:code role="parameter">v2</db:code>; otherwise returns <db:code>false</db:code>. This operator uses an exact floating-point comparison.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QVector2D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVector2D &amp;</db:type>
<db:parameter>vector</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QVector2D &amp;vector)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a 2D vector from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">vector</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
