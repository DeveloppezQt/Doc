<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>AreaChart Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a simple area chart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_areachart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To create area charts, we need two QLineSeries instances. They are going to define the upper and lower boundary of the area.</db:para>
<db:programlisting language="cpp">    QLineSeries *series0 = new QLineSeries();
    QLineSeries *series1 = new QLineSeries();
</db:programlisting>
<db:para>We add data to both series and use the stream operator.</db:para>
<db:programlisting language="cpp">    *series0 &lt;&lt; QPointF(1, 5) &lt;&lt; QPointF(3, 7) &lt;&lt; QPointF(7, 6) &lt;&lt; QPointF(9, 7) &lt;&lt; QPointF(12, 6)
             &lt;&lt; QPointF(16, 7) &lt;&lt; QPointF(18, 5);
    *series1 &lt;&lt; QPointF(1, 3) &lt;&lt; QPointF(3, 4) &lt;&lt; QPointF(7, 3) &lt;&lt; QPointF(8, 2) &lt;&lt; QPointF(12, 3)
             &lt;&lt; QPointF(16, 4) &lt;&lt; QPointF(18, 3);
</db:programlisting>
<db:para>Now we create a QAreaSeries instance using two line series objects. We set the custom gradient fill and width of the outline.</db:para>
<db:programlisting language="cpp">    QAreaSeries *series = new QAreaSeries(series0, series1);
    series-&gt;setName(&quot;Batman&quot;);
    QPen pen(0x059605);
    pen.setWidth(3);
    series-&gt;setPen(pen);

    QLinearGradient gradient(QPointF(0, 0), QPointF(0, 1));
    gradient.setColorAt(0.0, 0x3cc63c);
    gradient.setColorAt(1.0, 0x26f626);
    gradient.setCoordinateMode(QGradient::ObjectBoundingMode);
    series-&gt;setBrush(gradient);
</db:programlisting>
<db:para>Last we create the QChartView instance, set the title, set anti-aliasing, and add the area series. We also create the default axes and specify the ranges on them.</db:para>
<db:programlisting language="cpp">    QChart *chart = new QChart();
    chart-&gt;addSeries(series);
    chart-&gt;setTitle(&quot;Simple areachart example&quot;);
    chart-&gt;createDefaultAxes();
    chart-&gt;axisX()-&gt;setRange(0, 20);
    chart-&gt;axisY()-&gt;setRange(0, 10);
</db:programlisting>
<db:para>The chart is ready to be shown.</db:para>
<db:programlisting language="cpp">    QChartView *chartView = new QChartView(chart);
    chartView-&gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="areachart/areachart.pro">areachart/areachart.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="areachart/main.cpp">areachart/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
