<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Hello Vulkan Cubes Example</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows the basics of using <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;shader.h&quot;
#include &amp;lt;QtConcurrentRun&amp;gt;
#include &amp;lt;QFile&amp;gt;
#include &amp;lt;QVulkanDeviceFunctions&amp;gt;

void Shader::load(QVulkanInstance *inst, VkDevice dev, const QString &amp;amp;fn)
{
    reset();
    m_maybeRunning = true;
    m_future = QtConcurrent::run([inst, dev, fn]() {
        ShaderData sd;
        QFile f(fn);
        if (!f.open(QIODevice::ReadOnly)) {
            qWarning(&quot;Failed to open %s&quot;, qPrintable(fn));
            return sd;
        }
        QByteArray blob = f.readAll();
        VkShaderModuleCreateInfo shaderInfo;
        memset(&amp;amp;shaderInfo, 0, sizeof(shaderInfo));
        shaderInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
        shaderInfo.codeSize = blob.size();
        shaderInfo.pCode = reinterpret_cast&amp;lt;const uint32_t *&amp;gt;(blob.constData());
        VkResult err = inst-&amp;gt;deviceFunctions(dev)-&amp;gt;vkCreateShaderModule(dev, &amp;amp;shaderInfo, nullptr, &amp;amp;sd.shaderModule);
        if (err != VK_SUCCESS) {
            qWarning(&quot;Failed to create shader module: %d&quot;, err);
            return sd;
        }
        return sd;
    });
}

ShaderData *Shader::data()
{
    if (m_maybeRunning &amp;amp;&amp;amp; !m_data.isValid())
        m_data = m_future.result();

    return &amp;amp;m_data;
}

void Shader::reset()
{
    *data() = ShaderData();
    m_maybeRunning = false;
}

</db:programlisting>
</db:article>
