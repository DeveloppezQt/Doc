<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPointer Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QPointer</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpointer.xml">QPointer</db:link> class is a template class that provides guarded pointers to <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPointer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPointer is part of <db:simplelist><db:member>objectmodel</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A guarded pointer, <db:link xlink:href="qpointer.xml">QPointer</db:link>&lt;T&gt;, behaves like a normal C++ pointer T *, except that it is automatically cleared when the referenced object is destroyed (unlike normal C++ pointers, which become &quot;dangling pointers&quot; in such cases). T must be a subclass of <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:para>Guarded pointers are useful whenever you need to store a pointer to a <db:link xlink:href="qobject.xml">QObject</db:link> that is owned by someone else, and therefore might be destroyed while you still hold a reference to it. You can safely test the pointer for validity.</db:para>
<db:para>Note that Qt 5 introduces a slight change in behavior when using <db:link xlink:href="qpointer.xml">QPointer</db:link>.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>When using <db:link xlink:href="qpointer.xml">QPointer</db:link> on a <db:link xlink:href="qwidget.xml">QWidget</db:link> (or a subclass of <db:link xlink:href="qwidget.xml">QWidget</db:link>), previously the <db:link xlink:href="qpointer.xml">QPointer</db:link> would be cleared by the <db:link xlink:href="qwidget.xml">QWidget</db:link> destructor. Now, the <db:link xlink:href="qpointer.xml">QPointer</db:link> is cleared by the <db:link xlink:href="qobject.xml">QObject</db:link> destructor (since this is when <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link> objects are cleared). Any QPointers tracking a widget will <db:emphasis role="bold">NOT</db:emphasis> be cleared before the <db:link xlink:href="qwidget.xml">QWidget</db:link> destructor destroys the children for the widget being tracked.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Qt also provides <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>, an implementation of a reference-counted shared pointer object, which can be used to maintain a collection of references to an individual pointer.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QPointer&amp;lt;QLabel&amp;gt; label = new QLabel;
    label-&amp;gt;setText(&quot;&amp;amp;Status:&quot;);
    ...
    if (label)
        label-&amp;gt;show();
</db:programlisting>
<db:para>If the <db:link xlink:href="qlabel.xml">QLabel</db:link> is deleted in the meantime, the label variable will hold nullptr instead of an invalid address, and the last line will never be executed.</db:para>
<db:para>The functions and operators available with a <db:link xlink:href="qpointer.xml">QPointer</db:link> are the same as those available with a normal unguarded pointer, except the pointer arithmetic operators (+, -, ++, and --), which are normally used only with arrays of objects.</db:para>
<db:para>Use QPointers like normal pointers and you will not need to read this class documentation.</db:para>
<db:para>For creating guarded pointers, you can construct or assign to them from a T* or from another guarded pointer of the same type. You can compare them with each other using operator==() and operator!=(), or test for nullptr with <db:link xlink:href="qpointer.xml#isNull">isNull</db:link>(). You can dereference them using either the *x or the x-&gt;member notation.</db:para>
<db:para>A guarded pointer will automatically cast to a T *, so you can freely mix guarded and unguarded pointers. This means that if you have a <db:link xlink:href="qpointer.xml">QPointer</db:link>&lt;<db:link xlink:href="qwidget.xml">QWidget</db:link>&gt;, you can pass it to a function that requires a <db:link xlink:href="qwidget.xml">QWidget</db:link> *. For this reason, it is of little value to declare functions to take a <db:link xlink:href="qpointer.xml">QPointer</db:link> as a parameter; just use normal pointers. Use a <db:link xlink:href="qpointer.xml">QPointer</db:link> when you are storing a pointer over time.</db:para>
<db:para>Note that class T must inherit <db:link xlink:href="qobject.xml">QObject</db:link>, or a compilation or link error will result.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link></db:member>
<db:member><db:link xlink:href="qobject.xml">QObject</db:link></db:member>
<db:member><db:link xlink:href="qobjectcleanuphandler.xml">QObjectCleanupHandler</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPointer-2">
<db:title>[since 6.6] QPointer::QPointer(QPointer&lt;X&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="QPointer-3">[since 6.6] QPointer::QPointer(const QPointer&lt;X&gt; &amp;<db:emphasis>other</db:emphasis>)</db:bridgehead>
<db:para>Conversion constructor. Constructs a new <db:link xlink:href="qpointer.xml">QPointer</db:link> by moving or copying from <db:code role="parameter">other</db:code>.</db:para>
<db:para>The moved-from <db:link xlink:href="qpointer.xml">QPointer</db:link> is reset to nullptr.</db:para>
<db:note>
<db:para>These constructors participate in overload resolution only if X* is convertible to T*.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="QPointer">
<db:title>QPointer::QPointer()</db:title>
<db:constructorsynopsis>
<db:methodname>QPointer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a guarded pointer with value nullptr.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointer.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPointer-1">
<db:title>QPointer::QPointer(T *<db:emphasis>p</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPointer</db:methodname>
<db:methodparam>
<db:type>T *</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointer(T *p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a guarded pointer that points to the same object that <db:code role="parameter">p</db:code> points to.</db:para>
</db:section>
<db:section xml:id="dtor.QPointer">
<db:title>QPointer::~QPointer()</db:title>
<db:destructorsynopsis>
<db:methodname>~QPointer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPointer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the guarded pointer. Just like a normal pointer, destroying a guarded pointer does <db:emphasis>not</db:emphasis> destroy the object being pointed to.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QPointer::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears this <db:link xlink:href="qpointer.xml">QPointer</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointer.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>T *QPointer::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pointer to the object being guarded.</db:para>
</db:section>
<db:section xml:id="get">
<db:title>[since 6.0] T *QPointer::get() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>get</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * get() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qpointer.xml#data">data</db:link>(). This function is provided for STL compatibility.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QPointer::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the referenced object has been destroyed or if there is no referenced object; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>void QPointer::swap(QPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QPointer&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the contents of this <db:link xlink:href="qpointer.xml">QPointer</db:link> with the contents of <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-T--2a">
<db:title>T *QPointer::operator T *() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>operator T *</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * operator T *() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Cast operator; implements pointer semantics. Because of this function you can pass a <db:link xlink:href="qpointer.xml">QPointer</db:link>&lt;T&gt; to a function where a T* is required.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>T &amp;QPointer::operator*() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T &amp;</db:type>
<db:methodname>operator*</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; operator*() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Dereference operator; implements pointer semantics. Just use this operator as you would with a normal C++ pointer.</db:para>
</db:section>
<db:section xml:id="operator--gt">
<db:title>T *QPointer::operator-&gt;() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>operator-&gt;</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * operator-&gt;() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Overloaded arrow operator; implements pointer semantics. Just use this operator as you would with a normal C++ pointer.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[since 6.6] QPointer&lt;T&gt; &amp;QPointer::operator=(const QPointer&lt;X&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPointer&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QPointer&lt;X&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointer&lt;T&gt; &amp; operator=(const QPointer&lt;X&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Conversion assignment operator. Makes this guarded pointer guard the same object guarded by <db:code role="parameter">other</db:code>.</db:para>
<db:note>
<db:para>This operator participates in overload resolution only if X* is convertible to T*.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[since 6.6.1] QPointer&lt;T&gt; &amp;QPointer::operator=(QPointer&lt;X&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPointer&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QPointer&lt;X&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointer&lt;T&gt; &amp; operator=(QPointer&lt;X&gt; &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Conversion move-assignment operator. Makes this guarded pointer guard the same object guarded by <db:code role="parameter">other</db:code> and resets <db:code role="parameter">other</db:code> to nullptr.</db:para>
<db:note>
<db:para>This operator participates in overload resolution only if X* is convertible to T*.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.6.1.</db:para>
</db:section>
<db:section xml:id="operator-eq-2">
<db:title>QPointer&lt;T&gt; &amp;QPointer::operator=(T *<db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPointer&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>T *</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointer&lt;T&gt; &amp; operator=(T *p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assignment operator. This guarded pointer will now point to the same object that <db:code role="parameter">p</db:code> points to.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QPointer&lt;T&gt; &amp;<db:emphasis>p1</db:emphasis>, const QPointer&lt;X&gt; &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QPointer&lt;T&gt; &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointer&lt;X&gt; &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QPointer&lt;T&gt; &amp;p1, const QPointer&lt;X&gt; &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inequality operator. Returns true if the guarded pointers <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code> are not pointing to the same object, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool operator!=(const QPointer&lt;T&gt; &amp;<db:emphasis>p</db:emphasis>, X *<db:emphasis>o</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QPointer&lt;T&gt; &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>X *</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QPointer&lt;T&gt; &amp;p, X *o)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inequality operator. Returns true if <db:code role="parameter">o</db:code> and the guarded pointer <db:code role="parameter">p</db:code> are not pointing to the same object, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-2">
<db:title>bool operator!=(X *<db:emphasis>o</db:emphasis>, const QPointer&lt;T&gt; &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>X *</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointer&lt;T&gt; &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(X *o, const QPointer&lt;T&gt; &amp;p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inequality operator. Returns true if <db:code role="parameter">o</db:code> and the guarded pointer <db:code role="parameter">p</db:code> are not pointing to the same object, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-3">
<db:title>bool operator!=(const QPointer&lt;T&gt; &amp;<db:emphasis>lhs</db:emphasis>, <db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QPointer&lt;T&gt; &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QPointer&lt;T&gt; &amp;lhs, std::nullptr_t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inequality operator. Returns true if the pointer guarded by <db:code role="parameter">lhs</db:code> is a valid (ie not nullptr) pointer, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-4">
<db:title>bool operator!=(<db:emphasis>std::nullptr_t</db:emphasis>, const QPointer&lt;T&gt; &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointer&lt;T&gt; &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(std::nullptr_t, const QPointer&lt;T&gt; &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inequality operator. Returns true if the pointer guarded by <db:code role="parameter">rhs</db:code> is a valid (ie not nullptr) pointer, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QPointer&lt;T&gt; &amp;<db:emphasis>p1</db:emphasis>, const QPointer&lt;X&gt; &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QPointer&lt;T&gt; &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointer&lt;X&gt; &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QPointer&lt;T&gt; &amp;p1, const QPointer&lt;X&gt; &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Equality operator. Returns true if the guarded pointers <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code> are pointing to the same object, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool operator==(const QPointer&lt;T&gt; &amp;<db:emphasis>p</db:emphasis>, X *<db:emphasis>o</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QPointer&lt;T&gt; &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>X *</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QPointer&lt;T&gt; &amp;p, X *o)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Equality operator. Returns true if <db:code role="parameter">o</db:code> and the guarded pointer <db:code role="parameter">p</db:code> are pointing to the same object, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-2">
<db:title>bool operator==(X *<db:emphasis>o</db:emphasis>, const QPointer&lt;T&gt; &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>X *</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointer&lt;T&gt; &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(X *o, const QPointer&lt;T&gt; &amp;p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Equality operator. Returns true if <db:code role="parameter">o</db:code> and the guarded pointer <db:code role="parameter">p</db:code> are pointing to the same object, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-3">
<db:title>bool operator==(const QPointer&lt;T&gt; &amp;<db:emphasis>lhs</db:emphasis>, <db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QPointer&lt;T&gt; &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QPointer&lt;T&gt; &amp;lhs, std::nullptr_t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Equality operator. Returns true if the pointer guarded by <db:code role="parameter">lhs</db:code> is nullptr, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-4">
<db:title>bool operator==(<db:emphasis>std::nullptr_t</db:emphasis>, const QPointer&lt;T&gt; &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointer&lt;T&gt; &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(std::nullptr_t, const QPointer&lt;T&gt; &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Equality operator. Returns true if the pointer guarded by <db:code role="parameter">rhs</db:code> is nullptr, otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
