<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Network Chat Example</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates a stateful peer-to-peer Chat client.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;chatdialog.h&quot;

ChatDialog::ChatDialog(QWidget *parent)
    : QDialog(parent)
{
    setupUi(this);

    lineEdit-&gt;setFocusPolicy(Qt::StrongFocus);
    textEdit-&gt;setFocusPolicy(Qt::NoFocus);
    textEdit-&gt;setReadOnly(true);
    listWidget-&gt;setFocusPolicy(Qt::NoFocus);

    connect(lineEdit, SIGNAL(returnPressed()), this, SLOT(returnPressed()));
    connect(lineEdit, SIGNAL(returnPressed()), this, SLOT(returnPressed()));
    connect(&amp;client, SIGNAL(newMessage(QString,QString)),
            this, SLOT(appendMessage(QString,QString)));
    connect(&amp;client, SIGNAL(newParticipant(QString)),
            this, SLOT(newParticipant(QString)));
    connect(&amp;client, SIGNAL(participantLeft(QString)),
            this, SLOT(participantLeft(QString)));

    myNickName = client.nickName();
    newParticipant(myNickName);
    tableFormat.setBorder(0);
    QTimer::singleShot(10 * 1000, this, SLOT(showInformation()));
}

void ChatDialog::appendMessage(const QString &amp;from, const QString &amp;message)
{
    if (from.isEmpty() || message.isEmpty())
        return;

    QTextCursor cursor(textEdit-&gt;textCursor());
    cursor.movePosition(QTextCursor::End);
    QTextTable *table = cursor.insertTable(1, 2, tableFormat);
    table-&gt;cellAt(0, 0).firstCursorPosition().insertText('&lt;' + from + &quot;&gt; &quot;);
    table-&gt;cellAt(0, 1).firstCursorPosition().insertText(message);
    QScrollBar *bar = textEdit-&gt;verticalScrollBar();
    bar-&gt;setValue(bar-&gt;maximum());
}

void ChatDialog::returnPressed()
{
    QString text = lineEdit-&gt;text();
    if (text.isEmpty())
        return;

    if (text.startsWith(QChar('/'))) {
        QColor color = textEdit-&gt;textColor();
        textEdit-&gt;setTextColor(Qt::red);
        textEdit-&gt;append(tr(&quot;! Unknown command: %1&quot;)
                         .arg(text.left(text.indexOf(' '))));
        textEdit-&gt;setTextColor(color);
    } else {
        client.sendMessage(text);
        appendMessage(myNickName, text);
    }

    lineEdit-&gt;clear();
}

void ChatDialog::newParticipant(const QString &amp;nick)
{
    if (nick.isEmpty())
        return;

    QColor color = textEdit-&gt;textColor();
    textEdit-&gt;setTextColor(Qt::gray);
    textEdit-&gt;append(tr(&quot;* %1 has joined&quot;).arg(nick));
    textEdit-&gt;setTextColor(color);
    listWidget-&gt;addItem(nick);
}

void ChatDialog::participantLeft(const QString &amp;nick)
{
    if (nick.isEmpty())
        return;

    QList&lt;QListWidgetItem *&gt; items = listWidget-&gt;findItems(nick,
                                                           Qt::MatchExactly);
    if (items.isEmpty())
        return;

    delete items.at(0);
    QColor color = textEdit-&gt;textColor();
    textEdit-&gt;setTextColor(Qt::gray);
    textEdit-&gt;append(tr(&quot;* %1 has left&quot;).arg(nick));
    textEdit-&gt;setTextColor(color);
}

void ChatDialog::showInformation()
{
    if (listWidget-&gt;count() == 1) {
        QMessageBox::information(this, tr(&quot;Chat&quot;),
                                 tr(&quot;Launch several instances of this &quot;
                                    &quot;program on your local network and &quot;
                                    &quot;start chatting!&quot;));
    }
}

</db:programlisting>
</db:article>
