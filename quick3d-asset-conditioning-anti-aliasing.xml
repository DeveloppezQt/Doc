<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Anti-Aliasing Best Practices</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick 3D Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Quick 3D has multiple ways to combat aliasing (the jagged edges) while rendering 3D models. Each technique offers its own benefits and limitations. Multiple techniques can be combined, but with additional performance cost.</db:para>
<db:section xml:id="causes-of-aliasing">
<db:title>Causes of Aliasing</db:title>
<db:para>Although aliasing is a useful tool in rendering graphics, it could affect performance of your application if not used wisely. The following sections summarize the different aliasing techniques to choose from. Understanding which technology best targets your problems will help balance visual quality with sufficient rendering speed.</db:para>
<db:section xml:id="geometry-aliasing">
<db:title>Geometry Aliasing</db:title>
<db:para>By default, all geometry is rendered one on-screen pixel at a time. As you can see on the left in the image below, this leaves harsh edges that may be easily noticeable in high-contrast cases (most noticeably in this black-and-white case).</db:para>
<db:figure>
<db:title>Effective techniques for reducing aliasing for geometry</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/AA-GeometryAliasing.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>The most correct fix for this is to use <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#multisample-aa">Multisample Anti-Aliasing</db:link>, as it gathers more geometric detail only as needed. Using <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#temporal-aa">Temporal Anti-Aliasing</db:link> or <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#progressive-aa">Progressive Anti-Aliasing</db:link> can also mitigate the issue in a correct manner.</db:para>
<db:para>Finally, in certain cases you can use a <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#silhouette-opacity-maps">silhouette opacity map</db:link> to smooth the edges of selected geometry.</db:para>
</db:section>
<db:section xml:id="texture-aliasing">
<db:title>Texture Aliasing</db:title>
<db:para>When a texture is sub-sampled, fewer pixels than in the original are displayed, resulting in undesirable artifacts based on which pixels are chosen. This effect is worsened when the model is moving, as different pixels are chosen at different times. In the image below, notice how the line between E3 and F3 is missing, strongly present between G3 and H3, then gone for the next 5 columns, and so on.</db:para>
<db:figure>
<db:title>Effective techniques for reducing aliasing for textures</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/AA-TextureAliasing.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>The simplest (and arguably the best) fix for this problem is to use <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#mipmaps">mipmapping in the image texture</db:link> itself. Alternative fixes include using either <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#temporal-aa">Temporal AA</db:link> or <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#progressive-aa">Progressive AA</db:link> to gather more information from the texture.</db:para>
<db:para>Using <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#multisample-aa">Multisample Anti-Aliasing</db:link> will not fix this problem.</db:para>
</db:section>
<db:section xml:id="reflection-aliasing">
<db:title>Reflection Aliasing</db:title>
<db:para>Similar to <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#texture-aliasing">Texture Aliasing</db:link>, a material reflecting the environment will sub-sample the image. In some cases, as seen on the left in the image below, it becomes obvious when fine details are being skipped.</db:para>
<db:figure>
<db:title>Effective techniques for reducing aliasing for reflections</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/AA-ReflectionAliasing.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>The most correct solution in this case is using <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#temporal-aa">Temporal AA</db:link> or <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#progressive-aa">Progressive AA</db:link> to find the extra information.</db:para>
<db:para>A simple alternative solution that may be acceptable is to make the material less glossy, more rough. In this case lower-resolution mipmaps of the environment are automatically used, blending the sharp details together.</db:para>
</db:section>
</db:section>
<db:section xml:id="anti-aliasing-techniques">
<db:title>Anti-Aliasing Techniques</db:title>
<db:para>Aliasing is caused when there is more <db:emphasis>information</db:emphasis> present in the original than we can represent in the pixels on screen. Anti-aliasing techniques fall into three categories:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Techniques that find additional information for a single pixel and represent them all at the same time.</db:para>
</db:listitem>
<db:listitem>
<db:para>Image effects that attempt to find where things look bad and sweep the problems under the carpet.</db:para>
</db:listitem>
<db:listitem>
<db:para>Techniques employed by artists that attempt to workaround the limitations.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="techniques-that-find-additional-information">
<db:title>Techniques that find additional information</db:title>
<db:anchor xml:id="multisample-aa"/>
<db:section xml:id="multisample-anti-aliasing">
<db:title>Multisample Anti-Aliasing</db:title>
<db:para>Multisample AA (MSAA) operates on an entire layer. The edges of geometry are super-sampled, resulting in smoother silhouettes. This technique has no effect on the materials inside geometry, however.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Good results on geometry silhouettes, where aliasing is often most noticeable. Works with fast animation without an issue. Many recent GPUs support 2x or 4x MSAA without any performance issue.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Can be expensive to use. Does not help with texture or reflection issues.</db:para>
</db:listitem>
</db:itemizedlist>
<db:anchor xml:id="temporal-aa"/>
</db:section>
<db:section xml:id="temporal-anti-aliasing">
<db:title>Temporal Anti-Aliasing</db:title>
<db:para>Temporal AA operates on an entire layer. The camera is jiggled <db:emphasis>very slightly</db:emphasis> between frames, and the result of each new frame is blended with the previous frame.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Due to the jiggling camera it finds real details that were otherwise lost. Low impact on performance.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Fast-moving objects cause one-frame ghosting.</db:para>
</db:listitem>
</db:itemizedlist>
<db:anchor xml:id="progressive-aa"/>
</db:section>
<db:section xml:id="progressive-anti-aliasing">
<db:title>Progressive Anti-Aliasing</db:title>
<db:para>Progressive AA (PAA) operates on an entire layer. When all content of the layer has stopped moving, the camera is jiggled <db:emphasis>very slightly</db:emphasis> between frames, and the result of each new frame is blended with the previous frames. The more frames you accumulate, better looking the result.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Provides detailed static images with no performance cost.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Does not take effect if any visual changes are occurring. 8x PAA takes one eighth of a second to finish rendering (at 60fps), which may be noticeable.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="mipmaps">
<db:title>Mipmaps</db:title>
<db:para>Mipmapping stores the texture along with its pre-calculated lower resolution versions. Whenever the texture is being displayed at a smaller size, the rendering system automatically uses these low-resolution images (which combine many details into a single pixel) blending them into the result as needed.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Very low performance impact. Greatly improves image quality for textures. Encourages you to use compressed textures, which load and render faster than uncompressed imnages.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Requires using external tools to optimize your images. Uses 33% more graphics memory than the same image without mipmaps.</db:para>
</db:listitem>
</db:itemizedlist>
<db:anchor xml:id="supersample-aa"/>
</db:section>
<db:section xml:id="supersample-anti-aliasing">
<db:title>Supersample Anti-Aliasing</db:title>
<db:para>Supersample AA (SSAA) operates on an entire layer, or even multiple layers. It is not mentioned or compared above because the performance penalty can be severe, and because it requires additional work from the artist. This technique should be used as a last resort.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Provides full-scene anti-aliasing with no limitations on animation.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Can severely degrade performance when your scene is already limited by the fill-rate of the graphics system, which is often the case.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="artist-employed-cheats">
<db:title>Artist-Employed Cheats</db:title>
<db:section xml:id="silhouette-opacity-maps">
<db:title>Silhouette Opacity Maps</db:title>
<db:para>When your model has a consistent silhouette, you can apply an opacity map that makes the outer edge of the geometry transparent. Using a gradient for the opacity will let the edge of the object smoothly disappear. However, even if your opacity map transitions directly from fully-opaque to fully-transparent over the space of one pixel, the result will still provide anti-aliased edges as seen in the example above. This is because image maps, including opacity maps, use bilinear interpolation.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Can show softer transitions than normal AA. Can be applied per model instead of per-layer.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Cannot be used if the silhouette of the object will ever change. Multiple overlapping models that employ transparency consume fill rate performance, which is often at a premium.</db:para>
</db:listitem>
</db:itemizedlist>
<db:anchor xml:id="modifying-materials"/>
</db:section>
<db:section xml:id="modifying-materials-or-geometry">
<db:title>Modifying Materials or Geometry</db:title>
<db:para>As demonstrated in the image for <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#reflection-aliasing">Reflection Aliasing</db:link> above, sometimes the simplest fix for problems is to change the artwork. If you are getting distracting specular glints on the corner of your model, ask yourself: <db:emphasis>Can I make the material softer? Can I modify the geometry to smooth or change the reflection angle? Can I edit the environment map to reduce sharp transitions?</db:emphasis></db:para>
</db:section>
</db:section>
</db:section>
</db:article>
