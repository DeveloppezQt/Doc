<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Anti-Aliasing Best Practices</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick 3D Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Quick 3D has multiple ways to combat aliasing (the jagged edges) while rendering 3D models. Each technique offers its own benefits and limitations. Multiple techniques can be combined, but with additional performance cost.</db:para>
<db:section xml:id="aliasing-in-general">
<db:title>Aliasing in General</db:title>
<db:para>Aliasing occurs when there is more <db:emphasis>information</db:emphasis> present in the original than we can represent in the pixels on screen. Anti-aliasing techniques fall into three categories:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Techniques that find additional information for a single pixel and represent them all at the same time.</db:para>
</db:listitem>
<db:listitem>
<db:para>Image effects that attempt to find where things look bad and sweep the problems under the carpet.</db:para>
</db:listitem>
<db:listitem>
<db:para>Techniques employed by artists that attempt to workaround the limitations.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Although anti-aliasing is a useful tool in rendering graphics, it could affect performance of your application if not used wisely. The following sections describe a few different anti-aliasing techniques to choose from. Understanding which technique best targets your problems will help balance visual quality with sufficient rendering speed.</db:para>
<db:section xml:id="geometry-aliasing">
<db:title>Geometry Aliasing</db:title>
<db:para>By default, all geometry is rendered one on-screen pixel at a time. As you can see on the left in the image below, this leaves harsh edges that may be easily noticeable in high-contrast cases, most noticeably here with black-and-white.</db:para>
<db:figure>
<db:title>Effective techniques for reducing aliasing for geometry</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/AA-GeometryAliasing.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>The most correct fix for this is to use <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#multisample-aa">Multisample Anti-Aliasing</db:link>, as it gathers more geometric detail only as needed. Using <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#temporal-aa">Temporal Anti-Aliasing</db:link> or <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#progressive-aa">Progressive Anti-Aliasing</db:link> can also mitigate the issue in a correct manner.</db:para>
<db:para>Finally, in certain cases you can use a <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#silhouette-opacity-maps">silhouette opacity map</db:link> to smooth the edges of the geometry.</db:para>
</db:section>
<db:section xml:id="texture-aliasing">
<db:title>Texture Aliasing</db:title>
<db:para>When a texture is sub-sampled, fewer pixels than in the original are displayed, resulting in undesirable artifacts based on which pixels are chosen. This effect is worsened when the model is moving, as different pixels are chosen at different times. In the image below, notice how the line between E3 and F3 is missing, strongly present between G3 and H3, then gone for the next 5 columns, and so on.</db:para>
<db:figure>
<db:title>Effective techniques for reducing aliasing for textures</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/AA-TextureAliasing.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>The simplest (and arguably the best) fix for this problem is to use <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#mipmaps">mipmapping in the image texture</db:link> itself. Alternative fixes include using either <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#temporal-aa">Temporal AA</db:link> or <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#progressive-aa">Progressive AA</db:link> to gather more information from the texture.</db:para>
<db:para>Using <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#multisample-aa">Multisample Anti-Aliasing</db:link> will not fix this problem.</db:para>
</db:section>
<db:section xml:id="reflection-aliasing">
<db:title>Reflection Aliasing</db:title>
<db:para>Similar to <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#texture-aliasing">Texture Aliasing</db:link>, a material reflecting the environment will sub-sample the image. In some cases, as seen on the left in the image below, it becomes obvious when fine details are being skipped.</db:para>
<db:figure>
<db:title>Effective techniques for reducing aliasing for reflections</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/AA-ReflectionAliasing.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>The most correct solution in this case is using <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#temporal-aa">Temporal AA</db:link> or <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#progressive-aa">Progressive AA</db:link> to find the extra information.</db:para>
<db:para>A simple alternative solution that may be acceptable is to make the material less glossy, more rough. In this case lower-resolution mipmaps of the environment are automatically used, blending the sharp details together.</db:para>
</db:section>
</db:section>
<db:section xml:id="anti-aliasing-techniques-in-qt-quick-3d">
<db:title>Anti-Aliasing Techniques in Qt Quick 3D</db:title>
<db:note>
<db:para>Check out the <db:link xlink:href="qtquick3d-antialiasing-example.xml">Antialiasing Example</db:link> and the <db:link xlink:href="qtquick3d-sceneeffects-example.xml">Scene Effects Example</db:link> to exercise some of these features live. Keep in mind however that modern windowing systems are often configured to perform <db:link xlink:href="highdpi.xml">High DPI scaling</db:link> with a high resolution screen connected. This means that the content of any window shown on screen is rendered at a higher resolution and is then scaled down by the system compositor or some other component of the platform. That is in effect a form of <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#supersample-aa">Supersample Anti-aliasing</db:link>. Enabling anti-aliasing techniques in Qt Quick 3D may then show smaller, or sometimes hard-to-see improvements, because aliasing is already eliminated to a degree by the windowing system's automatic scaling. However, when deploying the same application on another system, it could well be that that particular system uses a platform or a screen where there is no such scaling, and so aliasing and jagged edges are more visible out of the box. Developers are advised to consider the potential presence, or lack of high DPI scaling in their target environments, and experiment with and tune antialiasing settings with this in mind.</db:para>
</db:note>
<db:para>Below is an example rendering of the <db:link xlink:href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/Sponza">Sponza</db:link> scene with some anti-aliasing methods enabled. The screenshots were taken without any system scaling applied to the window (no high DPI scaling), so the effects of the various methods are more pronounced.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>AA used</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>No AA</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/aa_disabled.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Supersample AA, high (1.5x)</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/aa_ssaa_high.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Multisample AA, high (4x)</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/aa_msaa_high.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FXAA</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/aa_fxaa.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Temporal AA, default strength (0.3)</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/aa_temporal_default.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:anchor xml:id="multisample-aa"/>
<db:section xml:id="multisample-anti-aliasing">
<db:title>Multisample Anti-Aliasing</db:title>
<db:para>Multisample AA (MSAA) operates either on the color buffer of the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> item (this is the default), or, if a <db:link xlink:href="qml-qtquick3d-view3d.xml#renderMode-prop">renderMode</db:link> other than <db:code>Offscreen</db:code> is used, on the entire Qt Quick window (<db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>, <db:link xlink:href="qquickview.xml">QQuickView</db:link>, <db:link xlink:href="qml-qtquick-window.xml">Window</db:link>, <db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link>).</db:para>
<db:para>The edges of geometry are super-sampled, resulting in smoother silhouettes. This technique has no effect on the materials inside geometry, however.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Good results on geometry silhouettes, where aliasing is often most noticeable. Works with fast animation without an issue. Many recent GPUs support 2x or 4x MSAA without any performance issue.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Can be expensive to use, especially on older mobile and embedded hardware. Does not help with texture or reflection issues.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> is using the default <db:link xlink:href="qml-qtquick3d-view3d.xml#renderMode-prop">renderMode</db:link> of <db:code>Offscreen</db:code>, the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> itself is in full control of multisample antialiasing. Applications can configure this via the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#antialiasingMode-prop">antialiasingMode</db:link> and <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#antialiasingQuality-prop">antialiasingQuality</db:link> properties of the environment (<db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link> or <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml">ExtendedSceneEnvironment</db:link>) associated with the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>.</db:para>
<db:para>The following example requests the commonly used 4x MSAA, because antialiasingQuality defaults to <db:code>SceneEnvironment.High</db:code>.</db:para>
<db:programlisting language="qml">View3D {
    environment: SceneEnvironment {
        antialiasingMode: SceneEnvironment.MSAA
    }
}
</db:programlisting>
<db:para>MSAA is not implemented by Qt itself, but is rather performed by the underlying 3D API. Hence performance and quality may vary between different hardware and their 3D API implementations.</db:para>
<db:anchor xml:id="temporal-aa"/>
</db:section>
<db:section xml:id="temporal-anti-aliasing">
<db:title>Temporal Anti-Aliasing</db:title>
<db:para>Temporal AA operates on the color buffer of the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>. The camera is jiggled <db:emphasis>very slightly</db:emphasis> between frames, and the result of each new frame is blended with the previous frame.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Due to the jiggling camera it finds real details that were otherwise lost. Low impact on performance.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Fast-moving objects cause one-frame ghosting.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Temporal AA has no effect when combined with Multisample AA. It can however be combined with Progressive AA.</db:para>
<db:para>To control temporal anti-aliasing, use the environment's <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#temporalAAEnabled-prop">temporalAAEnabled</db:link> and <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#temporalAAStrength-prop">temporalAAStrength</db:link> properties.</db:para>
<db:programlisting language="qml">View3D {
    environment: SceneEnvironment {
        temporalAAEnabled: true
    }
}
</db:programlisting>
<db:anchor xml:id="progressive-aa"/>
</db:section>
<db:section xml:id="progressive-anti-aliasing">
<db:title>Progressive Anti-Aliasing</db:title>
<db:para>Progressive AA operates on the color buffer of the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>. When all the content in the scene rendered by the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> has stopped moving, the camera is jiggled <db:emphasis>very slightly</db:emphasis> between frames, and the result of each new frame is blended with the previous frames. The more frames you accumulate, better looking the result.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Provides detailed static images with no performance cost.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Does not take effect if any visual changes are occurring. 8x PAA takes one eighth of a second to finish rendering (at 60fps), which may be noticeable.</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="qml">View3D {
    environment: SceneEnvironment {
        antialiasingMode: SceneEnvironment.ProgressiveAA
    }
}
</db:programlisting>
<db:para>Use <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#antialiasingQuality-prop">antialiasingQuality</db:link> to control how many frames are blended together (2, 4, or 8).</db:para>
<db:anchor xml:id="supersample-aa"/>
</db:section>
<db:section xml:id="supersample-anti-aliasing">
<db:title>Supersample Anti-Aliasing</db:title>
<db:para>Supersample AA operates on the color buffer of a <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>. This involves creating a color buffer (texture) larger then its normal size, and then downsampling it. This means an increased resource usage and at large sizes the scaling operation can be costly.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Provides full-scene anti-aliasing with no limitations on animation.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Can severely degrade performance when your scene is already limited by the fill-rate of the graphics system, especially an older mobile and embedded hardware.</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="qml">View3D {
    environment: SceneEnvironment {
        antialiasingMode: SceneEnvironment.SSAA
    }
}
</db:programlisting>
<db:para>Use <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#antialiasingQuality-prop">antialiasingQuality</db:link> to control the size multiplier (1.2, 1.5 or 2.0).</db:para>
</db:section>
<db:section xml:id="mipmaps">
<db:title>Mipmaps</db:title>
<db:para>Mipmapping stores the texture along with its pre-calculated lower resolution versions. Whenever the texture is being displayed at a smaller size, the rendering system automatically uses these low-resolution images (which combine many details into fewer pixels).</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Low performance impact. Greatly improves image quality for textures.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Requires potentially costly generation of the mipmap chain, or, with some image container formats, pre-generating the mipmap images in the image asset itself. Uses 33% more graphics memory than the same image without mipmaps.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To have Qt generate mipmaps for a <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link> and enable using the mipmap chain when performing texture sampling in the graphics shaders, set the <db:link xlink:href="qml-qtquick3d-texture.xml#mipFilter-prop">mipFilter</db:link> and <db:link xlink:href="qml-qtquick3d-texture.xml#generateMipmaps-prop">generateMipmaps</db:link> properties.</db:para>
<db:programlisting language="qml">Texture {
    source: &quot;image.png&quot;
    mipFilter: Texture.Linear
    generateMipmaps: true
}
</db:programlisting>
<db:anchor xml:id="specular-aa"/>
</db:section>
<db:section xml:id="specular-anti-aliasing">
<db:title>Specular Anti-Aliasing</db:title>
<db:para>Artifacts from the specular lighting contribution may be reduced by enabling Specular Anti-aliasing. These artifacts typically show up as bright dots, perhaps with a flickering appearance.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Specular AA disabled</db:para>
</db:th>
<db:th>
<db:para>Specular AA enabled</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/specular_aa_off.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/specular_aa_on.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:programlisting language="qml">View3D {
    environment: SceneEnvironment {
        specularAAEnabled: true
    }
}
</db:programlisting>
<db:note>
<db:para>Materials with a very smooth appearance may change their appearance as if they had a <db:link xlink:href="qml-qtquick3d-principledmaterial.xml#roughness-prop">more rough</db:link> surface when enabling specular AA. This is a result of the underlying lighting calculations.</db:para>
</db:note>
<db:anchor xml:id="fx-aa"/>
</db:section>
<db:section xml:id="fast-approximate-anti-aliasing">
<db:title>Fast Approximate Anti-Aliasing</db:title>
<db:para><db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml">ExtendedSceneEnvironment</db:link> offers another method of anti-aliasing in form of a post-processing effect. To enable FXAA, set <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml#fxaaEnabled-prop">fxaaEnabled</db:link> to true.</db:para>
<db:programlisting language="qml">import QtQuick3D.Helpers

View3D {
    environment: ExtendedSceneEnvironment {
        fxaaEnabled: true
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="artist-employed-cheats">
<db:title>Artist-Employed Cheats</db:title>
<db:section xml:id="silhouette-opacity-maps">
<db:title>Silhouette Opacity Maps</db:title>
<db:para>When your model has a consistent silhouette, you can apply an opacity map that makes the outer edge of the geometry transparent. Using a gradient for the opacity will let the edge of the object smoothly disappear. However, even if your opacity map transitions directly from fully-opaque to fully-transparent over the space of one pixel, the result will still provide anti-aliased edges as seen in the example above. This is because image maps, including opacity maps, use bilinear interpolation.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Can show softer transitions than normal AA. Can be applied per model instead of per-layer.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Cannot be used if the silhouette of the object will ever change. Multiple overlapping models that employ transparency consume fill rate performance, which is often at a premium.</db:para>
</db:listitem>
</db:itemizedlist>
<db:anchor xml:id="modifying-materials"/>
</db:section>
<db:section xml:id="modifying-materials-or-geometry">
<db:title>Modifying Materials or Geometry</db:title>
<db:para>As demonstrated in the image for <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml#reflection-aliasing">Reflection Aliasing</db:link> above, sometimes the simplest fix for problems is to change the artwork. If you are getting distracting specular glints on the corner of your model, ask yourself: <db:emphasis>Can I make the material softer? Can I modify the geometry to smooth or change the reflection angle? Can I edit the environment map to reduce sharp transitions?</db:emphasis></db:para>
</db:section>
</db:section>
</db:article>
