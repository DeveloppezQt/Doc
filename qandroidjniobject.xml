<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAndroidJniObject Class</db:title>
<db:productname>QtAndroidExtras</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Android Extras Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides APIs to call Java code from C++.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAndroidJniObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += androidextras</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section xml:id="general-notes">
<db:title>General Notes</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Class names needs to contain the fully-qualified class name, for example: <db:emphasis role="bold">&quot;java/lang/String&quot;</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Method signatures are written as <db:emphasis role="bold">&quot;(Arguments)ReturnType&quot;</db:emphasis></db:para>
</db:listitem>
<db:listitem>
<db:para>All object types are returned as a <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="method-signatures">
<db:title>Method Signatures</db:title>
<db:para>For functions that take no arguments, <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> provides convenience functions that will use the correct signature based on the provided template type. For example:</db:para>
<db:programlisting language="cpp">jint x = QAndroidJniObject::callMethod&amp;lt;jint&amp;gt;(&quot;getSize&quot;);
QAndroidJniObject::callMethod&amp;lt;void&amp;gt;(&quot;touch&quot;);
</db:programlisting>
<db:para>In other cases you will need to supply the signature yourself, and it is important that the signature matches the function you want to call. The signature structure is <db:emphasis role="bold">(A)R</db:emphasis>, where <db:emphasis role="bold">A</db:emphasis> is the type of the argument(s) and <db:emphasis role="bold">R</db:emphasis> is the return type. Array types in the signature must have the <db:emphasis role="bold">[</db:emphasis> suffix and the fully-qualified type names must have the <db:emphasis role="bold">L</db:emphasis> prefix and <db:emphasis role="bold">;</db:emphasis> suffix.</db:para>
<db:para>The example below demonstrates how to call two different static functions.</db:para>
<db:programlisting language="cpp">// Java class
package org.qtproject.qt5;
class TestClass
{
   static String fromNumber(int x) { ... }
   static String[] stringArray(String s1, String s2) { ... }
}
</db:programlisting>
<db:para>The signature for the first function is <db:emphasis role="bold">&quot;(I)Ljava/lang/String;&quot;</db:emphasis></db:para>
<db:programlisting language="cpp">// C++ code
QAndroidJniObject stringNumber = QAndroidJniObject::callStaticObjectMethod(&quot;org/qtproject/qt5/TestClass&quot;,
                                                                           &quot;fromNumber&quot;
                                                                           &quot;(I)Ljava/lang/String;&quot;,
                                                                           10);
</db:programlisting>
<db:para>and the signature for the second function is <db:emphasis role="bold">&quot;(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;&quot;</db:emphasis></db:para>
<db:programlisting language="cpp">// C++ code
QAndroidJniObject string1 = QAndroidJniObject::fromString(&quot;String1&quot;);
QAndroidJniObject string2 = QAndroidJniObject::fromString(&quot;String2&quot;);
QAndroidJniObject stringArray = QAndroidJniObject::callStaticObjectMethod(&quot;org/qtproject/qt5/TestClass&quot;,
                                                                          &quot;stringArray&quot;
                                                                          &quot;(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;&quot;
                                                                           string1.object&amp;lt;jstring&amp;gt;(),
                                                                           string2.object&amp;lt;jstring&amp;gt;());
</db:programlisting>
</db:section>
<db:section xml:id="handling-java-exception">
<db:title>Handling Java Exception</db:title>
<db:para>When calling Java functions that might throw an exception, it is important that you check, handle and clear out the exception before continuing.</db:para>
<db:note>
<db:para>It is unsafe to make a JNI call when there are exceptions pending.</db:para>
</db:note>
<db:programlisting language="cpp">void functionException()
{
    QAndroidJniObject myString = QAndroidJniObject::fromString(&quot;Hello&quot;);
    jchar c = myString.callMethod&amp;lt;jchar&amp;gt;(&quot;charAt&quot;, &quot;(I)C&quot;, 1000);
    QAndroidJniEnvironment env;
    if (env-&amp;gt;ExceptionCheck()) {
        // Handle exception here.
        env-&amp;gt;ExceptionClear();
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="java-native-methods">
<db:title>Java Native Methods</db:title>
<db:para>Java native methods makes it possible to call native code from Java, this is done by creating a function declaration in Java and prefixing it with the <db:emphasis role="bold">native</db:emphasis> keyword. Before a native function can be called from Java, you need to map the Java native function to a native function in your code. Mapping functions can be done by calling the RegisterNatives() function through the <db:link xlink:href="qandroidjnienvironment.xml">JNI environment pointer</db:link>.</db:para>
<db:para>The example below demonstrates how this could be done.</db:para>
<db:para>Java implementation:</db:para>
<db:programlisting language="cpp">class FooJavaClass
{
    public static void foo(int x)
    {
        if (x &amp;lt; 100)
            callNativeOne(x);
        else
            callNativeTwo(x);
    }

private static native void callNativeOne(int x);
private static native void callNativeTwo(int x);

}
</db:programlisting>
<db:para>C++ Implementation:</db:para>
<db:programlisting language="cpp">static void fromJavaOne(JNIEnv *env, jobject thiz, jint x)
{
    Q_UNUSED(env)
    Q_UNUSED(thiz)
    qDebug() &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &quot;&amp;lt; 100&quot;;
}

static void fromJavaTwo(JNIEnv *env, jobject thiz, jint x)
{
    Q_UNUSED(env)
    Q_UNUSED(thiz)
    qDebug() &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &quot;&amp;gt;= 100&quot;;
}

void registerNativeMethods() {
    JNINativeMethod methods[] {{&quot;callNativeOne&quot;, &quot;(I)V&quot;, reinterpret_cast&amp;lt;void *&amp;gt;(fromJavaOne)},
                               {&quot;callNativeTwo&quot;, &quot;(I)V&quot;, reinterpret_cast&amp;lt;void *&amp;gt;(fromJavaTwo)}};

    QAndroidJniObject javaClass(&quot;my/java/project/FooJavaClass&quot;);
    QAndroidJniEnvironment env;
    jclass objectClass = env-&amp;gt;GetObjectClass(javaClass.object&amp;lt;jobject&amp;gt;());
    env-&amp;gt;RegisterNatives(objectClass,
                         methods,
                         sizeof(methods) / sizeof(methods[0]));
    env-&amp;gt;DeleteLocalRef(objectClass);
}

void foo()
{
    QAndroidJniObject::callStaticMethod&amp;lt;void&amp;gt;(&quot;my/java/project/FooJavaClass&quot;, &quot;foo&quot;, &quot;(I)V&quot;, 10);  // Output: 10 &amp;lt; 100
    QAndroidJniObject::callStaticMethod&amp;lt;void&amp;gt;(&quot;my/java/project/FooJavaClass&quot;, &quot;foo&quot;, &quot;(I)V&quot;, 100); // Output: 100 &amp;gt;= 100
}
</db:programlisting>
</db:section>
<db:section xml:id="the-lifetime-of-a-java-object">
<db:title>The Lifetime of a Java Object</db:title>
<db:para>Most <db:link xlink:href="qandroidjniobject.xml#object-types">objects</db:link> received from Java will be local references and will only stay valid in the scope you received them. After that, the object becomes eligible for garbage collection. If you want to keep a Java object alive you need to either create a new global reference to the object and release it when you are done, or construct a new <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> and let it manage the lifetime of the Java object.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> does only manage its own references, if you construct a <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> from a global or local reference that reference will not be released by the <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="jni-types">
<db:title>JNI Types</db:title>
<db:section xml:id="object-types">
<db:title>Object Types</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Signature</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>jobject</db:para>
</db:td>
<db:td>
<db:para>Ljava/lang/Object;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jclass</db:para>
</db:td>
<db:td>
<db:para>Ljava/lang/Class;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jstring</db:para>
</db:td>
<db:td>
<db:para>Ljava/lang/String;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jthrowable</db:para>
</db:td>
<db:td>
<db:para>Ljava/lang/Throwable;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jobjectArray</db:para>
</db:td>
<db:td>
<db:para>[Ljava/lang/Object;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jarray</db:para>
</db:td>
<db:td>
<db:para>[<db:emphasis>&lt;type&gt;</db:emphasis></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jbooleanArray</db:para>
</db:td>
<db:td>
<db:para>[Z</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jbyteArray</db:para>
</db:td>
<db:td>
<db:para>[B</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jcharArray</db:para>
</db:td>
<db:td>
<db:para>[C</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jshortArray</db:para>
</db:td>
<db:td>
<db:para>[S</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jintArray</db:para>
</db:td>
<db:td>
<db:para>[I</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jlongArray</db:para>
</db:td>
<db:td>
<db:para>[J</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jfloatArray</db:para>
</db:td>
<db:td>
<db:para>[F</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jdoubleArray</db:para>
</db:td>
<db:td>
<db:para>[D</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="primitive-types">
<db:title>Primitive Types</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Signature</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>jboolean</db:para>
</db:td>
<db:td>
<db:para>Z</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jbyte</db:para>
</db:td>
<db:td>
<db:para>B</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jchar</db:para>
</db:td>
<db:td>
<db:para>C</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jshort</db:para>
</db:td>
<db:td>
<db:para>S</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jint</db:para>
</db:td>
<db:td>
<db:para>I</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jlong</db:para>
</db:td>
<db:td>
<db:para>J</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jfloat</db:para>
</db:td>
<db:td>
<db:para>F</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jdouble</db:para>
</db:td>
<db:td>
<db:para>D</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="other">
<db:title>Other</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Signature</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>void</db:para>
</db:td>
<db:td>
<db:para>V</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>Custom type</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>L<db:emphasis>&lt;fully-qualified-name&gt;</db:emphasis>;</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For more information about JNI see: <db:link xlink:href="http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html">http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html</db:link></db:para>
</db:section>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qandroidjnienvironment.xml">QAndroidJniEnvironment</db:link></db:member>
<db:member><db:link xlink:href="qandroidjniobject.xml#object">object</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAndroidJniObject">
<db:title>QAndroidJniObject::QAndroidJniObject()</db:title>
<db:constructorsynopsis>
<db:methodname>QAndroidJniObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an invalid <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qandroidjniobject.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QAndroidJniObject-1">
<db:title>[explicit] QAndroidJniObject::QAndroidJniObject(const char *<db:emphasis>className</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAndroidJniObject</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject(const char *className)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> by calling the default constructor of <db:code role="parameter">className</db:code>.</db:para>
<db:programlisting language="cpp">...
QAndroidJniObject myJavaString(&quot;java/lang/String&quot;);
...

</db:programlisting>
</db:section>
<db:section xml:id="QAndroidJniObject-2">
<db:title>[explicit] QAndroidJniObject::QAndroidJniObject(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAndroidJniObject</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject(const char *className, const char *signature, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> by calling the constructor of <db:code role="parameter">className</db:code> with <db:code role="parameter">signature</db:code> and arguments.</db:para>
<db:programlisting language="cpp">...
jstring myJStringArg = ...;
QAndroidJniObject myNewJavaString(&quot;java/lang/String&quot;, &quot;(Ljava/lang/String;)V&quot;, myJStringArg);
...

</db:programlisting>
</db:section>
<db:section xml:id="QAndroidJniObject-3">
<db:title>[explicit] QAndroidJniObject::QAndroidJniObject(jclass <db:emphasis>clazz</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAndroidJniObject</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject(jclass clazz)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> by calling the default constructor of <db:code role="parameter">clazz</db:code>.</db:para>
<db:para>Note: The <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> will create a new reference to the class <db:code role="parameter">clazz</db:code> and releases it again when it is destroyed. References to the class created outside the <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> needs to be managed by the caller.</db:para>
</db:section>
<db:section xml:id="QAndroidJniObject-4">
<db:title>[explicit] QAndroidJniObject::QAndroidJniObject(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAndroidJniObject</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject(jclass clazz, const char *signature, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> from <db:code role="parameter">clazz</db:code> by calling the constructor with <db:code role="parameter">signature</db:code> and arguments.</db:para>
<db:programlisting language="cpp">jclass myClazz = ...;
QAndroidJniObject::QAndroidJniObject(myClazz, &quot;(I)V&quot;, 3);
</db:programlisting>
</db:section>
<db:section xml:id="QAndroidJniObject-5">
<db:title>QAndroidJniObject::QAndroidJniObject(int <db:emphasis>object</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAndroidJniObject</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject(int object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> around the Java object <db:code role="parameter">object</db:code>.</db:para>
<db:para>Note: The <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> will hold a reference to the Java object <db:code role="parameter">object</db:code> and release it when destroyed. Any references to the Java object <db:code role="parameter">object</db:code> outside <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> needs to be managed by the caller.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qandroidjniobject.xml#fromLocalRef">fromLocalRef</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QAndroidJniObject">
<db:title>QAndroidJniObject::~QAndroidJniObject()</db:title>
<db:destructorsynopsis>
<db:methodname>~QAndroidJniObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAndroidJniObject()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> and releases any references held by the <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link>.</db:para>
</db:section>
<db:section xml:id="callMethod">
<db:title>T QAndroidJniObject::callMethod(const char *<db:emphasis>methodName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>callMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T callMethod(const char *methodName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the method <db:code role="parameter">methodName</db:code> and returns the value.</db:para>
<db:programlisting language="cpp">QAndroidJniObject myJavaString = ...;
jint size = myJavaString.callMethod&amp;lt;jint&amp;gt;(&quot;length&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="callMethod-1">
<db:title>T QAndroidJniObject::callMethod(const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>sig</db:emphasis>, <db:emphasis>...</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>callMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>sig</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">T callMethod(const char *methodName, const char *sig, ...) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the method <db:code role="parameter">methodName</db:code> with a signature <db:code role="parameter">sig</db:code> and returns the value.</db:para>
<db:programlisting language="cpp">QAndroidJniObject myJavaString = ...;
jint index = myJavaString.callMethod&amp;lt;jint&amp;gt;(&quot;indexOf&quot;, &quot;(I)I&quot;, 0x0051);
</db:programlisting>
</db:section>
<db:section xml:id="callObjectMethod">
<db:title>QAndroidJniObject QAndroidJniObject::callObjectMethod(const char *<db:emphasis>methodName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>callObjectMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject callObjectMethod(const char *methodName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the Java objects method <db:code role="parameter">methodName</db:code> and returns a new <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> for the returned Java object.</db:para>
<db:programlisting language="cpp">...
QAndroidJniObject myJavaString1 = ...;
QAndroidJniObject myJavaString2 = myJavaString1.callObjectMethod&amp;lt;jstring&amp;gt;(&quot;toString&quot;);
...
</db:programlisting>
</db:section>
<db:section xml:id="callObjectMethod-1">
<db:title>QAndroidJniObject QAndroidJniObject::callObjectMethod(const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>callObjectMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject callObjectMethod(const char *methodName, const char *signature, ...) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the Java object's method <db:code role="parameter">methodName</db:code> with the signature <db:code role="parameter">signature</db:code> and arguments</db:para>
<db:programlisting language="cpp">QAndroidJniObject myJavaString; ==&amp;gt; &quot;Hello, Java&quot;
QAndroidJniObject mySubstring = myJavaString.callObjectMethod(&quot;substring&quot;, &quot;(II)Ljava/lang/String;&quot;, 7, 10);
</db:programlisting>
</db:section>
<db:section xml:id="callStaticMethod">
<db:title>[static] T QAndroidJniObject::callStaticMethod(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>T</db:type>
<db:methodname>callStaticMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T callStaticMethod(const char *className, const char *methodName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method <db:code role="parameter">methodName</db:code> on class <db:code role="parameter">className</db:code> and returns the value.</db:para>
<db:programlisting language="cpp">jint value = QAndroidJniObject::callStaticMethod&amp;lt;jint&amp;gt;(&quot;MyClass&quot;, &quot;staticMethod&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="callStaticMethod-1">
<db:title>[static] T QAndroidJniObject::callStaticMethod(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>T</db:type>
<db:methodname>callStaticMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">T callStaticMethod(const char *className, const char *methodName, const char *signature, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method with <db:code role="parameter">methodName</db:code> with <db:code role="parameter">signature</db:code> on class <db:code role="parameter">className</db:code> with optional arguments.</db:para>
<db:programlisting language="cpp">...
jint a = 2;
jint b = 4;
jint max = QAndroidJniObject::callStaticMethod&amp;lt;jint&amp;gt;(&quot;java/lang/Math&quot;, &quot;max&quot;, &quot;(II)I&quot;, a, b);
...
</db:programlisting>
</db:section>
<db:section xml:id="callStaticMethod-2">
<db:title>[static] T QAndroidJniObject::callStaticMethod(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>T</db:type>
<db:methodname>callStaticMethod</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">T callStaticMethod(jclass clazz, const char *methodName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method <db:code role="parameter">methodName</db:code> on <db:code role="parameter">clazz</db:code> and returns the value.</db:para>
<db:programlisting language="cpp">...
jclass javaMathClass = ...; // (&quot;java/lang/Math&quot;)
jdouble randNr = QAndroidJniObject::callStaticMethod&amp;lt;jdouble&amp;gt;(javaMathClass, &quot;random&quot;);
...
</db:programlisting>
</db:section>
<db:section xml:id="callStaticMethod-3">
<db:title>[static] T QAndroidJniObject::callStaticMethod(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>T</db:type>
<db:methodname>callStaticMethod</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">T callStaticMethod(jclass clazz, const char *methodName, const char *signature, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method <db:code role="parameter">methodName</db:code> with <db:code role="parameter">signature</db:code> on <db:code role="parameter">clazz</db:code> and returns the value.</db:para>
<db:programlisting language="cpp">...
jclass javaMathClass = ...; // (&quot;java/lang/Math&quot;)
jint a = 2;
jint b = 4;
jint max = QAndroidJniObject::callStaticMethod&amp;lt;jint&amp;gt;(javaMathClass, &quot;max&quot;, &quot;(II)I&quot;, a, b);
...
</db:programlisting>
</db:section>
<db:section xml:id="callStaticObjectMethod">
<db:title>[static] QAndroidJniObject QAndroidJniObject::callStaticObjectMethod(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>callStaticObjectMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject callStaticObjectMethod(const char *className, const char *methodName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method with <db:code role="parameter">methodName</db:code> on the class <db:code role="parameter">className</db:code>.</db:para>
<db:programlisting language="cpp">QAndroidJniObject string = QAndroidJniObject::callStaticObjectMethod&amp;lt;jstring&amp;gt;(&quot;CustomClass&quot;, &quot;getClassName&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="callStaticObjectMethod-1">
<db:title>[static] QAndroidJniObject QAndroidJniObject::callStaticObjectMethod(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>callStaticObjectMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject callStaticObjectMethod(const char *className, const char *methodName, const char *signature, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method with <db:code role="parameter">methodName</db:code> and <db:code role="parameter">signature</db:code> on the class <db:code role="parameter">className</db:code>.</db:para>
<db:programlisting language="cpp">QAndroidJniObject thread = QAndroidJniObject::callStaticObjectMethod(&quot;java/lang/Thread&quot;, &quot;currentThread&quot;, &quot;()Ljava/lang/Thread;&quot;);
QAndroidJniObject string = QAndroidJniObject::callStaticObjectMethod(&quot;java/lang/String&quot;, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;, 10);
</db:programlisting>
</db:section>
<db:section xml:id="callStaticObjectMethod-2">
<db:title>[static] QAndroidJniObject QAndroidJniObject::callStaticObjectMethod(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>callStaticObjectMethod</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject callStaticObjectMethod(jclass clazz, const char *methodName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method with <db:code role="parameter">methodName</db:code> on <db:code role="parameter">clazz</db:code>.</db:para>
</db:section>
<db:section xml:id="callStaticObjectMethod-3">
<db:title>[static] QAndroidJniObject QAndroidJniObject::callStaticObjectMethod(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>callStaticObjectMethod</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject callStaticObjectMethod(jclass clazz, const char *methodName, const char *signature, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method with <db:code role="parameter">methodName</db:code> and <db:code role="parameter">signature</db:code> on class <db:code role="parameter">clazz</db:code>.</db:para>
</db:section>
<db:section xml:id="fromLocalRef">
<db:title>[static, since 5.7] QAndroidJniObject QAndroidJniObject::fromLocalRef(int <db:emphasis>localRef</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>fromLocalRef</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>localRef</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject fromLocalRef(int localRef)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> from the local JNI reference <db:code role="parameter">localRef</db:code>. This function takes ownership of <db:code role="parameter">localRef</db:code> and frees it before returning.</db:para>
<db:note>
<db:para>Only call this function with a local JNI reference. For example, most raw JNI calls, through the JNI environment, returns local references to a java object.</db:para>
</db:note>
<db:programlisting language="cpp">jobject localRef = env-&amp;gt;GetObjectArrayElement(array, index);
QAndroidJniObject element = QAndroidJniObject::fromLocalRef(localRef);
</db:programlisting>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="fromString">
<db:title>[static] QAndroidJniObject QAndroidJniObject::fromString(const QString &amp;<db:emphasis>string</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject fromString(const QString &amp;string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a Java string from the <db:link xlink:href="qstring.xml">QString</db:link> <db:code role="parameter">string</db:code> and returns a <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> holding that string.</db:para>
<db:programlisting language="cpp">...
QString myQString = &quot;QString&quot;;
QAndroidJniObject myJavaString = QAndroidJniObject::fromString(myQString);
...
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qandroidjniobject.xml#toString">toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getField">
<db:title>T QAndroidJniObject::getField(const char *<db:emphasis>fieldName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>getField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T getField(const char *fieldName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the value of the field <db:code role="parameter">fieldName</db:code>.</db:para>
<db:programlisting language="cpp">QAndroidJniObject volumeControl = ...;
jint fieldValue = volumeControl.getField&amp;lt;jint&amp;gt;(&quot;MAX_VOLUME&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="getObjectField">
<db:title>QAndroidJniObject QAndroidJniObject::getObjectField(const char *<db:emphasis>fieldName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>getObjectField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject getObjectField(const char *fieldName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the object of field <db:code role="parameter">fieldName</db:code>.</db:para>
<db:programlisting language="cpp">QAndroidJniObject field = jniObject.getObjectField&amp;lt;jstring&amp;gt;(&quot;FIELD_NAME&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="getObjectField-1">
<db:title>QAndroidJniObject QAndroidJniObject::getObjectField(const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>getObjectField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject getObjectField(const char *fieldName, const char *signature) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the object from the field with <db:code role="parameter">signature</db:code> and <db:code role="parameter">fieldName</db:code>.</db:para>
<db:note>
<db:para>Since <db:emphasis role="bold">Qt 5.3</db:emphasis> this function can be used without a template type.</db:para>
</db:note>
<db:programlisting language="cpp">QAndroidJniObject field = jniObject.getObjectField(&quot;FIELD_NAME&quot;, &quot;Ljava/lang/String;&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="getStaticField">
<db:title>[static] T QAndroidJniObject::getStaticField(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>T</db:type>
<db:methodname>getStaticField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T getStaticField(const char *className, const char *fieldName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the value from the static field <db:code role="parameter">fieldName</db:code> on the class <db:code role="parameter">className</db:code>.</db:para>
</db:section>
<db:section xml:id="getStaticField-1">
<db:title>[static] T QAndroidJniObject::getStaticField(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>T</db:type>
<db:methodname>getStaticField</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">T getStaticField(jclass clazz, const char *fieldName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the value from the static field <db:code role="parameter">fieldName</db:code> on <db:code role="parameter">clazz</db:code>.</db:para>
</db:section>
<db:section xml:id="getStaticObjectField">
<db:title>[static] QAndroidJniObject QAndroidJniObject::getStaticObjectField(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>getStaticObjectField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject getStaticObjectField(const char *className, const char *fieldName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the object from the field <db:code role="parameter">fieldName</db:code> on the class <db:code role="parameter">className</db:code>.</db:para>
<db:programlisting language="cpp">QAndroidJniObject jobj = QAndroidJniObject::getStaticObjectField&amp;lt;jstring&amp;gt;(&quot;class/with/Fields&quot;, &quot;FIELD_NAME&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="getStaticObjectField-1">
<db:title>[static] QAndroidJniObject QAndroidJniObject::getStaticObjectField(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>getStaticObjectField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject getStaticObjectField(const char *className, const char *fieldName, const char *signature)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the object from the field with <db:code role="parameter">signature</db:code> and <db:code role="parameter">fieldName</db:code> on class <db:code role="parameter">className</db:code>.</db:para>
<db:note>
<db:para>Since <db:emphasis role="bold">Qt 5.3</db:emphasis> this function can be used without a template type.</db:para>
</db:note>
<db:programlisting language="cpp">QAndroidJniObject jobj = QAndroidJniObject::getStaticObjectField(&quot;class/with/Fields&quot;, &quot;FIELD_NAME&quot;, &quot;Ljava/lang/String;&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="getStaticObjectField-2">
<db:title>[static] QAndroidJniObject QAndroidJniObject::getStaticObjectField(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>getStaticObjectField</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject getStaticObjectField(jclass clazz, const char *fieldName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the object from the field <db:code role="parameter">fieldName</db:code> on <db:code role="parameter">clazz</db:code>.</db:para>
<db:programlisting language="cpp">QAndroidJniObject jobj = QAndroidJniObject::getStaticObjectField&amp;lt;jstring&amp;gt;(clazz, &quot;FIELD_NAME&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="getStaticObjectField-3">
<db:title>[static] QAndroidJniObject QAndroidJniObject::getStaticObjectField(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QAndroidJniObject</db:type>
<db:methodname>getStaticObjectField</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject getStaticObjectField(jclass clazz, const char *fieldName, const char *signature)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the object from the field with <db:code role="parameter">signature</db:code> and <db:code role="parameter">fieldName</db:code> on <db:code role="parameter">clazz</db:code>.</db:para>
<db:note>
<db:para>Since <db:emphasis role="bold">Qt 5.3</db:emphasis> this function can be used without a template type.</db:para>
</db:note>
<db:programlisting language="cpp">QAndroidJniObject jobj = QAndroidJniObject::getStaticObjectField(clazz, &quot;FIELD_NAME&quot;, &quot;Ljava/lang/String;&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="isClassAvailable">
<db:title>[static] bool QAndroidJniObject::isClassAvailable(const char *<db:emphasis>className</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isClassAvailable</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isClassAvailable(const char *className)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the Java class <db:code role="parameter">className</db:code> is available.</db:para>
<db:programlisting language="cpp">...
if (QAndroidJniObject::isClassAvailable(&quot;java/lang/String&quot;)) {
   ...
}
...
</db:programlisting>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QAndroidJniObject::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this instance holds a valid Java object.</db:para>
<db:programlisting language="cpp">...
QAndroidJniObject qjniObject;                        ==&amp;gt; isValid() == false
QAndroidJniObject qjniObject(0)                      ==&amp;gt; isValid() == false
QAndroidJniObject qjniObject(&quot;could/not/find/Class&quot;) ==&amp;gt; isValid() == false
...
</db:programlisting>
</db:section>
<db:section xml:id="object">
<db:title>T QAndroidJniObject::object() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>object</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T object() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the object held by the <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> as type T.</db:para>
<db:programlisting language="cpp">QAndroidJniObject string = QAndroidJniObject::fromString(&quot;Hello, JNI&quot;);
jstring jstring = string.object&amp;lt;jstring&amp;gt;();
</db:programlisting>
<db:note>
<db:para>The returned object is still owned by the <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link>. If you want to keep the object valid you should create a new <db:link xlink:href="qandroidjniobject.xml">QAndroidJniObject</db:link> or make a new global reference to the object and free it yourself.</db:para>
</db:note>
<db:programlisting language="cpp">void functionScope()
{
    QString helloString(&quot;Hello&quot;);
    jstring myJString = 0;
    {
        QAndroidJniObject string = QAndroidJniObject::fromString(helloString);
        myJString = string.object&amp;lt;jstring&amp;gt;();
    }

   // Ops! myJString is no longer valid.
}
</db:programlisting>
<db:note>
<db:para>Since <db:emphasis role="bold">Qt 5.3</db:emphasis> this function can be used without a template type, if the returned type is a <db:code>jobject</db:code>.</db:para>
</db:note>
<db:programlisting language="cpp">jobject object = jniObject.object();
</db:programlisting>
</db:section>
<db:section xml:id="setField">
<db:title>void QAndroidJniObject::setField(const char *<db:emphasis>fieldName</db:emphasis>, T <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setField(const char *fieldName, T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of <db:code role="parameter">fieldName</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:programlisting language="cpp">...
QAndroidJniObject obj;
obj.setField&amp;lt;jint&amp;gt;(&quot;AN_INT_FIELD&quot;, 10);
jstring myString = ...
obj.setField&amp;lt;jstring&amp;gt;(&quot;A_STRING_FIELD&quot;, myString);
...
</db:programlisting>
</db:section>
<db:section xml:id="setField-1">
<db:title>void QAndroidJniObject::setField(const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, T <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setField(const char *fieldName, const char *signature, T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of <db:code role="parameter">fieldName</db:code> with <db:code role="parameter">signature</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:programlisting language="cpp">QAndroidJniObject stringArray = ...;
QAndroidJniObject obj = ...;
obj.setField&amp;lt;jobjectArray&amp;gt;(&quot;KEY_VALUES&quot;, &quot;([Ljava/lang/String;)V&quot;, stringArray.object&amp;lt;jobjectArray&amp;gt;())
</db:programlisting>
</db:section>
<db:section xml:id="setStaticField">
<db:title>[static] void QAndroidJniObject::setStaticField(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, T <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setStaticField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStaticField(const char *className, const char *fieldName, const char *signature, T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the static field with <db:code role="parameter">fieldName</db:code> and <db:code role="parameter">signature</db:code> to <db:code role="parameter">value</db:code> on class <db:code role="parameter">className</db:code>.</db:para>
</db:section>
<db:section xml:id="setStaticField-1">
<db:title>[static] void QAndroidJniObject::setStaticField(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, T <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setStaticField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStaticField(const char *className, const char *fieldName, T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of the static field <db:code role="parameter">fieldName</db:code> in class <db:code role="parameter">className</db:code> to <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="setStaticField-2">
<db:title>[static] void QAndroidJniObject::setStaticField(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, T <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setStaticField</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStaticField(jclass clazz, const char *fieldName, const char *signature, T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the static field with <db:code role="parameter">fieldName</db:code> and <db:code role="parameter">signature</db:code> to <db:code role="parameter">value</db:code> on class <db:code role="parameter">clazz</db:code>.</db:para>
</db:section>
<db:section xml:id="setStaticField-3">
<db:title>[static] void QAndroidJniObject::setStaticField(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, T <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setStaticField</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStaticField(jclass clazz, const char *fieldName, T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the static field <db:code role="parameter">fieldName</db:code> of the class <db:code role="parameter">clazz</db:code> to <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>QString QAndroidJniObject::toString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> with a string representation of the java object. Calling this function on a Java String object is a convenient way of getting the actual string data.</db:para>
<db:programlisting language="cpp">QAndroidJniObject string = ...; //  &quot;Hello Java&quot;
QString qstring = string.toString(); // &quot;Hello Java&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qandroidjniobject.xml#fromString">fromString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QAndroidJniObject &amp;QAndroidJniObject::operator=(T <db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAndroidJniObject &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidJniObject &amp; operator=(T object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replace the current object with <db:code role="parameter">object</db:code>. The old Java object will be released.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq-2">
<db:title>bool operator!=(const QAndroidJniObject &amp;<db:emphasis>o1</db:emphasis>, const QAndroidJniObject &amp;<db:emphasis>o2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QAndroidJniObject &amp;</db:type>
<db:parameter>o1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAndroidJniObject &amp;</db:type>
<db:parameter>o2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QAndroidJniObject &amp;o1, const QAndroidJniObject &amp;o2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">o1</db:code> holds a reference to a different object then <db:code role="parameter">o2</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-2">
<db:title>bool operator==(const QAndroidJniObject &amp;<db:emphasis>o1</db:emphasis>, const QAndroidJniObject &amp;<db:emphasis>o2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QAndroidJniObject &amp;</db:type>
<db:parameter>o1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAndroidJniObject &amp;</db:type>
<db:parameter>o2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QAndroidJniObject &amp;o1, const QAndroidJniObject &amp;o2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if both objects, <db:code role="parameter">o1</db:code> and <db:code role="parameter">o2</db:code>, are referencing the same Java object, or if both are NULL. In any other cases false will be returned.</db:para>
</db:section>
</db:section>
</db:article>
