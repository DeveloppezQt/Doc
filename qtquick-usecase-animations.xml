<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Use case - Animations In QML</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Example of how to include animations in QML applications.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> provides the ability to animate properties. Animating properties allows property values to move through intermediate values instead of immediately changing to the target value. To animate the position of an item, you can animate the properties that control the item's position, x and y for example, so that the item's position changes each frame on the way to the target position.</db:para>
<db:section xml:id="fluid-uis">
<db:title>Fluid UIs</db:title>
<db:para>QML was designed to facilitate the creation of fluid UIs. These are user interfaces where the UI components animate instead of appearing, disappearing, or jumping abruptly. Qt Quick provides two simple ways to have UI components move with animation instead of instantly appearing at their new location.</db:para>
<db:section xml:id="states-and-transitions">
<db:title>States and Transitions</db:title>
<db:para>Qt Quick allows you to declare various UI states in <db:link xlink:href="qml-qtqml-statemachine-state.xml">State</db:link> objects. These states are comprised of property changes from a base state, and can be a useful way of organizing your UI logic. Transitions are objects you can associate with an item to define how its properties will animate when they change due to a state change.</db:para>
<db:para>States and transitions for an item can be declared with the <db:link xlink:href="qml-qtquick-item.xml#states-prop">Item::states</db:link> and <db:link xlink:href="qml-qtquick-item.xml#transitions-prop">Item::transitions</db:link> properties. States are declared inside the states list property of an item, usually the root item of the component. Transitions defined on the same item are used to animate the changes in the state. Here is an example.</db:para>
<db:programlisting language="qml">Item {
    id: container
    width: 320
    height: 120

    Rectangle {
        id: rect
        color: &quot;red&quot;
        width: 120
        height: 120

        MouseArea {
            anchors.fill: parent
            onClicked: container.state == 'other' ? container.state = '' : container.state = 'other'
        }
    }
    states: [
        // This adds a second state to the container where the rectangle is farther to the right

        State { name: &quot;other&quot;

            PropertyChanges {
                target: rect
                x: 200
            }
        }
    ]
    transitions: [
        // This adds a transition that defaults to applying to all state changes

        Transition {

            // This applies a default NumberAnimation to any changes a state change makes to x or y properties
            NumberAnimation { properties: &quot;x,y&quot; }
        }
    ]
}
</db:programlisting>
</db:section>
<db:section xml:id="animating-property-changes">
<db:title>Animating Property Changes.</db:title>
<db:para>Behaviors can be used to specify an animation for a property to use when it changes. This is then applied to all changes, regardless of their source. The following example animates a button moving around the screen using behaviors.</db:para>
<db:programlisting language="qml">Item {
    width: 320
    height: 120

    Rectangle {
        color: &quot;green&quot;
        width: 120
        height: 120

        // This is the behavior, and it applies a NumberAnimation to any attempt to set the x property
        Behavior on x {

            NumberAnimation {
                //This specifies how long the animation takes
                duration: 600
                //This selects an easing curve to interpolate with, the default is Easing.Linear
                easing.type: Easing.OutBounce
            }
        }

        MouseArea {
            anchors.fill: parent
            onClicked: parent.x == 0 ? parent.x = 200 : parent.x = 0
        }
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="other-animations">
<db:title>Other Animations</db:title>
<db:para>Not all animations have to be tied to a specific property or state. You can also create animations more generally, and specify target items and properties inside the animation. Here are some examples of different ways to do this:</db:para>
<db:programlisting language="qml">Item {
    width: 320
    height: 120

    Rectangle {
        color: &quot;blue&quot;
        width: 120
        height: 120

        // By setting this SequentialAnimation on x, it and animations within it will automatically animate
        // the x property of this element
        SequentialAnimation on x {
            id: xAnim
            // Animations on properties start running by default
            running: false
            loops: Animation.Infinite // The animation is set to loop indefinitely
            NumberAnimation { from: 0; to: 200; duration: 500; easing.type: Easing.InOutQuad }
            NumberAnimation { from: 200; to: 0; duration: 500; easing.type: Easing.InOutQuad }
            PauseAnimation { duration: 250 } // This puts a bit of time between the loop
        }

        MouseArea {
            anchors.fill: parent
            // The animation starts running when you click within the rectangle
            onClicked: xAnim.running = true
        }
    }
}
Item {
    width: 320
    height: 120

    Rectangle {
        id: rectangle
        color: &quot;yellow&quot;
        width: 120
        height: 120

        MouseArea {
            anchors.fill: parent
            // The animation starts running when you click within the rectange
            onClicked: anim.running = true;
        }
    }

    // This animation specifically targets the Rectangle's properties to animate
    SequentialAnimation {
        id: anim
        // Animations on their own are not running by default
        // The default number of loops is one, restart the animation to see it again

        NumberAnimation { target: rectangle; property: &quot;x&quot;; from: 0; to: 200; duration: 500 }

        NumberAnimation { target: rectangle; property: &quot;x&quot;; from: 200; to: 0; duration: 500 }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-uses-animation.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>More information about animations can be found on the <db:link xlink:href="qtquick-statesanimations-topic.xml">Important Concepts in Qt Quick - States, Transitions and Animations</db:link> page.</db:para>
</db:section>
</db:article>
