<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoPolygon Class</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeopolygon.xml">QGeoPolygon</db:link> class defines a geographic polygon.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoPolygon</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Positioning)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Positioning)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += positioning</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgeoshape.xml" xlink:role="class">QGeoShape</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoPolygon is part of <db:simplelist><db:member>QtPositioning-positioning</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The polygon is defined by an ordered list of <db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link> objects representing its perimeter.</db:para>
<db:para>Each two adjacent elements in this list are intended to be connected together by the shortest line segment of constant bearing passing through both elements. This type of connection can cross the date line in the longitudinal direction, but never crosses the poles.</db:para>
<db:para>This is relevant for the calculation of the bounding box returned by <db:link xlink:href="qgeoshape.xml#boundingGeoRectangle">QGeoShape::boundingGeoRectangle</db:link>() for this shape, which will have the latitude of the top left corner set to the maximum latitude in the path point set. Similarly, the latitude of the bottom right corner will be the minimum latitude in the path point set.</db:para>
<db:para>This class is a <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link>. It can be <db:link xlink:href="positioning-cpp-qml.xml#cpp-value-integration-positioning">directly used from C++ and QML</db:link>.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoPolygon">
<db:title>QGeoPolygon::QGeoPolygon()</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoPolygon</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPolygon()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new, empty geo polygon.</db:para>
</db:section>
<db:section xml:id="QGeoPolygon-1">
<db:title>QGeoPolygon::QGeoPolygon(const QList&lt;QGeoCoordinate&gt; &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoPolygon</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QGeoCoordinate&gt; &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPolygon(const QList&lt;QGeoCoordinate&gt; &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new geo polygon from the coordinates specified in <db:code role="parameter">path</db:code>.</db:para>
</db:section>
<db:section xml:id="QGeoPolygon-3">
<db:title>QGeoPolygon::QGeoPolygon(const QGeoShape &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoPolygon</db:methodname>
<db:methodparam>
<db:type>const QGeoShape &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPolygon(const QGeoShape &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new geo polygon from the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QGeoPolygon-2">
<db:title>QGeoPolygon::QGeoPolygon(const QGeoPolygon &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoPolygon</db:methodname>
<db:methodparam>
<db:type>const QGeoPolygon &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPolygon(const QGeoPolygon &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new geo polygon from the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoPolygon">
<db:title>QGeoPolygon::~QGeoPolygon()</db:title>
<db:destructorsynopsis>
<db:methodname>~QGeoPolygon</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGeoPolygon()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this polygon.</db:para>
</db:section>
<db:section xml:id="addCoordinate">
<db:title>void QGeoPolygon::addCoordinate(const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addCoordinate</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addCoordinate(const QGeoCoordinate &amp;coordinate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends <db:code role="parameter">coordinate</db:code> to the polygon.</db:para>
</db:section>
<db:section xml:id="addHole">
<db:title>void QGeoPolygon::addHole(const QVariant &amp;<db:emphasis>holePath</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addHole</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>holePath</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addHole(const QVariant &amp;holePath)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">holePath</db:code> for a hole inside the polygon. The hole is a <db:link xlink:href="qvariant.xml">QVariant</db:link> containing a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link>&gt;.</db:para>
</db:section>
<db:section xml:id="addHole-1">
<db:title>void QGeoPolygon::addHole(const QList&lt;QGeoCoordinate&gt; &amp;<db:emphasis>holePath</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addHole</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QGeoCoordinate&gt; &amp;</db:type>
<db:parameter>holePath</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void addHole(const QList&lt;QGeoCoordinate&gt; &amp;holePath)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Overloaded method. Sets the <db:code role="parameter">holePath</db:code> for a hole inside the polygon. The hole is a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link>&gt;.</db:para>
</db:section>
<db:section xml:id="containsCoordinate">
<db:title>bool QGeoPolygon::containsCoordinate(const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>containsCoordinate</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool containsCoordinate(const QGeoCoordinate &amp;coordinate) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the polygon's perimeter contains <db:code role="parameter">coordinate</db:code> as one of the elements.</db:para>
</db:section>
<db:section xml:id="coordinateAt">
<db:title>QGeoCoordinate QGeoPolygon::coordinateAt(qsizetype <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoCoordinate</db:type>
<db:methodname>coordinateAt</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCoordinate coordinateAt(qsizetype index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the coordinate at <db:code role="parameter">index</db:code> .</db:para>
</db:section>
<db:section xml:id="hole">
<db:title>const QVariantList QGeoPolygon::hole(qsizetype <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QVariantList</db:type>
<db:methodname>hole</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QVariantList hole(qsizetype index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qvariant.xml">QVariant</db:link> containing a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link>&gt; which represents the hole at <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="holePath">
<db:title>const QList&lt;QGeoCoordinate&gt; QGeoPolygon::holePath(qsizetype <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QList&lt;QGeoCoordinate&gt;</db:type>
<db:methodname>holePath</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QList&lt;QGeoCoordinate&gt; holePath(qsizetype index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link>&gt; which represents the hole at <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="holesCount">
<db:title>qsizetype QGeoPolygon::holesCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>holesCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype holesCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of holes.</db:para>
</db:section>
<db:section xml:id="insertCoordinate">
<db:title>void QGeoPolygon::insertCoordinate(qsizetype <db:emphasis>index</db:emphasis>, const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertCoordinate</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertCoordinate(qsizetype index, const QGeoCoordinate &amp;coordinate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts <db:code role="parameter">coordinate</db:code> at the specified <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="length">
<db:title>double QGeoPolygon::length(qsizetype <db:emphasis>indexFrom</db:emphasis> = 0, qsizetype <db:emphasis>indexTo</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>length</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>indexFrom</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>indexTo</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double length(qsizetype indexFrom, qsizetype indexTo) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the length of the polygon's perimeter, in meters, from the element <db:code role="parameter">indexFrom</db:code> to the element <db:code role="parameter">indexTo</db:code>. The length is intended to be the sum of the shortest distances for each pair of adjacent points.</db:para>
</db:section>
<db:section xml:id="perimeter">
<db:title>[since QtPositioning 5.12] const QList&lt;QGeoCoordinate&gt; &amp;QGeoPolygon::perimeter() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QList&lt;QGeoCoordinate&gt; &amp;</db:type>
<db:methodname>perimeter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">perimeter</db:synopsisinfo>
<db:synopsisinfo role="signature">const QList&lt;QGeoCoordinate&gt; &amp; perimeter() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns all the elements of the polygon's perimeter.</db:para>
<db:note>
<db:para>Getter function for property perimeter. </db:para>
</db:note>
<db:para>This function was introduced in QtPositioning 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeopolygon.xml#setPerimeter">setPerimeter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeCoordinate">
<db:title>void QGeoPolygon::removeCoordinate(const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeCoordinate</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeCoordinate(const QGeoCoordinate &amp;coordinate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the last occurrence of <db:code role="parameter">coordinate</db:code> from the polygon.</db:para>
</db:section>
<db:section xml:id="removeCoordinate-1">
<db:title>void QGeoPolygon::removeCoordinate(qsizetype <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeCoordinate</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeCoordinate(qsizetype index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes element at position <db:code role="parameter">index</db:code> from the polygon.</db:para>
</db:section>
<db:section xml:id="removeHole">
<db:title>void QGeoPolygon::removeHole(qsizetype <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeHole</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeHole(qsizetype index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes element at position <db:code role="parameter">index</db:code> from the list of holes.</db:para>
</db:section>
<db:section xml:id="replaceCoordinate">
<db:title>void QGeoPolygon::replaceCoordinate(qsizetype <db:emphasis>index</db:emphasis>, const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replaceCoordinate</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void replaceCoordinate(qsizetype index, const QGeoCoordinate &amp;coordinate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the path element at the specified <db:code role="parameter">index</db:code> with <db:code role="parameter">coordinate</db:code>.</db:para>
</db:section>
<db:section xml:id="setPerimeter">
<db:title>[since QtPositioning 5.12] void QGeoPolygon::setPerimeter(const QList&lt;QGeoCoordinate&gt; &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPerimeter</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QGeoCoordinate&gt; &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">perimeter</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPerimeter(const QList&lt;QGeoCoordinate&gt; &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the perimeter of the polygon based on a list of coordinates <db:code role="parameter">path</db:code>.</db:para>
<db:note>
<db:para>Setter function for property perimeter. </db:para>
</db:note>
<db:para>This function was introduced in QtPositioning 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeopolygon.xml#perimeter">perimeter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>qsizetype QGeoPolygon::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of elements in the polygon.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>QString QGeoPolygon::toString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the geo polygon properties as a string.</db:para>
</db:section>
<db:section xml:id="translate">
<db:title>void QGeoPolygon::translate(double <db:emphasis>degreesLatitude</db:emphasis>, double <db:emphasis>degreesLongitude</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>degreesLatitude</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>degreesLongitude</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(double degreesLatitude, double degreesLongitude)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Translates this geo polygon by <db:code role="parameter">degreesLatitude</db:code> northwards and <db:code role="parameter">degreesLongitude</db:code> eastwards.</db:para>
<db:para>Negative values of <db:code role="parameter">degreesLatitude</db:code> and <db:code role="parameter">degreesLongitude</db:code> correspond to southward and westward translation respectively.</db:para>
</db:section>
<db:section xml:id="translated">
<db:title>QGeoPolygon QGeoPolygon::translated(double <db:emphasis>degreesLatitude</db:emphasis>, double <db:emphasis>degreesLongitude</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoPolygon</db:type>
<db:methodname>translated</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>degreesLatitude</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>degreesLongitude</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPolygon translated(double degreesLatitude, double degreesLongitude) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this geo polygon translated by <db:code role="parameter">degreesLatitude</db:code> northwards and <db:code role="parameter">degreesLongitude</db:code> eastwards.</db:para>
<db:para>Negative values of <db:code role="parameter">degreesLatitude</db:code> and <db:code role="parameter">degreesLongitude</db:code> correspond to southward and westward translation respectively.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeopolygon.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGeoPolygon &amp;QGeoPolygon::operator=(const QGeoPolygon &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGeoPolygon &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QGeoPolygon &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPolygon &amp; operator=(const QGeoPolygon &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this geo polygon and returns a reference to this geo polygon.</db:para>
</db:section>
</db:section>
</db:article>
