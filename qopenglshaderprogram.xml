<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLShaderProgram Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> class allows OpenGL shader programs to be linked and used.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLShaderProgram</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOpenGLShaderProgram is part of <db:simplelist><db:member><db:link xlink:href="painting-3d.xml">Rendering in 3D</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>This class supports shader programs written in the OpenGL Shading Language (GLSL) and in the OpenGL/ES Shading Language (GLSL/ES).</db:para>
<db:para><db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link> and <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> shelter the programmer from the details of compiling and linking vertex and fragment shaders.</db:para>
<db:para>The following example creates a vertex shader program using the supplied source <db:code>code</db:code>. Once compiled and linked, the shader program is activated in the current <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> by calling <db:link xlink:href="qopenglshaderprogram.xml#bind">QOpenGLShaderProgram::bind</db:link>():</db:para>
<db:programlisting language="cpp">QOpenGLShader shader(QOpenGLShader::Vertex);
shader.compileSourceCode(code);

QOpenGLShaderProgram program(context);
program.addShader(&amp;shader);
program.link();

program.bind();
</db:programlisting>
</db:section>
<db:section xml:id="writing-portable-shaders">
<db:title>Writing Portable Shaders</db:title>
<db:para>Shader programs can be difficult to reuse across OpenGL implementations because of varying levels of support for standard vertex attributes and uniform variables. In particular, GLSL/ES lacks all of the standard variables that are present on desktop OpenGL systems: <db:code>gl_Vertex</db:code>, <db:code>gl_Normal</db:code>, <db:code>gl_Color</db:code>, and so on. Desktop OpenGL lacks the variable qualifiers <db:code>highp</db:code>, <db:code>mediump</db:code>, and <db:code>lowp</db:code>.</db:para>
<db:para>The <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> class makes the process of writing portable shaders easier by prefixing all shader programs with the following lines on desktop OpenGL:</db:para>
<db:programlisting language="cpp">#define highp
#define mediump
#define lowp
</db:programlisting>
<db:para>This makes it possible to run most GLSL/ES shader programs on desktop systems. The programmer should restrict themselves to just features that are present in GLSL/ES, and avoid standard variable names that only work on the desktop.</db:para>
</db:section>
<db:section xml:id="simple-shader-example">
<db:title>Simple Shader Example</db:title>
<db:programlisting language="cpp">program.addShaderFromSourceCode(QOpenGLShader::Vertex,
    &quot;attribute highp vec4 vertex;\n&quot;
    &quot;uniform highp mat4 matrix;\n&quot;
    &quot;void main(void)\n&quot;
    &quot;{\n&quot;
    &quot;   gl_Position = matrix * vertex;\n&quot;
    &quot;}&quot;);
program.addShaderFromSourceCode(QOpenGLShader::Fragment,
    &quot;uniform mediump vec4 color;\n&quot;
    &quot;void main(void)\n&quot;
    &quot;{\n&quot;
    &quot;   gl_FragColor = color;\n&quot;
    &quot;}&quot;);
program.link();
program.bind();

int vertexLocation = program.attributeLocation(&quot;vertex&quot;);
int matrixLocation = program.uniformLocation(&quot;matrix&quot;);
int colorLocation = program.uniformLocation(&quot;color&quot;);
</db:programlisting>
<db:para>With the above shader program active, we can draw a green triangle as follows:</db:para>
<db:programlisting language="cpp">static GLfloat const triangleVertices[] = {
    60.0f,  10.0f,  0.0f,
    110.0f, 110.0f, 0.0f,
    10.0f,  110.0f, 0.0f
};

QColor color(0, 255, 0, 255);

QMatrix4x4 pmvMatrix;
pmvMatrix.ortho(rect());

program.enableAttributeArray(vertexLocation);
program.setAttributeArray(vertexLocation, triangleVertices, 3);
program.setUniformValue(matrixLocation, pmvMatrix);
program.setUniformValue(colorLocation, color);

glDrawArrays(GL_TRIANGLES, 0, 3);

program.disableAttributeArray(vertexLocation);
</db:programlisting>
</db:section>
<db:section xml:id="binary-shaders-and-programs">
<db:title>Binary Shaders and Programs</db:title>
<db:para>Binary shaders may be specified using <db:code>glShaderBinary()</db:code> on the return value from <db:link xlink:href="qopenglshader.xml#shaderId">QOpenGLShader::shaderId</db:link>(). The <db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link> instance containing the binary can then be added to the shader program with <db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>() and linked in the usual fashion with <db:link xlink:href="qopenglshaderprogram.xml#link">link</db:link>().</db:para>
<db:para>Binary programs may be specified using <db:code>glProgramBinaryOES()</db:code> on the return value from <db:link xlink:href="qopenglshaderprogram.xml#programId">programId</db:link>(). Then the application should call <db:link xlink:href="qopenglshaderprogram.xml#link">link</db:link>(), which will notice that the program has already been specified and linked, allowing other operations to be performed on the shader program. The shader program's id can be explicitly created using the <db:link xlink:href="qopenglshaderprogram.xml#create">create</db:link>() function.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLShaderProgram">
<db:title>[explicit] QOpenGLShaderProgram::QOpenGLShaderProgram(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new shader program and attaches it to <db:code role="parameter">parent</db:code>. The program will be invalid until <db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>() is called.</db:para>
<db:para>The shader program will be associated with the current <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QOpenGLShaderProgram">
<db:title>[virtual noexcept] QOpenGLShaderProgram::~QOpenGLShaderProgram()</db:title>
<db:para>Deletes this shader program.</db:para>
</db:section>
<db:section xml:id="addShader">
<db:title>bool QOpenGLShaderProgram::addShader(QOpenGLShader *<db:emphasis>shader</db:emphasis>)</db:title>
<db:para>Adds a compiled <db:code role="parameter">shader</db:code> to this shader program. Returns <db:code>true</db:code> if the shader could be added, or false otherwise.</db:para>
<db:para>Ownership of the <db:code role="parameter">shader</db:code> object remains with the caller. It will not be deleted when this <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> instance is deleted. This allows the caller to add the same shader to multiple shader programs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShaderFromSourceCode">addShaderFromSourceCode</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShaderFromSourceFile">addShaderFromSourceFile</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#removeShader">removeShader</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#link">link</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#removeAllShaders">removeAllShaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addShaderFromSourceCode">
<db:title>bool QOpenGLShaderProgram::addShaderFromSourceCode(QOpenGLShader::ShaderType <db:emphasis>type</db:emphasis>, const char *<db:emphasis>source</db:emphasis>)</db:title>
<db:para>Compiles <db:code role="parameter">source</db:code> as a shader of the specified <db:code role="parameter">type</db:code> and adds it to this shader program. Returns <db:code>true</db:code> if compilation was successful, false otherwise. The compilation errors and warnings will be made available via <db:link xlink:href="qopenglshaderprogram.xml#log">log</db:link>().</db:para>
<db:para>This function is intended to be a short-cut for quickly adding vertex and fragment shaders to a shader program without creating an instance of <db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link> first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShaderFromSourceFile">addShaderFromSourceFile</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#removeShader">removeShader</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#link">link</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#log">log</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#removeAllShaders">removeAllShaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addShaderFromSourceCode-1">
<db:title>bool QOpenGLShaderProgram::addShaderFromSourceCode(QOpenGLShader::ShaderType <db:emphasis>type</db:emphasis>, const QByteArray &amp;<db:emphasis>source</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compiles <db:code role="parameter">source</db:code> as a shader of the specified <db:code role="parameter">type</db:code> and adds it to this shader program. Returns <db:code>true</db:code> if compilation was successful, false otherwise. The compilation errors and warnings will be made available via <db:link xlink:href="qopenglshaderprogram.xml#log">log</db:link>().</db:para>
<db:para>This function is intended to be a short-cut for quickly adding vertex and fragment shaders to a shader program without creating an instance of <db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link> first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShaderFromSourceFile">addShaderFromSourceFile</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#removeShader">removeShader</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#link">link</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#log">log</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#removeAllShaders">removeAllShaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addShaderFromSourceCode-2">
<db:title>bool QOpenGLShaderProgram::addShaderFromSourceCode(QOpenGLShader::ShaderType <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>source</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compiles <db:code role="parameter">source</db:code> as a shader of the specified <db:code role="parameter">type</db:code> and adds it to this shader program. Returns <db:code>true</db:code> if compilation was successful, false otherwise. The compilation errors and warnings will be made available via <db:link xlink:href="qopenglshaderprogram.xml#log">log</db:link>().</db:para>
<db:para>This function is intended to be a short-cut for quickly adding vertex and fragment shaders to a shader program without creating an instance of <db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link> first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShaderFromSourceFile">addShaderFromSourceFile</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#removeShader">removeShader</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#link">link</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#log">log</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#removeAllShaders">removeAllShaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addShaderFromSourceFile">
<db:title>bool QOpenGLShaderProgram::addShaderFromSourceFile(QOpenGLShader::ShaderType <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Compiles the contents of <db:code role="parameter">fileName</db:code> as a shader of the specified <db:code role="parameter">type</db:code> and adds it to this shader program. Returns <db:code>true</db:code> if compilation was successful, false otherwise. The compilation errors and warnings will be made available via <db:link xlink:href="qopenglshaderprogram.xml#log">log</db:link>().</db:para>
<db:para>This function is intended to be a short-cut for quickly adding vertex and fragment shaders to a shader program without creating an instance of <db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link> first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShaderFromSourceCode">addShaderFromSourceCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attributeLocation">
<db:title>int QOpenGLShaderProgram::attributeLocation(const char *<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the location of the attribute <db:code role="parameter">name</db:code> within this shader program's parameter list. Returns -1 if <db:code role="parameter">name</db:code> is not a valid attribute for this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#uniformLocation">uniformLocation</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#bindAttributeLocation">bindAttributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attributeLocation-1">
<db:title>int QOpenGLShaderProgram::attributeLocation(const QByteArray &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the location of the attribute <db:code role="parameter">name</db:code> within this shader program's parameter list. Returns -1 if <db:code role="parameter">name</db:code> is not a valid attribute for this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#uniformLocation">uniformLocation</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#bindAttributeLocation">bindAttributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attributeLocation-2">
<db:title>int QOpenGLShaderProgram::attributeLocation(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the location of the attribute <db:code role="parameter">name</db:code> within this shader program's parameter list. Returns -1 if <db:code role="parameter">name</db:code> is not a valid attribute for this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#uniformLocation">uniformLocation</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#bindAttributeLocation">bindAttributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bind">
<db:title>bool QOpenGLShaderProgram::bind()</db:title>
<db:para>Binds this shader program to the active <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> and makes it the current shader program. Any previously bound shader program is released. This is equivalent to calling <db:code>glUseProgram()</db:code> on <db:link xlink:href="qopenglshaderprogram.xml#programId">programId</db:link>(). Returns <db:code>true</db:code> if the program was successfully bound; false otherwise. If the shader program has not yet been linked, or it needs to be re-linked, this function will call <db:link xlink:href="qopenglshaderprogram.xml#link">link</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#link">link</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#release">release</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bindAttributeLocation">
<db:title>void QOpenGLShaderProgram::bindAttributeLocation(const char *<db:emphasis>name</db:emphasis>, int <db:emphasis>location</db:emphasis>)</db:title>
<db:para>Binds the attribute <db:code role="parameter">name</db:code> to the specified <db:code role="parameter">location</db:code>. This function can be called before or after the program has been linked. Any attributes that have not been explicitly bound when the program is linked will be assigned locations automatically.</db:para>
<db:para>When this function is called after the program has been linked, the program will need to be relinked for the change to take effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#attributeLocation">attributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bindAttributeLocation-1">
<db:title>void QOpenGLShaderProgram::bindAttributeLocation(const QByteArray &amp;<db:emphasis>name</db:emphasis>, int <db:emphasis>location</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Binds the attribute <db:code role="parameter">name</db:code> to the specified <db:code role="parameter">location</db:code>. This function can be called before or after the program has been linked. Any attributes that have not been explicitly bound when the program is linked will be assigned locations automatically.</db:para>
<db:para>When this function is called after the program has been linked, the program will need to be relinked for the change to take effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#attributeLocation">attributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bindAttributeLocation-2">
<db:title>void QOpenGLShaderProgram::bindAttributeLocation(const QString &amp;<db:emphasis>name</db:emphasis>, int <db:emphasis>location</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Binds the attribute <db:code role="parameter">name</db:code> to the specified <db:code role="parameter">location</db:code>. This function can be called before or after the program has been linked. Any attributes that have not been explicitly bound when the program is linked will be assigned locations automatically.</db:para>
<db:para>When this function is called after the program has been linked, the program will need to be relinked for the change to take effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#attributeLocation">attributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="create">
<db:title>[since 5.3] bool QOpenGLShaderProgram::create()</db:title>
<db:para>Requests the shader program's id to be created immediately. Returns <db:code>true</db:code> if successful; <db:code>false</db:code> otherwise.</db:para>
<db:para>This function is primarily useful when combining <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> with other OpenGL functions that operate directly on the shader program id, like <db:code>GL_OES_get_program_binary</db:code>.</db:para>
<db:para>When the shader program is used normally, the shader program's id will be created on demand.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#programId">programId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultInnerTessellationLevels">
<db:title>QVector&lt;float&gt; QOpenGLShaderProgram::defaultInnerTessellationLevels() const</db:title>
<db:para>Returns the default inner tessellation levels to be used by the tessellation primitive generator in the event that the tessellation control shader does not output them. For more details on OpenGL and Tessellation shaders see <db:link xlink:href="http://www.opengl.org/wiki/Tessellation_Shader">OpenGL Tessellation Shaders</db:link>.</db:para>
<db:para>Returns a <db:link xlink:href="qvector.xml">QVector</db:link> of floats describing the inner tessellation levels. The vector will always have two elements but not all of them make sense for every mode of tessellation.</db:para>
<db:note>
<db:para>This returns the global OpenGL state value. It is not specific to this <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> instance.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setDefaultInnerTessellationLevels">setDefaultInnerTessellationLevels</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#defaultOuterTessellationLevels">defaultOuterTessellationLevels</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultOuterTessellationLevels">
<db:title>QVector&lt;float&gt; QOpenGLShaderProgram::defaultOuterTessellationLevels() const</db:title>
<db:para>Returns the default outer tessellation levels to be used by the tessellation primitive generator in the event that the tessellation control shader does not output them. For more details on OpenGL and Tessellation shaders see <db:link xlink:href="http://www.opengl.org/wiki/Tessellation_Shader">OpenGL Tessellation Shaders</db:link>.</db:para>
<db:para>Returns a <db:link xlink:href="qvector.xml">QVector</db:link> of floats describing the outer tessellation levels. The vector will always have four elements but not all of them make sense for every mode of tessellation.</db:para>
<db:note>
<db:para>This returns the global OpenGL state value. It is not specific to this <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> instance.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setDefaultOuterTessellationLevels">setDefaultOuterTessellationLevels</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#defaultInnerTessellationLevels">defaultInnerTessellationLevels</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disableAttributeArray">
<db:title>void QOpenGLShaderProgram::disableAttributeArray(int <db:emphasis>location</db:emphasis>)</db:title>
<db:para>Disables the vertex array at <db:code role="parameter">location</db:code> in this shader program that was enabled by a previous call to <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disableAttributeArray-1">
<db:title>void QOpenGLShaderProgram::disableAttributeArray(const char *<db:emphasis>name</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Disables the vertex array called <db:code role="parameter">name</db:code> in this shader program that was enabled by a previous call to <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enableAttributeArray">
<db:title>void QOpenGLShaderProgram::enableAttributeArray(int <db:emphasis>location</db:emphasis>)</db:title>
<db:para>Enables the vertex array at <db:code role="parameter">location</db:code> in this shader program so that the value set by <db:link xlink:href="qopenglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>() on <db:code role="parameter">location</db:code> will be used by the shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enableAttributeArray-1">
<db:title>void QOpenGLShaderProgram::enableAttributeArray(const char *<db:emphasis>name</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Enables the vertex array called <db:code role="parameter">name</db:code> in this shader program so that the value set by <db:link xlink:href="qopenglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>() on <db:code role="parameter">name</db:code> will be used by the shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasOpenGLShaderPrograms">
<db:title>[static] bool QOpenGLShaderProgram::hasOpenGLShaderPrograms(QOpenGLContext *<db:emphasis>context</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Returns <db:code>true</db:code> if shader programs written in the OpenGL Shading Language (GLSL) are supported on this system; false otherwise.</db:para>
<db:para>The <db:code role="parameter">context</db:code> is used to resolve the GLSL extensions. If <db:code role="parameter">context</db:code> is null, then <db:link xlink:href="qopenglcontext.xml#currentContext">QOpenGLContext::currentContext</db:link>() is used.</db:para>
</db:section>
<db:section xml:id="isLinked">
<db:title>bool QOpenGLShaderProgram::isLinked() const</db:title>
<db:para>Returns <db:code>true</db:code> if this shader program has been linked; false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#link">link</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="link">
<db:title>[virtual] bool QOpenGLShaderProgram::link()</db:title>
<db:para>Links together the shaders that were added to this program with <db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>(). Returns <db:code>true</db:code> if the link was successful or false otherwise. If the link failed, the error messages can be retrieved with <db:link xlink:href="qopenglshaderprogram.xml#log">log</db:link>().</db:para>
<db:para>Subclasses can override this function to initialize attributes and uniform variables for use in specific shader programs.</db:para>
<db:para>If the shader program was already linked, calling this function again will force it to be re-linked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#log">log</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="log">
<db:title>QString QOpenGLShaderProgram::log() const</db:title>
<db:para>Returns the errors and warnings that occurred during the last <db:link xlink:href="qopenglshaderprogram.xml#link">link</db:link>() or <db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>() with explicitly specified source code.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#link">link</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maxGeometryOutputVertices">
<db:title>int QOpenGLShaderProgram::maxGeometryOutputVertices() const</db:title>
<db:para>Returns the hardware limit for how many vertices a geometry shader can output.</db:para>
</db:section>
<db:section xml:id="patchVertexCount">
<db:title>int QOpenGLShaderProgram::patchVertexCount() const</db:title>
<db:para>Returns the number of vertices per-patch to be used when rendering.</db:para>
<db:note>
<db:para>This returns the global OpenGL state value. It is not specific to this <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> instance.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setPatchVertexCount">setPatchVertexCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="programId">
<db:title>GLuint QOpenGLShaderProgram::programId() const</db:title>
<db:para>Returns the OpenGL identifier associated with this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshader.xml#shaderId">QOpenGLShader::shaderId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="release">
<db:title>void QOpenGLShaderProgram::release()</db:title>
<db:para>Releases the active shader program from the current <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>. This is equivalent to calling <db:code>glUseProgram(0)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAllShaders">
<db:title>void QOpenGLShaderProgram::removeAllShaders()</db:title>
<db:para>Removes all of the shaders that were added to this program previously. The <db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link> objects for the shaders will not be deleted if they were constructed externally. <db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link> objects that are constructed internally by <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> will be deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#removeShader">removeShader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeShader">
<db:title>void QOpenGLShaderProgram::removeShader(QOpenGLShader *<db:emphasis>shader</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">shader</db:code> from this shader program. The object is not deleted.</db:para>
<db:para>The shader program must be valid in the current <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#link">link</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#removeAllShaders">removeAllShaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray">
<db:title>void QOpenGLShaderProgram::setAttributeArray(int <db:emphasis>location</db:emphasis>, const QVector2D *<db:emphasis>values</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:para>Sets an array of 2D vertex <db:code role="parameter">values</db:code> on the attribute at <db:code role="parameter">location</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">location</db:code>. Otherwise the value specified with <db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">location</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-1">
<db:title>void QOpenGLShaderProgram::setAttributeArray(int <db:emphasis>location</db:emphasis>, const QVector3D *<db:emphasis>values</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:para>Sets an array of 3D vertex <db:code role="parameter">values</db:code> on the attribute at <db:code role="parameter">location</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">location</db:code>. Otherwise the value specified with <db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">location</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-2">
<db:title>void QOpenGLShaderProgram::setAttributeArray(int <db:emphasis>location</db:emphasis>, const QVector4D *<db:emphasis>values</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:para>Sets an array of 4D vertex <db:code role="parameter">values</db:code> on the attribute at <db:code role="parameter">location</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">location</db:code>. Otherwise the value specified with <db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">location</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-3">
<db:title>void QOpenGLShaderProgram::setAttributeArray(int <db:emphasis>location</db:emphasis>, const GLfloat *<db:emphasis>values</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:para>Sets an array of vertex <db:code role="parameter">values</db:code> on the attribute at <db:code role="parameter">location</db:code> in this shader program. The <db:code role="parameter">tupleSize</db:code> indicates the number of components per vertex (1, 2, 3, or 4), and the <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">location</db:code>. Otherwise the value specified with <db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">location</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-4">
<db:title>void QOpenGLShaderProgram::setAttributeArray(int <db:emphasis>location</db:emphasis>, GLenum <db:emphasis>type</db:emphasis>, const void *<db:emphasis>values</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:para>Sets an array of vertex <db:code role="parameter">values</db:code> on the attribute at <db:code role="parameter">location</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The <db:code role="parameter">type</db:code> indicates the type of elements in the <db:code role="parameter">values</db:code> array, usually <db:code>GL_FLOAT</db:code>, <db:code>GL_UNSIGNED_BYTE</db:code>, etc. The <db:code role="parameter">tupleSize</db:code> indicates the number of components per vertex: 1, 2, 3, or 4.</db:para>
<db:para>The array will become active when <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">location</db:code>. Otherwise the value specified with <db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">location</db:code> will be used.</db:para>
<db:para>The <db:link xlink:href="qopenglshaderprogram.xml#setAttributeBuffer">setAttributeBuffer</db:link>() function can be used to set the attribute array to an offset within a vertex buffer.</db:para>
<db:note>
<db:para>Normalization will be enabled. If this is not desired, call glVertexAttribPointer directly through <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeBuffer">setAttributeBuffer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-5">
<db:title>void QOpenGLShaderProgram::setAttributeArray(const char *<db:emphasis>name</db:emphasis>, const QVector2D *<db:emphasis>values</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets an array of 2D vertex <db:code role="parameter">values</db:code> on the attribute called <db:code role="parameter">name</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on <db:code role="parameter">name</db:code>. Otherwise the value specified with <db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">name</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-6">
<db:title>void QOpenGLShaderProgram::setAttributeArray(const char *<db:emphasis>name</db:emphasis>, const QVector3D *<db:emphasis>values</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets an array of 3D vertex <db:code role="parameter">values</db:code> on the attribute called <db:code role="parameter">name</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on <db:code role="parameter">name</db:code>. Otherwise the value specified with <db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">name</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-7">
<db:title>void QOpenGLShaderProgram::setAttributeArray(const char *<db:emphasis>name</db:emphasis>, const QVector4D *<db:emphasis>values</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets an array of 4D vertex <db:code role="parameter">values</db:code> on the attribute called <db:code role="parameter">name</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on <db:code role="parameter">name</db:code>. Otherwise the value specified with <db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">name</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-8">
<db:title>void QOpenGLShaderProgram::setAttributeArray(const char *<db:emphasis>name</db:emphasis>, const GLfloat *<db:emphasis>values</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets an array of vertex <db:code role="parameter">values</db:code> on the attribute called <db:code role="parameter">name</db:code> in this shader program. The <db:code role="parameter">tupleSize</db:code> indicates the number of components per vertex (1, 2, 3, or 4), and the <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on <db:code role="parameter">name</db:code>. Otherwise the value specified with <db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">name</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-9">
<db:title>void QOpenGLShaderProgram::setAttributeArray(const char *<db:emphasis>name</db:emphasis>, GLenum <db:emphasis>type</db:emphasis>, const void *<db:emphasis>values</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets an array of vertex <db:code role="parameter">values</db:code> on the attribute called <db:code role="parameter">name</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The <db:code role="parameter">type</db:code> indicates the type of elements in the <db:code role="parameter">values</db:code> array, usually <db:code>GL_FLOAT</db:code>, <db:code>GL_UNSIGNED_BYTE</db:code>, etc. The <db:code role="parameter">tupleSize</db:code> indicates the number of components per vertex: 1, 2, 3, or 4.</db:para>
<db:para>The array will become active when <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">name</db:code>. Otherwise the value specified with <db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">name</db:code> will be used.</db:para>
<db:para>The <db:link xlink:href="qopenglshaderprogram.xml#setAttributeBuffer">setAttributeBuffer</db:link>() function can be used to set the attribute array to an offset within a vertex buffer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeBuffer">setAttributeBuffer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeBuffer">
<db:title>void QOpenGLShaderProgram::setAttributeBuffer(int <db:emphasis>location</db:emphasis>, GLenum <db:emphasis>type</db:emphasis>, int <db:emphasis>offset</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:para>Sets an array of vertex values on the attribute at <db:code role="parameter">location</db:code> in this shader program, starting at a specific <db:code role="parameter">offset</db:code> in the currently bound vertex buffer. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in the value array.</db:para>
<db:para>The <db:code role="parameter">type</db:code> indicates the type of elements in the vertex value array, usually <db:code>GL_FLOAT</db:code>, <db:code>GL_UNSIGNED_BYTE</db:code>, etc. The <db:code role="parameter">tupleSize</db:code> indicates the number of components per vertex: 1, 2, 3, or 4.</db:para>
<db:para>The array will become active when <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">location</db:code>. Otherwise the value specified with <db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">location</db:code> will be used.</db:para>
<db:note>
<db:para>Normalization will be enabled. If this is not desired, call glVertexAttribPointer directly through <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeBuffer-1">
<db:title>void QOpenGLShaderProgram::setAttributeBuffer(const char *<db:emphasis>name</db:emphasis>, GLenum <db:emphasis>type</db:emphasis>, int <db:emphasis>offset</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets an array of vertex values on the attribute called <db:code role="parameter">name</db:code> in this shader program, starting at a specific <db:code role="parameter">offset</db:code> in the currently bound vertex buffer. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in the value array.</db:para>
<db:para>The <db:code role="parameter">type</db:code> indicates the type of elements in the vertex value array, usually <db:code>GL_FLOAT</db:code>, <db:code>GL_UNSIGNED_BYTE</db:code>, etc. The <db:code role="parameter">tupleSize</db:code> indicates the number of components per vertex: 1, 2, 3, or 4.</db:para>
<db:para>The array will become active when <db:link xlink:href="qopenglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">name</db:code>. Otherwise the value specified with <db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">name</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue">
<db:title>void QOpenGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-1">
<db:title>void QOpenGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, const QColor &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-2">
<db:title>void QOpenGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, const QVector2D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-3">
<db:title>void QOpenGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, const QVector3D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-4">
<db:title>void QOpenGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, const QVector4D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-5">
<db:title>void QOpenGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to the 2D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-6">
<db:title>void QOpenGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>)</db:title>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to the 3D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-7">
<db:title>void QOpenGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, const GLfloat *<db:emphasis>values</db:emphasis>, int <db:emphasis>columns</db:emphasis>, int <db:emphasis>rows</db:emphasis>)</db:title>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to the contents of <db:code role="parameter">values</db:code>, which contains <db:code role="parameter">columns</db:code> elements, each consisting of <db:code role="parameter">rows</db:code> elements. The <db:code role="parameter">rows</db:code> value should be 1, 2, 3, or 4. This function is typically used to set matrix values and column vectors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-8">
<db:title>void QOpenGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>, GLfloat <db:emphasis>w</db:emphasis>)</db:title>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to the 4D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>, <db:code role="parameter">w</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-9">
<db:title>void QOpenGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-10">
<db:title>void QOpenGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, const QColor &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-11">
<db:title>void QOpenGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, const QVector2D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-12">
<db:title>void QOpenGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, const QVector3D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-13">
<db:title>void QOpenGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, const QVector4D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-14">
<db:title>void QOpenGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to the 2D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-15">
<db:title>void QOpenGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to the 3D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-16">
<db:title>void QOpenGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, const GLfloat *<db:emphasis>values</db:emphasis>, int <db:emphasis>columns</db:emphasis>, int <db:emphasis>rows</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to the contents of <db:code role="parameter">values</db:code>, which contains <db:code role="parameter">columns</db:code> elements, each consisting of <db:code role="parameter">rows</db:code> elements. The <db:code role="parameter">rows</db:code> value should be 1, 2, 3, or 4. This function is typically used to set matrix values and column vectors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-17">
<db:title>void QOpenGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>, GLfloat <db:emphasis>w</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to the 4D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>, <db:code role="parameter">w</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultInnerTessellationLevels">
<db:title>void QOpenGLShaderProgram::setDefaultInnerTessellationLevels(const QVector&lt;float&gt; &amp;<db:emphasis>levels</db:emphasis>)</db:title>
<db:para>Sets the default outer tessellation levels to be used by the tessellation primitive generator in the event that the tessellation control shader does not output them to <db:code role="parameter">levels</db:code>. For more details on OpenGL and Tessellation shaders see <db:link xlink:href="http://www.opengl.org/wiki/Tessellation_Shader">OpenGL Tessellation Shaders</db:link>.</db:para>
<db:para>The <db:code role="parameter">levels</db:code> argument should be a <db:link xlink:href="qvector.xml">QVector</db:link> consisting of 2 floats. Not all of the values make sense for all tessellation modes. If you specify a vector with fewer than 2 elements, the remaining elements will be given a default value of 1.</db:para>
<db:note>
<db:para>This modifies global OpenGL state and is not specific to this <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> instance. You should call this in your render function when needed, as <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> will not apply this for you. This is purely a convenience function.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#defaultInnerTessellationLevels">defaultInnerTessellationLevels</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setDefaultOuterTessellationLevels">setDefaultOuterTessellationLevels</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultOuterTessellationLevels">
<db:title>void QOpenGLShaderProgram::setDefaultOuterTessellationLevels(const QVector&lt;float&gt; &amp;<db:emphasis>levels</db:emphasis>)</db:title>
<db:para>Sets the default outer tessellation levels to be used by the tessellation primitive generator in the event that the tessellation control shader does not output them to <db:code role="parameter">levels</db:code>. For more details on OpenGL and Tessellation shaders see <db:link xlink:href="http://www.opengl.org/wiki/Tessellation_Shader">OpenGL Tessellation Shaders</db:link>.</db:para>
<db:para>The <db:code role="parameter">levels</db:code> argument should be a <db:link xlink:href="qvector.xml">QVector</db:link> consisting of 4 floats. Not all of the values make sense for all tessellation modes. If you specify a vector with fewer than 4 elements, the remaining elements will be given a default value of 1.</db:para>
<db:note>
<db:para>This modifies global OpenGL state and is not specific to this <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> instance. You should call this in your render function when needed, as <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> will not apply this for you. This is purely a convenience function.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#defaultOuterTessellationLevels">defaultOuterTessellationLevels</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setDefaultInnerTessellationLevels">setDefaultInnerTessellationLevels</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPatchVertexCount">
<db:title>void QOpenGLShaderProgram::setPatchVertexCount(int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Use this function to specify to OpenGL the number of vertices in a patch to <db:code role="parameter">count</db:code>. A patch is a custom OpenGL primitive whose interpretation is entirely defined by the tessellation shader stages. Therefore, calling this function only makes sense when using a <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> containing tessellation stage shaders. When using OpenGL tessellation, the only primitive that can be rendered with <db:code>glDraw*()</db:code> functions is <db:code>GL_PATCHES</db:code>.</db:para>
<db:para>This is equivalent to calling glPatchParameteri(GL_PATCH_VERTICES, count).</db:para>
<db:note>
<db:para>This modifies global OpenGL state and is not specific to this <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> instance. You should call this in your render function when needed, as <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> will not apply this for you. This is purely a convenience function.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#patchVertexCount">patchVertexCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-1">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, GLint <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-36">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix3x4 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 3x4 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>This function is not aware of non square matrix support, that is, GLSL types like mat3x4, that is present in modern OpenGL versions. Instead, it treats the uniform as an array of vec4.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-37">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix4x2 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 4x2 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>This function is not aware of non square matrix support, that is, GLSL types like mat4x2, that is present in modern OpenGL versions. Instead, it treats the uniform as an array of vec2.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-38">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix4x3 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 4x3 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>This function is not aware of non square matrix support, that is, GLSL types like mat4x3, that is present in modern OpenGL versions. Instead, it treats the uniform as an array of vec3.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-39">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 4x4 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-40">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable associated with <db:code role="parameter">name</db:code> in the current context to the x and y coordinates of <db:code role="parameter">point</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-41">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable associated with <db:code role="parameter">name</db:code> in the current context to the x and y coordinates of <db:code role="parameter">point</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-42">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable associated with <db:code role="parameter">name</db:code> in the current context to the width and height of the given <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-43">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QSizeF &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable associated with <db:code role="parameter">name</db:code> in the current context to the width and height of the given <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-44">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QTransform &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 3x3 transformation matrix <db:code role="parameter">value</db:code> that is specified as a <db:link xlink:href="qtransform.xml">QTransform</db:link> value.</db:para>
<db:para>To set a <db:link xlink:href="qtransform.xml">QTransform</db:link> value as a 4x4 matrix in a shader, use <db:code>setUniformValue(name, QMatrix4x4(value))</db:code>.</db:para>
</db:section>
<db:section xml:id="setUniformValue-45">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QVector2D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-46">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QVector3D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-47">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QVector4D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-48">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const GLfloat[2][2] <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 2x2 matrix <db:code role="parameter">value</db:code>. The matrix elements must be specified in column-major order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-49">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const GLfloat[3][3] <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 3x3 matrix <db:code role="parameter">value</db:code>. The matrix elements must be specified in column-major order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-50">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const GLfloat[4][4] <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 4x4 matrix <db:code role="parameter">value</db:code>. The matrix elements must be specified in column-major order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-51">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to the 2D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-52">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to the 3D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-53">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>, GLfloat <db:emphasis>w</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to the 4D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>, <db:code role="parameter">w</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-2">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, GLuint <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>. This function should be used when setting sampler values.</db:para>
<db:note>
<db:para>This function is not aware of unsigned int support in modern OpenGL versions and therefore treats <db:code role="parameter">value</db:code> as a GLint and calls glUniform1i.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-3">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the red, green, blue, and alpha components of <db:code role="parameter">color</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-4">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix2x2 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 2x2 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-5">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix2x3 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 2x3 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>This function is not aware of non square matrix support, that is, GLSL types like mat2x3, that is present in modern OpenGL versions. Instead, it treats the uniform as an array of vec3.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-6">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix2x4 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 2x4 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>This function is not aware of non square matrix support, that is, GLSL types like mat2x4, that is present in modern OpenGL versions. Instead, it treats the uniform as an array of vec4.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-7">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix3x2 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 3x2 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>This function is not aware of non square matrix support, that is, GLSL types like mat3x2, that is present in modern OpenGL versions. Instead, it treats the uniform as an array of vec2.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-8">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix3x3 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 3x3 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-9">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix3x4 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 3x4 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>This function is not aware of non square matrix support, that is, GLSL types like mat3x4, that is present in modern OpenGL versions. Instead, it treats the uniform as an array of vec4.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-10">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix4x2 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 4x2 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>This function is not aware of non square matrix support, that is, GLSL types like mat4x2, that is present in modern OpenGL versions. Instead, it treats the uniform as an array of vec2.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-11">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix4x3 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 4x3 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>This function is not aware of non square matrix support, that is, GLSL types like mat4x3, that is present in modern OpenGL versions. Instead, it treats the uniform as an array of vec3.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-12">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 4x4 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-13">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the x and y coordinates of <db:code role="parameter">point</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-14">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the x and y coordinates of <db:code role="parameter">point</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-15">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the width and height of the given <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-16">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QSizeF &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the width and height of the given <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-17">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QTransform &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 3x3 transformation matrix <db:code role="parameter">value</db:code> that is specified as a <db:link xlink:href="qtransform.xml">QTransform</db:link> value.</db:para>
<db:para>To set a <db:link xlink:href="qtransform.xml">QTransform</db:link> value as a 4x4 matrix in a shader, use <db:code>setUniformValue(location, QMatrix4x4(value))</db:code>.</db:para>
</db:section>
<db:section xml:id="setUniformValue-18">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QVector2D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-19">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QVector3D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-20">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QVector4D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-21">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the 2D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-22">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the 3D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-23">
<db:title>void QOpenGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>, GLfloat <db:emphasis>w</db:emphasis>)</db:title>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the 4D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>, <db:code role="parameter">w</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-24">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-25">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, GLint <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-26">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, GLuint <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>. This function should be used when setting sampler values.</db:para>
<db:note>
<db:para>This function is not aware of unsigned int support in modern OpenGL versions and therefore treats <db:code role="parameter">value</db:code> as a GLint and calls glUniform1i.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-27">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const GLfloat[2][2] <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 2x2 matrix <db:code role="parameter">value</db:code>. The matrix elements must be specified in column-major order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-28">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const GLfloat[3][3] <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 3x3 matrix <db:code role="parameter">value</db:code>. The matrix elements must be specified in column-major order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-29">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const GLfloat[4][4] <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 4x4 matrix <db:code role="parameter">value</db:code>. The matrix elements must be specified in column-major order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-30">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to the red, green, blue, and alpha components of <db:code role="parameter">color</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-31">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix2x2 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 2x2 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-32">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix2x3 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 2x3 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>This function is not aware of non square matrix support, that is, GLSL types like mat2x3, that is present in modern OpenGL versions. Instead, it treats the uniform as an array of vec3.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-33">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix2x4 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 2x4 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>This function is not aware of non square matrix support, that is, GLSL types like mat2x4, that is present in modern OpenGL versions. Instead, it treats the uniform as an array of vec4.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-34">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix3x2 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 3x2 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>This function is not aware of non square matrix support, that is, GLSL types like mat3x2, that is present in modern OpenGL versions. Instead, it treats the uniform as an array of vec2.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-35">
<db:title>void QOpenGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix3x3 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 3x3 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const GLint *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-1">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const GLuint *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> elements of <db:code role="parameter">values</db:code>. This overload should be used when setting an array of sampler values.</db:para>
<db:note>
<db:para>This function is not aware of unsigned int support in modern OpenGL versions and therefore treats <db:code role="parameter">values</db:code> as a GLint and calls glUniform1iv.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-2">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix2x2 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 2x2 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-3">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix2x3 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 2x3 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-4">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix2x4 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 2x4 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-5">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix3x2 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 3x2 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-6">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix3x3 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 3x3 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-7">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix3x4 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 3x4 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-8">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix4x2 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 4x2 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-9">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix4x3 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 4x3 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-10">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix4x4 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 4x4 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-11">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QVector2D *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 2D vector elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-12">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QVector3D *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 3D vector elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-13">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QVector4D *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 4D vector elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-14">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const GLfloat *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>)</db:title>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> elements of <db:code role="parameter">values</db:code>. Each element has <db:code role="parameter">tupleSize</db:code> components. The <db:code role="parameter">tupleSize</db:code> must be 1, 2, 3, or 4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-15">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const GLint *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-16">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const GLuint *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> elements of <db:code role="parameter">values</db:code>. This overload should be used when setting an array of sampler values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-17">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix2x2 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 2x2 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-18">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix2x3 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 2x3 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-19">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix2x4 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 2x4 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-20">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix3x2 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 3x2 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-21">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix3x3 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 3x3 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-22">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix3x4 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 3x4 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-23">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix4x2 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 4x2 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-24">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix4x3 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 4x3 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-25">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix4x4 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 4x4 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-26">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QVector2D *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 2D vector elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-27">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QVector3D *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 3D vector elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-28">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QVector4D *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 4D vector elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-29">
<db:title>void QOpenGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const GLfloat *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> elements of <db:code role="parameter">values</db:code>. Each element has <db:code role="parameter">tupleSize</db:code> components. The <db:code role="parameter">tupleSize</db:code> must be 1, 2, 3, or 4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shaders">
<db:title>QList&lt;QOpenGLShader *&gt; QOpenGLShaderProgram::shaders() const</db:title>
<db:para>Returns a list of all shaders that have been added to this shader program using <db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml#removeShader">removeShader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uniformLocation">
<db:title>int QOpenGLShaderProgram::uniformLocation(const char *<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the location of the uniform variable <db:code role="parameter">name</db:code> within this shader program's parameter list. Returns -1 if <db:code role="parameter">name</db:code> is not a valid uniform variable for this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#attributeLocation">attributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uniformLocation-1">
<db:title>int QOpenGLShaderProgram::uniformLocation(const QByteArray &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the location of the uniform variable <db:code role="parameter">name</db:code> within this shader program's parameter list. Returns -1 if <db:code role="parameter">name</db:code> is not a valid uniform variable for this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#attributeLocation">attributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uniformLocation-2">
<db:title>int QOpenGLShaderProgram::uniformLocation(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the location of the uniform variable <db:code role="parameter">name</db:code> within this shader program's parameter list. Returns -1 if <db:code role="parameter">name</db:code> is not a valid uniform variable for this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#attributeLocation">attributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
