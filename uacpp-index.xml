<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Setting up UACPP SDK</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para>Instructions how to setup UACPP SDK.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="download-and-installation">
<db:title>Download and Installation</db:title>
<db:para>The UACPP plugin integrates the professional C++ based OPC UA SDK from Unified Automation GmbH into Qt OPC UA. You can also test this using the evaluation version of the SDK, but in this tutorial we show how to build the C++ SDK (full version) and the Qt OPC UA plugin from source for best flexibility and portability.</db:para>
<db:para>By building the SDK from source, we can choose to build static libraries instead of dynamic libraries, which reduces runtime dependencies and code size. The very same version of the OpenSSL library that was used to build Qt has to be used. Otherwise there will be dynamic linker errors when loading the library.</db:para>
<db:para>Binaries depend on specific versions of OpenSSL and will not run on all Linux distributions.</db:para>
<db:para>When using the evaluation version, you can skip the step for Building the SDK, but you must ensure to use the same compiler, OpenSSL and LibXML2 that were used for building the Eval SDK.</db:para>
</db:section>
<db:section xml:id="requirements">
<db:title>Requirements</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Qt 5.12 or higher</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt OPC UA</db:para>
</db:listitem>
<db:listitem>
<db:para>Unified Automation C++ SDK 1.6.x or higher.</db:para>
</db:listitem>
<db:listitem>
<db:para>C++ Toolchain (GCC on Linux or MSVC on Windows)</db:para>
</db:listitem>
<db:listitem>
<db:para>CMake 2.8 or higher</db:para>
</db:listitem>
<db:listitem>
<db:para>Ninja (a faster make tool, GNU make would work too)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When using GNU make instead of Ninja, use &quot;-G 'Unix Makefiles'&quot; instead of &quot;-G Ninja&quot; in the CMake calls.</db:para>
</db:section>
<db:section xml:id="building-on-linux-using-gcc">
<db:title>Building on Linux using GCC</db:title>
<db:section xml:id="preparations">
<db:title>Preparations</db:title>
<db:para>We assume that you have a development machine with a running C++ toolchain and Qt installed. If not, install it now.</db:para>
<db:para>Example for Debian based systems:</db:para>
<db:programlisting language="cpp">sudo apt install build-essential
sudo apt install cmake cmake-curses-gui cmake-qt-gui
sudo apt install ninja
</db:programlisting>
<db:para>In this tutorial, we show example install commands using the <db:code>apt</db:code> package management. On other distributions, you can install the same tools, just the exact commands and package names may differ.</db:para>
</db:section>
<db:section xml:id="building-the-sdk">
<db:title>Building the SDK</db:title>
<db:para>On Linux, we want to build using the system provided OpenSSL library. Therefor you need to install OpenSSL development packages. The same applies for LibXML2.</db:para>
<db:programlisting language="cpp">sudo apt install libssl-dev libxml2-dev
</db:programlisting>
<db:para>At the time of writing, the pre-built Qt library was still built against OpenSSL1.0. Debian Stretch and newer default to OpenSSL1.1. So we need to install the older OpenSSL1.0 devel package to make the SDK and Qt use the same library version. OpenSSL1.0 and OpenSSL1.1 are not binary compatible.</db:para>
<db:programlisting language="cpp">sudo apt install libssl1.0-dev libxml2-dev
</db:programlisting>
<db:para>Building the C++ OPC UA SDK:</db:para>
<db:programlisting language="cpp">cd /path/to/sdk
export SDKDIR=$PWD
# force position independent code even for static libraries (to make it working in a Qt plugin)
export CFLAGS=-fPIC
export CXXFLAGS=-fPIC
# create out-of-source build directory
mkdir build
cd build
# Create Ninja build file (like a Makefile)
cmake -GNinja -DCMAKE_INSTALL_PREFIX=$SDKDIR -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=off -DBUILD_SHARED_STACK=off -DBUILD_UAMODELS=off -DBUILD_UAMODULE=off -DBUILD_COREMODULE=off -DBUILD_EXAMPLES=off -DBUILD_UASERVERCPP_APP=off -DBUILD_TESTING=off ..
# build and install the SDK
ninja
ninja install
# clear compiler flags again to avoid problems with other builds
export CFLAGS=
export CXXFLAGS=
</db:programlisting>
<db:para>Note: You can replace <db:code>Debug</db:code> in <db:code>&quot;CMAKE_BUILD_TYPE=Debug&quot;</db:code> with <db:code>Release</db:code>, <db:code>MinSizeRel</db:code>, or <db:code>RelWithDebInfo</db:code> to build a release version. See <db:link xlink:href="https://cmake.org/cmake/help/v3.8/variable/CMAKE_BUILD_TYPE.html">here</db:link> for more information.</db:para>
</db:section>
<db:section xml:id="building-the-qt-opc-ua-uacpp-plugin">
<db:title>Building the Qt OPC UA UACPP Plugin</db:title>
<db:programlisting language="cpp">cd /path/to/qtopcua
cmake -DCMAKE_BUILD_TYPE=Debug -DUACPP_PREFIX=$SDKDIR
make -j $(nproc)
make install
</db:programlisting>
<db:para>The output of the <db:code>cmake</db:code> configuration step indicates whether the detection was successful:</db:para>
<db:programlisting language="cpp">Unified Automation C++ SDK ............. yes
</db:programlisting>
<db:para>If not, you can inspect the config.log to find the reason for the problem.</db:para>
</db:section>
</db:section>
<db:section xml:id="building-on-windows-using-msvc">
<db:title>Building on Windows using MSVC</db:title>
<db:section xml:id="preparations">
<db:title>Preparations</db:title>
<db:para>You need to install Visual Studio, Qt, CMake, and Ninja. Please ensure the CMake and Ninja executables are in PATH, so that the tools work on the console.</db:para>
<db:para>Downloads:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>https://cmake.org</db:para>
</db:listitem>
<db:listitem>
<db:para>https://ninja-build.org/</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="building-the-sdk">
<db:title>Building the SDK</db:title>
<db:para>We assume that you have installed Visual Studio. To get a working toolchain, you need to open the Visual Studio Command Prompt. It is important to run CMake also from this console, no matter if it's the <db:code>cmake</db:code> command or the CMake GUI. Otherwise compiler detection may fail.</db:para>
<db:para>Important: All components need to be built with the same Visual Studio version.</db:para>
<db:para>Building the C++ OPC UA SDK:</db:para>
<db:programlisting language="cpp">cd \path\to\sdk
set SDKDIR=%CD%
# create out-of-source build directory
mkdir build
cd build
# Create Ninja build file (like a Makefile)
cmake -GNinja -DCMAKE_INSTALL_PREFIX=%SDKDIR% -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=off -DBUILD_SHARED_STACK=off -DBUILD_UAMODELS=off -DBUILD_UAMODULE=off -DBUILD_COREMODULE=off -DBUILD_EXAMPLES=off -DBUILD_TESTING=off ..
# build and install the SDK
ninja
ninja install
</db:programlisting>
<db:para>Note: You can replace <db:code>Debug</db:code> in <db:code>&quot;CMAKE_BUILD_TYPE=Debug&quot;</db:code> with <db:code>Release</db:code>, <db:code>MinSizeRel</db:code>, or <db:code>RelWithDebInfo</db:code> to build a release version. See <db:link xlink:href="https://cmake.org/cmake/help/v3.8/variable/CMAKE_BUILD_TYPE.html">here</db:link> for more information.</db:para>
<db:para>Instead of building on console, you can also generate a Visual Studio solution by replacing &quot;-GNinja&quot; with &quot;-G 'Visual Studio 15 2017'&quot;. See &quot;cmake â€“help&quot; to get a list of available generators.</db:para>
</db:section>
<db:section xml:id="building-the-qt-opc-ua-uacpp-plugin">
<db:title>Building the Qt OPC UA UACPP Plugin</db:title>
<db:para>For building the Qt plugin, you need to open the Qt Command prompt for the same Visual Studio version as you used for building the SDK.</db:para>
<db:programlisting language="cpp">cd \path\to\qtopcua
cmake -DCMAKE_BUILD_TYPE=Debug -DUACPP_PREFIX=%SDKDIR%
nmake
nmake install
</db:programlisting>
<db:para>The output of the <db:code>cmake</db:code> configuration step indicates whether the detection was successful:</db:para>
<db:programlisting language="cpp">Unified Automation C++ SDK ............. yes
</db:programlisting>
<db:para>If not, you can inspect the config.log to find the reason for the problem.</db:para>
</db:section>
</db:section>
<db:section xml:id="final-notes">
<db:title>Final notes</db:title>
<db:para>The SDK and Qt OPC UA can also be compiled with other compilers like MinGW-w64 for Windows, Clang or can be cross-compiled using various cross-compilers, but this is out of scope of this document.</db:para>
<db:para>Please consult the documentation <db:link xlink:href="http://documentation.unified-automation.com/uasdkcpp/1.6.3/html/CrossCompiling.html">here</db:link> for cross-compiling the SDK or contact the support if you have any questions.</db:para>
</db:section>
<db:section xml:id="setting-up-the-key-infrastructure">
<db:title>Setting up the Key Infrastructure</db:title>
<db:para>With the UACPP Plugin, you can create secure connections with Qt OPC UA. To make this work, each application instances (installation of a program), needs to have its own <db:code>Application Instance Certificate</db:code> and the according private key.</db:para>
<db:para>Follow the common instructions on <db:link xlink:href="security.xml">Creating OPC UA Clients with security support</db:link> to setup the keys.</db:para>
</db:section>
<db:section xml:id="demo-server">
<db:title>Demo Server</db:title>
<db:para>For testing the client with security, you can download one of Demo Servers from Unified Automation for free (Windows only).</db:para>
<db:para>https://www.unified-automation.com/downloads/opc-ua-servers.html</db:para>
<db:para>In addition, you can download evaluation versions of various OPC UA Server SDKs which also contain demo servers (Windows and Linux).</db:para>
<db:para>https://www.unified-automation.com/downloads/opc-ua-development.html</db:para>
</db:section>
</db:article>
