<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoCircle Class</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeocircle.xml">QGeoCircle</db:link> class defines a circular geographic area.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoCircle</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Positioning)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Positioning)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += positioning</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgeoshape.xml" xlink:role="class">QGeoShape</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoCircle is part of <db:simplelist><db:member>QtPositioning-positioning</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The circle is defined in terms of a <db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link> which specifies the center of the circle and a qreal which specifies the radius of the circle in meters.</db:para>
<db:para>The circle is considered invalid if the center coordinate is invalid or if the radius is less than zero.</db:para>
<db:para>This class is a <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link> since Qt 5.5. It can be <db:link xlink:href="positioning-cpp-qml.xml#cpp-value-integration-positioning">directly used from C++ and QML</db:link>.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="center-prop">
<db:title>center : QGeoCoordinate</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QGeoCoordinate</db:type>
<db:varname>center</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">center</db:synopsisinfo>
<db:synopsisinfo role="setter">setCenter</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the center coordinate for the geo circle.</db:para>
<db:para>The circle is considered invalid if this property contains an invalid coordinate.</db:para>
<db:para>A default constructed <db:link xlink:href="qgeocircle.xml">QGeoCircle</db:link> uses an invalid <db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link> as center.</db:para>
<db:para>While this property is introduced in Qt 5.5, the related accessor functions exist since the first version of this class.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qgeocircle.xml#center">center</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgeocircle.xml#setCenter">setCenter</db:link></db:emphasis>(const <db:type><db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link></db:type> &amp;<db:emphasis>center</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="radius-prop">
<db:title>radius : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>radius</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">radius</db:synopsisinfo>
<db:synopsisinfo role="setter">setRadius</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the circle radius in meters.</db:para>
<db:para>The circle is considered invalid if this property is negative.</db:para>
<db:para>By default, the radius is initialized with <db:code>-1</db:code>.</db:para>
<db:para>While this property is introduced in Qt 5.5, the related accessor functions exist since the first version of this class.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qgeocircle.xml#radius">radius</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgeocircle.xml#setRadius">setRadius</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>radius</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoCircle">
<db:title>QGeoCircle::QGeoCircle()</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoCircle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCircle()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new, invalid geo circle.</db:para>
</db:section>
<db:section xml:id="QGeoCircle-1">
<db:title>QGeoCircle::QGeoCircle(const QGeoCoordinate &amp;<db:emphasis>center</db:emphasis>, qreal <db:emphasis>radius</db:emphasis> = -1.0)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoCircle</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>center</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>radius</db:parameter>
<db:initializer>-1.0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCircle(const QGeoCoordinate &amp;center, qreal radius)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new geo circle centered at <db:code role="parameter">center</db:code> and with a radius of <db:code role="parameter">radius</db:code> meters.</db:para>
</db:section>
<db:section xml:id="QGeoCircle-3">
<db:title>QGeoCircle::QGeoCircle(const QGeoShape &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoCircle</db:methodname>
<db:methodparam>
<db:type>const QGeoShape &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCircle(const QGeoShape &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new geo circle from the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QGeoCircle-2">
<db:title>QGeoCircle::QGeoCircle(const QGeoCircle &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoCircle</db:methodname>
<db:methodparam>
<db:type>const QGeoCircle &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCircle(const QGeoCircle &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new geo circle from the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoCircle">
<db:title>QGeoCircle::~QGeoCircle()</db:title>
<db:destructorsynopsis>
<db:methodname>~QGeoCircle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGeoCircle()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this geo circle.</db:para>
</db:section>
<db:section xml:id="center">
<db:title>QGeoCoordinate QGeoCircle::center() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoCoordinate</db:type>
<db:methodname>center</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">center</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCoordinate center() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the center coordinate of this geo circle. Equivalent to <db:link xlink:href="qgeoshape.xml#center">QGeoShape::center</db:link>().</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qgeocircle.xml#center-prop">center</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocircle.xml#setCenter">setCenter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extendCircle">
<db:title>void QGeoCircle::extendCircle(const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>extendCircle</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void extendCircle(const QGeoCoordinate &amp;coordinate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Extends the geo circle to also cover the coordinate <db:code role="parameter">coordinate</db:code></db:para>
</db:section>
<db:section xml:id="radius">
<db:title>qreal QGeoCircle::radius() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>radius</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">radius</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal radius() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the radius in meters of this geo circle.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qgeocircle.xml#radius-prop">radius</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocircle.xml#setRadius">setRadius</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCenter">
<db:title>void QGeoCircle::setCenter(const QGeoCoordinate &amp;<db:emphasis>center</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCenter</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>center</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">center</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCenter(const QGeoCoordinate &amp;center)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the center coordinate of this geo circle to <db:code role="parameter">center</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qgeocircle.xml#center-prop">center</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocircle.xml#center">center</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRadius">
<db:title>void QGeoCircle::setRadius(qreal <db:emphasis>radius</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRadius</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>radius</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">radius</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRadius(qreal radius)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the radius in meters of this geo circle to <db:code role="parameter">radius</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qgeocircle.xml#radius-prop">radius</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocircle.xml#radius">radius</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QGeoCircle::toString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the geo circle properties as a string.</db:para>
</db:section>
<db:section xml:id="translate">
<db:title>void QGeoCircle::translate(double <db:emphasis>degreesLatitude</db:emphasis>, double <db:emphasis>degreesLongitude</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>degreesLatitude</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>degreesLongitude</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(double degreesLatitude, double degreesLongitude)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Translates this geo circle by <db:code role="parameter">degreesLatitude</db:code> northwards and <db:code role="parameter">degreesLongitude</db:code> eastwards.</db:para>
<db:para>Negative values of <db:code role="parameter">degreesLatitude</db:code> and <db:code role="parameter">degreesLongitude</db:code> correspond to southward and westward translation respectively.</db:para>
</db:section>
<db:section xml:id="translated">
<db:title>QGeoCircle QGeoCircle::translated(double <db:emphasis>degreesLatitude</db:emphasis>, double <db:emphasis>degreesLongitude</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoCircle</db:type>
<db:methodname>translated</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>degreesLatitude</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>degreesLongitude</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCircle translated(double degreesLatitude, double degreesLongitude) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this geo circle translated by <db:code role="parameter">degreesLatitude</db:code> northwards and <db:code role="parameter">degreesLongitude</db:code> eastwards.</db:para>
<db:para>Negative values of <db:code role="parameter">degreesLatitude</db:code> and <db:code role="parameter">degreesLongitude</db:code> correspond to southward and westward translation respectively.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocircle.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGeoCircle &amp;QGeoCircle::operator=(const QGeoCircle &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGeoCircle &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QGeoCircle &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCircle &amp; operator=(const QGeoCircle &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this geo circle and returns a reference to this geo circle.</db:para>
</db:section>
</db:section>
</db:article>
