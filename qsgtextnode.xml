<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSGTextNode Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link> class is a class for drawing text layouts and text documents in the Qt Quick scene graph.</db:para>
<db:para>This class was introduced in Qt 6.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSGTextNode</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsgtransformnode.xml" xlink:role="class">QSGTransformNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link> can be useful for creating custom Qt Quick items that require text. It is used in Qt Quick by the Text, <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> and <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> elements.</db:para>
<db:para>You can create <db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link> objects using <db:link xlink:href="qquickwindow.xml#createTextNode">QQuickWindow::createTextNode</db:link>(). The <db:link xlink:href="qsgtextnode.xml#addTextLayout">addTextLayout</db:link>() and <db:link xlink:href="qsgtextnode.xml#addTextDocument">addTextDocument</db:link>() functions provide ways to add text to the <db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link>. The text must already be laid out.</db:para>
<db:note>
<db:para>Properties must be set before <db:link xlink:href="qsgtextnode.xml#addTextLayout">addTextLayout</db:link>() or <db:link xlink:href="qsgtextnode.xml#addTextDocument">addTextDocument</db:link>() are called in order to have an effect.</db:para>
</db:note>
<db:note>
<db:para>The destruction of <db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link> has to be managed with care. In particular, since it references graphics resources, it must be deleted when the Qt Quick scene graph is invalidated. If the node is part of the graph and has the <db:code>OwnedByParent</db:code> flag set (which is the default), this will happen automatically. However, if the <db:code>OwnedByParent</db:code> flag is cleared and the node is disposed of manually, care must be taken to do this when the scene graph is invalidated. This can be done by connecting to the <db:link xlink:href="qquickwindow.xml#sceneGraphInvalidated">QQuickWindow::sceneGraphInvalidated</db:link>() signal, or by implementing a slot in the <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> subclass which is named <db:code>invalidateSceneGraph()</db:code>. See also the documentation of <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> for more details.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RenderType-enum">
<db:title>enum QSGTextNode::RenderType</db:title>
<db:para>This enum type describes type of glyph node used for rendering the text.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link></db:emphasis>::QtRendering</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Text is rendered using a scalable distance field for each glyph.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link></db:emphasis>::NativeRendering</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Text is rendered using a platform-specific technique.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link></db:emphasis>::CurveRendering</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Text is rendered using a curve rasterizer running directly on the graphics hardware.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Select <db:code>NativeRendering</db:code> if you prefer text to look native on the target platform and do not require advanced features such as transformation of the text. Using such features in combination with the NativeRendering render type will lend poor and sometimes pixelated results.</db:para>
<db:para>Both <db:code>Text.QtRendering</db:code> and <db:code>Text.CurveRendering</db:code> are hardware-accelerated techniques. <db:code>QtRendering</db:code> is the faster of the two, but uses more memory and will exhibit rendering artifacts at large sizes. <db:code>CurveRendering</db:code> should be considered as an alternative in cases where <db:code>QtRendering</db:code> does not give good visual results or where reducing graphics memory consumption is a priority.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#setRenderType">setRenderType</db:link>()</db:member>
<db:member><db:link xlink:href="qsgtextnode.xml#setRenderTypeQuality">setRenderTypeQuality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="TextStyle-enum">
<db:title>enum QSGTextNode::TextStyle</db:title>
<db:para>This enum type describes styles that can be applied to text rendering.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link></db:emphasis>::Normal</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The text is drawn without any style applied.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link></db:emphasis>::Outline</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The text is drawn with an outline.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link></db:emphasis>::Raised</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The text is drawn raised.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link></db:emphasis>::Sunken</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The text is drawn sunken.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#setTextStyle">setTextStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qsgtextnode.xml#setStyleColor">setStyleColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="addTextDocument">
<db:title>void QSGTextNode::addTextDocument(QPointF <db:emphasis>position</db:emphasis>, QTextDocument *<db:emphasis>document</db:emphasis>, int <db:emphasis>selectionStart</db:emphasis> = -1, int <db:emphasis>selectionCount</db:emphasis> = -1)</db:title>
<db:para>Adds the contents of <db:code role="parameter">document</db:code> to the text node at <db:code role="parameter">position</db:code>. If <db:code role="parameter">selectionStart</db:code> is &gt;= 0, then this marks the first character in a selected area of <db:code role="parameter">selectionCount</db:code> number of characters. The selection is represented as a background fill with the <db:link xlink:href="qsgtextnode.xml#selectionColor">selectionColor</db:link>() and the selected text is rendered in the <db:link xlink:href="qsgtextnode.xml#selectionTextColor">selectionTextColor</db:link>().</db:para>
<db:para>This function forwards its arguments to the virtual function doAddTextDocument().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#clear">clear</db:link>()</db:member>
<db:member>doAddTextDocument()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addTextLayout">
<db:title>void QSGTextNode::addTextLayout(QPointF <db:emphasis>position</db:emphasis>, QTextLayout *<db:emphasis>layout</db:emphasis>, int <db:emphasis>selectionStart</db:emphasis> = -1, int <db:emphasis>selectionCount</db:emphasis> = -1, int <db:emphasis>lineStart</db:emphasis> = 0, int <db:emphasis>lineCount</db:emphasis> = -1)</db:title>
<db:para>Adds the contents of <db:code role="parameter">layout</db:code> to the text node at <db:code role="parameter">position</db:code>. If <db:code role="parameter">selectionStart</db:code> is &gt;= 0, then this marks the first character in a selected area of <db:code role="parameter">selectionCount</db:code> number of characters. The selection is represented as a background fill with the <db:link xlink:href="qsgtextnode.xml#selectionColor">selectionColor</db:link>() and the selected text is rendered in the <db:link xlink:href="qsgtextnode.xml#selectionTextColor">selectionTextColor</db:link>().</db:para>
<db:para>For convenience, <db:code role="parameter">lineStart</db:code> and <db:code role="parameter">lineCount</db:code> can be used to select the range of <db:link xlink:href="qtextline.xml">QTextLine</db:link> objects to include from the layout. This can be useful, for instance, when creating elided layouts. If <db:code role="parameter">lineCount</db:code> is &lt; 0, then the the node will include the lines from <db:code role="parameter">lineStart</db:code> to the end of the layout.</db:para>
<db:para>This function forwards its arguments to the virtual function doAddTextLayout().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#clear">clear</db:link>()</db:member>
<db:member>doAddTextLayout()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>[pure virtual] void QSGTextNode::clear()</db:title>
<db:para>Clears the contents of the node, deleting nodes and other data that represents the layouts and documents that have been added to it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#addTextLayout">addTextLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qsgtextnode.xml#addTextDocument">addTextDocument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="color">
<db:title>[pure virtual] QColor QSGTextNode::color() const</db:title>
<db:para>Returns the main color used when rendering the text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#setColor">setColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filtering">
<db:title>[pure virtual] QSGTexture::Filtering QSGTextNode::filtering() const</db:title>
<db:para>Returns the sampling mode used when scaling images that are part of the displayed text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#setFiltering">setFiltering</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="linkColor">
<db:title>[pure virtual] QColor QSGTextNode::linkColor() const</db:title>
<db:para>Returns the color of hyperlinks in the text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#setLinkColor">setLinkColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderType">
<db:title>[pure virtual] QSGTextNode::RenderType QSGTextNode::renderType() const</db:title>
<db:para>Returns the type of glyph node used for rendering the text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#setRenderType">setRenderType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderTypeQuality">
<db:title>[pure virtual] int QSGTextNode::renderTypeQuality() const</db:title>
<db:para>Returns the render type quality of the node. See <db:link xlink:href="qsgtextnode.xml#setRenderTypeQuality">setRenderTypeQuality</db:link>() for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#setRenderTypeQuality">setRenderTypeQuality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionColor">
<db:title>[pure virtual] QColor QSGTextNode::selectionColor() const</db:title>
<db:para>Returns the color of the selection background when any part of the text is marked as selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#setSelectionColor">setSelectionColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionTextColor">
<db:title>[pure virtual] QColor QSGTextNode::selectionTextColor() const</db:title>
<db:para>Returns the color of the selection text when any part of the text is marked as selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#setSelectionTextColor">setSelectionTextColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColor">
<db:title>[pure virtual] void QSGTextNode::setColor(QColor <db:emphasis>color</db:emphasis>)</db:title>
<db:para>Sets the main color to use when rendering the text to <db:code role="parameter">color</db:code>.</db:para>
<db:para>The default is black: <db:code>QColor(0, 0, 0)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#color">color</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFiltering">
<db:title>[pure virtual] void QSGTextNode::setFiltering(QSGTexture::Filtering <db:emphasis>filtering</db:emphasis>)</db:title>
<db:para>Sets the sampling mode used when scaling images that are part of the displayed text to <db:code role="parameter">filtering</db:code>. For smoothly scaled images, use <db:link xlink:href="qsgtexture.xml#Filtering-enum">QSGTexture::Linear</db:link> here.</db:para>
<db:para>The default is <db:link xlink:href="qsgtexture.xml#Filtering-enum">QSGTexture::Nearest</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#filtering">filtering</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLinkColor">
<db:title>[pure virtual] void QSGTextNode::setLinkColor(QColor <db:emphasis>linkColor</db:emphasis>)</db:title>
<db:para>Sets the color of or hyperlinks to <db:code role="parameter">linkColor</db:code> in the text.</db:para>
<db:para>The default is blue: <db:code>QColor(0, 0, 255)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#linkColor">linkColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRenderType">
<db:title>[pure virtual] void QSGTextNode::setRenderType(QSGTextNode::RenderType <db:emphasis>renderType</db:emphasis>)</db:title>
<db:para>Sets the type of glyph node in use to <db:code role="parameter">renderType</db:code>.</db:para>
<db:para>The default is <db:link xlink:href="qsgtextnode.xml#RenderType-enum">QtRendering</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#renderType">renderType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRenderTypeQuality">
<db:title>[pure virtual] void QSGTextNode::setRenderTypeQuality(int <db:emphasis>renderTypeQuality</db:emphasis>)</db:title>
<db:para>If the <db:link xlink:href="qsgtextnode.xml#renderType">renderType</db:link>() in use supports it, set the quality to use when rendering the text. When supported, this can be used to trade visual fidelity for execution speed or memory.</db:para>
<db:para>When the <db:code role="parameter">renderTypeQuality</db:code> is &lt; 0, the default quality is used.</db:para>
<db:para>The <db:code role="parameter">renderTypeQuality</db:code> can be any integer, although limitations imposed by the underlying graphics hardware may be encountered if extreme values are set. The Qt Quick Text element operates with the following predefined values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>DefaultRenderTypeQuality</db:para>
</db:td>
<db:td>
<db:para>-1 (default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>LowRenderTypeQuality</db:para>
</db:td>
<db:td>
<db:para>26</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>NormalRenderTypeQuality</db:para>
</db:td>
<db:td>
<db:para>52</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>HighRenderTypeQuality</db:para>
</db:td>
<db:td>
<db:para>104</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>VeryHighRenderTypeQuality</db:para>
</db:td>
<db:td>
<db:para>208</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This value is currently only respected by the <db:link xlink:href="qsgtextnode.xml#RenderType-enum">QtRendering</db:link> render type. Setting it changes the resolution of the distance fields used to represent the glyphs. Setting it above normal will cause memory consumption to increase, but reduces filtering artifacts on very large text.</db:para>
<db:para>The default is -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#renderTypeQuality">renderTypeQuality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelectionColor">
<db:title>[pure virtual] void QSGTextNode::setSelectionColor(QColor <db:emphasis>color</db:emphasis>)</db:title>
<db:para>Sets the color of the selection background to <db:code role="parameter">color</db:code> when any part of the text is marked as selected.</db:para>
<db:para>The default is dark blue: <db:code>QColor(0, 0, 128)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#selectionColor">selectionColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelectionTextColor">
<db:title>[pure virtual] void QSGTextNode::setSelectionTextColor(QColor <db:emphasis>selectionTextColor</db:emphasis>)</db:title>
<db:para>Sets the color of the selection text to <db:code role="parameter">selectionTextColor</db:code> when any part of the text is marked as selected.</db:para>
<db:para>The default is white: <db:code>QColor(255, 255, 255)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#selectionTextColor">selectionTextColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStyleColor">
<db:title>[pure virtual] void QSGTextNode::setStyleColor(QColor <db:emphasis>styleColor</db:emphasis>)</db:title>
<db:para>Sets the style color to use when rendering the text to <db:code role="parameter">styleColor</db:code>.</db:para>
<db:para>The default is black: <db:code>QColor(0, 0, 0)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#styleColor">styleColor</db:link>()</db:member>
<db:member><db:link xlink:href="qsgtextnode.xml#setTextStyle">setTextStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextStyle">
<db:title>[pure virtual] void QSGTextNode::setTextStyle(QSGTextNode::TextStyle <db:emphasis>textStyle</db:emphasis>)</db:title>
<db:para>Sets the style of the rendered text to <db:code role="parameter">textStyle</db:code>. The default is <db:code>Normal</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#textStyle">textStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qsgtextnode.xml#setStyleColor">setStyleColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setViewport">
<db:title>[pure virtual] void QSGTextNode::setViewport(const QRectF &amp;<db:emphasis>viewport</db:emphasis>)</db:title>
<db:para>Sets the bounding rect of the viewport where the text is displayed to <db:code role="parameter">viewport</db:code>. Providing this information makes it possible for the <db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link> to optimize which parts of the text layout or document are included in the scene graph.</db:para>
<db:para>The default is a default-constructed <db:link xlink:href="qrectf.xml">QRectF</db:link>. For this viewport, all contents will be included in the graph.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#viewport">viewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="styleColor">
<db:title>[pure virtual] QColor QSGTextNode::styleColor() const</db:title>
<db:para>Returns the style color used when rendering the text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#setStyleColor">setStyleColor</db:link>()</db:member>
<db:member><db:link xlink:href="qsgtextnode.xml#textStyle">textStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textStyle">
<db:title>[pure virtual] QSGTextNode::TextStyle QSGTextNode::textStyle()</db:title>
<db:para>Returns the style of the rendered text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#setTextStyle">setTextStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qsgtextnode.xml#styleColor">styleColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewport">
<db:title>[pure virtual] QRectF QSGTextNode::viewport() const</db:title>
<db:para>Returns the current viewport set for this <db:link xlink:href="qsgtextnode.xml">QSGTextNode</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtextnode.xml#setViewport">setViewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
