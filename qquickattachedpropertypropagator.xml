<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickAttachedPropertyPropagator Class</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickattachedpropertypropagator.xml">QQuickAttachedPropertyPropagator</db:link> class provides a way to propagate attached properties.</db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickAttachedPropertyPropagator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS QuickControls2)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::QuickControls2)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quickcontrols2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In QML, it is possible to <db:link xlink:href="qtqml-syntax-objectattributes.xml#attached-properties-and-attached-signal-handlers">attach properties and signal handlers</db:link> to objects. <db:link xlink:href="qtqml-cppintegration-definetypes.xml#providing-attached-properties">Providing Attached Properties</db:link> goes into more detail about how to expose your own C++ attached types.</db:para>
<db:para><db:link xlink:href="qquickattachedpropertypropagator.xml">QQuickAttachedPropertyPropagator</db:link> provides an API to propagate attached properties from a parent object to its children, similar to <db:link xlink:href="qml-qtquick-controls-control.xml#font-prop">font</db:link> and <db:link xlink:href="qml-qtquick-item.xml#palette-prop">palette</db:link> propagation. It supports propagation through <db:link xlink:href="qml-qtquick-item.xml">items</db:link>, <db:link xlink:href="qml-qtquick-controls-popup.xml">popups</db:link>, and <db:link xlink:href="qml-qtquick-window.xml">windows</db:link>.</db:para>
<db:para>If propagation of properties is not important, consider using a <db:link xlink:href="qqmlengine.xml#QML_SINGLETON">C++</db:link> or <db:link xlink:href="qtqml-modules-qmldir.xml#contents-of-a-module-definition-qmldir-file">QML</db:link> singleton instead, as it is better suited for that use case, and is more efficient in that it only requires one <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:para>To use <db:link xlink:href="qquickattachedpropertypropagator.xml">QQuickAttachedPropertyPropagator</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Derive from it</db:para>
</db:listitem>
<db:listitem>
<db:para>Call <db:link xlink:href="qquickattachedpropertypropagator.xml#initialize">initialize</db:link>() in the constructor</db:para>
</db:listitem>
<db:listitem>
<db:para>Define set/inherit/propagate/reset functions for each property as needed</db:para>
</db:listitem>
<db:listitem>
<db:para>Reimplement <db:link xlink:href="qquickattachedpropertypropagator.xml#attachedParentChange">attachedParentChange</db:link>() to handle property inheritance</db:para>
</db:listitem>
<db:listitem>
<db:para>Implement a static <db:code>qmlAttachedProperties</db:code> function and declare the type as an attached QML type with <db:link xlink:href="qqmlengine.xml#QML_ELEMENT">QML_ELEMENT</db:link> and <db:link xlink:href="qqmlengine.xml#QML_ATTACHED">QML_ATTACHED</db:link>, as detailed in <db:link xlink:href="qtqml-cppintegration-definetypes.xml#providing-attached-properties">Providing Attached Properties</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For an example that demonstrates this in depth, see <db:link xlink:href="qtquickcontrols-attachedstyleproperties-example.xml">Qt Quick Controls - Attached Style Properties Example</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols-styles.xml">Styling Qt Quick Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickAttachedPropertyPropagator">
<db:title>[explicit] QQuickAttachedPropertyPropagator::QQuickAttachedPropertyPropagator(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickAttachedPropertyPropagator</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickAttachedPropertyPropagator(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qquickattachedpropertypropagator.xml">QQuickAttachedPropertyPropagator</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The <db:code>parent</db:code> will be used to find this object's <db:link xlink:href="qquickattachedpropertypropagator.xml#attachedParent">attached parent</db:link>.</db:para>
<db:para>Derived classes should call <db:link xlink:href="qquickattachedpropertypropagator.xml#initialize">initialize</db:link>() in their constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickAttachedPropertyPropagator">
<db:title>[virtual] QQuickAttachedPropertyPropagator::~QQuickAttachedPropertyPropagator()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQuickAttachedPropertyPropagator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQuickAttachedPropertyPropagator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qquickattachedpropertypropagator.xml">QQuickAttachedPropertyPropagator</db:link>.</db:para>
</db:section>
<db:section xml:id="attachedChildren">
<db:title>QList&lt;QQuickAttachedPropertyPropagator *&gt; QQuickAttachedPropertyPropagator::attachedChildren() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QQuickAttachedPropertyPropagator *&gt;</db:type>
<db:methodname>attachedChildren</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QQuickAttachedPropertyPropagator *&gt; attachedChildren() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns the attached children of this attached object.</db:para>
<db:para>The attached children are used when propagating property values:</db:para>
<db:programlisting language="cpp">void MyStyle::propagateTheme()
{
    const auto styles = attachedChildren();
    for (QQuickAttachedPropertyPropagator *child : styles) {
        MyStyle *myStyle = qobject_cast&amp;lt;MyStyle *&amp;gt;(child);
        if (myStyle)
            myStyle-&amp;gt;inheritTheme(m_theme);
    }
}

</db:programlisting>
</db:section>
<db:section xml:id="attachedParent">
<db:title>QQuickAttachedPropertyPropagator *QQuickAttachedPropertyPropagator::attachedParent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQuickAttachedPropertyPropagator *</db:type>
<db:methodname>attachedParent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickAttachedPropertyPropagator * attachedParent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns the attached parent of this attached object.</db:para>
<db:para>The attached parent is used when inheriting property values:</db:para>
<db:programlisting language="cpp">void MyStyle::resetTheme()
{
    if (!m_explicitTheme)
        return;

    m_explicitTheme = false;
    MyStyle *myStyle = qobject_cast&amp;lt;MyStyle *&amp;gt;(attachedParent());
    inheritTheme(myStyle ? myStyle-&amp;gt;theme() : globalTheme);
}

</db:programlisting>
</db:section>
<db:section xml:id="attachedParentChange">
<db:title>[virtual protected] void QQuickAttachedPropertyPropagator::attachedParentChange(QQuickAttachedPropertyPropagator *<db:emphasis>newParent</db:emphasis>, QQuickAttachedPropertyPropagator *<db:emphasis>oldParent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>attachedParentChange</db:methodname>
<db:methodparam>
<db:type>QQuickAttachedPropertyPropagator *</db:type>
<db:parameter>newParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQuickAttachedPropertyPropagator *</db:type>
<db:parameter>oldParent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void attachedParentChange(QQuickAttachedPropertyPropagator *newParent, QQuickAttachedPropertyPropagator *oldParent)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called whenever the attached parent of this <db:link xlink:href="qquickattachedpropertypropagator.xml">QQuickAttachedPropertyPropagator</db:link> changes from <db:code role="parameter">oldParent</db:code> to <db:code role="parameter">newParent</db:code>.</db:para>
<db:para>Subclasses should reimplement this function to inherit attached properties from <db:code>newParent</db:code>.</db:para>
<db:programlisting language="cpp">void MyStyle::attachedParentChange(QQuickAttachedPropertyPropagator *newParent, QQuickAttachedPropertyPropagator *oldParent)
{
    Q_UNUSED(oldParent);
    MyStyle *attachedParentStyle = qobject_cast&amp;lt;MyStyle *&amp;gt;(newParent);
    if (attachedParentStyle) {
        inheritTheme(attachedParentStyle-&amp;gt;theme());
        // Do any other inheriting here...
    }
}

</db:programlisting>
</db:section>
<db:section xml:id="initialize">
<db:title>[protected] void QQuickAttachedPropertyPropagator::initialize()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>initialize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initialize()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds and sets the attached parent for this attached object, and then does the same for its children. This must be called upon construction of the attached object in order for propagation to work.</db:para>
<db:para>It can be useful to read global/default values before calling this function. For example, before calling <db:code>initialize()</db:code>, the <db:link xlink:href="qtquickcontrols-imagine.xml">Imagine</db:link> style checks a static &quot;globalsInitialized&quot; flag to see if it should read default values from <db:link xlink:href="qsettings.xml">QSettings</db:link>. The values from that file form the basis for any attached property values that have not been explicitly set.</db:para>
<db:programlisting language="cpp">MyStyle::MyStyle(QObject *parent)
    : QQuickAttachedPropertyPropagator(parent)
    , m_theme(globalTheme)
{
    // A static function could be called here that reads globalTheme from a
    // settings file once at startup. That value would override the global
    // value. This is similar to what the Imagine and Material styles do, for
    // example.

    initialize();
}

</db:programlisting>
</db:section>
</db:section>
</db:article>
