<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SwipeDelegate QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Swipable item delegate.</db:para>
<db:para>This type was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>ItemDelegate</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>SwipeDelegate is part of <db:simplelist><db:member>qtquickcontrols2-delegates</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> presents a view item that can be swiped left or right to expose more options or information. It is used as a delegate in views such as <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.</db:para>
<db:para>In the following example, <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> is used in a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> to allow items to be removed from it by swiping to the left:</db:para>
<db:programlisting language="qml">ListView {
    id: listView
    anchors.fill: parent
    model: ListModel {
        ListElement { sender: &quot;Bob Bobbleton&quot;; title: &quot;How are you going?&quot; }
        ListElement { sender: &quot;Rug Emporium&quot;; title: &quot;SALE! All rugs MUST go!&quot; }
        ListElement { sender: &quot;Electric Co.&quot;; title: &quot;Electricity bill 15/07/2016 overdue&quot; }
        ListElement { sender: &quot;Tips&quot;; title: &quot;Five ways this tip will save your life&quot; }
    }
    delegate: SwipeDelegate {
        id: swipeDelegate
        text: sender + &quot; - &quot; + title
        width: listView.width

        required property string sender
        required property string title

        ListView.onRemove: SequentialAnimation {
            PropertyAction {
                target: swipeDelegate
                property: &quot;ListView.delayRemove&quot;
                value: true
            }
            NumberAnimation {
                target: swipeDelegate
                property: &quot;height&quot;
                to: 0
                easing.type: Easing.InOutQuad
            }
            PropertyAction {
                target: swipeDelegate
                property: &quot;ListView.delayRemove&quot;
                value: false
            }
        }

        swipe.right: Label {
            id: deleteLabel
            text: qsTr(&quot;Delete&quot;)
            color: &quot;white&quot;
            verticalAlignment: Label.AlignVCenter
            padding: 12
            height: parent.height
            anchors.right: parent.right

            SwipeDelegate.onClicked: listView.model.remove(index)

            required property int index

            background: Rectangle {
                color: deleteLabel.SwipeDelegate.pressed ? Qt.darker(&quot;tomato&quot;, 1.1) : &quot;tomato&quot;
            }
        }
    }
}
</db:programlisting>
<db:para><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> inherits its API from <db:link xlink:href="qml-qtquick-controls2-itemdelegate.xml">ItemDelegate</db:link>, which is inherited from <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml">AbstractButton</db:link>. For instance, you can set <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#text-prop">text</db:link>, and react to <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#clicked-signal">clicks</db:link> using the <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml">AbstractButton</db:link> API.</db:para>
<db:para>Information regarding the progress of a swipe, as well as the components that should be shown upon swiping, are both available through the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe-prop">swipe</db:link> grouped property object. For example, <db:code>swipe.position</db:code> holds the position of the swipe within the range <db:code>-1.0</db:code> to <db:code>1.0</db:code>. The <db:code>swipe.left</db:code> property determines which item will be displayed when the control is swiped to the right, and vice versa for <db:code>swipe.right</db:code>. The positioning of these components is left to applications to decide. For example, without specifying any position for <db:code>swipe.left</db:code> or <db:code>swipe.right</db:code>, the following will occur:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-swipedelegate.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>If <db:code>swipe.left</db:code> and <db:code>swipe.right</db:code> are anchored to the left and right of the <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> item (respectively), they'll behave like this:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-swipedelegate-leading-trailing.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>When using <db:code>swipe.left</db:code> and <db:code>swipe.right</db:code>, the control cannot be swiped past the left and right edges. To achieve this type of &quot;wrapping&quot; behavior, set <db:code>swipe.behind</db:code> instead. This will result in the same item being shown regardless of which direction the control is swiped. For example, in the image below, we set <db:code>swipe.behind</db:code> and then swipe the control repeatedly in both directions:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-swipedelegate-behind.gif"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-customize.xml#customizing-swipedelegate">Customizing SwipeDelegate</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols2-delegates.xml">Delegate Controls</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-swipetoremove-example.xml">Swipe to Remove Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="swipe-prop">
<db:title>swipe group</db:title>
<db:bridgehead renderas="sect2" xml:id="swipe.behind-prop">swipe.behind : Component</db:bridgehead>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>swipe.behind</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="swipe.behindItem-prop">swipe.behindItem : Item</db:bridgehead>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>swipe.behindItem</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="swipe.complete-prop">swipe.complete : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>swipe.complete</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="swipe.enabled-prop">swipe.enabled : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>swipe.enabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="swipe.left-prop">swipe.left : Component</db:bridgehead>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>swipe.left</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="swipe.leftItem-prop">swipe.leftItem : Item</db:bridgehead>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>swipe.leftItem</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="swipe.position-prop">swipe.position : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>swipe.position</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="swipe.right-prop">swipe.right : Component</db:bridgehead>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>swipe.right</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="swipe.rightItem-prop">swipe.rightItem : Item</db:bridgehead>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>swipe.rightItem</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="swipe.transition-prop">swipe.transition : Transition</db:bridgehead>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>swipe.transition</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Name</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>position</db:para>
</db:td>
<db:td>
<db:para>This read-only property holds the position of the swipe relative to either side of the control. When this value reaches either <db:code>-1.0</db:code> (left side) or <db:code>1.0</db:code> (right side) and the mouse button is released, <db:code>complete</db:code> will be <db:code>true</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>complete</db:para>
</db:td>
<db:td>
<db:para>This read-only property holds whether the control is fully exposed after having been swiped to the left or right.</db:para>
<db:para>When complete is <db:code>true</db:code>, any interactive items declared in <db:code>left</db:code>, <db:code>right</db:code>, or <db:code>behind</db:code> will receive mouse events.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>enabled</db:para>
</db:td>
<db:td>
<db:para>This property determines whether or not the control can be swiped.</db:para>
<db:para>This property was added in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.2.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>left</db:para>
</db:td>
<db:td>
<db:para>This property holds the left delegate.</db:para>
<db:para>The left delegate sits behind both <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>. When the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> is swiped to the right, this item will be gradually revealed.</db:para>
<db:para>Both interactive and non-interactive items can be used here. Normal event handling rules apply; if an interactive control like <db:link xlink:href="qml-qtquick-controls2-button.xml">Button</db:link> is used, interaction signals of <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> such as <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#clicked-signal">clicked</db:link>() will not get emitted if the button is clicked.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>behind</db:para>
</db:td>
<db:td>
<db:para>This property holds the delegate that is shown when the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> is swiped to both the left and right.</db:para>
<db:para>As with the <db:code>left</db:code> and <db:code>right</db:code> delegates, it sits behind both <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>. However, a <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> whose <db:code>behind</db:code> has been set can be continuously swiped from either side, and will always show the same item.</db:para>
<db:para>Both interactive and non-interactive items can be used here. Normal event handling rules apply; if an interactive control like <db:link xlink:href="qml-qtquick-controls2-button.xml">Button</db:link> is used, interaction signals of <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> such as <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#clicked-signal">clicked</db:link>() will not get emitted if the button is clicked.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>right</db:para>
</db:td>
<db:td>
<db:para>This property holds the right delegate.</db:para>
<db:para>The right delegate sits behind both <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>. When the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> is swiped to the left, this item will be gradually revealed.</db:para>
<db:para>Both interactive and non-interactive items can be used here. Normal event handling rules apply; if an interactive control like <db:link xlink:href="qml-qtquick-controls2-button.xml">Button</db:link> is used, interaction signals of <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> such as <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#clicked-signal">clicked</db:link>() will not get emitted if the button is clicked.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>leftItem</db:para>
</db:td>
<db:td>
<db:para>This read-only property holds the item instantiated from the <db:code>left</db:code> component.</db:para>
<db:para>If <db:code>left</db:code> has not been set, or the position hasn't changed since creation of the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link>, this property will be <db:code>null</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>behindItem</db:para>
</db:td>
<db:td>
<db:para>This read-only property holds the item instantiated from the <db:code>behind</db:code> component.</db:para>
<db:para>If <db:code>behind</db:code> has not been set, or the position hasn't changed since creation of the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link>, this property will be <db:code>null</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>rightItem</db:para>
</db:td>
<db:td>
<db:para>This read-only property holds the item instantiated from the <db:code>right</db:code> component.</db:para>
<db:para>If <db:code>right</db:code> has not been set, or the position hasn't changed since creation of the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link>, this property will be <db:code>null</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>transition</db:para>
</db:td>
<db:td>
<db:para>This property holds the transition that is applied when a swipe is released, or <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe.open-method">swipe.open</db:link>() or <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe.close-method">swipe.close</db:link>() is called.</db:para>
<db:programlisting language="qml">SwipeDelegate {
    swipe.transition: Transition {
        SmoothedAnimation { velocity: 3; easing.type: Easing.InOutCubic }
    }
}
</db:programlisting>
<db:para>This property was added in Qt Quick Controls 2.2.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe.open-method">swipe.open</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe.close-method">swipe.close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="attached-property-documentation">
<db:title>Attached Property Documentation</db:title>
<db:section xml:id="pressed-attached-prop">
<db:title>[read-only, since QtQuick.Controls 2.1 (Qt 5.8)] SwipeDelegate.pressed : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>SwipeDelegate.pressed</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property can be attached to a non-interactive item declared in <db:code>swipe.left</db:code>, <db:code>swipe.right</db:code>, or <db:code>swipe.behind</db:code>, in order to detect if it is pressed. Items can only be pressed when <db:code>swipe.complete</db:code> is <db:code>true</db:code>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">swipe.right: Label {
    anchors.right: parent.right
    height: parent.height
    text: &quot;Action&quot;
    color: &quot;white&quot;
    padding: 12
    background: Rectangle {
        color: SwipeDelegate.pressed ? Qt.darker(&quot;tomato&quot;, 1.1) : &quot;tomato&quot;
    }
}
</db:programlisting>
<db:para>It is possible to have multiple items which individually receive mouse and touch events. For example, to have two actions in the <db:code>swipe.right</db:code> item, use the following code:</db:para>
<db:programlisting language="cpp">swipe.right: Row {
    anchors.right: parent.right
    height: parent.height

    Label {
        id: moveLabel
        text: qsTr(&quot;Move&quot;)
        color: &quot;white&quot;
        verticalAlignment: Label.AlignVCenter
        padding: 12
        height: parent.height

        SwipeDelegate.onClicked: console.log(&quot;Moving...&quot;)

        background: Rectangle {
            color: moveLabel.SwipeDelegate.pressed ? Qt.darker(&quot;#ffbf47&quot;, 1.1) : &quot;#ffbf47&quot;
        }
    }
    Label {
        id: deleteLabel
        text: qsTr(&quot;Delete&quot;)
        color: &quot;white&quot;
        verticalAlignment: Label.AlignVCenter
        padding: 12
        height: parent.height

        SwipeDelegate.onClicked: console.log(&quot;Deleting...&quot;)

        background: Rectangle {
            color: deleteLabel.SwipeDelegate.pressed ? Qt.darker(&quot;tomato&quot;, 1.1) : &quot;tomato&quot;
        }
    }
}
</db:programlisting>
<db:para>Note how the <db:code>color</db:code> assignment in each <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> item qualifies the attached property with the <db:code>id</db:code> of the label. This is important; using the attached properties on an item causes that item to accept events. Suppose we had left out the <db:code>id</db:code> in the previous example:</db:para>
<db:programlisting language="cpp">color: SwipeDelegate.pressed ? Qt.darker(&quot;tomato&quot;, 1.1) : &quot;tomato&quot;
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> background item is a child of the label, so it naturally receives events before it. In practice, this means that the background color will change, but the <db:code>onClicked</db:code> handler in the label will never get called.</db:para>
<db:para>For interactive controls (such as <db:link xlink:href="qml-qtquick-controls2-button.xml">Button</db:link>) declared in these items, use their respective <db:code>pressed</db:code> property instead.</db:para>
<db:para>For presses on the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> itself, use its <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#pressed-signal">pressed</db:link> property.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.1 (Qt 5.8).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#clicked-signal">clicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="swipe.closed-signal">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] void swipe.closed()</db:title>
<db:para>This signal is emitted when the delegate has been swiped to closed and the transition has finished.</db:para>
<db:para>It is useful for performing some action upon cancellation of a swipe. For example, it can be used to cancel the removal of the delegate from the list that it is in.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>swipe.onClosed</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe-prop">swipe</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe.opened-signal">swipe.opened</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swipe.completed-signal">
<db:title>[since QtQuick.Controls 2.1 (Qt 5.8)] void swipe.completed()</db:title>
<db:para>This signal is emitted when <db:code>swipe.complete</db:code> becomes <db:code>true</db:code>.</db:para>
<db:para>It is useful for performing some action upon completion of a swipe. For example, it can be used to remove the delegate from the list that it is in.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>swipe.onCompleted</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 2.1 (Qt 5.8).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe-prop">swipe</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swipe.opened-signal">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] void swipe.opened()</db:title>
<db:para>This signal is emitted when the delegate has been swiped open and the transition has finished.</db:para>
<db:para>It is useful for performing some action upon completion of a swipe. For example, it can be used to remove the delegate from the list that it is in.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>swipe.onOpened</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe-prop">swipe</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe.closed-signal">swipe.closed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="attached-signal-documentation">
<db:title>Attached Signal Documentation</db:title>
<db:section xml:id="clicked-signal">
<db:title>[since QtQuick.Controls 2.1 (Qt 5.8)] clicked()</db:title>
<db:para>This signal can be attached to a non-interactive item declared in <db:code>swipe.left</db:code>, <db:code>swipe.right</db:code>, or <db:code>swipe.behind</db:code>, in order to react to clicks. Items can only be clicked when <db:code>swipe.complete</db:code> is <db:code>true</db:code>.</db:para>
<db:para>For interactive controls (such as <db:link xlink:href="qml-qtquick-controls2-button.xml">Button</db:link>) declared in these items, use their respective <db:code>clicked()</db:code> signal instead.</db:para>
<db:para>To respond to clicks on the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> itself, use its <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#clicked-signal">clicked</db:link>() signal.</db:para>
<db:note>
<db:para>See the documentation for <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#pressed-attached-prop">pressed</db:link> for information on how to use the event-related properties correctly.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onClicked</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 2.1 (Qt 5.8).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#pressed-attached-prop">pressed</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="swipe.close-method">
<db:title>[since QtQuick.Controls 2.1 (Qt 5.8)] void swipe.close()</db:title>
<db:para>This method sets the <db:code>position</db:code> of the swipe to <db:code>0</db:code>. Any animations defined for the <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link> position of <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> will be triggered.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.1 (Qt 5.8).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe-prop">swipe</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe.open-method">swipe.open</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swipe.open-method">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] void swipe.open(enumeration <db:emphasis>side</db:emphasis>)</db:title>
<db:para>This method sets the <db:code>position</db:code> of the swipe so that it opens from the specified <db:code role="parameter">side</db:code>.</db:para>
<db:para>Available values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>SwipeDelegate.Left</db:para>
</db:td>
<db:td>
<db:para>The <db:code>position</db:code> is set to <db:code>1</db:code>, which makes the swipe open from the left. Either <db:code>swipe.left</db:code> or <db:code>swipe.behind</db:code> must have been specified; otherwise the call is ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SwipeDelegate.Right</db:para>
</db:td>
<db:td>
<db:para>The <db:code>position</db:code> is set to <db:code>-1</db:code>, which makes the swipe open from the right. Either <db:code>swipe.right</db:code> or <db:code>swipe.behind</db:code> must have been specified; otherwise the call is ignored.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Any animations defined for the <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link> position of <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> will be triggered.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe-prop">swipe</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe.close-method">swipe.close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
