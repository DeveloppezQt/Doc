<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SwipeDelegate QML Type</db:title>
<db:productname>QtQuickControls2</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 2 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A swipable item delegate.</db:para>
<db:para>This type was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 2.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls2-itemdelegate.xml">ItemDelegate</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>SwipeDelegate is part of <db:simplelist><db:member>qtquickcontrols2-delegates</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> presents a view item that can be swiped left or right to expose more options or information. It is used as a delegate in views such as <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.</db:para>
<db:para><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> inherits its API from <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml">AbstractButton</db:link>. For instance, you can set <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#text-prop">text</db:link> and react to <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#clicked-signal">clicks</db:link> using the <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml">AbstractButton</db:link> API.</db:para>
<db:para>Information regarding the progress of a swipe, as well as the components that should be shown upon swiping, are both available through the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml#swipe-prop">swipe</db:link> grouped property object. For example, <db:code>swipe.position</db:code> holds the position of the swipe within the range <db:code>-1.0</db:code> to <db:code>1.0</db:code>. The <db:code>swipe.left</db:code> property determines which item will be displayed when the control is swiped to the right, and vice versa for <db:code>swipe.right</db:code>. The positioning of these components is left to applications to decide. For example, without specifying any position for <db:code>swipe.left</db:code> or <db:code>swipe.right</db:code>, the following will occur:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-swipedelegate.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>If <db:code>swipe.left</db:code> and <db:code>swipe.right</db:code> are anchored to the left and right of the <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> item (respectively), they'll behave like this:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-swipedelegate-leading-trailing.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>When using <db:code>swipe.left</db:code> and <db:code>swipe.right</db:code>, the control cannot be swiped past the left and right edges. To achieve this type of &quot;wrapping&quot; behavior, set <db:code>swipe.behind</db:code> instead. This will result in the same item being shown regardless of which direction the control is swiped. For example, in the image below, we set <db:code>swipe.behind</db:code> and then swipe the control repeatedly in both directions:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-swipedelegate-behind.gif"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-customize.xml#customizing-swipedelegate">Customizing SwipeDelegate</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols2-delegates.xml">Delegate Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="swipe-prop">
<db:title>swipe group</db:title>
<db:bridgehead renderas="sect2" xml:id="swipe.behind-prop">swipe.behind : Component</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="swipe.behindItem-prop">swipe.behindItem : Item</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="swipe.complete-prop">swipe.complete : bool</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="swipe.left-prop">swipe.left : Component</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="swipe.leftItem-prop">swipe.leftItem : Item</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="swipe.position-prop">swipe.position : real</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="swipe.right-prop">swipe.right : Component</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="swipe.rightItem-prop">swipe.rightItem : Item</db:bridgehead>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Property</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>position</db:para>
</db:td>
<db:td>
<db:para>This property holds the position of the swipe relative to either side of the control. When this value reaches either <db:code>-1.0</db:code> (left side) or <db:code>1.0</db:code> (right side) and the mouse button is released, <db:code>complete</db:code> will be <db:code>true</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>complete</db:para>
</db:td>
<db:td>
<db:para>This property holds whether the control is fully exposed after having been swiped to the left or right.</db:para>
<db:para>When complete is <db:code>true</db:code>, any interactive items declared in <db:code>left</db:code>, <db:code>right</db:code>, or <db:code>behind</db:code> will receive mouse events.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>left</db:para>
</db:td>
<db:td>
<db:para>This property holds the left delegate.</db:para>
<db:para>The left delegate sits behind both <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>. When the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> is swiped to the right, this item will be gradually revealed.</db:para>
<db:para>Both interactive and non-interactive items can be used here. Normal event handling rules apply; if an interactive control like <db:link xlink:href="qml-qtquick-controls2-button.xml">Button</db:link> is used, interaction signals of <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> such as <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#clicked-signal">clicked</db:link>() will not get emitted if the button is clicked.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>behind</db:para>
</db:td>
<db:td>
<db:para>This property holds the delegate that is shown when the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> is swiped to both the left and right.</db:para>
<db:para>As with the <db:code>left</db:code> and <db:code>right</db:code> delegates, it sits behind both <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>. However, a <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> whose <db:code>behind</db:code> has been set can be continuously swiped from either side, and will always show the same item.</db:para>
<db:para>Both interactive and non-interactive items can be used here. Normal event handling rules apply; if an interactive control like <db:link xlink:href="qml-qtquick-controls2-button.xml">Button</db:link> is used, interaction signals of <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> such as <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#clicked-signal">clicked</db:link>() will not get emitted if the button is clicked.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>right</db:para>
</db:td>
<db:td>
<db:para>This property holds the right delegate.</db:para>
<db:para>The right delegate sits behind both <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>. When the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> is swiped to the left, this item will be gradually revealed.</db:para>
<db:para>Both interactive and non-interactive items can be used here. Normal event handling rules apply; if an interactive control like <db:link xlink:href="qml-qtquick-controls2-button.xml">Button</db:link> is used, interaction signals of <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> such as <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#clicked-signal">clicked</db:link>() will not get emitted if the button is clicked.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>leftItem</db:para>
</db:td>
<db:td>
<db:para>This property holds the item instantiated from the <db:code>left</db:code> component.</db:para>
<db:para>If <db:code>left</db:code> has not been set, or the position hasn't changed since creation of the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link>, this property will be <db:code>null</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>behindItem</db:para>
</db:td>
<db:td>
<db:para>This property holds the item instantiated from the <db:code>behind</db:code> component.</db:para>
<db:para>If <db:code>behind</db:code> has not been set, or the position hasn't changed since creation of the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link>, this property will be <db:code>null</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>rightItem</db:para>
</db:td>
<db:td>
<db:para>This property holds the item instantiated from the <db:code>right</db:code> component.</db:para>
<db:para>If <db:code>right</db:code> has not been set, or the position hasn't changed since creation of the <db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link>, this property will be <db:code>null</db:code>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
