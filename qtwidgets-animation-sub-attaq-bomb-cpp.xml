<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Sub-Attaq</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows Qt's ability to combine <db:link xlink:href="animation-overview.xml">the animation framework</db:link> and <db:link xlink:href="statemachine-api.xml">the state machine framework</db:link> to create a game.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the QtCore module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia. For licensing terms and
** conditions see http://qt.digia.com/licensing. For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights. These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/

//Own
#include &quot;bomb.h&quot;
#include &quot;submarine.h&quot;
#include &quot;pixmapitem.h&quot;
#include &quot;animationmanager.h&quot;
#include &quot;qanimationstate.h&quot;

//Qt
#include &lt;QtCore/QSequentialAnimationGroup&gt;
#include &lt;QtCore/QPropertyAnimation&gt;
#include &lt;QtCore/QStateMachine&gt;
#include &lt;QtCore/QFinalState&gt;

Bomb::Bomb() : PixmapItem(QString(&quot;bomb&quot;), GraphicsScene::Big)
{
    setZValue(2);
}

void Bomb::launch(Bomb::Direction direction)
{
    QSequentialAnimationGroup *launchAnimation = new QSequentialAnimationGroup;
    AnimationManager::self()-&gt;registerAnimation(launchAnimation);
    qreal delta = direction == Right ? 20 : - 20;
    QPropertyAnimation *anim = new QPropertyAnimation(this, &quot;pos&quot;);
    anim-&gt;setEndValue(QPointF(x() + delta,y() - 20));
    anim-&gt;setDuration(150);
    launchAnimation-&gt;addAnimation(anim);
    anim = new QPropertyAnimation(this, &quot;pos&quot;);
    anim-&gt;setEndValue(QPointF(x() + delta*2, y() ));
    anim-&gt;setDuration(150);
    launchAnimation-&gt;addAnimation(anim);
    anim = new QPropertyAnimation(this, &quot;pos&quot;);
    anim-&gt;setEndValue(QPointF(x() + delta*2,scene()-&gt;height()));
    anim-&gt;setDuration(y()/2*60);
    launchAnimation-&gt;addAnimation(anim);
    connect(anim,SIGNAL(valueChanged(QVariant)),this,SLOT(onAnimationLaunchValueChanged(QVariant)));
    connect(this, SIGNAL(bombExploded()), launchAnimation, SLOT(stop()));
    //We setup the state machine of the bomb
    QStateMachine *machine = new QStateMachine(this);

    //This state is when the launch animation is playing
    QAnimationState *launched = new QAnimationState(machine);
    launched-&gt;setAnimation(launchAnimation);

    //End
    QFinalState *final = new QFinalState(machine);

    machine-&gt;setInitialState(launched);

    //### Add a nice animation when the bomb is destroyed
    launched-&gt;addTransition(this, SIGNAL(bombExploded()),final);

    //If the animation is finished, then we move to the final state
    launched-&gt;addTransition(launched, SIGNAL(animationFinished()), final);

    //The machine has finished to be executed, then the boat is dead
    connect(machine,SIGNAL(finished()),this, SIGNAL(bombExecutionFinished()));

    machine-&gt;start();

}

void Bomb::onAnimationLaunchValueChanged(const QVariant &amp;)
{
    foreach (QGraphicsItem * item , collidingItems(Qt::IntersectsItemBoundingRect)) {
        if (item-&gt;type() == SubMarine::Type) {
            SubMarine *s = static_cast&lt;SubMarine *&gt;(item);
            destroy();
            s-&gt;destroy();
        }
    }
}

void Bomb::destroy()
{
    emit bombExploded();
}

</db:programlisting>
</db:article>
