<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPixmap Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpixmap.xml">QPixmap</db:link> class is an off-screen image representation that can be used as a paint device.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPixmap</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpaintdevice.xml" xlink:role="class">QPaintDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qbitmap.xml" xlink:role="class">QBitmap</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPixmap is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Qt provides four classes for handling image data: <db:link xlink:href="qimage.xml">QImage</db:link>, <db:link xlink:href="qpixmap.xml">QPixmap</db:link>, <db:link xlink:href="qbitmap.xml">QBitmap</db:link> and <db:link xlink:href="qpicture.xml">QPicture</db:link>. <db:link xlink:href="qimage.xml">QImage</db:link> is designed and optimized for I/O, and for direct pixel access and manipulation, while <db:link xlink:href="qpixmap.xml">QPixmap</db:link> is designed and optimized for showing images on screen. <db:link xlink:href="qbitmap.xml">QBitmap</db:link> is only a convenience class that inherits <db:link xlink:href="qpixmap.xml">QPixmap</db:link>, ensuring a depth of 1. The <db:link xlink:href="qpixmap.xml#isQBitmap">isQBitmap</db:link>() function returns <db:code>true</db:code> if a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> object is really a bitmap, otherwise returns <db:code>false</db:code>. Finally, the <db:link xlink:href="qpicture.xml">QPicture</db:link> class is a paint device that records and replays <db:link xlink:href="qpainter.xml">QPainter</db:link> commands.</db:para>
<db:para>A <db:link xlink:href="qpixmap.xml">QPixmap</db:link> can easily be displayed on the screen using <db:link xlink:href="qlabel.xml">QLabel</db:link> or one of <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link>'s subclasses (such as <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> and <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link>). <db:link xlink:href="qlabel.xml">QLabel</db:link> has a pixmap property, whereas <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> has an icon property.</db:para>
<db:para><db:link xlink:href="qpixmap.xml">QPixmap</db:link> objects can be passed around by value since the <db:link xlink:href="qpixmap.xml">QPixmap</db:link> class uses implicit data sharing. For more information, see the <db:link xlink:href="implicit-sharing.xml">Implicit Data Sharing</db:link> documentation. <db:link xlink:href="qpixmap.xml">QPixmap</db:link> objects can also be streamed.</db:para>
<db:para>Note that the pixel data in a pixmap is internal and is managed by the underlying window system. Because <db:link xlink:href="qpixmap.xml">QPixmap</db:link> is a <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> subclass, <db:link xlink:href="qpainter.xml">QPainter</db:link> can be used to draw directly onto pixmaps. Pixels can only be accessed through <db:link xlink:href="qpainter.xml">QPainter</db:link> functions or by converting the <db:link xlink:href="qpixmap.xml">QPixmap</db:link> to a <db:link xlink:href="qimage.xml">QImage</db:link>. However, the <db:link xlink:href="qpixmap.xml#fill">fill</db:link>() function is available for initializing the entire pixmap with a given color.</db:para>
<db:para>There are functions to convert between <db:link xlink:href="qimage.xml">QImage</db:link> and <db:link xlink:href="qpixmap.xml">QPixmap</db:link>. Typically, the <db:link xlink:href="qimage.xml">QImage</db:link> class is used to load an image file, optionally manipulating the image data, before the <db:link xlink:href="qimage.xml">QImage</db:link> object is converted into a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> to be shown on screen. Alternatively, if no manipulation is desired, the image file can be loaded directly into a <db:link xlink:href="qpixmap.xml">QPixmap</db:link>.</db:para>
<db:para><db:link xlink:href="qpixmap.xml">QPixmap</db:link> provides a collection of functions that can be used to obtain a variety of information about the pixmap. In addition, there are several functions that enables transformation of the pixmap.</db:para>
<db:section xml:id="reading-and-writing-image-files">
<db:title>Reading and Writing Image Files</db:title>
<db:para><db:link xlink:href="qpixmap.xml">QPixmap</db:link> provides several ways of reading an image file: The file can be loaded when constructing the <db:link xlink:href="qpixmap.xml">QPixmap</db:link> object, or by using the <db:link xlink:href="qpixmap.xml#load">load</db:link>() or <db:link xlink:href="qpixmap.xml#loadFromData">loadFromData</db:link>() functions later on. When loading an image, the file name can either refer to an actual file on disk or to one of the application's embedded resources. See <db:link xlink:href="resources.xml">The Qt Resource System</db:link> overview for details on how to embed images and other resource files in the application's executable.</db:para>
<db:para>Simply call the <db:link xlink:href="qpixmap.xml#save">save</db:link>() function to save a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> object.</db:para>
<db:para>The complete list of supported file formats are available through the <db:link xlink:href="qimagereader.xml#supportedImageFormats">QImageReader::supportedImageFormats</db:link>() and <db:link xlink:href="qimagewriter.xml#supportedImageFormats">QImageWriter::supportedImageFormats</db:link>() functions. New file formats can be added as plugins. By default, Qt supports the following formats:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
<db:th>
<db:para>Qt's support</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>BMP</db:para>
</db:td>
<db:td>
<db:para>Windows Bitmap</db:para>
</db:td>
<db:td>
<db:para>Read/write</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GIF</db:para>
</db:td>
<db:td>
<db:para>Graphic Interchange Format (optional)</db:para>
</db:td>
<db:td>
<db:para>Read</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>JPG</db:para>
</db:td>
<db:td>
<db:para>Joint Photographic Experts Group</db:para>
</db:td>
<db:td>
<db:para>Read/write</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>JPEG</db:para>
</db:td>
<db:td>
<db:para>Joint Photographic Experts Group</db:para>
</db:td>
<db:td>
<db:para>Read/write</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PNG</db:para>
</db:td>
<db:td>
<db:para>Portable Network Graphics</db:para>
</db:td>
<db:td>
<db:para>Read/write</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PBM</db:para>
</db:td>
<db:td>
<db:para>Portable Bitmap</db:para>
</db:td>
<db:td>
<db:para>Read</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PGM</db:para>
</db:td>
<db:td>
<db:para>Portable Graymap</db:para>
</db:td>
<db:td>
<db:para>Read</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PPM</db:para>
</db:td>
<db:td>
<db:para>Portable Pixmap</db:para>
</db:td>
<db:td>
<db:para>Read/write</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>XBM</db:para>
</db:td>
<db:td>
<db:para>X11 Bitmap</db:para>
</db:td>
<db:td>
<db:para>Read/write</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>XPM</db:para>
</db:td>
<db:td>
<db:para>X11 Pixmap</db:para>
</db:td>
<db:td>
<db:para>Read/write</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="pixmap-information">
<db:title>Pixmap Information</db:title>
<db:para><db:link xlink:href="qpixmap.xml">QPixmap</db:link> provides a collection of functions that can be used to obtain a variety of information about the pixmap:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
</db:th>
<db:th>
<db:para>Available Functions</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Geometry</db:para>
</db:td>
<db:td>
<db:para>The <db:link xlink:href="qpixmap.xml#size">size</db:link>(), <db:link xlink:href="qpixmap.xml#width">width</db:link>() and <db:link xlink:href="qpixmap.xml#height">height</db:link>() functions provide information about the pixmap's size. The <db:link xlink:href="qpixmap.xml#rect">rect</db:link>() function returns the image's enclosing rectangle.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Alpha component</db:para>
</db:td>
<db:td>
<db:para>The <db:link xlink:href="qpixmap.xml#hasAlphaChannel">hasAlphaChannel</db:link>() returns <db:code>true</db:code> if the pixmap has a format that respects the alpha channel, otherwise returns <db:code>false</db:code>. The <db:link xlink:href="qpixmap.xml#hasAlpha">hasAlpha</db:link>(), <db:link xlink:href="qpixmap.xml#setMask">setMask</db:link>() and <db:link xlink:href="qpixmap.xml#mask">mask</db:link>() functions are legacy and should not be used. They are potentially very slow.</db:para>
<db:para>The <db:link xlink:href="qpixmap.xml#createHeuristicMask">createHeuristicMask</db:link>() function creates and returns a 1-bpp heuristic mask (i.e. a <db:link xlink:href="qbitmap.xml">QBitmap</db:link>) for this pixmap. It works by selecting a color from one of the corners and then chipping away pixels of that color, starting at all the edges. The <db:link xlink:href="qpixmap.xml#createMaskFromColor">createMaskFromColor</db:link>() function creates and returns a mask (i.e. a <db:link xlink:href="qbitmap.xml">QBitmap</db:link>) for the pixmap based on a given color.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Low-level information</db:para>
</db:td>
<db:td>
<db:para>The <db:link xlink:href="qpixmap.xml#depth">depth</db:link>() function returns the depth of the pixmap. The <db:link xlink:href="qpixmap.xml#defaultDepth">defaultDepth</db:link>() function returns the default depth, i.e. the depth used by the application on the given screen.</db:para>
<db:para>The <db:link xlink:href="qpixmap.xml#cacheKey">cacheKey</db:link>() function returns a number that uniquely identifies the contents of the <db:link xlink:href="qpixmap.xml">QPixmap</db:link> object.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="pixmap-conversion">
<db:title>Pixmap Conversion</db:title>
<db:para>A <db:link xlink:href="qpixmap.xml">QPixmap</db:link> object can be converted into a <db:link xlink:href="qimage.xml">QImage</db:link> using the <db:link xlink:href="qpixmap.xml#toImage">toImage</db:link>() function. Likewise, a <db:link xlink:href="qimage.xml">QImage</db:link> can be converted into a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> using the <db:link xlink:href="qpixmap.xml#fromImage">fromImage</db:link>(). If this is too expensive an operation, you can use <db:link xlink:href="qbitmap.xml#fromImage">QBitmap::fromImage</db:link>() instead.</db:para>
<db:para>To convert a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> to and from HICON you can use the QtWinExtras functions QtWin::toHICON() and QtWin::fromHICON() respectively.</db:para>
</db:section>
<db:section xml:id="pixmap-transformations">
<db:title>Pixmap Transformations</db:title>
<db:para><db:link xlink:href="qpixmap.xml">QPixmap</db:link> supports a number of functions for creating a new pixmap that is a transformed version of the original:</db:para>
<db:para>The <db:link xlink:href="qpixmap.xml#scaled">scaled</db:link>(), <db:link xlink:href="qpixmap.xml#scaledToWidth">scaledToWidth</db:link>() and <db:link xlink:href="qpixmap.xml#scaledToHeight">scaledToHeight</db:link>() functions return scaled copies of the pixmap, while the <db:link xlink:href="qpixmap.xml#copy">copy</db:link>() function creates a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> that is a plain copy of the original one.</db:para>
<db:para>The <db:link xlink:href="qpixmap.xml#transformed">transformed</db:link>() function returns a copy of the pixmap that is transformed with the given transformation matrix and transformation mode: Internally, the transformation matrix is adjusted to compensate for unwanted translation, i.e. <db:link xlink:href="qpixmap.xml#transformed">transformed</db:link>() returns the smallest pixmap containing all transformed points of the original pixmap. The static <db:link xlink:href="qpixmap.xml#trueMatrix">trueMatrix</db:link>() function returns the actual matrix used for transforming the pixmap.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitmap.xml">QBitmap</db:link></db:member>
<db:member><db:link xlink:href="qimage.xml">QImage</db:link></db:member>
<db:member><db:link xlink:href="qimagereader.xml">QImageReader</db:link></db:member>
<db:member><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPixmap">
<db:title>QPixmap::QPixmap()</db:title>
<db:constructorsynopsis>
<db:methodname>QPixmap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null pixmap.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPixmap-1">
<db:title>QPixmap::QPixmap(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPixmap</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap(int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a pixmap with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>. If either <db:code role="parameter">width</db:code> or <db:code role="parameter">height</db:code> is zero, a null pixmap is constructed.</db:para>
<db:warning>
<db:para>This will create a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> with uninitialized data. Call <db:link xlink:href="qpixmap.xml#fill">fill</db:link>() to fill the pixmap with an appropriate color before drawing onto it with <db:link xlink:href="qpainter.xml">QPainter</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPixmap-2">
<db:title>[explicit] QPixmap::QPixmap(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPixmap</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap(const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Constructs a pixmap of the given <db:code role="parameter">size</db:code>.</db:para>
<db:warning>
<db:para>This will create a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> with uninitialized data. Call <db:link xlink:href="qpixmap.xml#fill">fill</db:link>() to fill the pixmap with an appropriate color before drawing onto it with <db:link xlink:href="qpainter.xml">QPainter</db:link>.</db:para>
</db:warning>
</db:section>
<db:section xml:id="QPixmap-3">
<db:title>QPixmap::QPixmap(const QString &amp;<db:emphasis>fileName</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = nullptr, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:constructorsynopsis>
<db:methodname>QPixmap</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>format</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap(const QString &amp;fileName, const char *format, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a pixmap from the file with the given <db:code role="parameter">fileName</db:code>. If the file does not exist or is of an unknown format, the pixmap becomes a null pixmap.</db:para>
<db:para>The loader attempts to read the pixmap using the specified <db:code role="parameter">format</db:code>. If the <db:code role="parameter">format</db:code> is not specified (which is the default), the loader probes the file for a header to guess the file format.</db:para>
<db:para>The file name can either refer to an actual file on disk or to one of the application's embedded resources. See the <db:link xlink:href="resources.xml">Resource System</db:link> overview for details on how to embed images and other resource files in the application's executable.</db:para>
<db:para>If the image needs to be modified to fit in a lower-resolution result (e.g. converting from 32-bit to 8-bit), use the <db:code role="parameter">flags</db:code> to control the conversion.</db:para>
<db:para>The <db:code role="parameter">fileName</db:code>, <db:code role="parameter">format</db:code> and <db:code role="parameter">flags</db:code> parameters are passed on to <db:link xlink:href="qpixmap.xml#load">load</db:link>(). This means that the data in <db:code role="parameter">fileName</db:code> is not compiled into the binary. If <db:code role="parameter">fileName</db:code> contains a relative path (e.g. the filename only) the relevant file must be found relative to the runtime working directory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#reading-and-writing-image-files">Reading and Writing Image Files</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPixmap-4">
<db:title>[explicit] QPixmap::QPixmap(const char *const[] <db:emphasis>xpm</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPixmap</db:methodname>
<db:methodparam>
<db:type>const char *const[]</db:type>
<db:parameter>xpm</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap(const char *const[] xpm)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a pixmap from the given <db:code role="parameter">xpm</db:code> data, which must be a valid XPM image.</db:para>
<db:para>Errors are silently ignored.</db:para>
<db:para>Note that it's possible to squeeze the XPM variable a little bit by using an unusual declaration:</db:para>
<db:programlisting language="cpp">static const char * const start_xpm[] = {
    &quot;16 15 8 1&quot;,
    &quot;a c #cec6bd&quot;,
    // etc.
};
</db:programlisting>
<db:para>The extra <db:code>const</db:code> makes the entire definition read-only, which is slightly more efficient (for example, when the code is in a shared library) and ROMable when the application is to be stored in ROM.</db:para>
</db:section>
<db:section xml:id="QPixmap-5">
<db:title>QPixmap::QPixmap(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPixmap</db:methodname>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap(const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a pixmap that is a copy of the given <db:code role="parameter">pixmap</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#copy">copy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPixmap-6">
<db:title>QPixmap::QPixmap(QPixmap &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPixmap</db:methodname>
<db:methodparam>
<db:type>QPixmap &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap(QPixmap &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> instance from <db:code role="parameter">other</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#swap">swap</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#operator-eq-1">operator=</db:link>(QPixmap&amp;&amp;)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QPixmap">
<db:title>[virtual] QPixmap::~QPixmap()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPixmap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPixmap()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the pixmap.</db:para>
</db:section>
<db:section xml:id="cacheKey">
<db:title>qint64 QPixmap::cacheKey() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>cacheKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 cacheKey() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a number that identifies this <db:link xlink:href="qpixmap.xml">QPixmap</db:link>. Distinct <db:link xlink:href="qpixmap.xml">QPixmap</db:link> objects can only have the same cache key if they refer to the same contents.</db:para>
<db:para>The cacheKey() will change when the pixmap is altered.</db:para>
</db:section>
<db:section xml:id="convertFromImage">
<db:title>bool QPixmap::convertFromImage(const QImage &amp;<db:emphasis>image</db:emphasis>, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>convertFromImage</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool convertFromImage(const QImage &amp;image, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces this pixmap's data with the given <db:code role="parameter">image</db:code> using the specified <db:code role="parameter">flags</db:code> to control the conversion. The <db:code role="parameter">flags</db:code> argument is a bitwise-OR of the <db:link xlink:href="qt.xml#ImageConversionFlag-enum">Qt::ImageConversionFlags</db:link>. Passing 0 for <db:code role="parameter">flags</db:code> sets all the default options. Returns <db:code>true</db:code> if the result is that this pixmap is not null.</db:para>
<db:para>Note: this function was part of Qt 3 support in Qt 4.6 and earlier. It has been promoted to official API status in 4.7 to support updating the pixmap's image without creating a new <db:link xlink:href="qpixmap.xml">QPixmap</db:link> as <db:link xlink:href="qpixmap.xml#fromImage">fromImage</db:link>() would.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#fromImage">fromImage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copy">
<db:title>QPixmap QPixmap::copy(const QRect &amp;<db:emphasis>rectangle</db:emphasis> = QRect()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>copy</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rectangle</db:parameter>
<db:initializer>QRect()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap copy(const QRect &amp;rectangle) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a deep copy of the subset of the pixmap that is specified by the given <db:code role="parameter">rectangle</db:code>. For more information on deep copies, see the <db:link xlink:href="implicit-sharing.xml">Implicit Data Sharing</db:link> documentation.</db:para>
<db:para>If the given <db:code role="parameter">rectangle</db:code> is empty, the whole image is copied.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#operator-eq">operator=</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#QPixmap">QPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-transformations">Pixmap Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copy-1">
<db:title>QPixmap QPixmap::copy(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>copy</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap copy(int x, int y, int width, int height) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a deep copy of the subset of the pixmap that is specified by the rectangle <db:link xlink:href="qrect.xml">QRect</db:link>( <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>).</db:para>
</db:section>
<db:section xml:id="createHeuristicMask">
<db:title>QBitmap QPixmap::createHeuristicMask(bool <db:emphasis>clipTight</db:emphasis> = true) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBitmap</db:type>
<db:methodname>createHeuristicMask</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>clipTight</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitmap createHeuristicMask(bool clipTight) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns a heuristic mask for this pixmap.</db:para>
<db:para>The function works by selecting a color from one of the corners and then chipping away pixels of that color, starting at all the edges. If <db:code role="parameter">clipTight</db:code> is true (the default) the mask is just large enough to cover the pixels; otherwise, the mask is larger than the data pixels.</db:para>
<db:para>The mask may not be perfect but it should be reasonable, so you can do things such as the following:</db:para>
<db:programlisting language="cpp">QPixmap myPixmap;
myPixmap.setMask(myPixmap.createHeuristicMask());
</db:programlisting>
<db:para>This function is slow because it involves converting to/from a <db:link xlink:href="qimage.xml">QImage</db:link>, and non-trivial computations.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimage.xml#createHeuristicMask">QImage::createHeuristicMask</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#createMaskFromColor">createMaskFromColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createMaskFromColor">
<db:title>QBitmap QPixmap::createMaskFromColor(const QColor &amp;<db:emphasis>maskColor</db:emphasis>, Qt::MaskMode <db:emphasis>mode</db:emphasis> = Qt::MaskInColor) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBitmap</db:type>
<db:methodname>createMaskFromColor</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>maskColor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::MaskMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::MaskInColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitmap createMaskFromColor(const QColor &amp;maskColor, Qt::MaskMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns a mask for this pixmap based on the given <db:code role="parameter">maskColor</db:code>. If the <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#MaskMode-enum">Qt::MaskInColor</db:link>, all pixels matching the maskColor will be transparent. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#MaskMode-enum">Qt::MaskOutColor</db:link>, all pixels matching the maskColor will be opaque.</db:para>
<db:para>This function is slow because it involves converting to/from a <db:link xlink:href="qimage.xml">QImage</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#createHeuristicMask">createHeuristicMask</db:link>()</db:member>
<db:member><db:link xlink:href="qimage.xml#createMaskFromColor">QImage::createMaskFromColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultDepth">
<db:title>[static] int QPixmap::defaultDepth()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>defaultDepth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int defaultDepth()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default pixmap depth used by the application.</db:para>
<db:para>On all platforms the depth of the primary screen will be returned.</db:para>
<db:note>
<db:para><db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> must be created before calling this function.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#depth">depth</db:link>()</db:member>
<db:member><db:link xlink:href="qcolormap.xml#depth">QColormap::depth</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-information">Pixmap Information</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="depth">
<db:title>int QPixmap::depth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>depth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int depth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the depth of the pixmap.</db:para>
<db:para>The pixmap depth is also called bits per pixel (bpp) or bit planes of a pixmap. A null pixmap has depth 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#defaultDepth">defaultDepth</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-information">Pixmap Information</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="detach">
<db:title>void QPixmap::detach()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>detach</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void detach()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Detaches the pixmap from shared pixmap data.</db:para>
<db:para>A pixmap is automatically detached by Qt whenever its contents are about to change. This is done in almost all <db:link xlink:href="qpixmap.xml">QPixmap</db:link> member functions that modify the pixmap (<db:link xlink:href="qpixmap.xml#fill">fill</db:link>(), <db:link xlink:href="qpixmap.xml#fromImage">fromImage</db:link>(), <db:link xlink:href="qpixmap.xml#load">load</db:link>(), etc.), and in <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>() on a pixmap.</db:para>
<db:para>There are two exceptions in which detach() must be called explicitly, that is when calling the handle() or the x11PictureHandle() function (only available on X11). Otherwise, any modifications done using system calls, will be performed on the shared data.</db:para>
<db:para>The detach() function returns immediately if there is just a single reference or if the pixmap has not been initialized yet.</db:para>
</db:section>
<db:section xml:id="devicePixelRatio">
<db:title>qreal QPixmap::devicePixelRatio() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>devicePixelRatio</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal devicePixelRatio() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device pixel ratio for the pixmap. This is the ratio between <db:emphasis>device pixels</db:emphasis> and <db:emphasis>device independent pixels</db:emphasis>.</db:para>
<db:para>Use this function when calculating layout geometry based on the pixmap size: <db:link xlink:href="qsize.xml">QSize</db:link> layoutSize = image.<db:link xlink:href="qpixmap.xml#size">size</db:link>() / image.devicePixelRatio()</db:para>
<db:para>The default value is 1.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#setDevicePixelRatio">setDevicePixelRatio</db:link>()</db:member>
<db:member><db:link xlink:href="qimagereader.xml">QImageReader</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fill">
<db:title>void QPixmap::fill(const QColor &amp;<db:emphasis>color</db:emphasis> = Qt::white)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fill</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
<db:initializer>Qt::white</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fill(const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Fills the pixmap with the given <db:code role="parameter">color</db:code>.</db:para>
<db:para>The effect of this function is undefined when the pixmap is being painted on.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#pixmap-transformations">Pixmap Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromImage">
<db:title>[static] QPixmap QPixmap::fromImage(const QImage &amp;<db:emphasis>image</db:emphasis>, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>fromImage</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap fromImage(const QImage &amp;image, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the given <db:code role="parameter">image</db:code> to a pixmap using the specified <db:code role="parameter">flags</db:code> to control the conversion. The <db:code role="parameter">flags</db:code> argument is a bitwise-OR of the <db:link xlink:href="qt.xml#ImageConversionFlag-enum">Qt::ImageConversionFlags</db:link>. Passing 0 for <db:code role="parameter">flags</db:code> sets all the default options.</db:para>
<db:para>In case of monochrome and 8-bit images, the image is first converted to a 32-bit pixmap and then filled with the colors in the color table. If this is too expensive an operation, you can use <db:link xlink:href="qbitmap.xml#fromImage">QBitmap::fromImage</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#fromImageReader">fromImageReader</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#toImage">toImage</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-conversion">Pixmap Conversion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromImage-1">
<db:title>[static, since 5.3] QPixmap QPixmap::fromImage(QImage &amp;&amp;<db:emphasis>image</db:emphasis>, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>fromImage</db:methodname>
<db:methodparam>
<db:type>QImage &amp;&amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap fromImage(QImage &amp;&amp;image, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Converts the given <db:code role="parameter">image</db:code> to a pixmap without copying if possible.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="fromImageReader">
<db:title>[static] QPixmap QPixmap::fromImageReader(QImageReader *<db:emphasis>imageReader</db:emphasis>, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>fromImageReader</db:methodname>
<db:methodparam>
<db:type>QImageReader *</db:type>
<db:parameter>imageReader</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap fromImageReader(QImageReader *imageReader, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Create a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> from an image read directly from an <db:code role="parameter">imageReader</db:code>. The <db:code role="parameter">flags</db:code> argument is a bitwise-OR of the <db:link xlink:href="qt.xml#ImageConversionFlag-enum">Qt::ImageConversionFlags</db:link>. Passing 0 for <db:code role="parameter">flags</db:code> sets all the default options.</db:para>
<db:para>On some systems, reading an image directly to <db:link xlink:href="qpixmap.xml">QPixmap</db:link> can use less memory than reading a <db:link xlink:href="qimage.xml">QImage</db:link> to convert it to <db:link xlink:href="qpixmap.xml">QPixmap</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#fromImage">fromImage</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#toImage">toImage</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-conversion">Pixmap Conversion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasAlpha">
<db:title>bool QPixmap::hasAlpha() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasAlpha</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasAlpha() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this pixmap has an alpha channel, <db:emphasis>or</db:emphasis> has a mask, otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#hasAlphaChannel">hasAlphaChannel</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#mask">mask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasAlphaChannel">
<db:title>bool QPixmap::hasAlphaChannel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasAlphaChannel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasAlphaChannel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the pixmap has a format that respects the alpha channel, otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#hasAlpha">hasAlpha</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="height">
<db:title>int QPixmap::height() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>height</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int height() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the height of the pixmap.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-information">Pixmap Information</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QPixmap::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this is a null pixmap; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>A null pixmap has zero width, zero height and no contents. You cannot draw in a null pixmap.</db:para>
</db:section>
<db:section xml:id="isQBitmap">
<db:title>bool QPixmap::isQBitmap() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isQBitmap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isQBitmap() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this is a <db:link xlink:href="qbitmap.xml">QBitmap</db:link>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="load">
<db:title>bool QPixmap::load(const QString &amp;<db:emphasis>fileName</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = nullptr, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>format</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool load(const QString &amp;fileName, const char *format, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads a pixmap from the file with the given <db:code role="parameter">fileName</db:code>. Returns true if the pixmap was successfully loaded; otherwise invalidates the pixmap and returns <db:code>false</db:code>.</db:para>
<db:para>The loader attempts to read the pixmap using the specified <db:code role="parameter">format</db:code>. If the <db:code role="parameter">format</db:code> is not specified (which is the default), the loader probes the file for a header to guess the file format.</db:para>
<db:para>The file name can either refer to an actual file on disk or to one of the application's embedded resources. See the <db:link xlink:href="resources.xml">Resource System</db:link> overview for details on how to embed pixmaps and other resource files in the application's executable.</db:para>
<db:para>If the data needs to be modified to fit in a lower-resolution result (e.g. converting from 32-bit to 8-bit), use the <db:code role="parameter">flags</db:code> to control the conversion.</db:para>
<db:para>Note that QPixmaps are automatically added to the <db:link xlink:href="qpixmapcache.xml">QPixmapCache</db:link> when loaded from a file in main thread; the key used is internal and cannot be acquired.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#loadFromData">loadFromData</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#reading-and-writing-image-files">Reading and Writing Image Files</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadFromData">
<db:title>bool QPixmap::loadFromData(const uchar *<db:emphasis>data</db:emphasis>, uint <db:emphasis>len</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = nullptr, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>loadFromData</db:methodname>
<db:methodparam>
<db:type>const uchar *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>format</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool loadFromData(const uchar *data, uint len, const char *format, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads a pixmap from the <db:code role="parameter">len</db:code> first bytes of the given binary <db:code role="parameter">data</db:code>. Returns <db:code>true</db:code> if the pixmap was loaded successfully; otherwise invalidates the pixmap and returns <db:code>false</db:code>.</db:para>
<db:para>The loader attempts to read the pixmap using the specified <db:code role="parameter">format</db:code>. If the <db:code role="parameter">format</db:code> is not specified (which is the default), the loader probes the file for a header to guess the file format.</db:para>
<db:para>If the data needs to be modified to fit in a lower-resolution result (e.g. converting from 32-bit to 8-bit), use the <db:code role="parameter">flags</db:code> to control the conversion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#load">load</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#reading-and-writing-image-files">Reading and Writing Image Files</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadFromData-1">
<db:title>bool QPixmap::loadFromData(const QByteArray &amp;<db:emphasis>data</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = nullptr, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>loadFromData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>format</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool loadFromData(const QByteArray &amp;data, const char *format, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Loads a pixmap from the binary <db:code role="parameter">data</db:code> using the specified <db:code role="parameter">format</db:code> and conversion <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="mask">
<db:title>QBitmap QPixmap::mask() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBitmap</db:type>
<db:methodname>mask</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitmap mask() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Extracts a bitmap mask from the pixmap's alpha channel.</db:para>
<db:warning>
<db:para>This is potentially an expensive operation. The mask of the pixmap is extracted dynamically from the pixeldata.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#setMask">setMask</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-information">Pixmap Information</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rect">
<db:title>QRect QPixmap::rect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>rect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect rect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pixmap's enclosing rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#pixmap-information">Pixmap Information</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="save">
<db:title>bool QPixmap::save(const QString &amp;<db:emphasis>fileName</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = nullptr, int <db:emphasis>quality</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>save</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>format</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>quality</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool save(const QString &amp;fileName, const char *format, int quality) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Saves the pixmap to the file with the given <db:code role="parameter">fileName</db:code> using the specified image file <db:code role="parameter">format</db:code> and <db:code role="parameter">quality</db:code> factor. Returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The <db:code role="parameter">quality</db:code> factor must be in the range [0,100] or -1. Specify 0 to obtain small compressed files, 100 for large uncompressed files, and -1 to use the default settings.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is <db:code>nullptr</db:code>, an image format will be chosen from <db:code role="parameter">fileName</db:code>'s suffix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#reading-and-writing-image-files">Reading and Writing Image Files</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="save-1">
<db:title>bool QPixmap::save(QIODevice *<db:emphasis>device</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = nullptr, int <db:emphasis>quality</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>save</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>format</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>quality</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool save(QIODevice *device, const char *format, int quality) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function writes a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> to the given <db:code role="parameter">device</db:code> using the specified image file <db:code role="parameter">format</db:code> and <db:code role="parameter">quality</db:code> factor. This can be used, for example, to save a pixmap directly into a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>:</db:para>
<db:programlisting language="cpp">QPixmap pixmap;
QByteArray bytes;
QBuffer buffer(&amp;amp;bytes);
buffer.open(QIODevice::WriteOnly);
pixmap.save(&amp;amp;buffer, &quot;PNG&quot;); // writes pixmap into bytes in PNG format
</db:programlisting>
</db:section>
<db:section xml:id="scaled">
<db:title>QPixmap QPixmap::scaled(const QSize &amp;<db:emphasis>size</db:emphasis>, Qt::AspectRatioMode <db:emphasis>aspectRatioMode</db:emphasis> = Qt::IgnoreAspectRatio, Qt::TransformationMode <db:emphasis>transformMode</db:emphasis> = Qt::FastTransformation) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>scaled</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::AspectRatioMode</db:type>
<db:parameter>aspectRatioMode</db:parameter>
<db:initializer>Qt::IgnoreAspectRatio</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TransformationMode</db:type>
<db:parameter>transformMode</db:parameter>
<db:initializer>Qt::FastTransformation</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap scaled(const QSize &amp;size, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scales the pixmap to the given <db:code role="parameter">size</db:code>, using the aspect ratio and transformation modes specified by <db:code role="parameter">aspectRatioMode</db:code> and <db:code role="parameter">transformMode</db:code>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qimage-scaling.png"/>
</db:imageobject>
</db:mediaobject>
<db:itemizedlist>
<db:listitem>
<db:para>If <db:code role="parameter">aspectRatioMode</db:code> is <db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::IgnoreAspectRatio</db:link>, the pixmap is scaled to <db:code role="parameter">size</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">aspectRatioMode</db:code> is <db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::KeepAspectRatio</db:link>, the pixmap is scaled to a rectangle as large as possible inside <db:code role="parameter">size</db:code>, preserving the aspect ratio.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">aspectRatioMode</db:code> is <db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::KeepAspectRatioByExpanding</db:link>, the pixmap is scaled to a rectangle as small as possible outside <db:code role="parameter">size</db:code>, preserving the aspect ratio.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the given <db:code role="parameter">size</db:code> is empty, this function returns a null pixmap.</db:para>
<db:para>In some cases it can be more beneficial to draw the pixmap to a painter with a scale set rather than scaling the pixmap. This is the case when the painter is for instance based on OpenGL or when the scale factor changes rapidly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-transformations">Pixmap Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scaled-1">
<db:title>QPixmap QPixmap::scaled(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, Qt::AspectRatioMode <db:emphasis>aspectRatioMode</db:emphasis> = Qt::IgnoreAspectRatio, Qt::TransformationMode <db:emphasis>transformMode</db:emphasis> = Qt::FastTransformation) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>scaled</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::AspectRatioMode</db:type>
<db:parameter>aspectRatioMode</db:parameter>
<db:initializer>Qt::IgnoreAspectRatio</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TransformationMode</db:type>
<db:parameter>transformMode</db:parameter>
<db:initializer>Qt::FastTransformation</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap scaled(int width, int height, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a copy of the pixmap scaled to a rectangle with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code> according to the given <db:code role="parameter">aspectRatioMode</db:code> and <db:code role="parameter">transformMode</db:code>.</db:para>
<db:para>If either the <db:code role="parameter">width</db:code> or the <db:code role="parameter">height</db:code> is zero or negative, this function returns a null pixmap.</db:para>
</db:section>
<db:section xml:id="scaledToHeight">
<db:title>QPixmap QPixmap::scaledToHeight(int <db:emphasis>height</db:emphasis>, Qt::TransformationMode <db:emphasis>mode</db:emphasis> = Qt::FastTransformation) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>scaledToHeight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TransformationMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::FastTransformation</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap scaledToHeight(int height, Qt::TransformationMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a scaled copy of the image. The returned image is scaled to the given <db:code role="parameter">height</db:code> using the specified transformation <db:code role="parameter">mode</db:code>. The width of the pixmap is automatically calculated so that the aspect ratio of the pixmap is preserved.</db:para>
<db:para>If <db:code role="parameter">height</db:code> is 0 or negative, a null pixmap is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-transformations">Pixmap Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scaledToWidth">
<db:title>QPixmap QPixmap::scaledToWidth(int <db:emphasis>width</db:emphasis>, Qt::TransformationMode <db:emphasis>mode</db:emphasis> = Qt::FastTransformation) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>scaledToWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TransformationMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::FastTransformation</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap scaledToWidth(int width, Qt::TransformationMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a scaled copy of the image. The returned image is scaled to the given <db:code role="parameter">width</db:code> using the specified transformation <db:code role="parameter">mode</db:code>. The height of the pixmap is automatically calculated so that the aspect ratio of the pixmap is preserved.</db:para>
<db:para>If <db:code role="parameter">width</db:code> is 0 or negative, a null pixmap is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-transformations">Pixmap Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scroll">
<db:title>void QPixmap::scroll(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, QRegion *<db:emphasis>exposed</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scroll</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRegion *</db:type>
<db:parameter>exposed</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scroll(int dx, int dy, int x, int y, int width, int height, QRegion *exposed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function is equivalent to calling QPixmap::scroll(<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>, <db:link xlink:href="qrect.xml">QRect</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>), <db:code role="parameter">exposed</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#scroll">QWidget::scroll</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#scroll">QGraphicsItem::scroll</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scroll-1">
<db:title>void QPixmap::scroll(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>, QRegion *<db:emphasis>exposed</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scroll</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRegion *</db:type>
<db:parameter>exposed</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void scroll(int dx, int dy, const QRect &amp;rect, QRegion *exposed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scrolls the area <db:code role="parameter">rect</db:code> of this pixmap by (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>). The exposed region is left unchanged. You can optionally pass a pointer to an empty <db:link xlink:href="qregion.xml">QRegion</db:link> to get the region that is <db:code role="parameter">exposed</db:code> by the scroll operation.</db:para>
<db:programlisting language="cpp">QPixmap pixmap(&quot;background.png&quot;);
QRegion exposed;
pixmap.scroll(10, 10, pixmap.rect(), &amp;amp;exposed);
</db:programlisting>
<db:para>You cannot scroll while there is an active painter on the pixmap.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#scroll">QWidget::scroll</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#scroll">QGraphicsItem::scroll</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevicePixelRatio">
<db:title>void QPixmap::setDevicePixelRatio(qreal <db:emphasis>scaleFactor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDevicePixelRatio</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>scaleFactor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDevicePixelRatio(qreal scaleFactor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the device pixel ratio for the pixmap. This is the ratio between image pixels and device-independent pixels.</db:para>
<db:para>The default <db:code role="parameter">scaleFactor</db:code> is 1.0. Setting it to something else has two effects:</db:para>
<db:para>QPainters that are opened on the pixmap will be scaled. For example, painting on a 200x200 image if with a ratio of 2.0 will result in effective (device-independent) painting bounds of 100x100.</db:para>
<db:para>Code paths in Qt that calculate layout geometry based on the pixmap size will take the ratio into account: <db:link xlink:href="qsize.xml">QSize</db:link> layoutSize = pixmap.<db:link xlink:href="qpixmap.xml#size">size</db:link>() / pixmap.<db:link xlink:href="qpixmap.xml#devicePixelRatio">devicePixelRatio</db:link>() The net effect of this is that the pixmap is displayed as high-DPI pixmap rather than a large pixmap (see <db:link xlink:href="qpainter.xml#drawing-high-resolution-versions-of-pixmaps-and-images">Drawing High Resolution Versions of Pixmaps and Images</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#devicePixelRatio">devicePixelRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMask">
<db:title>void QPixmap::setMask(const QBitmap &amp;<db:emphasis>mask</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMask</db:methodname>
<db:methodparam>
<db:type>const QBitmap &amp;</db:type>
<db:parameter>mask</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMask(const QBitmap &amp;mask)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a mask bitmap.</db:para>
<db:para>This function merges the <db:code role="parameter">mask</db:code> with the pixmap's alpha channel. A pixel value of 1 on the mask means the pixmap's pixel is unchanged; a value of 0 means the pixel is transparent. The mask must have the same size as this pixmap.</db:para>
<db:para>Setting a null mask resets the mask, leaving the previously transparent pixels black. The effect of this function is undefined when the pixmap is being painted on.</db:para>
<db:warning>
<db:para>This is potentially an expensive operation.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#mask">mask</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-transformations">Pixmap Transformations</db:link></db:member>
<db:member><db:link xlink:href="qbitmap.xml">QBitmap</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>QSize QPixmap::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the pixmap.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#width">width</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-information">Pixmap Information</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QPixmap::swap(QPixmap &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QPixmap &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QPixmap &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps pixmap <db:code role="parameter">other</db:code> with this pixmap. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="toImage">
<db:title>QImage QPixmap::toImage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QImage</db:type>
<db:methodname>toImage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage toImage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the pixmap to a <db:link xlink:href="qimage.xml">QImage</db:link>. Returns a null image if the conversion fails.</db:para>
<db:para>If the pixmap has 1-bit depth, the returned image will also be 1 bit deep. Images with more bits will be returned in a format closely represents the underlying system. Usually this will be <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_ARGB32_Premultiplied</db:link> for pixmaps with an alpha and <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_RGB32</db:link> or <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_RGB16</db:link> for pixmaps without alpha.</db:para>
<db:para>Note that for the moment, alpha masks on monochrome images are ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#fromImage">fromImage</db:link>()</db:member>
<db:member><db:link xlink:href="qimage.xml#image-formats">Image Formats</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transformed">
<db:title>QPixmap QPixmap::transformed(const QTransform &amp;<db:emphasis>transform</db:emphasis>, Qt::TransformationMode <db:emphasis>mode</db:emphasis> = Qt::FastTransformation) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>transformed</db:methodname>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>transform</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TransformationMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Qt::FastTransformation</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap transformed(const QTransform &amp;transform, Qt::TransformationMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of the pixmap that is transformed using the given transformation <db:code role="parameter">transform</db:code> and transformation <db:code role="parameter">mode</db:code>. The original pixmap is not changed.</db:para>
<db:para>The transformation <db:code role="parameter">transform</db:code> is internally adjusted to compensate for unwanted translation; i.e. the pixmap produced is the smallest pixmap that contains all the transformed points of the original pixmap. Use the <db:link xlink:href="qpixmap.xml#trueMatrix">trueMatrix</db:link>() function to retrieve the actual matrix used for transforming the pixmap.</db:para>
<db:para>This function is slow because it involves transformation to a <db:link xlink:href="qimage.xml">QImage</db:link>, non-trivial computations and a transformation back to a <db:link xlink:href="qpixmap.xml">QPixmap</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#trueMatrix">trueMatrix</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-transformations">Pixmap Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="trueMatrix">
<db:title>[static] QTransform QPixmap::trueMatrix(const QTransform &amp;<db:emphasis>matrix</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>trueMatrix</db:methodname>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform trueMatrix(const QTransform &amp;matrix, int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the actual matrix used for transforming a pixmap with the given <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code> and <db:code role="parameter">matrix</db:code>.</db:para>
<db:para>When transforming a pixmap using the <db:link xlink:href="qpixmap.xml#transformed">transformed</db:link>() function, the transformation matrix is internally adjusted to compensate for unwanted translation, i.e. <db:link xlink:href="qpixmap.xml#transformed">transformed</db:link>() returns the smallest pixmap containing all transformed points of the original pixmap. This function returns the modified matrix, which maps points correctly from the original pixmap into the new pixmap.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#transformed">transformed</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-transformations">Pixmap Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width">
<db:title>int QPixmap::width() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>width</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int width() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of the pixmap.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#pixmap-information">Pixmap Information</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QPixmap::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pixmap as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-not">
<db:title>bool QPixmap::operator!() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this is a null pixmap; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QPixmap &amp;QPixmap::operator=(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPixmap &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap &amp; operator=(const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the given <db:code role="parameter">pixmap</db:code> to this pixmap and returns a reference to this pixmap.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#copy">copy</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#QPixmap">QPixmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[since 5.2] QPixmap &amp;QPixmap::operator=(QPixmap &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPixmap &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QPixmap &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap &amp; operator=(QPixmap &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qpixmap.xml">QPixmap</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the given <db:code role="parameter">pixmap</db:code> to the given <db:code role="parameter">stream</db:code> as a PNG image. Note that writing the stream to a file will not produce a valid image file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#save">QPixmap::save</db:link>()</db:member>
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads an image from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">pixmap</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#load">QPixmap::load</db:link>()</db:member>
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
