<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLocalServer Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlocalserver.xml">QLocalServer</db:link> class provides a local socket based server.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLocalServer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class makes it possible to accept incoming local socket connections.</db:para>
<db:para>Call <db:link xlink:href="qlocalserver.xml#listen">listen</db:link>() to have the server start listening for incoming connections on a specified key. The <db:link xlink:href="qlocalserver.xml#newConnection">newConnection</db:link>() signal is then emitted each time a client connects to the server.</db:para>
<db:para>Call <db:link xlink:href="qlocalserver.xml#nextPendingConnection">nextPendingConnection</db:link>() to accept the pending connection as a connected <db:link xlink:href="qlocalsocket.xml">QLocalSocket</db:link>. The function returns a pointer to a <db:link xlink:href="qlocalsocket.xml">QLocalSocket</db:link> that can be used for communicating with the client.</db:para>
<db:para>If an error occurs, <db:link xlink:href="qlocalserver.xml#serverError">serverError</db:link>() returns the type of error, and <db:link xlink:href="qlocalserver.xml#errorString">errorString</db:link>() can be called to get a human readable description of what happened.</db:para>
<db:para>When listening for connections, the name which the server is listening on is available through <db:link xlink:href="qlocalserver.xml#serverName">serverName</db:link>().</db:para>
<db:para>Calling <db:link xlink:href="qlocalserver.xml#close">close</db:link>() makes <db:link xlink:href="qlocalserver.xml">QLocalServer</db:link> stop listening for incoming connections.</db:para>
<db:para>Although <db:link xlink:href="qlocalserver.xml">QLocalServer</db:link> is designed for use with an event loop, it's possible to use it without one. In that case, you must use <db:link xlink:href="qlocalserver.xml#waitForNewConnection">waitForNewConnection</db:link>(), which blocks until either a connection is available or a timeout expires.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalsocket.xml">QLocalSocket</db:link></db:member>
<db:member><db:link xlink:href="qtcpserver.xml">QTcpServer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SocketOption-enum">
<db:title>enum QLocalServer::SocketOption</db:title>
<db:bridgehead renderas="sect2">flags QLocalServer::SocketOptions</db:bridgehead>
<db:para>This enum describes the possible options that can be used to create the socket. This changes the access permissions on platforms (Linux, Windows) that support access permissions on the socket. Both GroupAccess and OtherAccess may vary slightly in meanings depending on the platform. On Linux and Android it is possible to use sockets with abstract addresses; socket permissions have no meaning for such sockets.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlocalserver.xml">QLocalServer</db:link></db:emphasis>::NoOptions</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>No access restrictions have been set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlocalserver.xml">QLocalServer</db:link></db:emphasis>::UserAccessOption</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Access is restricted to the same user as the process that created the socket.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlocalserver.xml">QLocalServer</db:link></db:emphasis>::GroupAccessOption</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>Access is restricted to the same group but not the user that created the socket on Linux. Access is restricted to the primary group of the process on Windows</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlocalserver.xml">QLocalServer</db:link></db:emphasis>::OtherAccessOption</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>Access is available to everyone but the user and group that created the socket on Linux. Access is available to everyone on Windows.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlocalserver.xml">QLocalServer</db:link></db:emphasis>::WorldAccessOption</db:code></db:para>
</db:td>
<db:td><db:code>0x7</db:code></db:td>
<db:td>
<db:para>No access restrictions.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlocalserver.xml">QLocalServer</db:link></db:emphasis>::AbstractNamespaceOption</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>The listening socket will be created in the abstract namespace. This flag is specific to Linux. In case of other platforms, for the sake of code portability, this flag is equivalent to WorldAccessOption.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>SocketOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;SocketOption&gt;. </db:code>It stores an OR combination of <db:code>SocketOption</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#socketOptions">socketOptions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="socketOptions-prop">
<db:title>[bindable] socketOptions : SocketOptions</db:title>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the socket options that control how the socket operates.</db:para>
<db:para>For example, the socket may restrict access to what user ids can connect to the socket.</db:para>
<db:para>These options must be set before <db:link xlink:href="qlocalserver.xml#listen">listen</db:link>() is called.</db:para>
<db:para>In some cases, such as with Unix domain sockets on Linux, the access to the socket will be determined by file system permissions, and are created based on the umask. Setting the access flags will override this and will restrict or permit access as specified.</db:para>
<db:para>Other Unix-based operating systems, such as macOS, do not honor file permissions for Unix domain sockets and by default have WorldAccess and these permission flags will have no effect.</db:para>
<db:para>On Windows, <db:link xlink:href="qlocalserver.xml#SocketOption-enum">UserAccessOption</db:link> is sufficient to allow a non elevated process to connect to a local server created by an elevated process run by the same user. <db:link xlink:href="qlocalserver.xml#SocketOption-enum">GroupAccessOption</db:link> refers to the primary group of the process (see TokenPrimaryGroup in the Windows documentation). <db:link xlink:href="qlocalserver.xml#SocketOption-enum">OtherAccessOption</db:link> refers to the well known &quot;Everyone&quot; group.</db:para>
<db:para>On Linux platforms it is possible to create a socket in the abstract namespace, which is independent of the filesystem. Using this kind of socket implies ignoring permission options. On other platforms <db:link xlink:href="qlocalserver.xml#SocketOption-enum">AbstractNamespaceOption</db:link> is equivalent to <db:link xlink:href="qlocalserver.xml#SocketOption-enum">WorldAccessOption</db:link>.</db:para>
<db:para>By default none of the flags are set, access permissions are the platform default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#listen">listen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QLocalServer">
<db:title>[explicit] QLocalServer::QLocalServer(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Create a new local socket server with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#listen">listen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QLocalServer">
<db:title>[virtual noexcept] QLocalServer::~QLocalServer()</db:title>
<db:para>Destroys the <db:link xlink:href="qlocalserver.xml">QLocalServer</db:link> object. If the server is listening for connections, it is automatically closed.</db:para>
<db:para>Any client QLocalSockets that are still connected must either disconnect or be reparented before the server is deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addPendingConnection">
<db:title>[protected, since 6.8] void QLocalServer::addPendingConnection(QLocalSocket *<db:emphasis>socket</db:emphasis>)</db:title>
<db:para>This function is called by <db:link xlink:href="qlocalserver.xml#incomingConnection">QLocalServer::incomingConnection</db:link>() to add the <db:code role="parameter">socket</db:code> to the list of pending incoming connections.</db:para>
<db:note>
<db:para>Don't forget to call this member from reimplemented <db:link xlink:href="qlocalserver.xml#incomingConnection">incomingConnection</db:link>() if you do not want to break the Pending Connections mechanism. This function emits the <db:link xlink:href="qlocalserver.xml#newConnection">newConnection</db:link>() signal after the socket has been added.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#incomingConnection">incomingConnection</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#newConnection">newConnection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="close">
<db:title>void QLocalServer::close()</db:title>
<db:para>Stop listening for incoming connections. Existing connections are not affected, but any new connections will be refused.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#isListening">isListening</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#listen">listen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QLocalServer::errorString() const</db:title>
<db:para>Returns the human-readable message appropriate to the current error reported by <db:link xlink:href="qlocalserver.xml#serverError">serverError</db:link>(). If no suitable string is available, an empty string is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#serverError">serverError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fullServerName">
<db:title>QString QLocalServer::fullServerName() const</db:title>
<db:para>Returns the full path that the server is listening on.</db:para>
<db:para>Note: This is platform specific</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#listen">listen</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#serverName">serverName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasPendingConnections">
<db:title>[virtual] bool QLocalServer::hasPendingConnections() const</db:title>
<db:para>Returns true if the server has a pending connection; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#nextPendingConnection">nextPendingConnection</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#setMaxPendingConnections">setMaxPendingConnections</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="incomingConnection">
<db:title>[virtual protected] void QLocalServer::incomingConnection(quintptr <db:emphasis>socketDescriptor</db:emphasis>)</db:title>
<db:para>This virtual function is called by <db:link xlink:href="qlocalserver.xml">QLocalServer</db:link> when a new connection is available. <db:code role="parameter">socketDescriptor</db:code> is the native socket descriptor for the accepted connection.</db:para>
<db:para>The base implementation creates a <db:link xlink:href="qlocalsocket.xml">QLocalSocket</db:link>, sets the socket descriptor and then stores the <db:link xlink:href="qlocalsocket.xml">QLocalSocket</db:link> in an internal list of pending connections. Finally <db:link xlink:href="qlocalserver.xml#newConnection">newConnection</db:link>() is emitted.</db:para>
<db:para>Reimplement this function to alter the server's behavior when a connection is available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#newConnection">newConnection</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#nextPendingConnection">nextPendingConnection</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalsocket.xml#setSocketDescriptor">QLocalSocket::setSocketDescriptor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isListening">
<db:title>bool QLocalServer::isListening() const</db:title>
<db:para>Returns true if the server is listening for incoming connections otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#listen">listen</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="listen">
<db:title>bool QLocalServer::listen(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Tells the server to listen for incoming connections on <db:code role="parameter">name</db:code>. If the server is currently listening then it will return false. Return true on success otherwise false.</db:para>
<db:para><db:code role="parameter">name</db:code> can be a single name and <db:link xlink:href="qlocalserver.xml">QLocalServer</db:link> will determine the correct platform specific path. <db:link xlink:href="qlocalserver.xml#serverName">serverName</db:link>() will return the name that is passed into listen.</db:para>
<db:para>Usually you would just pass in a name like &quot;foo&quot;, but on Unix this could also be a path such as &quot;/tmp/foo&quot; and on Windows this could be a pipe path such as &quot;\\.\pipe\foo&quot;</db:para>
<db:note>
<db:para>On Unix if the server crashes without closing listen will fail with AddressInUseError. To create a new server the file should be removed. On Windows two local servers can listen to the same pipe at the same time, but any connections will go to one of the server.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#serverName">serverName</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#isListening">isListening</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="listen-1">
<db:title>bool QLocalServer::listen(qintptr <db:emphasis>socketDescriptor</db:emphasis>)</db:title>
<db:para>Instructs the server to listen for incoming connections on <db:code role="parameter">socketDescriptor</db:code>. The property returns false if the server is currently listening. It returns true on success; otherwise, it returns false. The socket must be ready to accept new connections with no extra platform-specific functions called. The socket is set into non-blocking mode.</db:para>
<db:para><db:link xlink:href="qlocalserver.xml#serverName">serverName</db:link>(), <db:link xlink:href="qlocalserver.xml#fullServerName">fullServerName</db:link>() may return a string with a name if this option is supported by the platform; otherwise, they return an empty <db:link xlink:href="qstring.xml">QString</db:link>. In particular, the addresses of sockets in the abstract namespace supported by Linux will not yield useful names if they contain unprintable characters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#isListening">isListening</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="listenBacklogSize">
<db:title>[since 6.3] int QLocalServer::listenBacklogSize() const</db:title>
<db:para>Returns the backlog queue size of to be accepted connections.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#setListenBacklogSize">setListenBacklogSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maxPendingConnections">
<db:title>int QLocalServer::maxPendingConnections() const</db:title>
<db:para>Returns the maximum number of pending accepted connections. The default is 30.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#setMaxPendingConnections">setMaxPendingConnections</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#hasPendingConnections">hasPendingConnections</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="newConnection">
<db:title>void QLocalServer::newConnection()</db:title>
<db:para>This signal is emitted every time a new connection is available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#hasPendingConnections">hasPendingConnections</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#nextPendingConnection">nextPendingConnection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextPendingConnection">
<db:title>[virtual] QLocalSocket *QLocalServer::nextPendingConnection()</db:title>
<db:para>Returns the next pending connection as a connected <db:link xlink:href="qlocalsocket.xml">QLocalSocket</db:link> object.</db:para>
<db:para>The socket is created as a child of the server, which means that it is automatically deleted when the <db:link xlink:href="qlocalserver.xml">QLocalServer</db:link> object is destroyed. It is still a good idea to delete the object explicitly when you are done with it, to avoid wasting memory.</db:para>
<db:para>nullptr is returned if this function is called when there are no pending connections.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#hasPendingConnections">hasPendingConnections</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#newConnection">newConnection</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#incomingConnection">incomingConnection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeServer">
<db:title>[static] bool QLocalServer::removeServer(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Removes any server instance that might cause a call to <db:link xlink:href="qlocalserver.xml#listen">listen</db:link>() to fail and returns true if successful; otherwise returns false. This function is meant to recover from a crash, when the previous server instance has not been cleaned up.</db:para>
<db:para>On Windows, this function does nothing; on Unix, it removes the socket file given by <db:code role="parameter">name</db:code>.</db:para>
<db:warning>
<db:para>Be careful to avoid removing sockets of running instances.</db:para>
</db:warning>
</db:section>
<db:section xml:id="serverError">
<db:title>QAbstractSocket::SocketError QLocalServer::serverError() const</db:title>
<db:para>Returns the type of error that occurred last or <db:link xlink:href="qdtls.xml#QDtlsError-enum">NoError</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serverName">
<db:title>QString QLocalServer::serverName() const</db:title>
<db:para>Returns the server name if the server is listening for connections; otherwise returns QString()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#listen">listen</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#fullServerName">fullServerName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setListenBacklogSize">
<db:title>[since 6.3] void QLocalServer::setListenBacklogSize(int <db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the backlog queue size of to be accepted connections to <db:code role="parameter">size</db:code>. The operating system might reduce or ignore this value. By default, the queue size is 50.</db:para>
<db:note>
<db:para>This property must be set prior to calling <db:link xlink:href="qlocalserver.xml#listen">listen</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#listenBacklogSize">listenBacklogSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaxPendingConnections">
<db:title>void QLocalServer::setMaxPendingConnections(int <db:emphasis>numConnections</db:emphasis>)</db:title>
<db:para>Sets the maximum number of pending accepted connections to <db:code role="parameter">numConnections</db:code>. <db:link xlink:href="qlocalserver.xml">QLocalServer</db:link> will accept no more than <db:code role="parameter">numConnections</db:code> incoming connections before <db:link xlink:href="qlocalserver.xml#nextPendingConnection">nextPendingConnection</db:link>() is called.</db:para>
<db:para>Note: Even though <db:link xlink:href="qlocalserver.xml">QLocalServer</db:link> will stop accepting new connections after it has reached its maximum number of pending connections, the operating system may still keep them in queue which will result in clients signaling that it is connected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#maxPendingConnections">maxPendingConnections</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#hasPendingConnections">hasPendingConnections</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="socketDescriptor">
<db:title>qintptr QLocalServer::socketDescriptor() const</db:title>
<db:para>Returns the native socket descriptor the server uses to listen for incoming instructions, or -1 if the server is not listening.</db:para>
<db:para>The type of the descriptor depends on the platform:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>On Windows, the returned value is a <db:link xlink:href="https://learn.microsoft.com/en-us/windows/win32/winsock/socket-handles-2">Winsock 2 Socket Handle</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>On INTEGRITY, the returned value is the <db:link xlink:href="qtcpserver.xml">QTcpServer</db:link> socket descriptor and the type is defined by <db:link xlink:href="qtcpserver.xml#socketDescriptor">socketDescriptor</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>On all other UNIX-like operating systems, the type is a file descriptor representing a listening socket.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#listen">listen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="socketOptions">
<db:title>QLocalServer::SocketOptions QLocalServer::socketOptions() const</db:title>
<db:para>Returns the socket options set on the socket.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qlocalserver.xml#socketOptions-prop">socketOptions</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#socketOptions-prop">setSocketOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForNewConnection">
<db:title>bool QLocalServer::waitForNewConnection(int <db:emphasis>msec</db:emphasis> = 0, bool *<db:emphasis>timedOut</db:emphasis> = nullptr)</db:title>
<db:para>Waits for at most <db:code role="parameter">msec</db:code> milliseconds or until an incoming connection is available. Returns true if a connection is available; otherwise returns false. If the operation timed out and <db:code role="parameter">timedOut</db:code> is not nullptr, *timedOut will be set to true.</db:para>
<db:para>This is a blocking function call. Its use is ill-advised in a single-threaded GUI application, since the whole application will stop responding until the function returns. waitForNewConnection() is mostly useful when there is no event loop available.</db:para>
<db:para>The non-blocking alternative is to connect to the <db:link xlink:href="qlocalserver.xml#newConnection">newConnection</db:link>() signal.</db:para>
<db:para>If msec is -1, this function will not time out.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocalserver.xml#hasPendingConnections">hasPendingConnections</db:link>()</db:member>
<db:member><db:link xlink:href="qlocalserver.xml#nextPendingConnection">nextPendingConnection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
