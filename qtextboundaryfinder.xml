<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextBoundaryFinder Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> class provides a way of finding Unicode text boundaries in a string.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextBoundaryFinder</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextBoundaryFinder is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> allows to find Unicode text boundaries in a string, accordingly to the Unicode text boundary specification (see <db:link xlink:href="https://www.unicode.org/reports/tr14/">Unicode Standard Annex #14</db:link> and <db:link xlink:href="https://www.unicode.org/reports/tr29/">Unicode Standard Annex #29</db:link>).</db:para>
<db:para><db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> can operate on a <db:link xlink:href="qstring.xml">QString</db:link> in four possible modes depending on the value of <db:code role="parameter">BoundaryType</db:code>.</db:para>
<db:para>Units of Unicode characters that make up what the user thinks of as a character or basic unit of the language are here called Grapheme clusters. The two unicode characters 'A' + diaeresis do for example form one grapheme cluster as the user thinks of them as one character, yet it is in this case represented by two unicode code points (see <db:link xlink:href="https://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries">https://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries</db:link>).</db:para>
<db:para>Word boundaries are there to locate the start and end of what a language considers to be a word (see <db:link xlink:href="https://www.unicode.org/reports/tr29/#Word_Boundaries">https://www.unicode.org/reports/tr29/#Word_Boundaries</db:link>).</db:para>
<db:para>Line break boundaries give possible places where a line break might happen and sentence boundaries will show the beginning and end of whole sentences (see <db:link xlink:href="https://www.unicode.org/reports/tr29/#Sentence_Boundaries">https://www.unicode.org/reports/tr29/#Sentence_Boundaries</db:link> and <db:link xlink:href="https://www.unicode.org/reports/tr14/">https://www.unicode.org/reports/tr14/</db:link>).</db:para>
<db:para>The first position in a string is always a valid boundary and refers to the position before the first character. The last position at the length of the string is also valid and refers to the position after the last character.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="BoundaryReason-enum">
<db:title>enum QTextBoundaryFinder::BoundaryReason</db:title>
<db:bridgehead renderas="sect2">flags QTextBoundaryFinder::BoundaryReasons</db:bridgehead>
<db:enumsynopsis>
<db:enumname>BoundaryReason</db:enumname>
<db:enumitem>
<db:enumidentifier>NotAtBoundary</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BreakOpportunity</db:enumidentifier>
<db:enumvalue>0x1f</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StartOfItem</db:enumidentifier>
<db:enumvalue>0x20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EndOfItem</db:enumidentifier>
<db:enumvalue>0x40</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MandatoryBreak</db:enumidentifier>
<db:enumvalue>0x80</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SoftHyphen</db:enumidentifier>
<db:enumvalue>0x100</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QTextBoundaryFinder::BoundaryReasons</db:typedefname>
</db:typedefsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link></db:emphasis>::NotAtBoundary</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The boundary finder is not at a boundary position.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link></db:emphasis>::BreakOpportunity</db:code></db:para>
</db:td>
<db:td><db:code>0x1f</db:code></db:td>
<db:td>
<db:para>The boundary finder is at a break opportunity position. Such a break opportunity might also be an item boundary (either StartOfItem, EndOfItem, or combination of both), a mandatory line break, or a soft hyphen.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link></db:emphasis>::StartOfItem (since Qt 5.0)</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>The boundary finder is at the start of a grapheme, a word, a sentence, or a line.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link></db:emphasis>::EndOfItem (since Qt 5.0)</db:code></db:para>
</db:td>
<db:td><db:code>0x40</db:code></db:td>
<db:td>
<db:para>The boundary finder is at the end of a grapheme, a word, a sentence, or a line.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link></db:emphasis>::MandatoryBreak (since Qt 5.0)</db:code></db:para>
</db:td>
<db:td><db:code>0x80</db:code></db:td>
<db:td>
<db:para>The boundary finder is at the end of line (can occur for a Line boundary type only).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link></db:emphasis>::SoftHyphen</db:code></db:para>
</db:td>
<db:td><db:code>0x100</db:code></db:td>
<db:td>
<db:para>The boundary finder is at the soft hyphen (can occur for a Line boundary type only).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>BoundaryReasons</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;BoundaryReason&gt;. </db:code>It stores an OR combination of <db:code>BoundaryReason</db:code> values.</db:para>
</db:section>
<db:section xml:id="BoundaryType-enum">
<db:title>enum QTextBoundaryFinder::BoundaryType</db:title>
<db:enumsynopsis>
<db:enumname>BoundaryType</db:enumname>
<db:enumitem>
<db:enumidentifier>Grapheme</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Word</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sentence</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Line</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link></db:emphasis>::Grapheme</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Finds a grapheme which is the smallest boundary. It including letters, punctuation marks, numerals and more.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link></db:emphasis>::Word</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Finds a word.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link></db:emphasis>::Line</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Finds possible positions for breaking the text into multiple lines.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link></db:emphasis>::Sentence</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Finds sentence boundaries. These include periods, question marks etc.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextBoundaryFinder">
<db:title>QTextBoundaryFinder::QTextBoundaryFinder()</db:title>
<db:constructorsynopsis>
<db:methodname>QTextBoundaryFinder</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBoundaryFinder()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an invalid <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> object.</db:para>
</db:section>
<db:section xml:id="QTextBoundaryFinder-2">
<db:title>QTextBoundaryFinder::QTextBoundaryFinder(QTextBoundaryFinder::BoundaryType <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>string</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextBoundaryFinder</db:methodname>
<db:methodparam>
<db:type>QTextBoundaryFinder::BoundaryType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBoundaryFinder(QTextBoundaryFinder::BoundaryType type, const QString &amp;string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> object of <db:code role="parameter">type</db:code> operating on <db:code role="parameter">string</db:code>.</db:para>
</db:section>
<db:section xml:id="QTextBoundaryFinder-3">
<db:title>QTextBoundaryFinder::QTextBoundaryFinder(QTextBoundaryFinder::BoundaryType <db:emphasis>type</db:emphasis>, const QChar *<db:emphasis>chars</db:emphasis>, qsizetype <db:emphasis>length</db:emphasis>, unsigned char *<db:emphasis>buffer</db:emphasis> = nullptr, qsizetype <db:emphasis>bufferSize</db:emphasis> = 0)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextBoundaryFinder</db:methodname>
<db:methodparam>
<db:type>QTextBoundaryFinder::BoundaryType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>chars</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>unsigned char *</db:type>
<db:parameter>buffer</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>bufferSize</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBoundaryFinder(QTextBoundaryFinder::BoundaryType type, const QChar *chars, qsizetype length, unsigned char *buffer, qsizetype bufferSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The same as <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link>(type, <db:link xlink:href="qstringview.xml">QStringView</db:link>(chars, length), buffer, bufferSize).</db:para>
</db:section>
<db:section xml:id="QTextBoundaryFinder-4">
<db:title>[since 6.0] QTextBoundaryFinder::QTextBoundaryFinder(QTextBoundaryFinder::BoundaryType <db:emphasis>type</db:emphasis>, QStringView <db:emphasis>string</db:emphasis>, unsigned char *<db:emphasis>buffer</db:emphasis> = nullptr, qsizetype <db:emphasis>bufferSize</db:emphasis> = 0)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextBoundaryFinder</db:methodname>
<db:methodparam>
<db:type>QTextBoundaryFinder::BoundaryType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>unsigned char *</db:type>
<db:parameter>buffer</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>bufferSize</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBoundaryFinder(QTextBoundaryFinder::BoundaryType type, QStringView string, unsigned char *buffer, qsizetype bufferSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> object of <db:code role="parameter">type</db:code> operating on <db:code role="parameter">string</db:code>.</db:para>
<db:para><db:code role="parameter">buffer</db:code> is an optional working buffer of size <db:code role="parameter">bufferSize</db:code> you can pass to the <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link>. If the buffer is large enough to hold the working data required (bufferSize &gt;= length + 1), it will use this instead of allocating its own buffer.</db:para>
<db:warning>
<db:para><db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> does not create a copy of <db:code role="parameter">string</db:code>. It is the application programmer's responsibility to ensure the array is allocated for as long as the <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> object stays alive. The same applies to <db:code role="parameter">buffer</db:code>.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="QTextBoundaryFinder-1">
<db:title>QTextBoundaryFinder::QTextBoundaryFinder(const QTextBoundaryFinder &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextBoundaryFinder</db:methodname>
<db:methodparam>
<db:type>const QTextBoundaryFinder &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBoundaryFinder(const QTextBoundaryFinder &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Copies the <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> object, <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTextBoundaryFinder">
<db:title>QTextBoundaryFinder::~QTextBoundaryFinder()</db:title>
<db:destructorsynopsis>
<db:methodname>~QTextBoundaryFinder</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTextBoundaryFinder()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> object.</db:para>
</db:section>
<db:section xml:id="boundaryReasons">
<db:title>QTextBoundaryFinder::BoundaryReasons QTextBoundaryFinder::boundaryReasons() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextBoundaryFinder::BoundaryReasons</db:type>
<db:methodname>boundaryReasons</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBoundaryFinder::BoundaryReasons boundaryReasons() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the reasons for the boundary finder to have chosen the current position as a boundary.</db:para>
</db:section>
<db:section xml:id="isAtBoundary">
<db:title>bool QTextBoundaryFinder::isAtBoundary() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAtBoundary</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAtBoundary() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the object's <db:link xlink:href="qtextboundaryfinder.xml#position">position</db:link>() is currently at a valid text boundary.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QTextBoundaryFinder::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the text boundary finder is valid; otherwise returns false. A default <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> is invalid.</db:para>
</db:section>
<db:section xml:id="position">
<db:title>qsizetype QTextBoundaryFinder::position() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>position</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype position() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current position of the <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link>.</db:para>
<db:para>The range is from 0 (the beginning of the string) to the length of the string inclusive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextboundaryfinder.xml#setPosition">setPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPosition">
<db:title>void QTextBoundaryFinder::setPosition(qsizetype <db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPosition</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPosition(qsizetype position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current position of the <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> to <db:code role="parameter">position</db:code>.</db:para>
<db:para>If <db:code role="parameter">position</db:code> is out of bounds, it will be bound to only valid positions. In this case, valid positions are from 0 to the length of the string inclusive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextboundaryfinder.xml#position">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="string">
<db:title>QString QTextBoundaryFinder::string() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>string</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString string() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string the <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> object operates on.</db:para>
</db:section>
<db:section xml:id="toEnd">
<db:title>void QTextBoundaryFinder::toEnd()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>toEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void toEnd()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the finder to the end of the string. This is equivalent to <db:link xlink:href="qtextboundaryfinder.xml#setPosition">setPosition</db:link>(string.length()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextboundaryfinder.xml#setPosition">setPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qtextboundaryfinder.xml#position">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toNextBoundary">
<db:title>qsizetype QTextBoundaryFinder::toNextBoundary()</db:title>
<db:methodsynopsis>
<db:type>qsizetype</db:type>
<db:methodname>toNextBoundary</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype toNextBoundary()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> to the next boundary position and returns that position.</db:para>
<db:para>Returns -1 if there is no next boundary.</db:para>
</db:section>
<db:section xml:id="toPreviousBoundary">
<db:title>qsizetype QTextBoundaryFinder::toPreviousBoundary()</db:title>
<db:methodsynopsis>
<db:type>qsizetype</db:type>
<db:methodname>toPreviousBoundary</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype toPreviousBoundary()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> to the previous boundary position and returns that position.</db:para>
<db:para>Returns -1 if there is no previous boundary.</db:para>
</db:section>
<db:section xml:id="toStart">
<db:title>void QTextBoundaryFinder::toStart()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>toStart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void toStart()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the finder to the start of the string. This is equivalent to <db:link xlink:href="qtextboundaryfinder.xml#setPosition">setPosition</db:link>(0).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextboundaryfinder.xml#setPosition">setPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qtextboundaryfinder.xml#position">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QTextBoundaryFinder::BoundaryType QTextBoundaryFinder::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextBoundaryFinder::BoundaryType</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBoundaryFinder::BoundaryType type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QTextBoundaryFinder &amp;QTextBoundaryFinder::operator=(const QTextBoundaryFinder &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextBoundaryFinder &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QTextBoundaryFinder &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBoundaryFinder &amp; operator=(const QTextBoundaryFinder &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the object, <db:code role="parameter">other</db:code>, to another <db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link> object.</db:para>
</db:section>
</db:section>
</db:article>
