<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Translucent Background</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to make a round window with a translucent background.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/shapedclock-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Widgets that set their background to be translucent will be transparent for all unpainted pixels, and the background will shine through pixels painted with an opacity of less than 100%. Pixels that are not painted at all will also not receive any mouse input. This can be used to customize the shapes of top-level widgets. On most window systems, setting certain window flags will cause the window decoration (title bar, window frame, buttons) to be disabled, allowing specially-shaped windows to be created. In this example, we use this feature to create a circular window containing an analog clock.</db:para>
<db:para>Since this example's window does not provide a <db:guilabel>File</db:guilabel> menu or a close button, we provide a context menu with an <db:guilabel>Exit</db:guilabel> entry so that the example can be closed. Click the right mouse button over the window to open this menu.</db:para>
<db:section xml:id="shapedclock-class-definition">
<db:title>ShapedClock Class Definition</db:title>
<db:para>The ShapedClock class is based on the AnalogClock class defined in the <db:link xlink:href="qtwidgets-widgets-analogclock-example.xml">Analog Clock</db:link> example. The whole class definition is presented below:</db:para>
<db:programlisting language="cpp">class ShapedClock : public QWidget
{
    Q_OBJECT

public:
    ShapedClock(QWidget *parent = nullptr);
    QSize sizeHint() const override;

protected:
    void mouseMoveEvent(QMouseEvent *event) override;
    void mousePressEvent(QMouseEvent *event) override;
    void paintEvent(QPaintEvent *event) override;

private:
    QPoint dragPosition;
};
</db:programlisting>
<db:para>The <db:link xlink:href="qwidget.xml#paintEvent">paintEvent</db:link>() implementation draws an analog clock on a semi-transparent background (the clock face). In addition, we implement <db:link xlink:href="qwidget.xml#sizeHint-prop">sizeHint</db:link>() so that we don't have to resize the widget explicitly.</db:para>
<db:para>Since the window containing the clock widget will have no title bar, we provide implementations for <db:link xlink:href="qwidget.xml#mouseMoveEvent">mouseMoveEvent</db:link>() and <db:link xlink:href="qwidget.xml#mousePressEvent">mousePressEvent</db:link>() to allow the clock to be dragged around the screen. The dragPosition variable lets us keep track of where the user last clicked on the widget.</db:para>
</db:section>
<db:section xml:id="shapedclock-class-implementation">
<db:title>ShapedClock Class Implementation</db:title>
<db:para>The ShapedClock constructor sets up a timer and connect it to the widget's update() slot. In addition, we add an action to the widget, which will automatically become available through a context menu when right-clicking on the widget.</db:para>
<db:programlisting language="cpp">ShapedClock::ShapedClock(QWidget *parent)
    : QWidget(parent, Qt::FramelessWindowHint | Qt::WindowSystemMenuHint)
{
    setAttribute(Qt::WA_TranslucentBackground);
    QTimer *timer = new QTimer(this);
    connect(timer, &amp;amp;QTimer::timeout, this, QOverload&amp;lt;&amp;gt;::of(&amp;amp;ShapedClock::update));
    timer-&amp;gt;start(1000);

    QAction *quitAction = new QAction(tr(&quot;E&amp;amp;xit&quot;), this);
    quitAction-&amp;gt;setShortcut(tr(&quot;Ctrl+Q&quot;));
    connect(quitAction, &amp;amp;QAction::triggered, qApp, &amp;amp;QCoreApplication::quit);
    addAction(quitAction);

    setContextMenuPolicy(Qt::ActionsContextMenu);
    setToolTip(tr(&quot;Drag the clock with the left mouse button.\n&quot;
                  &quot;Use the right mouse button to open a context menu.&quot;));
    setWindowTitle(tr(&quot;Shaped Analog Clock&quot;));
}
</db:programlisting>
<db:para>We request a transparent window by setting the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_TranslucentBackground</db:link> widget attribute. We inform the window manager that the widget is not to be decorated with a window frame by setting the <db:link xlink:href="qt.xml#WindowType-enum">Qt::FramelessWindowHint</db:link> flag on the widget. As a result, we need to provide a way for the user to move the clock around the screen.</db:para>
<db:para>Mouse button events are delivered to the mousePressEvent() handler:</db:para>
<db:programlisting language="cpp">void ShapedClock::mousePressEvent(QMouseEvent *event)
{
    if (event-&amp;gt;button() == Qt::LeftButton) {
        dragPosition = event-&amp;gt;globalPosition().toPoint() - frameGeometry().topLeft();
        event-&amp;gt;accept();
    }
}
</db:programlisting>
<db:para>If the left mouse button is pressed over the widget, we record the displacement in global (screen) coordinates between the top-left position of the widget's frame (even when hidden) and the point where the mouse click occurred. This displacement will be used if the user moves the mouse while holding down the left button. Since we acted on the event, we accept it by calling its <db:link xlink:href="qevent.xml#accept">accept</db:link>() function.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/shapedclock-dragging.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The mouseMoveEvent() handler is called if the mouse is moved over the widget.</db:para>
<db:programlisting language="cpp">void ShapedClock::mouseMoveEvent(QMouseEvent *event)
{
    if (event-&amp;gt;buttons() &amp;amp; Qt::LeftButton) {
        move(event-&amp;gt;globalPosition().toPoint() - dragPosition);
        event-&amp;gt;accept();
    }
}
</db:programlisting>
<db:para>If the left button is held down while the mouse is moved, the top-left corner of the widget is moved to the point given by subtracting the dragPosition from the current cursor position in global coordinates. If we drag the widget, we also accept the event.</db:para>
<db:para>The paintEvent() function is mainly the same as described in the <db:link xlink:href="qtwidgets-widgets-analogclock-example.xml">Analog Clock</db:link> example. The one addition is that we use <db:link xlink:href="qpainter.xml#drawEllipse">QPainter::drawEllipse</db:link>() to draw a round clock face. We reduce the painter's opacity to 90%, and use the palette's default background color.</db:para>
<db:programlisting language="cpp">void ShapedClock::paintEvent(QPaintEvent *)
{
    static const QPoint hourHand[4] = {
        QPoint(5, 14),
        QPoint(-5, 14),
        QPoint(-4, -71),
        QPoint(4, -71)
    };
    static const QPoint minuteHand[4] = {
        QPoint(4, 14),
        QPoint(-4, 14),
        QPoint(-3, -89),
        QPoint(3, -89)
    };
    static const QPoint secondsHand[4] = {
       QPoint(1, 14),
       QPoint(-1, 14),
       QPoint(-1, -89),
       QPoint(1, -89)
    };

    const QColor hourColor(palette().color(QPalette::Text));
    const QColor minuteColor(palette().color(QPalette::Text));
    const QColor secondsColor(palette().color(QPalette::Accent));

    int side = qMin(width(), height());
    QPainter painter(this);
    painter.setRenderHint(QPainter::Antialiasing);
    painter.translate(width() / 2, height() / 2);
    painter.scale(side / 200.0, side / 200.0);

    painter.setPen(Qt::NoPen);
    painter.setBrush(palette().window());
    painter.setOpacity(0.9);
    painter.drawEllipse(QPoint(0, 0), 98, 98);
    painter.setOpacity(1.0);

    QTime time = QTime::currentTime();
    painter.setPen(Qt::NoPen);
    painter.setBrush(hourColor);

    painter.save();
    painter.rotate(30.0 * ((time.hour() + time.minute() / 60.0)));
    painter.drawConvexPolygon(hourHand, 4);
    painter.restore();

    for (int i = 0; i &amp;lt; 12; ++i) {
        painter.drawRect(73, -3, 16, 6);
        painter.rotate(30.0);
    }

    painter.setBrush(minuteColor);

    painter.save();
    painter.rotate(6.0 * time.minute());
    painter.drawConvexPolygon(minuteHand, 4);
    painter.restore();

    painter.setBrush(secondsColor);

    painter.save();
    painter.rotate(6.0 * time.second());
    painter.drawConvexPolygon(secondsHand, 4);
    painter.drawEllipse(-3, -3, 6, 6);
    painter.drawEllipse(-5, -68, 10, 10);
    painter.restore();

    painter.setPen(minuteColor);

    for (int j = 0; j &amp;lt; 60; ++j) {
        painter.drawLine(92, 0, 96, 0);
        painter.rotate(6.0);
    }
}
</db:programlisting>
<db:para>Finally, we implement the sizeHint() for the widget so that it is given a reasonable default size when it is first shown:</db:para>
<db:programlisting language="cpp">QSize ShapedClock::sizeHint() const
{
    return QSize(200, 200);
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/widgets/shapedclock?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
