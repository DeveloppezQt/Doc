<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Shaped Clock Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Shaped Clock example shows how to apply a widget mask to a top-level widget to produce a shaped window.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/shapedclock-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Widget masks are used to customize the shapes of top-level widgets by restricting the available area for painting. On some window systems, setting certain window flags will cause the window decoration (title bar, window frame, buttons) to be disabled, allowing specially-shaped windows to be created. In this example, we use this feature to create a circular window containing an analog clock.</db:para>
<db:para>Since this example's window does not provide a <db:guilabel>File</db:guilabel> menu or a close button, we provide a context menu with an <db:guilabel>Exit</db:guilabel> entry so that the example can be closed. Click the right mouse button over the window to open this menu.</db:para>
<db:section xml:id="shapedclock-class-definition">
<db:title>ShapedClock Class Definition</db:title>
<db:para>The ShapedClock class is based on the AnalogClock class defined in the <db:link xlink:href="qtwidgets-widgets-analogclock-example.xml">Analog Clock</db:link> example. The whole class definition is presented below:</db:para>
<db:programlisting language="cpp">class ShapedClock : public QWidget
{
    Q_OBJECT

public:
    ShapedClock(QWidget *parent = 0);
    QSize sizeHint() const override;

protected:
    void mouseMoveEvent(QMouseEvent *event) override;
    void mousePressEvent(QMouseEvent *event) override;
    void paintEvent(QPaintEvent *event) override;
    void resizeEvent(QResizeEvent *event) override;

private:
    QPoint dragPosition;
};
</db:programlisting>
<db:para>The <db:link xlink:href="qwidget.xml#paintEvent">paintEvent</db:link>() implementation is the same as that found in the AnalogClock class. We implement <db:link xlink:href="qwidget.xml#sizeHint-prop">sizeHint</db:link>() so that we don't have to resize the widget explicitly. We also provide an event handler for resize events. This allows us to update the mask if the clock is resized.</db:para>
<db:para>Since the window containing the clock widget will have no title bar, we provide implementations for <db:link xlink:href="qwidget.xml#mouseMoveEvent">mouseMoveEvent</db:link>() and <db:link xlink:href="qwidget.xml#mousePressEvent">mousePressEvent</db:link>() to allow the clock to be dragged around the screen. The dragPosition variable lets us keep track of where the user last clicked on the widget.</db:para>
</db:section>
<db:section xml:id="shapedclock-class-implementation">
<db:title>ShapedClock Class Implementation</db:title>
<db:para>The ShapedClock constructor performs many of the same tasks as the AnalogClock constructor. We set up a timer and connect it to the widget's update() slot:</db:para>
<db:programlisting language="cpp">ShapedClock::ShapedClock(QWidget *parent)
    : QWidget(parent, Qt::FramelessWindowHint | Qt::WindowSystemMenuHint)
{
    QTimer *timer = new QTimer(this);
    connect(timer, SIGNAL(timeout()), this, SLOT(update()));
    timer-&amp;gt;start(1000);

    QAction *quitAction = new QAction(tr(&quot;E&amp;amp;xit&quot;), this);
    quitAction-&amp;gt;setShortcut(tr(&quot;Ctrl+Q&quot;));
    connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));
    addAction(quitAction);

    setContextMenuPolicy(Qt::ActionsContextMenu);
    setToolTip(tr(&quot;Drag the clock with the left mouse button.\n&quot;
                  &quot;Use the right mouse button to open a context menu.&quot;));
    setWindowTitle(tr(&quot;Shaped Analog Clock&quot;));
}
</db:programlisting>
<db:para>We inform the window manager that the widget is not to be decorated with a window frame by setting the <db:link xlink:href="qt.xml#WindowType-enum">Qt::FramelessWindowHint</db:link> flag on the widget. As a result, we need to provide a way for the user to move the clock around the screen.</db:para>
<db:para>Mouse button events are delivered to the mousePressEvent() handler:</db:para>
<db:programlisting language="cpp">void ShapedClock::mousePressEvent(QMouseEvent *event)
{
    if (event-&amp;gt;button() == Qt::LeftButton) {
        dragPosition = event-&amp;gt;globalPos() - frameGeometry().topLeft();
        event-&amp;gt;accept();
    }
}
</db:programlisting>
<db:para>If the left mouse button is pressed over the widget, we record the displacement in global (screen) coordinates between the top-left position of the widget's frame (even when hidden) and the point where the mouse click occurred. This displacement will be used if the user moves the mouse while holding down the left button. Since we acted on the event, we accept it by calling its <db:link xlink:href="qevent.xml#accept">accept</db:link>() function.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/shapedclock-dragging.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The mouseMoveEvent() handler is called if the mouse is moved over the widget.</db:para>
<db:programlisting language="cpp">void ShapedClock::mouseMoveEvent(QMouseEvent *event)
{
    if (event-&amp;gt;buttons() &amp;amp; Qt::LeftButton) {
        move(event-&amp;gt;globalPos() - dragPosition);
        event-&amp;gt;accept();
    }
}
</db:programlisting>
<db:para>If the left button is held down while the mouse is moved, the top-left corner of the widget is moved to the point given by subtracting the dragPosition from the current cursor position in global coordinates. If we drag the widget, we also accept the event.</db:para>
<db:para>The paintEvent() function is given for completeness. See the <db:link xlink:href="qtwidgets-widgets-analogclock-example.xml">Analog Clock</db:link> example for a description of the process used to render the clock.</db:para>
<db:programlisting language="cpp">void ShapedClock::paintEvent(QPaintEvent *)
{
    static const QPoint hourHand[3] = {
        QPoint(7, 8),
        QPoint(-7, 8),
        QPoint(0, -40)
    };
    static const QPoint minuteHand[3] = {
        QPoint(7, 8),
        QPoint(-7, 8),
        QPoint(0, -70)
    };

    QColor hourColor(127, 0, 127);
    QColor minuteColor(0, 127, 127, 191);

    int side = qMin(width(), height());
    QTime time = QTime::currentTime();

    QPainter painter(this);
    painter.setRenderHint(QPainter::Antialiasing);
    painter.translate(width() / 2, height() / 2);
    painter.scale(side / 200.0, side / 200.0);

    painter.setPen(Qt::NoPen);
    painter.setBrush(hourColor);

    painter.save();
    painter.rotate(30.0 * ((time.hour() + time.minute() / 60.0)));
    painter.drawConvexPolygon(hourHand, 3);
    painter.restore();

    painter.setPen(hourColor);

    for (int i = 0; i &amp;lt; 12; ++i) {
        painter.drawLine(88, 0, 96, 0);
        painter.rotate(30.0);
    }

    painter.setPen(Qt::NoPen);
    painter.setBrush(minuteColor);

    painter.save();
    painter.rotate(6.0 * (time.minute() + time.second() / 60.0));
    painter.drawConvexPolygon(minuteHand, 3);
    painter.restore();

    painter.setPen(minuteColor);

    for (int j = 0; j &amp;lt; 60; ++j) {
        if ((j % 5) != 0)
            painter.drawLine(92, 0, 96, 0);
        painter.rotate(6.0);
    }
}
</db:programlisting>
<db:para>In the resizeEvent() handler, we re-use some of the code from the paintEvent() to determine the region of the widget that is visible to the user:</db:para>
<db:programlisting language="cpp">void ShapedClock::resizeEvent(QResizeEvent * /* event */)
{
    int side = qMin(width(), height());
    QRegion maskedRegion(width() / 2 - side / 2, height() / 2 - side / 2, side,
                         side, QRegion::Ellipse);
    setMask(maskedRegion);
}
</db:programlisting>
<db:para>Since the clock face is a circle drawn in the center of the widget, this is the region we use as the mask.</db:para>
<db:para>Although the lack of a window frame may make it difficult for the user to resize the widget on some platforms, it will not necessarily be impossible. The resizeEvent() function ensures that the widget mask will always be updated if the widget's dimensions change, and additionally ensures that it will be set up correctly when the widget is first displayed.</db:para>
<db:para>Finally, we implement the sizeHint() for the widget so that it is given a reasonable default size when it is first shown:</db:para>
<db:programlisting language="cpp">QSize ShapedClock::sizeHint() const
{
    return QSize(100, 100);
}
</db:programlisting>
</db:section>
<db:section xml:id="notes-on-widget-masks">
<db:title>Notes on Widget Masks</db:title>
<db:para>Since <db:link xlink:href="qregion.xml">QRegion</db:link> allows arbitrarily complex regions to be created, widget masks can be made to suit the most unconventionally-shaped windows, and even allow widgets to be displayed with holes in them.</db:para>
<db:para>Widget masks can also be constructed by using the contents of pixmap to define the opaque part of the widget. For a pixmap with an alpha channel, a suitable mask can be obtained with <db:link xlink:href="qpixmap.xml#mask">QPixmap::mask</db:link>().</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="widgets/shapedclock/main.cpp">widgets/shapedclock/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/shapedclock/shapedclock.cpp">widgets/shapedclock/shapedclock.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/shapedclock/shapedclock.h">widgets/shapedclock/shapedclock.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/shapedclock/shapedclock.pro">widgets/shapedclock/shapedclock.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
