<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickWebEngineProfile Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link> class provides a web engine profile shared by multiple pages.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickWebEngineProfile</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS WebEngineQuick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::WebEngineQuick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginequick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtwebengine-webengineprofile.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A web engine profile contains settings, scripts, persistent cookie policy, and the list of visited links shared by all web engine pages that belong to the profile.</db:para>
<db:para>Information about visited links is stored together with persistent cookies and other persistent data in a storage determined by the <db:link xlink:href="qquickwebengineprofile.xml#storageName-prop">storageName</db:link> property. Persistent data is stored in a subdirectory determined by the <db:link xlink:href="qquickwebengineprofile.xml#persistentStoragePath-prop">persistentStoragePath</db:link> property and the cache in a subdirectory determined by the <db:link xlink:href="qquickwebengineprofile.xml#cachePath-prop">cachePath</db:link> property. The <db:link xlink:href="qquickwebengineprofile.xml#httpCacheType-prop">httpCacheType</db:link> property describes the type of the cache: <db:emphasis>in-memory</db:emphasis> or <db:emphasis>on-disk</db:emphasis>. If only the <db:link xlink:href="qquickwebengineprofile.xml#storageName-prop">storageName</db:link> property is set, the other values are generated automatically based on it. If you specify any of the values manually, you should do it before creating any pages that belong to the profile.</db:para>
<db:para>Profiles can be used to isolate pages from each other. A typical use case is a dedicated <db:emphasis>off-the-record profile</db:emphasis> for a <db:emphasis>private browsing</db:emphasis> mode. An off-the-record profile forces cookies, the HTTP cache, and other normally persistent data to be stored only in memory. The <db:link xlink:href="qquickwebengineprofile.xml#offTheRecord-prop">offTheRecord</db:link> property holds whether a profile is off-the-record.</db:para>
<db:para>The default profile can be accessed by <db:link xlink:href="qquickwebengineprofile.xml#defaultProfile">defaultProfile</db:link>(). It is a built-in profile that all web pages not specifically created with another profile belong to.</db:para>
<db:para>A <db:link xlink:href="qml-qtwebengine-webengineprofile.xml">WebEngineProfile</db:link> instance can be created and accessed from C++ through the <db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link> class, which exposes further functionality in C++. This allows Qt Quick applications to intercept URL requests (QQuickWebEngineProfile::setRequestInterceptor), or register custom URL schemes (<db:link xlink:href="qquickwebengineprofile.xml#installUrlSchemeHandler">QQuickWebEngineProfile::installUrlSchemeHandler</db:link>).</db:para>
<db:para>Spellchecking HTML form fields can be enabled per profile by setting the <db:link xlink:href="qquickwebengineprofile.xml#spellCheckEnabled-prop">spellCheckEnabled</db:link> property and the current languages used for spellchecking can be set by using the <db:link xlink:href="qquickwebengineprofile.xml#spellCheckLanguages">spellCheckLanguages</db:link> property.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="HttpCacheType-enum">
<db:title>enum QQuickWebEngineProfile::HttpCacheType</db:title>
<db:enumsynopsis>
<db:enumname>HttpCacheType</db:enumname>
<db:enumitem>
<db:enumidentifier>MemoryHttpCache</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DiskHttpCache</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoCache</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the HTTP cache type:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:emphasis>::MemoryHttpCache</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Use an in-memory cache. This is the default if <db:code>off-the-record</db:code> is set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:emphasis>::DiskHttpCache</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Use a disk cache. This is the default if <db:code>off-the-record</db:code> is not set. Falls back to <db:code>MemoryHttpCache</db:code> if <db:code>off-the-record</db:code> is set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:emphasis>::NoCache</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Disable both in-memory and disk caching. (Added in Qt 5.7)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PersistentCookiesPolicy-enum">
<db:title>enum QQuickWebEngineProfile::PersistentCookiesPolicy</db:title>
<db:enumsynopsis>
<db:enumname>PersistentCookiesPolicy</db:enumname>
<db:enumitem>
<db:enumidentifier>NoPersistentCookies</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllowPersistentCookies</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ForcePersistentCookies</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes policy for cookie persistency:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:emphasis>::NoPersistentCookies</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Both session and persistent cookies are stored in memory. This is the only setting possible if <db:code>off-the-record</db:code> is set or no persistent data path is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:emphasis>::AllowPersistentCookies</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Cookies marked persistent are saved to and restored from disk, whereas session cookies are only stored to disk for crash recovery. This is the default setting.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:emphasis>::ForcePersistentCookies</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Both session and persistent cookies are saved to and restored from disk.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="cachePath-prop">
<db:title>cachePath : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>cachePath</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cachePath</db:synopsisinfo>
<db:synopsisinfo role="setter">setCachePath</db:synopsisinfo>
<db:synopsisinfo role="notifier">cachePathChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The path to the location where the profile's caches are stored, in particular the HTTP cache.</db:para>
<db:para>By default, the caches are stored below <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>(<db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::CacheLocation</db:link>) in a directory named using <db:link xlink:href="qquickwebengineprofile.xml#storageName-prop">storageName</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">cachePath</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCachePath</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>path</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">cachePathChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="downloadPath-prop">
<db:title>[since QtWebEngine 1.9] downloadPath : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>downloadPath</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">downloadPath</db:synopsisinfo>
<db:synopsisinfo role="setter">setDownloadPath</db:synopsisinfo>
<db:synopsisinfo role="notifier">downloadPathChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The path to the location where the downloaded files are stored.</db:para>
<db:para>Overrides the default path used for download location, setting it to <db:code role="parameter">path</db:code>.</db:para>
<db:para>If set to an empty string, the default path is restored.</db:para>
<db:note>
<db:para>By default, the download path is <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::DownloadLocation</db:link>.</db:para>
</db:note>
<db:para>This property was introduced in QtWebEngine 1.9.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">downloadPath</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDownloadPath</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>path</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">downloadPathChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="httpAcceptLanguage-prop">
<db:title>httpAcceptLanguage : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>httpAcceptLanguage</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">httpAcceptLanguage</db:synopsisinfo>
<db:synopsisinfo role="setter">setHttpAcceptLanguage</db:synopsisinfo>
<db:synopsisinfo role="notifier">httpAcceptLanguageChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The value of the Accept-Language HTTP request-header field.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">httpAcceptLanguage</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHttpAcceptLanguage</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>httpAcceptLanguage</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">httpAcceptLanguageChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="httpCacheMaximumSize-prop">
<db:title>httpCacheMaximumSize : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>httpCacheMaximumSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">httpCacheMaximumSize</db:synopsisinfo>
<db:synopsisinfo role="setter">setHttpCacheMaximumSize</db:synopsisinfo>
<db:synopsisinfo role="notifier">httpCacheMaximumSizeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The maximum size of the HTTP cache. If <db:code>0</db:code>, the size will be controlled automatically by <db:link xlink:href="qtwebengine-qmlmodule.xml">QtWebEngine</db:link>. The default value is <db:code>0</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">httpCacheMaximumSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHttpCacheMaximumSize</db:emphasis>(<db:type>int</db:type> <db:emphasis>maxSize</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">httpCacheMaximumSizeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwebengineprofile.xml#httpCacheType-prop">httpCacheType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="httpCacheType-prop">
<db:title>httpCacheType : HttpCacheType</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>HttpCacheType</db:type>
<db:varname>httpCacheType</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">httpCacheType</db:synopsisinfo>
<db:synopsisinfo role="setter">setHttpCacheType</db:synopsisinfo>
<db:synopsisinfo role="notifier">httpCacheTypeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This enumeration describes the type of the HTTP cache.</db:para>
<db:para>If the profile is off-the-record or has no <db:link xlink:href="qquickwebengineprofile.xml#storageName-prop">storageName</db:link> set, <db:link xlink:href="qquickwebengineprofile.xml#HttpCacheType-enum">MemoryHttpCache</db:link> is returned.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qquickwebengineprofile.xml#HttpCacheType-enum">QQuickWebEngineProfile::HttpCacheType</db:link></db:type> <db:emphasis role="bold">httpCacheType</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHttpCacheType</db:emphasis>(<db:emphasis>QQuickWebEngineProfile::HttpCacheType</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">httpCacheTypeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="httpUserAgent-prop">
<db:title>httpUserAgent : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>httpUserAgent</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">httpUserAgent</db:synopsisinfo>
<db:synopsisinfo role="setter">setHttpUserAgent</db:synopsisinfo>
<db:synopsisinfo role="notifier">httpUserAgentChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The user-agent string sent with HTTP to identify the browser.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">httpUserAgent</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHttpUserAgent</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>userAgent</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">httpUserAgentChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="isPushServiceEnabled-prop">
<db:title>[since QtWebEngine 6.5] isPushServiceEnabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>isPushServiceEnabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isPushServiceEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setPushServiceEnabled</db:synopsisinfo>
<db:synopsisinfo role="notifier">pushServiceEnabledChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Whether the push messaging service is enabled.</db:para>
<db:note>
<db:para>By default the push messaging service is disabled.</db:para>
</db:note>
<db:note>
<db:para>Qt WebEngine uses the <db:link xlink:href="https://firebase.google.com">Firebase Cloud Messaging (FCM)</db:link> as a browser push service. Therefore, all push messages will go through the Google push service and its respective servers.</db:para>
</db:note>
<db:para>This property was introduced in QtWebEngine 6.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isPushServiceEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPushServiceEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">pushServiceEnabledChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="offTheRecord-prop">
<db:title>offTheRecord : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>offTheRecord</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isOffTheRecord</db:synopsisinfo>
<db:synopsisinfo role="setter">setOffTheRecord</db:synopsisinfo>
<db:synopsisinfo role="notifier">offTheRecordChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Whether the web engine profile is <db:emphasis>off-the-record</db:emphasis>. An off-the-record profile forces cookies, the HTTP cache, and other normally persistent data to be stored only in memory. Profile is off-the-record by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isOffTheRecord</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOffTheRecord</db:emphasis>(<db:type>bool</db:type> <db:emphasis>offTheRecord</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">offTheRecordChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="persistentCookiesPolicy-prop">
<db:title>persistentCookiesPolicy : PersistentCookiesPolicy</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>PersistentCookiesPolicy</db:type>
<db:varname>persistentCookiesPolicy</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">persistentCookiesPolicy</db:synopsisinfo>
<db:synopsisinfo role="setter">setPersistentCookiesPolicy</db:synopsisinfo>
<db:synopsisinfo role="notifier">persistentCookiesPolicyChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This enumeration describes the policy of cookie persistency. If the profile is off-the-record, <db:link xlink:href="qquickwebengineprofile.xml#PersistentCookiesPolicy-enum">NoPersistentCookies</db:link> is returned.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qquickwebengineprofile.xml#PersistentCookiesPolicy-enum">QQuickWebEngineProfile::PersistentCookiesPolicy</db:link></db:type> <db:emphasis role="bold">persistentCookiesPolicy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPersistentCookiesPolicy</db:emphasis>(<db:emphasis>QQuickWebEngineProfile::PersistentCookiesPolicy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">persistentCookiesPolicyChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="persistentStoragePath-prop">
<db:title>persistentStoragePath : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>persistentStoragePath</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">persistentStoragePath</db:synopsisinfo>
<db:synopsisinfo role="setter">setPersistentStoragePath</db:synopsisinfo>
<db:synopsisinfo role="notifier">persistentStoragePathChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The path to the location where the persistent data for the browser and web content are stored. Persistent data includes persistent cookies, HTML5 local storage, and visited links.</db:para>
<db:para>By default, the storage is located below <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>(<db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::AppDataLocation</db:link>) in a directory named using <db:link xlink:href="qquickwebengineprofile.xml#storageName-prop">storageName</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">persistentStoragePath</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPersistentStoragePath</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>path</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">persistentStoragePathChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="spellCheckEnabled-prop">
<db:title>[since QtWebEngine 1.4] spellCheckEnabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>spellCheckEnabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isSpellCheckEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setSpellCheckEnabled</db:synopsisinfo>
<db:synopsisinfo role="notifier">spellCheckEnabledChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the web engine spell checker is enabled.</db:para>
<db:para>This property was introduced in QtWebEngine 1.4.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSpellCheckEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSpellCheckEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">spellCheckEnabledChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="spellCheckLanguages-prop">
<db:title>[since QtWebEngine 1.4] spellCheckLanguages : QStringList</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QStringList</db:type>
<db:varname>spellCheckLanguages</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">spellCheckLanguages</db:synopsisinfo>
<db:synopsisinfo role="setter">setSpellCheckLanguages</db:synopsisinfo>
<db:synopsisinfo role="notifier">spellCheckLanguagesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the languages used by the spell checker.</db:para>
<db:para>This property was introduced in QtWebEngine 1.4.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qquickwebengineprofile.xml#spellCheckLanguages">spellCheckLanguages</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSpellCheckLanguages</db:emphasis>(const <db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> &amp;<db:emphasis>languages</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">spellCheckLanguagesChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="storageName-prop">
<db:title>storageName : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>storageName</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">storageName</db:synopsisinfo>
<db:synopsisinfo role="setter">setStorageName</db:synopsisinfo>
<db:synopsisinfo role="notifier">storageNameChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The storage name that is used to create separate subdirectories for each profile that uses the disk for storing persistent data and cache.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">storageName</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setStorageName</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>name</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">storageNameChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwebengineprofile.xml#persistentStoragePath-prop">persistentStoragePath</db:link></db:member>
<db:member><db:link xlink:href="qquickwebengineprofile.xml#cachePath-prop">cachePath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickWebEngineProfile">
<db:title>QQuickWebEngineProfile::QQuickWebEngineProfile(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickWebEngineProfile</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickWebEngineProfile(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new profile with the parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="clearHttpCache">
<db:title>void QQuickWebEngineProfile::clearHttpCache()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearHttpCache</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearHttpCache()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the profile's cache entries.</db:para>
<db:note>
<db:para>Make sure that you do not start new navigation or any operation on the profile while the clear operation is in progress. The <db:link xlink:href="qquickwebengineprofile.xml#clearHttpCacheCompleted">clearHttpCacheCompleted</db:link>() signal notifies about the completion.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineprofile.xml#clearHttpCache-method">WebEngineProfile::clearHttpCache</db:link>()</db:member>
<db:member><db:link xlink:href="qquickwebengineprofile.xml#clearHttpCacheCompleted">clearHttpCacheCompleted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearHttpCacheCompleted">
<db:title>[since 6.7] void QQuickWebEngineProfile::clearHttpCacheCompleted()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearHttpCacheCompleted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearHttpCacheCompleted()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:link xlink:href="qquickwebengineprofile.xml#clearHttpCache">clearHttpCache</db:link>() operation is completed.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwebengineprofile.xml#clearHttpCache">clearHttpCache</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clientCertificateStore">
<db:title>QWebEngineClientCertificateStore *QQuickWebEngineProfile::clientCertificateStore()</db:title>
<db:methodsynopsis>
<db:type>QWebEngineClientCertificateStore *</db:type>
<db:methodname>clientCertificateStore</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineClientCertificateStore * clientCertificateStore()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the profile's client certificate store.</db:para>
</db:section>
<db:section xml:id="cookieStore">
<db:title>QWebEngineCookieStore *QQuickWebEngineProfile::cookieStore() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineCookieStore *</db:type>
<db:methodname>cookieStore</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineCookieStore * cookieStore() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cookie store for this profile.</db:para>
</db:section>
<db:section xml:id="defaultProfile">
<db:title>[static] QQuickWebEngineProfile *QQuickWebEngineProfile::defaultProfile()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickWebEngineProfile *</db:type>
<db:methodname>defaultProfile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickWebEngineProfile * defaultProfile()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default profile.</db:para>
<db:para>The default profile is off-the-record.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwebengineprofile.xml#storageName-prop">storageName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="downloadFinished">
<db:title>void QQuickWebEngineProfile::downloadFinished(QQuickWebEngineDownloadRequest *<db:emphasis>download</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>downloadFinished</db:methodname>
<db:methodparam>
<db:type>QQuickWebEngineDownloadRequest *</db:type>
<db:parameter>download</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void downloadFinished(QQuickWebEngineDownloadRequest *download)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever downloading stops, because it finished successfully, was cancelled, or was interrupted (for example, because connectivity was lost). The <db:code role="parameter">download</db:code> argument holds the state of the finished download instance.</db:para>
<db:note>
<db:para>To use from C++ static_cast <db:code role="parameter">download</db:code> to <db:link xlink:href="qwebenginedownloadrequest.xml">QWebEngineDownloadRequest</db:link></db:para>
</db:note>
</db:section>
<db:section xml:id="downloadRequested">
<db:title>void QQuickWebEngineProfile::downloadRequested(QQuickWebEngineDownloadRequest *<db:emphasis>download</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>downloadRequested</db:methodname>
<db:methodparam>
<db:type>QQuickWebEngineDownloadRequest *</db:type>
<db:parameter>download</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void downloadRequested(QQuickWebEngineDownloadRequest *download)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a download has been triggered. The <db:code role="parameter">download</db:code> argument holds the state of the download. The download has to be explicitly accepted with <db:code>QWebEngineDownloadRequest::accept()</db:code> or it will be cancelled by default. The download item is parented by the profile. If it is not accepted, it will be deleted immediately after the signal emission. This signal cannot be used with a queued connection.</db:para>
<db:note>
<db:para>To use from C++ static_cast <db:code role="parameter">download</db:code> to <db:link xlink:href="qwebenginedownloadrequest.xml">QWebEngineDownloadRequest</db:link></db:para>
</db:note>
</db:section>
<db:section xml:id="installUrlSchemeHandler">
<db:title>void QQuickWebEngineProfile::installUrlSchemeHandler(const QByteArray &amp;<db:emphasis>scheme</db:emphasis>, QWebEngineUrlSchemeHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>installUrlSchemeHandler</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>scheme</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWebEngineUrlSchemeHandler *</db:type>
<db:parameter>handler</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void installUrlSchemeHandler(const QByteArray &amp;scheme, QWebEngineUrlSchemeHandler *handler)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers a handler <db:code role="parameter">handler</db:code> for custom URL scheme <db:code role="parameter">scheme</db:code> in the profile.</db:para>
<db:para>It is necessary to first register the scheme with <db:link xlink:href="qwebengineurlscheme.xml#registerScheme">QWebEngineUrlScheme::registerScheme</db:link> at application startup.</db:para>
</db:section>
<db:section xml:id="presentNotification">
<db:title>void QQuickWebEngineProfile::presentNotification(QWebEngineNotification *<db:emphasis>notification</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>presentNotification</db:methodname>
<db:methodparam>
<db:type>QWebEngineNotification *</db:type>
<db:parameter>notification</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void presentNotification(QWebEngineNotification *notification)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever there is a newly created user notification. The <db:code role="parameter">notification</db:code> argument holds the <db:link xlink:href="qwebenginenotification.xml">QWebEngineNotification</db:link> instance to query data and interact with.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineprofile.xml#presentNotification-signal">WebEngineProfile::presentNotification</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAllUrlSchemeHandlers">
<db:title>void QQuickWebEngineProfile::removeAllUrlSchemeHandlers()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeAllUrlSchemeHandlers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeAllUrlSchemeHandlers()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all custom URL scheme handlers installed in the profile.</db:para>
</db:section>
<db:section xml:id="removeUrlScheme">
<db:title>void QQuickWebEngineProfile::removeUrlScheme(const QByteArray &amp;<db:emphasis>scheme</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeUrlScheme</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>scheme</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeUrlScheme(const QByteArray &amp;scheme)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the custom URL scheme <db:code role="parameter">scheme</db:code> from the profile.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwebengineprofile.xml#removeUrlSchemeHandler">removeUrlSchemeHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeUrlSchemeHandler">
<db:title>void QQuickWebEngineProfile::removeUrlSchemeHandler(QWebEngineUrlSchemeHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeUrlSchemeHandler</db:methodname>
<db:methodparam>
<db:type>QWebEngineUrlSchemeHandler *</db:type>
<db:parameter>handler</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeUrlSchemeHandler(QWebEngineUrlSchemeHandler *handler)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the custom URL scheme handler <db:code role="parameter">handler</db:code> from the profile.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwebengineprofile.xml#removeUrlScheme">removeUrlScheme</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUrlRequestInterceptor">
<db:title>void QQuickWebEngineProfile::setUrlRequestInterceptor(QWebEngineUrlRequestInterceptor *<db:emphasis>interceptor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUrlRequestInterceptor</db:methodname>
<db:methodparam>
<db:type>QWebEngineUrlRequestInterceptor *</db:type>
<db:parameter>interceptor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUrlRequestInterceptor(QWebEngineUrlRequestInterceptor *interceptor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers a request interceptor singleton <db:code role="parameter">interceptor</db:code> to intercept URL requests.</db:para>
<db:para>The profile does not take ownership of the pointer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlrequestinfo.xml">QWebEngineUrlRequestInfo</db:link></db:member>
<db:member><db:link xlink:href="qwebengineurlrequestinterceptor.xml">QWebEngineUrlRequestInterceptor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="spellCheckLanguages">
<db:title>QStringList QQuickWebEngineProfile::spellCheckLanguages() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>spellCheckLanguages</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">spellCheckLanguages</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList spellCheckLanguages() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of languages used by the spell checker.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qquickwebengineprofile.xml#spellCheckLanguages-prop">spellCheckLanguages</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwebengineprofile.xml#spellCheckLanguages-prop">setSpellCheckLanguages</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="urlSchemeHandler">
<db:title>const QWebEngineUrlSchemeHandler *QQuickWebEngineProfile::urlSchemeHandler(const QByteArray &amp;<db:emphasis>scheme</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QWebEngineUrlSchemeHandler *</db:type>
<db:methodname>urlSchemeHandler</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>scheme</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QWebEngineUrlSchemeHandler * urlSchemeHandler(const QByteArray &amp;scheme) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the custom URL scheme handler register for the URL scheme <db:code role="parameter">scheme</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
