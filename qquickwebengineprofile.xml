<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickWebEngineProfile Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link> class provides a web engine profile shared by multiple pages.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickWebEngineProfile</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In QML</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtwebengine-webengineprofile.xml" xlink:role="">WebEngineProfile</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A web engine profile contains properties and functionality shared by a group of web engine pages.</db:para>
<db:para>Information about visited links is stored together with persistent cookies and other persistent data in a storage described by the <db:link xlink:href="qquickwebengineprofile.xml#persistentStoragePath-prop">persistentStoragePath</db:link> property.</db:para>
<db:para>Profiles can be used to isolate pages from each other. A typical use case is a dedicated <db:emphasis>off-the-record profile</db:emphasis> for a <db:emphasis>private browsing</db:emphasis> mode. An off-the-record profile forces cookies, the HTTP cache, and other normally persistent data to be stored only in memory. The <db:link xlink:href="qquickwebengineprofile.xml#offTheRecord-prop">offTheRecord</db:link> property holds whether a profile is off-the-record.</db:para>
<db:para>The default profile can be accessed by <db:link xlink:href="qquickwebengineprofile.xml#defaultProfile">defaultProfile</db:link>(). It is a built-in profile that all web pages not specifically created with another profile belong to.</db:para>
<db:para>A <db:link xlink:href="qml-qtwebengine-webengineprofile.xml">WebEngineProfile</db:link> instance can be created and accessed from C++ through the <db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link> class, which exposes further functionality in C++. This allows Qt Quick applications to intercept URL requests (<db:link xlink:href="qquickwebengineprofile.xml#setRequestInterceptor">QQuickWebEngineProfile::setRequestInterceptor</db:link>), or register custom URL schemes (<db:link xlink:href="qquickwebengineprofile.xml#installUrlSchemeHandler">QQuickWebEngineProfile::installUrlSchemeHandler</db:link>).</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="HttpCacheType-enum">
<db:title>enum QQuickWebEngineProfile::HttpCacheType</db:title>
<db:para>This enum describes the HTTP cache type:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:emphasis>::MemoryHttpCache</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Use an in-memory cache. This is the only setting possible if <db:code>off-the-record</db:code> is set or no cache path is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:emphasis>::DiskHttpCache</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Use a disk cache. This is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:emphasis>::NoCache</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Disable both in-memory and disk caching. (Added in Qt 5.7)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PersistentCookiesPolicy-enum">
<db:title>enum QQuickWebEngineProfile::PersistentCookiesPolicy</db:title>
<db:para>This enum describes policy for cookie persistency:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:emphasis>::NoPersistentCookies</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Both session and persistent cookies are stored in memory. This is the only setting possible if <db:code>off-the-record</db:code> is set or no persistent data path is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:emphasis>::AllowPersistentCookies</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Cookies marked persistent are saved to and restored from disk, whereas session cookies are only stored to disk for crash recovery. This is the default setting.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwebengineprofile.xml">QQuickWebEngineProfile</db:link></db:emphasis>::ForcePersistentCookies</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Both session and persistent cookies are saved to and restored from disk.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="cachePath-prop">
<db:title>cachePath : QString</db:title>
<db:para>The path to the location where the profile's caches are stored, in particular the HTTP cache.</db:para>
<db:para>By default, the caches are stored below <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>(<db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::CacheLocation</db:link>) in a directory named using <db:link xlink:href="qquickwebengineprofile.xml#storageName-prop">storageName</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">cachePath</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCachePath</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>path</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">cachePathChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="httpAcceptLanguage-prop">
<db:title>httpAcceptLanguage : QString</db:title>
<db:para>The value of the Accept-Language HTTP request-header field.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">httpAcceptLanguage</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHttpAcceptLanguage</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>httpAcceptLanguage</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">httpAcceptLanguageChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="httpCacheMaximumSize-prop">
<db:title>httpCacheMaximumSize : int</db:title>
<db:para>The maximum size of the HTTP cache. If <db:code>0</db:code>, the size will be controlled automatically by <db:link xlink:href="qtwebengine-qmlmodule.xml">QtWebEngine</db:link>. The default value is <db:code>0</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">httpCacheMaximumSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHttpCacheMaximumSize</db:emphasis>(<db:type>int</db:type> <db:emphasis>maxSize</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">httpCacheMaximumSizeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwebengineprofile.xml#httpCacheType-prop">httpCacheType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="httpCacheType-prop">
<db:title>httpCacheType : HttpCacheType</db:title>
<db:para>This enumeration describes the type of the HTTP cache.</db:para>
<db:para>If the profile is off-the-record, <db:link xlink:href="qquickwebengineprofile.xml#HttpCacheType-enum">MemoryHttpCache</db:link> is returned.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qquickwebengineprofile.xml#HttpCacheType-enum">QQuickWebEngineProfile::HttpCacheType</db:link></db:type> <db:emphasis role="bold">httpCacheType</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHttpCacheType</db:emphasis>(<db:emphasis>QQuickWebEngineProfile::HttpCacheType</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">httpCacheTypeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="httpUserAgent-prop">
<db:title>httpUserAgent : QString</db:title>
<db:para>The user-agent string sent with HTTP to identify the browser.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">httpUserAgent</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHttpUserAgent</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>userAgent</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">httpUserAgentChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="offTheRecord-prop">
<db:title>offTheRecord : bool</db:title>
<db:para>Whether the web engine profile is <db:emphasis>off-the-record</db:emphasis>. An off-the-record profile forces cookies, the HTTP cache, and other normally persistent data to be stored only in memory.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isOffTheRecord</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOffTheRecord</db:emphasis>(<db:type>bool</db:type> <db:emphasis>offTheRecord</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">offTheRecordChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="persistentCookiesPolicy-prop">
<db:title>persistentCookiesPolicy : PersistentCookiesPolicy</db:title>
<db:para>This enumeration describes the policy of cookie persistency. If the profile is off-the-record, <db:link xlink:href="qquickwebengineprofile.xml#PersistentCookiesPolicy-enum">NoPersistentCookies</db:link> is returned.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qquickwebengineprofile.xml#PersistentCookiesPolicy-enum">QQuickWebEngineProfile::PersistentCookiesPolicy</db:link></db:type> <db:emphasis role="bold">persistentCookiesPolicy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPersistentCookiesPolicy</db:emphasis>(<db:emphasis>QQuickWebEngineProfile::PersistentCookiesPolicy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">persistentCookiesPolicyChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="persistentStoragePath-prop">
<db:title>persistentStoragePath : QString</db:title>
<db:para>The path to the location where the persistent data for the browser and web content are stored. Persistent data includes persistent cookies, HTML5 local storage, and visited links.</db:para>
<db:para>By default, the storage is located below <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>(<db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::DataLocation</db:link>) in a directory named using <db:link xlink:href="qquickwebengineprofile.xml#storageName-prop">storageName</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">persistentStoragePath</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPersistentStoragePath</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>path</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">persistentStoragePathChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="storageName-prop">
<db:title>storageName : QString</db:title>
<db:para>The storage name that is used to create separate subdirectories for each profile that uses the disk for storing persistent data and cache.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">storageName</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setStorageName</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>name</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">storageNameChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwebengineprofile.xml#persistentStoragePath-prop">QQuickWebEngineProfile::persistentStoragePath</db:link></db:member>
<db:member><db:link xlink:href="qquickwebengineprofile.xml#cachePath-prop">QQuickWebEngineProfile::cachePath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickWebEngineProfile">
<db:title>QQuickWebEngineProfile::QQuickWebEngineProfile(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new profile with the parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="clearHttpCache">
<db:title>[since 5.7] void QQuickWebEngineProfile::clearHttpCache()</db:title>
<db:para>Removes the profile's cache entries.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineprofile.xml#clearHttpCache-method">WebEngineProfile::clearHttpCache</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cookieStore">
<db:title>QWebEngineCookieStore *QQuickWebEngineProfile::cookieStore() const</db:title>
<db:para>Returns the cookie store for this profile.</db:para>
</db:section>
<db:section xml:id="defaultProfile">
<db:title>[static] QQuickWebEngineProfile *QQuickWebEngineProfile::defaultProfile()</db:title>
<db:para>Returns the default profile.</db:para>
<db:para>The default profile uses the storage name &quot;Default&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwebengineprofile.xml#storageName-prop">storageName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="downloadFinished">
<db:title>void QQuickWebEngineProfile::downloadFinished(QQuickWebEngineDownloadItem *<db:emphasis>download</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever downloading stops, because it finished successfully, was cancelled, or was interrupted (for example, because connectivity was lost). The <db:code role="parameter">download</db:code> argument holds the state of the finished download instance.</db:para>
</db:section>
<db:section xml:id="downloadRequested">
<db:title>void QQuickWebEngineProfile::downloadRequested(QQuickWebEngineDownloadItem *<db:emphasis>download</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a download has been triggered. The <db:code role="parameter">download</db:code> argument holds the state of the download. The download has to be explicitly accepted with <db:code>QQuickWebEngineDownloadItem::accept()</db:code> or it will be cancelled by default. The download item is parented by the profile. If it is not accepted, it will be deleted immediately after the signal emission. This signal cannot be used with a queued connection.</db:para>
</db:section>
<db:section xml:id="installUrlSchemeHandler">
<db:title>void QQuickWebEngineProfile::installUrlSchemeHandler(const QByteArray &amp;<db:emphasis>scheme</db:emphasis>, QWebEngineUrlSchemeHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Registers a handler <db:code role="parameter">handler</db:code> for custom URL scheme <db:code role="parameter">scheme</db:code> in the profile.</db:para>
</db:section>
<db:section xml:id="removeAllUrlSchemeHandlers">
<db:title>void QQuickWebEngineProfile::removeAllUrlSchemeHandlers()</db:title>
<db:para>Removes all custom URL scheme handlers installed in the profile.</db:para>
</db:section>
<db:section xml:id="removeUrlScheme">
<db:title>void QQuickWebEngineProfile::removeUrlScheme(const QByteArray &amp;<db:emphasis>scheme</db:emphasis>)</db:title>
<db:para>Removes the custom URL scheme <db:code role="parameter">scheme</db:code> from the profile.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwebengineprofile.xml#removeUrlSchemeHandler">removeUrlSchemeHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeUrlSchemeHandler">
<db:title>void QQuickWebEngineProfile::removeUrlSchemeHandler(QWebEngineUrlSchemeHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Removes the custom URL scheme handler <db:code role="parameter">handler</db:code> from the profile.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwebengineprofile.xml#removeUrlScheme">removeUrlScheme</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRequestInterceptor">
<db:title>void QQuickWebEngineProfile::setRequestInterceptor(QWebEngineUrlRequestInterceptor *<db:emphasis>interceptor</db:emphasis>)</db:title>
<db:para>Registers a request interceptor singleton <db:code role="parameter">interceptor</db:code> to intercept URL requests.</db:para>
<db:para>The profile does not take ownership of the pointer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlrequestinterceptor.xml">QWebEngineUrlRequestInterceptor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="urlSchemeHandler">
<db:title>const QWebEngineUrlSchemeHandler *QQuickWebEngineProfile::urlSchemeHandler(const QByteArray &amp;<db:emphasis>scheme</db:emphasis>) const</db:title>
<db:para>Returns the custom URL scheme handler register for the URL scheme <db:code role="parameter">scheme</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
