<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Signals &amp; Slots</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of Qt's signals and slots inter-object communication mechanism.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Signals and slots are used for communication between objects. The signals and slots mechanism is a central feature of Qt and probably the part that differs most from the features provided by other frameworks.</db:para>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>In GUI programming, when we change one widget, we often want another widget to be notified. More generally, we want objects of any kind to be able to communicate with one another. For example, if a user clicks a <db:guilabel>Close</db:guilabel> button, we probably want the window's <db:link xlink:href="">close()</db:link> function to be called.</db:para>
<db:para>Older toolkits achieve this kind of communication using callbacks. A callback is a pointer to a function, so if you want a processing function to notify you about some event you pass a pointer to another function (the callback) to the processing function. The processing function then calls the callback when appropriate. Callbacks have two fundamental flaws: Firstly, they are not type-safe. We can never be certain that the processing function will call the callback with the correct arguments. Secondly, the callback is strongly coupled to the processing function since the processing function must know which callback to call.</db:para>
</db:section>
<db:section xml:id="signals-and-slots">
<db:title>Signals and Slots</db:title>
<db:para>In Qt, we have an alternative to the callback technique: We use signals and slots. A signal is emitted when a particular event occurs. Qt's widgets have many predefined signals, but we can always subclass widgets to add our own signals to them. A slot is a function that is called in response to a particular signal. Qt's widgets have many pre-defined slots, but it is common practice to subclass widgets and add your own slots so that you can handle the signals that you are interested in.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/abstract-connections.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The signals and slots mechanism is type safe: The signature of a signal must match the signature of the receiving slot. (In fact a slot may have a shorter signature than the signal it receives because it can ignore extra arguments.) Since the signatures are compatible, the compiler can help us detect type mismatches. Signals and slots are loosely coupled: A class which emits a signal neither knows nor cares which slots receive the signal. Qt's signals and slots mechanism ensures that if you connect a signal to a slot, the slot will be called with the signal's parameters at the right time. Signals and slots can take any number of arguments of any type. They are completely type safe.</db:para>
<db:para>All classes that inherit from <db:link xlink:href="qobject.xml">QObject</db:link> or one of its subclasses (e.g., QWidget) can contain signals and slots. Signals are emitted by objects when they change their state in a way that may be interesting to other objects. This is all the object does to communicate. It does not know or care whether anything is receiving the signals it emits. This is true information encapsulation, and ensures that the object can be used as a software component.</db:para>
<db:para>Slots can be used for receiving signals, but they are also normal member functions. Just as an object does not know if anything receives its signals, a slot does not know if it has any signals connected to it. This ensures that truly independent components can be created with Qt.</db:para>
<db:para>You can connect as many signals as you want to a single slot, and a signal can be connected to as many slots as you need. It is even possible to connect a signal directly to another signal. (This will emit the second signal immediately whenever the first is emitted.)</db:para>
<db:para>Together, signals and slots make up a powerful component programming mechanism.</db:para>
</db:section>
<db:section xml:id="a-small-example">
<db:title>A Small Example</db:title>
<db:para>A minimal C++ class declaration might read:</db:para>
<db:programlisting language="cpp">class Counter
{
public:
    Counter() { m_value = 0; }

    int value() const { return m_value; }
    void setValue(int value);

private:
    int m_value;
};
</db:programlisting>
<db:para>A small <db:link xlink:href="qobject.xml">QObject</db:link>-based class might read:</db:para>
<db:programlisting language="cpp">#include &lt;QObject&gt;

class Counter : public QObject
{
    Q_OBJECT

public:
    Counter() { m_value = 0; }

    int value() const { return m_value; }

public slots:
    void setValue(int value);

signals:
    void valueChanged(int newValue);

private:
    int m_value;
};
</db:programlisting>
<db:para>The <db:link xlink:href="qobject.xml">QObject</db:link>-based version has the same internal state, and provides public methods to access the state, but in addition it has support for component programming using signals and slots. This class can tell the outside world that its state has changed by emitting a signal, valueChanged(), and it has a slot which other objects can send signals to.</db:para>
<db:para>All classes that contain signals or slots must mention <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> at the top of their declaration. They must also derive (directly or indirectly) from <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:para>Slots are implemented by the application programmer. Here is a possible implementation of the Counter::setValue() slot:</db:para>
<db:programlisting language="cpp">void Counter::setValue(int value)
{
    if (value != m_value) {
        m_value = value;
        emit valueChanged(value);
    }
}
</db:programlisting>
<db:para>The emit line emits the signal valueChanged() from the object, with the new value as argument.</db:para>
<db:para>In the following code snippet, we create two Counter objects and connect the first object's valueChanged() signal to the second object's setValue() slot using <db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>():</db:para>
<db:programlisting language="cpp">    Counter a, b;
    QObject::connect(&amp;a, &amp;Counter::valueChanged,
                     &amp;b, &amp;Counter::setValue);

    a.setValue(12);     // a.value() == 12, b.value() == 12
    b.setValue(48);     // a.value() == 12, b.value() == 48
</db:programlisting>
<db:para>Calling a.setValue(12) makes a emit a valueChanged(12) signal, which b will receive in its setValue() slot, i.e. b.setValue(12) is called. Then b emits the same valueChanged() signal, but since no slot has been connected to b's valueChanged() signal, the signal is ignored.</db:para>
<db:para>Note that the setValue() function sets the value and emits the signal only if value != m_value. This prevents infinite looping in the case of cyclic connections (e.g., if b.valueChanged() were connected to a.setValue()).</db:para>
<db:para>By default, for every connection you make, a signal is emitted; two signals are emitted for duplicate connections. You can break all of these connections with a single disconnect() call. If you pass the <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::UniqueConnection</db:link> <db:code role="parameter">type</db:code>, the connection will only be made if it is not a duplicate. If there is already a duplicate (exact same signal to the exact same slot on the same objects), the connection will fail and connect will return false</db:para>
<db:para>This example illustrates that objects can work together without needing to know any information about each other. To enable this, the objects only need to be connected together, and this can be achieved with some simple <db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>() function calls, or with uic's <db:link xlink:href="">automatic connections</db:link> feature.</db:para>
</db:section>
<db:section xml:id="building-the-example">
<db:title>Building the Example</db:title>
<db:para>The C++ preprocessor changes or removes the signals, slots, and emit keywords so that the compiler is presented with standard C++.</db:para>
<db:para>By running the moc on class definitions that contain signals or slots, a C++ source file is produced which should be compiled and linked with the other object files for the application. If you use qmake, the makefile rules to automatically invoke moc will be added to your project's makefile.</db:para>
</db:section>
<db:section xml:id="signals">
<db:title>Signals</db:title>
<db:para>Signals are emitted by an object when its internal state has changed in some way that might be interesting to the object's client or owner. Signals are public access functions and can be emitted from anywhere, but we recommend to only emit them from the class that defines the signal and its subclasses.</db:para>
<db:para>When a signal is emitted, the slots connected to it are usually executed immediately, just like a normal function call. When this happens, the signals and slots mechanism is totally independent of any GUI event loop. Execution of the code following the emit statement will occur once all slots have returned. The situation is slightly different when using <db:link xlink:href="qt.xml#ConnectionType-enum">queued connections</db:link>; in such a case, the code following the emit keyword will continue immediately, and the slots will be executed later.</db:para>
<db:para>If several slots are connected to one signal, the slots will be executed one after the other, in the order they have been connected, when the signal is emitted.</db:para>
<db:para>Signals are automatically generated by the moc and must not be implemented in the .cpp file. They can never have return types (i.e. use void).</db:para>
<db:para>A note about arguments: Our experience shows that signals and slots are more reusable if they do not use special types. If QScrollBar::valueChanged() were to use a special type such as the hypothetical QScrollBar::Range, it could only be connected to slots designed specifically for QScrollBar. Connecting different input widgets together would be impossible.</db:para>
</db:section>
<db:section xml:id="slots">
<db:title>Slots</db:title>
<db:para>A slot is called when a signal connected to it is emitted. Slots are normal C++ functions and can be called normally; their only special feature is that signals can be connected to them.</db:para>
<db:para>Since slots are normal member functions, they follow the normal C++ rules when called directly. However, as slots, they can be invoked by any component, regardless of its access level, via a signal-slot connection. This means that a signal emitted from an instance of an arbitrary class can cause a private slot to be invoked in an instance of an unrelated class.</db:para>
<db:para>You can also define slots to be virtual, which we have found quite useful in practice.</db:para>
<db:para>Compared to callbacks, signals and slots are slightly slower because of the increased flexibility they provide, although the difference for real applications is insignificant. In general, emitting a signal that is connected to some slots, is approximately ten times slower than calling the receivers directly, with non-virtual function calls. This is the overhead required to locate the connection object, to safely iterate over all connections (i.e. checking that subsequent receivers have not been destroyed during the emission), and to marshall any parameters in a generic fashion. While ten non-virtual function calls may sound like a lot, it's much less overhead than any new or delete operation, for example. As soon as you perform a string, vector or list operation that behind the scene requires new or delete, the signals and slots overhead is only responsible for a very small proportion of the complete function call costs. The same is true whenever you do a system call in a slot; or indirectly call more than ten functions. The simplicity and flexibility of the signals and slots mechanism is well worth the overhead, which your users won't even notice.</db:para>
<db:para>Note that other libraries that define variables called signals or slots may cause compiler warnings and errors when compiled alongside a Qt-based application. To solve this problem, #undef the offending preprocessor symbol.</db:para>
</db:section>
<db:section xml:id="meta-object-information">
<db:title>Meta-Object Information</db:title>
<db:para>The meta-object compiler (moc) parses the class declaration in a C++ file and generates C++ code that initializes the meta-object. The meta-object contains the names of all the signal and slot members, as well as pointers to these functions.</db:para>
<db:para>The meta-object contains additional information such as the object's <db:link xlink:href="">class name</db:link>. You can also check if an object <db:link xlink:href="qobject.xml#inherits">inherits</db:link> a specific class, for example:</db:para>
<db:programlisting language="cpp">    if (widget-&gt;inherits(&quot;QAbstractButton&quot;)) {
        QAbstractButton *button = static_cast&lt;QAbstractButton *&gt;(widget);
        button-&gt;toggle();
    }
</db:programlisting>
<db:para>The meta-object information is also used by qobject_cast&lt;T&gt;(), which is similar to <db:link xlink:href="qobject.xml#inherits">QObject::inherits</db:link>() but is less error-prone:</db:para>
<db:programlisting language="cpp">    if (QAbstractButton *button = qobject_cast&lt;QAbstractButton *&gt;(widget))
        button-&gt;toggle();
</db:programlisting>
<db:para>See <db:link xlink:href="metaobjects.xml#meta-object-system">Meta-Object System</db:link> for more information.</db:para>
</db:section>
<db:section xml:id="a-real-example">
<db:title>A Real Example</db:title>
<db:para>Here is a simple commented example of a widget.</db:para>
<db:programlisting language="cpp">#ifndef LCDNUMBER_H
#define LCDNUMBER_H

#include &lt;QFrame&gt;

class LcdNumber : public QFrame
{
    Q_OBJECT
</db:programlisting>
<db:para>LcdNumber inherits <db:link xlink:href="qobject.xml">QObject</db:link>, which has most of the signal-slot knowledge, via QFrame and QWidget. It is somewhat similar to the built-in QLCDNumber widget.</db:para>
<db:para>The <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro is expanded by the preprocessor to declare several member functions that are implemented by the moc; if you get compiler errors along the lines of &quot;undefined reference to vtable for LcdNumber&quot;, you have probably forgotten to <db:link xlink:href="">run the moc</db:link> or to include the moc output in the link command.</db:para>
<db:programlisting language="cpp">public:
    LcdNumber(QWidget *parent = 0);
</db:programlisting>
<db:para>It's not obviously relevant to the moc, but if you inherit QWidget you almost certainly want to have the parent argument in your constructor and pass it to the base class's constructor.</db:para>
<db:para>Some destructors and member functions are omitted here; the moc ignores member functions.</db:para>
<db:programlisting language="cpp">signals:
    void overflow();
</db:programlisting>
<db:para>LcdNumber emits a signal when it is asked to show an impossible value.</db:para>
<db:para>If you don't care about overflow, or you know that overflow cannot occur, you can ignore the overflow() signal, i.e. don't connect it to any slot.</db:para>
<db:para>If on the other hand you want to call two different error functions when the number overflows, simply connect the signal to two different slots. Qt will call both (in the order they were connected).</db:para>
<db:programlisting language="cpp">public slots:
    void display(int num);
    void display(double num);
    void display(const QString &amp;str);
    void setHexMode();
    void setDecMode();
    void setOctMode();
    void setBinMode();
    void setSmallDecimalPoint(bool point);
};

#endif
</db:programlisting>
<db:para>A slot is a receiving function used to get information about state changes in other widgets. LcdNumber uses it, as the code above indicates, to set the displayed number. Since display() is part of the class's interface with the rest of the program, the slot is public.</db:para>
<db:para>Several of the example programs connect the <db:link xlink:href="">valueChanged()</db:link> signal of a QScrollBar to the display() slot, so the LCD number continuously shows the value of the scroll bar.</db:para>
<db:para>Note that display() is overloaded; Qt will select the appropriate version when you connect a signal to the slot. With callbacks, you'd have to find five different names and keep track of the types yourself.</db:para>
<db:para>Some irrelevant member functions have been omitted from this example.</db:para>
</db:section>
<db:section xml:id="signals-and-slots-with-default-arguments">
<db:title>Signals And Slots With Default Arguments</db:title>
<db:para>The signatures of signals and slots may contain arguments, and the arguments can have default values. Consider <db:link xlink:href="qobject.xml#destroyed">QObject::destroyed</db:link>():</db:para>
<db:programlisting language="cpp">void destroyed(QObject* = 0);
</db:programlisting>
<db:para>When a <db:link xlink:href="qobject.xml">QObject</db:link> is deleted, it emits this <db:link xlink:href="qobject.xml#destroyed">QObject::destroyed</db:link>() signal. We want to catch this signal, wherever we might have a dangling reference to the deleted <db:link xlink:href="qobject.xml">QObject</db:link>, so we can clean it up. A suitable slot signature might be:</db:para>
<db:programlisting language="cpp">void objectDestroyed(QObject* obj = 0);
</db:programlisting>
<db:para>To connect the signal to the slot, we use <db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>(). There are several ways to connect signal and slots. The first is to use function pointers:</db:para>
<db:programlisting language="cpp">connect(sender, &amp;QObject::destroyed, this, &amp;MyObject::objectDestroyed);
</db:programlisting>
<db:para>There are several advantages to using connect() with function pointers. First, it allows the compiler to check that the signal's arguments are compatible with the slot's arguments. Arguments can also be implicitly converted by the compiler, if needed.</db:para>
<db:para>You can also connect to functors or C++11 lamdas:</db:para>
<db:programlisting language="cpp">connect(sender, &amp;QObject::destroyed, [=](){ this-&gt;m_objects.remove(sender); });
</db:programlisting>
<db:para>Note that if your compiler does not support C++11 variadic templates, this syntax only works if the signal and slot have 6 arguments or less.</db:para>
<db:para>The other way to connect a signal to a slot is to use <db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>() and the SIGNAL and SLOT macros. The rule about whether to include arguments or not in the SIGNAL() and SLOT() macros, if the arguments have default values, is that the signature passed to the SIGNAL() macro must <db:emphasis>not</db:emphasis> have fewer arguments than the signature passed to the SLOT() macro.</db:para>
<db:para>All of these would work:</db:para>
<db:programlisting language="cpp">connect(sender, SIGNAL(destroyed(QObject*)), this, SLOT(objectDestroyed(Qbject*)));
connect(sender, SIGNAL(destroyed(QObject*)), this, SLOT(objectDestroyed()));
connect(sender, SIGNAL(destroyed()), this, SLOT(objectDestroyed()));
</db:programlisting>
<db:para>But this one won't work:</db:para>
<db:programlisting language="cpp">connect(sender, SIGNAL(destroyed()), this, SLOT(objectDestroyed(QObject*)));
</db:programlisting>
<db:para>...because the slot will be expecting a <db:link xlink:href="qobject.xml">QObject</db:link> that the signal will not send. This connection will report a runtime error.</db:para>
<db:para>Note that signal and slot arguments are not checked by the compiler when using this <db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>() overload.</db:para>
</db:section>
<db:section xml:id="advanced-signals-and-slots-usage">
<db:title>Advanced Signals and Slots Usage</db:title>
<db:para>For cases where you may require information on the sender of the signal, Qt provides the <db:link xlink:href="qobject.xml#sender">QObject::sender</db:link>() function, which returns a pointer to the object that sent the signal.</db:para>
<db:para>The <db:link xlink:href="qsignalmapper.xml">QSignalMapper</db:link> class is provided for situations where many signals are connected to the same slot and the slot needs to handle each signal differently.</db:para>
<db:para>Suppose you have three push buttons that determine which file you will open: &quot;Tax File&quot;, &quot;Accounts File&quot;, or &quot;Report File&quot;.</db:para>
<db:para>In order to open the correct file, you use <db:link xlink:href="qsignalmapper.xml#setMapping">QSignalMapper::setMapping</db:link>() to map all the clicked() signals to a <db:link xlink:href="qsignalmapper.xml">QSignalMapper</db:link> object. Then you connect the file's QPushButton::clicked() signal to the <db:link xlink:href="qsignalmapper.xml#map">QSignalMapper::map</db:link>() slot.</db:para>
<db:programlisting language="cpp">    signalMapper = new QSignalMapper(this);
    signalMapper-&gt;setMapping(taxFileButton, QString(&quot;taxfile.txt&quot;));
    signalMapper-&gt;setMapping(accountFileButton, QString(&quot;accountsfile.txt&quot;));
    signalMapper-&gt;setMapping(reportFileButton, QString(&quot;reportfile.txt&quot;));

    connect(taxFileButton, &amp;QPushButton::clicked,
        signalMapper, &amp;QSignalMapper::map);
    connect(accountFileButton, &amp;QPushButton::clicked,
        signalMapper, &amp;QSignalMapper::map);
    connect(reportFileButton, &amp;QPushButton::clicked,
        signalMapper, &amp;QSignalMapper::map);
</db:programlisting>
<db:para>Then, you connect the <db:link xlink:href="qsignalmapper.xml#mapped">mapped</db:link>() signal to readFile() where a different file will be opened, depending on which push button is pressed.</db:para>
<db:programlisting language="cpp">    connect(signalMapper, SIGNAL(mapped(QString)),
        this, SLOT(readFile(QString)));
</db:programlisting>
<db:anchor xml:id="A3rd-party-signals-and-slots"/>
<db:section xml:id="using-qt-with-3rd-party-signals-and-slots">
<db:title>Using Qt with 3rd Party Signals and Slots</db:title>
<db:para>It is possible to use Qt with a 3rd party signal/slot mechanism. You can even use both mechanisms in the same project. Just add the following line to your qmake project (.pro) file.</db:para>
<db:programlisting language="cpp">CONFIG += no_keywords
</db:programlisting>
<db:para>It tells Qt not to define the moc keywords signals, slots, and emit, because these names will be used by a 3rd party library, e.g. Boost. Then to continue using Qt signals and slots with the no_keywords flag, simply replace all uses of the Qt moc keywords in your sources with the corresponding Qt macros <db:link xlink:href="qobject.xml#Q_SIGNALS">Q_SIGNALS</db:link> (or <db:link xlink:href="qobject.xml#Q_SIGNAL">Q_SIGNAL</db:link>), <db:link xlink:href="qobject.xml#Q_SLOTS">Q_SLOTS</db:link> (or <db:link xlink:href="qobject.xml#Q_SLOT">Q_SLOT</db:link>), and <db:link xlink:href="qobject.xml#Q_EMIT">Q_EMIT</db:link>.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="metaobjects.xml#meta-object-system">Meta-Object System</db:link></db:member>
<db:member><db:link xlink:href="properties.xml#qt-s-property-system">Qt's Property System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
