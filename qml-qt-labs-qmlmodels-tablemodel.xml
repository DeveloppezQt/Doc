<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TableModel QML Type</db:title>
<db:productname>QtQmlModels</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Models Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Encapsulates a simple table model.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Qt.labs.qmlmodels</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml">TableModel</db:link> type stores JavaScript/JSON objects as data for a table model that can be used with <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>. It is intended to support very simple models without requiring the creation of a custom <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link> subclass in C++.</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Window
import Qt.labs.qmlmodels

Window {
    width: 400
    height: 400
    visible: true

    TableView {
        anchors.fill: parent
        columnSpacing: 1
        rowSpacing: 1
        boundsBehavior: Flickable.StopAtBounds

        model: TableModel {
            TableModelColumn { display: &quot;checked&quot; }
            TableModelColumn { display: &quot;amount&quot; }
            TableModelColumn { display: &quot;fruitType&quot; }
            TableModelColumn { display: &quot;fruitName&quot; }
            TableModelColumn { display: &quot;fruitPrice&quot; }

            // Each row is one type of fruit that can be ordered
            rows: [
                {
                    // Each property is one cell/column.
                    checked: false,
                    amount: 1,
                    fruitType: &quot;Apple&quot;,
                    fruitName: &quot;Granny Smith&quot;,
                    fruitPrice: 1.50
                },
                {
                    checked: true,
                    amount: 4,
                    fruitType: &quot;Orange&quot;,
                    fruitName: &quot;Navel&quot;,
                    fruitPrice: 2.50
                },
                {
                    checked: false,
                    amount: 1,
                    fruitType: &quot;Banana&quot;,
                    fruitName: &quot;Cavendish&quot;,
                    fruitPrice: 3.50
                }
            ]
        }
        delegate:  TextInput {
            text: model.display
            padding: 12
            selectByMouse: true

            onAccepted: model.display = text

            Rectangle {
                anchors.fill: parent
                color: &quot;#efefef&quot;
                z: -1
            }
        }
    }
}
</db:programlisting>
<db:para>The model's initial row data is set with either the <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#rows-prop">rows</db:link> property or by calling <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#appendRow-method">appendRow</db:link>(). Each column in the model is specified by declaring a <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodelcolumn.xml">TableModelColumn</db:link> instance, where the order of each instance determines its column index. Once the model's <db:link xlink:href="qml-qtqml-component.xml#completed-signal">Component::completed</db:link>() signal has been emitted, the columns and roles will have been established and are then fixed for the lifetime of the model.</db:para>
<db:para>To access a specific row, the <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#getRow-method">getRow</db:link>() function can be used. It's also possible to access the model's JavaScript data directly via the <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#rows-prop">rows</db:link> property, but it is not possible to modify the model data this way.</db:para>
<db:para>To add new rows, use <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#appendRow-method">appendRow</db:link>() and <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#insertRow-method">insertRow</db:link>(). To modify existing rows, use <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#setRow-method">setRow</db:link>(), <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#moveRow-method">moveRow</db:link>(), <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#removeRow-method">removeRow</db:link>(), and <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#clear-method">clear</db:link>().</db:para>
<db:para>It is also possible to modify the model's data via the delegate, as shown in the example above:</db:para>
<db:programlisting language="qml">        delegate:  TextInput {
            text: model.display
            padding: 12
            selectByMouse: true

            onAccepted: model.display = text

            Rectangle {
                anchors.fill: parent
                color: &quot;#efefef&quot;
                z: -1
            }
        }
</db:programlisting>
<db:para>If the type of the data at the modified role does not match the type of the data that is set, it will be automatically converted via <db:link xlink:href="qvariant.xml#canConvert-2">QVariant</db:link>.</db:para>
<db:section xml:id="supported-row-data-structures">
<db:title>Supported Row Data Structures</db:title>
<db:para><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml">TableModel</db:link> is designed to work with JavaScript/JSON data, where each row is a simple key-pair object:</db:para>
<db:programlisting language="cpp">{
    // Each property is one cell/column.
    checked: false,
    amount: 1,
    fruitType: &quot;Apple&quot;,
    fruitName: &quot;Granny Smith&quot;,
    fruitPrice: 1.50
},
// ...
</db:programlisting>
<db:para>As model manipulation in Qt is done via row and column indices, and because object keys are unordered, each column must be specified via <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodelcolumn.xml">TableModelColumn</db:link>. This allows mapping Qt's built-in roles to any property in each row object.</db:para>
<db:para>Complex row structures are supported, but with limited functionality. As <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml">TableModel</db:link> has no way of knowing how each row is structured, it cannot manipulate it. As a consequence of this, the copy of the model data that <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml">TableModel</db:link> has stored in <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#rows-prop">rows</db:link> is not kept in sync with the source data that was set in QML. For these reasons, <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml">TableModel</db:link> relies on the user to handle simple data manipulation.</db:para>
<db:para>For example, suppose you wanted to have several roles per column. One way of doing this is to use a data source where each row is an array and each cell is an object. To use this data source with <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml">TableModel</db:link>, define a getter and setter:</db:para>
<db:programlisting language="cpp">TableModel {
    TableModelColumn {
        display: function(modelIndex) { return rows[modelIndex.row][0].checked }
        setDisplay: function(modelIndex, cellData) {
                rows[modelIndex.row][0].checked = cellData
            }
    }
    // ...

    rows: [
        [
            { checked: false, checkable: true },
            { amount: 1 },
            { fruitType: &quot;Apple&quot; },
            { fruitName: &quot;Granny Smith&quot; },
            { fruitPrice: 1.50 }
        ]
        // ...
    ]
}
</db:programlisting>
<db:para>The row above is one example of a complex row.</db:para>
<db:note>
<db:para>Row manipulation functions such as <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#appendRow-method">appendRow</db:link>(), <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#removeRow-method">removeRow</db:link>(), etc. are not supported when using complex rows.</db:para>
</db:note>
</db:section>
<db:section xml:id="using-delegatechooser-with-tablemodel">
<db:title>Using DelegateChooser with TableModel</db:title>
<db:para>For most real world use cases, it is recommended to use <db:link xlink:href="qml-qt-labs-qmlmodels-delegatechooser.xml">DelegateChooser</db:link> as the delegate of a <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> that uses <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml">TableModel</db:link>. This allows you to use specific roles in the relevant delegates. For example, the snippet above can be rewritten to use <db:link xlink:href="qml-qt-labs-qmlmodels-delegatechooser.xml">DelegateChooser</db:link> like so:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls
import Qt.labs.qmlmodels

ApplicationWindow {
    width: 400
    height: 400
    visible: true

    TableView {
        anchors.fill: parent
        columnSpacing: 1
        rowSpacing: 1
        boundsBehavior: Flickable.StopAtBounds

        model: TableModel {
            TableModelColumn { display: &quot;checked&quot; }
            TableModelColumn { display: &quot;amount&quot; }
            TableModelColumn { display: &quot;fruitType&quot; }
            TableModelColumn { display: &quot;fruitName&quot; }
            TableModelColumn { display: &quot;fruitPrice&quot; }

            // Each row is one type of fruit that can be ordered
            rows: [
                {
                    // Each property is one cell/column.
                    checked: false,
                    amount: 1,
                    fruitType: &quot;Apple&quot;,
                    fruitName: &quot;Granny Smith&quot;,
                    fruitPrice: 1.50
                },
                {
                    checked: true,
                    amount: 4,
                    fruitType: &quot;Orange&quot;,
                    fruitName: &quot;Navel&quot;,
                    fruitPrice: 2.50
                },
                {
                    checked: false,
                    amount: 1,
                    fruitType: &quot;Banana&quot;,
                    fruitName: &quot;Cavendish&quot;,
                    fruitPrice: 3.50
                }
            ]
        }
        delegate: DelegateChooser {
            DelegateChoice {
                column: 0
                delegate: CheckBox {
                    checked: model.display
                    onToggled: model.display = checked
                }
            }
            DelegateChoice {
                column: 1
                delegate: SpinBox {
                    value: model.display
                    onValueModified: model.display = value
                }
            }
            DelegateChoice {
                delegate: TextField {
                    text: model.display
                    selectByMouse: true
                    implicitWidth: 140
                    onAccepted: model.display = text
                }
            }
        }
    }
}
</db:programlisting>
<db:para>The most specific delegates are declared first: the columns at index <db:code>0</db:code> and <db:code>1</db:code> have <db:code>bool</db:code> and <db:code>integer</db:code> data types, so they use a <db:link xlink:href="qml-qtquick-controls-checkbox.xml">CheckBox</db:link> and <db:link xlink:href="qml-qtquick-controls-spinbox.xml">SpinBox</db:link>, respectively. The remaining columns can simply use a <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>, and so that delegate is declared last as a fallback.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodelcolumn.xml">TableModelColumn</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link></db:member>
<db:member><db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="columnCount-prop">
<db:title>[read-only] columnCount : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>columnCount</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This read-only property holds the number of columns in the model.</db:para>
<db:para>The number of columns is fixed for the lifetime of the model after the <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#rows-prop">rows</db:link> property is set or <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#appendRow-method">appendRow</db:link>() is called for the first time.</db:para>
</db:section>
<db:section xml:id="rowCount-prop">
<db:title>[read-only] rowCount : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>rowCount</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This read-only property holds the number of rows in the model.</db:para>
<db:para>This value changes whenever rows are added or removed from the model.</db:para>
</db:section>
<db:section xml:id="rows-prop">
<db:title>rows : object</db:title>
<db:fieldsynopsis>
<db:type>object</db:type>
<db:varname>rows</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the model data in the form of an array of rows:</db:para>
<db:programlisting language="qml">            rows: [
                {
                    // Each property is one cell/column.
                    checked: false,
                    amount: 1,
                    fruitType: &quot;Apple&quot;,
                    fruitName: &quot;Granny Smith&quot;,
                    fruitPrice: 1.50
                },
                {
                    checked: true,
                    amount: 4,
                    fruitType: &quot;Orange&quot;,
                    fruitName: &quot;Navel&quot;,
                    fruitPrice: 2.50
                },
                {
                    checked: false,
                    amount: 1,
                    fruitType: &quot;Banana&quot;,
                    fruitName: &quot;Cavendish&quot;,
                    fruitPrice: 3.50
                }
            ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#getRow-method">getRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#setRow-method">setRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#moveRow-method">moveRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#appendRow-method">appendRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#insertRow-method">insertRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#clear-method">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#rowCount-prop">rowCount</db:link></db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#columnCount-prop">columnCount</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="appendRow-method">
<db:title>appendRow(object <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Adds a new row to the end of the model, with the values (cells) in <db:code role="parameter">row</db:code>.</db:para>
<db:programlisting language="cpp">model.appendRow({
    checkable: true,
    amount: 1,
    fruitType: &quot;Pear&quot;,
    fruitName: &quot;Williams&quot;,
    fruitPrice: 1.50,
})
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#insertRow-method">insertRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#setRow-method">setRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#removeRow-method">removeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear-method">
<db:title>clear()</db:title>
<db:para>Removes all rows from the model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#removeRow-method">removeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data-method">
<db:title>variant data(QModelIndex <db:emphasis>index</db:emphasis>, string <db:emphasis>role</db:emphasis>)</db:title>
<db:para>Returns the data from the table cell at the given <db:code role="parameter">index</db:code> belonging to the given <db:code role="parameter">role</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#setData-method">setData</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#index-method">index</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getRow-method">
<db:title>object getRow(int <db:emphasis>rowIndex</db:emphasis>)</db:title>
<db:para>Returns the row at <db:code role="parameter">rowIndex</db:code> in the model.</db:para>
<db:para>Note that this equivalent to accessing the row directly through the <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#rows-prop">rows</db:link> property:</db:para>
<db:programlisting language="cpp">Component.onCompleted: {
    // These two lines are equivalent.
    console.log(model.getRow(0).display);
    console.log(model.rows[0].fruitName);
}
</db:programlisting>
<db:note>
<db:para>the returned object cannot be used to modify the contents of the model; use <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#setRow-method">setRow</db:link>() instead.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#setRow-method">setRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#appendRow-method">appendRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#insertRow-method">insertRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#removeRow-method">removeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#moveRow-method">moveRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="index-method">
<db:title>QModelIndex index(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> object referencing the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code>, which can be passed to the <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#data-method">data</db:link>() function to get the data from that cell, or to <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#setData-method">setData</db:link>() to edit the contents of that cell.</db:para>
<db:programlisting language="cpp">import QtQml 2.14
import Qt.labs.qmlmodels 1.0

TableModel {
    id: model

    TableModelColumn { display: &quot;fruitType&quot; }
    TableModelColumn { display: &quot;fruitPrice&quot; }

    rows: [
        { fruitType: &quot;Apple&quot;, fruitPrice: 1.50 },
        { fruitType: &quot;Orange&quot;, fruitPrice: 2.50 }
    ]

    Component.onCompleted: {
        for (var r = 0; r &amp;lt; model.rowCount; ++r) {
            console.log(&quot;An &quot; + model.data(model.index(r, 0)).display +
                        &quot; costs &quot; + model.data(model.index(r, 1)).display.toFixed(2))
        }
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodelindex-and-related-classes-in-qml.xml">QModelIndex and related Classes in QML</db:link></db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#data-method">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertRow-method">
<db:title>insertRow(int <db:emphasis>rowIndex</db:emphasis>, object <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Adds a new row to the list model at position <db:code role="parameter">rowIndex</db:code>, with the values (cells) in <db:code role="parameter">row</db:code>.</db:para>
<db:programlisting language="cpp">model.insertRow(2, {
    checkable: true, checked: false,
    amount: 1,
    fruitType: &quot;Pear&quot;,
    fruitName: &quot;Williams&quot;,
    fruitPrice: 1.50,
})
</db:programlisting>
<db:para>The <db:code role="parameter">rowIndex</db:code> must be to an existing item in the list, or one past the end of the list (equivalent to <db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#appendRow-method">appendRow</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#appendRow-method">appendRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#setRow-method">setRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#removeRow-method">removeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#rowCount-prop">rowCount</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveRow-method">
<db:title>moveRow(int <db:emphasis>fromRowIndex</db:emphasis>, int <db:emphasis>toRowIndex</db:emphasis>, int <db:emphasis>rows</db:emphasis>)</db:title>
<db:para>Moves <db:code role="parameter">rows</db:code> from the index at <db:code role="parameter">fromRowIndex</db:code> to the index at <db:code role="parameter">toRowIndex</db:code>.</db:para>
<db:para>The from and to ranges must exist; for example, to move the first 3 items to the end of the list:</db:para>
<db:programlisting language="cpp">model.moveRow(0, model.rowCount - 3, 3)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#appendRow-method">appendRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#insertRow-method">insertRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#removeRow-method">removeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#rowCount-prop">rowCount</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeRow-method">
<db:title>removeRow(int <db:emphasis>rowIndex</db:emphasis>, int <db:emphasis>rows</db:emphasis> = 1)</db:title>
<db:para>Removes a number of <db:code role="parameter">rows</db:code> at <db:code role="parameter">rowIndex</db:code> from the model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#clear-method">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#rowCount-prop">rowCount</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData-method">
<db:title>bool setData(QModelIndex <db:emphasis>index</db:emphasis>, string <db:emphasis>role</db:emphasis>, variant <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Inserts or updates the data field named by <db:code role="parameter">role</db:code> in the table cell at the given <db:code role="parameter">index</db:code> with <db:code role="parameter">value</db:code>. Returns true if sucessful, false if not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#data-method">data</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#index-method">index</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRow-method">
<db:title>setRow(int <db:emphasis>rowIndex</db:emphasis>, object <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Changes the row at <db:code role="parameter">rowIndex</db:code> in the model with <db:code role="parameter">row</db:code>.</db:para>
<db:para>All columns/cells must be present in <db:code>row</db:code>, and in the correct order.</db:para>
<db:programlisting language="cpp">model.setRow(0, {
    checkable: true,
    amount: 1,
    fruitType: &quot;Pear&quot;,
    fruitName: &quot;Williams&quot;,
    fruitPrice: 1.50,
})
</db:programlisting>
<db:para>If <db:code role="parameter">rowIndex</db:code> is equal to <db:code>rowCount()</db:code>, then a new row is appended to the model. Otherwise, <db:code role="parameter">rowIndex</db:code> must point to an existing row in the model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#appendRow-method">appendRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#insertRow-method">insertRow</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qt-labs-qmlmodels-tablemodel.xml#rowCount-prop">rowCount</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
