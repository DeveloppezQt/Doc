<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Flickable QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a surface that can be &quot;flicked&quot;.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.14</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml" xlink:role="">GridView</db:link>, <db:link xlink:href="qml-qtquick-listview.xml" xlink:role="">ListView</db:link>, and <db:link xlink:href="qml-qtquick-tableview.xml" xlink:role="">TableView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Flickable is part of <db:simplelist><db:member>qtquick-input</db:member><db:member>qtquick-containers</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Flickable item places its children on a surface that can be dragged and flicked, causing the view onto the child items to scroll. This behavior forms the basis of Items that are designed to show large numbers of child items, such as <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> and <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.</db:para>
<db:para>In traditional user interfaces, views can be scrolled using standard controls, such as scroll bars and arrow buttons. In some situations, it is also possible to drag the view directly by pressing and holding a mouse button while moving the cursor. In touch-based user interfaces, this dragging action is often complemented with a flicking action, where scrolling continues after the user has stopped touching the view.</db:para>
<db:para>Flickable does not automatically clip its contents. If it is not used as a full-screen item, you should consider setting the <db:link xlink:href="qml-qtquick-item.xml#clip-prop">clip</db:link> property to true.</db:para>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/flickable.gif"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:para>The following example shows a small view onto a large image in which the user can drag or flick the image in order to view different parts of it.</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Flickable {
    width: 200; height: 200
    contentWidth: image.width; contentHeight: image.height

    Image { id: image; source: &quot;bigImage.png&quot; }
}
</db:programlisting>
<db:para>Items declared as children of a Flickable are automatically parented to the Flickable's <db:link xlink:href="qml-qtquick-flickable.xml#contentItem-prop">contentItem</db:link>. This should be taken into account when operating on the children of the Flickable; it is usually the children of <db:code>contentItem</db:code> that are relevant. For example, the bound of Items added to the Flickable will be available by <db:code>contentItem.childrenRect</db:code></db:para>
</db:section>
<db:section xml:id="examples-of-contentx-and-contenty">
<db:title>Examples of contentX and contentY</db:title>
<db:para>The following images demonstrate a flickable being flicked in various directions and the resulting <db:link xlink:href="qml-qtquick-flickable.xml#contentX-prop">contentX</db:link> and <db:link xlink:href="qml-qtquick-flickable.xml#contentY-prop">contentY</db:link> values. The blue square represents the flickable's content, and the black border represents the bounds of the flickable.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/flickable-contentXY-resting.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para>The <db:code>contentX</db:code> and <db:code>contentY</db:code> are both <db:code>0</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/flickable-contentXY-top-left.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para>The <db:code>contentX</db:code> and the <db:code>contentY</db:code> are both <db:code>50</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/flickable-contentXY-top-right.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para>The <db:code>contentX</db:code> is <db:code>-50</db:code> and the <db:code>contentY</db:code> is <db:code>50</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/flickable-contentXY-bottom-right.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para>The <db:code>contentX</db:code> and the <db:code>contentY</db:code> are both <db:code>-50</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/flickable-contentXY-bottom-left.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para>The <db:code>contentX</db:code> is <db:code>50</db:code> and the <db:code>contentY</db:code> is <db:code>-50</db:code>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="limitations">
<db:title>Limitations</db:title>
<db:note>
<db:para>Due to an implementation detail, items placed inside a Flickable cannot anchor to the Flickable. Instead, use <db:link xlink:href="qml-qtquick-item.xml#parent-prop">parent</db:link>, which refers to the Flickable's <db:link xlink:href="qml-qtquick-flickable.xml#contentItem-prop">contentItem</db:link>. The size of the content item is determined by <db:link xlink:href="qml-qtquick-flickable.xml#contentWidth-prop">contentWidth</db:link> and <db:link xlink:href="qml-qtquick-flickable.xml#contentHeight-prop">contentHeight</db:link>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="contentX-prop">
<db:title>contentX : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>contentX</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">contentY : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>contentY</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties hold the surface coordinate currently at the top-left corner of the Flickable. For example, if you flick an image up 100 pixels, <db:code>contentY</db:code> will increase by 100.</db:para>
<db:note>
<db:para>If you flick back to the origin (the top-left corner), after the rebound animation, <db:code>contentX</db:code> will settle to the same value as <db:code>originX</db:code>, and <db:code>contentY</db:code> to <db:code>originY</db:code>. These are usually (0,0), however <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> and <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> may have an arbitrary origin due to delegate size variation, or item insertion/removal outside the visible region. So if you want to implement something like a vertical scrollbar, one way is to use <db:code>y: (contentY - originY) * (height / contentHeight)</db:code> for the position; another way is to use the normalized values in <db:link xlink:href="qml-qtquick-flickable.xml#visibleArea-prop">visibleArea</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#examples-of-contentx-and-contenty">Examples of contentX and contentY</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#originX-prop">originX</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#originY-prop">originY</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalVelocity-prop">
<db:title>horizontalVelocity : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>horizontalVelocity</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">verticalVelocity : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>verticalVelocity</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The instantaneous velocity of movement along the x and y axes, in pixels/sec.</db:para>
<db:para>The reported velocity is smoothed to avoid erratic output.</db:para>
<db:para>Note that for views with a large content size (more than 10 times the view size), the velocity of the flick may exceed the velocity of the touch in the case of multiple quick consecutive flicks. This allows the user to flick faster through large content.</db:para>
</db:section>
<db:section xml:id="atXBeginning-prop">
<db:title>atXBeginning : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>atXBeginning</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">atXEnd : bool</db:bridgehead><db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>atXEnd</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">atYBeginning : bool</db:bridgehead><db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>atYBeginning</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">atYEnd : bool</db:bridgehead><db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>atYEnd</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties are true if the flickable view is positioned at the beginning, or end respectively.</db:para>
</db:section>
<db:section xml:id="contentHeight-prop">
<db:title>contentHeight : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>contentHeight</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">contentWidth : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>contentWidth</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The dimensions of the content (the surface controlled by Flickable). This should typically be set to the combined size of the items placed in the Flickable.</db:para>
<db:para>The following snippet shows how these properties are used to display an image that is larger than the Flickable item itself:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Flickable {
    width: 200; height: 200
    contentWidth: image.width; contentHeight: image.height

    Image { id: image; source: &quot;bigImage.png&quot; }
}
</db:programlisting>
<db:para>In some cases, the content dimensions can be automatically set based on the <db:link xlink:href="qml-qtquick-item.xml#childrenRect.width-prop">childrenRect.width</db:link> and <db:link xlink:href="qml-qtquick-item.xml#childrenRect.height-prop">childrenRect.height</db:link> properties of the <db:link xlink:href="qml-qtquick-flickable.xml#contentItem-prop">contentItem</db:link>. For example, the previous snippet could be rewritten with:</db:para>
<db:programlisting language="cpp">contentWidth: contentItem.childrenRect.width; contentHeight: contentItem.childrenRect.height
</db:programlisting>
<db:para>Though this assumes that the origin of the childrenRect is 0,0.</db:para>
</db:section>
<db:section xml:id="bottomMargin-prop">
<db:title>bottomMargin : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>bottomMargin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">leftMargin : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>leftMargin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">rightMargin : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>rightMargin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">topMargin : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>topMargin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties hold the margins around the content. This space is reserved in addition to the <db:link xlink:href="qml-qtquick-flickable.xml#contentWidth-prop">contentWidth</db:link> and <db:link xlink:href="qml-qtquick-flickable.xml#contentHeight-prop">contentHeight</db:link>.</db:para>
</db:section>
<db:section xml:id="originX-prop">
<db:title>originX : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>originX</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">originY : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>originY</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties hold the origin of the content. This value always refers to the top-left position of the content regardless of layout direction.</db:para>
<db:para>This is usually (0,0), however <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> and <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> may have an arbitrary origin due to delegate size variation, or item insertion/removal outside the visible region.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#contentX-prop">contentX</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#contentY-prop">contentY</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flicking-prop">
<db:title>flicking : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>flicking</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">flickingHorizontally : bool</db:bridgehead><db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>flickingHorizontally</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">flickingVertically : bool</db:bridgehead><db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>flickingVertically</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties describe whether the view is currently moving horizontally, vertically or in either direction, due to the user flicking the view.</db:para>
</db:section>
<db:section xml:id="dragging-prop">
<db:title>dragging : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>dragging</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">draggingHorizontally : bool</db:bridgehead><db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>draggingHorizontally</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">draggingVertically : bool</db:bridgehead><db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>draggingVertically</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties describe whether the view is currently moving horizontally, vertically or in either direction, due to the user dragging the view.</db:para>
</db:section>
<db:section xml:id="moving-prop">
<db:title>moving : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>moving</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">movingHorizontally : bool</db:bridgehead><db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>movingHorizontally</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">movingVertically : bool</db:bridgehead><db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>movingVertically</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties describe whether the view is currently moving horizontally, vertically or in either direction, due to the user either dragging or flicking the view.</db:para>
</db:section>
<db:section xml:id="boundsBehavior-prop">
<db:title>boundsBehavior : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>boundsBehavior</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the surface may be dragged beyond the Flickable's boundaries, or overshoot the Flickable's boundaries when flicked.</db:para>
<db:para>When the <db:link xlink:href="qml-qtquick-flickable.xml#boundsMovement-prop">boundsMovement</db:link> is <db:code>Flickable.FollowBoundsBehavior</db:code>, a value other than <db:code>Flickable.StopAtBounds</db:code> will give a feeling that the edges of the view are soft, rather than a hard physical boundary.</db:para>
<db:para>The <db:code>boundsBehavior</db:code> can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Flickable.StopAtBounds - the contents can not be dragged beyond the boundary of the flickable, and flicks will not overshoot.</db:para>
</db:listitem>
<db:listitem>
<db:para>Flickable.DragOverBounds - the contents can be dragged beyond the boundary of the Flickable, but flicks will not overshoot.</db:para>
</db:listitem>
<db:listitem>
<db:para>Flickable.OvershootBounds - the contents can overshoot the boundary when flicked, but the content cannot be dragged beyond the boundary of the flickable. (since <db:code>QtQuick 2.5</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para>Flickable.DragAndOvershootBounds (default) - the contents can be dragged beyond the boundary of the Flickable, and can overshoot the boundary when flicked.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#horizontalOvershoot-prop">horizontalOvershoot</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#verticalOvershoot-prop">verticalOvershoot</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#boundsMovement-prop">boundsMovement</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundsMovement-prop">
<db:title>[since 5.10] boundsMovement : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>boundsMovement</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the flickable will give a feeling that the edges of the view are soft, rather than a hard physical boundary.</db:para>
<db:para>The <db:code>boundsMovement</db:code> can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Flickable.StopAtBounds - this allows implementing custom edge effects where the contents do not follow drags or flicks beyond the bounds of the flickable. The values of <db:link xlink:href="qml-qtquick-flickable.xml#horizontalOvershoot-prop">horizontalOvershoot</db:link> and <db:link xlink:href="qml-qtquick-flickable.xml#verticalOvershoot-prop">verticalOvershoot</db:link> can be utilized to implement custom edge effects.</db:para>
</db:listitem>
<db:listitem>
<db:para>Flickable.FollowBoundsBehavior (default) - whether the contents follow drags or flicks beyond the bounds of the flickable is determined by <db:link xlink:href="qml-qtquick-flickable.xml#boundsBehavior-prop">boundsBehavior</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The following example keeps the contents within bounds and instead applies a flip effect when flicked over horizontal bounds:</db:para>
<db:programlisting language="cpp">Flickable {
    id: flickable
    boundsMovement: Flickable.StopAtBounds
    boundsBehavior: Flickable.DragAndOvershootBounds
    transform: Rotation {
        axis { x: 0; y: 1; z: 0 }
        origin.x: flickable.width / 2
        origin.y: flickable.height / 2
        angle: Math.min(30, Math.max(-30, flickable.horizontalOvershoot))
    }
}
</db:programlisting>
<db:para>The following example keeps the contents within bounds and instead applies an opacity effect when dragged over vertical bounds:</db:para>
<db:programlisting language="cpp">Flickable {
    boundsMovement: Flickable.StopAtBounds
    boundsBehavior: Flickable.DragOverBounds
    opacity: Math.max(0.5, 1.0 - Math.abs(verticalOvershoot) / height)
}
</db:programlisting>
<db:para>This property was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#boundsBehavior-prop">boundsBehavior</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#verticalOvershoot-prop">verticalOvershoot</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#horizontalOvershoot-prop">horizontalOvershoot</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentItem-prop">
<db:title>contentItem : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>contentItem</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The internal item that contains the Items to be moved in the Flickable.</db:para>
<db:para>Items declared as children of a Flickable are automatically parented to the Flickable's contentItem.</db:para>
<db:para>Items created dynamically need to be explicitly parented to the <db:emphasis>contentItem</db:emphasis>:</db:para>
<db:programlisting language="cpp">Flickable {
    id: myFlickable
    function addItem(file) {
        var component = Qt.createComponent(file)
        component.createObject(myFlickable.contentItem);
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="flickDeceleration-prop">
<db:title>flickDeceleration : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>flickDeceleration</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the rate at which a flick will decelerate.</db:para>
<db:para>The default value is platform dependent.</db:para>
</db:section>
<db:section xml:id="flickableDirection-prop">
<db:title>flickableDirection : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>flickableDirection</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines which directions the view can be flicked.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Flickable.AutoFlickDirection (default) - allows flicking vertically if the <db:emphasis>contentHeight</db:emphasis> is not equal to the <db:emphasis>height</db:emphasis> of the Flickable. Allows flicking horizontally if the <db:emphasis>contentWidth</db:emphasis> is not equal to the <db:emphasis>width</db:emphasis> of the Flickable.</db:para>
</db:listitem>
<db:listitem>
<db:para>Flickable.AutoFlickIfNeeded - allows flicking vertically if the <db:emphasis>contentHeight</db:emphasis> is greater than the <db:emphasis>height</db:emphasis> of the Flickable. Allows flicking horizontally if the <db:emphasis>contentWidth</db:emphasis> is greater than to the <db:emphasis>width</db:emphasis> of the Flickable. (since <db:code>QtQuick 2.7</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para>Flickable.HorizontalFlick - allows flicking horizontally.</db:para>
</db:listitem>
<db:listitem>
<db:para>Flickable.VerticalFlick - allows flicking vertically.</db:para>
</db:listitem>
<db:listitem>
<db:para>Flickable.HorizontalAndVerticalFlick - allows flicking in both directions.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="horizontalOvershoot-prop">
<db:title>[since 5.9] horizontalOvershoot : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>horizontalOvershoot</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the horizontal overshoot, that is, the horizontal distance by which the contents has been dragged or flicked past the bounds of the flickable. The value is negative when the content is dragged or flicked beyond the beginning, and positive when beyond the end; <db:code>0.0</db:code> otherwise.</db:para>
<db:para>Whether the values are reported for dragging and/or flicking is determined by <db:link xlink:href="qml-qtquick-flickable.xml#boundsBehavior-prop">boundsBehavior</db:link>. The overshoot distance is reported even when <db:link xlink:href="qml-qtquick-flickable.xml#boundsMovement-prop">boundsMovement</db:link> is <db:code>Flickable.StopAtBounds</db:code>.</db:para>
<db:para>This property was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#verticalOvershoot-prop">verticalOvershoot</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#boundsBehavior-prop">boundsBehavior</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#boundsMovement-prop">boundsMovement</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="interactive-prop">
<db:title>interactive : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>interactive</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property describes whether the user can interact with the Flickable. A user cannot drag or flick a Flickable that is not interactive.</db:para>
<db:para>By default, this property is true.</db:para>
<db:para>This property is useful for temporarily disabling flicking. This allows special interaction with Flickable's children; for example, you might want to freeze a flickable map while scrolling through a pop-up dialog that is a child of the Flickable.</db:para>
</db:section>
<db:section xml:id="maximumFlickVelocity-prop">
<db:title>maximumFlickVelocity : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>maximumFlickVelocity</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum velocity that the user can flick the view in pixels/second.</db:para>
<db:para>The default value is platform dependent.</db:para>
</db:section>
<db:section xml:id="pixelAligned-prop">
<db:title>pixelAligned : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>pixelAligned</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property sets the alignment of <db:link xlink:href="qml-qtquick-flickable.xml#contentX-prop">contentX</db:link> and <db:link xlink:href="qml-qtquick-flickable.xml#contentY-prop">contentY</db:link> to pixels (<db:code>true</db:code>) or subpixels (<db:code>false</db:code>).</db:para>
<db:para>Enable pixelAligned to optimize for still content or moving content with high constrast edges, such as one-pixel-wide lines, text or vector graphics. Disable pixelAligned when optimizing for animation quality.</db:para>
<db:para>The default is <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="pressDelay-prop">
<db:title>pressDelay : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>pressDelay</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the time to delay (ms) delivering a press to children of the Flickable. This can be useful where reacting to a press before a flicking action has undesirable effects.</db:para>
<db:para>If the flickable is dragged/flicked before the delay times out the press event will not be delivered. If the button is released within the timeout, both the press and release will be delivered.</db:para>
<db:para>Note that for nested Flickables with pressDelay set, the pressDelay of outer Flickables is overridden by the innermost Flickable. If the drag exceeds the platform drag threshold, the press event will be delivered regardless of this property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QStyleHints</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rebound-prop">
<db:title>rebound : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>rebound</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This holds the transition to be applied to the content view when it snaps back to the bounds of the flickable. The transition is triggered when the view is flicked or dragged past the edge of the content area, or when <db:link xlink:href="qml-qtquick-flickable.xml#returnToBounds-method">returnToBounds</db:link>() is called.</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Flickable {
    width: 150; height: 150
    contentWidth: 300; contentHeight: 300

    rebound: Transition {
        NumberAnimation {
            properties: &quot;x,y&quot;
            duration: 1000
            easing.type: Easing.OutBounce
        }
    }

    Rectangle {
        width: 300; height: 300
        gradient: Gradient {
            GradientStop { position: 0.0; color: &quot;lightsteelblue&quot; }
            GradientStop { position: 1.0; color: &quot;blue&quot; }
        }
    }
}
</db:programlisting>
<db:para>When the above view is flicked beyond its bounds, it will return to its bounds using the transition specified:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/flickable-rebound.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>If this property is not set, a default animation is applied.</db:para>
</db:section>
<db:section xml:id="synchronousDrag-prop">
<db:title>[since 5.12] synchronousDrag : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>synchronousDrag</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is set to true, then when the mouse or touchpoint moves far enough to begin dragging the content, the content will jump, such that the content pixel which was under the cursor or touchpoint when pressed remains under that point.</db:para>
<db:para>The default is <db:code>false</db:code>, which provides a smoother experience (no jump) at the cost that some of the drag distance is &quot;lost&quot; at the beginning.</db:para>
<db:para>This property was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="verticalOvershoot-prop">
<db:title>[since 5.9] verticalOvershoot : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>verticalOvershoot</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the vertical overshoot, that is, the vertical distance by which the contents has been dragged or flicked past the bounds of the flickable. The value is negative when the content is dragged or flicked beyond the beginning, and positive when beyond the end; <db:code>0.0</db:code> otherwise.</db:para>
<db:para>Whether the values are reported for dragging and/or flicking is determined by <db:link xlink:href="qml-qtquick-flickable.xml#boundsBehavior-prop">boundsBehavior</db:link>. The overshoot distance is reported even when <db:link xlink:href="qml-qtquick-flickable.xml#boundsMovement-prop">boundsMovement</db:link> is <db:code>Flickable.StopAtBounds</db:code>.</db:para>
<db:para>This property was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#horizontalOvershoot-prop">horizontalOvershoot</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#boundsBehavior-prop">boundsBehavior</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#boundsMovement-prop">boundsMovement</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visibleArea-prop">
<db:title>visibleArea group</db:title>
<db:bridgehead renderas="sect2" xml:id="visibleArea.heightRatio-prop">visibleArea.heightRatio : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>visibleArea.heightRatio</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="visibleArea.widthRatio-prop">visibleArea.widthRatio : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>visibleArea.widthRatio</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="visibleArea.xPosition-prop">visibleArea.xPosition : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>visibleArea.xPosition</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="visibleArea.yPosition-prop">visibleArea.yPosition : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>visibleArea.yPosition</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties describe the position and size of the currently viewed area. The size is defined as the percentage of the full view currently visible, scaled to 0.0 - 1.0. The page position is usually in the range 0.0 (beginning) to 1.0 minus size ratio (end), i.e. <db:code>yPosition</db:code> is in the range 0.0 to 1.0-<db:code>heightRatio</db:code>. However, it is possible for the contents to be dragged outside of the normal range, resulting in the page positions also being outside the normal range.</db:para>
<db:para>These properties are typically used to draw a scrollbar. For example:</db:para>
<db:programlisting language="qml">Rectangle {
    width: 200; height: 200

    Flickable {
        id: flickable
        ...
    }

    Rectangle {
        id: scrollbar
        anchors.right: flickable.right
        y: flickable.visibleArea.yPosition * flickable.height
        width: 10
        height: flickable.visibleArea.heightRatio * flickable.height
        color: &quot;black&quot;
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-customitems-scrollbar-example.xml">UI Components: Scrollbar Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="flickEnded-signal">
<db:title>flickEnded()</db:title>
<db:para>This signal is emitted when the view stops moving due to a flick.</db:para>
<db:para>The corresponding handler is <db:code>onFlickEnded</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onFlickEnded</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="flickStarted-signal">
<db:title>flickStarted()</db:title>
<db:para>This signal is emitted when the view is flicked. A flick starts from the point that the mouse or touch is released, while still in motion.</db:para>
<db:para>The corresponding handler is <db:code>onFlickStarted</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onFlickStarted</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="movementEnded-signal">
<db:title>movementEnded()</db:title>
<db:para>This signal is emitted when the view stops moving due to user interaction or a generated <db:link xlink:href="qml-qtquick-flickable.xml#flick-method">flick</db:link>(). If a flick was active, this signal will be emitted once the flick stops. If a flick was not active, this signal will be emitted when the user stops dragging - i.e. a mouse or touch release.</db:para>
<db:para>The corresponding handler is <db:code>onMovementEnded</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onMovementEnded</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="movementStarted-signal">
<db:title>movementStarted()</db:title>
<db:para>This signal is emitted when the view begins moving due to user interaction or a generated <db:link xlink:href="qml-qtquick-flickable.xml#flick-method">flick</db:link>().</db:para>
<db:para>The corresponding handler is <db:code>onMovementStarted</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onMovementStarted</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="cancelFlick-method">
<db:title>cancelFlick()</db:title>
<db:para>Cancels the current flick animation.</db:para>
</db:section>
<db:section xml:id="flick-method">
<db:title>flick(qreal <db:emphasis>xVelocity</db:emphasis>, qreal <db:emphasis>yVelocity</db:emphasis>)</db:title>
<db:para>Flicks the content with <db:code role="parameter">xVelocity</db:code> horizontally and <db:code role="parameter">yVelocity</db:code> vertically in pixels/sec.</db:para>
<db:para>Calling this method will update the corresponding moving and flicking properties and signals, just like a real flick.</db:para>
</db:section>
<db:section xml:id="resizeContent-method">
<db:title>resizeContent(real <db:emphasis>width</db:emphasis>, real <db:emphasis>height</db:emphasis>, QPointF <db:emphasis>center</db:emphasis>)</db:title>
<db:para>Resizes the content to <db:code role="parameter">width</db:code> x <db:code role="parameter">height</db:code> about <db:code role="parameter">center</db:code>.</db:para>
<db:para>This does not scale the contents of the Flickable - it only resizes the <db:link xlink:href="qml-qtquick-flickable.xml#contentWidth-prop">contentWidth</db:link> and <db:link xlink:href="qml-qtquick-flickable.xml#contentHeight-prop">contentHeight</db:link>.</db:para>
<db:para>Resizing the content may result in the content being positioned outside the bounds of the Flickable. Calling <db:link xlink:href="qml-qtquick-flickable.xml#returnToBounds-method">returnToBounds</db:link>() will move the content back within legal bounds.</db:para>
</db:section>
<db:section xml:id="returnToBounds-method">
<db:title>returnToBounds()</db:title>
<db:para>Ensures the content is within legal bounds.</db:para>
<db:para>This may be called to ensure that the content is within legal bounds after manually positioning the content.</db:para>
</db:section>
</db:section>
</db:article>
