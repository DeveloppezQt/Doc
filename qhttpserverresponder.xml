<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHttpServerResponder Class</db:title>
<db:productname>QtHttpServer</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Lightweight HTTP Server Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>API for sending replies from an HTTP server.</db:para>
<db:para>This class was introduced in Qt 6.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHttpServerResponder</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS HttpServer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::HttpServer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += httpserver</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Provides functions for writing back to an HTTP client with overloads for serializing JSON objects. It also has support for writing HTTP headers and status code.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="HeaderList-typedef">
<db:title>[alias] QHttpServerResponder::HeaderList</db:title>
<db:typedefsynopsis>
<db:typedefname>HeaderList</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Type alias for std::initializer_list&lt;std::pair&lt;<db:link xlink:href="qbytearray.xml">QByteArray</db:link>, <db:link xlink:href="qbytearray.xml">QByteArray</db:link>&gt;&gt;</db:para>
</db:section>
<db:section xml:id="StatusCode-enum">
<db:title>enum QHttpServerResponder::StatusCode</db:title>
<db:enumsynopsis>
<db:enumname>StatusCode</db:enumname>
<db:enumitem>
<db:enumidentifier>Continue</db:enumidentifier>
<db:enumvalue>100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SwitchingProtocols</db:enumidentifier>
<db:enumvalue>101</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Processing</db:enumidentifier>
<db:enumvalue>102</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ok</db:enumidentifier>
<db:enumvalue>200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Created</db:enumidentifier>
<db:enumvalue>201</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Accepted</db:enumidentifier>
<db:enumvalue>202</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NonAuthoritativeInformation</db:enumidentifier>
<db:enumvalue>203</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoContent</db:enumidentifier>
<db:enumvalue>204</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ResetContent</db:enumidentifier>
<db:enumvalue>205</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PartialContent</db:enumidentifier>
<db:enumvalue>206</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MultiStatus</db:enumidentifier>
<db:enumvalue>207</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlreadyReported</db:enumidentifier>
<db:enumvalue>208</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IMUsed</db:enumidentifier>
<db:enumvalue>226</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MultipleChoices</db:enumidentifier>
<db:enumvalue>300</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MovedPermanently</db:enumidentifier>
<db:enumvalue>301</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Found</db:enumidentifier>
<db:enumvalue>302</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SeeOther</db:enumidentifier>
<db:enumvalue>303</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotModified</db:enumidentifier>
<db:enumvalue>304</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UseProxy</db:enumidentifier>
<db:enumvalue>305</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TemporaryRedirect</db:enumidentifier>
<db:enumvalue>307</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PermanentRedirect</db:enumidentifier>
<db:enumvalue>308</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BadRequest</db:enumidentifier>
<db:enumvalue>400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Unauthorized</db:enumidentifier>
<db:enumvalue>401</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PaymentRequired</db:enumidentifier>
<db:enumvalue>402</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Forbidden</db:enumidentifier>
<db:enumvalue>403</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotFound</db:enumidentifier>
<db:enumvalue>404</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MethodNotAllowed</db:enumidentifier>
<db:enumvalue>405</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotAcceptable</db:enumidentifier>
<db:enumvalue>406</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ProxyAuthenticationRequired</db:enumidentifier>
<db:enumvalue>407</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RequestTimeout</db:enumidentifier>
<db:enumvalue>408</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Conflict</db:enumidentifier>
<db:enumvalue>409</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Gone</db:enumidentifier>
<db:enumvalue>410</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LengthRequired</db:enumidentifier>
<db:enumvalue>411</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PreconditionFailed</db:enumidentifier>
<db:enumvalue>412</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PayloadTooLarge</db:enumidentifier>
<db:enumvalue>413</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UriTooLong</db:enumidentifier>
<db:enumvalue>414</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnsupportedMediaType</db:enumidentifier>
<db:enumvalue>415</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RequestRangeNotSatisfiable</db:enumidentifier>
<db:enumvalue>416</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExpectationFailed</db:enumidentifier>
<db:enumvalue>417</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ImATeapot</db:enumidentifier>
<db:enumvalue>418</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MisdirectedRequest</db:enumidentifier>
<db:enumvalue>421</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnprocessableEntity</db:enumidentifier>
<db:enumvalue>422</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Locked</db:enumidentifier>
<db:enumvalue>423</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FailedDependency</db:enumidentifier>
<db:enumvalue>424</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UpgradeRequired</db:enumidentifier>
<db:enumvalue>426</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PreconditionRequired</db:enumidentifier>
<db:enumvalue>428</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TooManyRequests</db:enumidentifier>
<db:enumvalue>429</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RequestHeaderFieldsTooLarge</db:enumidentifier>
<db:enumvalue>431</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnavailableForLegalReasons</db:enumidentifier>
<db:enumvalue>451</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InternalServerError</db:enumidentifier>
<db:enumvalue>500</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotImplemented</db:enumidentifier>
<db:enumvalue>501</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BadGateway</db:enumidentifier>
<db:enumvalue>502</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ServiceUnavailable</db:enumidentifier>
<db:enumvalue>503</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>GatewayTimeout</db:enumidentifier>
<db:enumvalue>504</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HttpVersionNotSupported</db:enumidentifier>
<db:enumvalue>505</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>VariantAlsoNegotiates</db:enumidentifier>
<db:enumvalue>506</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InsufficientStorage</db:enumidentifier>
<db:enumvalue>507</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LoopDetected</db:enumidentifier>
<db:enumvalue>508</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotExtended</db:enumidentifier>
<db:enumvalue>510</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NetworkAuthenticationRequired</db:enumidentifier>
<db:enumvalue>511</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NetworkConnectTimeoutError</db:enumidentifier>
<db:enumvalue>599</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>HTTP status codes</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::Continue</db:code></db:para>
</db:td>
<db:td><db:code>100</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::SwitchingProtocols</db:code></db:para>
</db:td>
<db:td><db:code>101</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::Processing</db:code></db:para>
</db:td>
<db:td><db:code>102</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::Ok</db:code></db:para>
</db:td>
<db:td><db:code>200</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::Created</db:code></db:para>
</db:td>
<db:td><db:code>201</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::Accepted</db:code></db:para>
</db:td>
<db:td><db:code>202</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::NonAuthoritativeInformation</db:code></db:para>
</db:td>
<db:td><db:code>203</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::NoContent</db:code></db:para>
</db:td>
<db:td><db:code>204</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::ResetContent</db:code></db:para>
</db:td>
<db:td><db:code>205</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::PartialContent</db:code></db:para>
</db:td>
<db:td><db:code>206</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::MultiStatus</db:code></db:para>
</db:td>
<db:td><db:code>207</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::AlreadyReported</db:code></db:para>
</db:td>
<db:td><db:code>208</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::IMUsed</db:code></db:para>
</db:td>
<db:td><db:code>226</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::MultipleChoices</db:code></db:para>
</db:td>
<db:td><db:code>300</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::MovedPermanently</db:code></db:para>
</db:td>
<db:td><db:code>301</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::Found</db:code></db:para>
</db:td>
<db:td><db:code>302</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::SeeOther</db:code></db:para>
</db:td>
<db:td><db:code>303</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::NotModified</db:code></db:para>
</db:td>
<db:td><db:code>304</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::UseProxy</db:code></db:para>
</db:td>
<db:td><db:code>305</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::TemporaryRedirect</db:code></db:para>
</db:td>
<db:td><db:code>307</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::PermanentRedirect</db:code></db:para>
</db:td>
<db:td><db:code>308</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::BadRequest</db:code></db:para>
</db:td>
<db:td><db:code>400</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::Unauthorized</db:code></db:para>
</db:td>
<db:td><db:code>401</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::PaymentRequired</db:code></db:para>
</db:td>
<db:td><db:code>402</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::Forbidden</db:code></db:para>
</db:td>
<db:td><db:code>403</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::NotFound</db:code></db:para>
</db:td>
<db:td><db:code>404</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::MethodNotAllowed</db:code></db:para>
</db:td>
<db:td><db:code>405</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::NotAcceptable</db:code></db:para>
</db:td>
<db:td><db:code>406</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::ProxyAuthenticationRequired</db:code></db:para>
</db:td>
<db:td><db:code>407</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::RequestTimeout</db:code></db:para>
</db:td>
<db:td><db:code>408</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::Conflict</db:code></db:para>
</db:td>
<db:td><db:code>409</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::Gone</db:code></db:para>
</db:td>
<db:td><db:code>410</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::LengthRequired</db:code></db:para>
</db:td>
<db:td><db:code>411</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::PreconditionFailed</db:code></db:para>
</db:td>
<db:td><db:code>412</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::PayloadTooLarge</db:code></db:para>
</db:td>
<db:td><db:code>413</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::UriTooLong</db:code></db:para>
</db:td>
<db:td><db:code>414</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::UnsupportedMediaType</db:code></db:para>
</db:td>
<db:td><db:code>415</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::RequestRangeNotSatisfiable</db:code></db:para>
</db:td>
<db:td><db:code>416</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::ExpectationFailed</db:code></db:para>
</db:td>
<db:td><db:code>417</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::ImATeapot</db:code></db:para>
</db:td>
<db:td><db:code>418</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::MisdirectedRequest</db:code></db:para>
</db:td>
<db:td><db:code>421</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::UnprocessableEntity</db:code></db:para>
</db:td>
<db:td><db:code>422</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::Locked</db:code></db:para>
</db:td>
<db:td><db:code>423</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::FailedDependency</db:code></db:para>
</db:td>
<db:td><db:code>424</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::UpgradeRequired</db:code></db:para>
</db:td>
<db:td><db:code>426</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::PreconditionRequired</db:code></db:para>
</db:td>
<db:td><db:code>428</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::TooManyRequests</db:code></db:para>
</db:td>
<db:td><db:code>429</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::RequestHeaderFieldsTooLarge</db:code></db:para>
</db:td>
<db:td><db:code>431</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::UnavailableForLegalReasons</db:code></db:para>
</db:td>
<db:td><db:code>451</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::InternalServerError</db:code></db:para>
</db:td>
<db:td><db:code>500</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::NotImplemented</db:code></db:para>
</db:td>
<db:td><db:code>501</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::BadGateway</db:code></db:para>
</db:td>
<db:td><db:code>502</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::ServiceUnavailable</db:code></db:para>
</db:td>
<db:td><db:code>503</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::GatewayTimeout</db:code></db:para>
</db:td>
<db:td><db:code>504</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::HttpVersionNotSupported</db:code></db:para>
</db:td>
<db:td><db:code>505</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::VariantAlsoNegotiates</db:code></db:para>
</db:td>
<db:td><db:code>506</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::InsufficientStorage</db:code></db:para>
</db:td>
<db:td><db:code>507</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::LoopDetected</db:code></db:para>
</db:td>
<db:td><db:code>508</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::NotExtended</db:code></db:para>
</db:td>
<db:td><db:code>510</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::NetworkAuthenticationRequired</db:code></db:para>
</db:td>
<db:td><db:code>511</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link></db:emphasis>::<db:emphasis role="bold">StatusCode</db:emphasis>::NetworkConnectTimeoutError</db:code></db:para>
</db:td>
<db:td><db:code>599</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHttpServerResponder">
<db:title>QHttpServerResponder::QHttpServerResponder(QHttpServerResponder &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpServerResponder</db:methodname>
<db:methodparam>
<db:type>QHttpServerResponder &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerResponder(QHttpServerResponder &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link> instance, making it point at the same object that <db:code role="parameter">other</db:code> was pointing to.</db:para>
</db:section>
<db:section xml:id="dtor.QHttpServerResponder">
<db:title>QHttpServerResponder::~QHttpServerResponder()</db:title>
<db:destructorsynopsis>
<db:methodname>~QHttpServerResponder</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QHttpServerResponder()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a <db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link>.</db:para>
</db:section>
<db:section xml:id="sendResponse">
<db:title>[since 6.5] void QHttpServerResponder::sendResponse(const QHttpServerResponse &amp;<db:emphasis>response</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendResponse</db:methodname>
<db:methodparam>
<db:type>const QHttpServerResponse &amp;</db:type>
<db:parameter>response</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendResponse(const QHttpServerResponse &amp;response)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a HTTP <db:code role="parameter">response</db:code> to the client.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="write">
<db:title>void QHttpServerResponder::write(QIODevice *<db:emphasis>data</db:emphasis>, QHttpServerResponder::HeaderList <db:emphasis>headers</db:emphasis>, QHttpServerResponder::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerResponder::HeaderList</db:type>
<db:parameter>headers</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerResponder::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void write(QIODevice *data, QHttpServerResponder::HeaderList headers, QHttpServerResponder::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Answers a request with an HTTP status code <db:code role="parameter">status</db:code> and HTTP headers <db:code role="parameter">headers</db:code>. The I/O device <db:code role="parameter">data</db:code> provides the body of the response. If <db:code role="parameter">data</db:code> is sequential, the body of the message is sent in chunks: otherwise, the function assumes all the content is available and sends it all at once but the read is done in chunks.</db:para>
<db:note>
<db:para>This function takes the ownership of <db:code role="parameter">data</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="write-1">
<db:title>void QHttpServerResponder::write(QIODevice *<db:emphasis>data</db:emphasis>, const QByteArray &amp;<db:emphasis>mimeType</db:emphasis>, QHttpServerResponder::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>mimeType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerResponder::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void write(QIODevice *data, const QByteArray &amp;mimeType, QHttpServerResponder::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Answers a request with an HTTP status code <db:code role="parameter">status</db:code> and a MIME type <db:code role="parameter">mimeType</db:code>. The I/O device <db:code role="parameter">data</db:code> provides the body of the response. If <db:code role="parameter">data</db:code> is sequential, the body of the message is sent in chunks: otherwise, the function assumes all the content is available and sends it all at once but the read is done in chunks.</db:para>
<db:note>
<db:para>This function takes the ownership of <db:code role="parameter">data</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="write-2">
<db:title>void QHttpServerResponder::write(const QJsonDocument &amp;<db:emphasis>document</db:emphasis>, QHttpServerResponder::HeaderList <db:emphasis>headers</db:emphasis>, QHttpServerResponder::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>const QJsonDocument &amp;</db:type>
<db:parameter>document</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerResponder::HeaderList</db:type>
<db:parameter>headers</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerResponder::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void write(const QJsonDocument &amp;document, QHttpServerResponder::HeaderList headers, QHttpServerResponder::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Answers a request with an HTTP status code <db:code role="parameter">status</db:code>, JSON document <db:code role="parameter">document</db:code> and HTTP headers <db:code role="parameter">headers</db:code>.</db:para>
<db:para>Note: This function sets HTTP Content-Type header as &quot;application/json&quot;.</db:para>
</db:section>
<db:section xml:id="write-3">
<db:title>void QHttpServerResponder::write(const QJsonDocument &amp;<db:emphasis>document</db:emphasis>, QHttpServerResponder::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>const QJsonDocument &amp;</db:type>
<db:parameter>document</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerResponder::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void write(const QJsonDocument &amp;document, QHttpServerResponder::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Answers a request with an HTTP status code <db:code role="parameter">status</db:code>, and JSON document <db:code role="parameter">document</db:code>.</db:para>
<db:para>Note: This function sets HTTP Content-Type header as &quot;application/json&quot;.</db:para>
</db:section>
<db:section xml:id="write-4">
<db:title>void QHttpServerResponder::write(const QByteArray &amp;<db:emphasis>data</db:emphasis>, QHttpServerResponder::HeaderList <db:emphasis>headers</db:emphasis>, QHttpServerResponder::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerResponder::HeaderList</db:type>
<db:parameter>headers</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerResponder::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void write(const QByteArray &amp;data, QHttpServerResponder::HeaderList headers, QHttpServerResponder::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Answers a request with an HTTP status code <db:code role="parameter">status</db:code>, HTTP Headers <db:code role="parameter">headers</db:code> and a body <db:code role="parameter">data</db:code>.</db:para>
<db:para>Note: This function sets HTTP Content-Length header.</db:para>
</db:section>
<db:section xml:id="write-5">
<db:title>void QHttpServerResponder::write(const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QByteArray &amp;<db:emphasis>mimeType</db:emphasis>, QHttpServerResponder::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>mimeType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerResponder::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void write(const QByteArray &amp;data, const QByteArray &amp;mimeType, QHttpServerResponder::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Answers a request with an HTTP status code <db:code role="parameter">status</db:code>, a MIME type <db:code role="parameter">mimeType</db:code> and a body <db:code role="parameter">data</db:code>.</db:para>
</db:section>
<db:section xml:id="write-6">
<db:title>void QHttpServerResponder::write(QHttpServerResponder::HeaderList <db:emphasis>headers</db:emphasis>, QHttpServerResponder::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>QHttpServerResponder::HeaderList</db:type>
<db:parameter>headers</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerResponder::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">void write(QHttpServerResponder::HeaderList headers, QHttpServerResponder::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Answers a request with an HTTP status code <db:code role="parameter">status</db:code> and HTTP Headers <db:code role="parameter">headers</db:code>.</db:para>
</db:section>
<db:section xml:id="write-7">
<db:title>void QHttpServerResponder::write(QHttpServerResponder::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>QHttpServerResponder::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">void write(QHttpServerResponder::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Answers a request with an HTTP status code <db:code role="parameter">status</db:code>.</db:para>
<db:para>Note: This function sets HTTP Content-Type header as &quot;application/x-empty&quot;.</db:para>
</db:section>
<db:section xml:id="writeBody">
<db:title>void QHttpServerResponder::writeBody(const char *<db:emphasis>body</db:emphasis>, qint64 <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeBody</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>body</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeBody(const char *body, qint64 size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function writes HTTP body <db:code role="parameter">body</db:code> with size <db:code role="parameter">size</db:code>.</db:para>
</db:section>
<db:section xml:id="writeBody-1">
<db:title>void QHttpServerResponder::writeBody(const char *<db:emphasis>body</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeBody</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>body</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeBody(const char *body)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function writes HTTP body <db:code role="parameter">body</db:code>.</db:para>
</db:section>
<db:section xml:id="writeBody-2">
<db:title>void QHttpServerResponder::writeBody(const QByteArray &amp;<db:emphasis>body</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeBody</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>body</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeBody(const QByteArray &amp;body)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function writes HTTP body <db:code role="parameter">body</db:code>.</db:para>
</db:section>
<db:section xml:id="writeHeader">
<db:title>void QHttpServerResponder::writeHeader(const QByteArray &amp;<db:emphasis>header</db:emphasis>, const QByteArray &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeHeader</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>header</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeHeader(const QByteArray &amp;header, const QByteArray &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function writes an HTTP header <db:code role="parameter">header</db:code> with <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="writeHeaders">
<db:title>void QHttpServerResponder::writeHeaders(QHttpServerResponder::HeaderList <db:emphasis>headers</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeHeaders</db:methodname>
<db:methodparam>
<db:type>QHttpServerResponder::HeaderList</db:type>
<db:parameter>headers</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeHeaders(QHttpServerResponder::HeaderList headers)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function writes HTTP headers <db:code role="parameter">headers</db:code>.</db:para>
</db:section>
<db:section xml:id="writeStatusLine">
<db:title>void QHttpServerResponder::writeStatusLine(QHttpServerResponder::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>writeStatusLine</db:methodname>
<db:methodparam>
<db:type>QHttpServerResponder::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void writeStatusLine(QHttpServerResponder::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function writes HTTP status line with an HTTP status code <db:code role="parameter">status</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
