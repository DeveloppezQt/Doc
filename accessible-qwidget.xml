<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Accessibility for QWidget Applications</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="accessible.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Accessibility"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="accessible-qtquick.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Accessibility for Qt Quick Applications"/></db:extendedlink>
<db:abstract>
<db:para>How to make your applications accessible to those with disabilities.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>We will focus on the Qt accessibility interface <db:link xlink:href="qaccessibleinterface.xml">QAccessibleInterface</db:link> and how to make applications accessible.</db:para>
<db:section xml:id="accessibility-in-qwidget-based-applications">
<db:title>Accessibility in QWidget based applications</db:title>
<db:para>When we communicate with the assistive technologies, we need to describe Qt's user interface in a way that they can understand. Qt applications use <db:link xlink:href="qaccessibleinterface.xml">QAccessibleInterface</db:link> to expose information about the individual UI elements. Currently, Qt provides support for its widgets and widget parts, e.g., slider handles, but the interface could also be implemented for any <db:link xlink:href="qobject.xml">QObject</db:link> if necessary. <db:link xlink:href="qaccessible.xml">QAccessible</db:link> contains enums that describe the UI. The description is mainly based on MSAA and is independent of Qt. We will examine the enums in the course of this document.</db:para>
<db:para>The structure of the UI is represented as a tree of <db:link xlink:href="qaccessibleinterface.xml">QAccessibleInterface</db:link> subclasses. You can think of this as a representation of a UI like the <db:link xlink:href="qobject.xml">QObject</db:link> tree built by Qt. Objects can be widgets or widget parts (such as scroll bar handles). We examine the tree in detail in the next section.</db:para>
<db:para>Servers notify clients through <db:link xlink:href="qaccessible.xml#updateAccessibility">updateAccessibility</db:link>() about changes in objects by sending events, and the clients register to receive the events. The available events are defined by the <db:link xlink:href="qaccessible.xml#Event-enum">QAccessible::Event</db:link> enum. The clients may then query for the object that generated the event through <db:link xlink:href="qaccessible.xml#queryAccessibleInterface">QAccessible::queryAccessibleInterface</db:link>().</db:para>
<db:para>The members and enums in <db:link xlink:href="qaccessible.xml">QAccessible</db:link> are used to describe accessible objects:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qaccessible.xml#Role-enum">Role</db:link>: Describes the role the object fills in the user interface, e.g., if it is a window, a text edit, or a cell in a table.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaccessible.xml#RelationFlag-enum">Relation</db:link>: Describes the relationship between objects in the object hierarchy.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaccessible-state.xml">State</db:link>: The objects can be in a number of different states. Examples of states are whether the object is disabled, if it has focus, or if it provides a pop-up menu.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The clients also have some possibilities to get the content of objects, e.g., a button's text; the object provides strings defined by the <db:link xlink:href="qaccessible.xml#Text-enum">QAccessible::Text</db:link> enum, that give information about content.</db:para>
</db:section>
<db:section xml:id="the-accessible-object-tree">
<db:title>The Accessible Object Tree</db:title>
<db:para>As mentioned, a tree structure is built from the accessible objects of an application. By navigating through the tree, the clients can access all elements in the UI. Object relations give clients information about the UI. For instance, a slider handle is a child of the slider to which it belongs. <db:link xlink:href="qaccessible.xml#RelationFlag-enum">QAccessible::Relation</db:link> describes the various relationships the clients can ask objects for.</db:para>
<db:para>Note that there are no direct mapping between the Qt <db:link xlink:href="qobject.xml">QObject</db:link> tree and the accessible object tree. For instance, scroll bar handles are accessible objects but are not widgets or objects in Qt.</db:para>
<db:para>AT-Clients have access to the accessibility object tree through the root object in the tree, which is the <db:link xlink:href="qapplication.xml">QApplication</db:link>. They can navigate the tree with the <db:link xlink:href="qaccessibleinterface.xml#parent">QAccessibleInterface::parent</db:link>(), <db:link xlink:href="qaccessibleinterface.xml#childCount">QAccessibleInterface::childCount</db:link>() and <db:link xlink:href="qaccessibleinterface.xml#child">QAccessibleInterface::child</db:link>() functions.</db:para>
<db:para>Qt provides accessible interfaces for its widgets and for Qt Quick Controls. Interfaces for any <db:link xlink:href="qobject.xml">QObject</db:link> subclass can be requested through QAccessible::queryInterface(). A default implementation is provided if a more specialized interface is not defined. An AT-Client cannot acquire an interface for accessible objects that do not have an equivalent <db:link xlink:href="qobject.xml">QObject</db:link>, e.g., scroll bar handles, but they appear as normal objects through interfaces of parent accessible objects, e.g., you can query their relationships with <db:link xlink:href="qaccessibleinterface.xml#relations">QAccessibleInterface::relations</db:link>().</db:para>
<db:para>To illustrate, we present an image of an accessible object tree. Beneath the tree is a table with examples of object relationships.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/accessibleobjecttree.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The labels in top-down order are: the <db:link xlink:href="qaccessibleinterface.xml">QAccessibleInterface</db:link> class name, the widget for which an interface is provided, and the <db:link xlink:href="qaccessible.xml#Role-enum">Role</db:link> of the object. The Position, PageLeft and PageRight correspond to the slider handle, the slider groove left and the slider groove right, respectively. These accessible objects do not have an equivalent <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:informaltable style="generic" width="40%">
<db:thead>
<db:tr>
<db:th>
<db:para>Source Object</db:para>
</db:th>
<db:th>
<db:para>Target Object</db:para>
</db:th>
<db:th>
<db:para>Relation</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Slider</db:para>
</db:td>
<db:td>
<db:para>Indicator</db:para>
</db:td>
<db:td>
<db:para>Controller</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Indicator</db:para>
</db:td>
<db:td>
<db:para>Slider</db:para>
</db:td>
<db:td>
<db:para>Controlled</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Slider</db:para>
</db:td>
<db:td>
<db:para>Application</db:para>
</db:td>
<db:td>
<db:para>Ancestor</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Application</db:para>
</db:td>
<db:td>
<db:para>Slider</db:para>
</db:td>
<db:td>
<db:para>Child</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PushButton</db:para>
</db:td>
<db:td>
<db:para>Indicator</db:para>
</db:td>
<db:td>
<db:para>Sibling</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="the-static-qaccessible-functions">
<db:title>The Static QAccessible Functions</db:title>
<db:para>The accessibility is managed by <db:link xlink:href="qaccessible.xml">QAccessible</db:link>'s static functions, which we will examine shortly. They produce <db:link xlink:href="qaccessible.xml">QAccessible</db:link> interfaces, build the object tree, and initiate the connection with MSAA or the other platform specific technologies. If you are only interested in learning how to make your application accessible, you can safely skip over this section to <db:link xlink:href="accessible-qwidget.xml#implementing-accessibility">Implementing Accessibility</db:link>.</db:para>
<db:para>The communication between clients and the server is initiated when <db:link xlink:href="qaccessible.xml#setRootObject">setRootObject</db:link>() is called. This is done when the <db:link xlink:href="qapplication.xml">QApplication</db:link> instance is instantiated and you should not have to do this yourself.</db:para>
<db:para>When a <db:link xlink:href="qobject.xml">QObject</db:link> calls <db:link xlink:href="qaccessible.xml#updateAccessibility">updateAccessibility</db:link>(), clients that are listening to events are notified of the change. The function is used to post events to the assistive technology, and accessible <db:link xlink:href="qaccessible.xml#Event-enum">events</db:link> are posted by <db:link xlink:href="qaccessible.xml#updateAccessibility">updateAccessibility</db:link>().</db:para>
<db:para><db:link xlink:href="qaccessible.xml#queryAccessibleInterface">queryAccessibleInterface</db:link>() returns accessible interfaces for <db:link xlink:href="qobject.xml">QObject</db:link>s. All widgets in Qt provide interfaces; if you need interfaces to control the behavior of other <db:link xlink:href="qobject.xml">QObject</db:link> subclasses, you must implement the interfaces yourself, although the <db:link xlink:href="qaccessibleobject.xml">QAccessibleObject</db:link> convenience class implements parts of the functionality for you.</db:para>
<db:para>The factory that produces accessibility interfaces for QObjects is a function of type <db:link xlink:href="qaccessible.xml#InterfaceFactory-typedef">QAccessible::InterfaceFactory</db:link>. It is possible to have several factories installed. The last factory installed will be the first to be asked for interfaces. <db:link xlink:href="qaccessible.xml#queryAccessibleInterface">queryAccessibleInterface</db:link>() uses the factories to create interfaces for <db:link xlink:href="qobject.xml">QObject</db:link>s. Normally, you need not be concerned about factories because you can implement plugins that produce interfaces. We will give examples of both approaches later.</db:para>
</db:section>
</db:section>
<db:section xml:id="implementing-accessibility">
<db:title>Implementing Accessibility</db:title>
<db:para>To provide accessibility support for a widget or other user interface element, you need to implement the <db:link xlink:href="qaccessibleinterface.xml">QAccessibleInterface</db:link> and distribute it in a <db:link xlink:href="qaccessibleplugin.xml">QAccessiblePlugin</db:link>. It is also possible to compile the interface into the application and provide a <db:link xlink:href="qaccessible.xml#InterfaceFactory-typedef">QAccessible::InterfaceFactory</db:link> for it. The factory can be used if you link statically or do not want the added complexity of plugins. This can be an advantage if you, for instance, are delivering a 3-rd party library.</db:para>
<db:para>All widgets and other user interface elements should have interfaces and plugins. If you want your application to support accessibility, you will need to consider the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt already implements accessibility for its own widgets. We therefore recommend that you use Qt widgets where possible.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qaccessibleinterface.xml">QAccessibleInterface</db:link> needs to be implemented for each element that you want to make available to accessibility clients.</db:para>
</db:listitem>
<db:listitem>
<db:para>You need to send accessibility events from the custom user interface elements that you implement.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In general, it is recommended that you are somewhat familiar with MSAA, which Qt's accessibility support originally was built for. You should also study the enum values of <db:link xlink:href="qaccessible.xml">QAccessible</db:link>, which describe the roles, actions, relationships, and events that you need to consider.</db:para>
<db:para>Note that you can examine how Qt's widgets implement their accessibility. One major problem with the MSAA standard is that interfaces are often implemented in an inconsistent way. This makes life difficult for clients and often leads to guesswork on object functionality.</db:para>
<db:para>It is possible to implement interfaces by inheriting <db:link xlink:href="qaccessibleinterface.xml">QAccessibleInterface</db:link> and implementing its pure virtual functions. In practice, however, it is usually preferable to inherit <db:link xlink:href="qaccessibleobject.xml">QAccessibleObject</db:link> or <db:link xlink:href="qaccessiblewidget.xml">QAccessibleWidget</db:link>, which implement part of the functionality for you. In the next section, we will see an example of implementing accessibility for a widget by inheriting the <db:link xlink:href="qaccessiblewidget.xml">QAccessibleWidget</db:link> class.</db:para>
<db:section xml:id="the-qaccessibleobject-and-qaccessiblewidget-convenience-classes">
<db:title>The QAccessibleObject and QAccessibleWidget Convenience Classes</db:title>
<db:para>When implementing an accessibility interface for widgets, one would as a rule inherit <db:link xlink:href="qaccessiblewidget.xml">QAccessibleWidget</db:link>, which is a convenience class for widgets. Another available convenience class, which is inherited by <db:link xlink:href="qaccessiblewidget.xml">QAccessibleWidget</db:link>, is the <db:link xlink:href="qaccessibleobject.xml">QAccessibleObject</db:link>, which implements part of the interface for QObjects.</db:para>
<db:para>The <db:link xlink:href="qaccessiblewidget.xml">QAccessibleWidget</db:link> provides the following functionality:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>It handles the navigation of the tree and hit testing of the objects.</db:para>
</db:listitem>
<db:listitem>
<db:para>It handles events, roles, and actions that are common for all <db:link xlink:href="qwidget.xml">QWidget</db:link>s.</db:para>
</db:listitem>
<db:listitem>
<db:para>It handles action and methods that can be performed on all widgets.</db:para>
</db:listitem>
<db:listitem>
<db:para>It calculates bounding rectangles with <db:link xlink:href="qaccessibleinterface.xml#rect">rect</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>It gives <db:link xlink:href="qaccessibleinterface.xml#text">text</db:link>() strings that are appropriate for a generic widget.</db:para>
</db:listitem>
<db:listitem>
<db:para>It sets the <db:link xlink:href="qaccessible-state.xml">states</db:link> that are common for all widgets.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qaccessiblewidget-example">
<db:title>QAccessibleWidget Example</db:title>
<db:para>Instead of creating a custom widget and implementing an interface for it, we will show how accessibility is implemented for one of Qt's standard widgets: <db:link xlink:href="qslider.xml">QSlider</db:link>. The accessible interface, QAccessibleSlider, inherits from QAccessibleAbstractSlider, which in turn inherits <db:link xlink:href="qaccessiblewidget.xml">QAccessibleWidget</db:link>. You do not need to examine the QAccessibleAbstractSlider class to read this section. If you want to take a look, the code for all of Qt's accessible interfaces are found in src/plugins/accessible/widgets. Here is the QAccessibleSlider's constructor:</db:para>
<db:programlisting language="cpp">QAccessibleSlider::QAccessibleSlider(QWidget *w)
: QAccessibleAbstractSlider(w)
{
    Q_ASSERT(slider());
    addControllingSignal(QLatin1String(&quot;valueChanged(int)&quot;));
}
</db:programlisting>
<db:para>The slider is a complex control that functions as a <db:link xlink:href="qaccessible.xml#RelationFlag-enum">Controller</db:link> for its accessible children. This relationship must be known by the interface (for <db:link xlink:href="qaccessibleinterface.xml#parent">parent</db:link>(), <db:link xlink:href="qaccessibleinterface.xml#child">child</db:link>() and <db:link xlink:href="qaccessibleinterface.xml#relations">relations</db:link>()). This can be done using a controlling signal, which is a mechanism provided by <db:link xlink:href="qaccessiblewidget.xml">QAccessibleWidget</db:link>. We do this in the constructor:</db:para>
<db:para>The choice of signal shown is not important; the same principles apply to all signals that are declared in this way. Note that we use <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link> to ensure that the signal name is correctly specified.</db:para>
<db:para>When an accessible object is changed in a way that users need to know about, it notifies clients of the change by sending them an event via the accessible interface. This is how <db:link xlink:href="qslider.xml">QSlider</db:link> calls <db:link xlink:href="qaccessible.xml#updateAccessibility">updateAccessibility</db:link>() to indicate that its value has changed:</db:para>
<db:programlisting language="cpp">void QAbstractSlider::setValue(int value)
    ...
    QAccessibleValueChangeEvent event(this, d-&gt;value);
    QAccessible::updateAccessibility(&amp;event);
    ...
}
</db:programlisting>
<db:para>Note that the call is made after the value of the slider has changed because clients may query the new value immediately after receiving the event.</db:para>
<db:para>The interface must be able to calculate bounding rectangles of itself and any children that do not provide an interface of their own. The <db:code>QAccessibleSlider</db:code> has three such children identified by the private enum, <db:code>SliderElements</db:code>, which has the following values: <db:code>PageLeft</db:code> (the rectangle on the left hand side of the slider handle), <db:code>PageRight</db:code> (the rectangle on the right hand side of the handle), and <db:code>Position</db:code> (the slider handle). Here is the implementation of <db:link xlink:href="qaccessibleinterface.xml#rect">rect</db:link>():</db:para>
<db:programlisting language="cpp">QRect QAccessibleSlider::rect(int child) const
{
    ...
    switch (child) {
    case PageLeft:
        if (slider()-&gt;orientation() == Qt::Vertical)
            rect = QRect(0, 0, slider()-&gt;width(), srect.y());
        else
            rect = QRect(0, 0, srect.x(), slider()-&gt;height());
        break;
    case Position:
        rect = srect;
        break;
    case PageRight:
        if (slider()-&gt;orientation() == Qt::Vertical)
            rect = QRect(0, srect.y() + srect.height(), slider()-&gt;width(), slider()-&gt;height()- srect.y() - srect.height());
        else
            rect = QRect(srect.x() + srect.width(), 0, slider()-&gt;width() - srect.x() - srect.width(), slider()-&gt;height());
        break;
    default:
        return QAccessibleAbstractSlider::rect(child);
    }
    ...
</db:programlisting>
<db:para>The first part of the function, which we have omitted, uses the current <db:link xlink:href="qstyle.xml">style</db:link> to calculate the slider handle's bounding rectangle; it is stored in <db:code>srect</db:code>. Notice that child 0, covered in the default case in the above code, is the slider itself, so we can simply return the <db:link xlink:href="qslider.xml">QSlider</db:link> bounding rectangle obtained from the superclass, which is effectively the value obtained from <db:link xlink:href="qaccessiblewidget.xml#rect">QAccessibleWidget::rect</db:link>().</db:para>
<db:programlisting language="cpp">    QPoint tp = slider()-&gt;mapToGlobal(QPoint(0,0));
    return QRect(tp.x() + rect.x(), tp.y() + rect.y(), rect.width(), rect.height());
}
</db:programlisting>
<db:para>Before the rectangle is returned it must be mapped to screen coordinates.</db:para>
<db:para>The QAccessibleSlider must reimplement <db:link xlink:href="qaccessibleinterface.xml#childCount">QAccessibleInterface::childCount</db:link>() since it manages children without interfaces.</db:para>
<db:para>The <db:link xlink:href="qaccessibleinterface.xml#text">text</db:link>() function returns the <db:link xlink:href="qaccessible.xml#Text-enum">QAccessible::Text</db:link> strings for the slider:</db:para>
<db:programlisting language="cpp">QString QAccessibleSlider::text(Text t, int child) const
{
    if (!slider()-&gt;isVisible())
        return QString();
    switch (t) {
    case Value:
        if (!child || child == 2)
            return QString::number(slider()-&gt;value());
        return QString();
    case Name:
        switch (child) {
        case PageLeft:
            return slider()-&gt;orientation() == Qt::Horizontal ?
                QSlider::tr(&quot;Page left&quot;) : QSlider::tr(&quot;Page up&quot;);
        case Position:
            return QSlider::tr(&quot;Position&quot;);
        case PageRight:
            return slider()-&gt;orientation() == Qt::Horizontal ?
                QSlider::tr(&quot;Page right&quot;) : QSlider::tr(&quot;Page down&quot;);
        }
        break;
    default:
        break;
    }
    return QAccessibleAbstractSlider::text(t, child);
}
</db:programlisting>
<db:para>The <db:code>slider()</db:code> function returns a pointer to the interface's <db:link xlink:href="qslider.xml">QSlider</db:link>. Some values are left for the superclass's implementation. Not all values are appropriate for all accessible objects, as you can see for <db:link xlink:href="qaccessible.xml#Text-enum">QAccessible::Value</db:link> case. You should just return an empty string for those values where no relevant text can be provided.</db:para>
<db:para>The implementation of the <db:link xlink:href="qaccessibleinterface.xml#role">role</db:link>() function is straightforward:</db:para>
<db:programlisting language="cpp">QAccessible::Role QAccessibleSlider::role(int child) const
{
    switch (child) {
    case PageLeft:
    case PageRight:
        return PushButton;
    case Position:
        return Indicator;
    default:
        return Slider;
    }
}
</db:programlisting>
<db:para>The role function should be reimplemented by all objects and describes the role of themselves and the children that do not provide accessible interfaces of their own.</db:para>
<db:para>Next, the accessible interface needs to return the <db:link xlink:href="qaccessible-state.xml">states</db:link> that the slider can be in. We look at parts of the <db:code>state()</db:code> implementation to show how just a few of the states are handled:</db:para>
<db:programlisting language="cpp">QAccessible::State QAccessibleSlider::state(int child) const
{
    const State parentState = QAccessibleAbstractSlider::state(0);
    ...
    switch (child) {
    case PageLeft:
        if (slider-&gt;value() &lt;= slider-&gt;minimum())
            state |= Unavailable;
        break;
    case PageRight:
        if (slider-&gt;value() &gt;= slider-&gt;maximum())
            state |= Unavailable;
        break;
    case Position:
    default:
        break;
    }

    return state;
}
</db:programlisting>
<db:para>The superclass implementation of <db:link xlink:href="qaccessibleinterface.xml#state">state</db:link>(), uses the <db:link xlink:href="qaccessibleinterface.xml#state">QAccessibleInterface::state</db:link>() implementation. We simply need to disable the buttons if the slider is at its minimum or maximum.</db:para>
<db:para>We have now exposed the information we have about the slider to the clients. For the clients to be able to alter the slider - for example, to change its value - we must provide information about the actions that can be performed and perform them upon request. We discuss this in the next section.</db:para>
</db:section>
<db:section xml:id="handling-action-requests-from-clients">
<db:title>Handling Action Requests from Clients</db:title>
<db:para>Applications can expose actions, which can be invoked by the client. In order to support actions in an object, inherit the <db:link xlink:href="qaccessibleactioninterface.xml">QAccessibleActionInterface</db:link>.</db:para>
<db:para>Interactive elements should expose functionality triggered by mouse interaction, for example. A button should, for example, implement a click action.</db:para>
<db:para>Setting the focus is another action that should be implemented for widgets that accept receive the focus.</db:para>
<db:para>You need to re-implement <db:link xlink:href="qaccessibleactioninterface.xml#actionNames">actionNames</db:link>() to return a list of all actions that the object supports. This list should not be localized.</db:para>
<db:para>There are two functions that give information about the actions that must return localized strings: <db:link xlink:href="qaccessibleactioninterface.xml#localizedActionName">localizedActionName</db:link>() and <db:link xlink:href="qaccessibleactioninterface.xml#localizedActionDescription">localizedActionDescription</db:link>(). These functions can be used by the client to present the actions to the user. In general, the name should be concise and only consist of a single word, such as &quot;press&quot;.</db:para>
<db:para>There is a list of standard action names and localizations available that should be used when the action fits. This makes it easier for clients to understand the semantics, and Qt will try to expose them correctly on the different platforms.</db:para>
<db:para>Of course the action also needs a way to be triggered. <db:link xlink:href="qaccessibleactioninterface.xml#doAction">doAction</db:link>() should invoke the action as advertised by name and description.</db:para>
<db:para>To see examples on how to implement actions and methods, you could examine the implementations for Qt's standard widgets such as QAccessiblePushButton.</db:para>
</db:section>
<db:section xml:id="implementing-accessible-plugins">
<db:title>Implementing Accessible Plugins</db:title>
<db:para>In this section we will explain the procedure of implementing accessible plugins for your interfaces. A plugin is a class stored in a shared library that can be loaded at run-time. It is convenient to distribute interfaces as plugins since they will only be loaded when required.</db:para>
<db:para>Creating an accessible plugin is achieved by inheriting <db:link xlink:href="qaccessibleplugin.xml">QAccessiblePlugin</db:link>, defining the supported class names in the plugin's JSON description and reimplementing <db:link xlink:href="qaccessibleplugin.xml#create">create</db:link>() from <db:link xlink:href="qaccessibleplugin.xml">QAccessiblePlugin</db:link>. The <db:code>.pro</db:code> file must be altered to use the plugin template, and the library containing the plugin must be placed on a path where Qt searches for accessible plugins.</db:para>
<db:para>We will go through the implementation of <db:code>SliderPlugin</db:code>, which is an accessible plugin that produces the QAccessibleSlider interface from the <db:link xlink:href="accessible-qwidget.xml#qaccessiblewidget-example">QAccessibleWidget Example</db:link>. We start with the <db:code>key()</db:code> function:</db:para>
<db:programlisting language="cpp">QStringList SliderPlugin::keys() const
{
    return QStringList() &lt;&lt; QLatin1String(&quot;QSlider&quot;);
}
</db:programlisting>
<db:para>We simply need to return the class name of the single interface our plugin can create an accessible interface for. A plugin can support any number of classes; just add more class names to the string list. We move on to the <db:code>create()</db:code> function:</db:para>
<db:programlisting language="cpp">QAccessibleInterface *SliderPlugin::create(const QString &amp;classname, QObject *object)
{
    QAccessibleInterface *interface = 0;

    if (classname == QLatin1String(&quot;QSlider&quot;) &amp;&amp; object &amp;&amp; object-&gt;isWidgetType())
        interface = new QAccessibleSlider(static_cast&lt;QWidget *&gt;(object));

    return interface;
}
</db:programlisting>
<db:para>We check whether the interface requested is for <db:link xlink:href="qslider.xml">QSlider</db:link>; if it is, we create and return an interface for it. Note that <db:code>object</db:code> will always be an instance of <db:code>classname</db:code>. You must return 0 if you do not support the class. <db:link xlink:href="qaccessible.xml#updateAccessibility">updateAccessibility</db:link>() checks with the available accessibility plugins until it finds one that does not return 0.</db:para>
<db:para>Finally, you need to include macros in the cpp file:</db:para>
<db:programlisting language="cpp">    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.Examples.Accessibility.SliderPlugin&quot; FILE &quot;slider.json&quot;)
</db:programlisting>
<db:para>The <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link> macro exports the plugin in the <db:code>SliderPlugin</db:code> class into the <db:code>acc_sliderplugin</db:code> library. The first argument is the plugins IID and the second is an optional json file which holds metadata information for the plugin. For more information on plugins, you can consult the plugins <db:link xlink:href="plugins-howto.xml">overview document</db:link>.</db:para>
<db:para>It does not matter if you need the plugin to be statically or dynamically linked with the application.</db:para>
</db:section>
<db:section xml:id="implementing-interface-factories">
<db:title>Implementing Interface Factories</db:title>
<db:para>If you do not want to provide plugins for your accessibility interfaces, you can use an interface factory (<db:link xlink:href="qaccessible.xml#InterfaceFactory-typedef">QAccessible::InterfaceFactory</db:link>), which is the recommended way to provide accessible interfaces in a statically-linked application.</db:para>
<db:para>A factory is a function pointer for a function that takes the same parameters as <db:link xlink:href="qaccessibleplugin.xml">QAccessiblePlugin</db:link>'s <db:link xlink:href="qaccessibleplugin.xml#create">create</db:link>() - a <db:link xlink:href="qstring.xml">QString</db:link> and a <db:link xlink:href="qobject.xml">QObject</db:link>. It also works the same way. You install the factory with the <db:link xlink:href="qaccessible.xml#installFactory">installFactory</db:link>() function. We give an example of how to create a factory for the <db:code>QAccessibleSlider</db:code> interface:</db:para>
<db:programlisting language="cpp">QAccessibleInterface *sliderFactory(const QString &amp;classname, QObject *object)
{
    QAccessibleInterface *interface = 0;

    if (classname == QLatin1String(&quot;QSlider&quot;) &amp;&amp; object &amp;&amp; object-&gt;isWidgetType())
        interface = new QAccessibleSlider(static_cast&lt;QWidget *&gt;(object));

    return interface;
}

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QAccessible::installFactory(sliderFactory);
    ...
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
