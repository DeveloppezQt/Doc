<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Print Support</db:title>
<db:productname>QtPrintSupport</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Print Support Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A guide to producing printed output with Qt's paint system and widgets.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Print Support module provides extensive cross-platform support for printing. Using the printing systems on each platform, Qt applications can print to attached printers and across networks to remote printers. The printing system also supports PDF file generation, providing the foundation for basic report generation facilities.</db:para>
<db:section xml:id="classes-supporting-printing">
<db:title>Classes Supporting Printing</db:title>
<db:para>The following classes support the selecting and setting up of printers and printing output.</db:para>
<db:variablelist role="printing">
<db:varlistentry>
<db:term><db:link xlink:href="qabstractprintdialog.xml" xlink:role="class">QAbstractPrintDialog</db:link></db:term>
<db:listitem>
<db:para>The QAbstractPrintDialog class provides a base implementation for print dialogs used to configure printers.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qpageranges.xml" xlink:role="class">QPageRanges</db:link></db:term>
<db:listitem>
<db:para>The QPageRanges class represents a collection of page ranges.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qpagesetupdialog.xml" xlink:role="class">QPageSetupDialog</db:link></db:term>
<db:listitem>
<db:para>The QPageSetupDialog class provides a configuration dialog for the page-related options on a printer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qprintdialog.xml" xlink:role="class">QPrintDialog</db:link></db:term>
<db:listitem>
<db:para>The QPrintDialog class provides a dialog for specifying the printer's configuration.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qprintengine.xml" xlink:role="class">QPrintEngine</db:link></db:term>
<db:listitem>
<db:para>The QPrintEngine class defines an interface for how QPrinter interacts with a given printing subsystem.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qprintpreviewdialog.xml" xlink:role="class">QPrintPreviewDialog</db:link></db:term>
<db:listitem>
<db:para>The QPrintPreviewDialog class provides a dialog for previewing and configuring page layouts for printer output.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qprintpreviewwidget.xml" xlink:role="class">QPrintPreviewWidget</db:link></db:term>
<db:listitem>
<db:para>The QPrintPreviewWidget class provides a widget for previewing page layouts for printer output.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qprinter.xml" xlink:role="class">QPrinter</db:link></db:term>
<db:listitem>
<db:para>The QPrinter class is a paint device that paints on a printer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qprinterinfo.xml" xlink:role="class">QPrinterInfo</db:link></db:term>
<db:listitem>
<db:para>The QPrinterInfo class gives access to information about existing printers.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="paint-devices-and-printing">
<db:title>Paint Devices and Printing</db:title>
<db:para>Printers are represented by <db:link xlink:href="qprinter.xml">QPrinter</db:link>, a paint device that provides functionality specific to printing, such as support for multiple pages and double-sided output. As a result, printing involves using a <db:link xlink:href="qpainter.xml">QPainter</db:link> to paint onto a series of pages in the same way that you would paint onto a custom widget or image.</db:para>
<db:section xml:id="creating-a-qprinter">
<db:title>Creating a QPrinter</db:title>
<db:para>Although <db:link xlink:href="qprinter.xml">QPrinter</db:link> objects can be constructed and set up without requiring user input, printing is often performed as a result of a request by the user; for example, when the user selects the <db:guilabel>File|Print...</db:guilabel> menu item in a GUI application. In such cases, a newly-constructed <db:link xlink:href="qprinter.xml">QPrinter</db:link> object is supplied to a <db:link xlink:href="qprintdialog.xml">QPrintDialog</db:link>, allowing the user to specify the printer to use, paper size, and other printing properties.</db:para>
<db:programlisting language="cpp">        QPrinter printer;

        QPrintDialog dialog(&amp;amp;printer, this);
        dialog.setWindowTitle(tr(&quot;Print Document&quot;));
        if (editor-&amp;gt;textCursor().hasSelection())
            dialog.addEnabledOption(QAbstractPrintDialog::PrintSelection);
        if (dialog.exec() != QDialog::Accepted) {
            return;
        }
</db:programlisting>
<db:para>It is also possible to set certain default properties by modifying the <db:link xlink:href="qprinter.xml">QPrinter</db:link> before it is supplied to the print dialog. For example, applications that generate batches of reports for printing may set up the <db:link xlink:href="qprinter.xml">QPrinter</db:link> to <db:link xlink:href="qprinter.xml#setOutputFileName">write to a local file</db:link> by default rather than to a printer.</db:para>
</db:section>
<db:section xml:id="painting-onto-a-page">
<db:title>Painting onto a Page</db:title>
<db:para>Once a <db:link xlink:href="qprinter.xml">QPrinter</db:link> object has been constructed and set up, a <db:link xlink:href="qpainter.xml">QPainter</db:link> can be used to perform painting operations on it. We can construct and set up a painter in the following way:</db:para>
<db:programlisting language="cpp">    QPrinter printer(QPrinter::HighResolution);
    printer.setOutputFileName(&quot;print.ps&quot;);
    QPainter painter;
    painter.begin(&amp;amp;printer);

    for (int page = 0; page &amp;lt; numberOfPages; ++page) {

        // Use the painter to draw on the page.

        if (page != lastPage)
            printer.newPage();
    }

    painter.end();
</db:programlisting>
<db:para>Since the <db:link xlink:href="qprinter.xml">QPrinter</db:link> starts with a blank page, we only need to call the <db:link xlink:href="qprinter.xml#newPage">newPage</db:link>() function after drawing each page, except for the last page.</db:para>
<db:para>The document is sent to the printer, or written to a local file, when we call <db:link xlink:href="qpainter.xml#end">end</db:link>().</db:para>
</db:section>
<db:section xml:id="coordinate-systems">
<db:title>Coordinate Systems</db:title>
<db:para><db:link xlink:href="qprinter.xml">QPrinter</db:link> provides functions that can be used to obtain information about the dimensions of the paper (the paper rectangle) and the dimensions of the printable area (the page rectangle). These are given in logical device coordinates that may differ from the physical coordinates used by the device itself, indicating that the printer is able to render text and graphics at a (typically higher) resolution than the user's display.</db:para>
<db:para>Although we do not need to handle the conversion between logical and physical coordinates ourselves, we still need to apply transformations to painting operations because the pixel measurements used to draw on screen are often too small for the higher resolutions of typical printers.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Printer and Painter Coordinate Systems</db:emphasis></db:para>
<db:para>The <db:link xlink:href="qprinter.xml#paperRect">paperRect</db:link>() and <db:link xlink:href="qprinter.xml#pageRect">pageRect</db:link>() functions provide information about the size of the paper used for printing and the area on it that can be painted on.</db:para>
<db:para>The rectangle returned by <db:link xlink:href="qprinter.xml#pageRect">pageRect</db:link>() usually lies inside the rectangle returned by <db:link xlink:href="qprinter.xml#paperRect">paperRect</db:link>(). You do not need to take the positions and sizes of these area into account when using a <db:link xlink:href="qpainter.xml">QPainter</db:link> with a <db:link xlink:href="qprinter.xml">QPrinter</db:link> as the underlying paint device; the origin of the painter's coordinate system will coincide with the top-left corner of the page rectangle, and painting operations will be clipped to the bounds of the drawable part of the page.</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/printer-rects.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The paint system automatically uses the correct device metrics when painting text but, if you need to position text using information obtained from font metrics, you need to ensure that the print device is specified when you construct <db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link> and <db:link xlink:href="qfontmetricsf.xml">QFontMetricsF</db:link> objects, or ensure that each <db:link xlink:href="qfont.xml">QFont</db:link> used is constructed using the form of the constructor that accepts a <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> argument.</db:para>
</db:section>
</db:section>
<db:section xml:id="printing-widgets">
<db:title>Printing Widgets</db:title>
<db:para>To print a widget, you can use the <db:link xlink:href="qwidget.xml#render">QWidget::render</db:link>() function. As mentioned, the printer's resolution is usually higher than the screen resolution, so you will have to scale the painter. You may also want to position the widget on the page. The following code sample shows how this may look.</db:para>
<db:programlisting language="cpp">        QPainter painter;
        painter.begin(&amp;amp;printer);
        double xscale = printer.pageRect().width() / double(myWidget-&amp;gt;width());
        double yscale = printer.pageRect().height() / double(myWidget-&amp;gt;height());
        double scale = qMin(xscale, yscale);
        painter.translate(printer.paperRect().x() + printer.pageRect().width()/2,
                           printer.paperRect().y() + printer.pageRect().height()/2);
        painter.scale(scale, scale);
        painter.translate(-width()/2, -height()/2);

        myWidget-&amp;gt;render(&amp;amp;painter);
</db:programlisting>
<db:para>This will center the widget on the page and scale it so that it fits the page.</db:para>
</db:section>
<db:section xml:id="printing-from-complex-widgets">
<db:title>Printing from Complex Widgets</db:title>
<db:para>Certain widgets, such as <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> and <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>, display rich content that is typically managed by instances of other classes, such as <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> and <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>. As a result, it is these content handling classes that usually provide printing functionality, either via a function that can be used to perform the complete task, or via a function that accepts an existing <db:link xlink:href="qpainter.xml">QPainter</db:link> object. Some widgets provide convenience functions to expose underlying printing features, avoiding the need to obtain the content handler just to call a single function.</db:para>
<db:para>The following table shows which class and function are responsible for printing from a selection of different widgets. For widgets that do not expose printing functionality directly, the content handling classes containing this functionality can be obtained via a function in the corresponding widget's API.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Widget</db:para>
</db:th>
<db:th>
<db:para>Printing function</db:para>
</db:th>
<db:th>
<db:para>Accepts</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qgraphicsview.xml#render">QGraphicsView::render</db:link>()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsvgwidget.xml">QSvgWidget</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qsvgrenderer.xml#render">QSvgRenderer::render</db:link>()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtextedit.xml">QTextEdit</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtextdocument.xml#print">QTextDocument::print</db:link>()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtextlayout.xml#draw">QTextLayout::draw</db:link>()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtextline.xml">QTextLine</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtextline.xml#draw">QTextLine::draw</db:link>()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="qtextedit.xml">QTextEdit</db:link> requires a <db:link xlink:href="qprinter.xml">QPrinter</db:link> rather than a <db:link xlink:href="qpainter.xml">QPainter</db:link> because it uses information about the configured page dimensions in order to insert page breaks at the most appropriate places in printed documents.</db:para>
</db:section>
<db:section xml:id="using-the-module">
<db:title>Using the Module</db:title>
<db:para>Using a Qt module requires linking against the module library, either directly or through other dependencies. Several build tools have dedicated support for this, including <db:link xlink:href="http://www.cmake.org/cmake/help/documentation.html">CMake</db:link> and <db:link xlink:href="qmake-manual.xml">qmake</db:link>.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Use the <db:code>find_package()</db:code> command to locate the needed module components in the <db:code>Qt6</db:code> package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 COMPONENTS PrintSupport REQUIRED)
target_link_libraries(mytarget PRIVATE Qt6::PrintSupport)
</db:programlisting>
<db:para>See also the <db:link xlink:href="cmake-manual.xml">Build with CMake</db:link> overview.</db:para>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>To configure the module for building with qmake, add the module as a value of the <db:code>QT</db:code> variable in the project's .pro file:</db:para>
<db:programlisting language="cpp">QT += printsupport
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="module-evolution">
<db:title>Module Evolution</db:title>
<db:para><db:link xlink:href="printsupport-changes-qt6.xml">Changes to Qt Print Support</db:link> lists important changes in the module API and functionality that were done for the Qt 6 series of Qt.</db:para>
</db:section>
<db:section xml:id="licenses-and-trademarks">
<db:title>Licenses and Trademarks</db:title>
<db:para>The Qt Print Support module is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under free software licenses: The <db:link xlink:href="http://www.gnu.org/licenses/lgpl-3.0.html">GNU Lesser General Public License, version 3</db:link>, or the <db:link xlink:href="http://www.gnu.org/licenses/gpl-2.0.html">GNU General Public License, version 2</db:link>. See <db:link xlink:href="licensing.xml">Qt Licensing</db:link> for further details.</db:para>
<db:para>Please note that Adobe<db:superscript>&amp;reg;</db:superscript> places restrictions on the use of its trademarks (including logos) in conjunction with PDF; e.g. &quot;Adobe PDF&quot;. Please refer to <db:link xlink:href="http://www.adobe.com">www.adobe.com</db:link> for guidelines.</db:para>
</db:section>
</db:article>
