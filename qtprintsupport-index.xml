<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Print Support</db:title>
<db:productname>QtPrintSupport</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Print Support Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A guide to producing printed output with Qt's paint system and widgets.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt provides extensive cross-platform support for printing. Using the printing systems on each platform, Qt applications can print to attached printers and across networks to remote printers. Qt's printing system also supports PDF file generation, providing the foundation for basic report generation facilities.</db:para>
<db:section xml:id="classes-supporting-printing">
<db:title>Classes Supporting Printing</db:title>
<db:para>The following classes support the selecting and setting up of printers and printing output.</db:para>
</db:section>
<db:section xml:id="paint-devices-and-printing">
<db:title>Paint Devices and Printing</db:title>
<db:para>In Qt, printers are represented by QPrinter, a paint device that provides functionality specific to printing, such as support for multiple pages and double-sided output. As a result, printing involves using a QPainter to paint onto a series of pages in the same way that you would paint onto a custom widget or image.</db:para>
<db:section xml:id="creating-a-qprinter">
<db:title>Creating a QPrinter</db:title>
<db:para>Although QPrinter objects can be constructed and set up without requiring user input, printing is often performed as a result of a request by the user; for example, when the user selects the <db:guilabel>File|Print...</db:guilabel> menu item in a GUI application. In such cases, a newly-constructed QPrinter object is supplied to a QPrintDialog, allowing the user to specify the printer to use, paper size, and other printing properties.</db:para>
<db:programlisting language="cpp">        QPrinter printer;

        QPrintDialog dialog(&amp;printer, this);
        dialog.setWindowTitle(tr(&quot;Print Document&quot;));
        if (editor-&gt;textCursor().hasSelection())
            dialog.addEnabledOption(QAbstractPrintDialog::PrintSelection);
        if (dialog.exec() != QDialog::Accepted) {
            return;
        }
</db:programlisting>
<db:para>It is also possible to set certain default properties by modifying the QPrinter before it is supplied to the print dialog. For example, applications that generate batches of reports for printing may set up the QPrinter to <db:link xlink:href="">write to a local file</db:link> by default rather than to a printer.</db:para>
</db:section>
<db:section xml:id="painting-onto-a-page">
<db:title>Painting onto a Page</db:title>
<db:para>Once a QPrinter object has been constructed and set up, a QPainter can be used to perform painting operations on it. We can construct and set up a painter in the following way:</db:para>
<db:programlisting language="cpp">    QPrinter printer(QPrinter::HighResolution);
    printer.setOutputFileName(&quot;print.ps&quot;);
    QPainter painter;
    painter.begin(&amp;printer);

    for (int page = 0; page &lt; numberOfPages; ++page) {

        // Use the painter to draw on the page.

        if (page != lastPage)
            printer.newPage();
    }

    painter.end();
</db:programlisting>
<db:para>Since the QPrinter starts with a blank page, we only need to call the <db:link xlink:href="">newPage()</db:link> function after drawing each page, except for the last page.</db:para>
<db:para>The document is sent to the printer, or written to a local file, when we call <db:link xlink:href="">end()</db:link>.</db:para>
</db:section>
<db:section xml:id="coordinate-systems">
<db:title>Coordinate Systems</db:title>
<db:para>QPrinter provides functions that can be used to obtain information about the dimensions of the paper (the paper rectangle) and the dimensions of the printable area (the page rectangle). These are given in logical device coordinates that may differ from the physical coordinates used by the device itself, indicating that the printer is able to render text and graphics at a (typically higher) resolution than the user's display.</db:para>
<db:para>Although we do not need to handle the conversion between logical and physical coordinates ourselves, we still need to apply transformations to painting operations because the pixel measurements used to draw on screen are often too small for the higher resolutions of typical printers.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Printer and Painter Coordinate Systems</db:emphasis></db:para>
<db:para>The <db:link xlink:href="">paperRect()</db:link> and <db:link xlink:href="">pageRect()</db:link> functions provide information about the size of the paper used for printing and the area on it that can be painted on.</db:para>
<db:para>The rectangle returned by <db:link xlink:href="">pageRect()</db:link> usually lies inside the rectangle returned by <db:link xlink:href="">paperRect()</db:link>. You do not need to take the positions and sizes of these area into account when using a QPainter with a QPrinter as the underlying paint device; the origin of the painter's coordinate system will coincide with the top-left corner of the page rectangle, and painting operations will be clipped to the bounds of the drawable part of the page.</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/printer-rects.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The paint system automatically uses the correct device metrics when painting text but, if you need to position text using information obtained from font metrics, you need to ensure that the print device is specified when you construct QFontMetrics and QFontMetricsF objects, or ensure that each QFont used is constructed using the form of the constructor that accepts a QPaintDevice argument.</db:para>
</db:section>
</db:section>
<db:section xml:id="printing-widgets">
<db:title>Printing Widgets</db:title>
<db:para>To print a widget, you can use the QWidget::render() function. As mentioned, the printer's resolution is usually higher than the screen resolution, so you will have to scale the painter. You may also want to position the widget on the page. The following code sample shows how this may look.</db:para>
<db:programlisting language="cpp">        QPainter painter;
        painter.begin(&amp;printer);
        double xscale = printer.pageRect().width()/double(myWidget-&gt;width());
        double yscale = printer.pageRect().height()/double(myWidget-&gt;height());
        double scale = qMin(xscale, yscale);
        painter.translate(printer.paperRect().x() + printer.pageRect().width()/2,
                           printer.paperRect().y() + printer.pageRect().height()/2);
        painter.scale(scale, scale);
        painter.translate(-width()/2, -height()/2);

        myWidget-&gt;render(&amp;painter);
</db:programlisting>
<db:para>This will center the widget on the page and scale it so that it fits the page.</db:para>
</db:section>
<db:section xml:id="printing-from-complex-widgets">
<db:title>Printing from Complex Widgets</db:title>
<db:para>Certain widgets, such as QTextEdit and QGraphicsView, display rich content that is typically managed by instances of other classes, such as QTextDocument and QGraphicsScene. As a result, it is these content handling classes that usually provide printing functionality, either via a function that can be used to perform the complete task, or via a function that accepts an existing QPainter object. Some widgets provide convenience functions to expose underlying printing features, avoiding the need to obtain the content handler just to call a single function.</db:para>
<db:para>The following table shows which class and function are responsible for printing from a selection of different widgets. For widgets that do not expose printing functionality directly, the content handling classes containing this functionality can be obtained via a function in the corresponding widget's API.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Widget</db:para>
</db:th>
<db:th>
<db:para>Printing function</db:para>
</db:th>
<db:th>
<db:para>Accepts</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>QGraphicsView</db:para>
</db:td>
<db:td>
<db:para>QGraphicsView::render()</db:para>
</db:td>
<db:td>
<db:para>QPainter</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QSvgWidget</db:para>
</db:td>
<db:td>
<db:para>QSvgRenderer::render()</db:para>
</db:td>
<db:td>
<db:para>QPainter</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QTextEdit</db:para>
</db:td>
<db:td>
<db:para>QTextDocument::print()</db:para>
</db:td>
<db:td>
<db:para>QPrinter</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QTextLayout</db:para>
</db:td>
<db:td>
<db:para>QTextLayout::draw()</db:para>
</db:td>
<db:td>
<db:para>QPainter</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QTextLine</db:para>
</db:td>
<db:td>
<db:para>QTextLine::draw()</db:para>
</db:td>
<db:td>
<db:para>QPainter</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>QTextEdit requires a QPrinter rather than a QPainter because it uses information about the configured page dimensions in order to insert page breaks at the most appropriate places in printed documents.</db:para>
</db:section>
</db:article>
