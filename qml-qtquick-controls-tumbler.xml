<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Tumbler QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Spinnable wheel of items that can be selected.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-control.xml">Control</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Tumbler is part of <db:simplelist><db:member>qtquickcontrols-input</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-tumbler-wrap.gif"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="cpp">Tumbler {
    model: 5
    // ...
}
</db:programlisting>
<db:para>Tumbler allows the user to select an option from a spinnable <db:emphasis>&quot;wheel&quot;</db:emphasis> of items. It is useful for when there are too many options to use, for example, a <db:link xlink:href="qml-qtquick-controls-radiobutton.xml">RadioButton</db:link>, and too few options to require the use of an editable <db:link xlink:href="qml-qtquick-controls-spinbox.xml">SpinBox</db:link>. It is convenient in that it requires no keyboard usage and wraps around at each end when there are a large number of items.</db:para>
<db:para>The API is similar to that of views like <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> and <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link>; a <db:link xlink:href="qml-qtquick-controls-tumbler.xml#model-prop">model</db:link> and <db:link xlink:href="qml-qtquick-controls-tumbler.xml#delegate-prop">delegate</db:link> can be set, and the <db:link xlink:href="qml-qtquick-controls-tumbler.xml#count-prop">count</db:link> and <db:link xlink:href="qml-qtquick-controls-tumbler.xml#currentItem-prop">currentItem</db:link> properties provide read-only access to information about the view. To position the view at a certain index, use <db:link xlink:href="qml-qtquick-controls-tumbler.xml#positionViewAtIndex-method">positionViewAtIndex</db:link>().</db:para>
<db:para>Unlike views like <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link> and <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>, however, there is always a current item (when the model isn't empty). This means that when <db:link xlink:href="qml-qtquick-controls-tumbler.xml#count-prop">count</db:link> is equal to <db:code>0</db:code>, <db:link xlink:href="qml-qtquick-controls-tumbler.xml#currentIndex-prop">currentIndex</db:link> will be <db:code>-1</db:code>. In all other cases, it will be greater than or equal to <db:code>0</db:code>.</db:para>
<db:para>By default, Tumbler <db:link xlink:href="qml-qtquick-controls-tumbler.xml#wrap-prop">wraps</db:link> when it reaches the top and bottom, as long as there are more items in the model than there are visible items; that is, when <db:link xlink:href="qml-qtquick-controls-tumbler.xml#count-prop">count</db:link> is greater than <db:link xlink:href="qml-qtquick-controls-tumbler.xml#visibleItemCount-prop">visibleItemCount</db:link>:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Window
import QtQuick.Controls

Rectangle {
    width: frame.implicitWidth + 10
    height: frame.implicitHeight + 10

    function formatText(count, modelData) {
        var data = count === 12 ? modelData + 1 : modelData;
        return data.toString().length &lt; 2 ? &quot;0&quot; + data : data;
    }

    FontMetrics {
        id: fontMetrics
    }

    Component {
        id: delegateComponent

        Label {
            text: formatText(Tumbler.tumbler.count, modelData)
            opacity: 1.0 - Math.abs(Tumbler.displacement) / (Tumbler.tumbler.visibleItemCount / 2)
            horizontalAlignment: Text.AlignHCenter
            verticalAlignment: Text.AlignVCenter
            font.pixelSize: fontMetrics.font.pixelSize * 1.25
        }
    }

    Frame {
        id: frame
        padding: 0
        anchors.centerIn: parent

        Row {
            id: row

            Tumbler {
                id: hoursTumbler
                model: 12
                delegate: delegateComponent
            }

            Tumbler {
                id: minutesTumbler
                model: 60
                delegate: delegateComponent
            }

            Tumbler {
                id: amPmTumbler
                model: [&quot;AM&quot;, &quot;PM&quot;]
                delegate: delegateComponent
            }
        }
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols-customize.xml#customizing-tumbler">Customizing Tumbler</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-input.xml">Input Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:para>This property holds the number of items in the model.</db:para>
</db:section>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:para>This property holds the index of the current item.</db:para>
<db:para>The value of this property is <db:code>-1</db:code> when <db:link xlink:href="qml-qtquick-controls-tumbler.xml#count-prop">count</db:link> is equal to <db:code>0</db:code>. In all other cases, it will be greater than or equal to <db:code>0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-tumbler.xml#currentItem-prop">currentItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-tumbler.xml#positionViewAtIndex-method">positionViewAtIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentItem-prop">
<db:title>[read-only] currentItem : Item</db:title>
<db:para>This property holds the item at the current index.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-tumbler.xml#currentIndex-prop">currentIndex</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-tumbler.xml#positionViewAtIndex-method">positionViewAtIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="delegate-prop">
<db:title>delegate : Component</db:title>
<db:para>This property holds the delegate used to display each item.</db:para>
</db:section>
<db:section xml:id="model-prop">
<db:title>model : variant</db:title>
<db:para>This property holds the model that provides data for this tumbler.</db:para>
</db:section>
<db:section xml:id="moving-prop">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] moving : bool</db:title>
<db:para>This property describes whether the tumbler is currently moving, due to the user either dragging or flicking it.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
</db:section>
<db:section xml:id="visibleItemCount-prop">
<db:title>visibleItemCount : int</db:title>
<db:para>This property holds the number of items visible in the tumbler. It must be an odd number, as the current item is always vertically centered.</db:para>
</db:section>
<db:section xml:id="wrap-prop">
<db:title>[since QtQuick.Controls 2.1 (Qt 5.8)] wrap : bool</db:title>
<db:para>This property determines whether or not the tumbler wraps around when it reaches the top or bottom.</db:para>
<db:para>The default value is <db:code>false</db:code> when <db:link xlink:href="qml-qtquick-controls-tumbler.xml#count-prop">count</db:link> is less than <db:link xlink:href="qml-qtquick-controls-tumbler.xml#visibleItemCount-prop">visibleItemCount</db:link>, as it is simpler to interact with a non-wrapping Tumbler when there are only a few items. To override this behavior, explicitly set the value of this property. To return to the default behavior, set this property to <db:code>undefined</db:code>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.1 (Qt 5.8).</db:para>
</db:section>
</db:section>
<db:section xml:id="attached-property-documentation">
<db:title>Attached Property Documentation</db:title>
<db:section xml:id="displacement-attached-prop">
<db:title>[read-only] Tumbler.displacement : real</db:title>
<db:para>This attached property holds a value from <db:code>-visibleItemCount / 2</db:code> to <db:code>visibleItemCount / 2</db:code>, which represents how far away this item is from being the current item, with <db:code>0</db:code> being completely current.</db:para>
<db:para>For example, the item below will be 40% opaque when it is not the current item, and transition to 100% opacity when it becomes the current item:</db:para>
<db:programlisting language="cpp">delegate: Text {
    text: modelData
    opacity: 0.4 + Math.max(0, 1 - Math.abs(Tumbler.displacement)) * 0.6
}
</db:programlisting>
</db:section>
<db:section xml:id="tumbler-attached-prop">
<db:title>[read-only] Tumbler.tumbler : Tumbler</db:title>
<db:para>This attached property holds the tumbler. The property can be attached to a tumbler delegate. The value is <db:code>null</db:code> if the item is not a tumbler delegate.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="positionViewAtIndex-method">
<db:title>[since QtQuick.Controls 2.5 (Qt 5.12)] void positionViewAtIndex(int <db:emphasis>index</db:emphasis>, PositionMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Positions the view so that the <db:code role="parameter">index</db:code> is at the position specified by <db:code role="parameter">mode</db:code>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">positionViewAtIndex(10, Tumbler.Center)
</db:programlisting>
<db:para>If <db:link xlink:href="qml-qtquick-controls-tumbler.xml#wrap-prop">wrap</db:link> is true (the default), the modes available to <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link>'s <db:link xlink:href="qml-qtquick-pathview.xml#positionViewAtIndex-method">positionViewAtIndex</db:link>() function are available, otherwise the modes available to <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>'s <db:link xlink:href="qml-qtquick-listview.xml#positionViewAtIndex-method">positionViewAtIndex</db:link>() function are available.</db:para>
<db:note>
<db:para>There is a known limitation that using <db:code>Tumbler.Beginning</db:code> when <db:link xlink:href="qml-qtquick-controls-tumbler.xml#wrap-prop">wrap</db:link> is <db:code>true</db:code> will result in the wrong item being positioned at the top of view. As a workaround, pass <db:code>index - 1</db:code>.</db:para>
</db:note>
<db:para>This method was introduced in QtQuick.Controls 2.5 (Qt 5.12).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-tumbler.xml#currentIndex-prop">currentIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
