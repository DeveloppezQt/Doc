<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Data Types for Qt-supported Database Systems</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Recommended data types for database systems.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="recommended-data-types-for-qt-supported-database-systems">
<db:title>Recommended Data Types for Qt-Supported Database Systems</db:title>
<db:para>This table shows the recommended data types for extracting data from the databases supported in Qt. Note that types used in Qt are not necessarily valid as input types to a specific database system. e.g., A double might work perfectly as input for floating point records in a particular database, but not necessarily as a storage format for output from that database, because it would be stored with 64-bit precision in C++.</db:para>
<db:section xml:id="ibm-db2-data-types">
<db:title>IBM DB2 Data Types</db:title>
<db:informaltable style="generic" width="90%">
<db:thead>
<db:tr>
<db:th>
<db:para>IBM DB2 data type</db:para>
</db:th>
<db:th>
<db:para>SQL type description</db:para>
</db:th>
<db:th>
<db:para>Recommended input (C++ or Qt data type)</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>SMALLINT</db:para>
</db:td>
<db:td>
<db:para>16-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint16</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>INTEGER</db:para>
</db:td>
<db:td>
<db:para>32-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint32</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>BIGINT</db:para>
</db:td>
<db:td>
<db:para>64-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint64</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>REAL</db:para>
</db:td>
<db:td>
<db:para>32-bit Single-precision floating point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DOUBLE PRECISION</db:para>
</db:td>
<db:td>
<db:para>64-bit Double-precision floating point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FLOAT</db:para>
</db:td>
<db:td>
<db:para>64-bit Double-precision floating point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CHAR</db:para>
</db:td>
<db:td>
<db:para>Fixed-length, null-terminated character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>VARCHAR</db:para>
</db:td>
<db:td>
<db:para>Null-terminated varying length string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LONG VARCHAR</db:para>
</db:td>
<db:td>
<db:para>Not null-terminated varying length character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>BLOB</db:para>
</db:td>
<db:td>
<db:para>Not null-terminated varying binary string with 4-byte string length indicator</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CLOB</db:para>
</db:td>
<db:td>
<db:para>Character large string object</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DATE</db:para>
</db:td>
<db:td>
<db:para>Null-terminated character string of the following format: yyyy-mm-dd</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdate.xml">QDate</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIME</db:para>
</db:td>
<db:td>
<db:para>Null-terminated character string of the following format: hh.mm.ss</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qtime.xml">QTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIMESTAMP</db:para>
</db:td>
<db:td>
<db:para>Null-terminated character string of the following format: yyyy-mm-dd-hh.mm.ss.nnnnnn</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="borland-interbase-data-types">
<db:title>Borland InterBase Data Types</db:title>
<db:informaltable style="generic" width="90%">
<db:thead>
<db:tr>
<db:th>
<db:para>Borland InterBase data type</db:para>
</db:th>
<db:th>
<db:para>SQL type description</db:para>
</db:th>
<db:th>
<db:para>Recommended input (C++ or Qt data type)</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>BOOLEAN</db:para>
</db:td>
<db:td>
<db:para>Boolean</db:para>
</db:td>
<db:td>
<db:para>bool</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TINYINT</db:para>
</db:td>
<db:td>
<db:para>8 bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint8</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SMALLINT</db:para>
</db:td>
<db:td>
<db:para>16-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint16</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>INTEGER</db:para>
</db:td>
<db:td>
<db:para>32-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint32</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>BIGINT LONG</db:para>
</db:td>
<db:td>
<db:para>64-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint64</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>REAL FLOAT</db:para>
</db:td>
<db:td>
<db:para>32-bit floating point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FLOAT</db:para>
</db:td>
<db:td>
<db:para>64-bit floating point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DOUBLE</db:para>
</db:td>
<db:td>
<db:para>64-bit floating point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DOUBLE PRECISION</db:para>
</db:td>
<db:td>
<db:para>64-bit Double-precision floating point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>VARCHAR STRING</db:para>
</db:td>
<db:td>
<db:para>Character string, Unicode</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CLOB</db:para>
</db:td>
<db:td>
<db:para>Character large string object</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DATE</db:para>
</db:td>
<db:td>
<db:para>Displays date. Format: 'yyyy-mm-dd'</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdate.xml">QDate</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIME</db:para>
</db:td>
<db:td>
<db:para>Displays time. Format is 'hh:mm:ss' in 24-hour format</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qtime.xml">QTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIMESTAMP</db:para>
</db:td>
<db:td>
<db:para>Displays a timestamp. Format is 'yyyy-mm-dd hh:mm:ss'</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="mysql-data-types">
<db:title>MySQL Data Types</db:title>
<db:informaltable style="generic" width="90%">
<db:thead>
<db:tr>
<db:th>
<db:para>MySQL data type</db:para>
</db:th>
<db:th>
<db:para>SQL type description</db:para>
</db:th>
<db:th>
<db:para>Recommended input (C++ or Qt data type)</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>TINYINT</db:para>
</db:td>
<db:td>
<db:para>8 bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint8</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TINYINT UNSIGNED</db:para>
</db:td>
<db:td>
<db:para>8 bit unsigned integer</db:para>
</db:td>
<db:td>
<db:para>typedef quint8</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SMALLINT</db:para>
</db:td>
<db:td>
<db:para>16-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint16</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SMALLINT UNSIGNED</db:para>
</db:td>
<db:td>
<db:para>16-bit unsigned integer</db:para>
</db:td>
<db:td>
<db:para>typedef quint16</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>INT</db:para>
</db:td>
<db:td>
<db:para>32-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint32</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>INT UNSIGNED</db:para>
</db:td>
<db:td>
<db:para>32-bit unsigned integer</db:para>
</db:td>
<db:td>
<db:para>typedef quint32</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>BIGINT</db:para>
</db:td>
<db:td>
<db:para>64-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint64</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FLOAT</db:para>
</db:td>
<db:td>
<db:para>32-bit Floating Point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DOUBLE</db:para>
</db:td>
<db:td>
<db:para>64-bit Floating Point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CHAR</db:para>
</db:td>
<db:td>
<db:para>Character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>VARCHAR</db:para>
</db:td>
<db:td>
<db:para>Character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TINYTEXT</db:para>
</db:td>
<db:td>
<db:para>Character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TEXT</db:para>
</db:td>
<db:td>
<db:para>Character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MEDIUMTEXT</db:para>
</db:td>
<db:td>
<db:para>Character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LONGTEXT</db:para>
</db:td>
<db:td>
<db:para>Character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CLOB</db:para>
</db:td>
<db:td>
<db:para>Character large string object</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>all BLOB types</db:para>
</db:td>
<db:td>
<db:para>BLOB</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DATE</db:para>
</db:td>
<db:td>
<db:para>Date without Time</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdate.xml">QDate</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DATETIME</db:para>
</db:td>
<db:td>
<db:para>Date and Time</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIMESTAMP</db:para>
</db:td>
<db:td>
<db:para>Date and Time</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIME</db:para>
</db:td>
<db:td>
<db:para>Time</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qtime.xml">QTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>YEAR</db:para>
</db:td>
<db:td>
<db:para>Year (int)</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ENUM</db:para>
</db:td>
<db:td>
<db:para>Enumeration of Value Set</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="oracle-call-interface-data-types">
<db:title>Oracle Call Interface Data Types</db:title>
<db:informaltable style="generic" width="90%">
<db:thead>
<db:tr>
<db:th>
<db:para>Oracle Call Interface data type</db:para>
</db:th>
<db:th>
<db:para>SQL type description</db:para>
</db:th>
<db:th>
<db:para>Recommended input (C++ or Qt data type)</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>NUMBER</db:para>
</db:td>
<db:td>
<db:para>FLOAT, DOUBLE, PRECISIONc REAL</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>NUMBER(38)</db:para>
</db:td>
<db:td>
<db:para>INTEGER INT SMALLINT</db:para>
</db:td>
<db:td>
<db:para>typedef qint8/16/32/64</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>NUMBER(p,s)</db:para>
</db:td>
<db:td>
<db:para>NUMERIC(p,s) DECIMAL(p,s)a</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>NVARCHAR2(n)</db:para>
</db:td>
<db:td>
<db:para>Character string (NATIONAL CHARACTER VARYING(n) NATIONAL CHAR VARYING(n) NCHAR VARYING(n))</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>NCHAR(n)</db:para>
</db:td>
<db:td>
<db:para>Character string (NATIONAL CHARACTER(n) NATIONAL CHAR(n) NCHAR(n))</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CHAR(n)</db:para>
</db:td>
<db:td>
<db:para>Character string (CHARACTER(n) CHAR(n))</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CLOB</db:para>
</db:td>
<db:td>
<db:para>Character large string object</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>BLOB</db:para>
</db:td>
<db:td>
<db:para>A binary large object</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIMESTAMP</db:para>
</db:td>
<db:td>
<db:para>Year, month, and day values of date, as well as hour, minute, and second values of time</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="odbc-data-types">
<db:title>ODBC Data Types</db:title>
<db:informaltable style="generic" width="90%">
<db:thead>
<db:tr>
<db:th>
<db:para>ODBC data type</db:para>
</db:th>
<db:th>
<db:para>SQL type description</db:para>
</db:th>
<db:th>
<db:para>Recommended input (C++ or Qt data type)</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>BIT</db:para>
</db:td>
<db:td>
<db:para>Boolean</db:para>
</db:td>
<db:td>
<db:para>BOOL</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TINYINT</db:para>
</db:td>
<db:td>
<db:para>8 bit integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint8</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SMALLINT</db:para>
</db:td>
<db:td>
<db:para>16-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint16</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>INTEGER</db:para>
</db:td>
<db:td>
<db:para>32-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint32</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>BIGINT</db:para>
</db:td>
<db:td>
<db:para>64-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint64</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>REAL</db:para>
</db:td>
<db:td>
<db:para>32-bit Single-precision floating point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FLOAT</db:para>
</db:td>
<db:td>
<db:para>64-bit Double floating point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DOUBLE</db:para>
</db:td>
<db:td>
<db:para>64-bit Double floating point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CHAR</db:para>
</db:td>
<db:td>
<db:para>Character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>VARCHAR</db:para>
</db:td>
<db:td>
<db:para>Character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LONGVARCHAR</db:para>
</db:td>
<db:td>
<db:para>Character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CLOB</db:para>
</db:td>
<db:td>
<db:para>Character large string object</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DATE</db:para>
</db:td>
<db:td>
<db:para>Character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdate.xml">QDate</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIME</db:para>
</db:td>
<db:td>
<db:para>Character Time, Character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qtime.xml">QTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIMESTAMP</db:para>
</db:td>
<db:td>
<db:para>Character Time, Character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="postgresql-data-types">
<db:title>PostgreSQL Data Types</db:title>
<db:informaltable style="generic" width="90%">
<db:thead>
<db:tr>
<db:th>
<db:para>PostgreSQL data type</db:para>
</db:th>
<db:th>
<db:para>SQL type description</db:para>
</db:th>
<db:th>
<db:para>Recommended input (C++ or Qt data type)</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>BOOLEAN</db:para>
</db:td>
<db:td>
<db:para>Boolean</db:para>
</db:td>
<db:td>
<db:para>bool</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SMALLINT</db:para>
</db:td>
<db:td>
<db:para>16-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint16</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>INTEGER</db:para>
</db:td>
<db:td>
<db:para>32-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint32</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>BIGINT</db:para>
</db:td>
<db:td>
<db:para>64-bit signed integer</db:para>
</db:td>
<db:td>
<db:para>typedef qint64</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>REAL</db:para>
</db:td>
<db:td>
<db:para>32-bit variable-precision floating point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DOUBLE PRECISION</db:para>
</db:td>
<db:td>
<db:para>64-bit variable-precision floating point</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DECIMAL VARIABLE</db:para>
</db:td>
<db:td>
<db:para>user-specified precision, exact</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>NUMERIC VARIABLE</db:para>
</db:td>
<db:td>
<db:para>user-specified precision, exact</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>VARCHAR</db:para>
</db:td>
<db:td>
<db:para>variable-length character string</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CHARACTER</db:para>
</db:td>
<db:td>
<db:para>Character string of fixed-length</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TEXT</db:para>
</db:td>
<db:td>
<db:para>Character string of variable-length</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CLOB</db:para>
</db:td>
<db:td>
<db:para>Character large string object</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIMESTAMP</db:para>
</db:td>
<db:td>
<db:para>8 bytes, both date and time</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIMESTAMP</db:para>
</db:td>
<db:td>
<db:para>8 bytes, both date and time, with time zone</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DATE</db:para>
</db:td>
<db:td>
<db:para>4 bytes, dates only</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdate.xml">QDate</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIME</db:para>
</db:td>
<db:td>
<db:para>8 bytes, times of day only 00:00:00.00 - 23:59:59.99</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qtime.xml">QTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIME</db:para>
</db:td>
<db:td>
<db:para>12 bytes times of day only, with time zone 00:00:00.00+12</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="qsqlite-sqlite-version-3-data-types">
<db:title>QSQLITE SQLite version 3 Data Types</db:title>
<db:informaltable style="generic" width="90%">
<db:thead>
<db:tr>
<db:th>
<db:para>QSQLITE SQLite version 3 data type</db:para>
</db:th>
<db:th>
<db:para>SQL type description</db:para>
</db:th>
<db:th>
<db:para>Recommended input (C++ or Qt data type)</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>NULL</db:para>
</db:td>
<db:td>
<db:para>NULL value.</db:para>
</db:td>
<db:td>
<db:para>NULL</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>INTEGER</db:para>
</db:td>
<db:td>
<db:para>Signed integer, stored in 8, 16, 24, 32, 48, or 64-bits depending on the magnitude of the value.</db:para>
</db:td>
<db:td>
<db:para>typedef qint8/16/32/64</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>REAL</db:para>
</db:td>
<db:td>
<db:para>64-bit floating point value.</db:para>
</db:td>
<db:td>
<db:para>By default mapping to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TEXT</db:para>
</db:td>
<db:td>
<db:para>Character string (UTF-8, UTF-16BE or UTF-16-LE).</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CLOB</db:para>
</db:td>
<db:td>
<db:para>Character large string object</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>BLOB</db:para>
</db:td>
<db:td>
<db:para>The value is a BLOB of data, stored exactly as it was input.</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="sybase-adaptive-server-data-types">
<db:title>Sybase Adaptive Server Data Types</db:title>
<db:informaltable style="generic" width="90%">
<db:thead>
<db:tr>
<db:th>
<db:para>Sybase Adaptive Server data type</db:para>
</db:th>
<db:th>
<db:para>SQL type description</db:para>
</db:th>
<db:th>
<db:para>Recommended input (C++ or Qt data type)</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>BINARY</db:para>
</db:td>
<db:td>
<db:para>Describes a fixed-length binary value up to 255 bytes in size.</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CHAR</db:para>
</db:td>
<db:td>
<db:para>Character String</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DATETIME</db:para>
</db:td>
<db:td>
<db:para>Date and time. Range: 1753-01-01 00:00:00 through 9999-12-31 23:59:59.</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>NCHAR</db:para>
</db:td>
<db:td>
<db:para>Character String of fixed length</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>NVARACHAR</db:para>
</db:td>
<db:td>
<db:para>Character String of variable length</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>VARCHAR</db:para>
</db:td>
<db:td>
<db:para>Character String of fixed length</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CLOB</db:para>
</db:td>
<db:td>
<db:para>Character large string object</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIMESTAMP</db:para>
</db:td>
<db:td>
<db:para>A unique number within a database</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SMALLDATETIME</db:para>
</db:td>
<db:td>
<db:para>Date and time. Range: 1900-01-01 00:00 through 2079-12-31 23:59</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>UNICHAR</db:para>
</db:td>
<db:td>
<db:para>Character String of fixed length.(Unicode)</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>UNIVARCHAR</db:para>
</db:td>
<db:td>
<db:para>Character String of variable length.(Unicode)</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>VARBINARY</db:para>
</db:td>
<db:td>
<db:para>Describes a variable-length binary value up to 255 bytes in size</db:para>
</db:td>
<db:td>
<db:para>Mapped to <db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="sqlite-version-2">
<db:title>SQLite Version 2</db:title>
<db:para>SQLite version 2 is &quot;typeless&quot;. This means that you can store any kind of data you want in any column of any table, regardless of the declared data type of that column. We recommend that you map the data to <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
