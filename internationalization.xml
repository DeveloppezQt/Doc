<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Internationalization with Qt</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="i18n-source-translation.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Writing Source Code for Translation"/></db:extendedlink>
<db:abstract>
<db:para>Information about Qt's support for internationalization and multiple languages.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>The <db:emphasis>internationalization</db:emphasis> and <db:emphasis>localization</db:emphasis> of an application are the processes of adapting the application to different languages, regional differences and technical requirements of a target market. Internationalization means designing a software application so that it can be adapted to various languages and regions without engineering changes. Localization means adapting internationalized software for a specific region or language by adding locale-specific components (such as date, time, and number formats) and translating text.</db:para>
<db:section xml:id="relevant-qt-classes-and-apis">
<db:title>Relevant Qt Classes and APIs</db:title>
<db:para>These classes support internationalizing of Qt applications.</db:para>
<db:variablelist role="i18n">
<db:varlistentry>
<db:term><db:link xlink:href="qcollator.xml" xlink:role="class">QCollator</db:link></db:term>
<db:listitem>
<db:para>The QCollator class compares strings according to a localized collation algorithm.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcollatorsortkey.xml" xlink:role="class">QCollatorSortKey</db:link></db:term>
<db:listitem>
<db:para>The QCollatorSortKey class can be used to speed up string collation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlocale.xml" xlink:role="class">QLocale</db:link></db:term>
<db:listitem>
<db:para>The QLocale class converts between numbers and their string representations in various languages.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtextcodec.xml" xlink:role="class">QTextCodec</db:link></db:term>
<db:listitem>
<db:para>The QTextCodec class provides conversions between text encodings.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtextdecoder.xml" xlink:role="class">QTextDecoder</db:link></db:term>
<db:listitem>
<db:para>The QTextDecoder class provides a state-based decoder.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtextencoder.xml" xlink:role="class">QTextEncoder</db:link></db:term>
<db:listitem>
<db:para>The QTextEncoder class provides a state-based encoder.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtranslator.xml" xlink:role="class">QTranslator</db:link></db:term>
<db:listitem>
<db:para>The QTranslator class provides internationalization support for text output.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="languages-and-writing-systems">
<db:title>Languages and Writing Systems</db:title>
<db:para>In some cases internationalization is simple, for example, making a US application accessible to Australian or British users may require little more than a few spelling corrections. But to make a US application usable by Japanese users, or a Korean application usable by German users, will require that the software operate not only in different languages, but use different input techniques, character encodings and presentation conventions.</db:para>
<db:para>Qt tries to make internationalization as painless as possible for developers. All input controls and text drawing methods in Qt offer built-in support for all supported languages. The built-in font engine is capable of correctly and attractively rendering text that contains characters from a variety of different writing systems at the same time.</db:para>
<db:para>Qt supports most languages in use today, in particular:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>All East Asian languages (Chinese, Japanese and Korean)</db:para>
</db:listitem>
<db:listitem>
<db:para>All Western languages (using Latin script)</db:para>
</db:listitem>
<db:listitem>
<db:para>Arabic</db:para>
</db:listitem>
<db:listitem>
<db:para>Cyrillic languages (Russian, Ukrainian, etc.)</db:para>
</db:listitem>
<db:listitem>
<db:para>Greek</db:para>
</db:listitem>
<db:listitem>
<db:para>Hebrew</db:para>
</db:listitem>
<db:listitem>
<db:para>Thai and Lao</db:para>
</db:listitem>
<db:listitem>
<db:para>All scripts in Unicode 6.2 that do not require special processing</db:para>
</db:listitem>
<db:listitem>
<db:para>Bengali</db:para>
</db:listitem>
<db:listitem>
<db:para>Burmese (Myanmar)</db:para>
</db:listitem>
<db:listitem>
<db:para>Devanagari</db:para>
</db:listitem>
<db:listitem>
<db:para>Gujarati</db:para>
</db:listitem>
<db:listitem>
<db:para>Gurmukhi</db:para>
</db:listitem>
<db:listitem>
<db:para>Kannada</db:para>
</db:listitem>
<db:listitem>
<db:para>Khmer</db:para>
</db:listitem>
<db:listitem>
<db:para>Malayalam</db:para>
</db:listitem>
<db:listitem>
<db:para>Tamil</db:para>
</db:listitem>
<db:listitem>
<db:para>Telugu</db:para>
</db:listitem>
<db:listitem>
<db:para>Tibetan</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The list above is supported and will work on all platforms as long as the system has fonts to render these writing systems installed.</db:para>
<db:para>On Windows, Linux and Unix with FontConfig (client side font support) the following languages are also supported:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Dhivehi (Thaana)</db:para>
</db:listitem>
<db:listitem>
<db:para>Syriac</db:para>
</db:listitem>
<db:listitem>
<db:para>N'Ko</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>On macOS, the following languages are also supported:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Oriya</db:para>
</db:listitem>
<db:listitem>
<db:para>Sinhala</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Many of these writing systems exhibit special features:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Special line breaking behavior.</db:emphasis> Some of the Asian languages are written without spaces between words. Line breaking can occur either after every character (with exceptions) as in Chinese, Japanese and Korean, or after logical word boundaries as in Thai.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Bidirectional writing.</db:emphasis> Arabic and Hebrew are written from right to left, except for numbers and embedded English text which is written left to right. The exact behavior is defined in the <db:link xlink:href="http://www.unicode.org/unicode/reports/tr9/">Unicode Technical Annex #9</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Non-spacing or diacritical marks (accents or umlauts in European languages).</db:emphasis> Some languages such as Vietnamese make extensive use of these marks and some characters can have more than one mark at the same time to clarify pronunciation.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Ligatures.</db:emphasis> In special contexts, some pairs of characters get replaced by a combined glyph forming a ligature. Common examples are the fl and fi ligatures used in typesetting US and European books.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Qt tries to take care of all the special features listed above. You usually don't have to worry about these features so long as you use Qt's input controls (e.g. <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>, and derived classes or the Quick <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> item) and Qt's display controls (e.g. <db:link xlink:href="qlabel.xml">QLabel</db:link> and Qt Quick's Text item).</db:para>
<db:para>Support for these writing systems is transparent to the programmer and completely encapsulated in <db:link xlink:href="richtext.xml">Qt's text engine</db:link>. This means that you don't need to have any knowledge about the writing system used in a particular language, except for the following small points:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml#drawText">QPainter::drawText</db:link>(int x, int y, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;str) will always draw the string with its left edge at the position specified with the x, y parameters. This will usually give you left aligned strings. Arabic and Hebrew application strings are usually right aligned, so for these languages use the version of drawText() that takes a <db:link xlink:href="qrect.xml">QRect</db:link> since this will align in accordance with the language.</db:para>
</db:listitem>
<db:listitem>
<db:para>When you write your own text input controls, use <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link>. In some languages (e.g. Arabic or languages from the Indian subcontinent), the width and shape of a glyph changes depending on the surrounding characters, which <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> takes into account. Writing input controls usually requires a certain knowledge of the scripts it is going to be used in. Usually the easiest way is to subclass <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> or <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For more information about how to internationalize source code, see <db:link xlink:href="i18n-source-translation.xml">Writing Source Code for Translation</db:link> and <db:link xlink:href="qtquick-internationalization.xml">Internationalization and Localization with Qt Quick</db:link>.</db:para>
</db:section>
<db:section xml:id="producing-translations">
<db:title>Producing Translations</db:title>
<db:para>Qt provides excellent support for translating Qt C++ and Qt Quick applications into local languages. Release managers, translators, and developers can use the Qt translation tools to accomplish their tasks.</db:para>
<db:para>The Qt translation tools, Qt Linguist, <db:code>lupdate</db:code>, and <db:code>lrelease</db:code> are installed in the <db:code>bin</db:code> subdirectory of the base directory Qt is installed into. For more information about using them, see the <db:link xlink:href="qtlinguist-index.xml">Qt Linguist Manual</db:link>.</db:para>
<db:anchor xml:id="qt-itself"/>
<db:para>Qt itself contains several thousands of strings that will also need to be translated into the languages that you are targeting. You will find a number of translation files in the qttranslations repository. Before you start translating Qt, read the wiki page <db:link xlink:href="http://wiki.qt.io/Qt_Localization">Translating Qt Into Other Languages</db:link>.</db:para>
</db:section>
<db:section xml:id="enabling-translation">
<db:title>Enabling Translation</db:title>
<db:para>Typically, your application's <db:code>main()</db:code> function will look like this:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    QTranslator qtTranslator;
    qtTranslator.load(&quot;qt_&quot; + QLocale::system().name(),
            QLibraryInfo::location(QLibraryInfo::TranslationsPath));
    app.installTranslator(&amp;qtTranslator);

    QTranslator myappTranslator;
    myappTranslator.load(&quot;myapp_&quot; + QLocale::system().name());
    app.installTranslator(&amp;myappTranslator);

    ...
    return app.exec();
}
</db:programlisting>
<db:para>For a translation-aware application, a <db:link xlink:href="qtranslator.xml">QTranslator</db:link> object is created, then a translation is loaded according to the current locale at runtime, and finally, the translator object is installed into the application.</db:para>
<db:para>Note the use of <db:link xlink:href="qlibraryinfo.xml#location">QLibraryInfo::location</db:link>() to locate the Qt translations. Developers should request the path to the translations at run-time by passing <db:link xlink:href="qlibraryinfo.xml#LibraryLocation-enum">QLibraryInfo::TranslationsPath</db:link> to this function instead of using the <db:code>QTDIR</db:code> environment variable in their applications.</db:para>
</db:section>
<db:section xml:id="support-for-encodings">
<db:title>Support for Encodings</db:title>
<db:para>The <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> class and the facilities in <db:link xlink:href="qtextstream.xml">QTextStream</db:link> make it easy to support many legacy input and output encodings for your users' data. When an application starts, the locale of the machine will determine the 8-bit encoding used when dealing with external 8-bit data. <db:link xlink:href="qtextcodec.xml#codecForLocale">QTextCodec::codecForLocale</db:link>() returns a codec that can be used to convert between this locale encoding and Unicode.</db:para>
<db:para>The application may occasionally require encodings other than the default local 8-bit encoding. For example, an application in a Cyrillic KOI8-R locale (the de-facto standard locale in Russia) might need to output Cyrillic in the ISO 8859-5 encoding. Code for this would be:</db:para>
<db:programlisting language="cpp">QString string = ...; // some Unicode text

QTextCodec *codec = QTextCodec::codecForName(&quot;ISO 8859-5&quot;);
QByteArray encodedString = codec-&gt;fromUnicode(string);
</db:programlisting>
<db:para>For converting Unicode to local 8-bit encodings, a shortcut is available: the QString::toLocal8Bit() function returns such 8-bit data. Another useful shortcut is QString::toUtf8(), which returns text in the 8-bit <db:link xlink:href="http://www.ietf.org/rfc/rfc2279.txt">UTF-8</db:link> encoding: this perfectly preserves Unicode information while looking like plain ASCII if the text is wholly ASCII.</db:para>
<db:para>For converting the other way, there are the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() and <db:link xlink:href="qstring.xml#fromLocal8Bit">QString::fromLocal8Bit</db:link>() convenience functions, or the general code, demonstrated by this conversion from ISO 8859-5 Cyrillic to Unicode conversion:</db:para>
<db:programlisting language="cpp">QByteArray encodedString = ...; // some ISO 8859-5 encoded text

QTextCodec *codec = QTextCodec::codecForName(&quot;ISO 8859-5&quot;);
QString string = codec-&gt;toUnicode(encodedString);
</db:programlisting>
<db:para>Unicode I/O should be used as this maximizes the portability of documents between users around the world. In many cases it is however still necessary to support other encodings as your users will need to process existing documents. The most important additional encoding to support is the one returned by <db:link xlink:href="qtextcodec.xml#codecForLocale">QTextCodec::codecForLocale</db:link>(), as this is the one the user is most likely to need for communicating with other people and applications (this is the codec used by local8Bit()).</db:para>
<db:para>Qt supports most of the more frequently used encodings natively. For a complete list of supported encodings see the <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> documentation.</db:para>
<db:para>In some cases and for less frequently used encodings it may be necessary to write your own <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> subclass. Depending on the urgency, it may be useful to contact Qt's technical support team or ask on the <db:code>qt-interest</db:code> mailing list to see if someone else is already working on supporting the encoding.</db:para>
</db:section>
<db:section xml:id="localizing-numbers-dates-times-and-currency">
<db:title>Localizing Numbers, Dates, Times and Currency</db:title>
<db:para>Localization is the process of adapting to local conventions, for example presenting dates and times using the locally preferred formats. For localized numbers, dates, times and currency strings, use the <db:link xlink:href="qlocale.xml">QLocale</db:link> class.</db:para>
<db:para>Localizing images is not recommended. Choose clear icons that are appropriate for all localities, rather than relying on local puns or stretched metaphors. The exception is for images of left and right pointing arrows which may need to be reversed for Arabic and Hebrew locales.</db:para>
</db:section>
<db:section xml:id="dynamic-translation">
<db:title>Dynamic Translation</db:title>
<db:para>Some applications, such as Qt Linguist, must be able to support changes to the user's language settings while they are still running. To make widgets aware of changes to the installed <db:link xlink:href="qtranslator.xml">QTranslator</db:link> objects, reimplement the widget's <db:link xlink:href="qwidget.xml#changeEvent">changeEvent</db:link>() function to check whether the event is a <db:link xlink:href="qevent.xml#Type-enum">LanguageChange</db:link> event, and update the text displayed by widgets using the <db:link xlink:href="qobject.xml#tr">tr</db:link>() function in the usual way. For example:</db:para>
<db:programlisting language="cpp">void MyWidget::changeEvent(QEvent *event)
{
    if (event-&gt;type() == QEvent::LanguageChange) {
        titleLabel-&gt;setText(tr(&quot;Document Title&quot;));
        ...
        okPushButton-&gt;setText(tr(&quot;&amp;OK&quot;));
    } else
        QWidget::changeEvent(event);
}
</db:programlisting>
<db:para>All other change events should be passed on by calling the default implementation of the function.</db:para>
<db:para>The list of installed translators might change in reaction to a <db:link xlink:href="qevent.xml#Type-enum">LocaleChange</db:link> event, or the application might provide a user interface that allows the user to change the current application language.</db:para>
<db:para>The default event handler for <db:link xlink:href="qwidget.xml">QWidget</db:link> subclasses responds to the <db:link xlink:href="qevent.xml#Type-enum">QEvent::LanguageChange</db:link> event, and will call this function when necessary.</db:para>
<db:para><db:link xlink:href="qevent.xml#Type-enum">LanguageChange</db:link> events are posted when a new translation is installed using the <db:link xlink:href="qcoreapplication.xml#installTranslator">QCoreApplication::installTranslator</db:link>() function. Additionally, other application components can also force widgets to update themselves by posting LanguageChange events to them.</db:para>
</db:section>
<db:section xml:id="system-support">
<db:title>System Support</db:title>
<db:para>Some of the operating systems and windowing systems that Qt runs on only have limited support for Unicode. The level of support available in the underlying system has some influence on the support that Qt can provide on those platforms, although in general Qt applications need not be too concerned with platform-specific limitations.</db:para>
<db:section xml:id="unix-x11">
<db:title>Unix/X11</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Locale-oriented fonts and input methods. Qt hides these and provides Unicode input and output.</db:para>
</db:listitem>
<db:listitem>
<db:para>Filesystem conventions such as UTF-8 are today used by default in most Unix variants. All Qt file functions allow Unicode, but convert filenames to the local 8-bit encoding, as this is the Unix convention (see QFile::setEncodingFunction() to explore alternative encodings).</db:para>
</db:listitem>
<db:listitem>
<db:para>File I/O defaults to the local 8-bit encoding, with Unicode options in <db:link xlink:href="qtextstream.xml">QTextStream</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Some older Unix distributions contain only partial support for some locales. For example, if you have a <db:code>/usr/share/locale/ja_JP.EUC</db:code> directory, this does not necessarily mean you can display Japanese text; you also need to have Japanese fonts installed, and the <db:code>/usr/share/locale/ja_JP.EUC</db:code> directory needs to be complete. For best results, use complete locales from your system vendor.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="linux">
<db:title>Linux</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Qt provides full Unicode support, including input methods, fonts, clipboard, drag-and-drop.</db:para>
</db:listitem>
<db:listitem>
<db:para>The file system is usually encoded in UTF-8 on all modern Linux distributions and should not pose a problem. File I/O defaults to UTF-8.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="windows">
<db:title>Windows</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Qt provides full Unicode support, including input methods, fonts, clipboard, drag-and-drop and file names.</db:para>
</db:listitem>
<db:listitem>
<db:para>File I/O defaults to Latin1, with Unicode options in <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. Note that some Windows programs do not understand big-endian Unicode text files even though that is the order prescribed by the Unicode Standard in the absence of higher-level protocols.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="macos">
<db:title>macOS</db:title>
<db:para>For details on macOS-specific translation, refer to the Qt for macOS issues document <db:link xlink:href="osx-issues.xml#translating-the-application-menu-and-native-dialogs">here</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-pages">
<db:title>Related Pages</db:title>
<db:section>
<db:title>Contents</db:title>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="i18n-plural-rules.xml" xlink:role="page">Translation Rules for Plurals</db:link></db:term>
<db:listitem>
<db:para>A summary of the translation rules for plurals produced by Qt's i18n tools.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="i18n-source-translation.xml" xlink:role="page">Writing Source Code for Translation</db:link></db:term>
<db:listitem>
<db:para>How to write source code in a way that makes it possible for user-visible text to be translated.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
