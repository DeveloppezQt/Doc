<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Internationalization with Qt</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="i18n-source-translation.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Writing Source Code for Translation"/></db:extendedlink>
<db:abstract>
<db:para>Qt's support for internationalization and multiple languages.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>The <db:emphasis>internationalization</db:emphasis> and <db:emphasis>localization</db:emphasis> of an application are the processes of adapting the application to different languages, regional differences, and technical requirements of a target market.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml">Internationalization</db:link> means designing an application so that it can be adapted to various languages and regions without engineering changes.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="localization.xml">Localization</db:link> means adapting internationalized applications for a specific region or language by adding locale-specific components (such as date, time, and number formats) and translating text.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The need for internationalization ranges from spelling changes to enabling the application to operate in different languages and to use different input techniques, character encoding, and presentation conventions.</db:para>
<db:para>All input controls and text drawing methods in Qt offer built-in support for all supported languages. The built-in font engine correctly renders text that contains characters from a variety of different writing systems at the same time.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>For more information about</db:para>
</db:th>
<db:th>
<db:para>See</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Internationalizing source code</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="i18n-source-translation.xml">Writing Source Code for Translation</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Configuring and deploying translations, as well as using existing Qt module translations</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="localization.xml">Localizing Applications</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Using the Qt translation tools</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtlinguist-index.xml">Qt Linguist Manual</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following video shows how to internationalize and localize a simple example application:</db:para>
<db:mediaobject>
<db:videoobject>
<?db video="iframe"?>
<db:videodata format="youtube" fileref="xNIz78IPBu0">
</db:videodata>
</db:videoobject>
<db:imageobject>
<db:imagedata fileref="images/xNIz78IPBu0.jpg">
</db:imagedata>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="qt-classes-for-internationalization">
<db:title>Qt Classes for Internationalization</db:title>
<db:para>The following classes support internationalizing of Qt applications.</db:para>
<db:variablelist role="i18n">
<db:varlistentry>
<db:term><db:link xlink:href="qcollator.xml" xlink:role="class">QCollator</db:link></db:term>
<db:listitem>
<db:para>The QCollator class compares strings according to a localized collation algorithm.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcollatorsortkey.xml" xlink:role="class">QCollatorSortKey</db:link></db:term>
<db:listitem>
<db:para>The QCollatorSortKey class can be used to speed up string collation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlocale.xml" xlink:role="class">QLocale</db:link></db:term>
<db:listitem>
<db:para>The QLocale class converts between numbers and their string representations in various languages.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstringconverter.xml" xlink:role="class">QStringConverter</db:link></db:term>
<db:listitem>
<db:para>The QStringConverter class provides a base class for encoding and decoding text.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstringdecoder.xml" xlink:role="class">QStringDecoder</db:link></db:term>
<db:listitem>
<db:para>The QStringDecoder class provides a state-based decoder for text.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstringencoder.xml" xlink:role="class">QStringEncoder</db:link></db:term>
<db:listitem>
<db:para>The QStringEncoder class provides a state-based encoder for text.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtextcodec.xml" xlink:role="class">QTextCodec</db:link></db:term>
<db:listitem>
<db:para>The QTextCodec class provides conversions between text encodings.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtextdecoder.xml" xlink:role="class">QTextDecoder</db:link></db:term>
<db:listitem>
<db:para>The QTextDecoder class provides a state-based decoder.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtextencoder.xml" xlink:role="class">QTextEncoder</db:link></db:term>
<db:listitem>
<db:para>The QTextEncoder class provides a state-based encoder.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtranslator.xml" xlink:role="class">QTranslator</db:link></db:term>
<db:listitem>
<db:para>The QTranslator class provides internationalization support for text output.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para>See <db:link xlink:href="i18n-source-translation.xml">Writing Source Code for Translation</db:link> for more information about how to use the classes in applications.</db:para>
</db:section>
<db:section xml:id="languages-and-writing-systems">
<db:title>Languages and Writing Systems</db:title>
<db:para>Qt supports most <db:link xlink:href="qlocale.xml#Language-enum">languages</db:link> in use today.</db:para>
<db:para>Input controls, such as the Qt Quick <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> type and <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>, and derived classes, as well as display controls, such as the <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> type and <db:link xlink:href="qlabel.xml">QLabel</db:link> class handle the following special features of the different writing systems:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Line breaks</db:para>
<db:para>Some of the Asian languages are written without spaces between words. Line breaking can occur either after any character (with exceptions) as in Chinese, Japanese and Korean, or after logical word boundaries as in Thai.</db:para>
</db:listitem>
<db:listitem>
<db:para>Bidirectional writing</db:para>
<db:para>Arabic and Hebrew are written from right to left, except for numbers and embedded English text which is written left to right. The exact behavior is defined in the <db:link xlink:href="https://www.unicode.org/unicode/reports/tr9/">Unicode Technical Annex #9</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Non-spacing or diacritical marks, such as accents or umlauts in European languages</db:para>
<db:para>Some languages, such as Vietnamese, make extensive use of these marks and some characters can have more than one mark at the same time to clarify pronunciation.</db:para>
</db:listitem>
<db:listitem>
<db:para>Ligatures</db:para>
<db:para>In special contexts, some pairs of characters get replaced by a combined glyph forming a ligature. Common examples are the fl and fi ligatures used in typesetting US and European books.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="richtext.xml">Qt's text engine</db:link> supports different <db:link xlink:href="qlocale.xml#Script-enum">writing systems</db:link> that work on all platforms if the fonts for rendering them are installed.</db:para>
<db:para>You do not need to know about the writing system used in a particular language, unless you want to write your own text input controls. In some languages, such as Arabic or languages from the Indian subcontinent, the width and shape of a glyph changes depending on the surrounding characters. To take this into account in C++ code, use <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link>. Writing input controls also requires some knowledge of the scripts they are going to be used in. Usually, the easiest way is to subclass <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> or <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>.</db:para>
</db:section>
<db:section xml:id="encoding">
<db:title>Encoding</db:title>
<db:para>Encoding is relevant both for application source files and the text files that the application reads or writes.</db:para>
<db:section xml:id="encoding-source-code">
<db:title>Encoding Source Code</db:title>
<db:para>QML documents are always encoded in UTF-8 format. Since Qt 6, 8-bit <db:link xlink:href="http://www.ietf.org/rfc/rfc2279.txt">UTF-8</db:link> is the predominant encoding also in Qt C++.</db:para>
<db:para>The lupdate tool extracts UI strings from your application. It expects all source code to be encoded in UTF-8 by default.</db:para>
<db:para>However, some editors, such as Visual Studio, use a different encoding by default. One way to avoid encoding issues is to limit any source code to ASCII, and use escape sequences for translatable strings with other characters, for example:</db:para>
<db:programlisting language="cpp">label-&amp;gt;setText(tr(&quot;F\374r \310lise&quot;));
</db:programlisting>
<db:para><db:link xlink:href="qstring.xml#toUtf8">QString::toUtf8</db:link>() returns the text in UTF-8 encoding, which preserves <db:link xlink:href="unicode.xml">Unicode</db:link> information while looking like plain ASCII if the text is wholly ASCII. To convert Unicode to local 8-bit encoding, use <db:link xlink:href="qstring.xml#toLocal8Bit">QString::toLocal8Bit</db:link>(). On Unix systems, this is equivalent to toUtf8(). On Windows, the system's current code page is used.</db:para>
<db:para>For converting from UTF-8 and local 8-bit encoding to <db:link xlink:href="qstring.xml">QString</db:link>, use the <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() and <db:link xlink:href="qstring.xml#fromLocal8Bit">QString::fromLocal8Bit</db:link>() convenience functions.</db:para>
</db:section>
<db:section xml:id="encoding-text-input-output">
<db:title>Encoding Text Input/Output</db:title>
<db:para>Use <db:link xlink:href="qtextstream.xml#setEncoding">QTextStream::setEncoding</db:link>() to set common encoding for text streams.</db:para>
<db:para>If you need some other legacy encoding, use the <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> class from the Qt5Compat module.</db:para>
<db:para>When an application starts, the locale of the machine determines the 8-bit encoding used for external 8-bit data. <db:link xlink:href="qtextcodec.xml#codecForLocale">QTextCodec::codecForLocale</db:link>() returns a codec that you can use to convert between this locale encoding and Unicode.</db:para>
<db:para>The application may occasionally require encoding other than the default local 8-bit encoding. For example, an application in a Cyrillic KOI8-R locale (the de-facto standard locale in Russia) might need to output Cyrillic in the ISO 8859-5 encoding. Code for this would be:</db:para>
<db:programlisting language="cpp">QString string = ...; // some Unicode text

QTextCodec *codec = QTextCodec::codecForName(&quot;ISO 8859-5&quot;);
QByteArray encodedString = codec-&amp;gt;fromUnicode(string);
</db:programlisting>
<db:para>The following code demonstrates the conversion from ISO 8859-5 Cyrillic to Unicode:</db:para>
<db:programlisting language="cpp">QByteArray encodedString = ...; // some ISO 8859-5 encoded text

QTextCodec *codec = QTextCodec::codecForName(&quot;ISO 8859-5&quot;);
QString string = codec-&amp;gt;toUnicode(encodedString);
</db:programlisting>
<db:para>For a complete list of supported encodings see the <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> documentation.</db:para>
</db:section>
</db:section>
<db:section xml:id="operating-and-windowing-systems">
<db:title>Operating and Windowing Systems</db:title>
<db:para>Some of the operating systems and windowing systems that Qt runs on only have limited support for Unicode. The level of support available in the underlying system has some influence on the support that Qt can provide on those platforms, although in general Qt applications need not be too concerned with platform-specific limitations.</db:para>
<db:section xml:id="unix-x11">
<db:title>Unix/X11</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Qt hides locale-oriented fonts and input methods and provides Unicode input and output.</db:para>
</db:listitem>
<db:listitem>
<db:para>Most Unix variants use filesystem conventions such as UTF-8 by default. All Qt file functions allow Unicode, but convert filenames to the local 8-bit encoding, as this is the Unix convention.</db:para>
</db:listitem>
<db:listitem>
<db:para>File I/O defaults to the local 8-bit encoding, with Unicode options in <db:link xlink:href="qtextstream.xml">QTextStream</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Some older Unix distributions contain only partial support for some locales. For example, even if you have a /usr/share/locale/ja_JP.EUC directory, you cannot display Japanese text unless you install Japanese fonts and the directory is complete. For best results, use complete locales from your system vendor.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="linux">
<db:title>Linux</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Qt provides full Unicode support, including input methods, fonts, clipboard, and drag-and-drop.</db:para>
</db:listitem>
<db:listitem>
<db:para>The file system is encoded in UTF-8 on all modern Linux distributions. File I/O defaults to UTF-8.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="windows">
<db:title>Windows</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Qt provides full Unicode support, including input methods, fonts, clipboard, drag-and-drop, and file names.</db:para>
</db:listitem>
<db:listitem>
<db:para>File I/O defaults to Latin1, with Unicode options in <db:link xlink:href="qtextstream.xml">QTextStream</db:link>. However, some Windows programs do not understand big-endian Unicode text files even though that is the order prescribed by the Unicode standard in the absence of higher-level protocols.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="related-topics">
<db:title>Related Topics</db:title>
<db:section>
<db:title>Contents</db:title>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="localization.xml" xlink:role="page">Localizing Applications</db:link></db:term>
<db:listitem>
<db:para>Localizing Qt and Qt Quick apps into multiple languages.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="i18n-plural-rules.xml" xlink:role="page">Translation Rules for Plural Forms</db:link></db:term>
<db:listitem>
<db:para>A summary of the translation rules for plural forms produced by Qt's translation tools.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="i18n-source-translation.xml" xlink:role="page">Writing Source Code for Translation</db:link></db:term>
<db:listitem>
<db:para>Writing source code that enables the localization of applications.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
