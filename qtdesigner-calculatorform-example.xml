<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Calculator Form</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>Using a form created with <db:emphasis>Qt Designer</db:emphasis> in an application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Calculator Form Example shows how to use a form created with <db:emphasis>Qt Designer</db:emphasis> in an application by using the user interface information from a <db:link xlink:href="qwidget.xml">QWidget</db:link> subclass.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Calculator Form example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/calculatorform-example.webp"/>
</db:imageobject>
</db:mediaobject>
<db:para>The example presents two spin boxes that are used to input integer values and a label that shows their sum. Whenever either of the spin boxes are updated, the signal-slot connections between the widgets and the form ensure that the label is also updated.</db:para>
<db:section xml:id="preparation">
<db:title>Preparation</db:title>
<db:para>The user interface for this example is designed completely using <db:emphasis>Qt Designer</db:emphasis>. The result is a UI file describing the form, the widgets used, any signal-slot connections between them, and other standard user interface properties.</db:para>
<db:para>To ensure that the example can use this file, we enable the <db:code>CMAKE_AUTOUIC</db:code> feature and list the UI file in the source files:</db:para>
<db:programlisting language="cpp">set(CMAKE_AUTOUIC ON)

qt_add_executable(calculatorform
    calculatorform.cpp calculatorform.h calculatorform.ui
    main.cpp
)
</db:programlisting>
<db:para>For <db:code>qmake</db:code>, we need to include a <db:code>FORMS</db:code> declaration in the example's project file:</db:para>
<db:programlisting language="cpp">FORMS       = calculatorform.ui
</db:programlisting>
<db:para>When the project is built, <db:code>uic</db:code> will create a header file that lets us construct the form.</db:para>
</db:section>
<db:section xml:id="calculatorform-class-definition">
<db:title>CalculatorForm Class Definition</db:title>
<db:para>The <db:code>CalculatorForm</db:code> class uses the user interface described in the <db:code>calculatorform.ui</db:code> file. To access the form and its contents, we need to include the <db:code>ui_calculatorform.h</db:code> header file created by <db:code>uic</db:code> during the build process:</db:para>
<db:programlisting language="cpp">#include &quot;ui_calculatorform.h&quot;
</db:programlisting>
<db:para>We define the <db:code>CalculatorForm</db:code> class by subclassing <db:link xlink:href="qwidget.xml">QWidget</db:link> because the form itself is based on <db:link xlink:href="qwidget.xml">QWidget</db:link>:</db:para>
<db:programlisting language="cpp">class CalculatorForm : public QWidget
{
    Q_OBJECT

public:
    explicit CalculatorForm(QWidget *parent = nullptr);

private slots:
    void updateResult();

private:
    Ui::CalculatorForm ui;
};
</db:programlisting>
<db:para>Apart from the constructor, the class contains a private slot <db:code>updateResult()</db:code> that performs the calculation and updates the output widget accordingly. The private <db:code>ui</db:code> member variable refers to the form, and is used to access the contents of the user interface.</db:para>
</db:section>
<db:section xml:id="calculatorform-class-implementation">
<db:title>CalculatorForm Class Implementation</db:title>
<db:para>The constructor simply calls the base class's constructor, sets up the form's user interface and connects the signals <db:link xlink:href="qspinbox.xml#valueChanged">QSpinBox::valueChanged</db:link>() to the slot <db:code>updateResult()</db:code>.</db:para>
<db:programlisting language="cpp">CalculatorForm::CalculatorForm(QWidget *parent)
    : QWidget(parent)
{
    ui.setupUi(this);
    connect(ui.inputSpinBox1, &amp;amp;QSpinBox::valueChanged, this, &amp;amp;CalculatorForm::updateResult);
    connect(ui.inputSpinBox2, &amp;amp;QSpinBox::valueChanged, this, &amp;amp;CalculatorForm::updateResult);
}
</db:programlisting>
<db:para>The user interface is set up with the <db:code>setupUI()</db:code> function. We pass <db:code>this</db:code> as the argument to this function to use the <db:code>CalculatorForm</db:code> widget itself as the container for the user interface.</db:para>
<db:para>Slot <db:code>updateResult()</db:code> adds the values and sets the result on the output widget:</db:para>
<db:programlisting language="cpp">void CalculatorForm::updateResult()
{
    const int sum = ui.inputSpinBox1-&amp;gt;value() + ui.inputSpinBox2-&amp;gt;value();
    ui.outputWidget-&amp;gt;setText(QString::number(sum));
}
</db:programlisting>
<db:para>It is called whenever the value of one of the spin boxes changes.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qttools.git/tree/examples/designer/calculatorform?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
