<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QModbusResponse Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qmodbusresponse.xml">QModbusResponse</db:link> is a container class containing the function code and payload that is stored inside a Modbus ADU.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QModbusResponse</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmodbuspdu.xml" xlink:role="class">QModbusPdu</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmodbusexceptionresponse.xml" xlink:role="class">QModbusExceptionResponse</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A typical Modbus response can looks like this:</db:para>
<db:programlisting language="cpp">QModbusResponse response(QModbusResponse::ReadCoils, QByteArray::fromHex(&quot;02cd01&quot;));
</db:programlisting>
<db:note>
<db:para>When using the constructor taking the <db:code>QByteArray</db:code>, please make sure to convert the containing data to big-endian byte order before creating the request.</db:para>
</db:note>
<db:para>The same response can be created like this, if the values are know at compile time:</db:para>
<db:programlisting language="cpp">quint8 payloadInBytes = 2, outputHigh = 0xcd, outputLow = 0x01;
QModbusResponse response(QModbusResponse::ReadCoils, payloadInBytes, outputHigh, outputLow);
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QModbusResponse">
<db:title>[noexcept] QModbusResponse::QModbusResponse()</db:title>
<db:para>Constructs an invalid <db:link xlink:href="qmodbusresponse.xml">QModbusResponse</db:link>.</db:para>
</db:section>
<db:section xml:id="QModbusResponse-1">
<db:title>QModbusResponse::QModbusResponse(const QModbusPdu &amp;<db:emphasis>pdu</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">pdu</db:code>.</db:para>
</db:section>
<db:section xml:id="QModbusResponse-2">
<db:title>[explicit] QModbusResponse::QModbusResponse(QModbusPdu::FunctionCode <db:emphasis>code</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis> = QByteArray())</db:title>
<db:para>Constructs a <db:link xlink:href="qmodbusresponse.xml">QModbusResponse</db:link> with function code set to <db:code role="parameter">code</db:code> and payload set to <db:code role="parameter">data</db:code>. The data is expected to be stored in big-endian byte order already.</db:para>
</db:section>
<db:section xml:id="QModbusResponse-3">
<db:title>[default] QModbusResponse::QModbusResponse(QModbusPdu::FunctionCode <db:emphasis>code</db:emphasis>, int <db:emphasis>data</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qmodbusresponse.xml">QModbusResponse</db:link> with function code set to <db:code role="parameter">code</db:code> and payload set to <db:code role="parameter">data</db:code>. The data is converted and stored in big-endian byte order.</db:para>
<db:note>
<db:para>Usage is limited <db:code>quint8</db:code> and <db:code>quint16</db:code> only. This is because <db:code>QDataStream</db:code> stream operators will not only append raw data, but also e.g. size, count etc. for complex types.</db:para>
</db:note>
</db:section>
<db:section xml:id="calculateDataSize">
<db:title>[static] int QModbusResponse::calculateDataSize(const QModbusResponse &amp;<db:emphasis>response</db:emphasis>)</db:title>
<db:para>Calculates the expected data size for <db:code role="parameter">response</db:code>, based on the response's function code and data. Returns the full size of the response's data part; <db:code>-1</db:code> if the size could not be properly calculated.</db:para>
</db:section>
<db:section xml:id="minimumDataSize">
<db:title>[static] int QModbusResponse::minimumDataSize(const QModbusResponse &amp;<db:emphasis>response</db:emphasis>)</db:title>
<db:para>Returns the expected minimum data size for <db:code role="parameter">response</db:code> based on the response's function code; <db:code>-1</db:code> if the function code is not known.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-gt-gt-2">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QModbusResponse &amp;<db:emphasis>pdu</db:emphasis>)</db:title>
<db:para>Reads a <db:code role="parameter">pdu</db:code> from the <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
<db:note>
<db:para>The function might fail to properly stream PDU's with function code <db:link xlink:href="qmodbuspdu.xml#FunctionCode-enum">QModbusPdu::Diagnostics</db:link> or <db:link xlink:href="qmodbuspdu.xml#FunctionCode-enum">QModbusPdu::EncapsulatedInterfaceTransport</db:link> because of the missing size indicator inside the PDU. In particular this may happen when the PDU is embedded into a stream that doesn't end with the diagnostic/encapsulated request itself.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
