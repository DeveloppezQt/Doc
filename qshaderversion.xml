<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QShaderVersion Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Specifies the shading language version.</db:para>
<db:para>This class was introduced in Qt 6.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QShaderVersion</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>While languages like SPIR-V or the Metal Shading Language use traditional version numbers, shaders for other APIs can use slightly different versioning schemes. All those are mapped to a single version number in here, however. For HLSL, the version refers to the Shader Model version, like 5.0, 5.1, or 6.0. For GLSL an additional flag is needed to choose between GLSL and GLSL/ES.</db:para>
<db:para>Below is a list with the most common examples of shader versions for different graphics APIs:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Vulkan (SPIR-V): 100</db:para>
</db:listitem>
<db:listitem>
<db:para>OpenGL: 120, 330, 440, etc.</db:para>
</db:listitem>
<db:listitem>
<db:para>OpenGL ES: 100 with <db:link xlink:href="qshaderversion.xml#Flag-enum">GlslEs</db:link>, 300 with <db:link xlink:href="qshaderversion.xml#Flag-enum">GlslEs</db:link>, etc.</db:para>
</db:listitem>
<db:listitem>
<db:para>Direct3D: 50, 51, 60</db:para>
</db:listitem>
<db:listitem>
<db:para>Metal: 12, 20</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>A default constructed <db:link xlink:href="qshaderversion.xml">QShaderVersion</db:link> contains a version of 100 and no flags set.</db:para>
<db:note>
<db:para>This is a RHI API with limited compatibility guarantees, see <db:link xlink:href="qshader.xml">QShader</db:link> for details.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Flag-enum">
<db:title>enum QShaderVersion::Flag</db:title>
<db:bridgehead renderas="sect2">flags QShaderVersion::Flags</db:bridgehead>
<db:para>Describes the flags that can be set.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qshaderversion.xml">QShaderVersion</db:link></db:emphasis>::GlslEs</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Indicates that GLSL/ES is meant in combination with GlslShader</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Flags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Flag&gt;. </db:code>It stores an OR combination of <db:code>Flag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QShaderVersion">
<db:title>QShaderVersion::QShaderVersion(int <db:emphasis>v</db:emphasis>, QShaderVersion::Flags <db:emphasis>f</db:emphasis> = Flags())</db:title>
<db:para>Constructs a new <db:link xlink:href="qshaderversion.xml">QShaderVersion</db:link> with version <db:code role="parameter">v</db:code> and flags <db:code role="parameter">f</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-1">
<db:title>[noexcept] bool operator&lt;(const QShaderVersion &amp;<db:emphasis>lhs</db:emphasis>, const QShaderVersion &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is smaller than <db:code role="parameter">rhs</db:code>.</db:para>
<db:para>Establishes a sorting order between the two <db:link xlink:href="qshaderversion.xml">QShaderVersion</db:link> <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-11">
<db:title>[noexcept] bool operator==(const QShaderVersion &amp;<db:emphasis>lhs</db:emphasis>, const QShaderVersion &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the two <db:link xlink:href="qshaderversion.xml">QShaderVersion</db:link> objects <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are equal.</db:para>
</db:section>
</db:section>
</db:article>
