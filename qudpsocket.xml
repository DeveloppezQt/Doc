<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QUdpSocket Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link> class provides a UDP socket.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QUdpSocket</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractsocket.xml" xlink:role="class">QAbstractSocket</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QUdpSocket is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>UDP (User Datagram Protocol) is a lightweight, unreliable, datagram-oriented, connectionless protocol. It can be used when reliability isn't important. <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link> is a subclass of <db:link xlink:href="qabstractsocket.xml">QAbstractSocket</db:link> that allows you to send and receive UDP datagrams.</db:para>
<db:para>The most common way to use this class is to bind to an address and port using <db:link xlink:href="qabstractsocket.xml#bind">bind</db:link>(), then call <db:link xlink:href="qudpsocket.xml#writeDatagram">writeDatagram</db:link>() and <db:link xlink:href="qudpsocket.xml#readDatagram">readDatagram</db:link>() / <db:link xlink:href="qudpsocket.xml#receiveDatagram">receiveDatagram</db:link>() to transfer data. If you want to use the standard <db:link xlink:href="qiodevice.xml">QIODevice</db:link> functions <db:link xlink:href="qiodevice.xml#read">read</db:link>(), <db:link xlink:href="qiodevice.xml#readLine">readLine</db:link>(), <db:link xlink:href="qiodevice.xml#write">write</db:link>(), etc., you must first connect the socket directly to a peer by calling <db:link xlink:href="qabstractsocket.xml#connectToHost">connectToHost</db:link>().</db:para>
<db:para>The socket emits the <db:link xlink:href="qiodevice.xml#bytesWritten">bytesWritten</db:link>() signal every time a datagram is written to the network. If you just want to send datagrams, you don't need to call <db:link xlink:href="qabstractsocket.xml#bind">bind</db:link>().</db:para>
<db:para>The <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() signal is emitted whenever datagrams arrive. In that case, <db:link xlink:href="qudpsocket.xml#hasPendingDatagrams">hasPendingDatagrams</db:link>() returns true. Call <db:link xlink:href="qudpsocket.xml#pendingDatagramSize">pendingDatagramSize</db:link>() to obtain the size of the first pending datagram, and <db:link xlink:href="qudpsocket.xml#readDatagram">readDatagram</db:link>() or <db:link xlink:href="qudpsocket.xml#receiveDatagram">receiveDatagram</db:link>() to read it.</db:para>
<db:note>
<db:para>An incoming datagram should be read when you receive the <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() signal, otherwise this signal will not be emitted for the next datagram.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void Server::initSocket()
{
    udpSocket = new QUdpSocket(this);
    udpSocket-&amp;gt;bind(QHostAddress::LocalHost, 7755);

    connect(udpSocket, &amp;amp;QUdpSocket::readyRead,
            this, &amp;amp;Server::readPendingDatagrams);
}

void Server::readPendingDatagrams()
{
    while (udpSocket-&amp;gt;hasPendingDatagrams()) {
        QNetworkDatagram datagram = udpSocket-&amp;gt;receiveDatagram();
        processTheDatagram(datagram);
    }
}
</db:programlisting>
<db:para><db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link> also supports UDP multicast. Use <db:link xlink:href="qudpsocket.xml#joinMulticastGroup">joinMulticastGroup</db:link>() and <db:link xlink:href="qudpsocket.xml#leaveMulticastGroup">leaveMulticastGroup</db:link>() to control group membership, and <db:link xlink:href="qabstractsocket.xml#SocketOption-enum">QAbstractSocket::MulticastTtlOption</db:link> and <db:link xlink:href="qabstractsocket.xml#SocketOption-enum">QAbstractSocket::MulticastLoopbackOption</db:link> to set the TTL and loopback socket options. Use <db:link xlink:href="qudpsocket.xml#setMulticastInterface">setMulticastInterface</db:link>() to control the outgoing interface for multicast datagrams, and <db:link xlink:href="qudpsocket.xml#multicastInterface">multicastInterface</db:link>() to query it.</db:para>
<db:para>With <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link>, you can also establish a virtual connection to a UDP server using <db:link xlink:href="qabstractsocket.xml#connectToHost">connectToHost</db:link>() and then use <db:link xlink:href="qiodevice.xml#read">read</db:link>() and <db:link xlink:href="qiodevice.xml#write">write</db:link>() to exchange datagrams without specifying the receiver for each datagram.</db:para>
<db:para>The <db:link xlink:href="qtnetwork-broadcastsender-example.xml">Broadcast Sender</db:link>, <db:link xlink:href="qtnetwork-broadcastreceiver-example.xml">Broadcast Receiver</db:link>, <db:link xlink:href="qtnetwork-multicastsender-example.xml">Multicast Sender</db:link>, and <db:link xlink:href="qtnetwork-multicastreceiver-example.xml">Multicast Receiver</db:link> examples illustrate how to use <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link> in applications.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link></db:member>
<db:member><db:link xlink:href="qnetworkdatagram.xml">QNetworkDatagram</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QUdpSocket">
<db:title>[explicit] QUdpSocket::QUdpSocket(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QUdpSocket</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QUdpSocket(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link> object.</db:para>
<db:para><db:code role="parameter">parent</db:code> is passed to the <db:link xlink:href="qobject.xml">QObject</db:link> constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractsocket.xml#socketType">socketType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QUdpSocket">
<db:title>[virtual] QUdpSocket::~QUdpSocket()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QUdpSocket</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QUdpSocket()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the socket, closing the connection if necessary.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractsocket.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasPendingDatagrams">
<db:title>bool QUdpSocket::hasPendingDatagrams() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasPendingDatagrams</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasPendingDatagrams() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if at least one datagram is waiting to be read; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qudpsocket.xml#pendingDatagramSize">pendingDatagramSize</db:link>()</db:member>
<db:member><db:link xlink:href="qudpsocket.xml#readDatagram">readDatagram</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="joinMulticastGroup">
<db:title>bool QUdpSocket::joinMulticastGroup(const QHostAddress &amp;<db:emphasis>groupAddress</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>joinMulticastGroup</db:methodname>
<db:methodparam>
<db:type>const QHostAddress &amp;</db:type>
<db:parameter>groupAddress</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool joinMulticastGroup(const QHostAddress &amp;groupAddress)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Joins the multicast group specified by <db:code role="parameter">groupAddress</db:code> on the default interface chosen by the operating system. The socket must be in BoundState, otherwise an error occurs.</db:para>
<db:para>Note that if you are attempting to join an IPv4 group, your socket must not be bound using IPv6 (or in dual mode, using <db:link xlink:href="qhostaddress.xml#SpecialAddress-enum">QHostAddress::Any</db:link>). You must use <db:link xlink:href="qhostaddress.xml#SpecialAddress-enum">QHostAddress::AnyIPv4</db:link> instead.</db:para>
<db:para>This function returns true if successful; otherwise it returns false and sets the socket error accordingly.</db:para>
<db:note>
<db:para>Joining IPv6 multicast groups without an interface selection is not supported in all operating systems. Consider using the overload where the interface is specified.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qudpsocket.xml#leaveMulticastGroup">leaveMulticastGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="joinMulticastGroup-1">
<db:title>bool QUdpSocket::joinMulticastGroup(const QHostAddress &amp;<db:emphasis>groupAddress</db:emphasis>, const QNetworkInterface &amp;<db:emphasis>iface</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>joinMulticastGroup</db:methodname>
<db:methodparam>
<db:type>const QHostAddress &amp;</db:type>
<db:parameter>groupAddress</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QNetworkInterface &amp;</db:type>
<db:parameter>iface</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool joinMulticastGroup(const QHostAddress &amp;groupAddress, const QNetworkInterface &amp;iface)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Joins the multicast group address <db:code role="parameter">groupAddress</db:code> on the interface <db:code role="parameter">iface</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qudpsocket.xml#leaveMulticastGroup">leaveMulticastGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="leaveMulticastGroup">
<db:title>bool QUdpSocket::leaveMulticastGroup(const QHostAddress &amp;<db:emphasis>groupAddress</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>leaveMulticastGroup</db:methodname>
<db:methodparam>
<db:type>const QHostAddress &amp;</db:type>
<db:parameter>groupAddress</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool leaveMulticastGroup(const QHostAddress &amp;groupAddress)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Leaves the multicast group specified by <db:code role="parameter">groupAddress</db:code> on the default interface chosen by the operating system. The socket must be in BoundState, otherwise an error occurs.</db:para>
<db:para>This function returns true if successful; otherwise it returns false and sets the socket error accordingly.</db:para>
<db:note>
<db:para>This function should be called with the same arguments as were passed to <db:link xlink:href="qudpsocket.xml#joinMulticastGroup">joinMulticastGroup</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qudpsocket.xml#joinMulticastGroup">joinMulticastGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="leaveMulticastGroup-1">
<db:title>bool QUdpSocket::leaveMulticastGroup(const QHostAddress &amp;<db:emphasis>groupAddress</db:emphasis>, const QNetworkInterface &amp;<db:emphasis>iface</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>leaveMulticastGroup</db:methodname>
<db:methodparam>
<db:type>const QHostAddress &amp;</db:type>
<db:parameter>groupAddress</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QNetworkInterface &amp;</db:type>
<db:parameter>iface</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool leaveMulticastGroup(const QHostAddress &amp;groupAddress, const QNetworkInterface &amp;iface)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Leaves the multicast group specified by <db:code role="parameter">groupAddress</db:code> on the interface <db:code role="parameter">iface</db:code>.</db:para>
<db:note>
<db:para>This function should be called with the same arguments as were passed to <db:link xlink:href="qudpsocket.xml#joinMulticastGroup">joinMulticastGroup</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qudpsocket.xml#joinMulticastGroup">joinMulticastGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="multicastInterface">
<db:title>QNetworkInterface QUdpSocket::multicastInterface() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNetworkInterface</db:type>
<db:methodname>multicastInterface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkInterface multicastInterface() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the interface for the outgoing interface for multicast datagrams. This corresponds to the IP_MULTICAST_IF socket option for IPv4 sockets and the IPV6_MULTICAST_IF socket option for IPv6 sockets. If no interface has been previously set, this function returns an invalid <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link>. The socket must be in BoundState, otherwise an invalid <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qudpsocket.xml#setMulticastInterface">setMulticastInterface</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pendingDatagramSize">
<db:title>qint64 QUdpSocket::pendingDatagramSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>pendingDatagramSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 pendingDatagramSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the first pending UDP datagram. If there is no datagram available, this function returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qudpsocket.xml#hasPendingDatagrams">hasPendingDatagrams</db:link>()</db:member>
<db:member><db:link xlink:href="qudpsocket.xml#readDatagram">readDatagram</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readDatagram">
<db:title>qint64 QUdpSocket::readDatagram(char *<db:emphasis>data</db:emphasis>, qint64 <db:emphasis>maxSize</db:emphasis>, QHostAddress *<db:emphasis>address</db:emphasis> = nullptr, quint16 *<db:emphasis>port</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:type>qint64</db:type>
<db:methodname>readDatagram</db:methodname>
<db:methodparam>
<db:type>char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>maxSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHostAddress *</db:type>
<db:parameter>address</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>quint16 *</db:type>
<db:parameter>port</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 readDatagram(char *data, qint64 maxSize, QHostAddress *address, quint16 *port)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Receives a datagram no larger than <db:code role="parameter">maxSize</db:code> bytes and stores it in <db:code role="parameter">data</db:code>. The sender's host address and port is stored in *<db:code role="parameter">address</db:code> and *<db:code role="parameter">port</db:code> (unless the pointers are nullptr).</db:para>
<db:para>Returns the size of the datagram on success; otherwise returns -1.</db:para>
<db:para>If <db:code role="parameter">maxSize</db:code> is too small, the rest of the datagram will be lost. To avoid loss of data, call <db:link xlink:href="qudpsocket.xml#pendingDatagramSize">pendingDatagramSize</db:link>() to determine the size of the pending datagram before attempting to read it. If <db:code role="parameter">maxSize</db:code> is 0, the datagram will be discarded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qudpsocket.xml#writeDatagram">writeDatagram</db:link>()</db:member>
<db:member><db:link xlink:href="qudpsocket.xml#hasPendingDatagrams">hasPendingDatagrams</db:link>()</db:member>
<db:member><db:link xlink:href="qudpsocket.xml#pendingDatagramSize">pendingDatagramSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="receiveDatagram">
<db:title>[since 5.8] QNetworkDatagram QUdpSocket::receiveDatagram(qint64 <db:emphasis>maxSize</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:type>QNetworkDatagram</db:type>
<db:methodname>receiveDatagram</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>maxSize</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkDatagram receiveDatagram(qint64 maxSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Receives a datagram no larger than <db:code role="parameter">maxSize</db:code> bytes and returns it in the <db:link xlink:href="qnetworkdatagram.xml">QNetworkDatagram</db:link> object, along with the sender's host address and port. If possible, this function will also try to determine the datagram's destination address, port, and the number of hop counts at reception time.</db:para>
<db:para>On failure, returns a <db:link xlink:href="qnetworkdatagram.xml">QNetworkDatagram</db:link> that reports <db:link xlink:href="qnetworkdatagram.xml#isValid">not valid</db:link>.</db:para>
<db:para>If <db:code role="parameter">maxSize</db:code> is too small, the rest of the datagram will be lost. If <db:code role="parameter">maxSize</db:code> is 0, the datagram will be discarded. If <db:code role="parameter">maxSize</db:code> is -1 (the default), this function will attempt to read the entire datagram.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qudpsocket.xml#writeDatagram">writeDatagram</db:link>()</db:member>
<db:member><db:link xlink:href="qudpsocket.xml#hasPendingDatagrams">hasPendingDatagrams</db:link>()</db:member>
<db:member><db:link xlink:href="qudpsocket.xml#pendingDatagramSize">pendingDatagramSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMulticastInterface">
<db:title>void QUdpSocket::setMulticastInterface(const QNetworkInterface &amp;<db:emphasis>iface</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMulticastInterface</db:methodname>
<db:methodparam>
<db:type>const QNetworkInterface &amp;</db:type>
<db:parameter>iface</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMulticastInterface(const QNetworkInterface &amp;iface)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the outgoing interface for multicast datagrams to the interface <db:code role="parameter">iface</db:code>. This corresponds to the IP_MULTICAST_IF socket option for IPv4 sockets and the IPV6_MULTICAST_IF socket option for IPv6 sockets. The socket must be in BoundState, otherwise this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qudpsocket.xml#multicastInterface">multicastInterface</db:link>()</db:member>
<db:member><db:link xlink:href="qudpsocket.xml#joinMulticastGroup">joinMulticastGroup</db:link>()</db:member>
<db:member><db:link xlink:href="qudpsocket.xml#leaveMulticastGroup">leaveMulticastGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeDatagram">
<db:title>qint64 QUdpSocket::writeDatagram(const char *<db:emphasis>data</db:emphasis>, qint64 <db:emphasis>size</db:emphasis>, const QHostAddress &amp;<db:emphasis>address</db:emphasis>, quint16 <db:emphasis>port</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>qint64</db:type>
<db:methodname>writeDatagram</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHostAddress &amp;</db:type>
<db:parameter>address</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>port</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 writeDatagram(const char *data, qint64 size, const QHostAddress &amp;address, quint16 port)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends the datagram at <db:code role="parameter">data</db:code> of size <db:code role="parameter">size</db:code> to the host address <db:code role="parameter">address</db:code> at port <db:code role="parameter">port</db:code>. Returns the number of bytes sent on success; otherwise returns -1.</db:para>
<db:para>Datagrams are always written as one block. The maximum size of a datagram is highly platform-dependent, but can be as low as 8192 bytes. If the datagram is too large, this function will return -1 and <db:link xlink:href="qabstractsocket.xml#error">error</db:link>() will return DatagramTooLargeError.</db:para>
<db:para>Sending datagrams larger than 512 bytes is in general disadvised, as even if they are sent successfully, they are likely to be fragmented by the IP layer before arriving at their final destination.</db:para>
<db:warning>
<db:para>Calling this function on a connected UDP socket may result in an error and no packet being sent. If you are using a connected socket, use <db:link xlink:href="qiodevice.xml#write">write</db:link>() to send datagrams.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qudpsocket.xml#readDatagram">readDatagram</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeDatagram-1">
<db:title>[since 5.8] qint64 QUdpSocket::writeDatagram(const QNetworkDatagram &amp;<db:emphasis>datagram</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>qint64</db:type>
<db:methodname>writeDatagram</db:methodname>
<db:methodparam>
<db:type>const QNetworkDatagram &amp;</db:type>
<db:parameter>datagram</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 writeDatagram(const QNetworkDatagram &amp;datagram)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends the datagram <db:code role="parameter">datagram</db:code> to the host address and port numbers contained in <db:code role="parameter">datagram</db:code>, using the network interface and hop count limits also set there. If the destination address and port numbers are unset, this function will send to the address that was passed to <db:link xlink:href="qabstractsocket.xml#connectToHost">connectToHost</db:link>().</db:para>
<db:para>If the destination address is IPv6 with a non-empty <db:link xlink:href="qhostaddress.xml#scopeId">scope id</db:link> but differs from the interface index in <db:code role="parameter">datagram</db:code>, it is undefined which interface the operating system will choose to send on.</db:para>
<db:para>The function returns the number of bytes sent if it succeeded or -1 if it encountered an error.</db:para>
<db:warning>
<db:para>Calling this function on a connected UDP socket may result in an error and no packet being sent. If you are using a connected socket, use <db:link xlink:href="qiodevice.xml#write">write</db:link>() to send datagrams.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkdatagram.xml#setDestination">QNetworkDatagram::setDestination</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkdatagram.xml#setHopLimit">QNetworkDatagram::setHopLimit</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkdatagram.xml#setInterfaceIndex">QNetworkDatagram::setInterfaceIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeDatagram-2">
<db:title>qint64 QUdpSocket::writeDatagram(const QByteArray &amp;<db:emphasis>datagram</db:emphasis>, const QHostAddress &amp;<db:emphasis>host</db:emphasis>, quint16 <db:emphasis>port</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>qint64</db:type>
<db:methodname>writeDatagram</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>datagram</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHostAddress &amp;</db:type>
<db:parameter>host</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>port</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 writeDatagram(const QByteArray &amp;datagram, const QHostAddress &amp;host, quint16 port)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends the datagram <db:code role="parameter">datagram</db:code> to the host address <db:code role="parameter">host</db:code> and at port <db:code role="parameter">port</db:code>.</db:para>
<db:para>The function returns the number of bytes sent if it succeeded or -1 if it encountered an error.</db:para>
</db:section>
</db:section>
</db:article>
