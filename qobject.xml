<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QObject Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qobject.xml">QObject</db:link> class is the base class of all Qt objects.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="q3dobject.xml" xlink:role="class">Q3DObject</db:link>, <db:link xlink:href="q3dscene.xml" xlink:role="class">Q3DScene</db:link>, <db:link xlink:href="q3dtheme.xml" xlink:role="class">Q3DTheme</db:link>, <db:link xlink:href="qabstract3daxis.xml" xlink:role="class">QAbstract3DAxis</db:link>, <db:link xlink:href="qabstract3dinputhandler.xml" xlink:role="class">QAbstract3DInputHandler</db:link>, <db:link xlink:href="qabstract3dseries.xml" xlink:role="class">QAbstract3DSeries</db:link>, <db:link xlink:href="qabstractanimation.xml" xlink:role="class">QAbstractAnimation</db:link>, <db:link xlink:href="qabstractaxis.xml" xlink:role="class">QAbstractAxis</db:link>, <db:link xlink:href="qabstractdataproxy.xml" xlink:role="class">QAbstractDataProxy</db:link>, <db:link xlink:href="qabstracteventdispatcher.xml" xlink:role="class">QAbstractEventDispatcher</db:link>, <db:link xlink:href="qabstractgrpcclient.xml" xlink:role="class">QAbstractGrpcClient</db:link>, <db:link xlink:href="qabstracthttpserver.xml" xlink:role="class">QAbstractHttpServer</db:link>, <db:link xlink:href="qabstractitemdelegate.xml" xlink:role="class">QAbstractItemDelegate</db:link>, <db:link xlink:href="qabstractitemmodel.xml" xlink:role="class">QAbstractItemModel</db:link>, <db:link xlink:href="qabstractitemmodeltester.xml" xlink:role="class">QAbstractItemModelTester</db:link>, <db:link xlink:href="qabstractnetworkcache.xml" xlink:role="class">QAbstractNetworkCache</db:link>, <db:link xlink:href="qabstractoauth.xml" xlink:role="class">QAbstractOAuth</db:link>, <db:link xlink:href="qabstractoauthreplyhandler.xml" xlink:role="class">QAbstractOAuthReplyHandler</db:link>, <db:link xlink:href="qabstractseries.xml" xlink:role="class">QAbstractSeries</db:link>, <db:link xlink:href="qabstractstate.xml" xlink:role="class">QAbstractState</db:link>, <db:link xlink:href="qabstracttextdocumentlayout.xml" xlink:role="class">QAbstractTextDocumentLayout</db:link>, <db:link xlink:href="qabstracttransition.xml" xlink:role="class">QAbstractTransition</db:link>, <db:link xlink:href="qaccessibleplugin.xml" xlink:role="class">QAccessiblePlugin</db:link>, <db:link xlink:href="qaction.xml" xlink:role="class">QAction</db:link>, <db:link xlink:href="qactiongroup.xml" xlink:role="class">QActionGroup</db:link>, <db:link xlink:href="qambientsound.xml" xlink:role="class">QAmbientSound</db:link>, <db:link xlink:href="qaudiodecoder.xml" xlink:role="class">QAudioDecoder</db:link>, <db:link xlink:href="qaudioengine.xml" xlink:role="class">QAudioEngine</db:link>, <db:link xlink:href="qaudioinput.xml" xlink:role="class">QAudioInput</db:link>, <db:link xlink:href="qaudiolistener.xml" xlink:role="class">QAudioListener</db:link>, <db:link xlink:href="qaudiooutput.xml" xlink:role="class">QAudioOutput</db:link>, <db:link xlink:href="qaudioroom.xml" xlink:role="class">QAudioRoom</db:link>, <db:link xlink:href="qaudiosink.xml" xlink:role="class">QAudioSink</db:link>, <db:link xlink:href="qaudiosource.xml" xlink:role="class">QAudioSource</db:link>, <db:link xlink:href="qaxbaseobject.xml" xlink:role="class">QAxBaseObject</db:link>, <db:link xlink:href="qaxfactory.xml" xlink:role="class">QAxFactory</db:link>, <db:link xlink:href="qaxscript.xml" xlink:role="class">QAxScript</db:link>, <db:link xlink:href="qaxscriptmanager.xml" xlink:role="class">QAxScriptManager</db:link>, <db:link xlink:href="qbarset.xml" xlink:role="class">QBarSet</db:link>, <db:link xlink:href="qbluetoothdevicediscoveryagent.xml" xlink:role="class">QBluetoothDeviceDiscoveryAgent</db:link>, <db:link xlink:href="qbluetoothlocaldevice.xml" xlink:role="class">QBluetoothLocalDevice</db:link>, <db:link xlink:href="qbluetoothserver.xml" xlink:role="class">QBluetoothServer</db:link>, <db:link xlink:href="qbluetoothservicediscoveryagent.xml" xlink:role="class">QBluetoothServiceDiscoveryAgent</db:link>, <db:link xlink:href="qboxset.xml" xlink:role="class">QBoxSet</db:link>, <db:link xlink:href="qbuttongroup.xml" xlink:role="class">QButtonGroup</db:link>, <db:link xlink:href="qcamera.xml" xlink:role="class">QCamera</db:link>, <db:link xlink:href="qcanbus.xml" xlink:role="class">QCanBus</db:link>, <db:link xlink:href="qcanbusdevice.xml" xlink:role="class">QCanBusDevice</db:link>, <db:link xlink:href="qcandlestickmodelmapper.xml" xlink:role="class">QCandlestickModelMapper</db:link>, <db:link xlink:href="qcandlestickset.xml" xlink:role="class">QCandlestickSet</db:link>, <db:link xlink:href="qclipboard.xml" xlink:role="class">QClipboard</db:link>, <db:link xlink:href="qcompleter.xml" xlink:role="class">QCompleter</db:link>, <db:link xlink:href="qcoreapplication.xml" xlink:role="class">QCoreApplication</db:link>, <db:link xlink:href="qcustom3ditem.xml" xlink:role="class">QCustom3DItem</db:link>, <db:link xlink:href="qdatawidgetmapper.xml" xlink:role="class">QDataWidgetMapper</db:link>, <db:link xlink:href="qdbusabstractadaptor.xml" xlink:role="class">QDBusAbstractAdaptor</db:link>, <db:link xlink:href="qdbusabstractinterface.xml" xlink:role="class">QDBusAbstractInterface</db:link>, <db:link xlink:href="qdbuspendingcallwatcher.xml" xlink:role="class">QDBusPendingCallWatcher</db:link>, <db:link xlink:href="qdbusserver.xml" xlink:role="class">QDBusServer</db:link>, <db:link xlink:href="qdbusservicewatcher.xml" xlink:role="class">QDBusServiceWatcher</db:link>, <db:link xlink:href="qdbusvirtualobject.xml" xlink:role="class">QDBusVirtualObject</db:link>, <db:link xlink:href="qdesignerformeditorinterface.xml" xlink:role="class">QDesignerFormEditorInterface</db:link>, <db:link xlink:href="qdesignerformwindowmanagerinterface.xml" xlink:role="class">QDesignerFormWindowManagerInterface</db:link>, <db:link xlink:href="qdnslookup.xml" xlink:role="class">QDnsLookup</db:link>, <db:link xlink:href="qdrag.xml" xlink:role="class">QDrag</db:link>, <db:link xlink:href="qdtls.xml" xlink:role="class">QDtls</db:link>, <db:link xlink:href="qdtlsclientverifier.xml" xlink:role="class">QDtlsClientVerifier</db:link>, <db:link xlink:href="qeventloop.xml" xlink:role="class">QEventLoop</db:link>, <db:link xlink:href="qextensionfactory.xml" xlink:role="class">QExtensionFactory</db:link>, <db:link xlink:href="qextensionmanager.xml" xlink:role="class">QExtensionManager</db:link>, <db:link xlink:href="qfileselector.xml" xlink:role="class">QFileSelector</db:link>, <db:link xlink:href="qfilesystemwatcher.xml" xlink:role="class">QFileSystemWatcher</db:link>, <db:link xlink:href="qfuturewatcher.xml" xlink:role="class">QFutureWatcher</db:link>, <db:link xlink:href="qgenericplugin.xml" xlink:role="class">QGenericPlugin</db:link>, <db:link xlink:href="qgeoareamonitorsource.xml" xlink:role="class">QGeoAreaMonitorSource</db:link>, <db:link xlink:href="qgeocodereply.xml" xlink:role="class">QGeoCodeReply</db:link>, <db:link xlink:href="qgeocodingmanager.xml" xlink:role="class">QGeoCodingManager</db:link>, <db:link xlink:href="qgeocodingmanagerengine.xml" xlink:role="class">QGeoCodingManagerEngine</db:link>, <db:link xlink:href="qgeopositioninfosource.xml" xlink:role="class">QGeoPositionInfoSource</db:link>, <db:link xlink:href="qgeoroutereply.xml" xlink:role="class">QGeoRouteReply</db:link>, <db:link xlink:href="qgeoroutingmanager.xml" xlink:role="class">QGeoRoutingManager</db:link>, <db:link xlink:href="qgeoroutingmanagerengine.xml" xlink:role="class">QGeoRoutingManagerEngine</db:link>, <db:link xlink:href="qgeosatelliteinfosource.xml" xlink:role="class">QGeoSatelliteInfoSource</db:link>, <db:link xlink:href="qgeoserviceprovider.xml" xlink:role="class">QGeoServiceProvider</db:link>, <db:link xlink:href="qgesture.xml" xlink:role="class">QGesture</db:link>, <db:link xlink:href="qgraphicsanchor.xml" xlink:role="class">QGraphicsAnchor</db:link>, <db:link xlink:href="qgraphicseffect.xml" xlink:role="class">QGraphicsEffect</db:link>, <db:link xlink:href="qgraphicsitemanimation.xml" xlink:role="class">QGraphicsItemAnimation</db:link>, <db:link xlink:href="qgraphicsobject.xml" xlink:role="class">QGraphicsObject</db:link>, <db:link xlink:href="qgraphicsscene.xml" xlink:role="class">QGraphicsScene</db:link>, <db:link xlink:href="qgraphicstransform.xml" xlink:role="class">QGraphicsTransform</db:link>, <db:link xlink:href="qgraphtheme.xml" xlink:role="class">QGraphTheme</db:link>, <db:link xlink:href="qgrpcchanneloperation.xml" xlink:role="class">QGrpcChannelOperation</db:link>, <db:link xlink:href="qgrpcoperation.xml" xlink:role="class">QGrpcOperation</db:link>, <db:link xlink:href="qhelpenginecore.xml" xlink:role="class">QHelpEngineCore</db:link>, <db:link xlink:href="qhelpfilterengine.xml" xlink:role="class">QHelpFilterEngine</db:link>, <db:link xlink:href="qhelpsearchengine.xml" xlink:role="class">QHelpSearchEngine</db:link>, <db:link xlink:href="qhttpmultipart.xml" xlink:role="class">QHttpMultiPart</db:link>, <db:link xlink:href="qiconengineplugin.xml" xlink:role="class">QIconEnginePlugin</db:link>, <db:link xlink:href="qimagecapture.xml" xlink:role="class">QImageCapture</db:link>, <db:link xlink:href="qimageioplugin.xml" xlink:role="class">QImageIOPlugin</db:link>, <db:link xlink:href="qinputdevice.xml" xlink:role="class">QInputDevice</db:link>, <db:link xlink:href="qinputmethod.xml" xlink:role="class">QInputMethod</db:link>, <db:link xlink:href="qinsightconfiguration.xml" xlink:role="class">QInsightConfiguration</db:link>, <db:link xlink:href="qinsighttracker.xml" xlink:role="class">QInsightTracker</db:link>, <db:link xlink:href="qiodevice.xml" xlink:role="class">QIODevice</db:link>, <db:link xlink:href="qitemselectionmodel.xml" xlink:role="class">QItemSelectionModel</db:link>, <db:link xlink:href="qjsengine.xml" xlink:role="class">QJSEngine</db:link>, <db:link xlink:href="qlayout.xml" xlink:role="class">QLayout</db:link>, <db:link xlink:href="qlegendmarker.xml" xlink:role="class">QLegendMarker</db:link>, <db:link xlink:href="qlibrary.xml" xlink:role="class">QLibrary</db:link>, <db:link xlink:href="qlocalserver.xml" xlink:role="class">QLocalServer</db:link>, <db:link xlink:href="qlowenergycontroller.xml" xlink:role="class">QLowEnergyController</db:link>, <db:link xlink:href="qlowenergyservice.xml" xlink:role="class">QLowEnergyService</db:link>, <db:link xlink:href="qmaskgenerator.xml" xlink:role="class">QMaskGenerator</db:link>, <db:link xlink:href="qmediacapturesession.xml" xlink:role="class">QMediaCaptureSession</db:link>, <db:link xlink:href="qmediadevices.xml" xlink:role="class">QMediaDevices</db:link>, <db:link xlink:href="qmediaplayer.xml" xlink:role="class">QMediaPlayer</db:link>, <db:link xlink:href="qmediarecorder.xml" xlink:role="class">QMediaRecorder</db:link>, <db:link xlink:href="qmimedata.xml" xlink:role="class">QMimeData</db:link>, <db:link xlink:href="qmodbusdevice.xml" xlink:role="class">QModbusDevice</db:link>, <db:link xlink:href="qmodbusreply.xml" xlink:role="class">QModbusReply</db:link>, <db:link xlink:href="qmovie.xml" xlink:role="class">QMovie</db:link>, <db:link xlink:href="qnearfieldmanager.xml" xlink:role="class">QNearFieldManager</db:link>, <db:link xlink:href="qnearfieldtarget.xml" xlink:role="class">QNearFieldTarget</db:link>, <db:link xlink:href="qnetworkaccessmanager.xml" xlink:role="class">QNetworkAccessManager</db:link>, <db:link xlink:href="qnetworkcookiejar.xml" xlink:role="class">QNetworkCookieJar</db:link>, <db:link xlink:href="qnetworkinformation.xml" xlink:role="class">QNetworkInformation</db:link>, <db:link xlink:href="qobjectcleanuphandler.xml" xlink:role="class">QObjectCleanupHandler</db:link>, <db:link xlink:href="qoffscreensurface.xml" xlink:role="class">QOffscreenSurface</db:link>, <db:link xlink:href="qopenglcontext.xml" xlink:role="class">QOpenGLContext</db:link>, <db:link xlink:href="qopenglcontextgroup.xml" xlink:role="class">QOpenGLContextGroup</db:link>, <db:link xlink:href="qopengldebuglogger.xml" xlink:role="class">QOpenGLDebugLogger</db:link>, <db:link xlink:href="qopenglshader.xml" xlink:role="class">QOpenGLShader</db:link>, <db:link xlink:href="qopenglshaderprogram.xml" xlink:role="class">QOpenGLShaderProgram</db:link>, <db:link xlink:href="qopengltimemonitor.xml" xlink:role="class">QOpenGLTimeMonitor</db:link>, <db:link xlink:href="qopengltimerquery.xml" xlink:role="class">QOpenGLTimerQuery</db:link>, <db:link xlink:href="qopenglvertexarrayobject.xml" xlink:role="class">QOpenGLVertexArrayObject</db:link>, <db:link xlink:href="qpdfdocument.xml" xlink:role="class">QPdfDocument</db:link>, <db:link xlink:href="qpdfpagenavigator.xml" xlink:role="class">QPdfPageNavigator</db:link>, <db:link xlink:href="qpdfpagerenderer.xml" xlink:role="class">QPdfPageRenderer</db:link>, <db:link xlink:href="qpdfwriter.xml" xlink:role="class">QPdfWriter</db:link>, <db:link xlink:href="qpieslice.xml" xlink:role="class">QPieSlice</db:link>, <db:link xlink:href="qplacemanager.xml" xlink:role="class">QPlaceManager</db:link>, <db:link xlink:href="qplacemanagerengine.xml" xlink:role="class">QPlaceManagerEngine</db:link>, <db:link xlink:href="qplacereply.xml" xlink:role="class">QPlaceReply</db:link>, <db:link xlink:href="qpluginloader.xml" xlink:role="class">QPluginLoader</db:link>, <db:link xlink:href="qqmlcomponent.xml" xlink:role="class">QQmlComponent</db:link>, <db:link xlink:href="qqmlcontext.xml" xlink:role="class">QQmlContext</db:link>, <db:link xlink:href="qqmlengineextensionplugin.xml" xlink:role="class">QQmlEngineExtensionPlugin</db:link>, <db:link xlink:href="qqmlexpression.xml" xlink:role="class">QQmlExpression</db:link>, <db:link xlink:href="qqmlextensionplugin.xml" xlink:role="class">QQmlExtensionPlugin</db:link>, <db:link xlink:href="qqmlfileselector.xml" xlink:role="class">QQmlFileSelector</db:link>, <db:link xlink:href="qqmlimageproviderbase.xml" xlink:role="class">QQmlImageProviderBase</db:link>, <db:link xlink:href="qqmlpropertymap.xml" xlink:role="class">QQmlPropertyMap</db:link>, <db:link xlink:href="qquick3dobject.xml" xlink:role="class">QQuick3DObject</db:link>, <db:link xlink:href="qquickattachedpropertypropagator.xml" xlink:role="class">QQuickAttachedPropertyPropagator</db:link>, <db:link xlink:href="qquickimageresponse.xml" xlink:role="class">QQuickImageResponse</db:link>, <db:link xlink:href="qquickitem.xml" xlink:role="class">QQuickItem</db:link>, <db:link xlink:href="qquickitemgrabresult.xml" xlink:role="class">QQuickItemGrabResult</db:link>, <db:link xlink:href="qquickrendercontrol.xml" xlink:role="class">QQuickRenderControl</db:link>, <db:link xlink:href="qquicktextdocument.xml" xlink:role="class">QQuickTextDocument</db:link>, <db:link xlink:href="qquicktexturefactory.xml" xlink:role="class">QQuickTextureFactory</db:link>, <db:link xlink:href="qquickwebengineprofile.xml" xlink:role="class">QQuickWebEngineProfile</db:link>, <db:link xlink:href="qremoteobjectabstractpersistedstore.xml" xlink:role="class">QRemoteObjectAbstractPersistedStore</db:link>, <db:link xlink:href="qremoteobjectnode.xml" xlink:role="class">QRemoteObjectNode</db:link>, <db:link xlink:href="qremoteobjectpendingcallwatcher.xml" xlink:role="class">QRemoteObjectPendingCallWatcher</db:link>, <db:link xlink:href="qremoteobjectreplica.xml" xlink:role="class">QRemoteObjectReplica</db:link>, <db:link xlink:href="qrestaccessmanager.xml" xlink:role="class">QRestAccessManager</db:link>, <db:link xlink:href="qscreen.xml" xlink:role="class">QScreen</db:link>, <db:link xlink:href="qscreencapture.xml" xlink:role="class">QScreenCapture</db:link>, <db:link xlink:href="qscroller.xml" xlink:role="class">QScroller</db:link>, <db:link xlink:href="qscxmldatamodel.xml" xlink:role="class">QScxmlDataModel</db:link>, <db:link xlink:href="qscxmlinvokableservice.xml" xlink:role="class">QScxmlInvokableService</db:link>, <db:link xlink:href="qscxmlinvokableservicefactory.xml" xlink:role="class">QScxmlInvokableServiceFactory</db:link>, <db:link xlink:href="qscxmlstatemachine.xml" xlink:role="class">QScxmlStateMachine</db:link>, <db:link xlink:href="qsensor.xml" xlink:role="class">QSensor</db:link>, <db:link xlink:href="qsensorbackend.xml" xlink:role="class">QSensorBackend</db:link>, <db:link xlink:href="qsensorreading.xml" xlink:role="class">QSensorReading</db:link>, <db:link xlink:href="qseriestheme.xml" xlink:role="class">QSeriesTheme</db:link>, <db:link xlink:href="qsessionmanager.xml" xlink:role="class">QSessionManager</db:link>, <db:link xlink:href="qsettings.xml" xlink:role="class">QSettings</db:link>, <db:link xlink:href="qsgtexture.xml" xlink:role="class">QSGTexture</db:link>, <db:link xlink:href="qsgtextureprovider.xml" xlink:role="class">QSGTextureProvider</db:link>, <db:link xlink:href="qsharedmemory.xml" xlink:role="class">QSharedMemory</db:link>, <db:link xlink:href="qshortcut.xml" xlink:role="class">QShortcut</db:link>, <db:link xlink:href="qsignalmapper.xml" xlink:role="class">QSignalMapper</db:link>, <db:link xlink:href="qsignalspy.xml" xlink:role="class">QSignalSpy</db:link>, <db:link xlink:href="qsocketnotifier.xml" xlink:role="class">QSocketNotifier</db:link>, <db:link xlink:href="qsoundeffect.xml" xlink:role="class">QSoundEffect</db:link>, <db:link xlink:href="qspatialsound.xml" xlink:role="class">QSpatialSound</db:link>, <db:link xlink:href="qsqldriver.xml" xlink:role="class">QSqlDriver</db:link>, <db:link xlink:href="qsqldriverplugin.xml" xlink:role="class">QSqlDriverPlugin</db:link>, <db:link xlink:href="qstyle.xml" xlink:role="class">QStyle</db:link>, <db:link xlink:href="qstylehints.xml" xlink:role="class">QStyleHints</db:link>, <db:link xlink:href="qstyleplugin.xml" xlink:role="class">QStylePlugin</db:link>, <db:link xlink:href="qsvgrenderer.xml" xlink:role="class">QSvgRenderer</db:link>, <db:link xlink:href="qsyntaxhighlighter.xml" xlink:role="class">QSyntaxHighlighter</db:link>, <db:link xlink:href="qsystemtrayicon.xml" xlink:role="class">QSystemTrayIcon</db:link>, <db:link xlink:href="qt3danimation-qabstractanimation.xml" xlink:role="class">Qt3DAnimation::QAbstractAnimation</db:link>, <db:link xlink:href="qt3danimation-qanimationcontroller.xml" xlink:role="class">Qt3DAnimation::QAnimationController</db:link>, <db:link xlink:href="qt3danimation-qanimationgroup.xml" xlink:role="class">Qt3DAnimation::QAnimationGroup</db:link>, <db:link xlink:href="qt3danimation-qmorphtarget.xml" xlink:role="class">Qt3DAnimation::QMorphTarget</db:link>, <db:link xlink:href="qt3dcore-qabstractaspect.xml" xlink:role="class">Qt3DCore::QAbstractAspect</db:link>, <db:link xlink:href="qt3dcore-qaspectengine.xml" xlink:role="class">Qt3DCore::QAspectEngine</db:link>, <db:link xlink:href="qt3dcore-qnode.xml" xlink:role="class">Qt3DCore::QNode</db:link>, <db:link xlink:href="qt3dcore-quick-qqmlaspectengine.xml" xlink:role="class">Qt3DCore::Quick::QQmlAspectEngine</db:link>, <db:link xlink:href="qt3dinput-qinputdeviceintegration.xml" xlink:role="class">Qt3DInput::QInputDeviceIntegration</db:link>, <db:link xlink:href="qt3dinput-qkeyevent.xml" xlink:role="class">Qt3DInput::QKeyEvent</db:link>, <db:link xlink:href="qt3dinput-qmouseevent.xml" xlink:role="class">Qt3DInput::QMouseEvent</db:link>, <db:link xlink:href="qt3dinput-qwheelevent.xml" xlink:role="class">Qt3DInput::QWheelEvent</db:link>, <db:link xlink:href="qt3drender-qgraphicsapifilter.xml" xlink:role="class">Qt3DRender::QGraphicsApiFilter</db:link>, <db:link xlink:href="qt3drender-qpickevent.xml" xlink:role="class">Qt3DRender::QPickEvent</db:link>, <db:link xlink:href="qt3drender-qrendercapabilities.xml" xlink:role="class">Qt3DRender::QRenderCapabilities</db:link>, <db:link xlink:href="qt3drender-qrendercapturereply.xml" xlink:role="class">Qt3DRender::QRenderCaptureReply</db:link>, <db:link xlink:href="qt3drender-qstenciloperationarguments.xml" xlink:role="class">Qt3DRender::QStencilOperationArguments</db:link>, <db:link xlink:href="qt3drender-qstenciltestarguments.xml" xlink:role="class">Qt3DRender::QStencilTestArguments</db:link>, <db:link xlink:href="qt3drender-qtexturewrapmode.xml" xlink:role="class">Qt3DRender::QTextureWrapMode</db:link>, <db:link xlink:href="qtcpserver.xml" xlink:role="class">QTcpServer</db:link>, <db:link xlink:href="qtextdocument.xml" xlink:role="class">QTextDocument</db:link>, <db:link xlink:href="qtextobject.xml" xlink:role="class">QTextObject</db:link>, <db:link xlink:href="qtexttospeech.xml" xlink:role="class">QTextToSpeech</db:link>, <db:link xlink:href="qthread.xml" xlink:role="class">QThread</db:link>, <db:link xlink:href="qthreadpool.xml" xlink:role="class">QThreadPool</db:link>, <db:link xlink:href="qtimeline.xml" xlink:role="class">QTimeLine</db:link>, <db:link xlink:href="qtimer.xml" xlink:role="class">QTimer</db:link>, <db:link xlink:href="qtranslator.xml" xlink:role="class">QTranslator</db:link>, <db:link xlink:href="quiloader.xml" xlink:role="class">QUiLoader</db:link>, <db:link xlink:href="qundogroup.xml" xlink:role="class">QUndoGroup</db:link>, <db:link xlink:href="qundostack.xml" xlink:role="class">QUndoStack</db:link>, <db:link xlink:href="qvalidator.xml" xlink:role="class">QValidator</db:link>, <db:link xlink:href="qvalue3daxisformatter.xml" xlink:role="class">QValue3DAxisFormatter</db:link>, <db:link xlink:href="qvideosink.xml" xlink:role="class">QVideoSink</db:link>, <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml" xlink:role="class">QVirtualKeyboardAbstractInputMethod</db:link>, <db:link xlink:href="qvirtualkeyboarddictionary.xml" xlink:role="class">QVirtualKeyboardDictionary</db:link>, <db:link xlink:href="qvirtualkeyboarddictionarymanager.xml" xlink:role="class">QVirtualKeyboardDictionaryManager</db:link>, <db:link xlink:href="qvirtualkeyboardinputcontext.xml" xlink:role="class">QVirtualKeyboardInputContext</db:link>, <db:link xlink:href="qvirtualkeyboardinputengine.xml" xlink:role="class">QVirtualKeyboardInputEngine</db:link>, <db:link xlink:href="qvirtualkeyboardobserver.xml" xlink:role="class">QVirtualKeyboardObserver</db:link>, <db:link xlink:href="qvirtualkeyboardtrace.xml" xlink:role="class">QVirtualKeyboardTrace</db:link>, <db:link xlink:href="qwebchannel.xml" xlink:role="class">QWebChannel</db:link>, <db:link xlink:href="qwebchannelabstracttransport.xml" xlink:role="class">QWebChannelAbstractTransport</db:link>, <db:link xlink:href="qwebenginecontextmenurequest.xml" xlink:role="class">QWebEngineContextMenuRequest</db:link>, <db:link xlink:href="qwebenginecookiestore.xml" xlink:role="class">QWebEngineCookieStore</db:link>, <db:link xlink:href="qwebenginedownloadrequest.xml" xlink:role="class">QWebEngineDownloadRequest</db:link>, <db:link xlink:href="qwebenginehistory.xml" xlink:role="class">QWebEngineHistory</db:link>, <db:link xlink:href="qwebenginenavigationrequest.xml" xlink:role="class">QWebEngineNavigationRequest</db:link>, <db:link xlink:href="qwebenginenewwindowrequest.xml" xlink:role="class">QWebEngineNewWindowRequest</db:link>, <db:link xlink:href="qwebenginenotification.xml" xlink:role="class">QWebEngineNotification</db:link>, <db:link xlink:href="qwebenginepage.xml" xlink:role="class">QWebEnginePage</db:link>, <db:link xlink:href="qwebengineprofile.xml" xlink:role="class">QWebEngineProfile</db:link>, <db:link xlink:href="qwebengineurlrequestinterceptor.xml" xlink:role="class">QWebEngineUrlRequestInterceptor</db:link>, <db:link xlink:href="qwebengineurlrequestjob.xml" xlink:role="class">QWebEngineUrlRequestJob</db:link>, <db:link xlink:href="qwebengineurlschemehandler.xml" xlink:role="class">QWebEngineUrlSchemeHandler</db:link>, <db:link xlink:href="qwebenginewebauthuxrequest.xml" xlink:role="class">QWebEngineWebAuthUxRequest</db:link>, <db:link xlink:href="qwebsocket.xml" xlink:role="class">QWebSocket</db:link>, <db:link xlink:href="qwebsocketserver.xml" xlink:role="class">QWebSocketServer</db:link>, <db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link>, <db:link xlink:href="qwindow.xml" xlink:role="class">QWindow</db:link>, <db:link xlink:href="qwindowcapture.xml" xlink:role="class">QWindowCapture</db:link>, and <db:link xlink:href="qwineventnotifier.xml" xlink:role="class">QWinEventNotifier</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtqml-qtobject.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="q3dobject.xml" xlink:role="class">Q3DObject</db:link>, <db:link xlink:href="q3dscene.xml" xlink:role="class">Q3DScene</db:link>, <db:link xlink:href="q3dtheme.xml" xlink:role="class">Q3DTheme</db:link>, <db:link xlink:href="qabstract3daxis.xml" xlink:role="class">QAbstract3DAxis</db:link>, <db:link xlink:href="qabstract3dinputhandler.xml" xlink:role="class">QAbstract3DInputHandler</db:link>, <db:link xlink:href="qabstract3dseries.xml" xlink:role="class">QAbstract3DSeries</db:link>, <db:link xlink:href="qabstractanimation.xml" xlink:role="class">QAbstractAnimation</db:link>, <db:link xlink:href="qabstractaxis.xml" xlink:role="class">QAbstractAxis</db:link>, <db:link xlink:href="qabstractdataproxy.xml" xlink:role="class">QAbstractDataProxy</db:link>, <db:link xlink:href="qabstracteventdispatcher.xml" xlink:role="class">QAbstractEventDispatcher</db:link>, <db:link xlink:href="qabstractgrpcclient.xml" xlink:role="class">QAbstractGrpcClient</db:link>, <db:link xlink:href="qabstracthttpserver.xml" xlink:role="class">QAbstractHttpServer</db:link>, <db:link xlink:href="qabstractitemdelegate.xml" xlink:role="class">QAbstractItemDelegate</db:link>, <db:link xlink:href="qabstractitemmodel.xml" xlink:role="class">QAbstractItemModel</db:link>, <db:link xlink:href="qabstractitemmodeltester.xml" xlink:role="class">QAbstractItemModelTester</db:link>, <db:link xlink:href="qabstractnetworkcache.xml" xlink:role="class">QAbstractNetworkCache</db:link>, <db:link xlink:href="qabstractoauth.xml" xlink:role="class">QAbstractOAuth</db:link>, <db:link xlink:href="qabstractoauthreplyhandler.xml" xlink:role="class">QAbstractOAuthReplyHandler</db:link>, <db:link xlink:href="qabstractseries.xml" xlink:role="class">QAbstractSeries</db:link>, <db:link xlink:href="qabstractstate.xml" xlink:role="class">QAbstractState</db:link>, <db:link xlink:href="qabstracttextdocumentlayout.xml" xlink:role="class">QAbstractTextDocumentLayout</db:link>, <db:link xlink:href="qabstracttransition.xml" xlink:role="class">QAbstractTransition</db:link>, <db:link xlink:href="qaccessibleplugin.xml" xlink:role="class">QAccessiblePlugin</db:link>, <db:link xlink:href="qaction.xml" xlink:role="class">QAction</db:link>, <db:link xlink:href="qactiongroup.xml" xlink:role="class">QActionGroup</db:link>, <db:link xlink:href="qambientsound.xml" xlink:role="class">QAmbientSound</db:link>, <db:link xlink:href="qaudiodecoder.xml" xlink:role="class">QAudioDecoder</db:link>, <db:link xlink:href="qaudioengine.xml" xlink:role="class">QAudioEngine</db:link>, <db:link xlink:href="qaudioinput.xml" xlink:role="class">QAudioInput</db:link>, <db:link xlink:href="qaudiolistener.xml" xlink:role="class">QAudioListener</db:link>, <db:link xlink:href="qaudiooutput.xml" xlink:role="class">QAudioOutput</db:link>, <db:link xlink:href="qaudioroom.xml" xlink:role="class">QAudioRoom</db:link>, <db:link xlink:href="qaudiosink.xml" xlink:role="class">QAudioSink</db:link>, <db:link xlink:href="qaudiosource.xml" xlink:role="class">QAudioSource</db:link>, <db:link xlink:href="qaxbaseobject.xml" xlink:role="class">QAxBaseObject</db:link>, <db:link xlink:href="qaxfactory.xml" xlink:role="class">QAxFactory</db:link>, <db:link xlink:href="qaxscript.xml" xlink:role="class">QAxScript</db:link>, <db:link xlink:href="qaxscriptmanager.xml" xlink:role="class">QAxScriptManager</db:link>, <db:link xlink:href="qbarset.xml" xlink:role="class">QBarSet</db:link>, <db:link xlink:href="qbluetoothdevicediscoveryagent.xml" xlink:role="class">QBluetoothDeviceDiscoveryAgent</db:link>, <db:link xlink:href="qbluetoothlocaldevice.xml" xlink:role="class">QBluetoothLocalDevice</db:link>, <db:link xlink:href="qbluetoothserver.xml" xlink:role="class">QBluetoothServer</db:link>, <db:link xlink:href="qbluetoothservicediscoveryagent.xml" xlink:role="class">QBluetoothServiceDiscoveryAgent</db:link>, <db:link xlink:href="qboxset.xml" xlink:role="class">QBoxSet</db:link>, <db:link xlink:href="qbuttongroup.xml" xlink:role="class">QButtonGroup</db:link>, <db:link xlink:href="qcamera.xml" xlink:role="class">QCamera</db:link>, <db:link xlink:href="qcanbus.xml" xlink:role="class">QCanBus</db:link>, <db:link xlink:href="qcanbusdevice.xml" xlink:role="class">QCanBusDevice</db:link>, <db:link xlink:href="qcandlestickmodelmapper.xml" xlink:role="class">QCandlestickModelMapper</db:link>, <db:link xlink:href="qcandlestickset.xml" xlink:role="class">QCandlestickSet</db:link>, <db:link xlink:href="qclipboard.xml" xlink:role="class">QClipboard</db:link>, <db:link xlink:href="qcompleter.xml" xlink:role="class">QCompleter</db:link>, <db:link xlink:href="qcoreapplication.xml" xlink:role="class">QCoreApplication</db:link>, <db:link xlink:href="qcustom3ditem.xml" xlink:role="class">QCustom3DItem</db:link>, <db:link xlink:href="qdatawidgetmapper.xml" xlink:role="class">QDataWidgetMapper</db:link>, <db:link xlink:href="qdbusabstractadaptor.xml" xlink:role="class">QDBusAbstractAdaptor</db:link>, <db:link xlink:href="qdbusabstractinterface.xml" xlink:role="class">QDBusAbstractInterface</db:link>, <db:link xlink:href="qdbuspendingcallwatcher.xml" xlink:role="class">QDBusPendingCallWatcher</db:link>, <db:link xlink:href="qdbusserver.xml" xlink:role="class">QDBusServer</db:link>, <db:link xlink:href="qdbusservicewatcher.xml" xlink:role="class">QDBusServiceWatcher</db:link>, <db:link xlink:href="qdbusvirtualobject.xml" xlink:role="class">QDBusVirtualObject</db:link>, <db:link xlink:href="qdesignerformeditorinterface.xml" xlink:role="class">QDesignerFormEditorInterface</db:link>, <db:link xlink:href="qdesignerformwindowmanagerinterface.xml" xlink:role="class">QDesignerFormWindowManagerInterface</db:link>, <db:link xlink:href="qdnslookup.xml" xlink:role="class">QDnsLookup</db:link>, <db:link xlink:href="qdrag.xml" xlink:role="class">QDrag</db:link>, <db:link xlink:href="qdtls.xml" xlink:role="class">QDtls</db:link>, <db:link xlink:href="qdtlsclientverifier.xml" xlink:role="class">QDtlsClientVerifier</db:link>, <db:link xlink:href="qeventloop.xml" xlink:role="class">QEventLoop</db:link>, <db:link xlink:href="qextensionfactory.xml" xlink:role="class">QExtensionFactory</db:link>, <db:link xlink:href="qextensionmanager.xml" xlink:role="class">QExtensionManager</db:link>, <db:link xlink:href="qfileselector.xml" xlink:role="class">QFileSelector</db:link>, <db:link xlink:href="qfilesystemwatcher.xml" xlink:role="class">QFileSystemWatcher</db:link>, <db:link xlink:href="qfuturewatcher.xml" xlink:role="class">QFutureWatcher</db:link>, <db:link xlink:href="qgenericplugin.xml" xlink:role="class">QGenericPlugin</db:link>, <db:link xlink:href="qgeoareamonitorsource.xml" xlink:role="class">QGeoAreaMonitorSource</db:link>, <db:link xlink:href="qgeocodereply.xml" xlink:role="class">QGeoCodeReply</db:link>, <db:link xlink:href="qgeocodingmanager.xml" xlink:role="class">QGeoCodingManager</db:link>, <db:link xlink:href="qgeocodingmanagerengine.xml" xlink:role="class">QGeoCodingManagerEngine</db:link>, <db:link xlink:href="qgeopositioninfosource.xml" xlink:role="class">QGeoPositionInfoSource</db:link>, <db:link xlink:href="qgeoroutereply.xml" xlink:role="class">QGeoRouteReply</db:link>, <db:link xlink:href="qgeoroutingmanager.xml" xlink:role="class">QGeoRoutingManager</db:link>, <db:link xlink:href="qgeoroutingmanagerengine.xml" xlink:role="class">QGeoRoutingManagerEngine</db:link>, <db:link xlink:href="qgeosatelliteinfosource.xml" xlink:role="class">QGeoSatelliteInfoSource</db:link>, <db:link xlink:href="qgeoserviceprovider.xml" xlink:role="class">QGeoServiceProvider</db:link>, <db:link xlink:href="qgesture.xml" xlink:role="class">QGesture</db:link>, <db:link xlink:href="qgraphicsanchor.xml" xlink:role="class">QGraphicsAnchor</db:link>, <db:link xlink:href="qgraphicseffect.xml" xlink:role="class">QGraphicsEffect</db:link>, <db:link xlink:href="qgraphicsitemanimation.xml" xlink:role="class">QGraphicsItemAnimation</db:link>, <db:link xlink:href="qgraphicsobject.xml" xlink:role="class">QGraphicsObject</db:link>, <db:link xlink:href="qgraphicsscene.xml" xlink:role="class">QGraphicsScene</db:link>, <db:link xlink:href="qgraphicstransform.xml" xlink:role="class">QGraphicsTransform</db:link>, <db:link xlink:href="qgraphtheme.xml" xlink:role="class">QGraphTheme</db:link>, <db:link xlink:href="qgrpcchanneloperation.xml" xlink:role="class">QGrpcChannelOperation</db:link>, <db:link xlink:href="qgrpcoperation.xml" xlink:role="class">QGrpcOperation</db:link>, <db:link xlink:href="qhelpenginecore.xml" xlink:role="class">QHelpEngineCore</db:link>, <db:link xlink:href="qhelpfilterengine.xml" xlink:role="class">QHelpFilterEngine</db:link>, <db:link xlink:href="qhelpsearchengine.xml" xlink:role="class">QHelpSearchEngine</db:link>, <db:link xlink:href="qhttpmultipart.xml" xlink:role="class">QHttpMultiPart</db:link>, <db:link xlink:href="qiconengineplugin.xml" xlink:role="class">QIconEnginePlugin</db:link>, <db:link xlink:href="qimagecapture.xml" xlink:role="class">QImageCapture</db:link>, <db:link xlink:href="qimageioplugin.xml" xlink:role="class">QImageIOPlugin</db:link>, <db:link xlink:href="qinputdevice.xml" xlink:role="class">QInputDevice</db:link>, <db:link xlink:href="qinputmethod.xml" xlink:role="class">QInputMethod</db:link>, <db:link xlink:href="qinsightconfiguration.xml" xlink:role="class">QInsightConfiguration</db:link>, <db:link xlink:href="qinsighttracker.xml" xlink:role="class">QInsightTracker</db:link>, <db:link xlink:href="qiodevice.xml" xlink:role="class">QIODevice</db:link>, <db:link xlink:href="qitemselectionmodel.xml" xlink:role="class">QItemSelectionModel</db:link>, <db:link xlink:href="qjsengine.xml" xlink:role="class">QJSEngine</db:link>, <db:link xlink:href="qlayout.xml" xlink:role="class">QLayout</db:link>, <db:link xlink:href="qlegendmarker.xml" xlink:role="class">QLegendMarker</db:link>, <db:link xlink:href="qlibrary.xml" xlink:role="class">QLibrary</db:link>, <db:link xlink:href="qlocalserver.xml" xlink:role="class">QLocalServer</db:link>, <db:link xlink:href="qlowenergycontroller.xml" xlink:role="class">QLowEnergyController</db:link>, <db:link xlink:href="qlowenergyservice.xml" xlink:role="class">QLowEnergyService</db:link>, <db:link xlink:href="qmaskgenerator.xml" xlink:role="class">QMaskGenerator</db:link>, <db:link xlink:href="qmediacapturesession.xml" xlink:role="class">QMediaCaptureSession</db:link>, <db:link xlink:href="qmediadevices.xml" xlink:role="class">QMediaDevices</db:link>, <db:link xlink:href="qmediaplayer.xml" xlink:role="class">QMediaPlayer</db:link>, <db:link xlink:href="qmediarecorder.xml" xlink:role="class">QMediaRecorder</db:link>, <db:link xlink:href="qmimedata.xml" xlink:role="class">QMimeData</db:link>, <db:link xlink:href="qmodbusdevice.xml" xlink:role="class">QModbusDevice</db:link>, <db:link xlink:href="qmodbusreply.xml" xlink:role="class">QModbusReply</db:link>, <db:link xlink:href="qmovie.xml" xlink:role="class">QMovie</db:link>, <db:link xlink:href="qnearfieldmanager.xml" xlink:role="class">QNearFieldManager</db:link>, <db:link xlink:href="qnearfieldtarget.xml" xlink:role="class">QNearFieldTarget</db:link>, <db:link xlink:href="qnetworkaccessmanager.xml" xlink:role="class">QNetworkAccessManager</db:link>, <db:link xlink:href="qnetworkcookiejar.xml" xlink:role="class">QNetworkCookieJar</db:link>, <db:link xlink:href="qnetworkinformation.xml" xlink:role="class">QNetworkInformation</db:link>, <db:link xlink:href="qobjectcleanuphandler.xml" xlink:role="class">QObjectCleanupHandler</db:link>, <db:link xlink:href="qoffscreensurface.xml" xlink:role="class">QOffscreenSurface</db:link>, <db:link xlink:href="qopenglcontext.xml" xlink:role="class">QOpenGLContext</db:link>, <db:link xlink:href="qopenglcontextgroup.xml" xlink:role="class">QOpenGLContextGroup</db:link>, <db:link xlink:href="qopengldebuglogger.xml" xlink:role="class">QOpenGLDebugLogger</db:link>, <db:link xlink:href="qopenglshader.xml" xlink:role="class">QOpenGLShader</db:link>, <db:link xlink:href="qopenglshaderprogram.xml" xlink:role="class">QOpenGLShaderProgram</db:link>, <db:link xlink:href="qopengltimemonitor.xml" xlink:role="class">QOpenGLTimeMonitor</db:link>, <db:link xlink:href="qopengltimerquery.xml" xlink:role="class">QOpenGLTimerQuery</db:link>, <db:link xlink:href="qopenglvertexarrayobject.xml" xlink:role="class">QOpenGLVertexArrayObject</db:link>, <db:link xlink:href="qpdfdocument.xml" xlink:role="class">QPdfDocument</db:link>, <db:link xlink:href="qpdfpagenavigator.xml" xlink:role="class">QPdfPageNavigator</db:link>, <db:link xlink:href="qpdfpagerenderer.xml" xlink:role="class">QPdfPageRenderer</db:link>, <db:link xlink:href="qpdfwriter.xml" xlink:role="class">QPdfWriter</db:link>, <db:link xlink:href="qpieslice.xml" xlink:role="class">QPieSlice</db:link>, <db:link xlink:href="qplacemanager.xml" xlink:role="class">QPlaceManager</db:link>, <db:link xlink:href="qplacemanagerengine.xml" xlink:role="class">QPlaceManagerEngine</db:link>, <db:link xlink:href="qplacereply.xml" xlink:role="class">QPlaceReply</db:link>, <db:link xlink:href="qpluginloader.xml" xlink:role="class">QPluginLoader</db:link>, <db:link xlink:href="qqmlcomponent.xml" xlink:role="class">QQmlComponent</db:link>, <db:link xlink:href="qqmlcontext.xml" xlink:role="class">QQmlContext</db:link>, <db:link xlink:href="qqmlengineextensionplugin.xml" xlink:role="class">QQmlEngineExtensionPlugin</db:link>, <db:link xlink:href="qqmlexpression.xml" xlink:role="class">QQmlExpression</db:link>, <db:link xlink:href="qqmlextensionplugin.xml" xlink:role="class">QQmlExtensionPlugin</db:link>, <db:link xlink:href="qqmlfileselector.xml" xlink:role="class">QQmlFileSelector</db:link>, <db:link xlink:href="qqmlimageproviderbase.xml" xlink:role="class">QQmlImageProviderBase</db:link>, <db:link xlink:href="qqmlpropertymap.xml" xlink:role="class">QQmlPropertyMap</db:link>, <db:link xlink:href="qquick3dobject.xml" xlink:role="class">QQuick3DObject</db:link>, <db:link xlink:href="qquickattachedpropertypropagator.xml" xlink:role="class">QQuickAttachedPropertyPropagator</db:link>, <db:link xlink:href="qquickimageresponse.xml" xlink:role="class">QQuickImageResponse</db:link>, <db:link xlink:href="qquickitem.xml" xlink:role="class">QQuickItem</db:link>, <db:link xlink:href="qquickitemgrabresult.xml" xlink:role="class">QQuickItemGrabResult</db:link>, <db:link xlink:href="qquickrendercontrol.xml" xlink:role="class">QQuickRenderControl</db:link>, <db:link xlink:href="qquicktextdocument.xml" xlink:role="class">QQuickTextDocument</db:link>, <db:link xlink:href="qquicktexturefactory.xml" xlink:role="class">QQuickTextureFactory</db:link>, <db:link xlink:href="qquickwebengineprofile.xml" xlink:role="class">QQuickWebEngineProfile</db:link>, <db:link xlink:href="qremoteobjectabstractpersistedstore.xml" xlink:role="class">QRemoteObjectAbstractPersistedStore</db:link>, <db:link xlink:href="qremoteobjectnode.xml" xlink:role="class">QRemoteObjectNode</db:link>, <db:link xlink:href="qremoteobjectpendingcallwatcher.xml" xlink:role="class">QRemoteObjectPendingCallWatcher</db:link>, <db:link xlink:href="qremoteobjectreplica.xml" xlink:role="class">QRemoteObjectReplica</db:link>, <db:link xlink:href="qrestaccessmanager.xml" xlink:role="class">QRestAccessManager</db:link>, <db:link xlink:href="qscreen.xml" xlink:role="class">QScreen</db:link>, <db:link xlink:href="qscreencapture.xml" xlink:role="class">QScreenCapture</db:link>, <db:link xlink:href="qscroller.xml" xlink:role="class">QScroller</db:link>, <db:link xlink:href="qscxmldatamodel.xml" xlink:role="class">QScxmlDataModel</db:link>, <db:link xlink:href="qscxmlinvokableservice.xml" xlink:role="class">QScxmlInvokableService</db:link>, <db:link xlink:href="qscxmlinvokableservicefactory.xml" xlink:role="class">QScxmlInvokableServiceFactory</db:link>, <db:link xlink:href="qscxmlstatemachine.xml" xlink:role="class">QScxmlStateMachine</db:link>, <db:link xlink:href="qsensor.xml" xlink:role="class">QSensor</db:link>, <db:link xlink:href="qsensorbackend.xml" xlink:role="class">QSensorBackend</db:link>, <db:link xlink:href="qsensorreading.xml" xlink:role="class">QSensorReading</db:link>, <db:link xlink:href="qseriestheme.xml" xlink:role="class">QSeriesTheme</db:link>, <db:link xlink:href="qsessionmanager.xml" xlink:role="class">QSessionManager</db:link>, <db:link xlink:href="qsettings.xml" xlink:role="class">QSettings</db:link>, <db:link xlink:href="qsgtexture.xml" xlink:role="class">QSGTexture</db:link>, <db:link xlink:href="qsgtextureprovider.xml" xlink:role="class">QSGTextureProvider</db:link>, <db:link xlink:href="qsharedmemory.xml" xlink:role="class">QSharedMemory</db:link>, <db:link xlink:href="qshortcut.xml" xlink:role="class">QShortcut</db:link>, <db:link xlink:href="qsignalmapper.xml" xlink:role="class">QSignalMapper</db:link>, <db:link xlink:href="qsignalspy.xml" xlink:role="class">QSignalSpy</db:link>, <db:link xlink:href="qsocketnotifier.xml" xlink:role="class">QSocketNotifier</db:link>, <db:link xlink:href="qsoundeffect.xml" xlink:role="class">QSoundEffect</db:link>, <db:link xlink:href="qspatialsound.xml" xlink:role="class">QSpatialSound</db:link>, <db:link xlink:href="qsqldriver.xml" xlink:role="class">QSqlDriver</db:link>, <db:link xlink:href="qsqldriverplugin.xml" xlink:role="class">QSqlDriverPlugin</db:link>, <db:link xlink:href="qstyle.xml" xlink:role="class">QStyle</db:link>, <db:link xlink:href="qstylehints.xml" xlink:role="class">QStyleHints</db:link>, <db:link xlink:href="qstyleplugin.xml" xlink:role="class">QStylePlugin</db:link>, <db:link xlink:href="qsvgrenderer.xml" xlink:role="class">QSvgRenderer</db:link>, <db:link xlink:href="qsyntaxhighlighter.xml" xlink:role="class">QSyntaxHighlighter</db:link>, <db:link xlink:href="qsystemtrayicon.xml" xlink:role="class">QSystemTrayIcon</db:link>, <db:link xlink:href="qt3danimation-qabstractanimation.xml" xlink:role="class">Qt3DAnimation::QAbstractAnimation</db:link>, <db:link xlink:href="qt3danimation-qanimationcontroller.xml" xlink:role="class">Qt3DAnimation::QAnimationController</db:link>, <db:link xlink:href="qt3danimation-qanimationgroup.xml" xlink:role="class">Qt3DAnimation::QAnimationGroup</db:link>, <db:link xlink:href="qt3danimation-qmorphtarget.xml" xlink:role="class">Qt3DAnimation::QMorphTarget</db:link>, <db:link xlink:href="qt3dcore-qabstractaspect.xml" xlink:role="class">Qt3DCore::QAbstractAspect</db:link>, <db:link xlink:href="qt3dcore-qaspectengine.xml" xlink:role="class">Qt3DCore::QAspectEngine</db:link>, <db:link xlink:href="qt3dcore-qnode.xml" xlink:role="class">Qt3DCore::QNode</db:link>, <db:link xlink:href="qt3dcore-quick-qqmlaspectengine.xml" xlink:role="class">Qt3DCore::Quick::QQmlAspectEngine</db:link>, <db:link xlink:href="qt3dinput-qinputdeviceintegration.xml" xlink:role="class">Qt3DInput::QInputDeviceIntegration</db:link>, <db:link xlink:href="qt3dinput-qkeyevent.xml" xlink:role="class">Qt3DInput::QKeyEvent</db:link>, <db:link xlink:href="qt3dinput-qmouseevent.xml" xlink:role="class">Qt3DInput::QMouseEvent</db:link>, <db:link xlink:href="qt3dinput-qwheelevent.xml" xlink:role="class">Qt3DInput::QWheelEvent</db:link>, <db:link xlink:href="qt3drender-qgraphicsapifilter.xml" xlink:role="class">Qt3DRender::QGraphicsApiFilter</db:link>, <db:link xlink:href="qt3drender-qpickevent.xml" xlink:role="class">Qt3DRender::QPickEvent</db:link>, <db:link xlink:href="qt3drender-qrendercapabilities.xml" xlink:role="class">Qt3DRender::QRenderCapabilities</db:link>, <db:link xlink:href="qt3drender-qrendercapturereply.xml" xlink:role="class">Qt3DRender::QRenderCaptureReply</db:link>, <db:link xlink:href="qt3drender-qstenciloperationarguments.xml" xlink:role="class">Qt3DRender::QStencilOperationArguments</db:link>, <db:link xlink:href="qt3drender-qstenciltestarguments.xml" xlink:role="class">Qt3DRender::QStencilTestArguments</db:link>, <db:link xlink:href="qt3drender-qtexturewrapmode.xml" xlink:role="class">Qt3DRender::QTextureWrapMode</db:link>, <db:link xlink:href="qtcpserver.xml" xlink:role="class">QTcpServer</db:link>, <db:link xlink:href="qtextdocument.xml" xlink:role="class">QTextDocument</db:link>, <db:link xlink:href="qtextobject.xml" xlink:role="class">QTextObject</db:link>, <db:link xlink:href="qtexttospeech.xml" xlink:role="class">QTextToSpeech</db:link>, <db:link xlink:href="qthread.xml" xlink:role="class">QThread</db:link>, <db:link xlink:href="qthreadpool.xml" xlink:role="class">QThreadPool</db:link>, <db:link xlink:href="qtimeline.xml" xlink:role="class">QTimeLine</db:link>, <db:link xlink:href="qtimer.xml" xlink:role="class">QTimer</db:link>, <db:link xlink:href="qtranslator.xml" xlink:role="class">QTranslator</db:link>, <db:link xlink:href="quiloader.xml" xlink:role="class">QUiLoader</db:link>, <db:link xlink:href="qundogroup.xml" xlink:role="class">QUndoGroup</db:link>, <db:link xlink:href="qundostack.xml" xlink:role="class">QUndoStack</db:link>, <db:link xlink:href="qvalidator.xml" xlink:role="class">QValidator</db:link>, <db:link xlink:href="qvalue3daxisformatter.xml" xlink:role="class">QValue3DAxisFormatter</db:link>, <db:link xlink:href="qvideosink.xml" xlink:role="class">QVideoSink</db:link>, <db:link xlink:href="qvirtualkeyboardabstractinputmethod.xml" xlink:role="class">QVirtualKeyboardAbstractInputMethod</db:link>, <db:link xlink:href="qvirtualkeyboarddictionary.xml" xlink:role="class">QVirtualKeyboardDictionary</db:link>, <db:link xlink:href="qvirtualkeyboarddictionarymanager.xml" xlink:role="class">QVirtualKeyboardDictionaryManager</db:link>, <db:link xlink:href="qvirtualkeyboardinputcontext.xml" xlink:role="class">QVirtualKeyboardInputContext</db:link>, <db:link xlink:href="qvirtualkeyboardinputengine.xml" xlink:role="class">QVirtualKeyboardInputEngine</db:link>, <db:link xlink:href="qvirtualkeyboardobserver.xml" xlink:role="class">QVirtualKeyboardObserver</db:link>, <db:link xlink:href="qvirtualkeyboardtrace.xml" xlink:role="class">QVirtualKeyboardTrace</db:link>, <db:link xlink:href="qwebchannel.xml" xlink:role="class">QWebChannel</db:link>, <db:link xlink:href="qwebchannelabstracttransport.xml" xlink:role="class">QWebChannelAbstractTransport</db:link>, <db:link xlink:href="qwebenginecontextmenurequest.xml" xlink:role="class">QWebEngineContextMenuRequest</db:link>, <db:link xlink:href="qwebenginecookiestore.xml" xlink:role="class">QWebEngineCookieStore</db:link>, <db:link xlink:href="qwebenginedownloadrequest.xml" xlink:role="class">QWebEngineDownloadRequest</db:link>, <db:link xlink:href="qwebenginehistory.xml" xlink:role="class">QWebEngineHistory</db:link>, <db:link xlink:href="qwebenginenavigationrequest.xml" xlink:role="class">QWebEngineNavigationRequest</db:link>, <db:link xlink:href="qwebenginenewwindowrequest.xml" xlink:role="class">QWebEngineNewWindowRequest</db:link>, <db:link xlink:href="qwebenginenotification.xml" xlink:role="class">QWebEngineNotification</db:link>, <db:link xlink:href="qwebenginepage.xml" xlink:role="class">QWebEnginePage</db:link>, <db:link xlink:href="qwebengineprofile.xml" xlink:role="class">QWebEngineProfile</db:link>, <db:link xlink:href="qwebengineurlrequestinterceptor.xml" xlink:role="class">QWebEngineUrlRequestInterceptor</db:link>, <db:link xlink:href="qwebengineurlrequestjob.xml" xlink:role="class">QWebEngineUrlRequestJob</db:link>, <db:link xlink:href="qwebengineurlschemehandler.xml" xlink:role="class">QWebEngineUrlSchemeHandler</db:link>, <db:link xlink:href="qwebenginewebauthuxrequest.xml" xlink:role="class">QWebEngineWebAuthUxRequest</db:link>, <db:link xlink:href="qwebsocket.xml" xlink:role="class">QWebSocket</db:link>, <db:link xlink:href="qwebsocketserver.xml" xlink:role="class">QWebSocketServer</db:link>, <db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link>, <db:link xlink:href="qwindow.xml" xlink:role="class">QWindow</db:link>, <db:link xlink:href="qwindowcapture.xml" xlink:role="class">QWindowCapture</db:link>, and <db:link xlink:href="qwineventnotifier.xml" xlink:role="class">QWinEventNotifier</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QObject is part of <db:simplelist><db:member>objectmodel</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qobject.xml">QObject</db:link> is the heart of the Qt <db:link xlink:href="object.xml">Object Model</db:link>. The central feature in this model is a very powerful mechanism for seamless object communication called <db:link xlink:href="signalsandslots.xml">signals and slots</db:link>. You can connect a signal to a slot with <db:link xlink:href="qobject.xml#connect">connect</db:link>() and destroy the connection with <db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>(). To avoid never ending notification loops you can temporarily block signals with <db:link xlink:href="qobject.xml#blockSignals">blockSignals</db:link>(). The protected functions <db:link xlink:href="qobject.xml#connectNotify">connectNotify</db:link>() and <db:link xlink:href="qobject.xml#disconnectNotify">disconnectNotify</db:link>() make it possible to track connections.</db:para>
<db:para>QObjects organize themselves in <db:link xlink:href="objecttrees.xml">object trees</db:link>. When you create a <db:link xlink:href="qobject.xml">QObject</db:link> with another object as parent, the object will automatically add itself to the parent's <db:link xlink:href="qobject.xml#children">children</db:link>() list. The parent takes ownership of the object; i.e., it will automatically delete its children in its destructor. You can look for an object by name and optionally type using <db:link xlink:href="qobject.xml#findChild">findChild</db:link>() or <db:link xlink:href="qobject.xml#findChildren">findChildren</db:link>().</db:para>
<db:para>Every object has an <db:link xlink:href="qobject.xml#objectName-prop">objectName</db:link>() and its class name can be found via the corresponding <db:link xlink:href="qobject.xml#metaObject">metaObject</db:link>() (see <db:link xlink:href="qmetaobject.xml#className">QMetaObject::className</db:link>()). You can determine whether the object's class inherits another class in the <db:link xlink:href="qobject.xml">QObject</db:link> inheritance hierarchy by using the <db:link xlink:href="qobject.xml#inherits">inherits</db:link>() function.</db:para>
<db:para>When an object is deleted, it emits a <db:link xlink:href="qobject.xml#destroyed">destroyed</db:link>() signal. You can catch this signal to avoid dangling references to QObjects.</db:para>
<db:para>QObjects can receive events through <db:link xlink:href="qobject.xml#event">event</db:link>() and filter the events of other objects. See <db:link xlink:href="qobject.xml#installEventFilter">installEventFilter</db:link>() and <db:link xlink:href="qobject.xml#eventFilter">eventFilter</db:link>() for details. A convenience handler, <db:link xlink:href="qobject.xml#childEvent">childEvent</db:link>(), can be reimplemented to catch child events.</db:para>
<db:para>Last but not least, <db:link xlink:href="qobject.xml">QObject</db:link> provides the basic timer support in Qt; see <db:link xlink:href="qtimer.xml">QTimer</db:link> for high-level support for timers.</db:para>
<db:para>Notice that the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro is mandatory for any object that implements signals, slots or properties. You also need to run the <db:link xlink:href="moc.xml">Meta Object Compiler</db:link> on the source file. We strongly recommend the use of this macro in all subclasses of <db:link xlink:href="qobject.xml">QObject</db:link> regardless of whether or not they actually use signals, slots and properties, since failure to do so may lead certain functions to exhibit strange behavior.</db:para>
<db:para>All Qt widgets inherit <db:link xlink:href="qobject.xml">QObject</db:link>. The convenience function <db:link xlink:href="qobject.xml#isWidgetType">isWidgetType</db:link>() returns whether an object is actually a widget. It is much faster than <db:link xlink:href="qobject.xml#qobject_cast">qobject_cast</db:link>&lt;<db:link xlink:href="qwidget.xml">QWidget</db:link> *&gt;(<db:emphasis>obj</db:emphasis>) or <db:emphasis>obj</db:emphasis>-&gt;<db:link xlink:href="qobject.xml#inherits">inherits</db:link>(&quot;<db:link xlink:href="qwidget.xml">QWidget</db:link>&quot;).</db:para>
<db:para>Some <db:link xlink:href="qobject.xml">QObject</db:link> functions, e.g. <db:link xlink:href="qobject.xml#children">children</db:link>(), return a <db:link xlink:href="qobject.xml#QObjectList-typedef">QObjectList</db:link>. <db:link xlink:href="qobject.xml#QObjectList-typedef">QObjectList</db:link> is a typedef for <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qobject.xml">QObject</db:link> *&gt;.</db:para>
<db:section xml:id="thread-affinity">
<db:title>Thread Affinity</db:title>
<db:para>A <db:link xlink:href="qobject.xml">QObject</db:link> instance is said to have a <db:emphasis>thread affinity</db:emphasis>, or that it <db:emphasis>lives</db:emphasis> in a certain thread. When a <db:link xlink:href="qobject.xml">QObject</db:link> receives a <db:link xlink:href="qt.xml#ConnectionType-enum">queued signal</db:link> or a <db:link xlink:href="eventsandfilters.xml#sending-events">posted event</db:link>, the slot or event handler will run in the thread that the object lives in.</db:para>
<db:note>
<db:para>If a <db:link xlink:href="qobject.xml">QObject</db:link> has no thread affinity (that is, if <db:link xlink:href="qobject.xml#thread">thread</db:link>() returns zero), or if it lives in a thread that has no running event loop, then it cannot receive queued signals or posted events.</db:para>
</db:note>
<db:para>By default, a <db:link xlink:href="qobject.xml">QObject</db:link> lives in the thread in which it is created. An object's thread affinity can be queried using <db:link xlink:href="qobject.xml#thread">thread</db:link>() and changed using <db:link xlink:href="qobject.xml#moveToThread">moveToThread</db:link>().</db:para>
<db:para>All QObjects must live in the same thread as their parent. Consequently:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml#setParent">setParent</db:link>() will fail if the two QObjects involved live in different threads.</db:para>
</db:listitem>
<db:listitem>
<db:para>When a <db:link xlink:href="qobject.xml">QObject</db:link> is moved to another thread, all its children will be automatically moved too.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml#moveToThread">moveToThread</db:link>() will fail if the <db:link xlink:href="qobject.xml">QObject</db:link> has a parent.</db:para>
</db:listitem>
<db:listitem>
<db:para>If QObjects are created within <db:link xlink:href="qthread.xml#run">QThread::run</db:link>(), they cannot become children of the <db:link xlink:href="qthread.xml">QThread</db:link> object because the <db:link xlink:href="qthread.xml">QThread</db:link> does not live in the thread that calls <db:link xlink:href="qthread.xml#run">QThread::run</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>A <db:link xlink:href="qobject.xml">QObject</db:link>'s member variables <db:emphasis>do not</db:emphasis> automatically become its children. The parent-child relationship must be set by either passing a pointer to the child's <db:link xlink:href="qobject.xml#QObject">constructor</db:link>, or by calling <db:link xlink:href="qobject.xml#setParent">setParent</db:link>(). Without this step, the object's member variables will remain in the old thread when <db:link xlink:href="qobject.xml#moveToThread">moveToThread</db:link>() is called.</db:para>
</db:note>
<db:anchor xml:id="no-copy-constructor"/>
</db:section>
<db:section xml:id="no-copy-constructor-or-assignment-operator">
<db:title>No Copy Constructor or Assignment Operator</db:title>
<db:para><db:link xlink:href="qobject.xml">QObject</db:link> has neither a copy constructor nor an assignment operator. This is by design. Actually, they are declared, but in a private section with the macro <db:link xlink:href="qtclasshelpermacros-proxy.xml#Q_DISABLE_COPY">Q_DISABLE_COPY</db:link>(). In fact, all Qt classes derived from <db:link xlink:href="qobject.xml">QObject</db:link> (direct or indirect) use this macro to declare their copy constructor and assignment operator to be private. The reasoning is found in the discussion on <db:link xlink:href="object.xml#identity-vs-value">Identity vs Value</db:link> on the Qt <db:link xlink:href="object.xml">Object Model</db:link> page.</db:para>
<db:para>The main consequence is that you should use pointers to <db:link xlink:href="qobject.xml">QObject</db:link> (or to your <db:link xlink:href="qobject.xml">QObject</db:link> subclass) where you might otherwise be tempted to use your <db:link xlink:href="qobject.xml">QObject</db:link> subclass as a value. For example, without a copy constructor, you can't use a subclass of <db:link xlink:href="qobject.xml">QObject</db:link> as the value to be stored in one of the container classes. You must store pointers.</db:para>
</db:section>
<db:section xml:id="auto-connection">
<db:title>Auto-Connection</db:title>
<db:para>Qt's meta-object system provides a mechanism to automatically connect signals and slots between <db:link xlink:href="qobject.xml">QObject</db:link> subclasses and their children. As long as objects are defined with suitable object names, and slots follow a simple naming convention, this connection can be performed at run-time by the <db:link xlink:href="qmetaobject.xml#connectSlotsByName">QMetaObject::connectSlotsByName</db:link>() function.</db:para>
<db:para><db:link xlink:href="uic.xml">uic</db:link> generates code that invokes this function to enable auto-connection to be performed between widgets on forms created with <db:emphasis>Qt Designer</db:emphasis>. More information about using auto-connection with <db:emphasis>Qt Designer</db:emphasis> is given in the <db:link xlink:href="designer-using-a-ui-file.xml">Using a Designer UI File in Your Application</db:link> section of the <db:emphasis>Qt Designer</db:emphasis> manual.</db:para>
</db:section>
<db:section xml:id="dynamic-properties">
<db:title>Dynamic Properties</db:title>
<db:para>Dynamic properties can be added to and removed from <db:link xlink:href="qobject.xml">QObject</db:link> instances at run-time. Dynamic properties do not need to be declared at compile-time, yet they provide the same advantages as static properties and are manipulated using the same API - using <db:link xlink:href="qobject.xml#property">property</db:link>() to read them and <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>() to write them.</db:para>
<db:para>Dynamic properties are supported by <db:link xlink:href="designer-widget-mode.xml#the-property-editor">Qt Designer</db:link>, and both standard Qt widgets and user-created forms can be given dynamic properties.</db:para>
</db:section>
<db:section xml:id="internationalization-i18n">
<db:title>Internationalization (I18n)</db:title>
<db:para>All <db:link xlink:href="qobject.xml">QObject</db:link> subclasses support Qt's translation features, making it possible to translate an application's user interface into different languages.</db:para>
<db:para>To make user-visible text translatable, it must be wrapped in calls to the <db:link xlink:href="qobject.xml#tr">tr</db:link>() function. This is explained in detail in the <db:link xlink:href="i18n-source-translation.xml">Writing Source Code for Translation</db:link> document.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml">QMetaObject</db:link></db:member>
<db:member><db:link xlink:href="qpointer.xml">QPointer</db:link></db:member>
<db:member><db:link xlink:href="qobjectcleanuphandler.xml">QObjectCleanupHandler</db:link></db:member>
<db:member><db:link xlink:href="qtclasshelpermacros-proxy.xml#Q_DISABLE_COPY">Q_DISABLE_COPY</db:link>()</db:member>
<db:member><db:link xlink:href="objecttrees.xml">Object Trees &amp; Ownership</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="objectName-prop">
<db:title>[bindable] objectName : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>objectName</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">objectName</db:synopsisinfo>
<db:synopsisinfo role="setter">setObjectName</db:synopsisinfo>
<db:synopsisinfo role="setter">setObjectName</db:synopsisinfo>
<db:synopsisinfo role="notifier">objectNameChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the name of this object</db:para>
<db:para>You can find an object by name (and type) using <db:link xlink:href="qobject.xml#findChild">findChild</db:link>(). You can find a set of objects with <db:link xlink:href="qobject.xml#findChildren">findChildren</db:link>().</db:para>
<db:programlisting language="cpp">qDebug(&quot;MyClass::setPrecision(): (%s) invalid precision %f&quot;,
       qPrintable(objectName()), newPrecision);
</db:programlisting>
<db:para>By default, this property contains an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#metaObject">metaObject</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#className">QMetaObject::className</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QObject">
<db:title>[explicit] QObject::QObject(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QObject</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an object with parent object <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The parent of an object may be viewed as the object's owner. For instance, a <db:link xlink:href="qdialog.xml">dialog box</db:link> is the parent of the <db:guilabel>OK</db:guilabel> and <db:guilabel>Cancel</db:guilabel> buttons it contains.</db:para>
<db:para>The destructor of a parent object destroys all child objects.</db:para>
<db:para>Setting <db:code role="parameter">parent</db:code> to nullptr constructs an object with no parent. If the object is a widget, it will become a top-level window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#parent">parent</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#findChild">findChild</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#findChildren">findChildren</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QObject">
<db:title>[virtual] QObject::~QObject()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QObject()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the object, deleting all its child objects.</db:para>
<db:para>All signals to and from the object are automatically disconnected, and any pending posted events for the object are removed from the event queue. However, it is often safer to use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() rather than deleting a <db:link xlink:href="qobject.xml">QObject</db:link> subclass directly.</db:para>
<db:warning>
<db:para>All child objects are deleted. If any of these objects are on the stack or global, sooner or later your program will crash. We do not recommend holding pointers to child objects from outside the parent. If you still do, the <db:link xlink:href="qobject.xml#destroyed">destroyed</db:link>() signal gives you an opportunity to detect when an object is destroyed.</db:para>
</db:warning>
<db:warning>
<db:para>Deleting a <db:link xlink:href="qobject.xml">QObject</db:link> while it is handling an event delivered to it can cause a crash. You must not delete the <db:link xlink:href="qobject.xml">QObject</db:link> directly if it exists in a different thread than the one currently executing. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead, which will cause the event loop to delete the object after all pending events have been delivered to it.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockSignals">
<db:title>bool QObject::blockSignals(bool <db:emphasis>block</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>blockSignals</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>block</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool blockSignals(bool block)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">block</db:code> is true, signals emitted by this object are blocked (i.e., emitting a signal will not invoke anything connected to it). If <db:code role="parameter">block</db:code> is false, no such blocking will occur.</db:para>
<db:para>The return value is the previous value of <db:link xlink:href="qobject.xml#signalsBlocked">signalsBlocked</db:link>().</db:para>
<db:para>Note that the <db:link xlink:href="qobject.xml#destroyed">destroyed</db:link>() signal will be emitted even if the signals for this object have been blocked.</db:para>
<db:para>Signals emitted while being blocked are not buffered.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#signalsBlocked">signalsBlocked</db:link>()</db:member>
<db:member><db:link xlink:href="qsignalblocker.xml">QSignalBlocker</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childEvent">
<db:title>[virtual protected] void QObject::childEvent(QChildEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>childEvent</db:methodname>
<db:methodparam>
<db:type>QChildEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void childEvent(QChildEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler can be reimplemented in a subclass to receive child events. The event is passed in the <db:code role="parameter">event</db:code> parameter.</db:para>
<db:para><db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildAdded</db:link> and <db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildRemoved</db:link> events are sent to objects when children are added or removed. In both cases you can only rely on the child being a <db:link xlink:href="qobject.xml">QObject</db:link>, or if <db:link xlink:href="qobject.xml#isWidgetType">isWidgetType</db:link>() returns true, a <db:link xlink:href="qwidget.xml">QWidget</db:link>. (This is because, in the <db:link xlink:href="qevent.xml#Type-enum">ChildAdded</db:link> case, the child is not yet fully constructed, and in the <db:link xlink:href="qevent.xml#Type-enum">ChildRemoved</db:link> case it might have been destructed already).</db:para>
<db:para><db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildPolished</db:link> events are sent to widgets when children are polished, or when polished children are added. If you receive a child polished event, the child's construction is usually completed. However, this is not guaranteed, and multiple polish events may be delivered during the execution of a widget's constructor.</db:para>
<db:para>For every child widget, you receive one <db:link xlink:href="qevent.xml#Type-enum">ChildAdded</db:link> event, zero or more <db:link xlink:href="qevent.xml#Type-enum">ChildPolished</db:link> events, and one <db:link xlink:href="qevent.xml#Type-enum">ChildRemoved</db:link> event.</db:para>
<db:para>The <db:link xlink:href="qevent.xml#Type-enum">ChildPolished</db:link> event is omitted if a child is removed immediately after it is added. If a child is polished several times during construction and destruction, you may receive several child polished events for the same child, each time with a different virtual table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#event">event</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="children">
<db:title>const QObjectList &amp;QObject::children() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QObjectList &amp;</db:type>
<db:methodname>children</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QObjectList &amp; children() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of child objects. The <db:link xlink:href="qobject.xml#QObjectList-typedef">QObjectList</db:link> class is defined in the &lt;QObject&gt; header file as the following:</db:para>
<db:programlisting language="cpp">typedef QList&amp;lt;QObject*&amp;gt; QObjectList;
</db:programlisting>
<db:para>The first child added is the <db:link xlink:href="qlist.xml#first">first</db:link> object in the list and the last child added is the <db:link xlink:href="qlist.xml#last">last</db:link> object in the list, i.e. new children are appended at the end.</db:para>
<db:para>Note that the list order changes when <db:link xlink:href="qwidget.xml">QWidget</db:link> children are <db:link xlink:href="qwidget.xml#raise">raised</db:link> or <db:link xlink:href="qwidget.xml#lower">lowered</db:link>. A widget that is raised becomes the last object in the list, and a widget that is lowered becomes the first object in the list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#findChild">findChild</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#findChildren">findChildren</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#parent">parent</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#setParent">setParent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connect">
<db:title>[static] QMetaObject::Connection QObject::connect(const QObject *<db:emphasis>sender</db:emphasis>, const char *<db:emphasis>signal</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>method</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis> = Qt::AutoConnection)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMetaObject::Connection</db:type>
<db:methodname>connect</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ConnectionType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Qt::AutoConnection</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaObject::Connection connect(const QObject *sender, const char *signal, const QObject *receiver, const char *method, Qt::ConnectionType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a connection of the given <db:code role="parameter">type</db:code> from the <db:code role="parameter">signal</db:code> in the <db:code role="parameter">sender</db:code> object to the <db:code role="parameter">method</db:code> in the <db:code role="parameter">receiver</db:code> object. Returns a handle to the connection that can be used to disconnect it later.</db:para>
<db:para>You must use the SIGNAL() and SLOT() macros when specifying the <db:code role="parameter">signal</db:code> and the <db:code role="parameter">method</db:code>, for example:</db:para>
<db:programlisting language="cpp">QLabel *label = new QLabel;
QScrollBar *scrollBar = new QScrollBar;
QObject::connect(scrollBar, SIGNAL(valueChanged(int)),
                 label,  SLOT(setNum(int)));
</db:programlisting>
<db:para>This example ensures that the label always displays the current scroll bar value. Note that the signal and slots parameters must not contain any variable names, only the type. E.g. the following would not work and return false:</db:para>
<db:programlisting language="cpp">// WRONG
QObject::connect(scrollBar, SIGNAL(valueChanged(int value)),
                 label, SLOT(setNum(int value)));
</db:programlisting>
<db:para>A signal can also be connected to another signal:</db:para>
<db:programlisting language="cpp">class MyWidget : public QWidget
{
    Q_OBJECT

public:
    MyWidget();

signals:
    void buttonClicked();

private:
    QPushButton *myButton;
};

MyWidget::MyWidget()
{
    myButton = new QPushButton(this);
    connect(myButton, SIGNAL(clicked()),
            this, SIGNAL(buttonClicked()));
}
</db:programlisting>
<db:para>In this example, the MyWidget constructor relays a signal from a private member variable, and makes it available under a name that relates to MyWidget.</db:para>
<db:para>A signal can be connected to many slots and signals. Many signals can be connected to one slot.</db:para>
<db:para>If a signal is connected to several slots, the slots are activated in the same order in which the connections were made, when the signal is emitted.</db:para>
<db:para>The function returns a <db:link xlink:href="qmetaobject-connection.xml">QMetaObject::Connection</db:link> that represents a handle to a connection if it successfully connects the signal to the slot. The connection handle will be invalid if it cannot create the connection, for example, if <db:link xlink:href="qobject.xml">QObject</db:link> is unable to verify the existence of either <db:code role="parameter">signal</db:code> or <db:code role="parameter">method</db:code>, or if their signatures aren't compatible. You can check if the handle is valid by casting it to a bool.</db:para>
<db:para>By default, a signal is emitted for every connection you make; two signals are emitted for duplicate connections. You can break all of these connections with a single <db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>() call. If you pass the <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::UniqueConnection</db:link> <db:code role="parameter">type</db:code>, the connection will only be made if it is not a duplicate. If there is already a duplicate (exact same signal to the exact same slot on the same objects), the connection will fail and connect will return an invalid <db:link xlink:href="qmetaobject-connection.xml">QMetaObject::Connection</db:link>.</db:para>
<db:note>
<db:para>Qt::UniqueConnections do not work for lambdas, non-member functions and functors; they only apply to connecting to member functions.</db:para>
</db:note>
<db:para>The optional <db:code role="parameter">type</db:code> parameter describes the type of connection to establish. In particular, it determines whether a particular signal is delivered to a slot immediately or queued for delivery at a later time. If the signal is queued, the parameters must be of types that are known to Qt's meta-object system, because Qt needs to copy the arguments to store them in an event behind the scenes. If you try to use a queued connection and get the error message</db:para>
<db:programlisting language="cpp">QObject::connect: Cannot queue arguments of type 'MyType'
(Make sure 'MyType' is registered using qRegisterMetaType().)
</db:programlisting>
<db:para>call <db:link xlink:href="qmetatype.xml#qRegisterMetaType-3">qRegisterMetaType</db:link>() to register the data type before you establish the connection.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#sender">sender</db:link>()</db:member>
<db:member><db:link xlink:href="qmetatype.xml#qRegisterMetaType-3">qRegisterMetaType</db:link>()</db:member>
<db:member><db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>()</db:member>
<db:member><db:link xlink:href="signalsandslots-syntaxes.xml">Differences between String-Based and Functor-Based Connections</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connect-1">
<db:title>[static] QMetaObject::Connection QObject::connect(const QObject *<db:emphasis>sender</db:emphasis>, const QMetaMethod &amp;<db:emphasis>signal</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const QMetaMethod &amp;<db:emphasis>method</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis> = Qt::AutoConnection)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMetaObject::Connection</db:type>
<db:methodname>connect</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMetaMethod &amp;</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMetaMethod &amp;</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ConnectionType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Qt::AutoConnection</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaObject::Connection connect(const QObject *sender, const QMetaMethod &amp;signal, const QObject *receiver, const QMetaMethod &amp;method, Qt::ConnectionType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a connection of the given <db:code role="parameter">type</db:code> from the <db:code role="parameter">signal</db:code> in the <db:code role="parameter">sender</db:code> object to the <db:code role="parameter">method</db:code> in the <db:code role="parameter">receiver</db:code> object. Returns a handle to the connection that can be used to disconnect it later.</db:para>
<db:para>The Connection handle will be invalid if it cannot create the connection, for example, the parameters were invalid. You can check if the <db:link xlink:href="qmetaobject-connection.xml">QMetaObject::Connection</db:link> is valid by casting it to a bool.</db:para>
<db:para>This function works in the same way as connect(const QObject *sender, const char *signal, const QObject *receiver, const char *method, Qt::ConnectionType type) but it uses <db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link> to specify signal and method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#connect">connect</db:link>(const QObject *sender, const char *signal, const QObject *receiver, const char *method, Qt::ConnectionType type)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connect-2">
<db:title>QMetaObject::Connection QObject::connect(const QObject *<db:emphasis>sender</db:emphasis>, const char *<db:emphasis>signal</db:emphasis>, const char *<db:emphasis>method</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis> = Qt::AutoConnection) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMetaObject::Connection</db:type>
<db:methodname>connect</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ConnectionType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Qt::AutoConnection</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaObject::Connection connect(const QObject *sender, const char *signal, const char *method, Qt::ConnectionType type) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qobject.xml#connect">connect</db:link>().</db:para>
<db:para>Connects <db:code role="parameter">signal</db:code> from the <db:code role="parameter">sender</db:code> object to this object's <db:code role="parameter">method</db:code>.</db:para>
<db:para>Equivalent to connect(<db:code role="parameter">sender</db:code>, <db:code role="parameter">signal</db:code>, this, <db:code role="parameter">method</db:code>, <db:code role="parameter">type</db:code>).</db:para>
<db:para>Every connection you make emits a signal, so duplicate connections emit two signals. You can break a connection using <db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>().</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connect-3">
<db:title>[static] QMetaObject::Connection QObject::connect(const QObject *<db:emphasis>sender</db:emphasis>, PointerToMemberFunction <db:emphasis>signal</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, PointerToMemberFunction <db:emphasis>method</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis> = Qt::AutoConnection)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMetaObject::Connection</db:type>
<db:methodname>connect</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>PointerToMemberFunction</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>PointerToMemberFunction</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ConnectionType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Qt::AutoConnection</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaObject::Connection connect(const QObject *sender, PointerToMemberFunction signal, const QObject *receiver, PointerToMemberFunction method, Qt::ConnectionType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qobject.xml#connect">connect</db:link>().</db:para>
<db:para>Creates a connection of the given <db:code role="parameter">type</db:code> from the <db:code role="parameter">signal</db:code> in the <db:code role="parameter">sender</db:code> object to the <db:code role="parameter">method</db:code> in the <db:code role="parameter">receiver</db:code> object. Returns a handle to the connection that can be used to disconnect it later.</db:para>
<db:para>The signal must be a function declared as a signal in the header. The slot function can be any member function that can be connected to the signal. A slot can be connected to a given signal if the signal has at least as many arguments as the slot, and there is an implicit conversion between the types of the corresponding arguments in the signal and the slot.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QLabel *label = new QLabel;
QLineEdit *lineEdit = new QLineEdit;
QObject::connect(lineEdit, &amp;amp;QLineEdit::textChanged,
                 label,  &amp;amp;QLabel::setText);
</db:programlisting>
<db:para>This example ensures that the label always displays the current line edit text.</db:para>
<db:para>A signal can be connected to many slots and signals. Many signals can be connected to one slot.</db:para>
<db:para>If a signal is connected to several slots, the slots are activated in the same order as the order the connection was made, when the signal is emitted</db:para>
<db:para>The function returns an handle to a connection if it successfully connects the signal to the slot. The Connection handle will be invalid if it cannot create the connection, for example, if <db:link xlink:href="qobject.xml">QObject</db:link> is unable to verify the existence of <db:code role="parameter">signal</db:code> (if it was not declared as a signal) You can check if the <db:link xlink:href="qmetaobject-connection.xml">QMetaObject::Connection</db:link> is valid by casting it to a bool.</db:para>
<db:para>By default, a signal is emitted for every connection you make; two signals are emitted for duplicate connections. You can break all of these connections with a single <db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>() call. If you pass the <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::UniqueConnection</db:link> <db:code role="parameter">type</db:code>, the connection will only be made if it is not a duplicate. If there is already a duplicate (exact same signal to the exact same slot on the same objects), the connection will fail and connect will return an invalid <db:link xlink:href="qmetaobject-connection.xml">QMetaObject::Connection</db:link>.</db:para>
<db:para>The optional <db:code role="parameter">type</db:code> parameter describes the type of connection to establish. In particular, it determines whether a particular signal is delivered to a slot immediately or queued for delivery at a later time. If the signal is queued, the parameters must be of types that are known to Qt's meta-object system, because Qt needs to copy the arguments to store them in an event behind the scenes. If you try to use a queued connection and get the error message</db:para>
<db:programlisting language="cpp">QObject::connect: Cannot queue arguments of type 'MyType'
(Make sure 'MyType' is registered using qRegisterMetaType().)
</db:programlisting>
<db:para>make sure to declare the argument type with <db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link></db:para>
<db:para>Overloaded functions can be resolved with help of <db:link xlink:href="qoverload-proxy.xml#qOverload">qOverload</db:link>.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="signalsandslots-syntaxes.xml">Differences between String-Based and Functor-Based Connections</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connect-4">
<db:title>[static] QMetaObject::Connection QObject::connect(const QObject *<db:emphasis>sender</db:emphasis>, PointerToMemberFunction <db:emphasis>signal</db:emphasis>, Functor <db:emphasis>functor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMetaObject::Connection</db:type>
<db:methodname>connect</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>PointerToMemberFunction</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaObject::Connection connect(const QObject *sender, PointerToMemberFunction signal, Functor functor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qobject.xml#connect">connect</db:link>().</db:para>
<db:para>Creates a connection from <db:code role="parameter">signal</db:code> in <db:code role="parameter">sender</db:code> object to <db:code role="parameter">functor</db:code>, and returns a handle to the connection</db:para>
<db:para>The signal must be a function declared as a signal in the header. The slot function can be any function or functor that can be connected to the signal. A slot function can be connected to a given signal if the signal has at least as many arguments as the slot function. There must exist implicit conversion between the types of the corresponding arguments in the signal and the slot.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void someFunction();
QPushButton *button = new QPushButton;
QObject::connect(button, &amp;amp;QPushButton::clicked, someFunction);
</db:programlisting>
<db:para>Lambda expressions can also be used:</db:para>
<db:programlisting language="cpp">QByteArray page = ...;
QTcpSocket *socket = new QTcpSocket;
socket-&amp;gt;connectToHost(&quot;qt-project.org&quot;, 80);
QObject::connect(socket, &amp;amp;QTcpSocket::connected, [=] () {
        socket-&amp;gt;write(&quot;GET &quot; + page + &quot;\r\n&quot;);
    });
</db:programlisting>
<db:para>The connection will automatically disconnect if the sender is destroyed. However, you should take care that any objects used within the functor are still alive when the signal is emitted.</db:para>
<db:para>For this reason, it is recommended to use the overload of <db:link xlink:href="qobject.xml#connect">connect</db:link>() that also takes a <db:link xlink:href="qobject.xml">QObject</db:link> as a receiver/context. It is possible to disable the usage of the context-less overload by defining the QT_NO_CONTEXTLESS_CONNECT macro.</db:para>
<db:para>Overloaded functions can be resolved with help of <db:link xlink:href="qoverload-proxy.xml#qOverload">qOverload</db:link>.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="connect-5">
<db:title>[static] QMetaObject::Connection QObject::connect(const QObject *<db:emphasis>sender</db:emphasis>, PointerToMemberFunction <db:emphasis>signal</db:emphasis>, const QObject *<db:emphasis>context</db:emphasis>, Functor <db:emphasis>functor</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis> = Qt::AutoConnection)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMetaObject::Connection</db:type>
<db:methodname>connect</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>PointerToMemberFunction</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ConnectionType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Qt::AutoConnection</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaObject::Connection connect(const QObject *sender, PointerToMemberFunction signal, const QObject *context, Functor functor, Qt::ConnectionType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qobject.xml#connect">connect</db:link>().</db:para>
<db:para>Creates a connection of a given <db:code role="parameter">type</db:code> from <db:code role="parameter">signal</db:code> in <db:code role="parameter">sender</db:code> object to <db:code role="parameter">functor</db:code> to be placed in a specific event loop of <db:code role="parameter">context</db:code>, and returns a handle to the connection.</db:para>
<db:note>
<db:para>Qt::UniqueConnections do not work for lambdas, non-member functions and functors; they only apply to connecting to member functions.</db:para>
</db:note>
<db:para>The signal must be a function declared as a signal in the header. The slot function can be any function or functor that can be connected to the signal. A slot function can be connected to a given signal if the signal has at least as many arguments as the slot function. There must exist implicit conversion between the types of the corresponding arguments in the signal and the slot.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void someFunction();
QPushButton *button = new QPushButton;
QObject::connect(button, &amp;amp;QPushButton::clicked, this, someFunction, Qt::QueuedConnection);
</db:programlisting>
<db:para>Lambda expressions can also be used:</db:para>
<db:programlisting language="cpp">QByteArray page = ...;
QTcpSocket *socket = new QTcpSocket;
socket-&amp;gt;connectToHost(&quot;qt-project.org&quot;, 80);
QObject::connect(socket, &amp;amp;QTcpSocket::connected, this, [=] () {
        socket-&amp;gt;write(&quot;GET &quot; + page + &quot;\r\n&quot;);
    }, Qt::AutoConnection);
</db:programlisting>
<db:para>The connection will automatically disconnect if the sender or the context is destroyed. However, you should take care that any objects used within the functor are still alive when the signal is emitted.</db:para>
<db:para>Overloaded functions can be resolved with help of <db:link xlink:href="qoverload-proxy.xml#qOverload">qOverload</db:link>.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="connectNotify">
<db:title>[virtual protected] void QObject::connectNotify(const QMetaMethod &amp;<db:emphasis>signal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>connectNotify</db:methodname>
<db:methodparam>
<db:type>const QMetaMethod &amp;</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void connectNotify(const QMetaMethod &amp;signal)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called when something has been connected to <db:code role="parameter">signal</db:code> in this object.</db:para>
<db:para>If you want to compare <db:code role="parameter">signal</db:code> with a specific signal, you can use <db:link xlink:href="qmetamethod.xml#fromSignal">QMetaMethod::fromSignal</db:link>() as follows:</db:para>
<db:programlisting language="cpp">if (signal == QMetaMethod::fromSignal(&amp;amp;MyObject::valueChanged)) {
    // signal is valueChanged
}
</db:programlisting>
<db:warning>
<db:para>This function violates the object-oriented principle of modularity. However, it might be useful when you need to perform expensive initialization only if something is connected to a signal.</db:para>
</db:warning>
<db:warning>
<db:para>This function is called from the thread which performs the connection, which may be a different thread from the thread in which this object lives. This function may also be called with a <db:link xlink:href="qobject.xml">QObject</db:link> internal mutex locked. It is therefore not allowed to re-enter any <db:link xlink:href="qobject.xml">QObject</db:link> functions, including <db:link xlink:href="qobject.xml#isSignalConnected">isSignalConnected</db:link>(), from your reimplementation. If you lock a mutex in your reimplementation, make sure that you don't call <db:link xlink:href="qobject.xml">QObject</db:link> functions with that mutex held in other places or it will result in a deadlock.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#connect">connect</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#disconnectNotify">disconnectNotify</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="customEvent">
<db:title>[virtual protected] void QObject::customEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>customEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void customEvent(QEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler can be reimplemented in a subclass to receive custom events. Custom events are user-defined events with a type value at least as large as the <db:link xlink:href="qevent.xml#Type-enum">QEvent::User</db:link> item of the <db:link xlink:href="qevent.xml#Type-enum">QEvent::Type</db:link> enum, and is typically a <db:link xlink:href="qevent.xml">QEvent</db:link> subclass. The event is passed in the <db:code role="parameter">event</db:code> parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#event">event</db:link>()</db:member>
<db:member><db:link xlink:href="qevent.xml">QEvent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deleteLater">
<db:title>void QObject::deleteLater()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deleteLater</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deleteLater()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Schedules this object for deletion.</db:para>
<db:para>The object will be deleted when control returns to the event loop. If the event loop is not running when this function is called (e.g. deleteLater() is called on an object before <db:link xlink:href="qcoreapplication.xml#exec">QCoreApplication::exec</db:link>()), the object will be deleted once the event loop is started. If deleteLater() is called after the main event loop has stopped, the object will not be deleted. If deleteLater() is called on an object that lives in a thread with no running event loop, the object will be destroyed when the thread finishes.</db:para>
<db:para>Note that entering and leaving a new event loop (e.g., by opening a modal dialog) will <db:emphasis>not</db:emphasis> perform the deferred deletion; for the object to be deleted, the control must return to the event loop from which deleteLater() was called. This does not apply to objects deleted while a previous, nested event loop was still running: the Qt event loop will delete those objects as soon as the new nested event loop starts.</db:para>
<db:para>In situations where Qt is not driving the event dispatcher via e.g. <db:link xlink:href="qcoreapplication.xml#exec">QCoreApplication::exec</db:link>() or <db:link xlink:href="qeventloop.xml#exec">QEventLoop::exec</db:link>(), deferred deletes will not be processed automatically. To ensure deferred deletion in this scenario, the following workaround can be used:</db:para>
<db:programlisting language="cpp">const auto *eventDispatcher = QThread::currentThread()-&amp;gt;eventDispatcher();
QObject::connect(eventDispatcher, &amp;amp;QAbstractEventDispatcher::aboutToBlock,
    QThread::currentThread(), []{
        if (QThread::currentThread()-&amp;gt;loopLevel() == 0)
            QCoreApplication::sendPostedEvents(nullptr, QEvent::DeferredDelete);
    }
);
</db:programlisting>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#destroyed">destroyed</db:link>()</db:member>
<db:member><db:link xlink:href="qpointer.xml">QPointer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="destroyed">
<db:title>void QObject::destroyed(QObject *<db:emphasis>obj</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>destroyed</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void destroyed(QObject *obj)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted immediately before the object <db:code role="parameter">obj</db:code> is destroyed, after any instances of <db:link xlink:href="qpointer.xml">QPointer</db:link> have been notified, and cannot be blocked.</db:para>
<db:para>All the objects's children are destroyed immediately after this signal is emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>()</db:member>
<db:member><db:link xlink:href="qpointer.xml">QPointer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnect">
<db:title>[static] bool QObject::disconnect(const QObject *<db:emphasis>sender</db:emphasis>, const char *<db:emphasis>signal</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>method</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>disconnect</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool disconnect(const QObject *sender, const char *signal, const QObject *receiver, const char *method)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disconnects <db:code role="parameter">signal</db:code> in object <db:code role="parameter">sender</db:code> from <db:code role="parameter">method</db:code> in object <db:code role="parameter">receiver</db:code>. Returns true if the connection is successfully broken; otherwise returns false.</db:para>
<db:para>A signal-slot connection is removed when either of the objects involved are destroyed.</db:para>
<db:para>disconnect() is typically used in three ways, as the following examples demonstrate.</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Disconnect everything connected to an object's signals:</db:para>
<db:programlisting language="cpp">disconnect(myObject, nullptr, nullptr, nullptr);
</db:programlisting>
<db:para>equivalent to the non-static overloaded function</db:para>
<db:programlisting language="cpp">myObject-&amp;gt;disconnect();
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Disconnect everything connected to a specific signal:</db:para>
<db:programlisting language="cpp">disconnect(myObject, SIGNAL(mySignal()), nullptr, nullptr);
</db:programlisting>
<db:para>equivalent to the non-static overloaded function</db:para>
<db:programlisting language="cpp">myObject-&amp;gt;disconnect(SIGNAL(mySignal()));
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Disconnect a specific receiver:</db:para>
<db:programlisting language="cpp">disconnect(myObject, nullptr, myReceiver, nullptr);
</db:programlisting>
<db:para>equivalent to the non-static overloaded function</db:para>
<db:programlisting language="cpp">myObject-&amp;gt;disconnect(myReceiver);
</db:programlisting>
</db:listitem>
</db:orderedlist>
<db:para>nullptr may be used as a wildcard, meaning &quot;any signal&quot;, &quot;any receiving object&quot;, or &quot;any slot in the receiving object&quot;, respectively.</db:para>
<db:para>The <db:code role="parameter">sender</db:code> may never be nullptr. (You cannot disconnect signals from more than one object in a single call.)</db:para>
<db:para>If <db:code role="parameter">signal</db:code> is nullptr, it disconnects <db:code role="parameter">receiver</db:code> and <db:code role="parameter">method</db:code> from any signal. If not, only the specified signal is disconnected.</db:para>
<db:para>If <db:code role="parameter">receiver</db:code> is nullptr, it disconnects anything connected to <db:code role="parameter">signal</db:code>. If not, slots in objects other than <db:code role="parameter">receiver</db:code> are not disconnected.</db:para>
<db:para>If <db:code role="parameter">method</db:code> is nullptr, it disconnects anything that is connected to <db:code role="parameter">receiver</db:code>. If not, only slots named <db:code role="parameter">method</db:code> will be disconnected, and all other slots are left alone. The <db:code role="parameter">method</db:code> must be nullptr if <db:code role="parameter">receiver</db:code> is left out, so you cannot disconnect a specifically-named slot on all objects.</db:para>
<db:note>
<db:para>Disconnecting all signal-slot connections will also disconnect the <db:link xlink:href="qobject.xml#destroyed">QObject::destroyed</db:link>() signal if it is connected. Doing so can adversely affect classes that rely on this signal for cleaning up resources. It is recommended to disconnect only the specific signals that were connected by application code.</db:para>
</db:note>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#connect">connect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnect-1">
<db:title>[static] bool QObject::disconnect(const QObject *<db:emphasis>sender</db:emphasis>, const QMetaMethod &amp;<db:emphasis>signal</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const QMetaMethod &amp;<db:emphasis>method</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>disconnect</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMetaMethod &amp;</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMetaMethod &amp;</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool disconnect(const QObject *sender, const QMetaMethod &amp;signal, const QObject *receiver, const QMetaMethod &amp;method)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disconnects <db:code role="parameter">signal</db:code> in object <db:code role="parameter">sender</db:code> from <db:code role="parameter">method</db:code> in object <db:code role="parameter">receiver</db:code>. Returns true if the connection is successfully broken; otherwise returns false.</db:para>
<db:para>This function provides the same possibilities like disconnect(const QObject *sender, const char *signal, const QObject *receiver, const char *method) but uses <db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link> to represent the signal and the method to be disconnected.</db:para>
<db:para>Additionally this function returns false and no signals and slots disconnected if:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para><db:code role="parameter">signal</db:code> is not a member of sender class or one of its parent classes.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">method</db:code> is not a member of receiver class or one of its parent classes.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">signal</db:code> instance represents not a signal.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>QMetaMethod() may be used as wildcard in the meaning &quot;any signal&quot; or &quot;any slot in receiving object&quot;. In the same way nullptr can be used for <db:code role="parameter">receiver</db:code> in the meaning &quot;any receiving object&quot;. In this case method should also be QMetaMethod(). <db:code role="parameter">sender</db:code> parameter should be never nullptr.</db:para>
<db:note>
<db:para>Disconnecting all signal-slot connections will also disconnect the <db:link xlink:href="qobject.xml#destroyed">QObject::destroyed</db:link>() signal if it is connected. Doing so can adversely affect classes that rely on this signal for cleaning up resources. It is recommended to disconnect only the specific signals that were connected by application code.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>(const QObject *sender, const char *signal, const QObject *receiver, const char *method)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnect-2">
<db:title>bool QObject::disconnect(const char *<db:emphasis>signal</db:emphasis> = nullptr, const QObject *<db:emphasis>receiver</db:emphasis> = nullptr, const char *<db:emphasis>method</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>disconnect</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signal</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>receiver</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>method</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool disconnect(const char *signal, const QObject *receiver, const char *method) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>().</db:para>
<db:para>Disconnects <db:code role="parameter">signal</db:code> from <db:code role="parameter">method</db:code> of <db:code role="parameter">receiver</db:code>.</db:para>
<db:para>A signal-slot connection is removed when either of the objects involved are destroyed.</db:para>
<db:note>
<db:para>Disconnecting all signal-slot connections will also disconnect the <db:link xlink:href="qobject.xml#destroyed">QObject::destroyed</db:link>() signal if it is connected. Doing so can adversely affect classes that rely on this signal for cleaning up resources. It is recommended to disconnect only the specific signals that were connected by application code.</db:para>
</db:note>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="disconnect-3">
<db:title>bool QObject::disconnect(const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>method</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>disconnect</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>method</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool disconnect(const QObject *receiver, const char *method) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>().</db:para>
<db:para>Disconnects all signals in this object from <db:code role="parameter">receiver</db:code>'s <db:code role="parameter">method</db:code>.</db:para>
<db:para>A signal-slot connection is removed when either of the objects involved are destroyed.</db:para>
</db:section>
<db:section xml:id="disconnect-4">
<db:title>[static] bool QObject::disconnect(const QMetaObject::Connection &amp;<db:emphasis>connection</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>disconnect</db:methodname>
<db:methodparam>
<db:type>const QMetaObject::Connection &amp;</db:type>
<db:parameter>connection</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool disconnect(const QMetaObject::Connection &amp;connection)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disconnect a connection.</db:para>
<db:para>If the <db:code role="parameter">connection</db:code> is invalid or has already been disconnected, do nothing and return false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#connect">connect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnect-5">
<db:title>[static] bool QObject::disconnect(const QObject *<db:emphasis>sender</db:emphasis>, PointerToMemberFunction <db:emphasis>signal</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, PointerToMemberFunction <db:emphasis>method</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>disconnect</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>PointerToMemberFunction</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>PointerToMemberFunction</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">bool disconnect(const QObject *sender, PointerToMemberFunction signal, const QObject *receiver, PointerToMemberFunction method)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>().</db:para>
<db:para>Disconnects <db:code role="parameter">signal</db:code> in object <db:code role="parameter">sender</db:code> from <db:code role="parameter">method</db:code> in object <db:code role="parameter">receiver</db:code>. Returns true if the connection is successfully broken; otherwise returns false.</db:para>
<db:para>A signal-slot connection is removed when either of the objects involved are destroyed.</db:para>
<db:para><db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>() is typically used in three ways, as the following examples demonstrate.</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Disconnect everything connected to an object's signals:</db:para>
<db:programlisting language="cpp">disconnect(myObject, nullptr, nullptr, nullptr);
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Disconnect everything connected to a specific signal:</db:para>
<db:programlisting language="cpp">disconnect(myObject, &amp;amp;MyObject::mySignal(), nullptr, nullptr);
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Disconnect a specific receiver:</db:para>
<db:programlisting language="cpp">disconnect(myObject, nullptr, myReceiver, nullptr);
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Disconnect a connection from one specific signal to a specific slot:</db:para>
<db:programlisting language="cpp">QObject::disconnect(lineEdit, &amp;amp;QLineEdit::textChanged,
                 label,  &amp;amp;QLabel::setText);
</db:programlisting>
</db:listitem>
</db:orderedlist>
<db:para>nullptr may be used as a wildcard, meaning &quot;any signal&quot;, &quot;any receiving object&quot;, or &quot;any slot in the receiving object&quot;, respectively.</db:para>
<db:para>The <db:code role="parameter">sender</db:code> may never be nullptr. (You cannot disconnect signals from more than one object in a single call.)</db:para>
<db:para>If <db:code role="parameter">signal</db:code> is nullptr, it disconnects <db:code role="parameter">receiver</db:code> and <db:code role="parameter">method</db:code> from any signal. If not, only the specified signal is disconnected.</db:para>
<db:para>If <db:code role="parameter">receiver</db:code> is nullptr, it disconnects anything connected to <db:code role="parameter">signal</db:code>. If not, only slots in the specified receiver are disconnected. <db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>() with a non-null <db:code role="parameter">receiver</db:code> also disconnects slot functions that were connected with <db:code role="parameter">receiver</db:code> as their context object.</db:para>
<db:para>If <db:code role="parameter">method</db:code> is nullptr, it disconnects anything that is connected to <db:code role="parameter">receiver</db:code>. If not, only slots named <db:code role="parameter">method</db:code> will be disconnected, and all other slots are left alone. The <db:code role="parameter">method</db:code> must be nullptr if <db:code role="parameter">receiver</db:code> is left out, so you cannot disconnect a specifically-named slot on all objects.</db:para>
<db:note>
<db:para>It is not possible to use this overload to disconnect signals connected to functors or lambda expressions. That is because it is not possible to compare them. Instead, use the overload that takes a <db:link xlink:href="qmetaobject-connection.xml">QMetaObject::Connection</db:link></db:para>
</db:note>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#connect">connect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnectNotify">
<db:title>[virtual protected] void QObject::disconnectNotify(const QMetaMethod &amp;<db:emphasis>signal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>disconnectNotify</db:methodname>
<db:methodparam>
<db:type>const QMetaMethod &amp;</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void disconnectNotify(const QMetaMethod &amp;signal)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called when something has been disconnected from <db:code role="parameter">signal</db:code> in this object.</db:para>
<db:para>See <db:link xlink:href="qobject.xml#connectNotify">connectNotify</db:link>() for an example of how to compare <db:code role="parameter">signal</db:code> with a specific signal.</db:para>
<db:para>If all signals were disconnected from this object (e.g., the signal argument to <db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>() was nullptr), disconnectNotify() is only called once, and the <db:code role="parameter">signal</db:code> will be an invalid <db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link> (<db:link xlink:href="qmetamethod.xml#isValid">QMetaMethod::isValid</db:link>() returns false).</db:para>
<db:warning>
<db:para>This function violates the object-oriented principle of modularity. However, it might be useful for optimizing access to expensive resources.</db:para>
</db:warning>
<db:warning>
<db:para>This function is called from the thread which performs the disconnection, which may be a different thread from the thread in which this object lives. This function may also be called with a <db:link xlink:href="qobject.xml">QObject</db:link> internal mutex locked. It is therefore not allowed to re-enter any <db:link xlink:href="qobject.xml">QObject</db:link> functions, including <db:link xlink:href="qobject.xml#isSignalConnected">isSignalConnected</db:link>(), from your reimplementation. If you lock a mutex in your reimplementation, make sure that you don't call <db:link xlink:href="qobject.xml">QObject</db:link> functions with that mutex held in other places or it will result in a deadlock.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#disconnect">disconnect</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#connectNotify">connectNotify</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dumpObjectInfo">
<db:title>void QObject::dumpObjectInfo() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>dumpObjectInfo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dumpObjectInfo() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Dumps information about signal connections, etc. for this object to the debug output.</db:para>
<db:note>
<db:para>Before Qt 5.9, this function was not const.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#dumpObjectTree">dumpObjectTree</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dumpObjectTree">
<db:title>void QObject::dumpObjectTree() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>dumpObjectTree</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dumpObjectTree() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Dumps a tree of children to the debug output.</db:para>
<db:note>
<db:para>Before Qt 5.9, this function was not const.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#dumpObjectInfo">dumpObjectInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dynamicPropertyNames">
<db:title>QList&lt;QByteArray&gt; QObject::dynamicPropertyNames() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>dynamicPropertyNames</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; dynamicPropertyNames() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the names of all properties that were dynamically added to the object using <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>().</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[virtual] bool QObject::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function receives events to an object and should return true if the event <db:code role="parameter">e</db:code> was recognized and processed.</db:para>
<db:para>The event() function can be reimplemented to customize the behavior of an object.</db:para>
<db:para>Make sure you call the parent event class implementation for all the events you did not handle.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">class MyClass : public QWidget
{
    Q_OBJECT

public:
    MyClass(QWidget *parent = nullptr);
    ~MyClass();

    bool event(QEvent* ev) override
    {
        if (ev-&amp;gt;type() == QEvent::PolishRequest) {
            // overwrite handling of PolishRequest if any
            doThings();
            return true;
        } else  if (ev-&amp;gt;type() == QEvent::Show) {
            // complement handling of Show if any
            doThings2();
            QWidget::event(ev);
            return true;
        }
        // Make sure the rest of events are handled
        return QWidget::event(ev);
    }
};
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#installEventFilter">installEventFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#sendEvent">QCoreApplication::sendEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#postEvent">QCoreApplication::postEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[virtual] bool QObject::eventFilter(QObject *<db:emphasis>watched</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>eventFilter</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>watched</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool eventFilter(QObject *watched, QEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Filters events if this object has been installed as an event filter for the <db:code role="parameter">watched</db:code> object.</db:para>
<db:para>In your reimplementation of this function, if you want to filter the <db:code role="parameter">event</db:code> out, i.e. stop it being handled further, return true; otherwise return false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
public:
    MainWindow();

protected:
    bool eventFilter(QObject *obj, QEvent *ev) override;

private:
    QTextEdit *textEdit;
};

MainWindow::MainWindow()
{
    textEdit = new QTextEdit;
    setCentralWidget(textEdit);

    textEdit-&amp;gt;installEventFilter(this);
}

bool MainWindow::eventFilter(QObject *obj, QEvent *event)
{
    if (obj == textEdit) {
        if (event-&amp;gt;type() == QEvent::KeyPress) {
            QKeyEvent *keyEvent = static_cast&amp;lt;QKeyEvent*&amp;gt;(event);
            qDebug() &amp;lt;&amp;lt; &quot;Ate key press&quot; &amp;lt;&amp;lt; keyEvent-&amp;gt;key();
            return true;
        } else {
            return false;
        }
    } else {
        // pass the event on to the parent class
        return QMainWindow::eventFilter(obj, event);
    }
}
</db:programlisting>
<db:para>Notice in the example above that unhandled events are passed to the base class's eventFilter() function, since the base class might have reimplemented eventFilter() for its own internal purposes.</db:para>
<db:para>Some events, such as <db:link xlink:href="qevent.xml#Type-enum">QEvent::ShortcutOverride</db:link> must be explicitly accepted (by calling <db:link xlink:href="qevent.xml#accept">accept</db:link>() on them) in order to prevent propagation.</db:para>
<db:warning>
<db:para>If you delete the receiver object in this function, be sure to return true. Otherwise, Qt will forward the event to the deleted object and the program might crash.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#installEventFilter">installEventFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findChild">
<db:title>T QObject::findChild(QAnyStringView <db:emphasis>name</db:emphasis>, Qt::FindChildOptions <db:emphasis>options</db:emphasis> = Qt::FindChildrenRecursively) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>findChild</db:methodname>
<db:methodparam>
<db:type>QAnyStringView</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::FindChildOptions</db:type>
<db:parameter>options</db:parameter>
<db:initializer>Qt::FindChildrenRecursively</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T findChild(QAnyStringView name, Qt::FindChildOptions options) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the child of this object that can be cast into type T and that is called <db:code role="parameter">name</db:code>, or nullptr if there is no such object. A null <db:code role="parameter">name</db:code> argument causes all objects to be matched. An empty, non-null <db:code role="parameter">name</db:code> matches only objects whose <db:link xlink:href="qobject.xml#objectName-prop">objectName</db:link> is empty. The search is performed recursively, unless <db:code role="parameter">options</db:code> specifies the option FindDirectChildrenOnly.</db:para>
<db:para>If there is more than one child matching the search, the most-direct ancestor is returned. If there are several most-direct ancestors, the first child in <db:link xlink:href="qobject.xml#children">children</db:link>() will be returned. In that case, it's better to use <db:link xlink:href="qobject.xml#findChildren">findChildren</db:link>() to get the complete list of all children.</db:para>
<db:para>This example returns a child QPushButton of parentWidget named &quot;button1&quot;, even if the button isn't a direct child of the parent:</db:para>
<db:programlisting language="cpp">QPushButton *button = parentWidget-&amp;gt;findChild&amp;lt;QPushButton *&amp;gt;(&quot;button1&quot;);
</db:programlisting>
<db:para>This example returns a QListWidget child of parentWidget:</db:para>
<db:programlisting language="cpp">QListWidget *list = parentWidget-&amp;gt;findChild&amp;lt;QListWidget *&amp;gt;();
</db:programlisting>
<db:para>This example returns a child QPushButton of parentWidget (its direct parent) named &quot;button1&quot;:</db:para>
<db:programlisting language="cpp">QPushButton *button = parentWidget-&amp;gt;findChild&amp;lt;QPushButton *&amp;gt;(&quot;button1&quot;, Qt::FindDirectChildrenOnly);
</db:programlisting>
<db:para>This example returns a QListWidget child of parentWidget, its direct parent:</db:para>
<db:programlisting language="cpp">QListWidget *list = parentWidget-&amp;gt;findChild&amp;lt;QListWidget *&amp;gt;(Qt::FindDirectChildrenOnly);
</db:programlisting>
<db:note>
<db:para>In Qt versions prior to 6.7, this function took <db:code role="parameter">name</db:code> as QString, not QAnyStringView.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#findChildren">findChildren</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findChild-1">
<db:title>[since 6.7] T QObject::findChild(Qt::FindChildOptions <db:emphasis>options</db:emphasis> = Qt::FindChildrenRecursively) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>findChild</db:methodname>
<db:methodparam>
<db:type>Qt::FindChildOptions</db:type>
<db:parameter>options</db:parameter>
<db:initializer>Qt::FindChildrenRecursively</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">T findChild(Qt::FindChildOptions options) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the child of this object that can be cast into type T, or nullptr if there is no such object. The search is performed recursively, unless <db:code role="parameter">options</db:code> specifies the option FindDirectChildrenOnly.</db:para>
<db:para>If there is more than one child matching the search, the most-direct ancestor is returned. If there are several most-direct ancestors, the first child in <db:link xlink:href="qobject.xml#children">children</db:link>() will be returned. In that case, it's better to use <db:link xlink:href="qobject.xml#findChildren">findChildren</db:link>() to get the complete list of all children.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#findChildren">findChildren</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findChildren">
<db:title>QList&lt;T&gt; QObject::findChildren(QAnyStringView <db:emphasis>name</db:emphasis>, Qt::FindChildOptions <db:emphasis>options</db:emphasis> = Qt::FindChildrenRecursively) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;T&gt;</db:type>
<db:methodname>findChildren</db:methodname>
<db:methodparam>
<db:type>QAnyStringView</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::FindChildOptions</db:type>
<db:parameter>options</db:parameter>
<db:initializer>Qt::FindChildrenRecursively</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;T&gt; findChildren(QAnyStringView name, Qt::FindChildOptions options) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns all children of this object with the given <db:code role="parameter">name</db:code> that can be cast to type T, or an empty list if there are no such objects. A null <db:code role="parameter">name</db:code> argument causes all objects to be matched, an empty one only those whose <db:link xlink:href="qobject.xml#objectName-prop">objectName</db:link> is empty. The search is performed recursively, unless <db:code role="parameter">options</db:code> specifies the option FindDirectChildrenOnly.</db:para>
<db:para>The following example shows how to find a list of child QWidgets of the specified parentWidget named widgetname:</db:para>
<db:programlisting language="cpp">QList&amp;lt;QWidget *&amp;gt; widgets = parentWidget.findChildren&amp;lt;QWidget *&amp;gt;(&quot;widgetname&quot;);
</db:programlisting>
<db:para>This example returns all QPushButtons that are children of parentWidget:</db:para>
<db:programlisting language="cpp">QList&amp;lt;QPushButton *&amp;gt; allPButtons = parentWidget.findChildren&amp;lt;QPushButton *&amp;gt;();
</db:programlisting>
<db:para>This example returns all QPushButtons that are immediate children of parentWidget:</db:para>
<db:programlisting language="cpp">QList&amp;lt;QPushButton *&amp;gt; childButtons = parentWidget.findChildren&amp;lt;QPushButton *&amp;gt;(Qt::FindDirectChildrenOnly);
</db:programlisting>
<db:note>
<db:para>In Qt versions prior to 6.7, this function took <db:code role="parameter">name</db:code> as QString, not QAnyStringView.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#findChild">findChild</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findChildren-1">
<db:title>[since 6.3] QList&lt;T&gt; QObject::findChildren(Qt::FindChildOptions <db:emphasis>options</db:emphasis> = Qt::FindChildrenRecursively) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;T&gt;</db:type>
<db:methodname>findChildren</db:methodname>
<db:methodparam>
<db:type>Qt::FindChildOptions</db:type>
<db:parameter>options</db:parameter>
<db:initializer>Qt::FindChildrenRecursively</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;T&gt; findChildren(Qt::FindChildOptions options) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns all children of this object that can be cast to type T, or an empty list if there are no such objects. The search is performed recursively, unless <db:code role="parameter">options</db:code> specifies the option FindDirectChildrenOnly.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#findChild">findChild</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findChildren-2">
<db:title>QList&lt;T&gt; QObject::findChildren(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, Qt::FindChildOptions <db:emphasis>options</db:emphasis> = Qt::FindChildrenRecursively) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;T&gt;</db:type>
<db:methodname>findChildren</db:methodname>
<db:methodparam>
<db:type>const QRegularExpression &amp;</db:type>
<db:parameter>re</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::FindChildOptions</db:type>
<db:parameter>options</db:parameter>
<db:initializer>Qt::FindChildrenRecursively</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;T&gt; findChildren(const QRegularExpression &amp;re, Qt::FindChildOptions options) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qobject.xml#findChildren">findChildren</db:link>().</db:para>
<db:para>Returns the children of this object that can be cast to type T and that have names matching the regular expression <db:code role="parameter">re</db:code>, or an empty list if there are no such objects. The search is performed recursively, unless <db:code role="parameter">options</db:code> specifies the option FindDirectChildrenOnly.</db:para>
</db:section>
<db:section xml:id="inherits">
<db:title>bool QObject::inherits(const char *<db:emphasis>className</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>inherits</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool inherits(const char *className) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this object is an instance of a class that inherits <db:code role="parameter">className</db:code> or a <db:link xlink:href="qobject.xml">QObject</db:link> subclass that inherits <db:code role="parameter">className</db:code>; otherwise returns false.</db:para>
<db:para>A class is considered to inherit itself.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QTimer *timer = new QTimer;         // QTimer inherits QObject
timer-&amp;gt;inherits(&quot;QTimer&quot;);          // returns true
timer-&amp;gt;inherits(&quot;QObject&quot;);         // returns true
timer-&amp;gt;inherits(&quot;QAbstractButton&quot;); // returns false

// QVBoxLayout inherits QObject and QLayoutItem
QVBoxLayout *layout = new QVBoxLayout;
layout-&amp;gt;inherits(&quot;QObject&quot;);        // returns true
layout-&amp;gt;inherits(&quot;QLayoutItem&quot;);    // returns true (even though QLayoutItem is not a QObject)
</db:programlisting>
<db:para>If you need to determine whether an object is an instance of a particular class for the purpose of casting it, consider using <db:link xlink:href="qobject.xml#qobject_cast">qobject_cast</db:link>&lt;Type *&gt;(object) instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#metaObject">metaObject</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#qobject_cast">qobject_cast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="installEventFilter">
<db:title>void QObject::installEventFilter(QObject *<db:emphasis>filterObj</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>installEventFilter</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>filterObj</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void installEventFilter(QObject *filterObj)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Installs an event filter <db:code role="parameter">filterObj</db:code> on this object. For example:</db:para>
<db:programlisting language="cpp">monitoredObj-&amp;gt;installEventFilter(filterObj);
</db:programlisting>
<db:para>An event filter is an object that receives all events that are sent to this object. The filter can either stop the event or forward it to this object. The event filter <db:code role="parameter">filterObj</db:code> receives events via its <db:link xlink:href="qobject.xml#eventFilter">eventFilter</db:link>() function. The <db:link xlink:href="qobject.xml#eventFilter">eventFilter</db:link>() function must return true if the event should be filtered, (i.e. stopped); otherwise it must return false.</db:para>
<db:para>If multiple event filters are installed on a single object, the filter that was installed last is activated first.</db:para>
<db:para>If <db:code role="parameter">filterObj</db:code> has already been installed for this object, this function moves it so it acts as if it was installed last.</db:para>
<db:para>Here's a KeyPressEater class that eats the key presses of its monitored objects:</db:para>
<db:programlisting language="cpp">class KeyPressEater : public QObject
{
    Q_OBJECT
    ...

protected:
    bool eventFilter(QObject *obj, QEvent *event) override;
};

bool KeyPressEater::eventFilter(QObject *obj, QEvent *event)
{
    if (event-&amp;gt;type() == QEvent::KeyPress) {
        QKeyEvent *keyEvent = static_cast&amp;lt;QKeyEvent *&amp;gt;(event);
        qDebug(&quot;Ate key press %d&quot;, keyEvent-&amp;gt;key());
        return true;
    } else {
        // standard event processing
        return QObject::eventFilter(obj, event);
    }
}
</db:programlisting>
<db:para>And here's how to install it on two widgets:</db:para>
<db:programlisting language="cpp">KeyPressEater *keyPressEater = new KeyPressEater(this);
QPushButton *pushButton = new QPushButton(this);
QListView *listView = new QListView(this);

pushButton-&amp;gt;installEventFilter(keyPressEater);
listView-&amp;gt;installEventFilter(keyPressEater);
</db:programlisting>
<db:para>The <db:link xlink:href="qshortcut.xml">QShortcut</db:link> class, for example, uses this technique to intercept shortcut key presses.</db:para>
<db:warning>
<db:para>If you delete the receiver object in your <db:link xlink:href="qobject.xml#eventFilter">eventFilter</db:link>() function, be sure to return true. If you return false, Qt sends the event to the deleted object and the program will crash.</db:para>
</db:warning>
<db:para>Note that the filtering object must be in the same thread as this object. If <db:code role="parameter">filterObj</db:code> is in a different thread, this function does nothing. If either <db:code role="parameter">filterObj</db:code> or this object are moved to a different thread after calling this function, the event filter will not be called until both objects have the same thread affinity again (it is <db:emphasis>not</db:emphasis> removed).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#removeEventFilter">removeEventFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#eventFilter">eventFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#event">event</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isQuickItemType">
<db:title>[since 6.4] bool QObject::isQuickItemType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isQuickItemType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isQuickItemType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the object is a <db:link xlink:href="qquickitem.xml">QQuickItem</db:link>; otherwise returns false.</db:para>
<db:para>Calling this function is equivalent to calling inherits(&quot;QQuickItem&quot;), except that it is much faster.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="isSignalConnected">
<db:title>[protected] bool QObject::isSignalConnected(const QMetaMethod &amp;<db:emphasis>signal</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSignalConnected</db:methodname>
<db:methodparam>
<db:type>const QMetaMethod &amp;</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSignalConnected(const QMetaMethod &amp;signal) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:code role="parameter">signal</db:code> is connected to at least one receiver, otherwise returns false.</db:para>
<db:para><db:code role="parameter">signal</db:code> must be a signal member of this object, otherwise the behaviour is undefined.</db:para>
<db:programlisting language="cpp">static const QMetaMethod valueChangedSignal = QMetaMethod::fromSignal(&amp;amp;MyObject::valueChanged);
if (isSignalConnected(valueChangedSignal)) {
    QByteArray data;
    data = get_the_value();       // expensive operation
    emit valueChanged(data);
}
</db:programlisting>
<db:para>As the code snippet above illustrates, you can use this function to avoid expensive initialization or emitting a signal that nobody listens to. However, in a multithreaded application, connections might change after this function returns and before the signal gets emitted.</db:para>
<db:warning>
<db:para>This function violates the object-oriented principle of modularity. In particular, this function must not be called from an override of <db:link xlink:href="qobject.xml#connectNotify">connectNotify</db:link>() or <db:link xlink:href="qobject.xml#disconnectNotify">disconnectNotify</db:link>(), as those might get called from any thread.</db:para>
</db:warning>
</db:section>
<db:section xml:id="isWidgetType">
<db:title>bool QObject::isWidgetType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isWidgetType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWidgetType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the object is a widget; otherwise returns false.</db:para>
<db:para>Calling this function is equivalent to calling inherits(&quot;QWidget&quot;), except that it is much faster.</db:para>
</db:section>
<db:section xml:id="isWindowType">
<db:title>bool QObject::isWindowType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isWindowType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWindowType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the object is a window; otherwise returns false.</db:para>
<db:para>Calling this function is equivalent to calling inherits(&quot;QWindow&quot;), except that it is much faster.</db:para>
</db:section>
<db:section xml:id="killTimer">
<db:title>void QObject::killTimer(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>killTimer</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void killTimer(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Kills the timer with timer identifier, <db:code role="parameter">id</db:code>.</db:para>
<db:para>The timer identifier is returned by <db:link xlink:href="qobject.xml#startTimer">startTimer</db:link>() when a timer event is started.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#startTimer">startTimer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="metaObject">
<db:title>[virtual] const QMetaObject *QObject::metaObject() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>const QMetaObject *</db:type>
<db:methodname>metaObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QMetaObject * metaObject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the meta-object of this object.</db:para>
<db:para>A meta-object contains information about a class that inherits <db:link xlink:href="qobject.xml">QObject</db:link>, e.g. class name, superclass name, properties, signals and slots. Every <db:link xlink:href="qobject.xml">QObject</db:link> subclass that contains the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro will have a meta-object.</db:para>
<db:para>The meta-object information is required by the signal/slot connection mechanism and the property system. The <db:link xlink:href="qobject.xml#inherits">inherits</db:link>() function also makes use of the meta-object.</db:para>
<db:para>If you have no pointer to an actual object instance but still want to access the meta-object of a class, you can use <db:link xlink:href="qobject.xml#staticMetaObject-var">staticMetaObject</db:link>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QObject *obj = new QPushButton;
obj-&amp;gt;metaObject()-&amp;gt;className();             // returns &quot;QPushButton&quot;

QPushButton::staticMetaObject.className();  // returns &quot;QPushButton&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#staticMetaObject-var">staticMetaObject</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveToThread">
<db:title>bool QObject::moveToThread(QThread *<db:emphasis>targetThread</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>moveToThread</db:methodname>
<db:methodparam>
<db:type>QThread *</db:type>
<db:parameter>targetThread</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool moveToThread(QThread *targetThread)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the thread affinity for this object and its children and returns true on success. The object cannot be moved if it has a parent. Event processing will continue in the <db:code role="parameter">targetThread</db:code>.</db:para>
<db:para>To move an object to the main thread, use <db:link xlink:href="qcoreapplication.xml#instance">QApplication::instance</db:link>() to retrieve a pointer to the current application, and then use <db:link xlink:href="qobject.xml#thread">QApplication::thread</db:link>() to retrieve the thread in which the application lives. For example:</db:para>
<db:programlisting language="cpp">myObject-&amp;gt;moveToThread(QApplication::instance()-&amp;gt;thread());
</db:programlisting>
<db:para>If <db:code role="parameter">targetThread</db:code> is nullptr, all event processing for this object and its children stops, as they are no longer associated with any thread.</db:para>
<db:para>Note that all active timers for the object will be reset. The timers are first stopped in the current thread and restarted (with the same interval) in the <db:code role="parameter">targetThread</db:code>. As a result, constantly moving an object between threads can postpone timer events indefinitely.</db:para>
<db:para>A <db:link xlink:href="qevent.xml#Type-enum">QEvent::ThreadChange</db:link> event is sent to this object just before the thread affinity is changed. You can handle this event to perform any special processing. Note that any new events that are posted to this object will be handled in the <db:code role="parameter">targetThread</db:code>, provided it is not nullptr: when it is nullptr, no event processing for this object or its children can happen, as they are no longer associated with any thread.</db:para>
<db:warning>
<db:para>This function is <db:emphasis>not</db:emphasis> thread-safe; the current thread must be same as the current thread affinity. In other words, this function can only &quot;push&quot; an object from the current thread to another thread, it cannot &quot;pull&quot; an object from any arbitrary thread to the current thread. There is one exception to this rule however: objects with no thread affinity can be &quot;pulled&quot; to the current thread.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#thread">thread</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="objectNameChanged">
<db:title>void QObject::objectNameChanged(const QString &amp;<db:emphasis>objectName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>objectNameChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>objectName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">objectName</db:synopsisinfo>
<db:synopsisinfo role="signature">void objectNameChanged(const QString &amp;objectName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after the object's name has been changed. The new object name is passed as <db:code role="parameter">objectName</db:code>.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qobject.xml#objectName-prop">objectName</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#objectName-prop">QObject::objectName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parent">
<db:title>QObject *QObject::parent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>parent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * parent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the parent object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#setParent">setParent</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#children">children</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property">
<db:title>QVariant QObject::property(const char *<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>property</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant property(const char *name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the object's <db:code role="parameter">name</db:code> property.</db:para>
<db:para>If no such property exists, the returned variant is invalid.</db:para>
<db:para>Information about all available properties is provided through the <db:link xlink:href="qobject.xml#metaObject">metaObject</db:link>() and <db:link xlink:href="qobject.xml#dynamicPropertyNames">dynamicPropertyNames</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qvariant.xml#isValid">QVariant::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#metaObject">metaObject</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#dynamicPropertyNames">dynamicPropertyNames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="receivers">
<db:title>[protected] int QObject::receivers(const char *<db:emphasis>signal</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>receivers</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int receivers(const char *signal) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of receivers connected to the <db:code role="parameter">signal</db:code>.</db:para>
<db:para>Since both slots and signals can be used as receivers for signals, and the same connections can be made many times, the number of receivers is the same as the number of connections made from this signal.</db:para>
<db:para>When calling this function, you can use the SIGNAL() macro to pass a specific signal:</db:para>
<db:programlisting language="cpp">if (receivers(SIGNAL(valueChanged(QByteArray))) &amp;gt; 0) {
    QByteArray data;
    get_the_value(&amp;amp;data);       // expensive operation
    emit valueChanged(data);
}
</db:programlisting>
<db:warning>
<db:para>This function violates the object-oriented principle of modularity. However, it might be useful when you need to perform expensive initialization only if something is connected to a signal.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#isSignalConnected">isSignalConnected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeEventFilter">
<db:title>void QObject::removeEventFilter(QObject *<db:emphasis>obj</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeEventFilter</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeEventFilter(QObject *obj)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes an event filter object <db:code role="parameter">obj</db:code> from this object. The request is ignored if such an event filter has not been installed.</db:para>
<db:para>All event filters for this object are automatically removed when this object is destroyed.</db:para>
<db:para>It is always safe to remove an event filter, even during event filter activation (i.e. from the <db:link xlink:href="qobject.xml#eventFilter">eventFilter</db:link>() function).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#installEventFilter">installEventFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#eventFilter">eventFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#event">event</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sender">
<db:title>[protected] QObject *QObject::sender() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>sender</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * sender() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the object that sent the signal, if called in a slot activated by a signal; otherwise it returns nullptr. The pointer is valid only during the execution of the slot that calls this function from this object's thread context.</db:para>
<db:para>The pointer returned by this function becomes invalid if the sender is destroyed, or if the slot is disconnected from the sender's signal.</db:para>
<db:warning>
<db:para>This function violates the object-oriented principle of modularity. However, getting access to the sender might be useful when many signals are connected to a single slot.</db:para>
</db:warning>
<db:warning>
<db:para>As mentioned above, the return value of this function is not valid when the slot is called via a <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::DirectConnection</db:link> from a thread different from this object's thread. Do not use this function in this type of scenario.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#senderSignalIndex">senderSignalIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="senderSignalIndex">
<db:title>[protected] int QObject::senderSignalIndex() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>senderSignalIndex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int senderSignalIndex() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the meta-method index of the signal that called the currently executing slot, which is a member of the class returned by <db:link xlink:href="qobject.xml#sender">sender</db:link>(). If called outside of a slot activated by a signal, -1 is returned.</db:para>
<db:para>For signals with default parameters, this function will always return the index with all parameters, regardless of which was used with <db:link xlink:href="qobject.xml#connect">connect</db:link>(). For example, the signal destroyed(QObject *obj = \nullptr) will have two different indexes (with and without the parameter), but this function will always return the index with a parameter. This does not apply when overloading signals with different parameters.</db:para>
<db:warning>
<db:para>This function violates the object-oriented principle of modularity. However, getting access to the signal index might be useful when many signals are connected to a single slot.</db:para>
</db:warning>
<db:warning>
<db:para>The return value of this function is not valid when the slot is called via a <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::DirectConnection</db:link> from a thread different from this object's thread. Do not use this function in this type of scenario.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#sender">sender</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfSignal">QMetaObject::indexOfSignal</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#method">QMetaObject::method</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setObjectName">
<db:title>void QObject::setObjectName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setObjectName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">objectName</db:synopsisinfo>
<db:synopsisinfo role="signature">void setObjectName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the object's name to <db:code role="parameter">name</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qobject.xml#objectName-prop">objectName</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#objectName-prop">objectName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setObjectName-1">
<db:title>[since 6.4] void QObject::setObjectName(QAnyStringView <db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setObjectName</db:methodname>
<db:methodparam>
<db:type>QAnyStringView</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="associated-property">objectName</db:synopsisinfo>
<db:synopsisinfo role="signature">void setObjectName(QAnyStringView name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qobject.xml#objectName-prop">objectName</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="setParent">
<db:title>void QObject::setParent(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setParent</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setParent(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes the object a child of <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#parent">parent</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#children">children</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty">
<db:title>bool QObject::setProperty(const char *<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setProperty</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setProperty(const char *name, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of the object's <db:code role="parameter">name</db:code> property to <db:code role="parameter">value</db:code>.</db:para>
<db:para>If the property is defined in the class using <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> then true is returned on success and false otherwise. If the property is not defined using <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>, and therefore not listed in the meta-object, it is added as a dynamic property and false is returned.</db:para>
<db:para>Information about all available properties is provided through the <db:link xlink:href="qobject.xml#metaObject">metaObject</db:link>() and <db:link xlink:href="qobject.xml#dynamicPropertyNames">dynamicPropertyNames</db:link>().</db:para>
<db:para>Dynamic properties can be queried again using <db:link xlink:href="qobject.xml#property">property</db:link>() and can be removed by setting the property value to an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>. Changing the value of a dynamic property causes a <db:link xlink:href="qdynamicpropertychangeevent.xml">QDynamicPropertyChangeEvent</db:link> to be sent to the object.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Dynamic properties starting with &quot;_q_&quot; are reserved for internal purposes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#metaObject">metaObject</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#dynamicPropertyNames">dynamicPropertyNames</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaproperty.xml#write">QMetaProperty::write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty-1">
<db:title>[since 6.6] bool QObject::setProperty(const char *<db:emphasis>name</db:emphasis>, QVariant &amp;&amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setProperty</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVariant &amp;&amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setProperty(const char *name, QVariant &amp;&amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="signalsBlocked">
<db:title>bool QObject::signalsBlocked() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>signalsBlocked</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool signalsBlocked() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if signals are blocked; otherwise returns false.</db:para>
<db:para>Signals are not blocked by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#blockSignals">blockSignals</db:link>()</db:member>
<db:member><db:link xlink:href="qsignalblocker.xml">QSignalBlocker</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startTimer">
<db:title>int QObject::startTimer(int <db:emphasis>interval</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>startTimer</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>interval</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>timerType</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int startTimer(int interval, Qt::TimerType timerType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function that will start a timer of type <db:code role="parameter">timerType</db:code> and a timeout of <db:code role="parameter">interval</db:code> milliseconds. This is equivalent to calling:</db:para>
<db:programlisting language="cpp">startTimer(std::chrono::milliseconds{interval}, timerType);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#killTimer">killTimer</db:link>()</db:member>
<db:member><db:link xlink:href="qtimer.xml#singleShot">QTimer::singleShot</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startTimer-1">
<db:title>int QObject::startTimer(std::chrono::milliseconds <db:emphasis>interval</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis> = Qt::CoarseTimer)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>startTimer</db:methodname>
<db:methodparam>
<db:type>std::chrono::milliseconds</db:type>
<db:parameter>interval</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>timerType</db:parameter>
<db:initializer>Qt::CoarseTimer</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int startTimer(std::chrono::milliseconds interval, Qt::TimerType timerType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Starts a timer and returns a timer identifier, or returns zero if it could not start a timer.</db:para>
<db:para>A timer event will occur every <db:code role="parameter">interval</db:code> until <db:link xlink:href="qobject.xml#killTimer">killTimer</db:link>() is called. If <db:code role="parameter">interval</db:code> is equal to std::chrono::duration::zero(), then the timer event occurs once every time there are no more window system events to process.</db:para>
<db:para>The virtual <db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link>() function is called with the <db:link xlink:href="qtimerevent.xml">QTimerEvent</db:link> event parameter class when a timer event occurs. Reimplement this function to get timer events.</db:para>
<db:para>If multiple timers are running, the <db:link xlink:href="qtimerevent.xml#timerId">QTimerEvent::timerId</db:link>() can be used to find out which timer was activated.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">class MyObject : public QObject
{
    Q_OBJECT

public:
    MyObject(QObject *parent = nullptr);

protected:
    void timerEvent(QTimerEvent *event) override;
};

MyObject::MyObject(QObject *parent)
    : QObject(parent)
{
    startTimer(50);     // 50-millisecond timer
    startTimer(1000);   // 1-second timer
    startTimer(60000);  // 1-minute timer

    using namespace std::chrono;
    startTimer(milliseconds(50));
    startTimer(seconds(1));
    startTimer(minutes(1));

    // since C++14 we can use std::chrono::duration literals, e.g.:
    startTimer(100ms);
    startTimer(5s);
    startTimer(2min);
    startTimer(1h);
}

void MyObject::timerEvent(QTimerEvent *event)
{
    qDebug() &amp;lt;&amp;lt; &quot;Timer ID:&quot; &amp;lt;&amp;lt; event-&amp;gt;timerId();
}
</db:programlisting>
<db:para>Note that <db:link xlink:href="qtimer.xml">QTimer</db:link>'s accuracy depends on the underlying operating system and hardware. The <db:code role="parameter">timerType</db:code> argument allows you to customize the accuracy of the timer. See <db:link xlink:href="qt.xml#TimerType-enum">Qt::TimerType</db:link> for information on the different timer types. Most platforms support an accuracy of 20 milliseconds; some provide more. If Qt is unable to deliver the requested number of timer events, it will silently discard some.</db:para>
<db:para>The <db:link xlink:href="qtimer.xml">QTimer</db:link> class provides a high-level programming interface with single-shot timers and timer signals instead of events. There is also a <db:link xlink:href="qbasictimer.xml">QBasicTimer</db:link> class that is more lightweight than <db:link xlink:href="qtimer.xml">QTimer</db:link> and less clumsy than using timer IDs directly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#killTimer">killTimer</db:link>()</db:member>
<db:member><db:link xlink:href="qtimer.xml#singleShot">QTimer::singleShot</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="thread">
<db:title>QThread *QObject::thread() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QThread *</db:type>
<db:methodname>thread</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QThread * thread() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the thread in which the object lives.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#moveToThread">moveToThread</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[virtual protected] void QObject::timerEvent(QTimerEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>timerEvent</db:methodname>
<db:methodparam>
<db:type>QTimerEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void timerEvent(QTimerEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This event handler can be reimplemented in a subclass to receive timer events for the object.</db:para>
<db:para><db:link xlink:href="qtimer.xml">QTimer</db:link> provides a higher-level interface to the timer functionality, and also more general information about timers. The timer event is passed in the <db:code role="parameter">event</db:code> parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#startTimer">startTimer</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#killTimer">killTimer</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#event">event</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tr">
<db:title>[static] QString QObject::tr(const char *<db:emphasis>sourceText</db:emphasis>, const char *<db:emphasis>disambiguation</db:emphasis> = nullptr, int <db:emphasis>n</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>tr</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>sourceText</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>disambiguation</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>n</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString tr(const char *sourceText, const char *disambiguation, int n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a translated version of <db:code role="parameter">sourceText</db:code>, optionally based on a <db:code role="parameter">disambiguation</db:code> string and value of <db:code role="parameter">n</db:code> for strings containing plurals; otherwise returns <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>(<db:code role="parameter">sourceText</db:code>) if no appropriate translated string is available.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void SpreadSheet::setupMenuBar()
{
    QMenu *fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;File&quot;));
    ...
</db:programlisting>
<db:para>If the same <db:code role="parameter">sourceText</db:code> is used in different roles within the same context, an additional identifying string may be passed in <db:code role="parameter">disambiguation</db:code> (nullptr by default).</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">MyWindow::MyWindow()
{
    QLabel *senderLabel = new QLabel(tr(&quot;Name:&quot;));
    QLabel *recipientLabel = new QLabel(tr(&quot;Name:&quot;, &quot;recipient&quot;));
    ...
</db:programlisting>
<db:para>See <db:link xlink:href="i18n-source-translation.xml">Writing Source Code for Translation</db:link> for a detailed description of Qt's translation mechanisms in general, and the <db:link xlink:href="i18n-source-translation.xml#disambiguate-identical-text">Disambiguate Identical Text</db:link> section for information on disambiguation.</db:para>
<db:warning>
<db:para>This method is reentrant only if all translators are installed <db:emphasis>before</db:emphasis> calling this method. Installing or removing translators while performing translations is not supported. Doing so will probably result in crashes or other undesirable behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#translate">QCoreApplication::translate</db:link>()</db:member>
<db:member><db:link xlink:href="internationalization.xml">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="staticMetaObject-var">
<db:title>const QMetaObject QObject::staticMetaObject</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QMetaObject</db:type>
<db:varname>staticMetaObject</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This variable stores the meta-object for the class.</db:para>
<db:para>A meta-object contains information about a class that inherits <db:link xlink:href="qobject.xml">QObject</db:link>, e.g. class name, superclass name, properties, signals and slots. Every class that contains the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro will also have a meta-object.</db:para>
<db:para>The meta-object information is required by the signal/slot connection mechanism and the property system. The <db:link xlink:href="qobject.xml#inherits">inherits</db:link>() function also makes use of the meta-object.</db:para>
<db:para>If you have a pointer to an object, you can use <db:link xlink:href="qobject.xml#metaObject">metaObject</db:link>() to retrieve the meta-object associated with that object.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QPushButton::staticMetaObject.className();  // returns &quot;QPushButton&quot;

QObject *obj = new QPushButton;
obj-&amp;gt;metaObject()-&amp;gt;className();             // returns &quot;QPushButton&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#metaObject">metaObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qobject_cast">
<db:title>T qobject_cast(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="qobject_cast-1">T qobject_cast(const QObject *<db:emphasis>object</db:emphasis>)</db:bridgehead>
<db:para>Returns the given <db:code role="parameter">object</db:code> cast to type T if the object is of type T (or of a subclass); otherwise returns nullptr. If <db:code role="parameter">object</db:code> is nullptr then it will also return nullptr.</db:para>
<db:para>The class T must inherit (directly or indirectly) <db:link xlink:href="qobject.xml">QObject</db:link> and be declared with the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro.</db:para>
<db:para>A class is considered to inherit itself.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QObject *obj = new QTimer;          // QTimer inherits QObject

QTimer *timer = qobject_cast&amp;lt;QTimer *&amp;gt;(obj);
// timer == (QObject *)obj

QAbstractButton *button = qobject_cast&amp;lt;QAbstractButton *&amp;gt;(obj);
// button == nullptr
</db:programlisting>
<db:para>The <db:link xlink:href="qobject.xml#qobject_cast">qobject_cast</db:link>() function behaves similarly to the standard C++ dynamic_cast(), with the advantages that it doesn't require RTTI support and it works across dynamic library boundaries.</db:para>
<db:para><db:link xlink:href="qobject.xml#qobject_cast">qobject_cast</db:link>() can also be used in conjunction with interfaces.</db:para>
<db:warning>
<db:para>If T isn't declared with the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro, this function's return value is undefined.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#inherits">QObject::inherits</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QObjectList-typedef">
<db:title>QObjectList</db:title>
<db:typedefsynopsis>
<db:typedefname>QObjectList</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Synonym for <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qobject.xml">QObject</db:link> *&gt;.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QT_NO_CONTEXTLESS_CONNECT">
<db:title>[since 6.7] QT_NO_CONTEXTLESS_CONNECT</db:title>
<db:methodsynopsis>
<db:methodname>QT_NO_CONTEXTLESS_CONNECT</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QT_NO_CONTEXTLESS_CONNECT</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Defining this macro will disable the overload of <db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>() that connects a signal to a functor, without also specifying a <db:link xlink:href="qobject.xml">QObject</db:link> as a receiver/context object (that is, the 3-arguments overload of <db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>()).</db:para>
<db:para>Using the context-less overload is error prone, because it is easy to connect to functors that depend on some local state of the receiving end. If such local state gets destroyed, the connection does not get automatically disconnected.</db:para>
<db:para>Moreover, such connections are always direct connections, which may cause issues in multithreaded scenarios (for instance, if the signal is emitted from another thread).</db:para>
<db:para>This macro was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#connect">QObject::connect</db:link></db:member>
<db:member><db:link xlink:href="qt.xml#ConnectionType-enum">Qt::ConnectionType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_NO_NARROWING_CONVERSIONS_IN_CONNECT">
<db:title>QT_NO_NARROWING_CONVERSIONS_IN_CONNECT</db:title>
<db:methodsynopsis>
<db:methodname>QT_NO_NARROWING_CONVERSIONS_IN_CONNECT</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QT_NO_NARROWING_CONVERSIONS_IN_CONNECT</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Defining this macro will disable narrowing and floating-point-to-integral conversions between the arguments carried by a signal and the arguments accepted by a slot, when the signal and the slot are connected using the PMF-based syntax.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#connect">QObject::connect</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_CLASSINFO">
<db:title>Q_CLASSINFO(<db:emphasis>Name</db:emphasis>, <db:emphasis>Value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_CLASSINFO</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>Name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>Value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_CLASSINFO(Name, Value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro associates extra information to the class, which is available using <db:link xlink:href="qobject.xml#metaObject">QObject::metaObject</db:link>(). The extra information takes the form of a <db:code role="parameter">Name</db:code> string and a <db:code role="parameter">Value</db:code> literal string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">class MyClass : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(&quot;Author&quot;, &quot;Pierre Gendron&quot;)
    Q_CLASSINFO(&quot;URL&quot;, &quot;http://www.my-organization.qc.ca&quot;)

public:
    ...
};
</db:programlisting>
<db:para>Qt makes use of the macro in <db:link xlink:href="qtdbus-index.xml">Qt D-Bus</db:link> and <db:link xlink:href="qtqml-index.xml">Qt Qml</db:link> modules. For instance, when defining <db:link xlink:href="qtqml-typesystem-objecttypes.xml">QML Object Types</db:link> in C++, you can designate a property as the <db:emphasis>default</db:emphasis> one:</db:para>
<db:programlisting language="cpp">Q_CLASSINFO(&quot;DefaultProperty&quot;, &quot;content&quot;)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#classInfo">QMetaObject::classInfo</db:link>()</db:member>
<db:member><db:link xlink:href="usingadaptors.xml">Using Qt D-Bus Adaptors</db:link></db:member>
<db:member><db:link xlink:href="qtqml-cppintegration-definetypes.xml">Defining QML Types from C++</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_EMIT">
<db:title>Q_EMIT</db:title>
<db:methodsynopsis>
<db:methodname>Q_EMIT</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_EMIT</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Use this macro to replace the emit keyword for emitting signals, when you want to use Qt Signals and Slots with a <db:link xlink:href="signalsandslots.xml#3rd-party-signals-and-slots">3rd party signal/slot mechanism</db:link>.</db:para>
<db:para>The macro is normally used when no_keywords is specified with the CONFIG variable in the .pro file, but it can be used even when no_keywords is <db:emphasis>not</db:emphasis> specified.</db:para>
</db:section>
<db:section xml:id="Q_ENUM">
<db:title>Q_ENUM(<db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_ENUM</db:methodname>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_ENUM(...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro registers an enum type with the meta-object system. It must be placed after the enum declaration in a class that has the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link>, <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link> or <db:link xlink:href="qobject.xml#Q_GADGET_EXPORT">Q_GADGET_EXPORT</db:link> macro. For namespaces use <db:link xlink:href="qobject.xml#Q_ENUM_NS">Q_ENUM_NS</db:link>() instead.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">class MyClass : public QObject
{
    Q_OBJECT

public:
    MyClass(QObject *parent = nullptr);
    ~MyClass();

    enum Priority { High, Low, VeryHigh, VeryLow };
    Q_ENUM(Priority)
    void setPriority(Priority priority);
    Priority priority() const;
};
</db:programlisting>
<db:para>Enumerations that are declared with Q_ENUM have their <db:link xlink:href="qmetaenum.xml">QMetaEnum</db:link> registered in the enclosing <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>. You can also use <db:link xlink:href="qmetaenum.xml#fromType">QMetaEnum::fromType</db:link>() to get the <db:link xlink:href="qmetaenum.xml">QMetaEnum</db:link>.</db:para>
<db:para>Registered enumerations are automatically registered also to the Qt meta type system, making them known to <db:link xlink:href="qmetatype.xml">QMetaType</db:link> without the need to use <db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>(). This will enable useful features; for example, if used in a <db:link xlink:href="qvariant.xml">QVariant</db:link>, you can convert them to strings. Likewise, passing them to <db:link xlink:href="qdebug.xml">QDebug</db:link> will print out their names.</db:para>
<db:para>Mind that the enum values are stored as signed int in the meta object system. Registering enumerations with values outside the range of values valid for int will lead to overflows and potentially undefined behavior when accessing them through the meta object system. QML, for example, does access registered enumerations through the meta object system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_ENUM_NS">
<db:title>Q_ENUM_NS(<db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_ENUM_NS</db:methodname>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_ENUM_NS(...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro registers an enum type with the meta-object system. It must be placed after the enum declaration in a namespace that has the <db:link xlink:href="qobject.xml#Q_NAMESPACE">Q_NAMESPACE</db:link> macro. It is the same as <db:link xlink:href="qobject.xml#Q_ENUM">Q_ENUM</db:link> but in a namespace.</db:para>
<db:para>Enumerations that are declared with Q_ENUM_NS have their <db:link xlink:href="qmetaenum.xml">QMetaEnum</db:link> registered in the enclosing <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>. You can also use <db:link xlink:href="qmetaenum.xml#fromType">QMetaEnum::fromType</db:link>() to get the <db:link xlink:href="qmetaenum.xml">QMetaEnum</db:link>.</db:para>
<db:para>Registered enumerations are automatically registered also to the Qt meta type system, making them known to <db:link xlink:href="qmetatype.xml">QMetaType</db:link> without the need to use <db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>(). This will enable useful features; for example, if used in a <db:link xlink:href="qvariant.xml">QVariant</db:link>, you can convert them to strings. Likewise, passing them to <db:link xlink:href="qdebug.xml">QDebug</db:link> will print out their names.</db:para>
<db:para>Mind that the enum values are stored as signed int in the meta object system. Registering enumerations with values outside the range of values valid for int will lead to overflows and potentially undefined behavior when accessing them through the meta object system. QML, for example, does access registered enumerations through the meta object system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_FLAG">
<db:title>Q_FLAG(<db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_FLAG</db:methodname>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_FLAG(...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro registers a single <db:link xlink:href="qflags.xml">flags type</db:link> with the meta-object system. It is typically used in a class definition to declare that values of a given enum can be used as flags and combined using the bitwise OR operator. For namespaces use <db:link xlink:href="qobject.xml#Q_FLAG_NS">Q_FLAG_NS</db:link>() instead.</db:para>
<db:para>The macro must be placed after the enum declaration. The declaration of the flags type is done using the <db:link xlink:href="qflags.xml#Q_DECLARE_FLAGS">Q_DECLARE_FLAGS</db:link>() macro.</db:para>
<db:para>For example, in <db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link>, the <db:link xlink:href="qitemselectionmodel.xml#SelectionFlag-enum">SelectionFlags</db:link> flag is declared in the following way:</db:para>
<db:programlisting language="cpp">class QItemSelectionModel : public QObject
{
    Q_OBJECT

public:
    ...
    enum SelectionFlag {
        NoUpdate       = 0x0000,
        Clear          = 0x0001,
        Select         = 0x0002,
        Deselect       = 0x0004,
        Toggle         = 0x0008,
        Current        = 0x0010,
        Rows           = 0x0020,
        Columns        = 0x0040,
        SelectCurrent  = Select | Current,
        ToggleCurrent  = Toggle | Current,
        ClearAndSelect = Clear | Select
    };

    Q_DECLARE_FLAGS(SelectionFlags, SelectionFlag)
    Q_FLAG(SelectionFlags)
    ...
}
</db:programlisting>
<db:note>
<db:para>The Q_FLAG macro takes care of registering individual flag values with the meta-object system, so it is unnecessary to use <db:link xlink:href="qobject.xml#Q_ENUM">Q_ENUM</db:link>() in addition to this macro.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_FLAG_NS">
<db:title>Q_FLAG_NS(<db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_FLAG_NS</db:methodname>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_FLAG_NS(...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro registers a single <db:link xlink:href="qflags.xml">flags type</db:link> with the meta-object system. It is used in a namespace that has the <db:link xlink:href="qobject.xml#Q_NAMESPACE">Q_NAMESPACE</db:link> macro, to declare that values of a given enum can be used as flags and combined using the bitwise OR operator. It is the same as <db:link xlink:href="qobject.xml#Q_FLAG">Q_FLAG</db:link> but in a namespace.</db:para>
<db:para>The macro must be placed after the enum declaration.</db:para>
<db:note>
<db:para>The Q_FLAG_NS macro takes care of registering individual flag values with the meta-object system, so it is unnecessary to use <db:link xlink:href="qobject.xml#Q_ENUM_NS">Q_ENUM_NS</db:link>() in addition to this macro.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_GADGET">
<db:title>Q_GADGET</db:title>
<db:methodsynopsis>
<db:methodname>Q_GADGET</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_GADGET</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The Q_GADGET macro is a lighter version of the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro for classes that do not inherit from <db:link xlink:href="qobject.xml">QObject</db:link> but still want to use some of the reflection capabilities offered by <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>.</db:para>
<db:note>
<db:para>This macro expansion ends with a private: access specifier. If you declare members immediately after this macro, those members will also be private. To add public (or protected) members right after the macro, use a public: (or protected:) access specifier.</db:para>
</db:note>
<db:para>Q_GADGETs can have <db:link xlink:href="qobject.xml#Q_ENUM">Q_ENUM</db:link>, <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> and <db:link xlink:href="qobject.xml#Q_INVOKABLE">Q_INVOKABLE</db:link>, but they cannot have signals or slots.</db:para>
<db:para>Q_GADGET makes a class member, staticMetaObject, available. staticMetaObject is of type <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> and provides access to the enums declared with <db:link xlink:href="qobject.xml#Q_ENUM">Q_ENUM</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#Q_GADGET_EXPORT">Q_GADGET_EXPORT</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_GADGET_EXPORT">
<db:title>[since 6.3] Q_GADGET_EXPORT(<db:emphasis>EXPORT_MACRO</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_GADGET_EXPORT</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>EXPORT_MACRO</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_GADGET_EXPORT(EXPORT_MACRO)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The Q_GADGET_EXPORT macro works exactly like the <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link> macro. However, the staticMetaObject variable that is made available (see <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link>) is declared with the supplied <db:code role="parameter">EXPORT_MACRO</db:code> qualifier. This is useful if the object needs to be exported from a dynamic library, but the enclosing class as a whole should not be (e.g. because it consists of mostly inline functions).</db:para>
<db:note>
<db:para>This macro expansion ends with a private: access specifier. If you declare members immediately after this macro, those members will also be private. To add public (or protected) members right after the macro, use a public: (or protected:) access specifier.</db:para>
</db:note>
<db:para>For example:</db:para>
<db:programlisting language="cpp">class Point {
    Q_GADGET_EXPORT(EXPORT_MACRO)
    Q_PROPERTY(int x MEMBER x)
    Q_PROPERTY(int y MEMBER y)
    ~~~
</db:programlisting>
<db:para>This macro was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link></db:member>
<db:member><db:link xlink:href="sharedlibrary.xml">Creating Shared Libraries</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_INTERFACES">
<db:title>Q_INTERFACES(<db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_INTERFACES</db:methodname>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_INTERFACES(...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro tells Qt which interfaces the class implements. This is used when implementing plugins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtplugin.xml#Q_DECLARE_INTERFACE">Q_DECLARE_INTERFACE</db:link>()</db:member>
<db:member><db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>()</db:member>
<db:member><db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_INVOKABLE">
<db:title>Q_INVOKABLE</db:title>
<db:methodsynopsis>
<db:methodname>Q_INVOKABLE</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_INVOKABLE</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Apply this macro to declarations of member functions to allow them to be invoked via the meta-object system. The macro is written before the return type, as shown in the following example:</db:para>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT

public:
    Window();
    void normalMethod();
    Q_INVOKABLE void invokableMethod();
};
</db:programlisting>
<db:para>The invokableMethod() function is marked up using Q_INVOKABLE, causing it to be registered with the meta-object system and enabling it to be invoked using <db:link xlink:href="qmetaobject.xml#invokeMethod">QMetaObject::invokeMethod</db:link>(). Since normalMethod() function is not registered in this way, it cannot be invoked using <db:link xlink:href="qmetaobject.xml#invokeMethod">QMetaObject::invokeMethod</db:link>().</db:para>
<db:para>If an invokable member function returns a pointer to a <db:link xlink:href="qobject.xml">QObject</db:link> or a subclass of <db:link xlink:href="qobject.xml">QObject</db:link> and it is invoked from QML, special ownership rules apply. See <db:link xlink:href="qtqml-cppintegration-data.xml">Data Type Conversion Between QML and C++</db:link> for more information.</db:para>
</db:section>
<db:section xml:id="Q_MOC_INCLUDE">
<db:title>[since 6.0] Q_MOC_INCLUDE</db:title>
<db:methodsynopsis>
<db:methodname>Q_MOC_INCLUDE</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_MOC_INCLUDE</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The Q_MOC_INCLUDE macro can be used within or outside a class, and tell the <db:link xlink:href="moc.xml">Meta Object Compiler</db:link> to add an include.</db:para>
<db:programlisting language="cpp">// Put this in your code and the generated code will include this header.
Q_MOC_INCLUDE(&quot;myheader.h&quot;)
</db:programlisting>
<db:para>This is useful if the types you use as properties or signal/slots arguments are forward declared.</db:para>
<db:para>This macro was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="Q_NAMESPACE">
<db:title>Q_NAMESPACE</db:title>
<db:methodsynopsis>
<db:methodname>Q_NAMESPACE</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_NAMESPACE</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The Q_NAMESPACE macro can be used to add <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> capabilities to a namespace.</db:para>
<db:para>Q_NAMESPACEs can have <db:link xlink:href="qobject.xml#Q_CLASSINFO">Q_CLASSINFO</db:link>, <db:link xlink:href="qobject.xml#Q_ENUM_NS">Q_ENUM_NS</db:link>, <db:link xlink:href="qobject.xml#Q_FLAG_NS">Q_FLAG_NS</db:link>, but they cannot have <db:link xlink:href="qobject.xml#Q_ENUM">Q_ENUM</db:link>, <db:link xlink:href="qobject.xml#Q_FLAG">Q_FLAG</db:link>, <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>, <db:link xlink:href="qobject.xml#Q_INVOKABLE">Q_INVOKABLE</db:link>, signals nor slots.</db:para>
<db:para>Q_NAMESPACE makes an external variable, staticMetaObject, available. staticMetaObject is of type <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> and provides access to the enums declared with <db:link xlink:href="qobject.xml#Q_ENUM_NS">Q_ENUM_NS</db:link>/<db:link xlink:href="qobject.xml#Q_FLAG_NS">Q_FLAG_NS</db:link>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">namespace test {
Q_NAMESPACE
...
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#Q_NAMESPACE_EXPORT">Q_NAMESPACE_EXPORT</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_NAMESPACE_EXPORT">
<db:title>Q_NAMESPACE_EXPORT(<db:emphasis>EXPORT_MACRO</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_NAMESPACE_EXPORT</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>EXPORT_MACRO</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_NAMESPACE_EXPORT(EXPORT_MACRO)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The Q_NAMESPACE_EXPORT macro can be used to add <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> capabilities to a namespace.</db:para>
<db:para>It works exactly like the <db:link xlink:href="qobject.xml#Q_NAMESPACE">Q_NAMESPACE</db:link> macro. However, the external staticMetaObject variable that gets defined in the namespace is declared with the supplied <db:code role="parameter">EXPORT_MACRO</db:code> qualifier. This is useful if the object needs to be exported from a dynamic library.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">namespace test {
Q_NAMESPACE_EXPORT(EXPORT_MACRO)
...
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#Q_NAMESPACE">Q_NAMESPACE</db:link></db:member>
<db:member><db:link xlink:href="sharedlibrary.xml">Creating Shared Libraries</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_OBJECT">
<db:title>Q_OBJECT</db:title>
<db:methodsynopsis>
<db:methodname>Q_OBJECT</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_OBJECT</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The Q_OBJECT macro is used to enable meta-object features, such as dynamic properties, signals, and slots.</db:para>
<db:para>You can add the Q_OBJECT macro to any section of a class definition that declares its own signals and slots or that uses other services provided by Qt's meta-object system.</db:para>
<db:note>
<db:para>This macro expansion ends with a private: access specifier. If you declare members immediately after this macro, those members will also be private. To add public (or protected) members right after the macro, use a public: (or protected:) access specifier. Example:</db:para>
</db:note>
<db:programlisting language="cpp">#include &amp;lt;QObject&amp;gt;

class Counter : public QObject
{
    Q_OBJECT

// Note. The Q_OBJECT macro starts a private section.
// To declare public members, use the 'public:' access modifier.
public:
    Counter() { m_value = 0; }

    int value() const { return m_value; }

public slots:
    void setValue(int value);

signals:
    void valueChanged(int newValue);

private:
    int m_value;
};
</db:programlisting>
<db:note>
<db:para>This macro requires the class to be a subclass of <db:link xlink:href="qobject.xml">QObject</db:link>. Use <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link> or <db:link xlink:href="qobject.xml#Q_GADGET_EXPORT">Q_GADGET_EXPORT</db:link> instead of Q_OBJECT to enable the meta object system's support for enums in a class that is not a <db:link xlink:href="qobject.xml">QObject</db:link> subclass.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="metaobjects.xml">Meta-Object System</db:link></db:member>
<db:member><db:link xlink:href="signalsandslots.xml">Signals and Slots</db:link></db:member>
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PROPERTY">
<db:title>Q_PROPERTY(<db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_PROPERTY</db:methodname>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_PROPERTY(...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro is used for declaring properties in classes that inherit <db:link xlink:href="qobject.xml">QObject</db:link>. Properties behave like class data members, but they have additional features accessible through the <db:link xlink:href="metaobjects.xml">Meta-Object System</db:link>.</db:para>
<db:programlisting language="cpp">Q_PROPERTY(type name
           (READ getFunction [WRITE setFunction] |
            MEMBER memberName [(READ getFunction | WRITE setFunction)])
           [RESET resetFunction]
           [NOTIFY notifySignal]
           [REVISION int | REVISION(int[, int])]
           [DESIGNABLE bool]
           [SCRIPTABLE bool]
           [STORED bool]
           [USER bool]
           [BINDABLE bindableProperty]
           [CONSTANT]
           [FINAL]
           [REQUIRED])
</db:programlisting>
<db:para>The property name and type and the READ function are required. The type can be any type supported by <db:link xlink:href="qvariant.xml">QVariant</db:link>, or it can be a user-defined type. The other items are optional, but a WRITE function is common. The attributes default to true except USER, which defaults to false.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">Q_PROPERTY(QString title READ title WRITE setTitle USER true)
</db:programlisting>
<db:para>For more details about how to use this macro, and a more detailed example of its use, see the discussion on <db:link xlink:href="properties.xml">Qt's Property System</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_REVISION">
<db:title>Q_REVISION</db:title>
<db:methodsynopsis>
<db:methodname>Q_REVISION</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_REVISION</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Apply this macro to declarations of member functions to tag them with a revision number in the meta-object system. The macro is written before the return type, as shown in the following example:</db:para>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT
    Q_PROPERTY(int normalProperty READ normalProperty)
    Q_PROPERTY(int newProperty READ newProperty REVISION(2, 1))

public:
    Window();
    int normalProperty();
    int newProperty();
public slots:
    void normalMethod();
    Q_REVISION(2, 1) void newMethod();
};
</db:programlisting>
<db:para>This is useful when using the meta-object system to dynamically expose objects to another API, as you can match the version expected by multiple versions of the other API. Consider the following simplified example:</db:para>
<db:programlisting language="cpp">    Window window;
    int expectedRevision = 0;
    const QMetaObject *windowMetaObject = window.metaObject();
    for (int i=0; i &amp;lt; windowMetaObject-&amp;gt;methodCount(); i++)
        if (windowMetaObject-&amp;gt;method(i).revision() &amp;lt;= expectedRevision)
            exposeMethod(windowMetaObject-&amp;gt;method(i));
    for (int i=0; i &amp;lt; windowMetaObject-&amp;gt;propertyCount(); i++)
        if (windowMetaObject-&amp;gt;property(i).revision() &amp;lt;= expectedRevision)
            exposeProperty(windowMetaObject-&amp;gt;property(i));
</db:programlisting>
<db:para>Using the same Window class as the previous example, the newProperty and newMethod would only be exposed in this code when the expected version is 2.1 or greater.</db:para>
<db:para>Since all methods are considered to be in revision 0 if untagged, a tag of Q_REVISION(0) or Q_REVISION(0, 0) is invalid and ignored.</db:para>
<db:para>You can pass one or two integer parameters to Q_REVISION. If you pass one parameter, it denotes the minor version only. This means that the major version is unspecified. If you pass two, the first parameter is the major version and the second parameter is the minor version.</db:para>
<db:para>This tag is not used by the meta-object system itself. Currently this is only used by the <db:link xlink:href="qtqml-module.xml">QtQml</db:link> module.</db:para>
<db:para>For a more generic string tag, see <db:link xlink:href="qmetamethod.xml#tag">QMetaMethod::tag</db:link>()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetamethod.xml#revision">QMetaMethod::revision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_SET_OBJECT_NAME">
<db:title>Q_SET_OBJECT_NAME(<db:emphasis>Object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_SET_OBJECT_NAME</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>Object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_SET_OBJECT_NAME(Object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro assigns <db:code role="parameter">Object</db:code> the <db:link xlink:href="qobject.xml#objectName-prop">objectName</db:link> &quot;Object&quot;.</db:para>
<db:para>It doesn't matter whether <db:code role="parameter">Object</db:code> is a pointer or not, the macro figures that out by itself.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#objectName-prop">QObject::objectName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_SIGNAL">
<db:title>Q_SIGNAL</db:title>
<db:methodsynopsis>
<db:methodname>Q_SIGNAL</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_SIGNAL</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an additional macro that allows you to mark a single function as a signal. It can be quite useful, especially when you use a 3rd-party source code parser which doesn't understand a signals or Q_SIGNALS groups.</db:para>
<db:para>Use this macro to replace the signals keyword in class declarations, when you want to use Qt Signals and Slots with a <db:link xlink:href="signalsandslots.xml#3rd-party-signals-and-slots">3rd party signal/slot mechanism</db:link>.</db:para>
<db:para>The macro is normally used when no_keywords is specified with the CONFIG variable in the .pro file, but it can be used even when no_keywords is <db:emphasis>not</db:emphasis> specified.</db:para>
</db:section>
<db:section xml:id="Q_SIGNALS">
<db:title>Q_SIGNALS</db:title>
<db:methodsynopsis>
<db:methodname>Q_SIGNALS</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_SIGNALS</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Use this macro to replace the signals keyword in class declarations, when you want to use Qt Signals and Slots with a <db:link xlink:href="signalsandslots.xml#3rd-party-signals-and-slots">3rd party signal/slot mechanism</db:link>.</db:para>
<db:para>The macro is normally used when no_keywords is specified with the CONFIG variable in the .pro file, but it can be used even when no_keywords is <db:emphasis>not</db:emphasis> specified.</db:para>
</db:section>
<db:section xml:id="Q_SLOT">
<db:title>Q_SLOT</db:title>
<db:methodsynopsis>
<db:methodname>Q_SLOT</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_SLOT</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an additional macro that allows you to mark a single function as a slot. It can be quite useful, especially when you use a 3rd-party source code parser which doesn't understand a slots or Q_SLOTS groups.</db:para>
<db:para>Use this macro to replace the slots keyword in class declarations, when you want to use Qt Signals and Slots with a <db:link xlink:href="signalsandslots.xml#3rd-party-signals-and-slots">3rd party signal/slot mechanism</db:link>.</db:para>
<db:para>The macro is normally used when no_keywords is specified with the CONFIG variable in the .pro file, but it can be used even when no_keywords is <db:emphasis>not</db:emphasis> specified.</db:para>
</db:section>
<db:section xml:id="Q_SLOTS">
<db:title>Q_SLOTS</db:title>
<db:methodsynopsis>
<db:methodname>Q_SLOTS</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_SLOTS</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Use this macro to replace the slots keyword in class declarations, when you want to use Qt Signals and Slots with a <db:link xlink:href="signalsandslots.xml#3rd-party-signals-and-slots">3rd party signal/slot mechanism</db:link>.</db:para>
<db:para>The macro is normally used when no_keywords is specified with the CONFIG variable in the .pro file, but it can be used even when no_keywords is <db:emphasis>not</db:emphasis> specified.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QObject</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qobject.xml">QObject</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-macro-documentation">
<db:title>Obsolete Macro Documentation</db:title>
<db:section xml:id="Q_ENUMS">
<db:title>Q_ENUMS(<db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_ENUMS</db:methodname>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_ENUMS(...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>In new code, you should prefer the use of the <db:link xlink:href="qobject.xml#Q_ENUM">Q_ENUM</db:link>() macro, which makes the type available also to the meta type system. For instance, <db:link xlink:href="qmetaenum.xml#fromType">QMetaEnum::fromType</db:link>() will not work with types declared with Q_ENUMS().</db:para>
<db:para>This macro registers one or several enum types to the meta-object system.</db:para>
<db:para>If you want to register an enum that is declared in another class, the enum must be fully qualified with the name of the class defining it. In addition, the class <db:emphasis>defining</db:emphasis> the enum has to inherit <db:link xlink:href="qobject.xml">QObject</db:link> as well as declare the enum using Q_ENUMS().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_FLAGS">
<db:title>Q_FLAGS(<db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_FLAGS</db:methodname>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_FLAGS(...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This macro registers one or several <db:link xlink:href="qflags.xml">flags types</db:link> with the meta-object system. It is typically used in a class definition to declare that values of a given enum can be used as flags and combined using the bitwise OR operator.</db:para>
<db:note>
<db:para>This macro takes care of registering individual flag values with the meta-object system, so it is unnecessary to use <db:link xlink:href="qobject.xml#Q_ENUMS">Q_ENUMS</db:link>() in addition to this macro.</db:para>
</db:note>
<db:para>In new code, you should prefer the use of the <db:link xlink:href="qobject.xml#Q_FLAG">Q_FLAG</db:link>() macro, which makes the type available also to the meta type system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
