<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Standard Dialogs Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Standard Dialogs example shows the standard dialogs that are provided by Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;dialog.h&quot;

#define MESSAGE \
    Dialog::tr(&quot;&lt;p&gt;Message boxes have a caption, a text, &quot; \
               &quot;and any number of buttons, each with standard or custom texts.&quot; \
               &quot;&lt;p&gt;Click a button to close the message box. Pressing the Esc button &quot; \
               &quot;will activate the detected escape button (if any).&quot;)
#define MESSAGE_DETAILS \
    Dialog::tr(&quot;If a message box has detailed text, the user can reveal it &quot; \
               &quot;by pressing the Show Details... button.&quot;)

class DialogOptionsWidget : public QGroupBox
{
public:
    explicit DialogOptionsWidget(QWidget *parent = 0);

    void addCheckBox(const QString &amp;text, int value);
    void addSpacer();
    int value() const;

private:
    typedef QPair&lt;QCheckBox *, int&gt; CheckBoxEntry;
    QVBoxLayout *layout;
    QList&lt;CheckBoxEntry&gt; checkBoxEntries;
};

DialogOptionsWidget::DialogOptionsWidget(QWidget *parent) :
    QGroupBox(parent) , layout(new QVBoxLayout)
{
    setTitle(Dialog::tr(&quot;Options&quot;));
    setLayout(layout);
}

void DialogOptionsWidget::addCheckBox(const QString &amp;text, int value)
{
    QCheckBox *checkBox = new QCheckBox(text);
    layout-&gt;addWidget(checkBox);
    checkBoxEntries.append(CheckBoxEntry(checkBox, value));
}

void DialogOptionsWidget::addSpacer()
{
    layout-&gt;addItem(new QSpacerItem(0, 0, QSizePolicy::Ignored, QSizePolicy::MinimumExpanding));
}

int DialogOptionsWidget::value() const
{
    int result = 0;
    foreach (const CheckBoxEntry &amp;checkboxEntry, checkBoxEntries)
        if (checkboxEntry.first-&gt;isChecked())
            result |= checkboxEntry.second;
    return result;
}

Dialog::Dialog(QWidget *parent)
    : QWidget(parent)
{
    QVBoxLayout *mainLayout = new QVBoxLayout(this);
    QToolBox *toolbox = new QToolBox;
    mainLayout-&gt;addWidget(toolbox);

    errorMessageDialog = new QErrorMessage(this);

    int frameStyle = QFrame::Sunken | QFrame::Panel;

    integerLabel = new QLabel;
    integerLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *integerButton =
            new QPushButton(tr(&quot;QInputDialog::get&amp;Int()&quot;));

    doubleLabel = new QLabel;
    doubleLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *doubleButton =
            new QPushButton(tr(&quot;QInputDialog::get&amp;Double()&quot;));

    itemLabel = new QLabel;
    itemLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *itemButton = new QPushButton(tr(&quot;QInputDialog::getIte&amp;m()&quot;));

    textLabel = new QLabel;
    textLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *textButton = new QPushButton(tr(&quot;QInputDialog::get&amp;Text()&quot;));

    multiLineTextLabel = new QLabel;
    multiLineTextLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *multiLineTextButton = new QPushButton(tr(&quot;QInputDialog::get&amp;MultiLineText()&quot;));

    colorLabel = new QLabel;
    colorLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *colorButton = new QPushButton(tr(&quot;QColorDialog::get&amp;Color()&quot;));

    fontLabel = new QLabel;
    fontLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *fontButton = new QPushButton(tr(&quot;QFontDialog::get&amp;Font()&quot;));

    directoryLabel = new QLabel;
    directoryLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *directoryButton =
            new QPushButton(tr(&quot;QFileDialog::getE&amp;xistingDirectory()&quot;));

    openFileNameLabel = new QLabel;
    openFileNameLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *openFileNameButton =
            new QPushButton(tr(&quot;QFileDialog::get&amp;OpenFileName()&quot;));

    openFileNamesLabel = new QLabel;
    openFileNamesLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *openFileNamesButton =
            new QPushButton(tr(&quot;QFileDialog::&amp;getOpenFileNames()&quot;));

    saveFileNameLabel = new QLabel;
    saveFileNameLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *saveFileNameButton =
            new QPushButton(tr(&quot;QFileDialog::get&amp;SaveFileName()&quot;));

    criticalLabel = new QLabel;
    criticalLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *criticalButton =
            new QPushButton(tr(&quot;QMessageBox::critica&amp;l()&quot;));

    informationLabel = new QLabel;
    informationLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *informationButton =
            new QPushButton(tr(&quot;QMessageBox::i&amp;nformation()&quot;));

    questionLabel = new QLabel;
    questionLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *questionButton =
            new QPushButton(tr(&quot;QMessageBox::&amp;question()&quot;));

    warningLabel = new QLabel;
    warningLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *warningButton = new QPushButton(tr(&quot;QMessageBox::&amp;warning()&quot;));

    errorLabel = new QLabel;
    errorLabel-&gt;setFrameStyle(frameStyle);
    QPushButton *errorButton =
            new QPushButton(tr(&quot;QErrorMessage::showM&amp;essage()&quot;));

    connect(integerButton, SIGNAL(clicked()), this, SLOT(setInteger()));
    connect(doubleButton, SIGNAL(clicked()), this, SLOT(setDouble()));
    connect(itemButton, SIGNAL(clicked()), this, SLOT(setItem()));
    connect(textButton, SIGNAL(clicked()), this, SLOT(setText()));
    connect(multiLineTextButton, SIGNAL(clicked()), this, SLOT(setMultiLineText()));
    connect(colorButton, SIGNAL(clicked()), this, SLOT(setColor()));
    connect(fontButton, SIGNAL(clicked()), this, SLOT(setFont()));
    connect(directoryButton, SIGNAL(clicked()),
            this, SLOT(setExistingDirectory()));
    connect(openFileNameButton, SIGNAL(clicked()),
            this, SLOT(setOpenFileName()));
    connect(openFileNamesButton, SIGNAL(clicked()),
            this, SLOT(setOpenFileNames()));
    connect(saveFileNameButton, SIGNAL(clicked()),
            this, SLOT(setSaveFileName()));
    connect(criticalButton, SIGNAL(clicked()), this, SLOT(criticalMessage()));
    connect(informationButton, SIGNAL(clicked()),
            this, SLOT(informationMessage()));
    connect(questionButton, SIGNAL(clicked()), this, SLOT(questionMessage()));
    connect(warningButton, SIGNAL(clicked()), this, SLOT(warningMessage()));
    connect(errorButton, SIGNAL(clicked()), this, SLOT(errorMessage()));

    QWidget *page = new QWidget;
    QGridLayout *layout = new QGridLayout(page);
    layout-&gt;setColumnStretch(1, 1);
    layout-&gt;setColumnMinimumWidth(1, 250);
    layout-&gt;addWidget(integerButton, 0, 0);
    layout-&gt;addWidget(integerLabel, 0, 1);
    layout-&gt;addWidget(doubleButton, 1, 0);
    layout-&gt;addWidget(doubleLabel, 1, 1);
    layout-&gt;addWidget(itemButton, 2, 0);
    layout-&gt;addWidget(itemLabel, 2, 1);
    layout-&gt;addWidget(textButton, 3, 0);
    layout-&gt;addWidget(textLabel, 3, 1);
    layout-&gt;addWidget(multiLineTextButton, 4, 0);
    layout-&gt;addWidget(multiLineTextLabel, 4, 1);
    layout-&gt;addItem(new QSpacerItem(0, 0, QSizePolicy::Ignored, QSizePolicy::MinimumExpanding), 5, 0);
    toolbox-&gt;addItem(page, tr(&quot;Input Dialogs&quot;));

    const QString doNotUseNativeDialog = tr(&quot;Do not use native dialog&quot;);

    page = new QWidget;
    layout = new QGridLayout(page);
    layout-&gt;setColumnStretch(1, 1);
    layout-&gt;addWidget(colorButton, 0, 0);
    layout-&gt;addWidget(colorLabel, 0, 1);
    colorDialogOptionsWidget = new DialogOptionsWidget;
    colorDialogOptionsWidget-&gt;addCheckBox(doNotUseNativeDialog, QColorDialog::DontUseNativeDialog);
    colorDialogOptionsWidget-&gt;addCheckBox(tr(&quot;Show alpha channel&quot;) , QColorDialog::ShowAlphaChannel);
    colorDialogOptionsWidget-&gt;addCheckBox(tr(&quot;No buttons&quot;) , QColorDialog::NoButtons);
    layout-&gt;addItem(new QSpacerItem(0, 0, QSizePolicy::Ignored, QSizePolicy::MinimumExpanding), 1, 0);
    layout-&gt;addWidget(colorDialogOptionsWidget, 2, 0, 1 ,2);

    toolbox-&gt;addItem(page, tr(&quot;Color Dialog&quot;));

    page = new QWidget;
    layout = new QGridLayout(page);
    layout-&gt;setColumnStretch(1, 1);
    layout-&gt;addWidget(fontButton, 0, 0);
    layout-&gt;addWidget(fontLabel, 0, 1);
    fontDialogOptionsWidget = new DialogOptionsWidget;
    fontDialogOptionsWidget-&gt;addCheckBox(doNotUseNativeDialog, QFontDialog::DontUseNativeDialog);
    fontDialogOptionsWidget-&gt;addCheckBox(tr(&quot;No buttons&quot;) , QFontDialog::NoButtons);
    layout-&gt;addItem(new QSpacerItem(0, 0, QSizePolicy::Ignored, QSizePolicy::MinimumExpanding), 1, 0);
    layout-&gt;addWidget(fontDialogOptionsWidget, 2, 0, 1 ,2);
    toolbox-&gt;addItem(page, tr(&quot;Font Dialog&quot;));

    page = new QWidget;
    layout = new QGridLayout(page);
    layout-&gt;setColumnStretch(1, 1);
    layout-&gt;addWidget(directoryButton, 0, 0);
    layout-&gt;addWidget(directoryLabel, 0, 1);
    layout-&gt;addWidget(openFileNameButton, 1, 0);
    layout-&gt;addWidget(openFileNameLabel, 1, 1);
    layout-&gt;addWidget(openFileNamesButton, 2, 0);
    layout-&gt;addWidget(openFileNamesLabel, 2, 1);
    layout-&gt;addWidget(saveFileNameButton, 3, 0);
    layout-&gt;addWidget(saveFileNameLabel, 3, 1);
    fileDialogOptionsWidget = new DialogOptionsWidget;
    fileDialogOptionsWidget-&gt;addCheckBox(doNotUseNativeDialog, QFileDialog::DontUseNativeDialog);
    fileDialogOptionsWidget-&gt;addCheckBox(tr(&quot;Show directories only&quot;), QFileDialog::ShowDirsOnly);
    fileDialogOptionsWidget-&gt;addCheckBox(tr(&quot;Do not resolve symlinks&quot;), QFileDialog::DontResolveSymlinks);
    fileDialogOptionsWidget-&gt;addCheckBox(tr(&quot;Do not confirm overwrite&quot;), QFileDialog::DontConfirmOverwrite);
    fileDialogOptionsWidget-&gt;addCheckBox(tr(&quot;Do not use sheet&quot;), QFileDialog::DontUseSheet);
    fileDialogOptionsWidget-&gt;addCheckBox(tr(&quot;Readonly&quot;), QFileDialog::ReadOnly);
    fileDialogOptionsWidget-&gt;addCheckBox(tr(&quot;Hide name filter details&quot;), QFileDialog::HideNameFilterDetails);
    layout-&gt;addItem(new QSpacerItem(0, 0, QSizePolicy::Ignored, QSizePolicy::MinimumExpanding), 4, 0);
    layout-&gt;addWidget(fileDialogOptionsWidget, 5, 0, 1 ,2);
    toolbox-&gt;addItem(page, tr(&quot;File Dialogs&quot;));

    page = new QWidget;
    layout = new QGridLayout(page);
    layout-&gt;setColumnStretch(1, 1);
    layout-&gt;addWidget(criticalButton, 0, 0);
    layout-&gt;addWidget(criticalLabel, 0, 1);
    layout-&gt;addWidget(informationButton, 1, 0);
    layout-&gt;addWidget(informationLabel, 1, 1);
    layout-&gt;addWidget(questionButton, 2, 0);
    layout-&gt;addWidget(questionLabel, 2, 1);
    layout-&gt;addWidget(warningButton, 3, 0);
    layout-&gt;addWidget(warningLabel, 3, 1);
    layout-&gt;addWidget(errorButton, 4, 0);
    layout-&gt;addWidget(errorLabel, 4, 1);
    layout-&gt;addItem(new QSpacerItem(0, 0, QSizePolicy::Ignored, QSizePolicy::MinimumExpanding), 5, 0);
    toolbox-&gt;addItem(page, tr(&quot;Message Boxes&quot;));

    setWindowTitle(tr(&quot;Standard Dialogs&quot;));
}

void Dialog::setInteger()
{
    bool ok;
    int i = QInputDialog::getInt(this, tr(&quot;QInputDialog::getInteger()&quot;),
                                 tr(&quot;Percentage:&quot;), 25, 0, 100, 1, &amp;ok);
    if (ok)
        integerLabel-&gt;setText(tr(&quot;%1%&quot;).arg(i));
}

void Dialog::setDouble()
{
    bool ok;
    double d = QInputDialog::getDouble(this, tr(&quot;QInputDialog::getDouble()&quot;),
                                       tr(&quot;Amount:&quot;), 37.56, -10000, 10000, 2, &amp;ok);
    if (ok)
        doubleLabel-&gt;setText(QString(&quot;$%1&quot;).arg(d));
}

void Dialog::setItem()
{
    QStringList items;
    items &lt;&lt; tr(&quot;Spring&quot;) &lt;&lt; tr(&quot;Summer&quot;) &lt;&lt; tr(&quot;Fall&quot;) &lt;&lt; tr(&quot;Winter&quot;);

    bool ok;
    QString item = QInputDialog::getItem(this, tr(&quot;QInputDialog::getItem()&quot;),
                                         tr(&quot;Season:&quot;), items, 0, false, &amp;ok);
    if (ok &amp;&amp; !item.isEmpty())
        itemLabel-&gt;setText(item);
}

void Dialog::setText()
{
    bool ok;
    QString text = QInputDialog::getText(this, tr(&quot;QInputDialog::getText()&quot;),
                                         tr(&quot;User name:&quot;), QLineEdit::Normal,
                                         QDir::home().dirName(), &amp;ok);
    if (ok &amp;&amp; !text.isEmpty())
        textLabel-&gt;setText(text);
}

void Dialog::setMultiLineText()
{
    bool ok;
    QString text = QInputDialog::getMultiLineText(this, tr(&quot;QInputDialog::getMultiLineText()&quot;),
                                                  tr(&quot;Address:&quot;), &quot;John Doe\nFreedom Street&quot;, &amp;ok);
    if (ok &amp;&amp; !text.isEmpty())
        multiLineTextLabel-&gt;setText(text);
}

void Dialog::setColor()
{
    const QColorDialog::ColorDialogOptions options = QFlag(colorDialogOptionsWidget-&gt;value());
    const QColor color = QColorDialog::getColor(Qt::green, this, &quot;Select Color&quot;, options);

    if (color.isValid()) {
        colorLabel-&gt;setText(color.name());
        colorLabel-&gt;setPalette(QPalette(color));
        colorLabel-&gt;setAutoFillBackground(true);
    }
}

void Dialog::setFont()
{
    const QFontDialog::FontDialogOptions options = QFlag(fontDialogOptionsWidget-&gt;value());
    bool ok;
    QFont font = QFontDialog::getFont(&amp;ok, QFont(fontLabel-&gt;text()), this, &quot;Select Font&quot;, options);
    if (ok) {
        fontLabel-&gt;setText(font.key());
        fontLabel-&gt;setFont(font);
    }
}

void Dialog::setExistingDirectory()
{
    QFileDialog::Options options = QFlag(fileDialogOptionsWidget-&gt;value());
    options |= QFileDialog::DontResolveSymlinks | QFileDialog::ShowDirsOnly;
    QString directory = QFileDialog::getExistingDirectory(this,
                                tr(&quot;QFileDialog::getExistingDirectory()&quot;),
                                directoryLabel-&gt;text(),
                                options);
    if (!directory.isEmpty())
        directoryLabel-&gt;setText(directory);
}

void Dialog::setOpenFileName()
{
    const QFileDialog::Options options = QFlag(fileDialogOptionsWidget-&gt;value());
    QString selectedFilter;
    QString fileName = QFileDialog::getOpenFileName(this,
                                tr(&quot;QFileDialog::getOpenFileName()&quot;),
                                openFileNameLabel-&gt;text(),
                                tr(&quot;All Files (*);;Text Files (*.txt)&quot;),
                                &amp;selectedFilter,
                                options);
    if (!fileName.isEmpty())
        openFileNameLabel-&gt;setText(fileName);
}

void Dialog::setOpenFileNames()
{
    const QFileDialog::Options options = QFlag(fileDialogOptionsWidget-&gt;value());
    QString selectedFilter;
    QStringList files = QFileDialog::getOpenFileNames(
                                this, tr(&quot;QFileDialog::getOpenFileNames()&quot;),
                                openFilesPath,
                                tr(&quot;All Files (*);;Text Files (*.txt)&quot;),
                                &amp;selectedFilter,
                                options);
    if (files.count()) {
        openFilesPath = files[0];
        openFileNamesLabel-&gt;setText(QString(&quot;[%1]&quot;).arg(files.join(&quot;, &quot;)));
    }
}

void Dialog::setSaveFileName()
{
    const QFileDialog::Options options = QFlag(fileDialogOptionsWidget-&gt;value());
    QString selectedFilter;
    QString fileName = QFileDialog::getSaveFileName(this,
                                tr(&quot;QFileDialog::getSaveFileName()&quot;),
                                saveFileNameLabel-&gt;text(),
                                tr(&quot;All Files (*);;Text Files (*.txt)&quot;),
                                &amp;selectedFilter,
                                options);
    if (!fileName.isEmpty())
        saveFileNameLabel-&gt;setText(fileName);
}

void Dialog::criticalMessage()
{
    QMessageBox::StandardButton reply;
    reply = QMessageBox::critical(this, tr(&quot;QMessageBox::critical()&quot;),
                                    MESSAGE,
                                    QMessageBox::Abort | QMessageBox::Retry | QMessageBox::Ignore);
    if (reply == QMessageBox::Abort)
        criticalLabel-&gt;setText(tr(&quot;Abort&quot;));
    else if (reply == QMessageBox::Retry)
        criticalLabel-&gt;setText(tr(&quot;Retry&quot;));
    else
        criticalLabel-&gt;setText(tr(&quot;Ignore&quot;));
}

void Dialog::informationMessage()
{
    QMessageBox::StandardButton reply;
    reply = QMessageBox::information(this, tr(&quot;QMessageBox::information()&quot;), MESSAGE);
    if (reply == QMessageBox::Ok)
        informationLabel-&gt;setText(tr(&quot;OK&quot;));
    else
        informationLabel-&gt;setText(tr(&quot;Escape&quot;));
}

void Dialog::questionMessage()
{
    QMessageBox::StandardButton reply;
    reply = QMessageBox::question(this, tr(&quot;QMessageBox::question()&quot;),
                                    MESSAGE,
                                    QMessageBox::Yes | QMessageBox::No | QMessageBox::Cancel);
    if (reply == QMessageBox::Yes)
        questionLabel-&gt;setText(tr(&quot;Yes&quot;));
    else if (reply == QMessageBox::No)
        questionLabel-&gt;setText(tr(&quot;No&quot;));
    else
        questionLabel-&gt;setText(tr(&quot;Cancel&quot;));
}

void Dialog::warningMessage()
{
    QMessageBox msgBox(QMessageBox::Warning, tr(&quot;QMessageBox::warning()&quot;),
                       MESSAGE, 0, this);
    msgBox.setDetailedText(MESSAGE_DETAILS);
    msgBox.addButton(tr(&quot;Save &amp;Again&quot;), QMessageBox::AcceptRole);
    msgBox.addButton(tr(&quot;&amp;Continue&quot;), QMessageBox::RejectRole);
    if (msgBox.exec() == QMessageBox::AcceptRole)
        warningLabel-&gt;setText(tr(&quot;Save Again&quot;));
    else
        warningLabel-&gt;setText(tr(&quot;Continue&quot;));

}

void Dialog::errorMessage()
{
    errorMessageDialog-&gt;showMessage(
            tr(&quot;This dialog shows and remembers error messages. &quot;
               &quot;If the checkbox is checked (as it is by default), &quot;
               &quot;the shown message will be shown again, &quot;
               &quot;but if the user unchecks the box the message &quot;
               &quot;will not appear again if QErrorMessage::showMessage() &quot;
               &quot;is called with the same message.&quot;));
    errorLabel-&gt;setText(tr(&quot;If the box is unchecked, the message &quot;
                           &quot;won't appear again.&quot;));
}

</db:programlisting>
</db:article>
