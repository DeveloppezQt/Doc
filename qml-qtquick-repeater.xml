<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Repeater QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Instantiates a number of Item-based components using a provided model.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.15</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Repeater is part of <db:simplelist><db:member>qtquick-models</db:member><db:member>qtquick-positioning</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Repeater type is used to create a large number of similar items. Like other view types, a Repeater has a <db:link xlink:href="qml-qtquick-repeater.xml#model-prop">model</db:link> and a <db:link xlink:href="qml-qtquick-repeater.xml#delegate-prop">delegate</db:link>: for each entry in the model, the delegate is instantiated in a context seeded with data from the model. A Repeater item is usually enclosed in a positioner type such as <db:link xlink:href="qml-qtquick-row.xml">Row</db:link> or <db:link xlink:href="qml-qtquick-column.xml">Column</db:link> to visually position the multiple delegate items created by the Repeater.</db:para>
<db:para>The following Repeater creates three instances of a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> item within a <db:link xlink:href="qml-qtquick-row.xml">Row</db:link>:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Row {
    Repeater {
        model: 3
        Rectangle {
            width: 100; height: 40
            border.width: 1
            color: &quot;yellow&quot;
        }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/repeater-simple.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A Repeater's <db:link xlink:href="qml-qtquick-repeater.xml#model-prop">model</db:link> can be any of the supported <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#qml-data-models">data models</db:link>. Additionally, like delegates for other views, a Repeater delegate can access its index within the repeater, as well as the model data relevant to the delegate. See the <db:link xlink:href="qml-qtquick-repeater.xml#delegate-prop">delegate</db:link> property documentation for details.</db:para>
<db:para>Items instantiated by the Repeater are inserted, in order, as children of the Repeater's parent. The insertion starts immediately after the repeater's position in its parent stacking list. This allows a Repeater to be used inside a layout. For example, the following Repeater's items are stacked between a red rectangle and a blue rectangle:</db:para>
<db:programlisting language="qml">Row {
    Rectangle { width: 10; height: 20; color: &quot;red&quot; }
    Repeater {
        model: 10
        Rectangle { width: 20; height: 20; radius: 10; color: &quot;green&quot; }
    }
    Rectangle { width: 10; height: 20; color: &quot;blue&quot; }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/repeater.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>A Repeater item owns all items it instantiates. Removing or dynamically destroying an item created by a Repeater results in unpredictable behavior.</db:para>
</db:note>
<db:section xml:id="considerations-when-using-repeater">
<db:title>Considerations when using Repeater</db:title>
<db:para>The Repeater type creates all of its delegate items when the repeater is first created. This can be inefficient if there are a large number of delegate items and not all of the items are required to be visible at the same time. If this is the case, consider using other view types like <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> (which only creates delegate items when they are scrolled into view) or use the <db:link xlink:href="qml-qtqml-qt.xml#dynamic-object-creation">Dynamic Object Creation</db:link> methods to create items as they are required.</db:para>
<db:para>Also, note that Repeater is <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>-based, and can only repeat <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>-derived objects. For example, it cannot be used to repeat QtObjects:</db:para>
<db:programlisting language="qml">// bad code:
Item {
    // Can't repeat QtObject as it doesn't derive from Item.
    Repeater {
        model: 10
        QtObject {}
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of items in the model.</db:para>
<db:note>
<db:para>The number of items in the model as reported by count may differ from the number of created delegates if the Repeater is in the process of instantiating delegates or is incorrectly set up.</db:para>
</db:note>
</db:section>
<db:section xml:id="delegate-prop">
<db:title>delegate : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>delegate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The delegate provides a template defining each item instantiated by the repeater.</db:para>
<db:para>Delegates are exposed to a read-only <db:code>index</db:code> property that indicates the index of the delegate within the repeater. For example, the following <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> delegate displays the index of each repeated item:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">Column {
    Repeater {
        model: 10
        Text { text: &quot;I'm item &quot; + index }
    }
}
</db:programlisting>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/repeater-index.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the <db:link xlink:href="qml-qtquick-repeater.xml#model-prop">model</db:link> is a <db:link xlink:href="qtquick-modelviewsdata-cppmodels.xml#qstringlist-based-model">string list</db:link> or <db:link xlink:href="qtquick-modelviewsdata-cppmodels.xml#qobjectlist-based-model">object list</db:link>, the delegate is also exposed to a read-only <db:code>modelData</db:code> property that holds the string or object data. For example:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">Column {
    Repeater {
        model: [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;]
        Text { text: &quot;Data: &quot; + modelData }
    }
}
</db:programlisting>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/repeater-modeldata.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the <db:link xlink:href="qml-qtquick-repeater.xml#model-prop">model</db:link> is a model object (such as a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link>) the delegate can access all model roles as named properties, in the same way that delegates do for view classes like <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-modelviewsdata-modelview.xml#qml-data-models">QML Data Models</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="model-prop">
<db:title>model : any</db:title>
<db:fieldsynopsis>
<db:type>any</db:type>
<db:varname>model</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The model providing data for the repeater.</db:para>
<db:para>This property can be set to any of the supported <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#qml-data-models">data models</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A number that indicates the number of delegates to be created by the repeater</db:para>
</db:listitem>
<db:listitem>
<db:para>A model (e.g. a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> item, or a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> subclass)</db:para>
</db:listitem>
<db:listitem>
<db:para>A string list</db:para>
</db:listitem>
<db:listitem>
<db:para>An object list</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The type of model affects the properties that are exposed to the <db:link xlink:href="qml-qtquick-repeater.xml#delegate-prop">delegate</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-modelviewsdata-modelview.xml#qml-data-models">Data Models</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="itemAdded-signal">
<db:title>itemAdded(int <db:emphasis>index</db:emphasis>, Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted when an item is added to the repeater. The <db:code role="parameter">index</db:code> parameter holds the index at which the item has been inserted within the repeater, and the <db:code role="parameter">item</db:code> parameter holds the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> that has been added.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onItemAdded</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="itemRemoved-signal">
<db:title>itemRemoved(int <db:emphasis>index</db:emphasis>, Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>This signal is emitted when an item is removed from the repeater. The <db:code role="parameter">index</db:code> parameter holds the index at which the item was removed from the repeater, and the <db:code role="parameter">item</db:code> parameter holds the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> that was removed.</db:para>
<db:para>Do not keep a reference to <db:code role="parameter">item</db:code> if it was created by this repeater, as in these cases it will be deleted shortly after the signal is handled.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onItemRemoved</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="itemAt-method">
<db:title>Item itemAt(<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> that has been created at the given <db:code role="parameter">index</db:code>, or <db:code>null</db:code> if no item exists at <db:code role="parameter">index</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
