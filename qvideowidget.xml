<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVideoWidget Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> class provides a widget which presents video produced by a media object.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVideoWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS MultimediaWidgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::MultimediaWidgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimediawidgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QVideoWidget is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_video</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Attaching a <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> to a <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> or <db:link xlink:href="qcamera.xml">QCamera</db:link> allows it to display the video or image output of that object.</db:para>
<db:programlisting language="cpp">player = new QMediaPlayer;
player-&amp;gt;setSource(QUrl(&quot;http://example.com/myclip1.mp4&quot;));

videoWidget = new QVideoWidget;
player-&amp;gt;setVideoOutput(videoWidget);

videoWidget-&amp;gt;show();
player-&amp;gt;play();
</db:programlisting>
<db:para><db:emphasis role="bold">Note</db:emphasis>: Only a single display output can be attached to a media object at one time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml">QCamera</db:link></db:member>
<db:member><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsvideoitem.xml">QGraphicsVideoItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="aspectRatioMode-prop">
<db:title>aspectRatioMode : Qt::AspectRatioMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::AspectRatioMode</db:type>
<db:varname>aspectRatioMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">aspectRatioMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setAspectRatioMode</db:synopsisinfo>
<db:synopsisinfo role="notifier">aspectRatioModeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>how video is scaled with respect to its aspect ratio.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::AspectRatioMode</db:link></db:type> <db:emphasis role="bold">aspectRatioMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAspectRatioMode</db:emphasis>(<db:type><db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::AspectRatioMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">aspectRatioModeChanged</db:emphasis>(<db:type><db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::AspectRatioMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="fullScreen-prop">
<db:title>fullScreen : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>fullScreen</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isFullScreen</db:synopsisinfo>
<db:synopsisinfo role="getter">isFullScreen</db:synopsisinfo>
<db:synopsisinfo role="setter">setFullScreen</db:synopsisinfo>
<db:synopsisinfo role="notifier">fullScreenChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether video display is confined to a window or is fullScreen.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qwidget.xml#fullScreen-prop">isFullScreen</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isFullScreen</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFullScreen</db:emphasis>(<db:type>bool</db:type> <db:emphasis>fullScreen</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">fullScreenChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>fullScreen</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QVideoWidget">
<db:title>[explicit] QVideoWidget::QVideoWidget(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QVideoWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoWidget(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new video widget.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QVideoWidget">
<db:title>[virtual] QVideoWidget::~QVideoWidget()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QVideoWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QVideoWidget()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a video widget.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QVideoWidget::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
<db:para>Current event <db:code role="parameter">event</db:code>. Returns the value of the base class <db:link xlink:href="qwidget.xml#event">QWidget::event</db:link>(<db:link xlink:href="qevent.xml">QEvent</db:link> *event) function.</db:para>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[override virtual protected] void QVideoWidget::hideEvent(QHideEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>hideEvent</db:methodname>
<db:methodparam>
<db:type>QHideEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hideEvent(QHideEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#hideEvent" role="function">QWidget::hideEvent(QHideEvent *event)</db:link>.</db:para>
<db:para>Handles the hide <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="moveEvent">
<db:title>[override virtual protected] void QVideoWidget::moveEvent(QMoveEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>moveEvent</db:methodname>
<db:methodparam>
<db:type>QMoveEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveEvent(QMoveEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#moveEvent" role="function">QWidget::moveEvent(QMoveEvent *event)</db:link>.</db:para>
<db:para>Handles the move <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QVideoWidget::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
<db:para>Handles the resize <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QVideoWidget::showEvent(QShowEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>showEvent</db:methodname>
<db:methodparam>
<db:type>QShowEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showEvent(QShowEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
<db:para>Handles the show <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QVideoWidget::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
<db:para>Returns the size hint for the current back end, if there is one, or else the size hint from <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
</db:section>
<db:section xml:id="videoSink">
<db:title>QVideoSink *QVideoWidget::videoSink() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVideoSink *</db:type>
<db:methodname>videoSink</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoSink * videoSink() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qvideosink.xml">QVideoSink</db:link> instance.</db:para>
</db:section>
</db:section>
</db:article>
