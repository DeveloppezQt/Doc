<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVideoWidget Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> class provides a widget which presents video produced by a media object.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVideoWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimediawidgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link> and <db:link xlink:href="qmediabindableinterface.xml" xlink:role="class">QMediaBindableInterface</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qcameraviewfinder.xml" xlink:role="class">QCameraViewfinder</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QVideoWidget is part of <db:simplelist><db:member>multimedia</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Attaching a <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> to a <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link> allows it to display the video or image output of that media object. A <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> is attached to media object by passing a pointer to the <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link> in its constructor, and detached by destroying the <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link>.</db:para>
<db:programlisting language="cpp">player = new QMediaPlayer;

playlist = new QMediaPlaylist(player);
playlist-&gt;addMedia(QUrl(&quot;http://example.com/myclip1.mp4&quot;));
playlist-&gt;addMedia(QUrl(&quot;http://example.com/myclip2.mp4&quot;));

videoWidget = new QVideoWidget;
player-&gt;setVideoOutput(videoWidget);

videoWidget-&gt;show();
playlist-&gt;setCurrentIndex(1);
player-&gt;play();
</db:programlisting>
<db:para><db:emphasis role="bold">Note</db:emphasis>: Only a single display output can be attached to a media object at one time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaobject.xml">QMediaObject</db:link></db:member>
<db:member><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsvideoitem.xml">QGraphicsVideoItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="aspectRatioMode-prop">
<db:title>aspectRatioMode : Qt::AspectRatioMode</db:title>
<db:para>how video is scaled with respect to its aspect ratio.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::AspectRatioMode</db:link></db:type> <db:emphasis role="bold">aspectRatioMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAspectRatioMode</db:emphasis>(<db:type><db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::AspectRatioMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="brightness-prop">
<db:title>brightness : int</db:title>
<db:para>This property holds an adjustment to the brightness of displayed video.</db:para>
<db:para>Valid brightness values range between -100 and 100, the default is 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">brightness</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBrightness</db:emphasis>(<db:type>int</db:type> <db:emphasis>brightness</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">brightnessChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>brightness</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="contrast-prop">
<db:title>contrast : int</db:title>
<db:para>This property holds an adjustment to the contrast of displayed video.</db:para>
<db:para>Valid contrast values range between -100 and 100, the default is 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">contrast</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setContrast</db:emphasis>(<db:type>int</db:type> <db:emphasis>contrast</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">contrastChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>contrast</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="fullScreen-prop">
<db:title>fullScreen : bool</db:title>
<db:para>This property holds whether video display is confined to a window or is fullScreen.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qwidget.xml#fullScreen-prop">isFullScreen</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isFullScreen</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFullScreen</db:emphasis>(<db:type>bool</db:type> <db:emphasis>fullScreen</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">fullScreenChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>fullScreen</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="hue-prop">
<db:title>hue : int</db:title>
<db:para>This property holds an adjustment to the hue of displayed video.</db:para>
<db:para>Valid hue values range between -100 and 100, the default is 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">hue</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHue</db:emphasis>(<db:type>int</db:type> <db:emphasis>hue</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">hueChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>hue</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="mediaObject-prop">
<db:title>mediaObject : QMediaObject* const</db:title>
<db:para>This property holds the media object which provides the video displayed by a widget.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type><db:link xlink:href="qmediaobject.xml">QMediaObject</db:link></db:type> *<db:emphasis role="bold">mediaObject</db:emphasis>() const override</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="saturation-prop">
<db:title>saturation : int</db:title>
<db:para>This property holds an adjustment to the saturation of displayed video.</db:para>
<db:para>Valid saturation values range between -100 and 100, the default is 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">saturation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSaturation</db:emphasis>(<db:type>int</db:type> <db:emphasis>saturation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">saturationChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>saturation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QVideoWidget">
<db:title>[explicit] QVideoWidget::QVideoWidget(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new video widget.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QVideoWidget">
<db:title>[virtual noexcept] QVideoWidget::~QVideoWidget()</db:title>
<db:para>Destroys a video widget.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QVideoWidget::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
<db:para>Current event <db:code role="parameter">event</db:code>. Returns the value of the baseclass <db:link xlink:href="qwidget.xml#event">QWidget::event</db:link>(<db:link xlink:href="qevent.xml">QEvent</db:link> *event) function.</db:para>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[override virtual protected] void QVideoWidget::hideEvent(QHideEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#hideEvent" role="function">QWidget::hideEvent(QHideEvent *event)</db:link>.</db:para>
<db:para>Handles the hide <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="moveEvent">
<db:title>[override virtual protected] void QVideoWidget::moveEvent(QMoveEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#moveEvent" role="function">QWidget::moveEvent(QMoveEvent *event)</db:link>.</db:para>
<db:para>Handles the move <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QVideoWidget::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
<db:para>Handles the paint <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QVideoWidget::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
<db:para>Handles the resize <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QVideoWidget::showEvent(QShowEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
<db:para>Handles the show <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QVideoWidget::sizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
<db:para>Returns the size hint for the current back end, if there is one, or else the size hint from <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
