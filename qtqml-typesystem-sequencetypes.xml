<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Sequence Types</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Description of QML sequence types.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>For every <db:link xlink:href="qtqml-typesystem-objecttypes.xml">object type</db:link> and <db:link xlink:href="qtqml-typesystem-valuetypes.xml">value type</db:link> a sequence type for storing multiple instances of the type is automatically made available. You can use the list keyword to create properties of sequence types:</db:para>
<db:programlisting language="qml">import QtQml

QtObject {
    property list&lt;int&gt; ints: [1, 2, 3, 4]
    property list&lt;Connection&gt; connections: [
        Connection {
            // ...
        },
        Connection {
            // ...
        }
    ]
}
</db:programlisting>
<db:para>Sequences of value types are implemented as <db:link xlink:href="qlist.xml">QList</db:link> and sequences of object types are implemented as <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link>.</db:para>
<db:para>Sequences in QML generally behave like the JavaScript Array type, with some important differences which result from the use of a C++ storage type in the implementation:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Deleting an element from a sequence will result in a default-constructed value replacing that element, rather than an undefined value.</db:para>
</db:listitem>
<db:listitem>
<db:para>Setting the length property of a sequence to a value larger than its current value will result in the sequence being padded out to the specified length with default-constructed elements rather than undefined elements.</db:para>
</db:listitem>
<db:listitem>
<db:para>The Qt container classes support signed (rather than unsigned) integer indexes; thus, attempting to access any index greater than the maximum number <db:link xlink:href="qttypes.xml#qsizetype-typedef">qsizetype</db:link> can hold will fail.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>If you wish to remove elements from a sequence rather than simply replace them with default constructed values, do not use the indexed delete operator (delete sequence[i]) but instead use the splice function (sequence.splice(startIndex, deleteCount)).</db:para>
<db:para>In general any container recognizable by <db:link xlink:href="qmetasequence.xml">QMetaSequence</db:link> can be passed from C++ to QML via <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> or <db:link xlink:href="qobject.xml#Q_INVOKABLE">Q_INVOKABLE</db:link> methods. This includes, but is not limited to, all registered <db:link xlink:href="qlist.xml">QList</db:link>, <db:link xlink:href="qqueue.xml">QQueue</db:link>, <db:link xlink:href="qstack.xml">QStack</db:link>, <db:link xlink:href="qset.xml">QSet</db:link>, std::list, std::vector that contain a type marked with <db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>.</db:para>
<db:para>Using a sequence via <db:link xlink:href="qmetasequence.xml">QMetaSequence</db:link> results in expensive data conversions. To avoid the conversions you can register your own anonymous sequence types using <db:link xlink:href="qqmlintegration-h-qtqml-proxy.xml#QML_SEQUENTIAL_CONTAINER">QML_SEQUENTIAL_CONTAINER</db:link> from C++. Types registered this way behave like the pre-defined sequence types and are stored as-is. However, they have no QML names.</db:para>
<db:warning>
<db:para>Sequences stored as a C++ container like <db:link xlink:href="qlist.xml">QList</db:link> or std::vector are subject to the effects caused by <db:link xlink:href="qtqml-typesystem-references.xml">QML Value Type and Sequence References</db:link> and should thus be handled with care. <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> is not affected since it is only a view for an underlying container. C++ standard containers such as std::vector are not implicitly shared. Therefore, copying them always produces a deep copy. Since a sequence read from a property always has to be copied at least once, using such containers as QML sequences is rather expensive, even if you don't modify them from QML.</db:para>
</db:warning>
<db:para>The <db:link xlink:href="qtqml-qmlmodule.xml">QtQml</db:link> module contains a few <db:link xlink:href="qtqml-qmlmodule.xml#sequence-types">sequence types</db:link> you may want to use.</db:para>
</db:article>
