<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSctpServer Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsctpserver.xml">QSctpServer</db:link> class provides an SCTP-based server.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSctpServer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtcpserver.xml" xlink:role="class">QTcpServer</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSctpServer is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>SCTP (Stream Control Transmission Protocol) is a transport layer protocol serving in a similar role as the popular protocols TCP and UDP. Like UDP, SCTP is message-oriented, but it ensures reliable, in-sequence transport of messages with congestion control like TCP. See the <db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> documentation for more protocol details.</db:para>
<db:para><db:link xlink:href="qsctpserver.xml">QSctpServer</db:link> is a convenience subclass of <db:link xlink:href="qtcpserver.xml">QTcpServer</db:link> that allows you to accept incoming SCTP socket connections either in TCP emulation or in datagram mode.</db:para>
<db:para>The most common way to use <db:link xlink:href="qsctpserver.xml">QSctpServer</db:link> is to construct an object and set the maximum number of channels that the server is prepared to support, by calling <db:link xlink:href="qsctpserver.xml#setMaximumChannelCount">setMaximumChannelCount</db:link>(). You can set the TCP emulation mode by passing a negative argument in this call. Also, a special value of 0 (the default) indicates to use the peer's value as the actual number of channels. The new incoming connection inherits this number from the server socket descriptor and adjusts it according to the remote endpoint settings.</db:para>
<db:para>In TCP emulation mode, accepted clients use a single continuous byte stream for data transmission, and <db:link xlink:href="qsctpserver.xml">QSctpServer</db:link> acts like a plain <db:link xlink:href="qtcpserver.xml">QTcpServer</db:link>. Call <db:link xlink:href="qtcpserver.xml#nextPendingConnection">nextPendingConnection</db:link>() to accept the pending connection as a connected <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link>. The function returns a pointer to a <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> in <db:link xlink:href="qabstractsocket.xml#SocketState-enum">QAbstractSocket::ConnectedState</db:link> that you can use for communicating with the client. This mode gives access only to basic SCTP protocol features. The socket transmits SCTP packets over IP at system level and interacts through the <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> interface with the application.</db:para>
<db:para>In contrast, datagram mode is message-oriented and provides a complete simultaneous transmission of multiple data streams between endpoints. Call <db:link xlink:href="qsctpserver.xml#nextPendingDatagramConnection">nextPendingDatagramConnection</db:link>() to accept the pending datagram-mode connection as a connected <db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link>.</db:para>
<db:note>
<db:para>This class is not supported on the Windows platform.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtcpserver.xml">QTcpServer</db:link></db:member>
<db:member><db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link></db:member>
<db:member><db:link xlink:href="qabstractsocket.xml">QAbstractSocket</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSctpServer">
<db:title>[explicit] QSctpServer::QSctpServer(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSctpServer</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSctpServer(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsctpserver.xml">QSctpServer</db:link> object.</db:para>
<db:para>Sets the datagram operation mode. The <db:code role="parameter">parent</db:code> argument is passed to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsctpserver.xml#setMaximumChannelCount">setMaximumChannelCount</db:link>()</db:member>
<db:member><db:link xlink:href="qtcpserver.xml#listen">listen</db:link>()</db:member>
<db:member><db:link xlink:href="qtcpserver.xml#setSocketDescriptor">setSocketDescriptor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QSctpServer">
<db:title>[virtual] QSctpServer::~QSctpServer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSctpServer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSctpServer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qsctpserver.xml">QSctpServer</db:link> object. If the server is listening for connections, the socket is automatically closed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtcpserver.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="incomingConnection">
<db:title>[override virtual protected] void QSctpServer::incomingConnection(qintptr <db:emphasis>socketDescriptor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>incomingConnection</db:methodname>
<db:methodparam>
<db:type>qintptr</db:type>
<db:parameter>socketDescriptor</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void incomingConnection(qintptr socketDescriptor) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qtcpserver.xml#incomingConnection" role="function">QTcpServer::incomingConnection(qintptr socketDescriptor)</db:link>.</db:para>
</db:section>
<db:section xml:id="maximumChannelCount">
<db:title>int QSctpServer::maximumChannelCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maximumChannelCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maximumChannelCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum number of channels that the accepted sockets are able to support.</db:para>
<db:para>A value of 0 (the default) means that the number of connection channels would be set by the remote endpoint.</db:para>
<db:para>Returns -1, if <db:link xlink:href="qsctpserver.xml">QSctpServer</db:link> running in TCP emulation mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsctpserver.xml#setMaximumChannelCount">setMaximumChannelCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextPendingDatagramConnection">
<db:title>QSctpSocket *QSctpServer::nextPendingDatagramConnection()</db:title>
<db:methodsynopsis>
<db:type>QSctpSocket *</db:type>
<db:methodname>nextPendingDatagramConnection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSctpSocket * nextPendingDatagramConnection()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the next pending datagram-mode connection as a connected <db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> object.</db:para>
<db:para>Datagram-mode connection provides a message-oriented, multi-stream communication.</db:para>
<db:para>The socket is created as a child of the server, which means that it is automatically deleted when the <db:link xlink:href="qsctpserver.xml">QSctpServer</db:link> object is destroyed. It is still a good idea to delete the object explicitly when you are done with it, to avoid wasting memory.</db:para>
<db:para>This function returns null if there are no pending datagram-mode connections.</db:para>
<db:note>
<db:para>The returned <db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> object cannot be used from another thread. If you want to use an incoming connection from another thread, you need to override <db:link xlink:href="qsctpserver.xml#incomingConnection">incomingConnection</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtcpserver.xml#hasPendingConnections">hasPendingConnections</db:link>()</db:member>
<db:member><db:link xlink:href="qtcpserver.xml#nextPendingConnection">nextPendingConnection</db:link>()</db:member>
<db:member><db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumChannelCount">
<db:title>void QSctpServer::setMaximumChannelCount(int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumChannelCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumChannelCount(int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum number of channels that the server is prepared to support in datagram mode, to <db:code role="parameter">count</db:code>. If <db:code role="parameter">count</db:code> is 0, endpoint maximum number of channels value would be used. Negative <db:code role="parameter">count</db:code> sets a TCP emulation mode.</db:para>
<db:para>Call this method only when <db:link xlink:href="qsctpserver.xml">QSctpServer</db:link> is in UnconnectedState.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsctpserver.xml#maximumChannelCount">maximumChannelCount</db:link>()</db:member>
<db:member><db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
