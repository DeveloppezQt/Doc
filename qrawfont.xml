<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRawFont Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qrawfont.xml">QRawFont</db:link> class provides access to a single physical instance of a font.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRawFont</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRawFont is part of <db:simplelist><db:member>text</db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:note>
<db:para><db:link xlink:href="qrawfont.xml">QRawFont</db:link> is a low level class. For most purposes <db:link xlink:href="qfont.xml">QFont</db:link> is a more appropriate class.</db:para>
</db:note>
<db:para>Most commonly, when presenting text in a user interface, the exact fonts used to render the characters is to some extent unknown. This can be the case for several reasons: For instance, the actual, physical fonts present on the target system could be unexpected to the developers, or the text could contain user selected styles, sizes or writing systems that are not supported by font chosen in the code.</db:para>
<db:para>Therefore, Qt's <db:link xlink:href="qfont.xml">QFont</db:link> class really represents a query for fonts. When text is interpreted, Qt will do its best to match the text to the query, but depending on the support, different fonts can be used behind the scenes.</db:para>
<db:para>For most use cases, this is both expected and necessary, as it minimizes the possibility of text in the user interface being undisplayable. In some cases, however, more direct control over the process might be useful. It is for these use cases the <db:link xlink:href="qrawfont.xml">QRawFont</db:link> class exists.</db:para>
<db:para>A <db:link xlink:href="qrawfont.xml">QRawFont</db:link> object represents a single, physical instance of a given font in a given pixel size. I.e. in the typical case it represents a set of TrueType or OpenType font tables and uses a user specified pixel size to convert metrics into logical pixel units. It can be used in combination with the <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> class to draw specific glyph indexes at specific positions, and also have accessors to some relevant data in the physical font.</db:para>
<db:para><db:link xlink:href="qrawfont.xml">QRawFont</db:link> only provides support for the main font technologies: GDI and DirectWrite on Windows platforms, FreeType on Linux platforms and CoreText on macOS. For other font back-ends, the APIs will be disabled.</db:para>
<db:para><db:link xlink:href="qrawfont.xml">QRawFont</db:link> can be constructed in a number of ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>It can be constructed by calling QTextLayout::glyphs() or QTextFragment::glyphs(). The returned QGlyphs objects will contain <db:link xlink:href="qrawfont.xml">QRawFont</db:link> objects which represent the actual fonts used to render each portion of the text.</db:para>
</db:listitem>
<db:listitem>
<db:para>It can be constructed by passing a <db:link xlink:href="qfont.xml">QFont</db:link> object to <db:link xlink:href="qrawfont.xml#fromFont">QRawFont::fromFont</db:link>(). The function will return a <db:link xlink:href="qrawfont.xml">QRawFont</db:link> object representing the font that will be selected as response to the <db:link xlink:href="qfont.xml">QFont</db:link> query and the selected writing system.</db:para>
</db:listitem>
<db:listitem>
<db:para>It can be constructed by passing a file name or <db:link xlink:href="qbytearray.xml">QByteArray</db:link> directly to the <db:link xlink:href="qrawfont.xml">QRawFont</db:link> constructor, or by calling <db:link xlink:href="qrawfont.xml#loadFromFile">loadFromFile</db:link>() or <db:link xlink:href="qrawfont.xml#loadFromData">loadFromData</db:link>(). In this case, the font will not be registered in <db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link>, and it will not be available as part of regular font selection.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qrawfont.xml">QRawFont</db:link> is considered local to the thread in which it is constructed (either using a constructor, or by calling <db:link xlink:href="qrawfont.xml#loadFromData">loadFromData</db:link>() or <db:link xlink:href="qrawfont.xml#loadFromFile">loadFromFile</db:link>()). The <db:link xlink:href="qrawfont.xml">QRawFont</db:link> cannot be moved to a different thread, but will have to be recreated in the thread in question.</db:para>
<db:note>
<db:para>For the requirement of caching glyph indexes and font selections for static text to avoid reshaping and relayouting in the inner loop of an application, a better choice is the <db:link xlink:href="qstatictext.xml">QStaticText</db:link> class, since it optimizes the memory cost of the cache and also provides the possibility of paint engine specific caches for an additional speed-up.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AntialiasingType-enum">
<db:title>enum QRawFont::AntialiasingType</db:title>
<db:enumsynopsis>
<db:enumname>AntialiasingType</db:enumname>
<db:enumitem>
<db:enumidentifier>PixelAntialiasing</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SubPixelAntialiasing</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum represents the different ways a glyph can be rasterized in the function <db:link xlink:href="qrawfont.xml#alphaMapForGlyph">alphaMapForGlyph</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrawfont.xml">QRawFont</db:link></db:emphasis>::PixelAntialiasing</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Will rasterize by measuring the coverage of the shape on whole pixels. The returned image contains the alpha values of each pixel based on the coverage of the glyph shape.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrawfont.xml">QRawFont</db:link></db:emphasis>::SubPixelAntialiasing</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Will rasterize by measuring the coverage of each subpixel, returning a separate alpha value for each of the red, green and blue components of each pixel.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="LayoutFlag-enum">
<db:title>[since 5.1] enum QRawFont::LayoutFlag</db:title>
<db:bridgehead renderas="sect2">flags QRawFont::LayoutFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>LayoutFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>SeparateAdvances</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>KernedAdvances</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UseDesignMetrics</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QRawFont::LayoutFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum tells the function <db:link xlink:href="qrawfont.xml#advancesForGlyphIndexes">advancesForGlyphIndexes</db:link>() how to calculate the advances.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrawfont.xml">QRawFont</db:link></db:emphasis>::SeparateAdvances</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Will calculate the advance for each glyph separately.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrawfont.xml">QRawFont</db:link></db:emphasis>::KernedAdvances</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Will apply kerning between adjacent glyphs. Note that OpenType GPOS based kerning is currently not supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrawfont.xml">QRawFont</db:link></db:emphasis>::UseDesignMetrics</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Use design metrics instead of hinted metrics adjusted to the resolution of the paint device. Can be OR-ed with any of the options above.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.1.</db:para>
<db:para>The <db:code>LayoutFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;LayoutFlag&gt;. </db:code>It stores an OR combination of <db:code>LayoutFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRawFont">
<db:title>QRawFont::QRawFont()</db:title>
<db:constructorsynopsis>
<db:methodname>QRawFont</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QRawFont()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an invalid <db:link xlink:href="qrawfont.xml">QRawFont</db:link>.</db:para>
</db:section>
<db:section xml:id="QRawFont-1">
<db:title>QRawFont::QRawFont(const QString &amp;<db:emphasis>fileName</db:emphasis>, qreal <db:emphasis>pixelSize</db:emphasis>, QFont::HintingPreference <db:emphasis>hintingPreference</db:emphasis> = QFont::PreferDefaultHinting)</db:title>
<db:constructorsynopsis>
<db:methodname>QRawFont</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QFont::HintingPreference</db:type>
<db:parameter>hintingPreference</db:parameter>
<db:initializer>QFont::PreferDefaultHinting</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRawFont(const QString &amp;fileName, qreal pixelSize, QFont::HintingPreference hintingPreference)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qrawfont.xml">QRawFont</db:link> representing the font contained in the file referenced by <db:code role="parameter">fileName</db:code> for the size (in pixels) given by <db:code role="parameter">pixelSize</db:code>, and using the hinting preference specified by <db:code role="parameter">hintingPreference</db:code>.</db:para>
<db:note>
<db:para>The referenced file must contain a TrueType or OpenType font.</db:para>
</db:note>
</db:section>
<db:section xml:id="QRawFont-2">
<db:title>QRawFont::QRawFont(const QByteArray &amp;<db:emphasis>fontData</db:emphasis>, qreal <db:emphasis>pixelSize</db:emphasis>, QFont::HintingPreference <db:emphasis>hintingPreference</db:emphasis> = QFont::PreferDefaultHinting)</db:title>
<db:constructorsynopsis>
<db:methodname>QRawFont</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>fontData</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QFont::HintingPreference</db:type>
<db:parameter>hintingPreference</db:parameter>
<db:initializer>QFont::PreferDefaultHinting</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QRawFont(const QByteArray &amp;fontData, qreal pixelSize, QFont::HintingPreference hintingPreference)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qrawfont.xml">QRawFont</db:link> representing the font contained in the supplied <db:code role="parameter">fontData</db:code> for the size (in pixels) given by <db:code role="parameter">pixelSize</db:code>, and using the hinting preference specified by <db:code role="parameter">hintingPreference</db:code>.</db:para>
<db:note>
<db:para>The data must contain a TrueType or OpenType font.</db:para>
</db:note>
</db:section>
<db:section xml:id="QRawFont-3">
<db:title>QRawFont::QRawFont(const QRawFont &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRawFont</db:methodname>
<db:methodparam>
<db:type>const QRawFont &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QRawFont(const QRawFont &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qrawfont.xml">QRawFont</db:link> which is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QRawFont">
<db:title>QRawFont::~QRawFont()</db:title>
<db:destructorsynopsis>
<db:methodname>~QRawFont</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QRawFont()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qrawfont.xml">QRawFont</db:link></db:para>
</db:section>
<db:section xml:id="advancesForGlyphIndexes">
<db:title>[since 5.1] QList&lt;QPointF&gt; QRawFont::advancesForGlyphIndexes(const QList&lt;quint32&gt; &amp;<db:emphasis>glyphIndexes</db:emphasis>, QRawFont::LayoutFlags <db:emphasis>layoutFlags</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPointF&gt;</db:type>
<db:methodname>advancesForGlyphIndexes</db:methodname>
<db:methodparam>
<db:type>const QList&lt;quint32&gt; &amp;</db:type>
<db:parameter>glyphIndexes</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRawFont::LayoutFlags</db:type>
<db:parameter>layoutFlags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPointF&gt; advancesForGlyphIndexes(const QList&lt;quint32&gt; &amp;glyphIndexes, QRawFont::LayoutFlags layoutFlags) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qrawfont.xml">QRawFont</db:link>'s advances for each of the <db:code role="parameter">glyphIndexes</db:code> in pixel units. The advances give the distance from the position of a given glyph to where the next glyph should be drawn to make it appear as if the two glyphs are unspaced. How the advances are calculated is controlled by <db:code role="parameter">layoutFlags</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#horizontalAdvance">QTextLine::horizontalAdvance</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetricsf.xml#horizontalAdvance">QFontMetricsF::horizontalAdvance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="advancesForGlyphIndexes-1">
<db:title>QList&lt;QPointF&gt; QRawFont::advancesForGlyphIndexes(const QList&lt;quint32&gt; &amp;<db:emphasis>glyphIndexes</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPointF&gt;</db:type>
<db:methodname>advancesForGlyphIndexes</db:methodname>
<db:methodparam>
<db:type>const QList&lt;quint32&gt; &amp;</db:type>
<db:parameter>glyphIndexes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPointF&gt; advancesForGlyphIndexes(const QList&lt;quint32&gt; &amp;glyphIndexes) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the <db:link xlink:href="qrawfont.xml">QRawFont</db:link>'s advances for each of the <db:code role="parameter">glyphIndexes</db:code> in pixel units. The advances give the distance from the position of a given glyph to where the next glyph should be drawn to make it appear as if the two glyphs are unspaced. The advance of each glyph is calculated separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#horizontalAdvance">QTextLine::horizontalAdvance</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetricsf.xml#horizontalAdvance">QFontMetricsF::horizontalAdvance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="advancesForGlyphIndexes-2">
<db:title>bool QRawFont::advancesForGlyphIndexes(const quint32 *<db:emphasis>glyphIndexes</db:emphasis>, QPointF *<db:emphasis>advances</db:emphasis>, int <db:emphasis>numGlyphs</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>advancesForGlyphIndexes</db:methodname>
<db:methodparam>
<db:type>const quint32 *</db:type>
<db:parameter>glyphIndexes</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPointF *</db:type>
<db:parameter>advances</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>numGlyphs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool advancesForGlyphIndexes(const quint32 *glyphIndexes, QPointF *advances, int numGlyphs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the <db:link xlink:href="qrawfont.xml">QRawFont</db:link>'s advances for each of the <db:code role="parameter">glyphIndexes</db:code> in pixel units. The advances give the distance from the position of a given glyph to where the next glyph should be drawn to make it appear as if the two glyphs are unspaced. The glyph indexes are given with the array <db:code role="parameter">glyphIndexes</db:code> while the results are returned through <db:code role="parameter">advances</db:code>, both of them must have <db:code role="parameter">numGlyphs</db:code> elements. The advance of each glyph is calculated separately</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#horizontalAdvance">QTextLine::horizontalAdvance</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetricsf.xml#horizontalAdvance">QFontMetricsF::horizontalAdvance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="advancesForGlyphIndexes-3">
<db:title>[since 5.1] bool QRawFont::advancesForGlyphIndexes(const quint32 *<db:emphasis>glyphIndexes</db:emphasis>, QPointF *<db:emphasis>advances</db:emphasis>, int <db:emphasis>numGlyphs</db:emphasis>, QRawFont::LayoutFlags <db:emphasis>layoutFlags</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>advancesForGlyphIndexes</db:methodname>
<db:methodparam>
<db:type>const quint32 *</db:type>
<db:parameter>glyphIndexes</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPointF *</db:type>
<db:parameter>advances</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>numGlyphs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRawFont::LayoutFlags</db:type>
<db:parameter>layoutFlags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool advancesForGlyphIndexes(const quint32 *glyphIndexes, QPointF *advances, int numGlyphs, QRawFont::LayoutFlags layoutFlags) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qrawfont.xml">QRawFont</db:link>'s advances for each of the <db:code role="parameter">glyphIndexes</db:code> in pixel units. The advances give the distance from the position of a given glyph to where the next glyph should be drawn to make it appear as if the two glyphs are unspaced. The glyph indexes are given with the array <db:code role="parameter">glyphIndexes</db:code> while the results are returned through <db:code role="parameter">advances</db:code>, both of them must have <db:code role="parameter">numGlyphs</db:code> elements. How the advances are calculated is controlled by <db:code role="parameter">layoutFlags</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#horizontalAdvance">QTextLine::horizontalAdvance</db:link>()</db:member>
<db:member><db:link xlink:href="qfontmetricsf.xml#horizontalAdvance">QFontMetricsF::horizontalAdvance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="alphaMapForGlyph">
<db:title>QImage QRawFont::alphaMapForGlyph(quint32 <db:emphasis>glyphIndex</db:emphasis>, QRawFont::AntialiasingType <db:emphasis>antialiasingType</db:emphasis> = SubPixelAntialiasing, const QTransform &amp;<db:emphasis>transform</db:emphasis> = QTransform()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QImage</db:type>
<db:methodname>alphaMapForGlyph</db:methodname>
<db:methodparam>
<db:type>quint32</db:type>
<db:parameter>glyphIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRawFont::AntialiasingType</db:type>
<db:parameter>antialiasingType</db:parameter>
<db:initializer>SubPixelAntialiasing</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>transform</db:parameter>
<db:initializer>QTransform()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage alphaMapForGlyph(quint32 glyphIndex, QRawFont::AntialiasingType antialiasingType, const QTransform &amp;transform) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns a rasterized image of the glyph at the given <db:code role="parameter">glyphIndex</db:code> in the underlying font, using the <db:code role="parameter">transform</db:code> specified. If the <db:link xlink:href="qrawfont.xml">QRawFont</db:link> is not valid, this function will return an invalid <db:link xlink:href="qimage.xml">QImage</db:link>.</db:para>
<db:para>If the font is a color font, then the resulting image will contain the rendered glyph at the current pixel size. In this case, the <db:code role="parameter">antialiasingType</db:code> will be ignored.</db:para>
<db:para>Otherwise, if <db:code role="parameter">antialiasingType</db:code> is set to <db:link xlink:href="qrawfont.xml#AntialiasingType-enum">QRawFont::SubPixelAntialiasing</db:link>, then the resulting image will be in <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_RGB32</db:link> and the RGB values of each pixel will represent the subpixel opacities of the pixel in the rasterization of the glyph. Otherwise, the image will be in the format of <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_Indexed8</db:link> and each pixel will contain the opacity of the pixel in the rasterization.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrawfont.xml#pathForGlyph">pathForGlyph</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawGlyphRun">QPainter::drawGlyphRun</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ascent">
<db:title>qreal QRawFont::ascent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>ascent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal ascent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the ascent of this <db:link xlink:href="qrawfont.xml">QRawFont</db:link> in pixel units.</db:para>
<db:para>The ascent of a font is the distance from the baseline to the highest position characters extend to. In practice, some font designers break this rule, e.g. when they put more than one accent on top of a character, or to accommodate an unusual character in an exotic language, so it is possible (though rare) that this value will be too small.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetricsf.xml#ascent">QFontMetricsF::ascent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="averageCharWidth">
<db:title>qreal QRawFont::averageCharWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>averageCharWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal averageCharWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the average character width of this <db:link xlink:href="qrawfont.xml">QRawFont</db:link> in pixel units.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetricsf.xml#averageCharWidth">QFontMetricsF::averageCharWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect">
<db:title>[since 5.0] QRectF QRawFont::boundingRect(quint32 <db:emphasis>glyphIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>boundingRect</db:methodname>
<db:methodparam>
<db:type>quint32</db:type>
<db:parameter>glyphIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF boundingRect(quint32 glyphIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the smallest rectangle containing the glyph with the given <db:code role="parameter">glyphIndex</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="capHeight">
<db:title>[since 5.8] qreal QRawFont::capHeight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>capHeight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal capHeight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cap height of this <db:link xlink:href="qrawfont.xml">QRawFont</db:link> in pixel units.</db:para>
<db:para>The cap height of a font is the height of a capital letter above the baseline. It specifically is the height of capital letters that are flat - such as H or I - as opposed to round letters such as O, or pointed letters like A, both of which may display overshoot.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetricsf.xml#capHeight">QFontMetricsF::capHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="descent">
<db:title>qreal QRawFont::descent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>descent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal descent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the descent of this <db:link xlink:href="qrawfont.xml">QRawFont</db:link> in pixel units.</db:para>
<db:para>The descent is the distance from the base line to the lowest point characters extend to. In practice, some font designers break this rule, e.g. to accommodate an unusual character in an exotic language, so it is possible (though rare) that this value will be too small.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetricsf.xml#descent">QFontMetricsF::descent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="familyName">
<db:title>QString QRawFont::familyName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>familyName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString familyName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the family name of this <db:link xlink:href="qrawfont.xml">QRawFont</db:link>.</db:para>
</db:section>
<db:section xml:id="fontTable">
<db:title>QByteArray QRawFont::fontTable(const char *<db:emphasis>tagName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>fontTable</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>tagName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray fontTable(const char *tagName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the sfnt table named <db:code role="parameter">tagName</db:code> from the underlying physical font, or an empty byte array if no such table was found. The returned font table's byte order is Big Endian, like the sfnt format specifies. The <db:code role="parameter">tagName</db:code> must be four characters long and should be formatted in the default endianness of the current platform.</db:para>
</db:section>
<db:section xml:id="fromFont">
<db:title>[static] QRawFont QRawFont::fromFont(const QFont &amp;<db:emphasis>font</db:emphasis>, QFontDatabase::WritingSystem <db:emphasis>writingSystem</db:emphasis> = QFontDatabase::Any)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QRawFont</db:type>
<db:methodname>fromFont</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QFontDatabase::WritingSystem</db:type>
<db:parameter>writingSystem</db:parameter>
<db:initializer>QFontDatabase::Any</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRawFont fromFont(const QFont &amp;font, QFontDatabase::WritingSystem writingSystem)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Fetches the physical representation based on a <db:code role="parameter">font</db:code> query. The physical font returned is the font that will be preferred by Qt in order to display text in the selected <db:code role="parameter">writingSystem</db:code>.</db:para>
<db:warning>
<db:para>This function is potentially expensive and should not be called in performance sensitive code.</db:para>
</db:warning>
</db:section>
<db:section xml:id="glyphIndexesForChars">
<db:title>bool QRawFont::glyphIndexesForChars(const QChar *<db:emphasis>chars</db:emphasis>, int <db:emphasis>numChars</db:emphasis>, quint32 *<db:emphasis>glyphIndexes</db:emphasis>, int *<db:emphasis>numGlyphs</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>glyphIndexesForChars</db:methodname>
<db:methodparam>
<db:type>const QChar *</db:type>
<db:parameter>chars</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>numChars</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>quint32 *</db:type>
<db:parameter>glyphIndexes</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>numGlyphs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool glyphIndexesForChars(const QChar *chars, int numChars, quint32 *glyphIndexes, int *numGlyphs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts a string of unicode points to glyph indexes using the CMAP table in the underlying font. The function works like <db:link xlink:href="qrawfont.xml#glyphIndexesForString">glyphIndexesForString</db:link>() except it take an array (<db:code role="parameter">chars</db:code>), the results will be returned though <db:code role="parameter">glyphIndexes</db:code> array and number of glyphs will be set in <db:code role="parameter">numGlyphs</db:code>. The size of <db:code role="parameter">glyphIndexes</db:code> array must be at least <db:code role="parameter">numChars</db:code>, if that's still not enough, this function will return false, then you can resize <db:code role="parameter">glyphIndexes</db:code> from the size returned in <db:code role="parameter">numGlyphs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrawfont.xml#glyphIndexesForString">glyphIndexesForString</db:link>()</db:member>
<db:member><db:link xlink:href="qrawfont.xml#advancesForGlyphIndexes">advancesForGlyphIndexes</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link></db:member>
<db:member><db:link xlink:href="qtextlayout.xml#glyphRuns">QTextLayout::glyphRuns</db:link>()</db:member>
<db:member><db:link xlink:href="qtextfragment.xml#glyphRuns">QTextFragment::glyphRuns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="glyphIndexesForString">
<db:title>QList&lt;quint32&gt; QRawFont::glyphIndexesForString(const QString &amp;<db:emphasis>text</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;quint32&gt;</db:type>
<db:methodname>glyphIndexesForString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;quint32&gt; glyphIndexesForString(const QString &amp;text) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the string of unicode points given by <db:code role="parameter">text</db:code> to glyph indexes using the CMAP table in the underlying font, and returns a list containing the result.</db:para>
<db:para>Note that, in cases where there are other tables in the font that affect the shaping of the text, the returned glyph indexes will not correctly represent the rendering of the text. To get the correctly shaped text, you can use <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> to lay out and shape the text, then call QTextLayout::glyphs() to get the set of glyph index list and <db:link xlink:href="qrawfont.xml">QRawFont</db:link> pairs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrawfont.xml#advancesForGlyphIndexes">advancesForGlyphIndexes</db:link>()</db:member>
<db:member><db:link xlink:href="qrawfont.xml#glyphIndexesForChars">glyphIndexesForChars</db:link>()</db:member>
<db:member><db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link></db:member>
<db:member><db:link xlink:href="qtextlayout.xml#glyphRuns">QTextLayout::glyphRuns</db:link>()</db:member>
<db:member><db:link xlink:href="qtextfragment.xml#glyphRuns">QTextFragment::glyphRuns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hintingPreference">
<db:title>QFont::HintingPreference QRawFont::hintingPreference() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont::HintingPreference</db:type>
<db:methodname>hintingPreference</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont::HintingPreference hintingPreference() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hinting preference used to construct this <db:link xlink:href="qrawfont.xml">QRawFont</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#hintingPreference">QFont::hintingPreference</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QRawFont::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qrawfont.xml">QRawFont</db:link> is valid and false otherwise.</db:para>
</db:section>
<db:section xml:id="leading">
<db:title>qreal QRawFont::leading() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>leading</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal leading() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the leading of this <db:link xlink:href="qrawfont.xml">QRawFont</db:link> in pixel units.</db:para>
<db:para>This is the natural inter-line spacing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetricsf.xml#leading">QFontMetricsF::leading</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineThickness">
<db:title>qreal QRawFont::lineThickness() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>lineThickness</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal lineThickness() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the thickness for drawing lines (underline, overline, etc.) along with text drawn in this font.</db:para>
</db:section>
<db:section xml:id="loadFromData">
<db:title>void QRawFont::loadFromData(const QByteArray &amp;<db:emphasis>fontData</db:emphasis>, qreal <db:emphasis>pixelSize</db:emphasis>, QFont::HintingPreference <db:emphasis>hintingPreference</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadFromData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>fontData</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QFont::HintingPreference</db:type>
<db:parameter>hintingPreference</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadFromData(const QByteArray &amp;fontData, qreal pixelSize, QFont::HintingPreference hintingPreference)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the current <db:link xlink:href="qrawfont.xml">QRawFont</db:link> with the font contained in the supplied <db:code role="parameter">fontData</db:code> for the size (in pixels) given by <db:code role="parameter">pixelSize</db:code>, and using the hinting preference specified by <db:code role="parameter">hintingPreference</db:code>.</db:para>
<db:para>The <db:code role="parameter">fontData</db:code> must contain a TrueType or OpenType font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrawfont.xml#loadFromFile">loadFromFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadFromFile">
<db:title>void QRawFont::loadFromFile(const QString &amp;<db:emphasis>fileName</db:emphasis>, qreal <db:emphasis>pixelSize</db:emphasis>, QFont::HintingPreference <db:emphasis>hintingPreference</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadFromFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QFont::HintingPreference</db:type>
<db:parameter>hintingPreference</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadFromFile(const QString &amp;fileName, qreal pixelSize, QFont::HintingPreference hintingPreference)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the current <db:link xlink:href="qrawfont.xml">QRawFont</db:link> with the contents of the file referenced by <db:code role="parameter">fileName</db:code> for the size (in pixels) given by <db:code role="parameter">pixelSize</db:code>, and using the hinting preference specified by <db:code role="parameter">hintingPreference</db:code>.</db:para>
<db:para>The file must reference a TrueType or OpenType font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrawfont.xml#loadFromData">loadFromData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maxCharWidth">
<db:title>qreal QRawFont::maxCharWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>maxCharWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal maxCharWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of the widest character in the font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetricsf.xml#maxWidth">QFontMetricsF::maxWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pathForGlyph">
<db:title>QPainterPath QRawFont::pathForGlyph(quint32 <db:emphasis>glyphIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>pathForGlyph</db:methodname>
<db:methodparam>
<db:type>quint32</db:type>
<db:parameter>glyphIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath pathForGlyph(quint32 glyphIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns the shape of the glyph at a given <db:code role="parameter">glyphIndex</db:code> in the underlying font if the <db:link xlink:href="qrawfont.xml">QRawFont</db:link> is valid. Otherwise, it returns an empty <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link>.</db:para>
<db:para>The returned glyph will always be unhinted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrawfont.xml#alphaMapForGlyph">alphaMapForGlyph</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#addText">QPainterPath::addText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixelSize">
<db:title>qreal QRawFont::pixelSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>pixelSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal pixelSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pixel size set for this <db:link xlink:href="qrawfont.xml">QRawFont</db:link>. The pixel size affects how glyphs are rasterized, the size of glyphs returned by <db:link xlink:href="qrawfont.xml#pathForGlyph">pathForGlyph</db:link>(), and is used to convert internal metrics from design units to logical pixel units.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrawfont.xml#setPixelSize">setPixelSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPixelSize">
<db:title>void QRawFont::setPixelSize(qreal <db:emphasis>pixelSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPixelSize</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPixelSize(qreal pixelSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pixel size with which this font should be rendered to <db:code role="parameter">pixelSize</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrawfont.xml#pixelSize">pixelSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="style">
<db:title>QFont::Style QRawFont::style() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont::Style</db:type>
<db:methodname>style</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont::Style style() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the style of this <db:link xlink:href="qrawfont.xml">QRawFont</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#style">QFont::style</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="styleName">
<db:title>QString QRawFont::styleName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>styleName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString styleName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the style name of this <db:link xlink:href="qrawfont.xml">QRawFont</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#styleName">QFont::styleName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedWritingSystems">
<db:title>QList&lt;QFontDatabase::WritingSystem&gt; QRawFont::supportedWritingSystems() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QFontDatabase::WritingSystem&gt;</db:type>
<db:methodname>supportedWritingSystems</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QFontDatabase::WritingSystem&gt; supportedWritingSystems() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of writing systems supported by the font according to designer supplied information in the font file. Please note that this does not guarantee support for a specific unicode point in the font. You can use the <db:link xlink:href="qrawfont.xml#supportsCharacter">supportsCharacter</db:link>() to check support for a single, specific character.</db:para>
<db:note>
<db:para>The list is determined based on the unicode ranges and codepage ranges set in the font's OS/2 table and requires such a table to be present in the underlying font file.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrawfont.xml#supportsCharacter">supportsCharacter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportsCharacter">
<db:title>bool QRawFont::supportsCharacter(QChar <db:emphasis>character</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>supportsCharacter</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>character</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool supportsCharacter(QChar character) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the font has a glyph that corresponds to the given <db:code role="parameter">character</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrawfont.xml#supportedWritingSystems">supportedWritingSystems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportsCharacter-1">
<db:title>bool QRawFont::supportsCharacter(uint <db:emphasis>ucs4</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>supportsCharacter</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>ucs4</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool supportsCharacter(uint ucs4) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the font has a glyph that corresponds to the UCS-4 encoded character <db:code role="parameter">ucs4</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrawfont.xml#supportedWritingSystems">supportedWritingSystems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QRawFont::swap(QRawFont &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QRawFont &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QRawFont &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this raw font with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="underlinePosition">
<db:title>qreal QRawFont::underlinePosition() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>underlinePosition</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal underlinePosition() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position from baseline for drawing underlines below the text rendered with this font.</db:para>
</db:section>
<db:section xml:id="unitsPerEm">
<db:title>qreal QRawFont::unitsPerEm() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>unitsPerEm</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal unitsPerEm() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of design units define the width and height of the em square for this <db:link xlink:href="qrawfont.xml">QRawFont</db:link>. This value is used together with the pixel size when converting design metrics to pixel units, as the internal metrics are specified in design units and the pixel size gives the size of 1 em in pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrawfont.xml#pixelSize">pixelSize</db:link>()</db:member>
<db:member><db:link xlink:href="qrawfont.xml#setPixelSize">setPixelSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="weight">
<db:title>int QRawFont::weight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>weight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int weight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the weight of this <db:link xlink:href="qrawfont.xml">QRawFont</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#weight">QFont::weight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="xHeight">
<db:title>qreal QRawFont::xHeight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>xHeight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal xHeight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the xHeight of this <db:link xlink:href="qrawfont.xml">QRawFont</db:link> in pixel units.</db:para>
<db:para>This is often but not always the same as the height of the character 'x'.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontmetricsf.xml#xHeight">QFontMetricsF::xHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QRawFont::operator!=(const QRawFont &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QRawFont &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QRawFont &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this <db:link xlink:href="qrawfont.xml">QRawFont</db:link> is not equal to <db:code role="parameter">other</db:code>. Otherwise, returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QRawFont &amp;QRawFont::operator=(const QRawFont &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRawFont &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QRawFont &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRawFont &amp; operator=(const QRawFont &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qrawfont.xml">QRawFont</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QRawFont::operator==(const QRawFont &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QRawFont &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QRawFont &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this <db:link xlink:href="qrawfont.xml">QRawFont</db:link> is equal to <db:code role="parameter">other</db:code>. Otherwise, returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash">
<db:title>[since 5.8] size_t qHash(const QRawFont &amp;<db:emphasis>font</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>size_t</db:type>
<db:methodname>qHash</db:methodname>
<db:methodparam>
<db:type>const QRawFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>size_t</db:type>
<db:parameter>seed</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">size_t qHash(const QRawFont &amp;font, size_t seed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hash value for <db:code role="parameter">font</db:code>. If specified, <db:code role="parameter">seed</db:code> is used to initialize the hash.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
</db:section>
</db:article>
