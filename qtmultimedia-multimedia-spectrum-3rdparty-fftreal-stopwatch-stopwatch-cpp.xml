<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Spectrum Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Analyzing a raw audio stream using the FFTReal library.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/*****************************************************************************

        StopWatch.cpp
        Copyright (c) 2005 Laurent de Soras

--- Legal stuff ---

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*Tab=3***********************************************************************/

#if defined (_MSC_VER)
        #pragma warning (1 : 4130) // &quot;'operator' : logical operation on address of string constant&quot;
        #pragma warning (1 : 4223) // &quot;nonstandard extension used : non-lvalue array converted to pointer&quot;
        #pragma warning (1 : 4705) // &quot;statement has no effect&quot;
        #pragma warning (1 : 4706) // &quot;assignment within conditional expression&quot;
        #pragma warning (4 : 4786) // &quot;identifier was truncated to '255' characters in the debug information&quot;
        #pragma warning (4 : 4800) // &quot;forcing value to bool 'true' or 'false' (performance warning)&quot;
        #pragma warning (4 : 4355) // &quot;'this' : used in base member initializer list&quot;
#endif

/*\\\ INCLUDE FILES \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

#include        &quot;StopWatch.h&quot;

#include        &lt;cassert&gt;

namespace stopwatch
{

/*\\\ PUBLIC \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

StopWatch::StopWatch ()
:       _ccc ()
,       _nbr_laps (0)
{
        // Nothing
}

double  StopWatch::get_time_total (Int64 nbr_op) const
{
        assert (_nbr_laps &gt; 0);
        assert (nbr_op &gt; 0);

        return (
                  static_cast &lt;double&gt; (_ccc.get_time_total ())
           / (static_cast &lt;double&gt; (nbr_op) * static_cast &lt;double&gt; (_nbr_laps))
        );
}

double  StopWatch::get_time_best_lap (Int64 nbr_op) const
{
        assert (nbr_op &gt; 0);

        return (
                  static_cast &lt;double&gt; (_ccc.get_time_best_lap ())
                / static_cast &lt;double&gt; (nbr_op)
        );
}

/*\\\ PROTECTED \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

/*\\\ PRIVATE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

}       // namespace stopwatch

/*\\\ EOF \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

</db:programlisting>
</db:article>
