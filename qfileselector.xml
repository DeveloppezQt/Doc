<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFileSelector Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qfileselector.xml">QFileSelector</db:link> provides a convenient way of selecting file variants.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFileSelector</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfileselector.xml">QFileSelector</db:link> is a convenience for selecting file variants based on platform or device characteristics. This allows you to develop and deploy one codebase containing all the different variants more easily in some circumstances, such as when the correct variant cannot be determined during the deploy step.</db:para>
<db:section xml:id="using-qfileselector">
<db:title>Using QFileSelector</db:title>
<db:para>If you always use the same file you do not need to use <db:link xlink:href="qfileselector.xml">QFileSelector</db:link>.</db:para>
<db:para>Consider the following example usage, where you want to use different settings files on different locales. You might select code between locales like this:</db:para>
<db:programlisting language="cpp">    QString defaultsBasePath = &quot;data/&quot;;
    QString defaultsPath = defaultsBasePath + &quot;defaults.conf&quot;;
    QString localizedPath = defaultsBasePath
            + QString(&quot;%1/defaults.conf&quot;).arg(QLocale().name());
    if (QFile::exists(localizedPath))
        defaultsPath = localizedPath;
    QFile defaults(defaultsPath);
</db:programlisting>
<db:para>Similarly, if you want to pick a different data file based on target platform, your code might look something like this:</db:para>
<db:programlisting language="cpp">    QString defaultsPath = &quot;data/defaults.conf&quot;;
#if defined(Q_OS_ANDROID)
    defaultsPath = &quot;data/android/defaults.conf&quot;;
#elif defined(Q_OS_IOS)
    defaultsPath = &quot;data/ios/defaults.conf&quot;;
#endif
    QFile defaults(defaultsPath);
</db:programlisting>
<db:para><db:link xlink:href="qfileselector.xml">QFileSelector</db:link> provides a convenient alternative to writing such boilerplate code, and in the latter case it allows you to start using an platform-specific configuration without a recompile. <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> also allows for chaining of multiple selectors in a convenient way, for example selecting a different file only on certain combinations of platform and locale. For example, to select based on platform and/or locale, the code is as follows:</db:para>
<db:programlisting language="cpp">    QFileSelector selector;
    QFile defaultsFile(selector.select(&quot;data/defaults.conf&quot;));
</db:programlisting>
<db:para>The files to be selected are placed in directories named with a '+' and a selector name. In the above example you could have the platform configurations selected by placing them in the following locations:</db:para>
<db:programlisting language="cpp">    data/defaults.conf
    data/+android/defaults.conf
    data/+ios/+en_GB/defaults.conf
</db:programlisting>
<db:para>To find selected files, <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> looks in the same directory as the base file. If there are any directories of the form +&lt;selector&gt; with an active selector, <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> will prefer a file with the same file name from that directory over the base file. These directories can be nested to check against multiple selectors, for example:</db:para>
<db:programlisting language="cpp">    images/background.png
    images/+android/+en_GB/background.png
</db:programlisting>
<db:para>With those files available, you would select a different file on the android platform, but only if the locale was en_GB.</db:para>
<db:para>For error handling in the case no valid selectors are present, it is recommended to have a default or error-handling file in the base file location even if you expect selectors to be present for all deployments.</db:para>
<db:para>In a future version, some may be marked as deploy-time static and be moved during the deployment step as an optimization. As selectors come with a performance cost, it is recommended to avoid their use in circumstances involving performance-critical code.</db:para>
</db:section>
<db:section xml:id="adding-selectors">
<db:title>Adding Selectors</db:title>
<db:para>Selectors normally available are</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>platform, any of the following strings which match the platform the application is running on (list not exhaustive): android, ios, osx, darwin, mac, macos, linux, qnx, unix, windows. On Linux, if it can be determined, the name of the distribution too, like debian, fedora or opensuse.</db:para>
</db:listitem>
<db:listitem>
<db:para>locale, same as QLocale().name().</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Further selectors will be added from the QT_FILE_SELECTORS environment variable, which when set should be a set of comma separated selectors. Note that this variable will only be read once; selectors may not update if the variable changes while the application is running. The initial set of selectors are evaluated only once, on first use.</db:para>
<db:para>You can also add extra selectors at runtime for custom behavior. These will be used in any future calls to <db:link xlink:href="qfileselector.xml#select">select</db:link>(). If the extra selectors list has been changed, calls to <db:link xlink:href="qfileselector.xml#select">select</db:link>() will use the new list and may return differently.</db:para>
</db:section>
<db:section xml:id="conflict-resolution-when-multiple-selectors-apply">
<db:title>Conflict Resolution when Multiple Selectors Apply</db:title>
<db:para>When multiple selectors could be applied to the same file, the first matching selector is chosen. The order selectors are checked in are:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Selectors set via <db:link xlink:href="qfileselector.xml#setExtraSelectors">setExtraSelectors</db:link>(), in the order they are in the list</db:para>
</db:listitem>
<db:listitem>
<db:para>Selectors in the QT_FILE_SELECTORS environment variable, from left to right</db:para>
</db:listitem>
<db:listitem>
<db:para>Locale</db:para>
</db:listitem>
<db:listitem>
<db:para>Platform</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Here is an example involving multiple selectors matching at the same time. It uses platform selectors, plus an extra selector named &quot;admin&quot; is set by the application based on user credentials. The example is sorted so that the lowest matching file would be chosen if all selectors were present:</db:para>
<db:programlisting language="cpp">    images/background.png
    images/+linux/background.png
    images/+windows/background.png
    images/+admin/background.png
    images/+admin/+linux/background.png
</db:programlisting>
<db:para>Because extra selectors are checked before platform the +admin/background.png will be chosen on Windows when the admin selector is set, and +windows/background.png will be chosen on Windows when the admin selector is not set. On Linux, the +admin/+linux/background.png will be chosen when admin is set, and the +linux/background.png when it is not.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFileSelector">
<db:title>[explicit] QFileSelector::QFileSelector(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QFileSelector</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileSelector(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> instance. This instance will have the same static selectors as other <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> instances, but its own set of extra selectors.</db:para>
<db:para>If supplied, it will have the given <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QFileSelector">
<db:title>[virtual] QFileSelector::~QFileSelector()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QFileSelector</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QFileSelector()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this selector instance.</db:para>
</db:section>
<db:section xml:id="allSelectors">
<db:title>QStringList QFileSelector::allSelectors() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>allSelectors</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList allSelectors() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the complete, ordered list of selectors used by this instance</db:para>
</db:section>
<db:section xml:id="extraSelectors">
<db:title>QStringList QFileSelector::extraSelectors() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>extraSelectors</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList extraSelectors() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of extra selectors which have been added programmatically to this instance.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileselector.xml#setExtraSelectors">setExtraSelectors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="select">
<db:title>QString QFileSelector::select(const QString &amp;<db:emphasis>filePath</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>select</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filePath</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString select(const QString &amp;filePath) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns the selected version of the path, based on the conditions at runtime. If no selectable files are present, returns the original <db:code role="parameter">filePath</db:code>.</db:para>
<db:para>If the original file does not exist, the original <db:code role="parameter">filePath</db:code> is returned. This means that you must have a base file to fall back on, you cannot have only files in selectable sub-directories.</db:para>
<db:para>See the class overview for the selection algorithm.</db:para>
</db:section>
<db:section xml:id="select-1">
<db:title>QUrl QFileSelector::select(const QUrl &amp;<db:emphasis>filePath</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>select</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>filePath</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl select(const QUrl &amp;filePath) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience version of select operating on <db:link xlink:href="qurl.xml">QUrl</db:link> objects. If the scheme is not file or qrc, <db:code role="parameter">filePath</db:code> is returned immediately. Otherwise selection is applied to the path of <db:code role="parameter">filePath</db:code> and a <db:link xlink:href="qurl.xml">QUrl</db:link> is returned with the selected path and other <db:link xlink:href="qurl.xml">QUrl</db:link> parts the same as <db:code role="parameter">filePath</db:code>.</db:para>
<db:para>See the class overview for the selection algorithm.</db:para>
</db:section>
<db:section xml:id="setExtraSelectors">
<db:title>void QFileSelector::setExtraSelectors(const QStringList &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setExtraSelectors</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>list</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setExtraSelectors(const QStringList &amp;list)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">list</db:code> of extra selectors which have been added programmatically to this instance.</db:para>
<db:para>These selectors have priority over any which have been automatically picked up.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileselector.xml#extraSelectors">extraSelectors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
