<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFileSelector Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qfileselector.xml">QFileSelector</db:link> provides a convenient way of selecting file variants.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFileSelector</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfileselector.xml">QFileSelector</db:link> is a convenience for selecting file variants based on platform or device characteristics. This allows you to develop and deploy one codebase containing all the different variants more easily in some circumstances, such as when the correct variant cannot be determined during the deploy step.</db:para>
<db:section xml:id="using-qfileselector">
<db:title>Using QFileSelector</db:title>
<db:para>If you always use the same file you do not need to use <db:link xlink:href="qfileselector.xml">QFileSelector</db:link>.</db:para>
<db:para>Consider the following example usage, where you want to use different settings files on different locales. You might select code between locales like this:</db:para>
<db:programlisting language="cpp">QString defaultsBasePath = &quot;data/&quot;;
QString defaultsPath = defaultsBasePath + &quot;defaults.conf&quot;;
QString localizedPath = defaultsBasePath
        + QString(&quot;%1/defaults.conf&quot;).arg(QLocale::system().name());
if (QFile::exists(localizedPath))
    defaultsPath = localizedPath;
QFile defaults(defaultsPath);
</db:programlisting>
<db:para>Similarly, if you want to pick a different data file based on target platform, your code might look something like this:</db:para>
<db:programlisting language="cpp">    QString defaultsPath = &quot;data/defaults.conf&quot;;
#if defined(Q_OS_ANDROID)
    defaultsPath = &quot;data/android/defaults.conf&quot;;
#elif defined(Q_OS_BLACKBERRY)
    defaultsPath = &quot;data/blackberry/defaults.conf&quot;;
#elif defined(Q_OS_IOS)
    defaultsPath = &quot;data/ios/defaults.conf&quot;;
#endif
    QFile defaults(defaultsPath);
    </db:programlisting>
<db:para><db:link xlink:href="qfileselector.xml">QFileSelector</db:link> provides a convenient alternative to writing such boilerplate code, and in the latter case it allows you to start using an platform-specific configuration without a recompile. <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> also allows for chaining of multiple selectors in a convenient way, for example selecting a different file only on certain combinations of platform and locale. For example, to select based on platform and/or locale, the code is as follows:</db:para>
<db:programlisting language="cpp">QFileSelector selector;
QFile defaultsFile(selector.select(&quot;data/defaults.conf&quot;));
</db:programlisting>
<db:para>The files to be selected are placed in directories named with a <db:code>'+'</db:code> and a selector name. In the above example you could have the platform configurations selected by placing them in the following locations:</db:para>
<db:programlisting language="cpp">data/defaults.conf
data/+android/defaults.conf
data/+blackberry/defaults.conf
data/+ios/+en_GB/defaults.conf
</db:programlisting>
<db:para>To find selected files, <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> looks in the same directory as the base file. If there are any directories of the form +&lt;selector&gt; with an active selector, <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> will prefer a file with the same file name from that directory over the base file. These directories can be nested to check against multiple selectors, for example:</db:para>
<db:programlisting language="cpp">images/background.png
images/+android/+en_GB/background.png
images/+blackberry/+en_GB/background.png
</db:programlisting>
<db:para>With those files available, you would select a different file on android and blackberry platforms, but only if the locale was en_GB.</db:para>
<db:para><db:link xlink:href="qfileselector.xml">QFileSelector</db:link> will not attempt to select if the base file does not exist. For error handling in the case no valid selectors are present, it is recommended to have a default or error-handling file in the base file location even if you expect selectors to be present for all deployments.</db:para>
<db:para>In a future version, some may be marked as deploy-time static and be moved during the deployment step as an optimization. As selectors come with a performance cost, it is recommended to avoid their use in circumstances involving performance-critical code.</db:para>
</db:section>
<db:section xml:id="adding-selectors">
<db:title>Adding Selectors</db:title>
<db:para>Selectors normally available are</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>platform, any of the following strings which match the platform the application is running on: android, blackberry, ios, osx, darwin, mac, linux, wince, unix, windows.</db:para>
</db:listitem>
<db:listitem>
<db:para>locale, same as QLocale::system().name().</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Further selectors will be added from the <db:code>QT_FILE_SELECTORS</db:code> environment variable, which when set should be a set of comma separated selectors. Note that this variable will only be read once; selectors may not update if the variable changes while the application is running. The initial set of selectors are evaluated only once, on first use.</db:para>
<db:para>You can also add extra selectors at runtime for custom behavior. These will be used in any future calls to select(). If the extra selectors list has been changed, calls to select() will use the new list and may return differently.</db:para>
</db:section>
<db:section xml:id="conflict-resolution-when-multiple-selectors-apply">
<db:title>Conflict Resolution when Multiple Selectors Apply</db:title>
<db:para>When multiple selectors could be applied to the same file, the first matching selector is chosen. The order selectors are checked in are:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Selectors set via setExtraSelectors(), in the order they are in the list</db:para>
</db:listitem>
<db:listitem>
<db:para>Selectors in the <db:code>QT_FILE_SELECTORS</db:code> environment variable, from left to right</db:para>
</db:listitem>
<db:listitem>
<db:para>Locale</db:para>
</db:listitem>
<db:listitem>
<db:para>Platform</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Here is an example involving multiple selectors matching at the same time. It uses platform selectors, plus an extra selector named &quot;admin&quot; is set by the application based on user credentials. The example is sorted so that the lowest matching file would be chosen if all selectors were present:</db:para>
<db:programlisting language="cpp">images/background.png
images/+linux/background.png
images/+windows/background.png
images/+admin/background.png
images/+admin/+linux/background.png
</db:programlisting>
<db:para>Because extra selectors are checked before platform the <db:code>+admin/background.png</db:code> will be chosen on Windows when the admin selector is set, and <db:code>+windows/background.png</db:code> will be chosen on Windows when the admin selector is not set. On Linux, the <db:code>+admin/+linux/background.png</db:code> will be chosen when admin is set, and the <db:code>+linux/background.png</db:code> when it is not.</db:para>
</db:section>
</db:section>
</db:article>
