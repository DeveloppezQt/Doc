<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoSatelliteInfoSource Class</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeosatelliteinfosource.xml">QGeoSatelliteInfoSource</db:link> class is an abstract base class for the distribution of satellite information updates.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoSatelliteInfoSource</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Positioning)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Positioning)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += positioning</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qnmeasatelliteinfosource.xml" xlink:role="class">QNmeaSatelliteInfoSource</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoSatelliteInfoSource is part of <db:simplelist><db:member>QtPositioning-positioning</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The static function <db:link xlink:href="qgeosatelliteinfosource.xml#createDefaultSource">QGeoSatelliteInfoSource::createDefaultSource</db:link>() creates a default satellite data source that is appropriate for the platform, if one is available. Otherwise, available <db:link xlink:href="qgeopositioninfosourcefactory.xml">QGeoPositionInfoSourceFactory</db:link> plugins will be checked for one that has a satellite data source available.</db:para>
<db:para>Call <db:link xlink:href="qgeosatelliteinfosource.xml#startUpdates">startUpdates</db:link>() and <db:link xlink:href="qgeosatelliteinfosource.xml#stopUpdates">stopUpdates</db:link>() to start and stop regular updates, or <db:link xlink:href="qgeosatelliteinfosource.xml#requestUpdate">requestUpdate</db:link>() to request a single update. When an update is available, <db:link xlink:href="qgeosatelliteinfosource.xml#satellitesInViewUpdated">satellitesInViewUpdated</db:link>() and/or <db:link xlink:href="qgeosatelliteinfosource.xml#satellitesInUseUpdated">satellitesInUseUpdated</db:link>() will be emitted.</db:para>
<db:para>If regular satellite updates are required, <db:link xlink:href="qgeosatelliteinfosource.xml#updateInterval-prop">setUpdateInterval</db:link>() can be used to specify how often these updates should be emitted. If no interval is specified, updates are simply provided whenever they are available. For example:</db:para>
<db:programlisting language="cpp">// Emit updates every 10 seconds if available
QGeoSatelliteInfoSource *source = QGeoSatelliteInfoSource::createDefaultSource(0);
if (source)
    source-&amp;gt;setUpdateInterval(10000);
</db:programlisting>
<db:para>To remove an update interval that was previously set, call <db:link xlink:href="qgeosatelliteinfosource.xml#updateInterval-prop">setUpdateInterval</db:link>() with a value of 0.</db:para>
<db:note>
<db:para>The satellite source may have a minimum value requirement for update intervals, as returned by <db:link xlink:href="qgeosatelliteinfosource.xml#minimumUpdateInterval-prop">minimumUpdateInterval</db:link>().</db:para>
</db:note>
<db:note>
<db:para>To use this class from Android service, see <db:link xlink:href="qtpositioning-android.xml">Qt Positioning on Android</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QGeoSatelliteInfoSource::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>AccessError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ClosedError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownSourceError</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UpdateTimeoutError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The Error enumeration represents the errors which can occur.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeosatelliteinfosource.xml">QGeoSatelliteInfoSource</db:link></db:emphasis>::AccessError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The connection setup to the satellite backend failed because the application lacked the required privileges.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeosatelliteinfosource.xml">QGeoSatelliteInfoSource</db:link></db:emphasis>::ClosedError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The satellite backend closed the connection, which happens for example in case the user is switching location services to off. This object becomes invalid and should be deleted. A new satellite source can be created by calling <db:link xlink:href="qgeosatelliteinfosource.xml#createDefaultSource">createDefaultSource</db:link>() later on.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeosatelliteinfosource.xml">QGeoSatelliteInfoSource</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeosatelliteinfosource.xml">QGeoSatelliteInfoSource</db:link></db:emphasis>::UnknownSourceError</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>An unidentified error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeosatelliteinfosource.xml">QGeoSatelliteInfoSource</db:link></db:emphasis>::UpdateTimeoutError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The current satellite information could not be retrieved within the specified timeout.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="minimumUpdateInterval-prop">
<db:title>[read-only] minimumUpdateInterval : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>minimumUpdateInterval</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minimumUpdateInterval</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum time (in milliseconds) required to retrieve a satellite update.</db:para>
<db:para>This is the minimum value accepted by <db:link xlink:href="qgeosatelliteinfosource.xml#updateInterval-prop">setUpdateInterval</db:link>() and <db:link xlink:href="qgeosatelliteinfosource.xml#requestUpdate">requestUpdate</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type>int</db:type> <db:emphasis role="bold">minimumUpdateInterval</db:emphasis>() const = 0</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="updateInterval-prop">
<db:title>[bindable] updateInterval : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>updateInterval</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">updateInterval</db:synopsisinfo>
<db:synopsisinfo role="setter">setUpdateInterval</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the requested interval in milliseconds between each update.</db:para>
<db:para>If the update interval is not set (or is set to 0) the source will provide updates as often as necessary.</db:para>
<db:para>If the update interval is set, the source will provide updates at an interval as close to the requested interval as possible. If the requested interval is less than the <db:link xlink:href="qgeosatelliteinfosource.xml#minimumUpdateInterval-prop">minimumUpdateInterval</db:link>(), the minimum interval is used instead.</db:para>
<db:para>Changes to the update interval will happen as soon as is practical, however the time the change takes may vary between implementations. Whether or not the elapsed time from the previous interval is counted as part of the new interval is also implementation dependent.</db:para>
<db:para>The default value for this property is 0.</db:para>
<db:note>
<db:para>Subclass implementations must call the base implementation of setUpdateInterval() so that updateInterval() returns the correct value.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QGeoSatelliteInfoSource">
<db:title>[virtual] QGeoSatelliteInfoSource::~QGeoSatelliteInfoSource()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGeoSatelliteInfoSource</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGeoSatelliteInfoSource()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the satellite source.</db:para>
</db:section>
<db:section xml:id="availableSources">
<db:title>[static] QStringList QGeoSatelliteInfoSource::availableSources()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>availableSources</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList availableSources()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of available source plugins, including the default system backend if one is available.</db:para>
</db:section>
<db:section xml:id="backendProperty">
<db:title>[virtual, since 6.2] QVariant QGeoSatelliteInfoSource::backendProperty(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>backendProperty</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant backendProperty(const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the backend-specific property named <db:code role="parameter">name</db:code>, if present. Otherwise the returned value will be invalid.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeosatelliteinfosource.xml#setBackendProperty">setBackendProperty</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createDefaultSource">
<db:title>[static] QGeoSatelliteInfoSource *QGeoSatelliteInfoSource::createDefaultSource(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QGeoSatelliteInfoSource *</db:type>
<db:methodname>createDefaultSource</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoSatelliteInfoSource * createDefaultSource(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns a source with the specified <db:code role="parameter">parent</db:code> that reads from the system's default source of satellite update information, or the highest priority available plugin.</db:para>
<db:para>Returns <db:code>nullptr</db:code> if the system has no default satellite source, no valid plugins could be found or the user does not have the permission to access the satellite data.</db:para>
</db:section>
<db:section xml:id="createDefaultSource-1">
<db:title>[static, since Qt 5.14] QGeoSatelliteInfoSource *QGeoSatelliteInfoSource::createDefaultSource(const QVariantMap &amp;<db:emphasis>parameters</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QGeoSatelliteInfoSource *</db:type>
<db:methodname>createDefaultSource</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoSatelliteInfoSource * createDefaultSource(const QVariantMap &amp;parameters, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns a satellite source with the given <db:code role="parameter">parent</db:code> that reads from the system's default sources of satellite data, or the plugin with the highest available priority.</db:para>
<db:para>Returns <db:code>nullptr</db:code> if the system has no default satellite source, no valid plugins could be found or the user does not have the permission to access the satellite information.</db:para>
<db:para>This method passes <db:code role="parameter">parameters</db:code> to the factory to configure the source.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="createSource">
<db:title>[static] QGeoSatelliteInfoSource *QGeoSatelliteInfoSource::createSource(const QString &amp;<db:emphasis>sourceName</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QGeoSatelliteInfoSource *</db:type>
<db:methodname>createSource</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>sourceName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoSatelliteInfoSource * createSource(const QString &amp;sourceName, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns a source with the given <db:code role="parameter">parent</db:code>, by loading the plugin named <db:code role="parameter">sourceName</db:code>.</db:para>
<db:para>Returns <db:code>nullptr</db:code> if the plugin cannot be found.</db:para>
</db:section>
<db:section xml:id="createSource-1">
<db:title>[static, since Qt 5.14] QGeoSatelliteInfoSource *QGeoSatelliteInfoSource::createSource(const QString &amp;<db:emphasis>sourceName</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QGeoSatelliteInfoSource *</db:type>
<db:methodname>createSource</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>sourceName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoSatelliteInfoSource * createSource(const QString &amp;sourceName, const QVariantMap &amp;parameters, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns a satellite source with the given <db:code role="parameter">parent</db:code>, by loading the plugin named <db:code role="parameter">sourceName</db:code>.</db:para>
<db:para>Returns <db:code>nullptr</db:code> if the plugin cannot be found.</db:para>
<db:para>This method passes <db:code role="parameter">parameters</db:code> to the factory to configure the source.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>[pure virtual] QGeoSatelliteInfoSource::Error QGeoSatelliteInfoSource::error() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QGeoSatelliteInfoSource::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoSatelliteInfoSource::Error error() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last error that occurred.</db:para>
<db:note>
<db:para>Since Qt6 the last error is always reset when calling <db:link xlink:href="qgeosatelliteinfosource.xml#startUpdates">startUpdates</db:link>() or <db:link xlink:href="qgeosatelliteinfosource.xml#requestUpdate">requestUpdate</db:link>().</db:para>
</db:note>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QGeoSatelliteInfoSource::errorOccurred(QGeoSatelliteInfoSource::Error <db:emphasis>satelliteError</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QGeoSatelliteInfoSource::Error</db:type>
<db:parameter>satelliteError</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QGeoSatelliteInfoSource::Error satelliteError)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after an error occurred. The <db:code role="parameter">satelliteError</db:code> parameter describes the type of error that occurred.</db:para>
</db:section>
<db:section xml:id="requestUpdate">
<db:title>[pure virtual] void QGeoSatelliteInfoSource::requestUpdate(int <db:emphasis>timeout</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>requestUpdate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeout</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestUpdate(int timeout) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to get the current satellite information and emit <db:link xlink:href="qgeosatelliteinfosource.xml#satellitesInViewUpdated">satellitesInViewUpdated</db:link>() and <db:link xlink:href="qgeosatelliteinfosource.xml#satellitesInUseUpdated">satellitesInUseUpdated</db:link>() with this information. If the current satellite information cannot be found within the given <db:code role="parameter">timeout</db:code> (in milliseconds) or if <db:code role="parameter">timeout</db:code> is less than the value returned by <db:link xlink:href="qgeosatelliteinfosource.xml#minimumUpdateInterval-prop">minimumUpdateInterval</db:link>(), an <db:link xlink:href="qgeosatelliteinfosource.xml#errorOccurred">errorOccurred</db:link>() signal with <db:link xlink:href="qgeosatelliteinfosource.xml#Error-enum">UpdateTimeoutError</db:link> is emitted.</db:para>
<db:para>If the timeout is zero, the timeout defaults to a reasonable timeout period as appropriate for the source.</db:para>
<db:para>This does nothing if another update request is in progress. However it can be called even if <db:link xlink:href="qgeosatelliteinfosource.xml#startUpdates">startUpdates</db:link>() has already been called and regular updates are in progress.</db:para>
<db:note>
<db:para>Since Qt6 this method always resets the last error to <db:link xlink:href="qgeosatelliteinfosource.xml#Error-enum">NoError</db:link> before requesting the satellite information.</db:para>
</db:note>
<db:note>
<db:para>To understand how to use this method from an Android service, see <db:link xlink:href="qtpositioning-android.xml">Qt Positioning on Android</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="satellitesInUseUpdated">
<db:title>void QGeoSatelliteInfoSource::satellitesInUseUpdated(const QList&lt;QGeoSatelliteInfo&gt; &amp;<db:emphasis>satellites</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>satellitesInUseUpdated</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QGeoSatelliteInfo&gt; &amp;</db:type>
<db:parameter>satellites</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void satellitesInUseUpdated(const QList&lt;QGeoSatelliteInfo&gt; &amp;satellites)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:link xlink:href="qgeosatelliteinfosource.xml#startUpdates">startUpdates</db:link>() or <db:link xlink:href="qgeosatelliteinfosource.xml#requestUpdate">requestUpdate</db:link>() is called, this signal is emitted when an update is available on the number of satellites that are currently in use.</db:para>
<db:para>These are the satellites that are used to get a &quot;fix&quot; - that is, those used to determine the current position.</db:para>
<db:para>The <db:code role="parameter">satellites</db:code> parameter holds the satellites currently in use.</db:para>
</db:section>
<db:section xml:id="satellitesInViewUpdated">
<db:title>void QGeoSatelliteInfoSource::satellitesInViewUpdated(const QList&lt;QGeoSatelliteInfo&gt; &amp;<db:emphasis>satellites</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>satellitesInViewUpdated</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QGeoSatelliteInfo&gt; &amp;</db:type>
<db:parameter>satellites</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void satellitesInViewUpdated(const QList&lt;QGeoSatelliteInfo&gt; &amp;satellites)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:link xlink:href="qgeosatelliteinfosource.xml#startUpdates">startUpdates</db:link>() or <db:link xlink:href="qgeosatelliteinfosource.xml#requestUpdate">requestUpdate</db:link>() is called, this signal is emitted when an update is available on the satellites that are currently in view.</db:para>
<db:para>The <db:code role="parameter">satellites</db:code> parameter holds the satellites currently in view.</db:para>
</db:section>
<db:section xml:id="setBackendProperty">
<db:title>[virtual, since 6.2] bool QGeoSatelliteInfoSource::setBackendProperty(const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setBackendProperty</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setBackendProperty(const QString &amp;name, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the backend-specific property named <db:code role="parameter">name</db:code> to <db:code role="parameter">value</db:code>. Returns <db:code>true</db:code> on success, <db:code>false</db:code> otherwise. Backend-specific properties can be used to configure the satellite info subsystem behavior at runtime.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeosatelliteinfosource.xml#backendProperty">backendProperty</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceName">
<db:title>QString QGeoSatelliteInfoSource::sourceName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>sourceName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString sourceName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the unique name of the satellite source implementation in use.</db:para>
<db:para>This is the same name that can be passed to <db:link xlink:href="qgeosatelliteinfosource.xml#createSource">createSource</db:link>() in order to create a new instance of a particular satellite source implementation.</db:para>
</db:section>
<db:section xml:id="startUpdates">
<db:title>[pure virtual] void QGeoSatelliteInfoSource::startUpdates()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>startUpdates</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void startUpdates() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts emitting updates at regular intervals. The updates will be provided whenever new satellite information becomes available.</db:para>
<db:para>If satellite information cannot be retrieved or some other form of timeout has occurred the <db:link xlink:href="qgeosatelliteinfosource.xml#satellitesInViewUpdated">satellitesInViewUpdated</db:link>() and <db:link xlink:href="qgeosatelliteinfosource.xml#satellitesInUseUpdated">satellitesInUseUpdated</db:link>() signals may be emitted with empty parameter lists.</db:para>
<db:note>
<db:para>Since Qt6 this method always resets the last error to <db:link xlink:href="qgeosatelliteinfosource.xml#Error-enum">NoError</db:link> before starting the updates.</db:para>
</db:note>
<db:note>
<db:para>To understand how to use this method from an Android service, see <db:link xlink:href="qtpositioning-android.xml">Qt Positioning on Android</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeosatelliteinfosource.xml#satellitesInViewUpdated">satellitesInViewUpdated</db:link>()</db:member>
<db:member><db:link xlink:href="qgeosatelliteinfosource.xml#satellitesInUseUpdated">satellitesInUseUpdated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stopUpdates">
<db:title>[pure virtual] void QGeoSatelliteInfoSource::stopUpdates()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>stopUpdates</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stopUpdates() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops emitting updates at regular intervals.</db:para>
</db:section>
</db:section>
</db:article>
