<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Session Management</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to do session management with Qt.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>A <db:emphasis>session</db:emphasis> is a group of running applications, each of which has a particular state. The session is controlled by a service called the <db:emphasis>session</db:emphasis> <db:emphasis>manager</db:emphasis>. The applications participating in the session are called <db:emphasis>session clients</db:emphasis>.</db:para>
<db:para>The session manager issues commands to its clients on behalf of the user. These commands may cause clients to commit unsaved changes (for example by saving open files), to preserve their state for future sessions, or to terminate gracefully. The set of these operations is called <db:emphasis>session</db:emphasis> <db:emphasis>management</db:emphasis>.</db:para>
<db:para>In the common case, a session consists of all applications that a user runs on their desktop at a time. Under Unix/X11, however, a session may include applications running on different computers and may span multiple displays.</db:para>
<db:section xml:id="shutting-a-session-down">
<db:title>Shutting a Session Down</db:title>
<db:para>A session is shut down by the session manager, usually on behalf of the user when they want to log out. A system might also perform an automatic shutdown in an emergency situation, for example, if power is about to be lost. Clearly there is a significant difference between these types of shutdown. During the first, the user may want to interact with the application, specifying exactly which files should be saved and which should be discarded. In the latter case, there's no time for interaction. There may not even be a user sitting in front of the machine!</db:para>
</db:section>
<db:section xml:id="protocols-and-support-on-different-platforms">
<db:title>Protocols and Support on Different Platforms</db:title>
<db:para>On macOS, and Microsoft Windows versions prior to Windows 2000, there is nothing like complete session management for applications yet, i.e. no restoring of previous sessions. (Windows 2000 and XP provide &quot;hibernation&quot; where the entire memory is saved to disk and restored when the machine is restarted.) They do support graceful logouts where applications have the opportunity to cancel the process after getting confirmation from the user. This is the functionality that corresponds to the <db:link xlink:href="qguiapplication.xml#commitDataRequest">QGuiApplication::commitDataRequest</db:link>() signal.</db:para>
<db:para>X11 has supported complete session management since X11R6.</db:para>
</db:section>
<db:section xml:id="getting-session-management-to-work-with-qt">
<db:title>Getting Session Management to Work with Qt</db:title>
<db:para>Start by connecting a slot to the <db:link xlink:href="qguiapplication.xml#commitDataRequest">QGuiApplication::commitDataRequest</db:link>() signal to enable your application to take part in the graceful logout process. If you are only targeting the Microsoft Windows platform, this is all you can and must provide. Ideally, your application should provide a shutdown dialog similar to the following:</db:para>
<db:mediaobject>
<db:alt>A typical dialog on shutdown</db:alt>
<db:imageobject>
<db:imagedata fileref="images/session.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Example code for this dialog can be found in the documentation of <db:link xlink:href="qsessionmanager.xml#allowsInteraction">QSessionManager::allowsInteraction</db:link>().</db:para>
<db:para>For complete session management (only supported on X11R6 at present), you must also take care of saving the application's state, and potentially of restoring the state in the next life cycle of the session. This saving is done by implementing a slot connected to the <db:link xlink:href="qguiapplication.xml#saveStateRequest">QGuiApplication::saveStateRequest</db:link>() signal. All state data you are saving in this function, should be marked with the session identifier <db:link xlink:href="qguiapplication.xml#sessionId">QGuiApplication::sessionId</db:link>(). This application specific identifier is globally unique, so no clashes will occur. (See <db:link xlink:href="qsessionmanager.xml">QSessionManager</db:link> for information on saving/restoring the state of a particular Qt application.)</db:para>
<db:para>Restoration is usually done in the application's main() function. Check if <db:link xlink:href="qguiapplication.xml#isSessionRestored">QGuiApplication::isSessionRestored</db:link>() is true. If that's the case, use the session identifier <db:link xlink:href="qguiapplication.xml#sessionId">QGuiApplication::sessionId</db:link>() again to access your state data and restore the state of the application.</db:para>
<db:para><db:emphasis role="bold">Important:</db:emphasis> In order to allow the window manager to restore window attributes such as stacking order or geometry information, you must identify your top level widgets with unique application-wide object names (see <db:link xlink:href="qobject.xml#setObjectName">QObject::setObjectName</db:link>()). When restoring the application, you must ensure that all restored top level widgets are given the same unique names they had before.</db:para>
</db:section>
<db:section xml:id="testing-and-debugging-session-management">
<db:title>Testing and Debugging Session Management</db:title>
<db:para>Session management support on macOS and Windows is fairly limited due to the lack of this functionality in the operating system itself. Simply shut the session down and verify that your application behaves as expected. It may be useful to launch another application, usually the integrated development environment, before starting your application. This other application will get the shutdown message afterwards, thus permitting you to cancel the shutdown. Otherwise you would have to log in again after each test run, which is not a problem per se, but is time consuming.</db:para>
<db:para>On Unix you can either use a desktop environment that supports standard X11R6 session management or, the recommended method, use the session manager reference implementation provided by the X Consortium. This sample manager is called xsm and is part of a standard X11R6 installation. As always with X11, a useful and informative manual page is provided. Using xsm is straightforward (apart from the clumsy Athena-based user interface). Here's a simple approach:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Run X11R6.</db:para>
</db:listitem>
<db:listitem>
<db:para>Create a dot file .xsmstartup in your home directory which contains the single line</db:para>
<db:programlisting language="cpp">xterm
</db:programlisting>
<db:para>This tells xsm that the default/failsafe session is just an xterm and nothing else. Otherwise xsm would try to invoke lots of clients including the windowmanager twm, which isn't very helpful.</db:para>
</db:listitem>
<db:listitem>
<db:para>Now launch xsm from another terminal window. Both a session manager window and the xterm will appear. The xterm has a nice property that sets it apart from all the other shells you are currently running: within its shell, the SESSION_MANAGER environment variable points to the session manager you just started.</db:para>
</db:listitem>
<db:listitem>
<db:para>Launch your application from the new xterm window. It will connect itself automatically to the session manager. You can check with the <db:emphasis>ClientList</db:emphasis> push button whether the connect was successful.</db:para>
<db:note>
<db:para>Never keep the <db:emphasis>ClientList</db:emphasis> open when you start or end session managed clients! Otherwise xsm is likely to crash.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Use the session manager's <db:emphasis>Checkpoint</db:emphasis> and <db:emphasis>Shutdown</db:emphasis> buttons with different settings and see how your application behaves. The save type <db:emphasis>local</db:emphasis> means that the clients should save their state. It corresponds to the <db:link xlink:href="qguiapplication.xml#saveStateRequest">QGuiApplication::saveStateRequest</db:link>() signal. The <db:emphasis>global</db:emphasis> save type asks applications to save their unsaved changes in permanent, globally accessible storage. It invokes <db:link xlink:href="qguiapplication.xml#commitDataRequest">QGuiApplication::commitDataRequest</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>Whenever something crashes, blame xsm and not Qt. xsm is far from being a usable session manager on a user's desktop. It is, however, stable and useful enough to serve as testing environment.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
