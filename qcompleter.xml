<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCompleter Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcompleter.xml">QCompleter</db:link> class provides completions based on an item model.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCompleter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>You can use <db:link xlink:href="qcompleter.xml">QCompleter</db:link> to provide auto completions in any Qt widget, such as <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> and <db:link xlink:href="qcombobox.xml">QComboBox</db:link>. When the user starts typing a word, <db:link xlink:href="qcompleter.xml">QCompleter</db:link> suggests possible ways of completing the word, based on a word list. The word list is provided as a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>. (For simple applications, where the word list is static, you can pass a <db:link xlink:href="qstringlist.xml">QStringList</db:link> to <db:link xlink:href="qcompleter.xml">QCompleter</db:link>'s constructor.)</db:para>
<db:section xml:id="basic-usage">
<db:title>Basic Usage</db:title>
<db:para>A <db:link xlink:href="qcompleter.xml">QCompleter</db:link> is used typically with a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> or <db:link xlink:href="qcombobox.xml">QComboBox</db:link>. For example, here's how to provide auto completions from a simple word list in a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>:</db:para>
<db:programlisting language="cpp">QStringList wordList;
wordList &lt;&lt; &quot;alpha&quot; &lt;&lt; &quot;omega&quot; &lt;&lt; &quot;omicron&quot; &lt;&lt; &quot;zeta&quot;;

QLineEdit *lineEdit = new QLineEdit(this);

QCompleter *completer = new QCompleter(wordList, this);
completer-&gt;setCaseSensitivity(Qt::CaseInsensitive);
lineEdit-&gt;setCompleter(completer);
</db:programlisting>
<db:para>A <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link> can be used to provide auto completion of file names. For example:</db:para>
<db:programlisting language="cpp">QCompleter *completer = new QCompleter(this);
completer-&gt;setModel(new QDirModel(completer));
lineEdit-&gt;setCompleter(completer);
</db:programlisting>
<db:para>To set the model on which <db:link xlink:href="qcompleter.xml">QCompleter</db:link> should operate, call <db:link xlink:href="qcompleter.xml#setModel">setModel</db:link>(). By default, <db:link xlink:href="qcompleter.xml">QCompleter</db:link> will attempt to match the <db:link xlink:href="qcompleter.xml#completionPrefix-prop">completion prefix</db:link> (i.e., the word that the user has started typing) against the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link> data stored in column 0 in the model case sensitively. This can be changed using <db:link xlink:href="qcompleter.xml#completionRole-prop">setCompletionRole</db:link>(), <db:link xlink:href="qcompleter.xml#completionColumn-prop">setCompletionColumn</db:link>(), and <db:link xlink:href="qcompleter.xml#caseSensitivity-prop">setCaseSensitivity</db:link>().</db:para>
<db:para>If the model is sorted on the column and role that are used for completion, you can call <db:link xlink:href="qcompleter.xml#modelSorting-prop">setModelSorting</db:link>() with either <db:link xlink:href="qcompleter.xml#ModelSorting-enum">QCompleter::CaseSensitivelySortedModel</db:link> or <db:link xlink:href="qcompleter.xml#ModelSorting-enum">QCompleter::CaseInsensitivelySortedModel</db:link> as the argument. On large models, this can lead to significant performance improvements, because <db:link xlink:href="qcompleter.xml">QCompleter</db:link> can then use binary search instead of linear search. The binary search only works when the <db:link xlink:href="qcompleter.xml#filterMode-prop">filterMode</db:link> is <db:link xlink:href="qt.xml#MatchFlag-enum">Qt::MatchStartsWith</db:link>.</db:para>
<db:para>The model can be a <db:link xlink:href="qabstractlistmodel.xml">list model</db:link>, a <db:link xlink:href="qabstracttablemodel.xml">table model</db:link>, or a <db:link xlink:href="qabstractitemmodel.xml">tree model</db:link>. Completion on tree models is slightly more involved and is covered in the <db:link xlink:href="qcompleter.xml#handling-tree-models">Handling Tree Models</db:link> section below.</db:para>
<db:para>The <db:link xlink:href="qcompleter.xml#completionMode-prop">completionMode</db:link>() determines the mode used to provide completions to the user.</db:para>
</db:section>
<db:section xml:id="iterating-through-completions">
<db:title>Iterating Through Completions</db:title>
<db:para>To retrieve a single candidate string, call <db:link xlink:href="qcompleter.xml#completionPrefix-prop">setCompletionPrefix</db:link>() with the text that needs to be completed and call <db:link xlink:href="qcompleter.xml#currentCompletion">currentCompletion</db:link>(). You can iterate through the list of completions as below:</db:para>
<db:programlisting language="cpp">for (int i = 0; completer-&gt;setCurrentRow(i); i++)
    qDebug() &lt;&lt; completer-&gt;currentCompletion() &lt;&lt; &quot; is match number &quot; &lt;&lt; i;
</db:programlisting>
<db:para><db:link xlink:href="qcompleter.xml#completionCount">completionCount</db:link>() returns the total number of completions for the current prefix. <db:link xlink:href="qcompleter.xml#completionCount">completionCount</db:link>() should be avoided when possible, since it requires a scan of the entire model.</db:para>
</db:section>
<db:section xml:id="the-completion-model">
<db:title>The Completion Model</db:title>
<db:para><db:link xlink:href="qcompleter.xml#completionModel">completionModel</db:link>() return a list model that contains all possible completions for the current completion prefix, in the order in which they appear in the model. This model can be used to display the current completions in a custom view. Calling <db:link xlink:href="qcompleter.xml#completionPrefix-prop">setCompletionPrefix</db:link>() automatically refreshes the completion model.</db:para>
</db:section>
<db:section xml:id="handling-tree-models">
<db:title>Handling Tree Models</db:title>
<db:para><db:link xlink:href="qcompleter.xml">QCompleter</db:link> can look for completions in tree models, assuming that any item (or sub-item or sub-sub-item) can be unambiguously represented as a string by specifying the path to the item. The completion is then performed one level at a time.</db:para>
<db:para>Let's take the example of a user typing in a file system path. The model is a (hierarchical) <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>. The completion occurs for every element in the path. For example, if the current text is C:\Wind, <db:link xlink:href="qcompleter.xml">QCompleter</db:link> might suggest Windows to complete the current path element. Similarly, if the current text is C:\Windows\Sy, <db:link xlink:href="qcompleter.xml">QCompleter</db:link> might suggest System.</db:para>
<db:para>For this kind of completion to work, <db:link xlink:href="qcompleter.xml">QCompleter</db:link> needs to be able to split the path into a list of strings that are matched at each level. For C:\Windows\Sy, it needs to be split as &quot;C:&quot;, &quot;Windows&quot; and &quot;Sy&quot;. The default implementation of <db:link xlink:href="qcompleter.xml#splitPath">splitPath</db:link>(), splits the <db:link xlink:href="qcompleter.xml#completionPrefix-prop">completionPrefix</db:link> using <db:link xlink:href="qdir.xml#separator">QDir::separator</db:link>() if the model is a <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>.</db:para>
<db:para>To provide completions, <db:link xlink:href="qcompleter.xml">QCompleter</db:link> needs to know the path from an index. This is provided by <db:link xlink:href="qcompleter.xml#pathFromIndex">pathFromIndex</db:link>(). The default implementation of <db:link xlink:href="qcompleter.xml#pathFromIndex">pathFromIndex</db:link>(), returns the data for the <db:link xlink:href="qt.xml#ItemDataRole-enum">edit role</db:link> for list models and the absolute file path if the mode is a <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
<db:member><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:member>
<db:member><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-tools-completer-example.xml">Completer Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CompletionMode-enum">
<db:title>enum QCompleter::CompletionMode</db:title>
<db:para>This enum specifies how completions are provided to the user.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcompleter.xml">QCompleter</db:link></db:emphasis>::PopupCompletion</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Current completions are displayed in a popup window.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcompleter.xml">QCompleter</db:link></db:emphasis>::InlineCompletion</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Completions appear inline (as selected text).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcompleter.xml">QCompleter</db:link></db:emphasis>::UnfilteredPopupCompletion</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>All possible completions are displayed in a popup window with the most likely suggestion indicated as current.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#completionMode-prop">setCompletionMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ModelSorting-enum">
<db:title>enum QCompleter::ModelSorting</db:title>
<db:para>This enum specifies how the items in the model are sorted.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcompleter.xml">QCompleter</db:link></db:emphasis>::UnsortedModel</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The model is unsorted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcompleter.xml">QCompleter</db:link></db:emphasis>::CaseSensitivelySortedModel</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The model is sorted case sensitively.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcompleter.xml">QCompleter</db:link></db:emphasis>::CaseInsensitivelySortedModel</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The model is sorted case insensitively.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#modelSorting-prop">setModelSorting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="caseSensitivity-prop">
<db:title>caseSensitivity : Qt::CaseSensitivity</db:title>
<db:para>This property holds the case sensitivity of the matching</db:para>
<db:para>The default is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitivity</db:link></db:type> <db:emphasis role="bold">caseSensitivity</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCaseSensitivity</db:emphasis>(<db:type><db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitivity</db:link></db:type> <db:emphasis>caseSensitivity</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#completionColumn-prop">completionColumn</db:link></db:member>
<db:member><db:link xlink:href="qcompleter.xml#completionRole-prop">completionRole</db:link></db:member>
<db:member><db:link xlink:href="qcompleter.xml#modelSorting-prop">modelSorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="completionColumn-prop">
<db:title>completionColumn : int</db:title>
<db:para>This property holds the column in the model in which completions are searched for.</db:para>
<db:para>If the <db:link xlink:href="qcompleter.xml#popup">popup</db:link>() is a <db:link xlink:href="qlistview.xml">QListView</db:link>, it is automatically setup to display this column.</db:para>
<db:para>By default, the match column is 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">completionColumn</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCompletionColumn</db:emphasis>(<db:type>int</db:type> <db:emphasis>column</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#completionRole-prop">completionRole</db:link></db:member>
<db:member><db:link xlink:href="qcompleter.xml#caseSensitivity-prop">caseSensitivity</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="completionMode-prop">
<db:title>completionMode : CompletionMode</db:title>
<db:para>how the completions are provided to the user</db:para>
<db:para>The default value is <db:link xlink:href="qcompleter.xml#CompletionMode-enum">QCompleter::PopupCompletion</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcompleter.xml#CompletionMode-enum">QCompleter::CompletionMode</db:link></db:type> <db:emphasis role="bold">completionMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCompletionMode</db:emphasis>(<db:type><db:link xlink:href="qcompleter.xml#CompletionMode-enum">QCompleter::CompletionMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="completionPrefix-prop">
<db:title>completionPrefix : QString</db:title>
<db:para>This property holds the completion prefix used to provide completions.</db:para>
<db:para>The <db:link xlink:href="qcompleter.xml#completionModel">completionModel</db:link>() is updated to reflect the list of possible matches for <db:code role="parameter">prefix</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">completionPrefix</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCompletionPrefix</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>prefix</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="completionRole-prop">
<db:title>completionRole : int</db:title>
<db:para>This property holds the item role to be used to query the contents of items for matching.</db:para>
<db:para>The default role is <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">completionRole</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCompletionRole</db:emphasis>(<db:type>int</db:type> <db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#completionColumn-prop">completionColumn</db:link></db:member>
<db:member><db:link xlink:href="qcompleter.xml#caseSensitivity-prop">caseSensitivity</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filterMode-prop">
<db:title>[since 5.2] filterMode : Qt::MatchFlags</db:title>
<db:para>how the filtering is performed</db:para>
<db:para>If filterMode is set to <db:link xlink:href="qt.xml#MatchFlag-enum">Qt::MatchStartsWith</db:link>, only those entries that start with the typed characters will be displayed. <db:link xlink:href="qt.xml#MatchFlag-enum">Qt::MatchContains</db:link> will display the entries that contain the typed characters, and <db:link xlink:href="qt.xml#MatchFlag-enum">Qt::MatchEndsWith</db:link> the ones that end with the typed characters.</db:para>
<db:para>Currently, only these three modes are implemented. Setting filterMode to any other <db:link xlink:href="qt.xml#MatchFlag-enum">Qt::MatchFlag</db:link> will issue a warning, and no action will be performed.</db:para>
<db:para>The default mode is <db:link xlink:href="qt.xml#MatchFlag-enum">Qt::MatchStartsWith</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#MatchFlag-enum">Qt::MatchFlags</db:link></db:type> <db:emphasis role="bold">filterMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFilterMode</db:emphasis>(<db:type><db:link xlink:href="qt.xml#MatchFlag-enum">Qt::MatchFlags</db:link></db:type> <db:emphasis>filterMode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxVisibleItems-prop">
<db:title>[since 4.6] maxVisibleItems : int</db:title>
<db:para>This property holds the maximum allowed size on screen of the completer, measured in items</db:para>
<db:para>By default, this property has a value of 7.</db:para>
<db:para>This property was introduced in Qt 4.6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxVisibleItems</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaxVisibleItems</db:emphasis>(<db:type>int</db:type> <db:emphasis>maxItems</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="modelSorting-prop">
<db:title>modelSorting : ModelSorting</db:title>
<db:para>This property holds the way the model is sorted</db:para>
<db:para>By default, no assumptions are made about the order of the items in the model that provides the completions.</db:para>
<db:para>If the model's data for the <db:link xlink:href="qcompleter.xml#completionColumn-prop">completionColumn</db:link>() and <db:link xlink:href="qcompleter.xml#completionRole-prop">completionRole</db:link>() is sorted in ascending order, you can set this property to <db:link xlink:href="qcompleter.xml#ModelSorting-enum">CaseSensitivelySortedModel</db:link> or <db:link xlink:href="qcompleter.xml#ModelSorting-enum">CaseInsensitivelySortedModel</db:link>. On large models, this can lead to significant performance improvements because the completer object can then use a binary search algorithm instead of linear search algorithm.</db:para>
<db:para>The sort order (i.e ascending or descending order) of the model is determined dynamically by inspecting the contents of the model.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The performance improvements described above cannot take place when the completer's <db:link xlink:href="qcompleter.xml#caseSensitivity-prop">caseSensitivity</db:link> is different to the case sensitivity used by the model's when sorting.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcompleter.xml#ModelSorting-enum">QCompleter::ModelSorting</db:link></db:type> <db:emphasis role="bold">modelSorting</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setModelSorting</db:emphasis>(<db:type><db:link xlink:href="qcompleter.xml#ModelSorting-enum">QCompleter::ModelSorting</db:link></db:type> <db:emphasis>sorting</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#caseSensitivity-prop">setCaseSensitivity</db:link>()</db:member>
<db:member><db:link xlink:href="qcompleter.xml#ModelSorting-enum">QCompleter::ModelSorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wrapAround-prop">
<db:title>[since 4.3] wrapAround : bool</db:title>
<db:para>This property holds the completions wrap around when navigating through items</db:para>
<db:para>The default is true.</db:para>
<db:para>This property was introduced in Qt 4.3.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">wrapAround</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWrapAround</db:emphasis>(<db:type>bool</db:type> <db:emphasis>wrap</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCompleter">
<db:title>QCompleter::QCompleter(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a completer object with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QCompleter-1">
<db:title>QCompleter::QCompleter(QAbstractItemModel *<db:emphasis>model</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a completer object with the given <db:code role="parameter">parent</db:code> that provides completions from the specified <db:code role="parameter">model</db:code>.</db:para>
</db:section>
<db:section xml:id="QCompleter-2">
<db:title>QCompleter::QCompleter(const QStringList &amp;<db:emphasis>list</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qcompleter.xml">QCompleter</db:link> object with the given <db:code role="parameter">parent</db:code> that uses the specified <db:code role="parameter">list</db:code> as a source of possible completions.</db:para>
</db:section>
<db:section xml:id="dtor.QCompleter">
<db:title>[virtual noexcept] QCompleter::~QCompleter()</db:title>
<db:para>Destroys the completer object.</db:para>
</db:section>
<db:section xml:id="activated">
<db:title>void QCompleter::activated(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is sent when an item in the <db:link xlink:href="qcompleter.xml#popup">popup</db:link>() is activated by the user. (by clicking or pressing return). The item's <db:code role="parameter">index</db:code> in the <db:link xlink:href="qcompleter.xml#completionModel">completionModel</db:link>() is given.</db:para>
</db:section>
<db:section xml:id="activated-1">
<db:title>void QCompleter::activated(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This signal is sent when an item in the <db:link xlink:href="qcompleter.xml#popup">popup</db:link>() is activated by the user (by clicking or pressing return). The item's <db:code role="parameter">text</db:code> is given.</db:para>
</db:section>
<db:section xml:id="complete">
<db:title>void QCompleter::complete(const QRect &amp;<db:emphasis>rect</db:emphasis> = QRect())</db:title>
<db:para>For <db:link xlink:href="qcompleter.xml#CompletionMode-enum">QCompleter::PopupCompletion</db:link> and QCompletion::UnfilteredPopupCompletion modes, calling this function displays the popup displaying the current completions. By default, if <db:code role="parameter">rect</db:code> is not specified, the popup is displayed on the bottom of the <db:link xlink:href="qcompleter.xml#widget">widget</db:link>(). If <db:code role="parameter">rect</db:code> is specified the popup is displayed on the left edge of the rectangle.</db:para>
<db:para>For <db:link xlink:href="qcompleter.xml#CompletionMode-enum">QCompleter::InlineCompletion</db:link> mode, the <db:link xlink:href="qcompleter.xml#highlighted">highlighted</db:link>() signal is fired with the current completion.</db:para>
</db:section>
<db:section xml:id="completionCount">
<db:title>int QCompleter::completionCount() const</db:title>
<db:para>Returns the number of completions for the current prefix. For an unsorted model with a large number of items this can be expensive. Use <db:link xlink:href="qcompleter.xml#setCurrentRow">setCurrentRow</db:link>() and <db:link xlink:href="qcompleter.xml#currentCompletion">currentCompletion</db:link>() to iterate through all the completions.</db:para>
</db:section>
<db:section xml:id="completionModel">
<db:title>QAbstractItemModel *QCompleter::completionModel() const</db:title>
<db:para>Returns the completion model. The completion model is a read-only list model that contains all the possible matches for the current completion prefix. The completion model is auto-updated to reflect the current completions.</db:para>
<db:note>
<db:para>The return value of this function is defined to be an <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> purely for generality. This actual kind of model returned is an instance of an <db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link> subclass.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#completionPrefix-prop">completionPrefix</db:link></db:member>
<db:member><db:link xlink:href="qcompleter.xml#model">model</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentCompletion">
<db:title>QString QCompleter::currentCompletion() const</db:title>
<db:para>Returns the current completion string. This includes the <db:link xlink:href="qcompleter.xml#completionPrefix-prop">completionPrefix</db:link>. When used alongside <db:link xlink:href="qcompleter.xml#setCurrentRow">setCurrentRow</db:link>(), it can be used to iterate through all the matches.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#setCurrentRow">setCurrentRow</db:link>()</db:member>
<db:member><db:link xlink:href="qcompleter.xml#currentIndex">currentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentIndex">
<db:title>QModelIndex QCompleter::currentIndex() const</db:title>
<db:para>Returns the model index of the current completion in the <db:link xlink:href="qcompleter.xml#completionModel">completionModel</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#setCurrentRow">setCurrentRow</db:link>()</db:member>
<db:member><db:link xlink:href="qcompleter.xml#currentCompletion">currentCompletion</db:link>()</db:member>
<db:member><db:link xlink:href="qcompleter.xml#model">model</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentRow">
<db:title>int QCompleter::currentRow() const</db:title>
<db:para>Returns the current row.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#setCurrentRow">setCurrentRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QCompleter::event(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual protected] bool QCompleter::eventFilter(QObject *<db:emphasis>o</db:emphasis>, QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *watched, QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="highlighted">
<db:title>void QCompleter::highlighted(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is sent when an item in the <db:link xlink:href="qcompleter.xml#popup">popup</db:link>() is highlighted by the user. It is also sent if <db:link xlink:href="qcompleter.xml#complete">complete</db:link>() is called with the <db:link xlink:href="qcompleter.xml#completionMode-prop">completionMode</db:link>() set to <db:link xlink:href="qcompleter.xml#CompletionMode-enum">QCompleter::InlineCompletion</db:link>. The item's <db:code role="parameter">index</db:code> in the <db:link xlink:href="qcompleter.xml#completionModel">completionModel</db:link>() is given.</db:para>
</db:section>
<db:section xml:id="highlighted-1">
<db:title>void QCompleter::highlighted(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This signal is sent when an item in the <db:link xlink:href="qcompleter.xml#popup">popup</db:link>() is highlighted by the user. It is also sent if <db:link xlink:href="qcompleter.xml#complete">complete</db:link>() is called with the <db:link xlink:href="qcompleter.xml#completionMode-prop">completionMode</db:link>() set to <db:link xlink:href="qcompleter.xml#CompletionMode-enum">QCompleter::InlineCompletion</db:link>. The item's <db:code role="parameter">text</db:code> is given.</db:para>
</db:section>
<db:section xml:id="model">
<db:title>QAbstractItemModel *QCompleter::model() const</db:title>
<db:para>Returns the model that provides completion strings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#setModel">setModel</db:link>()</db:member>
<db:member><db:link xlink:href="qcompleter.xml#completionModel">completionModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pathFromIndex">
<db:title>[virtual] QString QCompleter::pathFromIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the path for the given <db:code role="parameter">index</db:code>. The completer object uses this to obtain the completion text from the underlying model.</db:para>
<db:para>The default implementation returns the <db:link xlink:href="qt.xml#ItemDataRole-enum">edit role</db:link> of the item for list models. It returns the absolute file path if the model is a <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#splitPath">splitPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="popup">
<db:title>QAbstractItemView *QCompleter::popup() const</db:title>
<db:para>Returns the popup used to display completions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#setPopup">setPopup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentRow">
<db:title>bool QCompleter::setCurrentRow(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Sets the current row to the <db:code role="parameter">row</db:code> specified. Returns true if successful; otherwise returns false.</db:para>
<db:para>This function may be used along with <db:link xlink:href="qcompleter.xml#currentCompletion">currentCompletion</db:link>() to iterate through all the possible completions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#currentRow">currentRow</db:link>()</db:member>
<db:member><db:link xlink:href="qcompleter.xml#currentCompletion">currentCompletion</db:link>()</db:member>
<db:member><db:link xlink:href="qcompleter.xml#completionCount">completionCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setModel">
<db:title>void QCompleter::setModel(QAbstractItemModel *<db:emphasis>model</db:emphasis>)</db:title>
<db:para>Sets the model which provides completions to <db:code role="parameter">model</db:code>. The <db:code role="parameter">model</db:code> can be list model or a tree model. If a model has been already previously set and it has the <db:link xlink:href="qcompleter.xml">QCompleter</db:link> as its parent, it is deleted.</db:para>
<db:para>For convenience, if <db:code role="parameter">model</db:code> is a <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>, <db:link xlink:href="qcompleter.xml">QCompleter</db:link> switches its <db:link xlink:href="qcompleter.xml#caseSensitivity-prop">caseSensitivity</db:link> to <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseInsensitive</db:link> on Windows and <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> on other platforms.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#completionModel">completionModel</db:link>()</db:member>
<db:member><db:link xlink:href="qcompleter.xml#modelSorting-prop">modelSorting</db:link></db:member>
<db:member><db:link xlink:href="qcompleter.xml#handling-tree-models">Handling Tree Models</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPopup">
<db:title>void QCompleter::setPopup(QAbstractItemView *<db:emphasis>popup</db:emphasis>)</db:title>
<db:para>Sets the popup used to display completions to <db:code role="parameter">popup</db:code>. <db:link xlink:href="qcompleter.xml">QCompleter</db:link> takes ownership of the view.</db:para>
<db:para>A <db:link xlink:href="qlistview.xml">QListView</db:link> is automatically created when the <db:link xlink:href="qcompleter.xml#completionMode-prop">completionMode</db:link>() is set to <db:link xlink:href="qcompleter.xml#CompletionMode-enum">QCompleter::PopupCompletion</db:link> or <db:link xlink:href="qcompleter.xml#CompletionMode-enum">QCompleter::UnfilteredPopupCompletion</db:link>. The default popup displays the <db:link xlink:href="qcompleter.xml#completionColumn-prop">completionColumn</db:link>().</db:para>
<db:para>Ensure that this function is called before the view settings are modified. This is required since view's properties may require that a model has been set on the view (for example, hiding columns in the view requires a model to be set on the view).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#popup">popup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWidget">
<db:title>void QCompleter::setWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets the widget for which completion are provided for to <db:code role="parameter">widget</db:code>. This function is automatically called when a <db:link xlink:href="qcompleter.xml">QCompleter</db:link> is set on a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> using <db:link xlink:href="qlineedit.xml#setCompleter">QLineEdit::setCompleter</db:link>() or on a <db:link xlink:href="qcombobox.xml">QComboBox</db:link> using <db:link xlink:href="qcombobox.xml#setCompleter">QComboBox::setCompleter</db:link>(). The widget needs to be set explicitly when providing completions for custom widgets.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#widget">widget</db:link>()</db:member>
<db:member><db:link xlink:href="qcompleter.xml#setModel">setModel</db:link>()</db:member>
<db:member><db:link xlink:href="qcompleter.xml#setPopup">setPopup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="splitPath">
<db:title>[virtual] QStringList QCompleter::splitPath(const QString &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:para>Splits the given <db:code role="parameter">path</db:code> into strings that are used to match at each level in the <db:link xlink:href="qcompleter.xml#model">model</db:link>().</db:para>
<db:para>The default implementation of splitPath() splits a file system path based on <db:link xlink:href="qdir.xml#separator">QDir::separator</db:link>() when the sourceModel() is a <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>.</db:para>
<db:para>When used with list models, the first item in the returned list is used for matching.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#pathFromIndex">pathFromIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qcompleter.xml#handling-tree-models">Handling Tree Models</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QCompleter::widget() const</db:title>
<db:para>Returns the widget for which the completer object is providing completions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcompleter.xml#setWidget">setWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
