<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QApplication Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qapplication.xml">QApplication</db:link> class manages the GUI application's control flow and main settings.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QApplication</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qguiapplication.xml" xlink:role="class">QGuiApplication</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qapplication.xml">QApplication</db:link> specializes <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> with some functionality needed for <db:link xlink:href="qwidget.xml">QWidget</db:link>-based applications. It handles widget specific initialization, finalization.</db:para>
<db:para>For any GUI application using Qt, there is precisely <db:emphasis role="bold">one</db:emphasis> <db:link xlink:href="qapplication.xml">QApplication</db:link> object, no matter whether the application has 0, 1, 2 or more windows at any given time. For non-<db:link xlink:href="qwidget.xml">QWidget</db:link> based Qt applications, use <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> instead, as it does not depend on the <db:link xlink:href="qtwidgets-module.xml">QtWidgets</db:link> library.</db:para>
<db:para>Some GUI applications provide a special batch mode ie. provide command line arguments for executing tasks without manual intervention. In such non-GUI mode, it is often sufficient to instantiate a plain <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> to avoid unnecessarily initializing resources needed for a graphical user interface. The following example shows how to dynamically create an appropriate type of application instance:</db:para>
<db:programlisting language="cpp">QCoreApplication* createApplication(int &amp;amp;argc, char *argv[])
{
    for (int i = 1; i &amp;lt; argc; ++i) {
        if (!qstrcmp(argv[i], &quot;-no-gui&quot;))
            return new QCoreApplication(argc, argv);
    }
    return new QApplication(argc, argv);
}

int main(int argc, char* argv[])
{
    QScopedPointer&amp;lt;QCoreApplication&amp;gt; app(createApplication(argc, argv));

    if (qobject_cast&amp;lt;QApplication *&amp;gt;(app.data())) {
       // start GUI version...
    } else {
       // start non-GUI version...
    }

    return app-&amp;gt;exec();
}
</db:programlisting>
<db:para>The <db:link xlink:href="qapplication.xml">QApplication</db:link> object is accessible through the <db:link xlink:href="qcoreapplication.xml#instance">instance</db:link>() function that returns a pointer equivalent to the global <db:link xlink:href="qapplication.xml#qApp">qApp</db:link> pointer.</db:para>
<db:para><db:link xlink:href="qapplication.xml">QApplication</db:link>'s main areas of responsibility are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>It initializes the application with the user's desktop settings such as <db:link xlink:href="qapplication.xml#palette">palette</db:link>(), <db:link xlink:href="qapplication.xml#font">font</db:link>() and <db:link xlink:href="qapplication.xml#doubleClickInterval-prop">doubleClickInterval</db:link>(). It keeps track of these properties in case the user changes the desktop globally, for example through some kind of control panel.</db:para>
</db:listitem>
<db:listitem>
<db:para>It performs event handling, meaning that it receives events from the underlying window system and dispatches them to the relevant widgets. By using <db:link xlink:href="qcoreapplication.xml#sendEvent">sendEvent</db:link>() and <db:link xlink:href="qcoreapplication.xml#postEvent">postEvent</db:link>() you can send your own events to widgets.</db:para>
</db:listitem>
<db:listitem>
<db:para>It parses common command line arguments and sets its internal state accordingly. See the <db:link xlink:href="qapplication.xml#QApplication">constructor documentation</db:link> below for more details.</db:para>
</db:listitem>
<db:listitem>
<db:para>It defines the application's look and feel, which is encapsulated in a <db:link xlink:href="qstyle.xml">QStyle</db:link> object. This can be changed at runtime with <db:link xlink:href="qapplication.xml#setStyle">setStyle</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>It provides localization of strings that are visible to the user via <db:link xlink:href="qcoreapplication.xml#translate">translate</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>It provides some magical objects like the <db:link xlink:href="qguiapplication.xml#clipboard">clipboard</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>It knows about the application's windows. You can ask which widget is at a certain position using <db:link xlink:href="qapplication.xml#widgetAt">widgetAt</db:link>(), get a list of <db:link xlink:href="qapplication.xml#topLevelWidgets">topLevelWidgets</db:link>() and <db:link xlink:href="qapplication.xml#closeAllWindows">closeAllWindows</db:link>(), etc.</db:para>
</db:listitem>
<db:listitem>
<db:para>It manages the application's mouse cursor handling, see <db:link xlink:href="qguiapplication.xml#setOverrideCursor">setOverrideCursor</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Since the <db:link xlink:href="qapplication.xml">QApplication</db:link> object does so much initialization, it <db:emphasis>must</db:emphasis> be created before any other objects related to the user interface are created. <db:link xlink:href="qapplication.xml">QApplication</db:link> also deals with common command line arguments. Hence, it is usually a good idea to create it <db:emphasis>before</db:emphasis> any interpretation or modification of <db:code>argv</db:code> is done in the application itself.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th colspan="2">
<db:para>Groups of functions</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>System settings</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qguiapplication.xml#desktopSettingsAware">desktopSettingsAware</db:link>(), <db:link xlink:href="qguiapplication.xml#setDesktopSettingsAware">setDesktopSettingsAware</db:link>(), <db:link xlink:href="qapplication.xml#cursorFlashTime-prop">cursorFlashTime</db:link>(), <db:link xlink:href="qapplication.xml#cursorFlashTime-prop">setCursorFlashTime</db:link>(), <db:link xlink:href="qapplication.xml#doubleClickInterval-prop">doubleClickInterval</db:link>(), <db:link xlink:href="qapplication.xml#doubleClickInterval-prop">setDoubleClickInterval</db:link>(), <db:link xlink:href="qapplication.xml#keyboardInputInterval-prop">setKeyboardInputInterval</db:link>(), <db:link xlink:href="qapplication.xml#wheelScrollLines-prop">wheelScrollLines</db:link>(), <db:link xlink:href="qapplication.xml#wheelScrollLines-prop">setWheelScrollLines</db:link>(), <db:link xlink:href="qapplication.xml#palette">palette</db:link>(), <db:link xlink:href="qapplication.xml#setPalette">setPalette</db:link>(), <db:link xlink:href="qapplication.xml#font">font</db:link>(), <db:link xlink:href="qapplication.xml#setFont">setFont</db:link>(), fontMetrics().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Event handling</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qapplication.xml#exec">exec</db:link>(), <db:link xlink:href="qcoreapplication.xml#processEvents">processEvents</db:link>(), <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>(), <db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>(). <db:link xlink:href="qcoreapplication.xml#sendEvent">sendEvent</db:link>(), <db:link xlink:href="qcoreapplication.xml#postEvent">postEvent</db:link>(), <db:link xlink:href="qcoreapplication.xml#sendPostedEvents">sendPostedEvents</db:link>(), <db:link xlink:href="qcoreapplication.xml#removePostedEvents">removePostedEvents</db:link>(), <db:link xlink:href="qapplication.xml#notify">notify</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GUI Styles</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qapplication.xml#style">style</db:link>(), <db:link xlink:href="qapplication.xml#setStyle">setStyle</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Text handling</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcoreapplication.xml#installTranslator">installTranslator</db:link>(), <db:link xlink:href="qcoreapplication.xml#removeTranslator">removeTranslator</db:link>() <db:link xlink:href="qcoreapplication.xml#translate">translate</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Widgets</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qapplication.xml#allWidgets">allWidgets</db:link>(), <db:link xlink:href="qapplication.xml#topLevelWidgets">topLevelWidgets</db:link>(), <db:link xlink:href="qapplication.xml#activePopupWidget">activePopupWidget</db:link>(), <db:link xlink:href="qapplication.xml#activeModalWidget">activeModalWidget</db:link>(), <db:link xlink:href="qguiapplication.xml#clipboard">clipboard</db:link>(), <db:link xlink:href="qapplication.xml#focusWidget">focusWidget</db:link>(), <db:link xlink:href="qapplication.xml#activeWindow">activeWindow</db:link>(), <db:link xlink:href="qapplication.xml#widgetAt">widgetAt</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Advanced cursor handling</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qguiapplication.xml#overrideCursor">overrideCursor</db:link>(), <db:link xlink:href="qguiapplication.xml#setOverrideCursor">setOverrideCursor</db:link>(), <db:link xlink:href="qguiapplication.xml#restoreOverrideCursor">restoreOverrideCursor</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Miscellaneous</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qapplication.xml#closeAllWindows">closeAllWindows</db:link>(), <db:link xlink:href="qcoreapplication.xml#startingUp">startingUp</db:link>(), <db:link xlink:href="qcoreapplication.xml#closingDown">closingDown</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link></db:member>
<db:member><db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link></db:member>
<db:member><db:link xlink:href="qeventloop.xml">QEventLoop</db:link></db:member>
<db:member><db:link xlink:href="qsettings.xml">QSettings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoSipEnabled-prop">
<db:title>autoSipEnabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoSipEnabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoSipEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoSipEnabled</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>toggles automatic SIP (software input panel) visibility</db:para>
<db:para>Set this property to <db:code>true</db:code> to automatically display the SIP when entering widgets that accept keyboard input. This property only affects widgets with the WA_InputMethodEnabled attribute set, and is typically used to launch a virtual keyboard on devices which have very few or no keys.</db:para>
<db:para><db:emphasis role="bold"> The property only has an effect on platforms that use software input panels.</db:emphasis></db:para>
<db:para>The default is platform dependent.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoSipEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoSipEnabled</db:emphasis>(const <db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="cursorFlashTime-prop">
<db:title>cursorFlashTime : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>cursorFlashTime</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cursorFlashTime</db:synopsisinfo>
<db:synopsisinfo role="setter">setCursorFlashTime</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the text cursor's flash (blink) time in milliseconds</db:para>
<db:para>The flash time is the time required to display, invert and restore the caret display. Usually the text cursor is displayed for half the cursor flash time, then hidden for the same amount of time, but this may vary.</db:para>
<db:para>The default value on X11 is 1000 milliseconds. On Windows, the <db:guilabel>Control Panel</db:guilabel> value is used and setting this property sets the cursor flash time for all applications.</db:para>
<db:para>We recommend that widgets do not cache this value as it may change at any time if the user changes the global desktop settings.</db:para>
<db:note>
<db:para>This property may hold a negative value, for instance if cursor blinking is disabled.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">cursorFlashTime</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCursorFlashTime</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="doubleClickInterval-prop">
<db:title>doubleClickInterval : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>doubleClickInterval</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">doubleClickInterval</db:synopsisinfo>
<db:synopsisinfo role="setter">setDoubleClickInterval</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the time limit in milliseconds that distinguishes a double click from two consecutive mouse clicks</db:para>
<db:para>The default value on X11 is 400 milliseconds. On Windows and Mac OS, the operating system's value is used.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">doubleClickInterval</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDoubleClickInterval</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="keyboardInputInterval-prop">
<db:title>keyboardInputInterval : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>keyboardInputInterval</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">keyboardInputInterval</db:synopsisinfo>
<db:synopsisinfo role="setter">setKeyboardInputInterval</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the time limit in milliseconds that distinguishes a key press from two consecutive key presses</db:para>
<db:para>The default value on X11 is 400 milliseconds. On Windows and Mac OS, the operating system's value is used.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">keyboardInputInterval</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setKeyboardInputInterval</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="startDragDistance-prop">
<db:title>startDragDistance : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>startDragDistance</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">startDragDistance</db:synopsisinfo>
<db:synopsisinfo role="setter">setStartDragDistance</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum distance required for a drag and drop operation to start.</db:para>
<db:para>If you support drag and drop in your application, and want to start a drag and drop operation after the user has moved the cursor a certain distance with a button held down, you should use this property's value as the minimum distance required.</db:para>
<db:para>For example, if the mouse position of the click is stored in <db:code>startPos</db:code> and the current position (e.g. in the mouse move event) is <db:code>currentPos</db:code>, you can find out if a drag should be started with code like this:</db:para>
<db:programlisting language="cpp">if ((startPos - currentPos).manhattanLength() &amp;gt;=
        QApplication::startDragDistance())
    startTheDrag();
</db:programlisting>
<db:para>Qt uses this value internally, e.g. in <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>.</db:para>
<db:para>The default value (if the platform doesn't provide a different default) is 10 pixels.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">startDragDistance</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setStartDragDistance</db:emphasis>(<db:type>int</db:type> <db:emphasis>l</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#startDragTime-prop">startDragTime</db:link>()</db:member>
<db:member><db:link xlink:href="qpoint.xml#manhattanLength">QPoint::manhattanLength</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#drag-and-drop">Drag and Drop</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startDragTime-prop">
<db:title>startDragTime : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>startDragTime</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">startDragTime</db:synopsisinfo>
<db:synopsisinfo role="setter">setStartDragTime</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the time in milliseconds that a mouse button must be held down before a drag and drop operation will begin</db:para>
<db:para>If you support drag and drop in your application, and want to start a drag and drop operation after the user has held down a mouse button for a certain amount of time, you should use this property's value as the delay.</db:para>
<db:para>Qt also uses this delay internally, e.g. in <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> and <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, for starting a drag.</db:para>
<db:para>The default value is 500 ms.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">startDragTime</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setStartDragTime</db:emphasis>(<db:type>int</db:type> <db:emphasis>ms</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#startDragDistance-prop">startDragDistance</db:link>()</db:member>
<db:member><db:link xlink:href="graphicsview.xml#drag-and-drop">Drag and Drop</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="styleSheet-prop">
<db:title>styleSheet : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>styleSheet</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">styleSheet</db:synopsisinfo>
<db:synopsisinfo role="setter">setStyleSheet</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the application style sheet</db:para>
<db:para>By default, this property returns an empty string unless the user specifies the <db:code>-stylesheet</db:code> option on the command line when running the application.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">styleSheet</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setStyleSheet</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>sheet</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#setStyle">QWidget::setStyle</db:link>()</db:member>
<db:member><db:link xlink:href="stylesheet.xml">Qt Style Sheets</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wheelScrollLines-prop">
<db:title>wheelScrollLines : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>wheelScrollLines</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">wheelScrollLines</db:synopsisinfo>
<db:synopsisinfo role="setter">setWheelScrollLines</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of lines to scroll a widget, when the mouse wheel is rotated.</db:para>
<db:para>If the value exceeds the widget's number of visible lines, the widget should interpret the scroll operation as a single <db:emphasis>page up</db:emphasis> or <db:emphasis>page down</db:emphasis>. If the widget is an <db:link xlink:href="qabstractitemview.xml">item view class</db:link>, then the result of scrolling one <db:emphasis>line</db:emphasis> depends on the setting of the widget's <db:link xlink:href="qabstractitemview.xml#verticalScrollMode-prop">scroll mode</db:link>. Scroll one <db:emphasis>line</db:emphasis> can mean <db:link xlink:href="qabstractitemview.xml#ScrollMode-enum">scroll one item</db:link> or <db:link xlink:href="qabstractitemview.xml#ScrollMode-enum">scroll one pixel</db:link>.</db:para>
<db:para>By default, this property has a value of 3.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">wheelScrollLines</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWheelScrollLines</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstylehints.xml#wheelScrollLines-prop">QStyleHints::wheelScrollLines</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QApplication">
<db:title>QApplication::QApplication(int &amp;<db:emphasis>argc</db:emphasis>, char **<db:emphasis>argv</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QApplication</db:methodname>
<db:methodparam>
<db:type>int &amp;</db:type>
<db:parameter>argc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>char **</db:type>
<db:parameter>argv</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QApplication(int &amp;argc, char **argv)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Initializes the window system and constructs an application object with <db:code role="parameter">argc</db:code> command line arguments in <db:code role="parameter">argv</db:code>.</db:para>
<db:warning>
<db:para>The data referred to by <db:code role="parameter">argc</db:code> and <db:code role="parameter">argv</db:code> must stay valid for the entire lifetime of the <db:link xlink:href="qapplication.xml">QApplication</db:link> object. In addition, <db:code role="parameter">argc</db:code> must be greater than zero and <db:code role="parameter">argv</db:code> must contain at least one valid character string.</db:para>
</db:warning>
<db:para>The global <db:code>qApp</db:code> pointer refers to this application object. Only one application object should be created.</db:para>
<db:para>This application object must be constructed before any <db:link xlink:href="qpaintdevice.xml">paint devices</db:link> (including widgets, pixmaps, bitmaps etc.).</db:para>
<db:note>
<db:para><db:code role="parameter">argc</db:code> and <db:code role="parameter">argv</db:code> might be changed as Qt removes command line arguments that it recognizes.</db:para>
</db:note>
<db:para>All Qt programs automatically support the following command line options:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>-style= <db:emphasis>style</db:emphasis>, sets the application GUI style. Possible values depend on your system configuration. If you compiled Qt with additional styles or have additional styles as plugins these will be available to the <db:code>-style</db:code> command line option. You can also set the style for all Qt applications by setting the <db:code>QT_STYLE_OVERRIDE</db:code> environment variable.</db:para>
</db:listitem>
<db:listitem>
<db:para>-style <db:emphasis>style</db:emphasis>, is the same as listed above.</db:para>
</db:listitem>
<db:listitem>
<db:para>-stylesheet= <db:emphasis>stylesheet</db:emphasis>, sets the application <db:link xlink:href="stylesheet.xml">styleSheet</db:link>. The value must be a path to a file that contains the Style Sheet.</db:para>
<db:note>
<db:para>Relative URLs in the Style Sheet file are relative to the Style Sheet file's path.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>-stylesheet <db:emphasis>stylesheet</db:emphasis>, is the same as listed above.</db:para>
</db:listitem>
<db:listitem>
<db:para>-widgetcount, prints debug message at the end about number of widgets left undestroyed and maximum number of widgets existed at the same time</db:para>
</db:listitem>
<db:listitem>
<db:para>-reverse, sets the application's layout direction to <db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::RightToLeft</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>-qmljsdebugger=, activates the QML/JS debugger with a specified port. The value must be of format port:1234[,block], where block is optional and will make the application wait until a debugger connects to it.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#arguments">QCoreApplication::arguments</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QApplication">
<db:title>[virtual] QApplication::~QApplication()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QApplication</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QApplication()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Cleans up any window system resources that were allocated by this application. Sets the global variable <db:code>qApp</db:code> to <db:code>nullptr</db:code>.</db:para>
</db:section>
<db:section xml:id="aboutQt">
<db:title>[static] void QApplication::aboutQt()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>aboutQt</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void aboutQt()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Displays a simple message box about Qt. The message includes the version number of Qt being used by the application.</db:para>
<db:para>This is useful for inclusion in the <db:guilabel>Help</db:guilabel> menu of an application, as shown in the <db:link xlink:href="qtwidgets-mainwindows-menus-example.xml">Menus</db:link> example.</db:para>
<db:para>This function is a convenience slot for <db:link xlink:href="qmessagebox.xml#aboutQt">QMessageBox::aboutQt</db:link>().</db:para>
</db:section>
<db:section xml:id="activeModalWidget">
<db:title>[static] QWidget *QApplication::activeModalWidget()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>activeModalWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * activeModalWidget()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the active modal widget.</db:para>
<db:para>A modal widget is a special top-level widget which is a subclass of <db:link xlink:href="qdialog.xml">QDialog</db:link> that specifies the modal parameter of the constructor as true. A modal widget must be closed before the user can continue with other parts of the program.</db:para>
<db:para>Modal widgets are organized in a stack. This function returns the active modal widget at the top of the stack.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#activePopupWidget">activePopupWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#topLevelWidgets">topLevelWidgets</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activePopupWidget">
<db:title>[static] QWidget *QApplication::activePopupWidget()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>activePopupWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * activePopupWidget()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the active popup widget.</db:para>
<db:para>A popup widget is a special top-level widget that sets the <db:code>Qt::WType_Popup</db:code> widget flag, e.g. the <db:link xlink:href="qmenu.xml">QMenu</db:link> widget. When the application opens a popup widget, all events are sent to the popup. Normal widgets and modal widgets cannot be accessed before the popup widget is closed.</db:para>
<db:para>Only other popup widgets may be opened when a popup widget is shown. The popup widgets are organized in a stack. This function returns the active popup widget at the top of the stack.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#activeModalWidget">activeModalWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#topLevelWidgets">topLevelWidgets</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activeWindow">
<db:title>[static] QWidget *QApplication::activeWindow()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>activeWindow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * activeWindow()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the application top-level window that has the keyboard input focus, or <db:code>nullptr</db:code> if no application window has the focus. There might be an activeWindow() even if there is no <db:link xlink:href="qapplication.xml#focusWidget">focusWidget</db:link>(), for example if no widget in that window accepts key events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#setActiveWindow">setActiveWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#setFocus-1">QWidget::setFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#focus-prop">QWidget::hasFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#focusWidget">focusWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="alert">
<db:title>[static] void QApplication::alert(QWidget *<db:emphasis>widget</db:emphasis>, int <db:emphasis>msec</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>alert</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msec</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void alert(QWidget *widget, int msec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Causes an alert to be shown for <db:code role="parameter">widget</db:code> if the window is not the active window. The alert is shown for <db:code role="parameter">msec</db:code> milliseconds. If <db:code role="parameter">msec</db:code> is zero (the default), then the alert is shown indefinitely until the window becomes active again.</db:para>
<db:para>Currently this function does nothing on Qt for Embedded Linux.</db:para>
<db:para>On macOS, this works more at the application level and will cause the application icon to bounce in the dock.</db:para>
<db:para>On Windows, this causes the window's taskbar entry to flash for a time. If <db:code role="parameter">msec</db:code> is zero, the flashing will stop and the taskbar entry will turn a different color (currently orange).</db:para>
<db:para>On X11, this will cause the window to be marked as &quot;demands attention&quot;, the window must not be hidden (i.e. not have hide() called on it, but be visible in some sort of way) in order for this to work.</db:para>
</db:section>
<db:section xml:id="allWidgets">
<db:title>[static] QWidgetList QApplication::allWidgets()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWidgetList</db:type>
<db:methodname>allWidgets</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidgetList allWidgets()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all the widgets in the application.</db:para>
<db:para>The list is empty (<db:link xlink:href="qlist.xml#isEmpty">QList::isEmpty</db:link>()) if there are no widgets.</db:para>
<db:note>
<db:para>Some of the widgets may be hidden.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void updateAllWidgets()
{
    const QWidgetList allWidgets = QApplication::allWidgets();
    for (QWidget *widget : allWidgets)
        widget-&amp;gt;update();
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#topLevelWidgets">topLevelWidgets</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#visible-prop">QWidget::isVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beep">
<db:title>[static] void QApplication::beep()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>beep</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void beep()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sounds the bell, using the default volume and sound. The function is <db:emphasis>not</db:emphasis> available in Qt for Embedded Linux.</db:para>
</db:section>
<db:section xml:id="closeAllWindows">
<db:title>[static] void QApplication::closeAllWindows()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>closeAllWindows</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void closeAllWindows()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes all top-level windows.</db:para>
<db:para>This function is particularly useful for applications with many top-level windows.</db:para>
<db:para>The windows are closed in random order, until one window does not accept the close event. The application quits when the last window was successfully closed, unless <db:link xlink:href="qguiapplication.xml#quitOnLastWindowClosed-prop">quitOnLastWindowClosed</db:link> is set to false. To trigger application termination from e.g. a menu, use <db:link xlink:href="qcoreapplication.xml#quit">QCoreApplication::quit</db:link>() instead of this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#quitOnLastWindowClosed-prop">quitOnLastWindowClosed</db:link></db:member>
<db:member><db:link xlink:href="qguiapplication.xml#lastWindowClosed">lastWindowClosed</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#close">QWidget::close</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#closeEvent">QWidget::closeEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#lastWindowClosed">lastWindowClosed</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#quit">QCoreApplication::quit</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#topLevelWidgets">topLevelWidgets</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#isWindow">QWidget::isWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QApplication::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qguiapplication.xml#event" role="function">QGuiApplication::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="exec">
<db:title>[static] int QApplication::exec()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>exec</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int exec()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enters the main event loop and waits until <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>() is called, then returns the value that was set to <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>() (which is 0 if <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>() is called via <db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>()).</db:para>
<db:para>It is necessary to call this function to start event handling. The main event loop receives events from the window system and dispatches these to the application widgets.</db:para>
<db:para>Generally, no user interaction can take place before calling exec(). As a special case, modal widgets like <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> can be used before calling exec(), because modal widgets call exec() to start a local event loop.</db:para>
<db:para>To make your application perform idle processing, i.e., executing a special function whenever there are no pending events, use a <db:link xlink:href="qtimer.xml">QTimer</db:link> with 0 timeout. More advanced idle processing schemes can be achieved using <db:link xlink:href="qcoreapplication.xml#processEvents">processEvents</db:link>().</db:para>
<db:para>We recommend that you connect clean-up code to the <db:link xlink:href="qcoreapplication.xml#aboutToQuit">aboutToQuit</db:link>() signal, instead of putting it in your application's <db:code>main()</db:code> function. This is because, on some platforms the QApplication::exec() call may not return. For example, on the Windows platform, when the user logs off, the system terminates the process after Qt closes all top-level windows. Hence, there is <db:emphasis>no guarantee</db:emphasis> that the application will have time to exit its event loop and execute code at the end of the <db:code>main()</db:code> function, after the QApplication::exec() call.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#quitOnLastWindowClosed-prop">quitOnLastWindowClosed</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#quit">QCoreApplication::quit</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#exit">QCoreApplication::exit</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#processEvents">QCoreApplication::processEvents</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#exec">QCoreApplication::exec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusChanged">
<db:title>void QApplication::focusChanged(QWidget *<db:emphasis>old</db:emphasis>, QWidget *<db:emphasis>now</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>focusChanged</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>old</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>now</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusChanged(QWidget *old, QWidget *now)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the widget that has keyboard focus changed from <db:code role="parameter">old</db:code> to <db:code role="parameter">now</db:code>, i.e., because the user pressed the tab-key, clicked into a widget or changed the active window. Both <db:code role="parameter">old</db:code> and <db:code role="parameter">now</db:code> can be <db:code>nullptr</db:code>.</db:para>
<db:para>The signal is emitted after both widget have been notified about the change through <db:link xlink:href="qfocusevent.xml">QFocusEvent</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#setFocus-1">QWidget::setFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#clearFocus">QWidget::clearFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#FocusReason-enum">Qt::FocusReason</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusWidget">
<db:title>[static] QWidget *QApplication::focusWidget()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>focusWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * focusWidget()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the application widget that has the keyboard input focus, or <db:code>nullptr</db:code> if no widget in this application has the focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#setFocus-1">QWidget::setFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#focus-prop">QWidget::hasFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#activeWindow">activeWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#focusChanged">focusChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font">
<db:title>[static] QFont QApplication::font()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFont</db:type>
<db:methodname>font</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont font()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default application font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#fontMetrics" role="deprecated">fontMetrics</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#font-prop">QWidget::font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font-1">
<db:title>[static] QFont QApplication::font(const QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFont</db:type>
<db:methodname>font</db:methodname>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont font(const QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the default font for the <db:code role="parameter">widget</db:code>. If a default font was not registered for the <db:code role="parameter">widget</db:code>'s class, it returns the default font of its nearest registered superclass.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#fontMetrics" role="deprecated">fontMetrics</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#font-prop">QWidget::setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font-2">
<db:title>[static] QFont QApplication::font(const char *<db:emphasis>className</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFont</db:type>
<db:methodname>font</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont font(const char *className)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the font for widgets of the given <db:code role="parameter">className</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#font-prop">QWidget::font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEffectEnabled">
<db:title>[static] bool QApplication::isEffectEnabled(Qt::UIEffect <db:emphasis>effect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEffectEnabled</db:methodname>
<db:methodparam>
<db:type>Qt::UIEffect</db:type>
<db:parameter>effect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEffectEnabled(Qt::UIEffect effect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">effect</db:code> is enabled; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>By default, Qt will try to use the desktop settings. To prevent this, call setDesktopSettingsAware(false).</db:para>
<db:note>
<db:para>All effects are disabled on screens running at less than 16-bit color depth.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#setEffectEnabled">setEffectEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#UIEffect-enum">Qt::UIEffect</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="navigationMode">
<db:title>[static] Qt::NavigationMode QApplication::navigationMode()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>Qt::NavigationMode</db:type>
<db:methodname>navigationMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::NavigationMode navigationMode()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns what kind of focus navigation Qt is using.</db:para>
<db:para>This feature is available in Qt for Embedded Linux only.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#setNavigationMode">setNavigationMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="notify">
<db:title>[override virtual] bool QApplication::notify(QObject *<db:emphasis>receiver</db:emphasis>, QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>notify</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool notify(QObject *receiver, QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qguiapplication.xml#notify" role="function">QGuiApplication::notify(QObject *object, QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="palette">
<db:title>[static] QPalette QApplication::palette(const QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QPalette</db:type>
<db:methodname>palette</db:methodname>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPalette palette(const QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If a <db:code role="parameter">widget</db:code> is passed, the default palette for the widget's class is returned. This may or may not be the application palette. In most cases there is no special palette for certain types of widgets, but one notable exception is the popup menu under Windows, if the user has defined a special background color for menus in the display settings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#setPalette">setPalette</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#palette-prop">QWidget::palette</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="palette-1">
<db:title>[static] QPalette QApplication::palette(const char *<db:emphasis>className</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QPalette</db:type>
<db:methodname>palette</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPalette palette(const char *className)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the palette for widgets of the given <db:code role="parameter">className</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#setPalette">setPalette</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#palette-prop">QWidget::palette</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setActiveWindow">
<db:title>[static] void QApplication::setActiveWindow(QWidget *<db:emphasis>active</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setActiveWindow</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>active</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setActiveWindow(QWidget *active)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the active window to the <db:code role="parameter">active</db:code> widget in response to a system event. The function is called from the platform specific event handlers.</db:para>
<db:warning>
<db:para>This function does <db:emphasis>not</db:emphasis> set the keyboard focus to the active widget. Call <db:link xlink:href="qwidget.xml#activateWindow">QWidget::activateWindow</db:link>() instead.</db:para>
</db:warning>
<db:para>It sets the <db:link xlink:href="qapplication.xml#activeWindow">activeWindow</db:link>() and <db:link xlink:href="qapplication.xml#focusWidget">focusWidget</db:link>() attributes and sends proper <db:link xlink:href="qevent.xml#Type-enum">WindowActivate</db:link>/<db:link xlink:href="qevent.xml#Type-enum">WindowDeactivate</db:link> and <db:link xlink:href="qevent.xml#Type-enum">FocusIn</db:link>/<db:link xlink:href="qevent.xml#Type-enum">FocusOut</db:link> events to all appropriate widgets. The window will then be painted in active state (e.g. cursors in line edits will blink), and it will have tool tips enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#activeWindow">activeWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#activateWindow">QWidget::activateWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEffectEnabled">
<db:title>[static] void QApplication::setEffectEnabled(Qt::UIEffect <db:emphasis>effect</db:emphasis>, bool <db:emphasis>enable</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setEffectEnabled</db:methodname>
<db:methodparam>
<db:type>Qt::UIEffect</db:type>
<db:parameter>effect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEffectEnabled(Qt::UIEffect effect, bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables the UI effect <db:code role="parameter">effect</db:code> if <db:code role="parameter">enable</db:code> is true, otherwise the effect will not be used.</db:para>
<db:note>
<db:para>All effects are disabled on screens running at less than 16-bit color depth.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#isEffectEnabled">isEffectEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#UIEffect-enum">Qt::UIEffect</db:link></db:member>
<db:member><db:link xlink:href="qguiapplication.xml#setDesktopSettingsAware">setDesktopSettingsAware</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFont">
<db:title>[static] void QApplication::setFont(const QFont &amp;<db:emphasis>font</db:emphasis>, const char *<db:emphasis>className</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setFont</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFont(const QFont &amp;font, const char *className)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the default application font to <db:code role="parameter">font</db:code>. If <db:code role="parameter">className</db:code> is passed, the change applies only to classes that inherit <db:code role="parameter">className</db:code> (as reported by <db:link xlink:href="qobject.xml#inherits">QObject::inherits</db:link>()).</db:para>
<db:para>On application start-up, the default font depends on the window system. It can vary depending on both the window system version and the locale. This function lets you override the default font; but overriding may be a bad idea because, for example, some locales need extra large fonts to support their special characters.</db:para>
<db:warning>
<db:para>Do not use this function in conjunction with <db:link xlink:href="stylesheet.xml">Qt Style Sheets</db:link>. The font of an application can be customized using the &quot;font&quot; style sheet property. To set a bold font for all QPushButtons, set the application <db:link xlink:href="qapplication.xml#styleSheet-prop">styleSheet</db:link>() as &quot;<db:link xlink:href="qpushbutton.xml">QPushButton</db:link> { font: bold }&quot;</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#font">font</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#fontMetrics" role="deprecated">fontMetrics</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#font-prop">QWidget::setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNavigationMode">
<db:title>[static] void QApplication::setNavigationMode(Qt::NavigationMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setNavigationMode</db:methodname>
<db:methodparam>
<db:type>Qt::NavigationMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNavigationMode(Qt::NavigationMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the kind of focus navigation Qt should use to <db:code role="parameter">mode</db:code>.</db:para>
<db:para>This feature is available in Qt for Embedded Linux only.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#navigationMode">navigationMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPalette">
<db:title>[static] void QApplication::setPalette(const QPalette &amp;<db:emphasis>palette</db:emphasis>, const char *<db:emphasis>className</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setPalette</db:methodname>
<db:methodparam>
<db:type>const QPalette &amp;</db:type>
<db:parameter>palette</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPalette(const QPalette &amp;palette, const char *className)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the application palette to <db:code role="parameter">palette</db:code>.</db:para>
<db:para>If <db:code role="parameter">className</db:code> is passed, the change applies only to widgets that inherit <db:code role="parameter">className</db:code> (as reported by <db:link xlink:href="qobject.xml#inherits">QObject::inherits</db:link>()). If <db:code role="parameter">className</db:code> is left 0, the change affects all widgets, thus overriding any previously set class specific palettes.</db:para>
<db:para>The palette may be changed according to the current GUI style in <db:link xlink:href="qstyle.xml#polish">QStyle::polish</db:link>().</db:para>
<db:warning>
<db:para>Do not use this function in conjunction with <db:link xlink:href="stylesheet.xml">Qt Style Sheets</db:link>. When using style sheets, the palette of a widget can be customized using the &quot;color&quot;, &quot;background-color&quot;, &quot;selection-color&quot;, &quot;selection-background-color&quot; and &quot;alternate-background-color&quot;.</db:para>
</db:warning>
<db:note>
<db:para>Some styles do not use the palette for all drawing, for instance, if they make use of native theme engines. This is the case for the Windows Vista and macOS styles.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#palette-prop">QWidget::setPalette</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#palette">palette</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#polish">QStyle::polish</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStyle">
<db:title>[static] void QApplication::setStyle(QStyle *<db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setStyle</db:methodname>
<db:methodparam>
<db:type>QStyle *</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStyle(QStyle *style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the application's GUI style to <db:code role="parameter">style</db:code>. Ownership of the style object is transferred to <db:link xlink:href="qapplication.xml">QApplication</db:link>, so <db:link xlink:href="qapplication.xml">QApplication</db:link> will delete the style object on application exit or when a new style is set and the old style is still the parent of the application object.</db:para>
<db:para>Example usage:</db:para>
<db:programlisting language="cpp">QApplication::setStyle(QStyleFactory::create(&quot;Fusion&quot;));
</db:programlisting>
<db:para>When switching application styles, the color palette is set back to the initial colors or the system defaults. This is necessary since certain styles have to adapt the color palette to be fully style-guide compliant.</db:para>
<db:para>Setting the style before a palette has been set, i.e., before creating <db:link xlink:href="qapplication.xml">QApplication</db:link>, will cause the application to use <db:link xlink:href="qstyle.xml#standardPalette">QStyle::standardPalette</db:link>() for the palette.</db:para>
<db:warning>
<db:para>Qt style sheets are currently not supported for custom <db:link xlink:href="qstyle.xml">QStyle</db:link> subclasses. We plan to address this in some future release.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#style">style</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
<db:member><db:link xlink:href="qapplication.xml#setPalette">setPalette</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#desktopSettingsAware">desktopSettingsAware</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStyle-1">
<db:title>[static] QStyle *QApplication::setStyle(const QString &amp;<db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStyle *</db:type>
<db:methodname>setStyle</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStyle * setStyle(const QString &amp;style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Requests a <db:link xlink:href="qstyle.xml">QStyle</db:link> object for <db:code role="parameter">style</db:code> from the <db:link xlink:href="qstylefactory.xml">QStyleFactory</db:link>.</db:para>
<db:para>The string must be one of the <db:link xlink:href="qstylefactory.xml#keys">QStyleFactory::keys</db:link>(), typically one of &quot;windows&quot;, &quot;windowsvista&quot;, &quot;fusion&quot;, or &quot;macos&quot;. Style names are case insensitive.</db:para>
<db:para>Returns <db:code>nullptr</db:code> if an unknown <db:code role="parameter">style</db:code> is passed, otherwise the <db:link xlink:href="qstyle.xml">QStyle</db:link> object returned is set as the application's GUI style.</db:para>
<db:warning>
<db:para>To ensure that the application's style is set correctly, it is best to call this function before the <db:link xlink:href="qapplication.xml">QApplication</db:link> constructor, if possible.</db:para>
</db:warning>
</db:section>
<db:section xml:id="style">
<db:title>[static] QStyle *QApplication::style()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStyle *</db:type>
<db:methodname>style</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStyle * style()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the application's style object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#setStyle">setStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="topLevelAt">
<db:title>[static] QWidget *QApplication::topLevelAt(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>topLevelAt</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * topLevelAt(const QPoint &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the top-level widget at the given <db:code role="parameter">point</db:code>; returns <db:code>nullptr</db:code> if there is no such widget.</db:para>
</db:section>
<db:section xml:id="topLevelAt-1">
<db:title>[static] QWidget *QApplication::topLevelAt(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>topLevelAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * topLevelAt(int x, int y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the top-level widget at the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>); returns 0 if there is no such widget.</db:para>
</db:section>
<db:section xml:id="topLevelWidgets">
<db:title>[static] QWidgetList QApplication::topLevelWidgets()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWidgetList</db:type>
<db:methodname>topLevelWidgets</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidgetList topLevelWidgets()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the top-level widgets (windows) in the application.</db:para>
<db:note>
<db:para>Some of the top-level widgets may be hidden, for example a tooltip if no tooltip is currently shown.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void showAllHiddenTopLevelWidgets()
{
    const QWidgetList topLevelWidgets = QApplication::topLevelWidgets();
    for (QWidget *widget : topLevelWidgets) {
        if (widget-&amp;gt;isHidden())
            widget-&amp;gt;show();
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#allWidgets">allWidgets</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#isWindow">QWidget::isWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#isHidden">QWidget::isHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widgetAt">
<db:title>[static] QWidget *QApplication::widgetAt(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>widgetAt</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * widgetAt(const QPoint &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the widget at global screen position <db:code role="parameter">point</db:code>, or <db:code>nullptr</db:code> if there is no Qt widget there.</db:para>
<db:para>This function can be slow.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcursor.xml#pos">QCursor::pos</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#grabMouse">QWidget::grabMouse</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#grabKeyboard">QWidget::grabKeyboard</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widgetAt-1">
<db:title>[static] QWidget *QApplication::widgetAt(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>widgetAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * widgetAt(int x, int y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the widget at global screen position (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), or <db:code>nullptr</db:code> if there is no Qt widget there.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="qApp">
<db:title>qApp</db:title>
<db:methodsynopsis>
<db:methodname>qApp</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">qApp</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>A global pointer referring to the unique application object. It is equivalent to <db:link xlink:href="qcoreapplication.xml#instance">QCoreApplication::instance</db:link>(), but cast as a <db:link xlink:href="qapplication.xml">QApplication</db:link> pointer, so only valid when the unique application object is a <db:link xlink:href="qapplication.xml">QApplication</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#instance">QCoreApplication::instance</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#qGuiApp">qGuiApp</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QApplication</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qapplication.xml">QApplication</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="fontMetrics">
<db:title>[static] QFontMetrics QApplication::fontMetrics()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFontMetrics</db:type>
<db:methodname>fontMetrics</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFontMetrics fontMetrics()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use the <db:link xlink:href="qfontmetricsf.xml">QFontMetricsF</db:link> constructor instead. Returns display (screen) font metrics for the application font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#font">font</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#fontMetrics">QWidget::fontMetrics</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#fontMetrics">QPainter::fontMetrics</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
