<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Editable Tree Model Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to implement a simple item-based tree model that can be used with other classes the model/view framework.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;treeitem.h&quot;
#include &quot;treemodel.h&quot;

TreeModel::TreeModel(const QStringList &amp;amp;headers, const QString &amp;amp;data, QObject *parent)
    : QAbstractItemModel(parent)
{
    QVector&amp;lt;QVariant&amp;gt; rootData;
    foreach (QString header, headers)
        rootData &amp;lt;&amp;lt; header;

    rootItem = new TreeItem(rootData);
    setupModelData(data.split(QString(&quot;\n&quot;)), rootItem);
}

TreeModel::~TreeModel()
{
    delete rootItem;
}

int TreeModel::columnCount(const QModelIndex &amp;amp; /* parent */) const
{
    return rootItem-&amp;gt;columnCount();
}

QVariant TreeModel::data(const QModelIndex &amp;amp;index, int role) const
{
    if (!index.isValid())
        return QVariant();

    if (role != Qt::DisplayRole &amp;amp;&amp;amp; role != Qt::EditRole)
        return QVariant();

    TreeItem *item = getItem(index);

    return item-&amp;gt;data(index.column());
}

Qt::ItemFlags TreeModel::flags(const QModelIndex &amp;amp;index) const
{
    if (!index.isValid())
        return 0;

    return Qt::ItemIsEditable | QAbstractItemModel::flags(index);
}

TreeItem *TreeModel::getItem(const QModelIndex &amp;amp;index) const
{
    if (index.isValid()) {
        TreeItem *item = static_cast&amp;lt;TreeItem*&amp;gt;(index.internalPointer());
        if (item)
            return item;
    }
    return rootItem;
}

QVariant TreeModel::headerData(int section, Qt::Orientation orientation,
                               int role) const
{
    if (orientation == Qt::Horizontal &amp;amp;&amp;amp; role == Qt::DisplayRole)
        return rootItem-&amp;gt;data(section);

    return QVariant();
}

QModelIndex TreeModel::index(int row, int column, const QModelIndex &amp;amp;parent) const
{
    if (parent.isValid() &amp;amp;&amp;amp; parent.column() != 0)
        return QModelIndex();

    TreeItem *parentItem = getItem(parent);

    TreeItem *childItem = parentItem-&amp;gt;child(row);
    if (childItem)
        return createIndex(row, column, childItem);
    else
        return QModelIndex();
}

bool TreeModel::insertColumns(int position, int columns, const QModelIndex &amp;amp;parent)
{
    bool success;

    beginInsertColumns(parent, position, position + columns - 1);
    success = rootItem-&amp;gt;insertColumns(position, columns);
    endInsertColumns();

    return success;
}

bool TreeModel::insertRows(int position, int rows, const QModelIndex &amp;amp;parent)
{
    TreeItem *parentItem = getItem(parent);
    bool success;

    beginInsertRows(parent, position, position + rows - 1);
    success = parentItem-&amp;gt;insertChildren(position, rows, rootItem-&amp;gt;columnCount());
    endInsertRows();

    return success;
}

QModelIndex TreeModel::parent(const QModelIndex &amp;amp;index) const
{
    if (!index.isValid())
        return QModelIndex();

    TreeItem *childItem = getItem(index);
    TreeItem *parentItem = childItem-&amp;gt;parent();

    if (parentItem == rootItem)
        return QModelIndex();

    return createIndex(parentItem-&amp;gt;childNumber(), 0, parentItem);
}

bool TreeModel::removeColumns(int position, int columns, const QModelIndex &amp;amp;parent)
{
    bool success;

    beginRemoveColumns(parent, position, position + columns - 1);
    success = rootItem-&amp;gt;removeColumns(position, columns);
    endRemoveColumns();

    if (rootItem-&amp;gt;columnCount() == 0)
        removeRows(0, rowCount());

    return success;
}

bool TreeModel::removeRows(int position, int rows, const QModelIndex &amp;amp;parent)
{
    TreeItem *parentItem = getItem(parent);
    bool success = true;

    beginRemoveRows(parent, position, position + rows - 1);
    success = parentItem-&amp;gt;removeChildren(position, rows);
    endRemoveRows();

    return success;
}

int TreeModel::rowCount(const QModelIndex &amp;amp;parent) const
{
    TreeItem *parentItem = getItem(parent);

    return parentItem-&amp;gt;childCount();
}

bool TreeModel::setData(const QModelIndex &amp;amp;index, const QVariant &amp;amp;value, int role)
{
    if (role != Qt::EditRole)
        return false;

    TreeItem *item = getItem(index);
    bool result = item-&amp;gt;setData(index.column(), value);

    if (result)
        emit dataChanged(index, index, {role});

    return result;
}

bool TreeModel::setHeaderData(int section, Qt::Orientation orientation,
                              const QVariant &amp;amp;value, int role)
{
    if (role != Qt::EditRole || orientation != Qt::Horizontal)
        return false;

    bool result = rootItem-&amp;gt;setData(section, value);

    if (result)
        emit headerDataChanged(orientation, section, section);

    return result;
}

void TreeModel::setupModelData(const QStringList &amp;amp;lines, TreeItem *parent)
{
    QList&amp;lt;TreeItem*&amp;gt; parents;
    QList&amp;lt;int&amp;gt; indentations;
    parents &amp;lt;&amp;lt; parent;
    indentations &amp;lt;&amp;lt; 0;

    int number = 0;

    while (number &amp;lt; lines.count()) {
        int position = 0;
        while (position &amp;lt; lines[number].length()) {
            if (lines[number].at(position) != ' ')
                break;
            ++position;
        }

        QString lineData = lines[number].mid(position).trimmed();

        if (!lineData.isEmpty()) {
            // Read the column data from the rest of the line.
            QStringList columnStrings = lineData.split(&quot;\t&quot;, QString::SkipEmptyParts);
            QVector&amp;lt;QVariant&amp;gt; columnData;
            for (int column = 0; column &amp;lt; columnStrings.count(); ++column)
                columnData &amp;lt;&amp;lt; columnStrings[column];

            if (position &amp;gt; indentations.last()) {
                // The last child of the current parent is now the new parent
                // unless the current parent has no children.

                if (parents.last()-&amp;gt;childCount() &amp;gt; 0) {
                    parents &amp;lt;&amp;lt; parents.last()-&amp;gt;child(parents.last()-&amp;gt;childCount()-1);
                    indentations &amp;lt;&amp;lt; position;
                }
            } else {
                while (position &amp;lt; indentations.last() &amp;amp;&amp;amp; parents.count() &amp;gt; 0) {
                    parents.pop_back();
                    indentations.pop_back();
                }
            }

            // Append a new item to the current parent's list of children.
            TreeItem *parent = parents.last();
            parent-&amp;gt;insertChildren(parent-&amp;gt;childCount(), 1, rootItem-&amp;gt;columnCount());
            for (int column = 0; column &amp;lt; columnData.size(); ++column)
                parent-&amp;gt;child(parent-&amp;gt;childCount() - 1)-&amp;gt;setData(column, columnData[column]);
        }

        ++number;
    }
}

</db:programlisting>
</db:article>
