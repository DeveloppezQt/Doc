<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TouchPoint Class</db:title>
<db:subtitle>QTouchEvent::TouchPoint</db:subtitle>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtouchevent-touchpoint.xml">TouchPoint</db:link> class provides information about a touch point in a <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>TouchPoint</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/touchpoint-metrics.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="InfoFlag-enum">
<db:title>enum TouchPoint::InfoFlag</db:title>
<db:bridgehead renderas="sect2">flags TouchPoint::InfoFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>InfoFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>Pen</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Token</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QTouchEvent::TouchPoint::InfoFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>The values of this enum describe additional information about a touch point.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtouchevent-touchpoint.xml">TouchPoint</db:link></db:emphasis>::Pen</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>Indicates that the contact has been made by a designated pointing device (e.g. a pen) instead of a finger.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qtouchevent-touchpoint.xml">TouchPoint</db:link></db:emphasis>::Token</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>Indicates that the contact has been made by a fiducial object (e.g. a knob or other token) instead of a finger.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>InfoFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;InfoFlag&gt;. </db:code>It stores an OR combination of <db:code>InfoFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="TouchPoint-2">
<db:title>TouchPoint::TouchPoint(TouchPoint &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>TouchPoint</db:methodname>
<db:methodparam>
<db:type>TouchPoint &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">TouchPoint(TouchPoint &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qtouchevent-touchpoint.xml">TouchPoint</db:link> instance, making it point to the same object that <db:code role="parameter">other</db:code> was pointing to.</db:para>
</db:section>
<db:section xml:id="ellipseDiameters">
<db:title>[since 5.9] QSizeF TouchPoint::ellipseDiameters() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSizeF</db:type>
<db:methodname>ellipseDiameters</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizeF ellipseDiameters() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width and height of the bounding ellipse of this touch point. The return value is in logical pixels. Most touchscreens do not detect the shape of the contact point, so a null size is the most common value. In other cases the diameters may be nonzero and equal (the ellipse is approximated as a circle).</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>TouchPoint::InfoFlags TouchPoint::flags() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>TouchPoint::InfoFlags</db:type>
<db:methodname>flags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">TouchPoint::InfoFlags flags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns additional information about the touch point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#InfoFlag-enum">QTouchEvent::TouchPoint::InfoFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="id">
<db:title>int TouchPoint::id() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>id</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int id() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the id number of this touch point.</db:para>
<db:para>Do not assume that id numbers start at zero or that they are sequential. Such an assumption is often false due to the way the underlying drivers work.</db:para>
</db:section>
<db:section xml:id="lastNormalizedPos">
<db:title>QPointF TouchPoint::lastNormalizedPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>lastNormalizedPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF lastNormalizedPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the normalized position of this touch point from the previous touch event.</db:para>
<db:para>The coordinates are normalized to the size of the touch device, i.e. (0,0) is the top-left corner and (1,1) is the bottom-right corner.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#normalizedPos">normalizedPos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#startNormalizedPos">startNormalizedPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastPos">
<db:title>QPointF TouchPoint::lastPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>lastPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF lastPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of this touch point from the previous touch event, relative to the widget or <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> that received the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#pos">pos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#startPos">startPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastScenePos">
<db:title>QPointF TouchPoint::lastScenePos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>lastScenePos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF lastScenePos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scene position of this touch point from the previous touch event.</db:para>
<db:para>The scene position is the position in <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> coordinates if the <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> is handled by a QGraphicsItem::touchEvent() reimplementation, and identical to the screen position for widgets.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#scenePos">scenePos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#startScenePos">startScenePos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastScreenPos">
<db:title>QPointF TouchPoint::lastScreenPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>lastScreenPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF lastScreenPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the screen position of this touch point from the previous touch event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#screenPos">screenPos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#startScreenPos">startScreenPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalizedPos">
<db:title>QPointF TouchPoint::normalizedPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>normalizedPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF normalizedPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the normalized position of this touch point.</db:para>
<db:para>The coordinates are normalized to the size of the touch device, i.e. (0,0) is the top-left corner and (1,1) is the bottom-right corner.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#startNormalizedPos">startNormalizedPos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#lastNormalizedPos">lastNormalizedPos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#pos">pos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pos">
<db:title>QPointF TouchPoint::pos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>pos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF pos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of this touch point, relative to the widget or <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> that received the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#startPos">startPos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#lastPos">lastPos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#screenPos">screenPos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#scenePos">scenePos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#normalizedPos">normalizedPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pressure">
<db:title>qreal TouchPoint::pressure() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>pressure</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal pressure() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pressure of this touch point. The return value is in the range 0.0 to 1.0.</db:para>
</db:section>
<db:section xml:id="rawScreenPositions">
<db:title>[since 5.0] QVector&lt;QPointF&gt; TouchPoint::rawScreenPositions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVector&lt;QPointF&gt;</db:type>
<db:methodname>rawScreenPositions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector&lt;QPointF&gt; rawScreenPositions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the raw, unfiltered positions for the touch point. The positions are in native screen coordinates. To get local coordinates you can use mapFromGlobal() of the <db:link xlink:href="qwindow.xml">QWindow</db:link> returned by <db:link xlink:href="qtouchevent.xml#window">QTouchEvent::window</db:link>().</db:para>
<db:note>
<db:para>Returns an empty vector if the touch device's capabilities do not include <db:link xlink:href="qtouchdevice.xml#CapabilityFlag-enum">QTouchDevice::RawPositions</db:link>.</db:para>
</db:note>
<db:note>
<db:para>Native screen coordinates refer to the native orientation of the screen which, in case of mobile devices, is typically portrait. This means that on systems capable of screen orientation changes the positions in this list will not reflect the current orientation (unlike <db:link xlink:href="qtouchevent-touchpoint.xml#pos">pos</db:link>(), <db:link xlink:href="qtouchevent-touchpoint.xml#screenPos">screenPos</db:link>(), etc.) and will always be reported in the native orientation.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchdevice.xml#capabilities">QTouchDevice::capabilities</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent.xml#device">device</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent.xml#window">window</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotation">
<db:title>[since 5.8] qreal TouchPoint::rotation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>rotation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal rotation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the angular orientation of this touch point. The return value is in degrees, where zero (the default) indicates the finger or token is pointing upwards, a negative angle means it's rotated to the left, and a positive angle means it's rotated to the right. Most touchscreens do not detect rotation, so zero is the most common value.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="scenePos">
<db:title>QPointF TouchPoint::scenePos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>scenePos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF scenePos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scene position of this touch point.</db:para>
<db:para>The scene position is the position in <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> coordinates if the <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> is handled by a QGraphicsItem::touchEvent() reimplementation, and identical to the screen position for widgets.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#startScenePos">startScenePos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#lastScenePos">lastScenePos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#pos">pos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="screenPos">
<db:title>QPointF TouchPoint::screenPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>screenPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF screenPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the screen position of this touch point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#startScreenPos">startScreenPos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#lastScreenPos">lastScreenPos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#pos">pos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startNormalizedPos">
<db:title>QPointF TouchPoint::startNormalizedPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>startNormalizedPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF startNormalizedPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the normalized starting position of this touch point.</db:para>
<db:para>The coordinates are normalized to the size of the touch device, i.e. (0,0) is the top-left corner and (1,1) is the bottom-right corner.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#normalizedPos">normalizedPos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#lastNormalizedPos">lastNormalizedPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startPos">
<db:title>QPointF TouchPoint::startPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>startPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF startPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the starting position of this touch point, relative to the widget or <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> that received the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#pos">pos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#lastPos">lastPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startScenePos">
<db:title>QPointF TouchPoint::startScenePos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>startScenePos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF startScenePos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the starting scene position of this touch point.</db:para>
<db:para>The scene position is the position in <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> coordinates if the <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> is handled by a QGraphicsItem::touchEvent() reimplementation, and identical to the screen position for widgets.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#scenePos">scenePos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#lastScenePos">lastScenePos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startScreenPos">
<db:title>QPointF TouchPoint::startScreenPos() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>startScreenPos</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF startScreenPos() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the starting screen position of this touch point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#screenPos">screenPos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#lastScreenPos">lastScreenPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>Qt::TouchPointState TouchPoint::state() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::TouchPointState</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::TouchPointState state() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current state of this touch point.</db:para>
</db:section>
<db:section xml:id="uniqueId">
<db:title>[since 5.8] QPointingDeviceUniqueId TouchPoint::uniqueId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointingDeviceUniqueId</db:type>
<db:methodname>uniqueId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointingDeviceUniqueId uniqueId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the unique ID of this touch point or token, if any.</db:para>
<db:para>It is normally invalid (see <db:link xlink:href="qpointingdeviceuniqueid.xml#isValid">isValid</db:link>()), because touchscreens cannot uniquely identify fingers. But when the <db:link xlink:href="qtouchevent-touchpoint.xml#InfoFlag-enum">Token</db:link> flag is set, it is expected to uniquely identify a specific token (fiducial object).</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#flags">flags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="velocity">
<db:title>QVector2D TouchPoint::velocity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVector2D</db:type>
<db:methodname>velocity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector2D velocity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a velocity vector for this touch point. The vector is in the screen's coordinate system, using pixels per seconds for the magnitude.</db:para>
<db:note>
<db:para>The returned vector is only valid if the touch device's capabilities include <db:link xlink:href="qtouchdevice.xml#CapabilityFlag-enum">QTouchDevice::Velocity</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchdevice.xml#capabilities">QTouchDevice::capabilities</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent.xml#device">device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for TouchPoint</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qtouchevent-touchpoint.xml">TouchPoint</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="rect">
<db:title>QRectF TouchPoint::rect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>rect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF rect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the rect for this touch point, relative to the widget or <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> that received the event. The rect is centered around the point returned by <db:link xlink:href="qtouchevent-touchpoint.xml#pos">pos</db:link>().</db:para>
<db:note>
<db:para>This function returns an empty rect if the device does not report touch point sizes.</db:para>
</db:note>
<db:para>This function is deprecated in 5.9 because it returns the outer bounds of the touchpoint regardless of rotation, whereas a touchpoint is more correctly modeled as an ellipse at position <db:link xlink:href="qtouchevent-touchpoint.xml#pos">pos</db:link>() with <db:link xlink:href="qtouchevent-touchpoint.xml#ellipseDiameters">ellipseDiameters</db:link>() which are independent of <db:link xlink:href="qtouchevent-touchpoint.xml#rotation">rotation</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#scenePos">scenePos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#ellipseDiameters">ellipseDiameters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sceneRect">
<db:title>QRectF TouchPoint::sceneRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>sceneRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF sceneRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the rect for this touch point in scene coordinates.</db:para>
<db:note>
<db:para>This function returns an empty rect if the device does not report touch point sizes.</db:para>
</db:note>
<db:para>This function is deprecated in 5.9 because it returns the outer bounds of the touchpoint regardless of rotation, whereas a touchpoint is more correctly modeled as an ellipse at position <db:link xlink:href="qtouchevent-touchpoint.xml#scenePos">scenePos</db:link>() with <db:link xlink:href="qtouchevent-touchpoint.xml#ellipseDiameters">ellipseDiameters</db:link>() which are independent of <db:link xlink:href="qtouchevent-touchpoint.xml#rotation">rotation</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#scenePos">scenePos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#ellipseDiameters">ellipseDiameters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="screenRect">
<db:title>QRectF TouchPoint::screenRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>screenRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF screenRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the rect for this touch point in screen coordinates.</db:para>
<db:note>
<db:para>This function returns an empty rect if the device does not report touch point sizes.</db:para>
</db:note>
<db:para>This function is deprecated because it returns the outer bounds of the touchpoint regardless of rotation, whereas a touchpoint is more correctly modeled as an ellipse at position <db:link xlink:href="qtouchevent-touchpoint.xml#screenPos">screenPos</db:link>() with <db:link xlink:href="qtouchevent-touchpoint.xml#ellipseDiameters">ellipseDiameters</db:link>() which are independent of <db:link xlink:href="qtouchevent-touchpoint.xml#rotation">rotation</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#screenPos">screenPos</db:link>()</db:member>
<db:member><db:link xlink:href="qtouchevent-touchpoint.xml#ellipseDiameters">ellipseDiameters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
