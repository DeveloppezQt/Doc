<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt SCXML Media Player Example (Dynamic)</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SCXML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A widget-based application that sends data to and receives it from a dynamically loaded ECMAScript data model.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/mediaplayer.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Media Player Example (Dynamic)</db:emphasis> demonstrates how to access data from a dynamically loaded ECMAScript data model.</db:para>
<db:para>The UI is created using Qt Widgets.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="using-the-ecmascript-data-model">
<db:title>Using the ECMAScript Data Model</db:title>
<db:para>We specify the data model as a value of the <db:emphasis>datamodel</db:emphasis> attribute of the <db:code>&lt;scxml&gt;</db:code> element in <db:emphasis>mediaplayer-common/mediaplayer.scxml</db:emphasis>:</db:para>
<db:programlisting language="cpp">&amp;lt;scxml
    xmlns=&quot;http://www.w3.org/2005/07/scxml&quot;
    version=&quot;1.0&quot;
    name=&quot;MediaPlayerStateMachine&quot;
    initial=&quot;stopped&quot;
    datamodel=&quot;ecmascript&quot;
&amp;gt;
    &amp;lt;datamodel&amp;gt;
        &amp;lt;data id=&quot;media&quot;/&amp;gt;
    &amp;lt;/datamodel&amp;gt;
</db:programlisting>
</db:section>
<db:section xml:id="dynamically-loading-the-state-machine">
<db:title>Dynamically Loading the State Machine</db:title>
<db:para>We link against the Qt SCXML module by adding the following line to the project build files.</db:para>
<db:para>With qmake to the <db:emphasis>mediaplayer-widgets-dynamic.pro</db:emphasis></db:para>
<db:programlisting language="cpp">QT += widgets scxml
</db:programlisting>
<db:para>With cmake to the <db:emphasis>CMakeLists.txt</db:emphasis></db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Core Gui Scxml Widgets)

target_link_libraries(mediaplayer-widgets-dynamic PUBLIC
    Qt6::Core
    Qt6::Gui
    Qt6::Scxml
    Qt6::Widgets
)
</db:programlisting>
<db:para>We dynamically create and instantiate the state machine in <db:emphasis>mediaplayer-wigdets-dynamic/mediaplayer-widgets-dynamic.cpp</db:emphasis>:</db:para>
<db:programlisting language="cpp">#include &quot;../mediaplayer-common/mainwindow.h&quot;

#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QScxmlStateMachine&amp;gt;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);

    auto machine = QScxmlStateMachine::fromFile(
                QStringLiteral(&quot;:mediaplayer.scxml&quot;));
    MainWindow mainWindow(machine);
    machine-&amp;gt;setParent(&amp;amp;mainWindow);

    machine-&amp;gt;start();
    mainWindow.show();
    return app.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="connecting-to-states">
<db:title>Connecting to States</db:title>
<db:para>The media player state machine will send out events when users tap a control and when playback starts or stops, as specified in the SCXML file:</db:para>
<db:programlisting language="cpp">    &amp;lt;state id=&quot;stopped&quot;&amp;gt;
        &amp;lt;transition event=&quot;tap&quot; cond=&quot;isValidMedia()&quot; target=&quot;playing&quot;/&amp;gt;
    &amp;lt;/state&amp;gt;

    &amp;lt;state id=&quot;playing&quot;&amp;gt;
        &amp;lt;onentry&amp;gt;
            &amp;lt;assign location=&quot;media&quot; expr=&quot;_event.data.media&quot;/&amp;gt;
            &amp;lt;send event=&quot;playbackStarted&quot;&amp;gt;
                &amp;lt;param name=&quot;media&quot; expr=&quot;media&quot;/&amp;gt;
            &amp;lt;/send&amp;gt;
        &amp;lt;/onentry&amp;gt;

        &amp;lt;onexit&amp;gt;
            &amp;lt;send event=&quot;playbackStopped&quot;&amp;gt;
                &amp;lt;param name=&quot;media&quot; expr=&quot;media&quot;/&amp;gt;
            &amp;lt;/send&amp;gt;
        &amp;lt;/onexit&amp;gt;

        &amp;lt;transition event=&quot;tap&quot; cond=&quot;!isValidMedia() || media === _event.data.media&quot; target=&quot;stopped&quot;/&amp;gt;
        &amp;lt;transition event=&quot;tap&quot; cond=&quot;isValidMedia() &amp;amp;amp;&amp;amp;amp; media !== _event.data.media&quot; target=&quot;playing&quot;/&amp;gt;
    &amp;lt;/state&amp;gt;
</db:programlisting>
<db:para>To be notified when a state machine sends out an event, we connect to the corresponding signals:</db:para>
<db:programlisting language="cpp">    stateMachine-&amp;gt;connectToEvent(&quot;playbackStarted&quot;, this, &amp;amp;MainWindow::started);
    stateMachine-&amp;gt;connectToEvent(&quot;playbackStopped&quot;, this, &amp;amp;MainWindow::stopped);
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtscxml.git/tree/examples/scxml/mediaplayer-widgets-dynamic?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
