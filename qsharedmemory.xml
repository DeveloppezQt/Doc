<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSharedMemory Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link> class provides access to a shared memory segment.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSharedMemory</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link> provides access to a <db:link xlink:href="shared-memory.xml">shared memory segment</db:link> by multiple threads and processes. Shared memory segments are identified by a key, represented by <db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link>. A key can be created in a cross-platform manner by using platformSafeKey().</db:para>
<db:para>One <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link> object must <db:link xlink:href="qsharedmemory.xml#create">create</db:link>() the segment and this call specifies the size of the segment. All other processes simply <db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>() to the segment that must already exist. After either operation is successful, the application may call <db:link xlink:href="qsharedmemory.xml#data">data</db:link>() to obtain a pointer to the data.</db:para>
<db:para>To support non-atomic operations, <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link> provides API to gain exclusive access: you may lock the shared memory with <db:link xlink:href="qsharedmemory.xml#lock">lock</db:link>() before reading from or writing to the shared memory, but remember to release the lock with <db:link xlink:href="qsharedmemory.xml#unlock">unlock</db:link>() after you are done.</db:para>
<db:para>By default, <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link> automatically destroys the shared memory segment when the last instance of <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link> is <db:link xlink:href="qsharedmemory.xml#detach">detached</db:link> from the segment, and no references to the segment remain.</db:para>
<db:para>For details on the key types, platform-specific limitations, and interoperability with older or non-Qt applications, see the <db:link xlink:href="native-ipc-keys.xml">Native IPC Keys</db:link> documentation. That includes important information for sandboxed applications on Apple platforms, including all apps obtained via the Apple App Store.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="ipc.xml">Inter-Process Communication</db:link></db:member>
<db:member><db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AccessMode-enum">
<db:title>enum QSharedMemory::AccessMode</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:emphasis>::ReadOnly</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The shared memory segment is read-only. Writing to the shared memory segment is not allowed. An attempt to write to a shared memory segment created with ReadOnly causes the program to abort.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:emphasis>::ReadWrite</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Reading and writing the shared memory segment are both allowed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="SharedMemoryError-enum">
<db:title>enum QSharedMemory::SharedMemoryError</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:emphasis>::PermissionDenied</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The operation failed because the caller didn't have the required permissions.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:emphasis>::InvalidSize</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A create operation failed because the requested size was invalid.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:emphasis>::KeyError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The operation failed because of an invalid key.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:emphasis>::AlreadyExists</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qsharedmemory.xml#create">create</db:link>() operation failed because a shared memory segment with the specified key already existed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:emphasis>::NotFound</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>An <db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>() failed because a shared memory segment with the specified key could not be found.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:emphasis>::LockError</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The attempt to <db:link xlink:href="qsharedmemory.xml#lock">lock</db:link>() the shared memory segment failed because <db:link xlink:href="qsharedmemory.xml#create">create</db:link>() or <db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>() failed and returned false, or because a system error occurred in <db:link xlink:href="qsystemsemaphore.xml#acquire">QSystemSemaphore::acquire</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:emphasis>::OutOfResources</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qsharedmemory.xml#create">create</db:link>() operation failed because there was not enough memory available to fill the request.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Something else happened and it was bad.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSharedMemory">
<db:title>QSharedMemory::QSharedMemory(const QString &amp;<db:emphasis>key</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a shared memory object with the given <db:code role="parameter">parent</db:code> and with the legacy key set to <db:code role="parameter">key</db:code>. Because its key is set, its <db:link xlink:href="qsharedmemory.xml#create">create</db:link>() and <db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>() functions can be called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#setKey">setKey</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSharedMemory-2">
<db:title>QSharedMemory::QSharedMemory(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>This function overloads <db:link xlink:href="qsharedmemory.xml#QSharedMemory">QSharedMemory</db:link>().</db:para>
<db:para>Constructs a shared memory object with the given <db:code role="parameter">parent</db:code>. The shared memory object's key is not set by the constructor, so the shared memory object does not have an underlying shared memory segment attached. The key must be set with <db:link xlink:href="qsharedmemory.xml#setNativeKey">setNativeKey</db:link>() before <db:link xlink:href="qsharedmemory.xml#create">create</db:link>() or <db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>() can be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#setNativeKey">setNativeKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSharedMemory-3">
<db:title>QSharedMemory::QSharedMemory(const QNativeIpcKey &amp;<db:emphasis>key</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Constructs a shared memory object with the given <db:code role="parameter">parent</db:code> and with its key set to <db:code role="parameter">key</db:code>. Because its key is set, its <db:link xlink:href="qsharedmemory.xml#create">create</db:link>() and <db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>() functions can be called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#setNativeKey">setNativeKey</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QSharedMemory">
<db:title>[virtual noexcept] QSharedMemory::~QSharedMemory()</db:title>
<db:para>The destructor clears the key, which forces the shared memory object to <db:link xlink:href="qsharedmemory.xml#detach">detach</db:link> from its underlying shared memory segment. If this shared memory object is the last one connected to the shared memory segment, the <db:link xlink:href="qsharedmemory.xml#detach">detach</db:link>() operation destroys the shared memory segment.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#detach">detach</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#isAttached">isAttached</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attach">
<db:title>bool QSharedMemory::attach(QSharedMemory::AccessMode <db:emphasis>mode</db:emphasis> = ReadWrite)</db:title>
<db:para>Attempts to attach the process to the shared memory segment identified by the key that was passed to the constructor or to a call to <db:link xlink:href="qsharedmemory.xml#setNativeKey">setNativeKey</db:link>(). The access <db:code role="parameter">mode</db:code> is <db:link xlink:href="qsharedmemory.xml#AccessMode-enum">ReadWrite</db:link> by default. It can also be <db:link xlink:href="qsharedmemory.xml#AccessMode-enum">ReadOnly</db:link>. Returns true if the attach operation is successful. If false is returned, call <db:link xlink:href="qsharedmemory.xml#error">error</db:link>() to determine which error occurred. After attaching the shared memory segment, a pointer to the shared memory can be obtained by calling <db:link xlink:href="qsharedmemory.xml#data">data</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#isAttached">isAttached</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#detach">detach</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constData">
<db:title>const void *QSharedMemory::constData() const</db:title>
<db:para>Returns a const pointer to the contents of the shared memory segment, if one is attached. Otherwise it returns null. The value returned by this function will not change until a <db:link xlink:href="qsharedmemory.xml#detach">detach</db:link> happens, so it is safe to store this pointer.</db:para>
<db:para>If the memory operations are not atomic, you may lock the shared memory with <db:link xlink:href="qsharedmemory.xml#lock">lock</db:link>() before reading from or writing, but remember to release the lock with <db:link xlink:href="qsharedmemory.xml#unlock">unlock</db:link>() after you are done.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="create">
<db:title>bool QSharedMemory::create(qsizetype <db:emphasis>size</db:emphasis>, QSharedMemory::AccessMode <db:emphasis>mode</db:emphasis> = ReadWrite)</db:title>
<db:para>Creates a shared memory segment of <db:code role="parameter">size</db:code> bytes with the key passed to the constructor or set with <db:link xlink:href="qsharedmemory.xml#setNativeKey">setNativeKey</db:link>(), then attaches to the new shared memory segment with the given access <db:code role="parameter">mode</db:code> and returns <db:code>true</db:code>. If a shared memory segment identified by the key already exists, the attach operation is not performed and <db:code>false</db:code> is returned. When the return value is <db:code>false</db:code>, call <db:link xlink:href="qsharedmemory.xml#error">error</db:link>() to determine which error occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>void *QSharedMemory::data()</db:title>
<db:para>Returns a pointer to the contents of the shared memory segment, if one is attached. Otherwise it returns null. The value returned by this function will not change until a <db:link xlink:href="qsharedmemory.xml#detach">detach</db:link> happens, so it is safe to store this pointer.</db:para>
<db:para>If the memory operations are not atomic, you may lock the shared memory with <db:link xlink:href="qsharedmemory.xml#lock">lock</db:link>() before reading from or writing, but remember to release the lock with <db:link xlink:href="qsharedmemory.xml#unlock">unlock</db:link>() after you are done.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data-1">
<db:title>const void *QSharedMemory::data() const</db:title>
<db:para>This function overloads <db:link xlink:href="qsharedmemory.xml#data">data</db:link>().</db:para>
</db:section>
<db:section xml:id="detach">
<db:title>bool QSharedMemory::detach()</db:title>
<db:para>Detaches the process from the shared memory segment. If this was the last process attached to the shared memory segment, then the shared memory segment is released by the system, i.e., the contents are destroyed. The function returns true if it detaches the shared memory segment. If it returns false, it usually means the segment either isn't attached, or it is locked by another process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#isAttached">isAttached</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QSharedMemory::SharedMemoryError QSharedMemory::error() const</db:title>
<db:para>Returns a value indicating whether an error occurred, and, if so, which error it was.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QSharedMemory::errorString() const</db:title>
<db:para>Returns a text description of the last error that occurred. If <db:link xlink:href="qsharedmemory.xml#error">error</db:link>() returns an <db:link xlink:href="qsharedmemory.xml#SharedMemoryError-enum">error value</db:link>, call this function to get a text string that describes the error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAttached">
<db:title>bool QSharedMemory::isAttached() const</db:title>
<db:para>Returns true if this process is attached to the shared memory segment.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#detach">detach</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="key">
<db:title>QString QSharedMemory::key() const</db:title>
<db:para>Returns the legacy key assigned with <db:link xlink:href="qsharedmemory.xml#setKey">setKey</db:link>() to this shared memory, or a null key if no key has been assigned, or if the segment is using a <db:link xlink:href="qsharedmemory.xml#nativeKey">nativeKey</db:link>(). The key is the identifier used by Qt applications to identify the shared memory segment.</db:para>
<db:para>You can find the native, platform specific, key used by the operating system by calling <db:link xlink:href="qsharedmemory.xml#nativeKey">nativeKey</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#setKey">setKey</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#setNativeKey">setNativeKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lock">
<db:title>bool QSharedMemory::lock()</db:title>
<db:para>This is a semaphore that locks the shared memory segment for access by this process and returns true. If another process has locked the segment, this function blocks until the lock is released. Then it acquires the lock and returns true. If this function returns false, it means that you have ignored a false return from <db:link xlink:href="qsharedmemory.xml#create">create</db:link>() or <db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>(), that you have set the key with <db:link xlink:href="qsharedmemory.xml#setNativeKey">setNativeKey</db:link>() or that <db:link xlink:href="qsystemsemaphore.xml#acquire">QSystemSemaphore::acquire</db:link>() failed due to an unknown system error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#unlock">unlock</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qsystemsemaphore.xml#acquire">QSystemSemaphore::acquire</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nativeIpcKey">
<db:title>[since 6.6] QNativeIpcKey QSharedMemory::nativeIpcKey() const</db:title>
<db:para>Returns the key type for this shared memory object. The key type complements the <db:link xlink:href="qsharedmemory.xml#nativeKey">nativeKey</db:link>() as the identifier used by the operating system to identify the shared memory segment.</db:para>
<db:para>You can use the native key to access shared memory segments that have not been created by Qt, or to grant shared memory access to non-Qt applications. See <db:link xlink:href="native-ipc-keys.xml">Native IPC Keys</db:link> for more information.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#nativeKey">nativeKey</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#setNativeKey">setNativeKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nativeKey">
<db:title>QString QSharedMemory::nativeKey() const</db:title>
<db:para>Returns the native, platform specific, key for this shared memory object. The native key is the identifier used by the operating system to identify the shared memory segment.</db:para>
<db:para>You can use the native key to access shared memory segments that have not been created by Qt, or to grant shared memory access to non-Qt applications. See <db:link xlink:href="native-ipc-keys.xml">Native IPC Keys</db:link> for more information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#setNativeKey">setNativeKey</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#nativeIpcKey">nativeIpcKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setKey">
<db:title>void QSharedMemory::setKey(const QString &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the legacy <db:code role="parameter">key</db:code> for this shared memory object. If <db:code role="parameter">key</db:code> is the same as the current key, the function returns without doing anything. Otherwise, if the shared memory object is attached to an underlying shared memory segment, it will <db:link xlink:href="qsharedmemory.xml#detach">detach</db:link> from it before setting the new key. This function does not do an <db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>().</db:para>
<db:para>You can call <db:link xlink:href="qsharedmemory.xml#key">key</db:link>() to retrieve the legacy key. This function is mostly the same as:</db:para>
<db:programlisting language="cpp">shm.setNativeKey(QSharedMemory::legacyNativeKey(key));
</db:programlisting>
<db:para>except that it enables obtaining the legacy key using <db:link xlink:href="qsharedmemory.xml#key">key</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#key">key</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#nativeKey">nativeKey</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#isAttached">isAttached</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNativeKey">
<db:title>[since 6.6] void QSharedMemory::setNativeKey(const QNativeIpcKey &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:para>Sets the native, platform specific, <db:code role="parameter">key</db:code> for this shared memory object. If <db:code role="parameter">key</db:code> is the same as the current native key, the function returns without doing anything. Otherwise, if the shared memory object is attached to an underlying shared memory segment, it will <db:link xlink:href="qsharedmemory.xml#detach">detach</db:link> from it before setting the new key. This function does not do an <db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>().</db:para>
<db:para>This function is useful if the native key was shared from another process. See <db:link xlink:href="native-ipc-keys.xml">Native IPC Keys</db:link> for more information.</db:para>
<db:para>Portable native keys can be obtained using platformSafeKey().</db:para>
<db:para>You can call <db:link xlink:href="qsharedmemory.xml#nativeKey">nativeKey</db:link>() to retrieve the native key.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#nativeKey">nativeKey</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#nativeIpcKey">nativeIpcKey</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#isAttached">isAttached</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNativeKey-1">
<db:title>void QSharedMemory::setNativeKey(const QString &amp;<db:emphasis>key</db:emphasis>, QNativeIpcKey::Type <db:emphasis>type</db:emphasis> = QNativeIpcKey::legacyDefaultTypeForOs())</db:title>
<db:para>Sets the native, platform specific, <db:code role="parameter">key</db:code> for this shared memory object of type <db:code role="parameter">type</db:code> (the type parameter has been available since Qt 6.6). If <db:code role="parameter">key</db:code> is the same as the current native key, the function returns without doing anything. Otherwise, if the shared memory object is attached to an underlying shared memory segment, it will <db:link xlink:href="qsharedmemory.xml#detach">detach</db:link> from it before setting the new key. This function does not do an <db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>().</db:para>
<db:para>This function is useful if the native key was shared from another process, though the application must take care to ensure the key type matches what the other process expects. See <db:link xlink:href="native-ipc-keys.xml">Native IPC Keys</db:link> for more information.</db:para>
<db:para>Portable native keys can be obtained using platformSafeKey().</db:para>
<db:para>You can call <db:link xlink:href="qsharedmemory.xml#nativeKey">nativeKey</db:link>() to retrieve the native key.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#nativeKey">nativeKey</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#nativeIpcKey">nativeIpcKey</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#isAttached">isAttached</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>qsizetype QSharedMemory::size() const</db:title>
<db:para>Returns the size of the attached shared memory segment. If no shared memory segment is attached, 0 is returned.</db:para>
<db:note>
<db:para>The size of the segment may be larger than the requested size that was passed to <db:link xlink:href="qsharedmemory.xml#create">create</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qsharedmemory.xml#attach">attach</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unlock">
<db:title>bool QSharedMemory::unlock()</db:title>
<db:para>Releases the lock on the shared memory segment and returns true, if the lock is currently held by this process. If the segment is not locked, or if the lock is held by another process, nothing happens and false is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsharedmemory.xml#lock">lock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
