<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTableWidgetItem Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link> class provides an item for use with the <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link> class.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTableWidgetItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTableWidgetItem is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Table items are used to hold pieces of information for table widgets. Items usually contain text, icons, or checkboxes</db:para>
<db:para>The <db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link> class is a convenience class that replaces the QTableItem class in Qt 3. It provides an item for use with the <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link> class.</db:para>
<db:para>Top-level items are constructed without a parent then inserted at the position specified by a pair of row and column numbers:</db:para>
<db:programlisting language="cpp">    QTableWidgetItem *newItem = new QTableWidgetItem(tr(&quot;%1&quot;).arg(
        pow(row, column+1)));
    tableWidget-&gt;setItem(row, column, newItem);
</db:programlisting>
<db:para>Each item can have its own background brush which is set with the <db:link xlink:href="qtablewidgetitem.xml#setBackground">setBackground</db:link>() function. The current background brush can be found with <db:link xlink:href="qtablewidgetitem.xml#background">background</db:link>(). The text label for each item can be rendered with its own font and brush. These are specified with the <db:link xlink:href="qtablewidgetitem.xml#setFont">setFont</db:link>() and <db:link xlink:href="qtablewidgetitem.xml#setForeground">setForeground</db:link>() functions, and read with <db:link xlink:href="qtablewidgetitem.xml#font">font</db:link>() and <db:link xlink:href="qtablewidgetitem.xml#foreground">foreground</db:link>().</db:para>
<db:para>By default, items are enabled, editable, selectable, checkable, and can be used both as the source of a drag and drop operation and as a drop target. Each item's flags can be changed by calling <db:link xlink:href="qtablewidgetitem.xml#setFlags">setFlags</db:link>() with the appropriate value (see <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemFlags</db:link>). Checkable items can be checked and unchecked with the <db:link xlink:href="qtablewidgetitem.xml#setCheckState">setCheckState</db:link>() function. The corresponding <db:link xlink:href="qtablewidgetitem.xml#checkState">checkState</db:link>() function indicates whether the item is currently checked.</db:para>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>When subclassing <db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link> to provide custom items, it is possible to define new types for them so that they can be distinguished from standard items. The constructors for subclasses that require this feature need to call the base class constructor with a new type value equal to or greater than <db:link xlink:href="qtablewidgetitem.xml#ItemType-enum">UserType</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml">QTableWidget</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link></db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ItemType-enum">
<db:title>enum QTableWidgetItem::ItemType</db:title>
<db:para>This enum describes the types that are used to describe table widget items.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link></db:emphasis>::Type</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The default type for table widget items.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link></db:emphasis>::UserType</db:code></db:para>
</db:td>
<db:td><db:code>1000</db:code></db:td>
<db:td>
<db:para>The minimum value for custom types. Values below UserType are reserved by Qt.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>You can define new user types in <db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link> subclasses to ensure that custom items are treated specially.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTableWidgetItem-1">
<db:title>[explicit] QTableWidgetItem::QTableWidgetItem(int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:para>Constructs a table item of the specified <db:code role="parameter">type</db:code> that does not belong to any table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTableWidgetItem-2">
<db:title>[explicit] QTableWidgetItem::QTableWidgetItem(const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:para>Constructs a table item with the given <db:code role="parameter">text</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTableWidgetItem-3">
<db:title>[explicit] QTableWidgetItem::QTableWidgetItem(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:para>Constructs a table item with the given <db:code role="parameter">icon</db:code> and <db:code role="parameter">text</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTableWidgetItem">
<db:title>QTableWidgetItem::QTableWidgetItem(const QTableWidgetItem &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>. Note that <db:link xlink:href="qtablewidgetitem.xml#type">type</db:link>() and <db:link xlink:href="qtablewidgetitem.xml#tableWidget">tableWidget</db:link>() are not copied.</db:para>
<db:para>This function is useful when reimplementing <db:link xlink:href="qtablewidgetitem.xml#clone">clone</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QTableWidgetItem">
<db:title>[virtual noexcept] QTableWidgetItem::~QTableWidgetItem()</db:title>
<db:para>Destroys the table item.</db:para>
</db:section>
<db:section xml:id="background">
<db:title>QBrush QTableWidgetItem::background() const</db:title>
<db:para>Returns the brush used to render the item's background.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setBackground">setBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#foreground">foreground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkState">
<db:title>Qt::CheckState QTableWidgetItem::checkState() const</db:title>
<db:para>Returns the checked state of the table item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setCheckState">setCheckState</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clone">
<db:title>[virtual] QTableWidgetItem *QTableWidgetItem::clone() const</db:title>
<db:para>Creates a copy of the item.</db:para>
</db:section>
<db:section xml:id="column">
<db:title>int QTableWidgetItem::column() const</db:title>
<db:para>Returns the column of the item in the table. If the item is not in a table, this function will return -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#row">row</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>[virtual] QVariant QTableWidgetItem::data(int <db:emphasis>role</db:emphasis>) const</db:title>
<db:para>Returns the item's data for the given <db:code role="parameter">role</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>Qt::ItemFlags QTableWidgetItem::flags() const</db:title>
<db:para>Returns the flags used to describe the item. These determine whether the item can be checked, edited, and selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font">
<db:title>QFont QTableWidgetItem::font() const</db:title>
<db:para>Returns the font used to render the item's text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="foreground">
<db:title>QBrush QTableWidgetItem::foreground() const</db:title>
<db:para>Returns the brush used to render the item's foreground (e.g. text).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setForeground">setForeground</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#background">background</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="icon">
<db:title>QIcon QTableWidgetItem::icon() const</db:title>
<db:para>Returns the item's icon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setIcon">setIcon</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#iconSize-prop">iconSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSelected">
<db:title>bool QTableWidgetItem::isSelected() const</db:title>
<db:para>Returns true if the item is selected, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setSelected">setSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="read">
<db:title>[virtual] void QTableWidgetItem::read(QDataStream &amp;<db:emphasis>in</db:emphasis>)</db:title>
<db:para>Reads the item from stream <db:code role="parameter">in</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="row">
<db:title>int QTableWidgetItem::row() const</db:title>
<db:para>Returns the row of the item in the table. If the item is not in a table, this function will return -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#column">column</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBackground">
<db:title>void QTableWidgetItem::setBackground(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:para>Sets the item's background brush to the specified <db:code role="parameter">brush</db:code>. Setting a default-constructed brush will let the view use the default color from the style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#background">background</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#setForeground">setForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCheckState">
<db:title>void QTableWidgetItem::setCheckState(Qt::CheckState <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Sets the check state of the table item to be <db:code role="parameter">state</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#checkState">checkState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>[virtual] void QTableWidgetItem::setData(int <db:emphasis>role</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the item's data for the given <db:code role="parameter">role</db:code> to the specified <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>The default implementation treats <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link> and <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> as referring to the same data.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlags">
<db:title>void QTableWidgetItem::setFlags(Qt::ItemFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Sets the flags for the item to the given <db:code role="parameter">flags</db:code>. These determine whether the item can be selected or modified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFont">
<db:title>void QTableWidgetItem::setFont(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>Sets the font used to display the item's text to the given <db:code role="parameter">font</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#font">font</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#setText">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#setForeground">setForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setForeground">
<db:title>void QTableWidgetItem::setForeground(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:para>Sets the item's foreground brush to the specified <db:code role="parameter">brush</db:code>. Setting a default-constructed brush will let the view use the default color from the style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#foreground">foreground</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#setBackground">setBackground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIcon">
<db:title>void QTableWidgetItem::setIcon(const QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:para>Sets the item's icon to the <db:code role="parameter">icon</db:code> specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#icon">icon</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#setText">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#iconSize-prop">iconSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelected">
<db:title>void QTableWidgetItem::setSelected(bool <db:emphasis>select</db:emphasis>)</db:title>
<db:para>Sets the selected state of the item to <db:code role="parameter">select</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#isSelected">isSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSizeHint">
<db:title>void QTableWidgetItem::setSizeHint(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the size hint for the table item to be <db:code role="parameter">size</db:code>. If no size hint is set or <db:code role="parameter">size</db:code> is invalid, the item delegate will compute the size hint based on the item data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStatusTip">
<db:title>void QTableWidgetItem::setStatusTip(const QString &amp;<db:emphasis>statusTip</db:emphasis>)</db:title>
<db:para>Sets the status tip for the table item to the text specified by <db:code role="parameter">statusTip</db:code>. <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link> mouse tracking needs to be enabled for this feature to work.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#statusTip">statusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#setToolTip">setToolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#setWhatsThis">setWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setText">
<db:title>void QTableWidgetItem::setText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the item's text to the <db:code role="parameter">text</db:code> specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#text">text</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#setFont">setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#setForeground">setForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextAlignment">
<db:title>[since 6.4] void QTableWidgetItem::setTextAlignment(Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:para>Sets the text alignment for the item's text to the <db:code role="parameter">alignment</db:code> specified.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#textAlignment">textAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setToolTip">
<db:title>void QTableWidgetItem::setToolTip(const QString &amp;<db:emphasis>toolTip</db:emphasis>)</db:title>
<db:para>Sets the item's tooltip to the string specified by <db:code role="parameter">toolTip</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#toolTip">toolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#setStatusTip">setStatusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#setWhatsThis">setWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWhatsThis">
<db:title>void QTableWidgetItem::setWhatsThis(const QString &amp;<db:emphasis>whatsThis</db:emphasis>)</db:title>
<db:para>Sets the item's &quot;What's This?&quot; help to the string specified by <db:code role="parameter">whatsThis</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#whatsThis">whatsThis</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#setStatusTip">setStatusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#setToolTip">setToolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>QSize QTableWidgetItem::sizeHint() const</db:title>
<db:para>Returns the size hint set for the table item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setSizeHint">setSizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="statusTip">
<db:title>QString QTableWidgetItem::statusTip() const</db:title>
<db:para>Returns the item's status tip.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setStatusTip">setStatusTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tableWidget">
<db:title>QTableWidget *QTableWidgetItem::tableWidget() const</db:title>
<db:para>Returns the table widget that contains the item.</db:para>
</db:section>
<db:section xml:id="text">
<db:title>QString QTableWidgetItem::text() const</db:title>
<db:para>Returns the item's text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setText">setText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textAlignment">
<db:title>int QTableWidgetItem::textAlignment() const</db:title>
<db:para>Returns the text alignment for the item's text.</db:para>
<db:note>
<db:para>This function returns an int for historical reasons. It will be corrected to return <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link> in Qt 7.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setTextAlignment">setTextAlignment</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toolTip">
<db:title>QString QTableWidgetItem::toolTip() const</db:title>
<db:para>Returns the item's tooltip.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setToolTip">setToolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>int QTableWidgetItem::type() const</db:title>
<db:para>Returns the type passed to the <db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="whatsThis">
<db:title>QString QTableWidgetItem::whatsThis() const</db:title>
<db:para>Returns the item's &quot;What's This?&quot; help.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#setWhatsThis">setWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="write">
<db:title>[virtual] void QTableWidgetItem::write(QDataStream &amp;<db:emphasis>out</db:emphasis>) const</db:title>
<db:para>Writes the item to stream <db:code role="parameter">out</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#read">read</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[virtual] bool QTableWidgetItem::operator&lt;(const QTableWidgetItem &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if the item is less than the <db:code role="parameter">other</db:code> item; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QTableWidgetItem &amp;QTableWidgetItem::operator=(const QTableWidgetItem &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code>'s data and flags to this item. Note that <db:link xlink:href="qtablewidgetitem.xml#type">type</db:link>() and <db:link xlink:href="qtablewidgetitem.xml#tableWidget">tableWidget</db:link>() are not copied.</db:para>
<db:para>This function is useful when reimplementing <db:link xlink:href="qtablewidgetitem.xml#clone">clone</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidgetitem.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-2">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QTableWidgetItem &amp;<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Writes the table widget item <db:code role="parameter">item</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:para>This operator uses <db:link xlink:href="qtablewidgetitem.xml#write">QTableWidgetItem::write</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-2">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QTableWidgetItem &amp;<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Reads a table widget item from stream <db:code role="parameter">in</db:code> into <db:code role="parameter">item</db:code>.</db:para>
<db:para>This operator uses <db:link xlink:href="qtablewidgetitem.xml#read">QTableWidgetItem::read</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QTableWidgetItem</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="setTextAlignment-1">
<db:title>[deprecated] void QTableWidgetItem::setTextAlignment(int <db:emphasis>alignment</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use the overload that takes a <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link> argument.</db:para>
<db:para>Sets the text alignment for the item's text to the <db:code role="parameter">alignment</db:code> specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
