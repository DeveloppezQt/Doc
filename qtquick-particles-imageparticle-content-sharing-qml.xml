<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Particles Examples - Image Particles</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a collection of examples using Affectors in the QML particle system.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

// This example shows how to create your own highlight delegate for a ListView
// that uses a SpringAnimation to provide custom movement when the
// highlight bar is moved between items.

import QtQuick 2.0
import QtQuick.Particles 2.0

Rectangle {
    property real delegateHeight: 65
    width: 200; height: 300
    gradient: Gradient {
        GradientStop { position: 0.0; color: &quot;#EEEEFF&quot; }
        GradientStop { position: 1.0; color: &quot;lightblue&quot; }
    }

    // Define a delegate component.  A component will be
    // instantiated for each visible item in the list.
    Component {
        id: petDelegate
        Item {
            id: wrapper
            width: 200; height: delegateHeight
            z: 10
            Column {
                Text {color: &quot;white&quot;; text: name; font.pixelSize: 18 }
                Text {color: &quot;white&quot;; text: 'Type: ' + type; font.pixelSize: 14 }
                Text {color: &quot;white&quot;; text: 'Age: ' + age; font.pixelSize: 14 }
            }
            MouseArea { anchors.fill: parent; onClicked: listView.currentIndex = index; }
            // indent the item if it is the current item
            states: State {
                name: &quot;Current&quot;
                when: wrapper.ListView.isCurrentItem
                PropertyChanges { target: wrapper; x: 20 }
            }
            transitions: Transition {
                NumberAnimation { properties: &quot;x&quot;; duration: 200 }
            }
        }
    }

    // Define a highlight with customized movement between items.
    Component {
        id: highlightBar
        Rectangle {
            z: 0
            width: 200; height: delegateHeight
            gradient: Gradient {
                GradientStop { position: 0.0; color: &quot;#99FF99&quot; }
                GradientStop { position: 1.0; color: &quot;#88FF88&quot; }
            }
            y: listView.currentItem.y;
            Behavior on y { SpringAnimation { spring: 2; damping: 0.2 } }
            ImageParticle {
                anchors.fill: parent
                system: particles
                source: &quot;../../images/flower.png&quot;
                color: &quot;red&quot;
                clip: true
                alpha: 1.0
            }
        }
    }

    ListView {
        id: listView
        width: 200; height: parent.height

        model: petsModel
        delegate: petDelegate
        focus: true

        // Set the highlight delegate. Note we must also set highlightFollowsCurrentItem
        // to false so the highlight delegate can control how the highlight is moved.
        highlight: highlightBar
        highlightFollowsCurrentItem: false

        ParticleSystem { id: particles }
        Emitter {
            system: particles
            anchors.fill: parent
            emitRate: 0
            lifeSpan: 10000
            size: 24
            sizeVariation: 8
            velocity: AngleDirection { angleVariation: 360; magnitude: 3 }
            maximumEmitted: 10
            startTime: 5000
            Timer { running: true; interval: 10; onTriggered: parent.emitRate = 1; }
        }

        ImageParticle {
            anchors.fill: parent
            system: particles
            source: &quot;../../images/flower.png&quot;
            alpha: 0.1
            color: &quot;white&quot;
            rotationVariation: 180
            z: -1
        }
    }

    ListModel {
        id: petsModel
        ListElement {
            name: &quot;Polly&quot;
            type: &quot;Parrot&quot;
            age: 12
            size: &quot;Small&quot;
        }
        ListElement {
            name: &quot;Penny&quot;
            type: &quot;Turtle&quot;
            age: 4
            size: &quot;Small&quot;
        }
        ListElement {
            name: &quot;Warren&quot;
            type: &quot;Rabbit&quot;
            age: 2
            size: &quot;Small&quot;
        }
        ListElement {
            name: &quot;Spot&quot;
            type: &quot;Dog&quot;
            age: 9
            size: &quot;Medium&quot;
        }
        ListElement {
            name: &quot;Schr√∂dinger&quot;
            type: &quot;Cat&quot;
            age: 2
            size: &quot;Medium&quot;
        }
        ListElement {
            name: &quot;Joey&quot;
            type: &quot;Kangaroo&quot;
            age: 1
            size: &quot;Medium&quot;
        }
        ListElement {
            name: &quot;Kimba&quot;
            type: &quot;Bunny&quot;
            age: 65
            size: &quot;Large&quot;
        }
        ListElement {
            name: &quot;Rover&quot;
            type: &quot;Dog&quot;
            age: 5
            size: &quot;Large&quot;
        }
        ListElement {
            name: &quot;Tiny&quot;
            type: &quot;Elephant&quot;
            age: 15
            size: &quot;Large&quot;
        }
    }

}

</db:programlisting>
</db:article>
