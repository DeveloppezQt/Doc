<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Surface Graph Gallery</db:title>
<db:productname>QtDataVis3D</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Gallery with three different ways to use a <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> graph.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Surface Graph Gallery</db:emphasis> demonstrates three different custom features with <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> graphs. The features have their own tabs in the application.</db:para>
<db:para>The following sections concentrate on those features only and skip explaining the basic functionality - for more detailed QML example documentation, see <db:link xlink:href="qtdatavis3d-qmlscatter-example.xml">Simple Scatter Graph</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlsurfacegallery-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Qt Creator: Tutorial: Build and run</db:link>.</db:para>
</db:section>
<db:section xml:id="height-map">
<db:title>Height Map</db:title>
<db:para>In the <db:guilabel>Height Map</db:guilabel> tab, generate a surface graph from height data. The data used is a height map of Mount Ruapehu and Mount Ngauruhoe in New Zealand.</db:para>
<db:section xml:id="adding-data-to-the-graph">
<db:title>Adding Data to the Graph</db:title>
<db:para>The data is set using <db:link xlink:href="qml-qtdatavisualization-heightmapsurfacedataproxy.xml">HeightMapSurfaceDataProxy</db:link>, which reads height information from a height map image. The proxy itself is contained in a <db:link xlink:href="qml-qtdatavisualization-surface3dseries.xml">Surface3DSeries</db:link>. Inside the <db:link xlink:href="qml-qtdatavisualization-heightmapsurfacedataproxy.xml">HeightMapSurfaceDataProxy</db:link> the <db:code>heightMapFile</db:code> property specifies the image file containing the height data. The value properties in the proxy define the minimum and maximum values for surface area width, depth, and height. The <db:code>z</db:code> and <db:code>x</db:code> values are in latitude and longitude, approximately at the real-world position, and the <db:code>y</db:code> is in meters.</db:para>
<db:note>
<db:para>The aspect ratio of the graph is not set to real-life scale, but the height is exaggerated instead.</db:para>
</db:note>
<db:programlisting language="qml">Surface3DSeries {
    id: heightSeries
    flatShadingEnabled: false
    drawMode: Surface3DSeries.DrawSurface

    HeightMapSurfaceDataProxy {
        heightMapFile: &quot;://qml/qmlsurfacegallery/heightmap.png&quot;
        // We don't want the default data values set by heightmap proxy, but use
        // actual coordinate and height values instead
        autoScaleY: true
        minYValue: 740
        maxYValue: 2787
        minZValue: -374 // ~ -39.374411&quot;N
        maxZValue: -116 // ~ -39.115971&quot;N
        minXValue: 472  // ~ 175.471767&quot;E
        maxXValue: 781  // ~ 175.780758&quot;E
    }

    onDrawModeChanged: heightMapView.checkState()
}
</db:programlisting>
</db:section>
<db:section xml:id="displaying-the-data">
<db:title>Displaying the Data</db:title>
<db:para>In <db:code>main.qml</db:code>, set up the <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> element to display the data.</db:para>
<db:para>First, define the custom gradient to be used for the surface. Set the colors from position 0.0 to 1.0 with <db:link xlink:href="qml-qtdatavisualization-colorgradient.xml">ColorGradient</db:link>, with two extra stops to make the graph more vivid:</db:para>
<db:programlisting language="qml">ColorGradient {
    id: surfaceGradient
    ColorGradientStop { position: 0.0; color: &quot;darkgreen&quot;}
    ColorGradientStop { position: 0.15; color: &quot;darkslategray&quot; }
    ColorGradientStop { position: 0.7; color: &quot;peru&quot; }
    ColorGradientStop { position: 1.0; color: &quot;white&quot; }
}
</db:programlisting>
<db:para>Set this element into the <db:code>baseGradients</db:code> property in the <db:code>theme</db:code> used in <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link>:</db:para>
<db:programlisting language="qml">theme: Theme3D {
    type: Theme3D.ThemeStoneMoss
    font.family: &quot;STCaiyun&quot;
    font.pointSize: 35
    colorStyle: Theme3D.ColorStyleRangeGradient
    baseGradients: [surfaceGradient] // Use the custom gradient
}
</db:programlisting>
<db:para>Use the buttons to control other <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> features.</db:para>
<db:para>The first button toggles on and off the surface grid. The draw mode cannot be cleared completely, so unless the surface itself is visible, the surface grid cannot be hidden:</db:para>
<db:programlisting language="qml">onClicked: {
    if (heightSeries.drawMode &amp; Surface3DSeries.DrawWireframe)
        heightSeries.drawMode &amp;= ~Surface3DSeries.DrawWireframe;
    else
        heightSeries.drawMode |= Surface3DSeries.DrawWireframe;
}
</db:programlisting>
<db:para>The second one sets the surface grid color:</db:para>
<db:programlisting language="qml">onClicked: {
    if (Qt.colorEqual(heightSeries.wireframeColor, &quot;#000000&quot;)) {
        heightSeries.wireframeColor = &quot;red&quot;;
        text = &quot;Black surface\ngrid color&quot;;
    } else {
        heightSeries.wireframeColor = &quot;black&quot;;
        text = &quot;Red surface\ngrid color&quot;;
    }
}
</db:programlisting>
<db:para>The third one toggles the surface on or off in the surface draw mode. The draw mode cannot be cleared completely, so unless the surface grid is visible, the surface itself cannot be hidden:</db:para>
<db:programlisting language="qml">onClicked: {
    if (heightSeries.drawMode &amp; Surface3DSeries.DrawSurface)
        heightSeries.drawMode &amp;= ~Surface3DSeries.DrawSurface;
    else
        heightSeries.drawMode |= Surface3DSeries.DrawSurface;
}
</db:programlisting>
<db:para>The fourth sets the for shading mode. If you are running the example on OpenGL ES system, flat shading is not available:</db:para>
<db:programlisting language="qml">onClicked: {
    if (heightSeries.flatShadingEnabled) {
        heightSeries.flatShadingEnabled = false;
        text = &quot;Show\nFlat&quot;
    } else {
        heightSeries.flatShadingEnabled = true;
        text = &quot;Show\nSmooth&quot;
    }
}
</db:programlisting>
<db:para>The remaining buttons control the graph background features.</db:para>
</db:section>
</db:section>
<db:section xml:id="spectrogram">
<db:title>Spectrogram</db:title>
<db:para>In the <db:guilabel>Spectrogram</db:guilabel> tab, display polar and cartesian spectrograms and use orthographic projection to show them in 2D.</db:para>
<db:para>A spectrogram is a surface graph with a range gradient used to emphasize the different values. Typically, spectrograms are shown with two-dimensional surfaces, which is simulated with a top-down orthographic view of the graph. To enforce the 2D effect, disable the graph rotation via mouse or touch when in the orthographic mode.</db:para>
<db:section xml:id="creating-a-spectrogram">
<db:title>Creating a Spectrogram</db:title>
<db:para>To create a 2D spectrogram, define a <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> item with the data given in the <db:link xlink:href="qml-qtdatavisualization-surface3dseries.xml">Surface3DSeries</db:link> with an <db:link xlink:href="qml-qtdatavisualization-itemmodelsurfacedataproxy.xml">ItemModelSurfaceDataProxy</db:link>:</db:para>
<db:programlisting language="qml">Surface3D {
    id: surfaceGraph
    anchors.fill: parent

    Surface3DSeries {
        id: surfaceSeries
        flatShadingEnabled: false
        drawMode: Surface3DSeries.DrawSurface
        baseGradient: surfaceGradient
        colorStyle: Theme3D.ColorStyleRangeGradient
        itemLabelFormat: &quot;(@xLabel, @zLabel): @yLabel&quot;

        ItemModelSurfaceDataProxy {
            itemModel: surfaceData.model
            rowRole: &quot;radius&quot;
            columnRole: &quot;angle&quot;
            yPosRole: &quot;value&quot;
        }
    }
</db:programlisting>
<db:para>The key properties for enabling the 2D effect are <db:link xlink:href="qml-qtdatavisualization-abstractgraph3d.xml#orthoProjection-prop">orthoProjection</db:link> and <db:link xlink:href="qml-qtdatavisualization-camera3d.xml#cameraPreset-prop">scene.activeCamera.cameraPreset</db:link>. Remove the perspective by enabling orthographic projection for the graph, and the Y-dimension by viewing the graph directly from above:</db:para>
<db:programlisting language="qml">// Remove the perspective and view the graph from top down to achieve 2D effect
orthoProjection: true
scene.activeCamera.cameraPreset: Camera3D.CameraPresetDirectlyAbove
</db:programlisting>
<db:para>Since this viewpoint causes the horizontal axis grid to be mostly obscured by the surface, flip the horizontal grid to be drawn on top of the graph:</db:para>
<db:programlisting language="qml">flipHorizontalGrid: true
</db:programlisting>
</db:section>
<db:section xml:id="polar-spectrogram">
<db:title>Polar Spectrogram</db:title>
<db:para>Depending on the data, it is sometimes more natural to use a polar graph instead of a cartesian one. This is supported via the <db:link xlink:href="qml-qtdatavisualization-abstractgraph3d.xml#polar-prop">polar</db:link> property.</db:para>
<db:para>Add a button to switch between polar and cartesian modes:</db:para>
<db:programlisting language="qml">Button {
    id: polarToggle
    anchors.margins: 5
    anchors.left: parent.left
    anchors.top: parent.top
    width: spectrogramView.buttonWidth // Calculated elsewhere based on screen orientation
    text: &quot;Switch to\n&quot; + (surfaceGraph.polar ? &quot;cartesian&quot; : &quot;polar&quot;)
    onClicked: surfaceGraph.polar = !surfaceGraph.polar;
}
</db:programlisting>
<db:para>In the polar mode, X-axis is converted into the angular polar axis, and Z-axis is converted into a radial polar axis. The surface points are recalculated according to the new axes.</db:para>
<db:para>The radial axis labels are drawn outside the graph by default. To draw them right next to the 0 degree angular axis inside the graph, define only a small offset for them:</db:para>
<db:programlisting language="qml">radialLabelOffset: 0.01
</db:programlisting>
<db:para>To enforce the 2D effect, disable graph rotation in orthographic mode by overriding the default input handler with a custom one, which automatically toggles the <db:link xlink:href="qml-qtdatavisualization-inputhandler3d.xml#rotationEnabled-prop">rotationEnabled</db:link> property based on the projection mode:</db:para>
<db:programlisting language="qml">inputHandler: TouchInputHandler3D {
    rotationEnabled: !surfaceGraph.orthoProjection
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="oscilloscope">
<db:title>Oscilloscope</db:title>
<db:para>In the <db:guilabel>Oscilloscope</db:guilabel> tab, combine C++ and QML in an application, and show data that dynamically changes.</db:para>
<db:section xml:id="data-source-in-c">
<db:title>Data Source in C++</db:title>
<db:para>The item model based proxies are good for simple or static graphs, but use basic proxies to achieve the best performance when displaying data changing in realtime. These are not supported in QML, as the data items they store do not inherit <db:link xlink:href="qobject.xml">QObject</db:link> and cannot therefore be directly manipulated from QML code. To overcome this limitation, implement a simple <db:code>DataSource</db:code> class in C++ to populate the data proxy of the series.</db:para>
<db:para>Create a <db:code>DataSource</db:code> class to provide two methods that can be invoked from QML:</db:para>
<db:programlisting language="cpp">class DataSource : public QObject
{
    Q_OBJECT
    ...
Q_INVOKABLE void generateData(int cacheCount, int rowCount, int columnCount,
                              float xMin, float xMax,
                              float yMin, float yMax,
                              float zMin, float zMax);

Q_INVOKABLE void update(QSurface3DSeries *series);
</db:programlisting>
<db:para>The first method, <db:code>generateData()</db:code>, creates a cache of simulated oscilloscope data to display. The data is cached in a format that <db:link xlink:href="qsurfacedataproxy-qtdatavis.xml">QSurfaceDataProxy</db:link> accepts:</db:para>
<db:programlisting language="cpp">// Populate caches
auto *generator = QRandomGenerator::global();
for (int i = 0; i &lt; cacheCount; ++i) {
    QSurfaceDataArray &amp;cache = m_data[i];
    float cacheXAdjustment = cacheStep * i;
    float cacheIndexAdjustment = cacheIndexStep * i;
    for (int j = 0; j &lt; rowCount; ++j) {
        QSurfaceDataRow &amp;row = *(cache[j]);
        float rowMod = (float(j)) / float(rowCount);
        float yRangeMod = yRange * rowMod;
        float zRangeMod = zRange * rowMod;
        float z = zRangeMod + zMin;
        qreal rowColWaveAngleMul = M_PI * M_PI * rowMod;
        float rowColWaveMul = yRangeMod * 0.2f;
        for (int k = 0; k &lt; columnCount; k++) {
            float colMod = (float(k)) / float(columnCount);
            float xRangeMod = xRange * colMod;
            float x = xRangeMod + xMin + cacheXAdjustment;
            float colWave = float(qSin((2.0 * M_PI * colMod) - (1.0 / 2.0 * M_PI)) + 1.0);
            float y = (colWave * ((float(qSin(rowColWaveAngleMul * colMod) + 1.0))))
                    * rowColWaveMul
                    + generator-&gt;bounded(0.15f) * yRangeMod;

            int index = k + cacheIndexAdjustment;
            if (index &gt;= columnCount) {
                // Wrap over
                index -= columnCount;
                x -= xRange;
            }
            row[index] = QVector3D(x, y, z);
        }
    }
}
</db:programlisting>
<db:para>The second method, <db:code>update()</db:code>, copies one set of the cached data into another array, which is set to the data proxy of the series by calling <db:link xlink:href="qsurfacedataproxy-qtdatavis.xml#resetArray">QSurfaceDataProxy::resetArray</db:link>(). To minimize overhead, reuse the same array if the array dimensions have not changed:</db:para>
<db:programlisting language="cpp">// Each iteration uses data from a different cached array
if (++m_index &gt;= m_data.size())
    m_index = 0;

const QSurfaceDataArray &amp;array = m_data.at(m_index);
int newRowCount = array.size();
int newColumnCount = array.at(0)-&gt;size();

// If the first time or the dimensions of the cache array have changed,
// reconstruct the reset array
if (!m_resetArray || series-&gt;dataProxy()-&gt;rowCount() != newRowCount
        || series-&gt;dataProxy()-&gt;columnCount() != newColumnCount) {
    m_resetArray = new QSurfaceDataArray();
    m_resetArray-&gt;reserve(newRowCount);
    for (int i = 0; i &lt; newRowCount; ++i)
        m_resetArray-&gt;append(new QSurfaceDataRow(newColumnCount));
}

// Copy items from our cache to the reset array
for (int i = 0; i &lt; newRowCount; ++i) {
    const QSurfaceDataRow &amp;sourceRow = *(array.at(i));
    QSurfaceDataRow &amp;row = *(*m_resetArray)[i];
    std::copy(sourceRow.cbegin(), sourceRow.cend(), row.begin());
}

// Notify the proxy that data has changed
series-&gt;dataProxy()-&gt;resetArray(m_resetArray);
</db:programlisting>
<db:para>Even though we are operating on the array pointer previously set to the proxy, <db:link xlink:href="qsurfacedataproxy-qtdatavis.xml#resetArray">QSurfaceDataProxy::resetArray</db:link>() still needs to be called after changing the data in it to prompt the graph to render the data.</db:para>
<db:para>To be able to access the <db:code>DataSource</db:code> methods from QML, expose the data source by making the DataSource a QML_ELEMENT:</db:para>
<db:programlisting language="cpp">class DataSource : public QObject
{
    Q_OBJECT
    QML_ELEMENT
</db:programlisting>
<db:para>Further, declare it as a QML module in the CMakeLists.txt:</db:para>
<db:programlisting language="cpp" role="bad">qt6_add_qml_module(qmlsurfacegallery
    URI SurfaceGallery
    VERSION 1.0
    NO_RESOURCE_TARGET_PATH
    SOURCES
        datasource.cpp datasource.h
    ...
)
</db:programlisting>
<db:para>To use <db:link xlink:href="qsurface3dseries-qtdatavis.xml">QSurface3DSeries</db:link> pointers as parameters for the <db:code>DataSource</db:code> class methods on all environments and builds, make sure the meta type is registered:</db:para>
<db:programlisting language="cpp">qRegisterMetaType&lt;QSurface3DSeries *&gt;();
</db:programlisting>
</db:section>
<db:section xml:id="qml-application">
<db:title>QML Application</db:title>
<db:para>To use the <db:code>DataSource</db:code>, import the QML module and create an instance of <db:code>DataSource</db:code> to be used:</db:para>
<db:programlisting language="qml">import SurfaceGallery
...
DataSource {
    id: dataSource
}
</db:programlisting>
<db:para>Define a <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> graph and give it a <db:link xlink:href="qml-qtdatavisualization-surface3dseries.xml">Surface3DSeries</db:link>:</db:para>
<db:programlisting language="qml">Surface3D {
    id: surfaceGraph
    anchors.fill: parent

    Surface3DSeries {
        id: surfaceSeries
        drawMode: Surface3DSeries.DrawSurfaceAndWireframe
        itemLabelFormat: &quot;@xLabel, @zLabel: @yLabel&quot;
</db:programlisting>
<db:para>Don't specify a proxy for the <db:link xlink:href="qml-qtdatavisualization-surface3dseries.xml">Surface3DSeries</db:link> that you attach to the graph. This makes the series utilize the default <db:link xlink:href="qsurfacedataproxy-qtdatavis.xml">QSurfaceDataProxy</db:link>.</db:para>
<db:para>Hide the item label with <db:link xlink:href="qml-qtdatavisualization-abstract3dseries.xml#itemLabelVisible-prop">itemLabelVisible</db:link>. With dynamic, fast-changing data, a floating selection label would be distracting and difficult to read.</db:para>
<db:programlisting language="qml">itemLabelVisible: false
</db:programlisting>
<db:para>You can display the selected item information in a <db:code>Text</db:code> element instead of the default floating label above the selection pointer:</db:para>
<db:programlisting language="qml">onItemLabelChanged: {
    if (surfaceSeries.selectedPoint == surfaceSeries.invalidSelectionPosition)
        selectionText.text = &quot;No selection&quot;;
    else
        selectionText.text = surfaceSeries.itemLabel;
}
</db:programlisting>
<db:para>Initialize the <db:code>DataSource</db:code> cache when the graph is complete by calling a helper function <db:code>generateData()</db:code>, which calls the method with the same name in <db:code>DataSource</db:code>:</db:para>
<db:programlisting language="qml">Component.onCompleted: oscilloscopeView.generateData();
...
function generateData() {
    dataSource.generateData(oscilloscopeView.sampleCache, oscilloscopeView.sampleRows,
                            oscilloscopeView.sampleColumns,
                            surfaceGraph.axisX.min, surfaceGraph.axisX.max,
                            surfaceGraph.axisY.min, surfaceGraph.axisY.max,
                            surfaceGraph.axisZ.min, surfaceGraph.axisZ.max);
}
</db:programlisting>
<db:para>To trigger the updates in data, define a <db:code>Timer</db:code>, which calls the <db:code>update()</db:code> method in <db:code>DataSource</db:code> at requested intervals:</db:para>
<db:programlisting language="qml">Timer {
    id: refreshTimer
    interval: 1000 / frequencySlider.value
    running: true
    repeat: true
    onTriggered: dataSource.update(surfaceSeries);
}
</db:programlisting>
</db:section>
<db:section xml:id="enabling-direct-rendering">
<db:title>Enabling Direct Rendering</db:title>
<db:para>Since this application potentially deals with a lot of rapidly changing data, it uses direct rendering mode for performance. To enable antialiasing in this mode, change the surface format of the application window. The default format used by QQuickView doesn't support antialiasing. Use the utility function provided to change the surface format in <db:code>main.cpp</db:code>:</db:para>
<db:programlisting language="cpp">#include &lt;QtDataVisualization/qutils.h&gt;
...
// Enable antialiasing in direct rendering mode
viewer.setFormat(qDefaultSurfaceFormat(true));
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="example-contents">
<db:title>Example Contents</db:title>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdatavis3d.git/tree/examples/datavisualization/qmlsurfacegallery?h=6.8">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:section>
</db:article>
