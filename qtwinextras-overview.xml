<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Windows Extras Overview</db:title>
<db:productname>QtWinExtras</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Windows Extras Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Windows Extras provides classes and functions for using some Windows APIs in a Qt way.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Windows Extras provide classes and functions that enable you to use miscellaneous Windows-specific functions. For example, you can convert Qt objects to Windows object handles and manipulate DWM glass frames.</db:para>
<db:para>In addition, you can use features introduced with Windows 7, such as Aero Peek, Jump Lists, a progress indicator on a taskbar button, or a thumbnail toolbar.</db:para>
<db:section xml:id="type-conversion">
<db:title>Type Conversion</db:title>
<db:para>The <db:link xlink:href="qtwin.xml">QtWin</db:link> namespace provides functions to convert Qt objects of classes such as <db:link xlink:href="qpixmap.xml">QPixmap</db:link> or <db:link xlink:href="qimage.xml">QImage</db:link> to Windows HBITMAP or HICON handles, and vice versa.</db:para>
</db:section>
<db:section xml:id="dwm-and-glass-frame">
<db:title>DWM and Glass Frame</db:title>
<db:para>You can determine whether a window is included in the DWM Flip3D rendering.</db:para>
<db:para>The glass frame that was first introduced with Windows Vista can be easily manipulated using the <db:link xlink:href="qtwin.xml#extendFrameIntoClientArea">QtWin::extendFrameIntoClientArea</db:link>() and <db:link xlink:href="qtwin.xml#enableBlurBehindWindow">QtWin::enableBlurBehindWindow</db:link>() functions. Windows 8 lost the glass effect, but applications can still integrate their windows into the system frame to visually separate window controls from the rest of the window or to focus the user's attention on window content.</db:para>
<db:mediaobject>
<db:alt>&quot;Glass frame extended into client area of a window&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/glass.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="aero-peek">
<db:title>Aero Peek</db:title>
<db:para>The Windows 7 <db:emphasis role="bold">Aero Peek</db:emphasis> feature gives the users the powers of X-ray vision that enable them to peek past all open windows straight at the desktop and the gadgets placed there. They can view the contents of a window without actually switching to it. You can enable Aero Peek for a gadget-like window or for a window that constantly displays monitoring data.</db:para>
<db:para>You can use the <db:link xlink:href="qtwin.xml#setWindowExcludedFromPeek">QtWin::setWindowExcludedFromPeek</db:link>() function to exclude an application window from Aero Peek.</db:para>
<db:note>
<db:para>Aero Peek is disabled in Windows 8 by default but can be enabled by the user.</db:para>
</db:note>
<db:mediaobject>
<db:alt>&quot;A window excluded from Aero Peek&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/peek-on.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="taskbar">
<db:title>Taskbar</db:title>
<db:para>The taskbar provides users with access to applications that are open on the desktop. Windows automatically creates buttons on the taskbar for accessing application windows. Windows 7 adds new features to the taskbar buttons that are discussed in the following sections.</db:para>
<db:section xml:id="overlay-icons-and-progress-indicators">
<db:title>Overlay Icons and Progress Indicators</db:title>
<db:para>You can use the <db:link xlink:href="qwintaskbarbutton.xml">QWinTaskbarButton</db:link> class to set an overlay icon and the <db:link xlink:href="qwintaskbarprogress.xml">QWinTaskbarProgress</db:link> class to display a progress indicator on a taskbar button. An overlay icon indicates change in the state of the application. A progress indicator shows how time-consuming tasks are progressing.</db:para>
<db:mediaobject>
<db:alt>Taskbar Button</db:alt>
<db:imageobject>
<db:imagedata fileref="images/taskbar-button.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="taskbar-example">
<db:title>Taskbar Example</db:title>
<db:para>The following example code illustrates how to use the <db:link xlink:href="qwintaskbarbutton.xml">QWinTaskbarButton</db:link> and <db:link xlink:href="qwintaskbarprogress.xml">QWinTaskbarProgress</db:link> classes to adjust the look of the taskbar button:</db:para>
<db:programlisting language="cpp">    QWinTaskbarButton *button = new QWinTaskbarButton(widget);
    button-&amp;gt;setWindow(widget-&amp;gt;windowHandle());
    button-&amp;gt;setOverlayIcon(QIcon(&quot;:/loading.png&quot;));

    QWinTaskbarProgress *progress = button-&amp;gt;progress();
    progress-&amp;gt;setVisible(true);
    progress-&amp;gt;setValue(50);
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="jump-lists">
<db:title>Jump Lists</db:title>
<db:para>An application can use Jump Lists to provide users with faster access to files or to display shortcuts to tasks or commands.</db:para>
<db:mediaobject>
<db:alt>Jump List</db:alt>
<db:imageobject>
<db:imagedata fileref="images/jumplist.png"/>
</db:imageobject>
</db:mediaobject>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Destinations</db:emphasis> — categorized shortcuts to files and URLs that the application can handle and even links to other applications. Windows provides two standard categories that can be added to the custom Jump List, in addition to the ones that the application can create itself.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Recent</db:emphasis> and <db:emphasis role="bold">Frequent</db:emphasis> — so called <db:emphasis>known</db:emphasis> categories that are populated automatically by Windows when the application uses the <db:link xlink:href="qfiledialog.xml#getOpenFileName">QFileDialog::getOpenFileName</db:link>() function or when the application is launched to open a file from the Windows shell.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Tasks</db:emphasis> — shortcuts to application functionality. An application can display its most frequently used context-independent functions on task lists.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>To be able to add destinations to its Jump Lists, the application should associate itself with the file types it can handle.</db:para>
</db:note>
<db:section xml:id="jump-list-example">
<db:title>Jump List Example</db:title>
<db:para>The following example code illustrates how to use the classes in the <db:link xlink:href="qwinjumplist.xml">QWinJumpList</db:link> and <db:link xlink:href="qwinjumplistitem.xml">QWinJumpListItem</db:link> classes to implement Jump Lists:</db:para>
<db:programlisting language="cpp">    QWinJumpList jumplist;

    QWinJumpListCategory *tasks = jumplist.tasks();
    QWinJumpListItem *newProject = new QWinJumpListItem(QWinJumpListItem::Link);
    newProject-&amp;gt;setTitle(tr(&quot;Create new project&quot;));
    newProject-&amp;gt;setFilePath(QDir::toNativeSeparators(QCoreApplication::applicationFilePath()));
    newProject-&amp;gt;setArguments(QStringList(&quot;--new-project&quot;));
    tasks-&amp;gt;addItem(newProject);

    tasks-&amp;gt;addLink(tr(&quot;Launch SDK Manager&quot;), QDir::toNativeSeparators(QCoreApplication::applicationDirPath()) + &quot;\\sdk-manager.exe&quot;);

    tasks-&amp;gt;setVisible(true);
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="thumbnail-toolbar">
<db:title>Thumbnail Toolbar</db:title>
<db:para>Applications can embed a toolbar in the thumbnail of a window, which is shown when hovering over its taskbar icon. A thumbnail toolbar may provide quick access to the window's commands without requiring the user to restore or activate the window.</db:para>
<db:mediaobject>
<db:alt>Media player thumbnail toolbar</db:alt>
<db:imageobject>
<db:imagedata fileref="images/thumbbar.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="thumbnail-toolbar-example">
<db:title>Thumbnail Toolbar Example</db:title>
<db:para>The following example code illustrates how to use the functions in the <db:link xlink:href="qwinthumbnailtoolbar.xml">QWinThumbnailToolBar</db:link> and <db:link xlink:href="qwinthumbnailtoolbutton.xml">QWinThumbnailToolButton</db:link> class to implement a thumbnail toolbar:</db:para>
<db:programlisting language="cpp">    QWinThumbnailToolBar *thumbbar = new QWinThumbnailToolBar(widget);
    thumbbar-&amp;gt;setWindow(widget-&amp;gt;windowHandle());

    QWinThumbnailToolButton *settings = new QWinThumbnailToolButton(thumbbar);
    settings-&amp;gt;setToolTip(&quot;Settings&quot;);
    settings-&amp;gt;setIcon(&quot;:/settings.png&quot;);
    settings-&amp;gt;setDismissOnClick(true);
    connect(settings, SIGNAL(clicked()), settingsPage, SLOT(show()));

    QWinThumbnailToolButton *playPause = new QWinThumbnailToolButton(thumbbar);
    playPause-&amp;gt;setToolTip(&quot;Play/Pause&quot;);
    playPause-&amp;gt;setIcon(&quot;:/play.png&quot;);
    connect(playPause, SIGNAL(clicked()), mediaPlayer, SLOT(play()));

    thumbbar-&amp;gt;addButton(settings);
    thumbbar-&amp;gt;addButton(playPause);
</db:programlisting>
</db:section>
</db:section>
</db:section>
</db:article>
