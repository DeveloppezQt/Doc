<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Event Transitions Example</db:title>
<db:productname>QtStateMachine</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt State Machine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Event Transitions example shows how to use event transitions, a feature of <db:link xlink:href="qtstatemachine-overview.xml">Qt State Machine Framework</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Event Transitions Example illustrates how states change when a user enters or leaves the area of a button. The states are handled by a <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link> object. The screen consists of a <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> with a central button.</db:para>
<db:para>When the mouse is outside the button, the text in the button displays &quot;Outside&quot;. When the mouse enters the button, it displays &quot;Inside&quot;.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/transitions.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="cpp">class Window : public QWidget
{
public:
    Window(QWidget *parent = nullptr)
        : QWidget(parent)
    {
        QPushButton *button = new QPushButton(this);
        button-&amp;gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);

        QVBoxLayout *layout = new QVBoxLayout;
        layout-&amp;gt;addWidget(button);
        layout-&amp;gt;setContentsMargins(80, 80, 80, 80);
        setLayout(layout);
</db:programlisting>
<db:para>The <db:code>Window</db:code> class's constructors begins by creating a button. This button is added to <db:code>layout</db:code>, which is a <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> object. Then two states are created: <db:code>s1</db:code> is the state &quot;Outside&quot;, and <db:code>s2</db:code> is the state &quot;Inside&quot;.</db:para>
<db:programlisting language="cpp">        QStateMachine *machine = new QStateMachine(this);

        QState *s1 = new QState();
        s1-&amp;gt;assignProperty(button, &quot;text&quot;, &quot;Outside&quot;);

        QState *s2 = new QState();
        s2-&amp;gt;assignProperty(button, &quot;text&quot;, &quot;Inside&quot;);
</db:programlisting>
<db:para>State <db:code>s1</db:code> is the state &quot;Outside&quot; and state <db:code>s2</db:code> is state &quot;Inside&quot;.</db:para>
<db:programlisting language="cpp">        QEventTransition *enterTransition = new QEventTransition(button, QEvent::Enter);
        enterTransition-&amp;gt;setTargetState(s2);
        s1-&amp;gt;addTransition(enterTransition);
</db:programlisting>
<db:para>When the button receives an event of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::Enter</db:link> and the state machine is in state <db:code>s1</db:code>, the machine will transition to state <db:code>s2</db:code>.</db:para>
<db:programlisting language="cpp">        QEventTransition *leaveTransition = new QEventTransition(button, QEvent::Leave);
        leaveTransition-&amp;gt;setTargetState(s1);
        s2-&amp;gt;addTransition(leaveTransition);
</db:programlisting>
<db:para>When the button receives an event of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::Leave</db:link> and the state machine is in state <db:code>s2</db:code>, the machine will transition back to state <db:code>s1</db:code>.</db:para>
<db:programlisting language="cpp">        QState *s3 = new QState();
        s3-&amp;gt;assignProperty(button, &quot;text&quot;, &quot;Pressing...&quot;);

        QEventTransition *pressTransition = new QEventTransition(button, QEvent::MouseButtonPress);
        pressTransition-&amp;gt;setTargetState(s3);
        s2-&amp;gt;addTransition(pressTransition);

        QEventTransition *releaseTransition = new QEventTransition(button, QEvent::MouseButtonRelease);
        releaseTransition-&amp;gt;setTargetState(s2);
        s3-&amp;gt;addTransition(releaseTransition);
</db:programlisting>
<db:para>Next, state <db:code>s3</db:code> is created. <db:code>s3</db:code> will be entered when the button receives an event of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonPress</db:link> and the state machine is in state <db:code>s2</db:code>. When the button receives an event of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonRelease</db:link> and the state machine is in state <db:code>s3</db:code>, the machine will revert to state <db:code>s2</db:code>.</db:para>
<db:programlisting language="cpp">        machine-&amp;gt;addState(s1);
        machine-&amp;gt;addState(s2);
        machine-&amp;gt;addState(s3);

        machine-&amp;gt;setInitialState(s1);
        machine-&amp;gt;start();
    }
};
</db:programlisting>
<db:para>Finally, the states are added to the machine as top-level states, the initial state is set to be <db:code>s1</db:code> (&quot;Outside&quot;), and the machine is started.</db:para>
<db:programlisting language="cpp">int main(int argc, char **argv)
{
    QApplication app(argc, argv);
    Window window;
    window.resize(300, 300);
    window.show();

    return app.exec();
}
</db:programlisting>
<db:para>The main() function constructs a Window object that displays the <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> object <db:code>layout</db:code> with its <db:code>button</db:code>.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtscxml.git/tree/examples/statemachine/statemachine/eventtransitions?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
