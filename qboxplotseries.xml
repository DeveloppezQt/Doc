<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBoxPlotSeries Class</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qboxplotseries.xml">QBoxPlotSeries</db:link> class presents data in box-and-whiskers charts.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBoxPlotSeries</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtcharts-boxplotseries.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractseries.xml" xlink:role="class">QAbstractSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A box plot series acts as a container for box-and-whiskers items. Items from multiple series are grouped into categories according to their index value.</db:para>
<db:para>The <db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link> class is used to add the categories to the chart's axis. Category labels have to be unique. If the same category label is defined for several box-and-whiskers items, only the first one is drawn.</db:para>
<db:para>See the <db:link xlink:href="qtcharts-boxplotchart-example.xml">box-and-whiskers chart example</db:link> to learn how to create a box-and-whiskers chart.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_boxplotchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxset.xml">QBoxSet</db:link></db:member>
<db:member><db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="boxOutlineVisible-prop">
<db:title>boxOutlineVisible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>boxOutlineVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">boxOutlineVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setBoxOutlineVisible</db:synopsisinfo>
<db:synopsisinfo role="notifier">boxOutlineVisibilityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the visibility of the box outline.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">boxOutlineVisible</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBoxOutlineVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qboxplotseries.xml#boxOutlineVisibilityChanged">boxOutlineVisibilityChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="boxWidth-prop">
<db:title>boxWidth : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>boxWidth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">boxWidth</db:synopsisinfo>
<db:synopsisinfo role="setter">setBoxWidth</db:synopsisinfo>
<db:synopsisinfo role="notifier">boxWidthChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the width of the box-and-whiskers item. The value indicates the relative width of the item within its category. The value can be between 0.0 and 1.0. Negative values are replaced with 0.0 and values greater than 1.0 are replaced with 1.0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">boxWidth</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBoxWidth</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>width</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qboxplotseries.xml#boxWidthChanged">boxWidthChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="brush-prop">
<db:title>brush : QBrush</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QBrush</db:type>
<db:varname>brush</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">brush</db:synopsisinfo>
<db:synopsisinfo role="setter">setBrush</db:synopsisinfo>
<db:synopsisinfo role="notifier">brushChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the brush used to fill the boxes of the box-and-whiskers items.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbrush.xml">QBrush</db:link></db:type> <db:emphasis role="bold">brush</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBrush</db:emphasis>(const <db:type><db:link xlink:href="qbrush.xml">QBrush</db:link></db:type> &amp;<db:emphasis>brush</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qboxplotseries.xml#brushChanged">brushChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only] count : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">count</db:synopsisinfo>
<db:synopsisinfo role="notifier">countChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of box-and-whiskers items in a box plot series.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qboxplotseries.xml#count">count</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qboxplotseries.xml#countChanged">countChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="pen-prop">
<db:title>pen : QPen</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPen</db:type>
<db:varname>pen</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pen</db:synopsisinfo>
<db:synopsisinfo role="setter">setPen</db:synopsisinfo>
<db:synopsisinfo role="notifier">penChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the pen used to draw the lines of the box-and-whiskers items.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpen.xml">QPen</db:link></db:type> <db:emphasis role="bold">pen</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPen</db:emphasis>(const <db:type><db:link xlink:href="qpen.xml">QPen</db:link></db:type> &amp;<db:emphasis>pen</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qboxplotseries.xml#penChanged">penChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBoxPlotSeries">
<db:title>[explicit] QBoxPlotSeries::QBoxPlotSeries(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QBoxPlotSeries</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QBoxPlotSeries(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty box plot series that is a <db:link xlink:href="qobject.xml">QObject</db:link> and a child of <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QBoxPlotSeries">
<db:title>[virtual] QBoxPlotSeries::~QBoxPlotSeries()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QBoxPlotSeries</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QBoxPlotSeries()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Removes the series from the chart.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>bool QBoxPlotSeries::append(QBoxSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>QBoxSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool append(QBoxSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a single box-and-whiskers item specified by <db:code role="parameter">set</db:code> to the series and takes ownership of it. If the item is null or it already belongs to the series, it will not be appended. Returns <db:code>true</db:code> if appending succeeded.</db:para>
</db:section>
<db:section xml:id="append-1">
<db:title>bool QBoxPlotSeries::append(const QList&lt;QBoxSet *&gt; &amp;<db:emphasis>sets</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QBoxSet *&gt; &amp;</db:type>
<db:parameter>sets</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool append(const QList&lt;QBoxSet *&gt; &amp;sets)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a list of box-and-whiskers items specified by <db:code role="parameter">sets</db:code> to the series and takes ownership of them. If the list is null or the items already belong to the series, it will not be appended. Returns <db:code>true</db:code> if appending succeeded.</db:para>
</db:section>
<db:section xml:id="boxOutlineVisibilityChanged">
<db:title>void QBoxPlotSeries::boxOutlineVisibilityChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>boxOutlineVisibilityChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">boxOutlineVisible</db:synopsisinfo>
<db:synopsisinfo role="signature">void boxOutlineVisibilityChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the box outline visibility changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qboxplotseries.xml#boxOutlineVisible-prop">boxOutlineVisible</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="boxSets">
<db:title>QList&lt;QBoxSet *&gt; QBoxPlotSeries::boxSets() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QBoxSet *&gt;</db:type>
<db:methodname>boxSets</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QBoxSet *&gt; boxSets() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of box-and-whiskers items in a box plot series. Keeps the ownership of the items.</db:para>
</db:section>
<db:section xml:id="boxWidthChanged">
<db:title>void QBoxPlotSeries::boxWidthChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>boxWidthChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">boxWidth</db:synopsisinfo>
<db:synopsisinfo role="signature">void boxWidthChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the width of the box-and-whiskers item changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qboxplotseries.xml#boxWidth-prop">boxWidth</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="boxsetsAdded">
<db:title>void QBoxPlotSeries::boxsetsAdded(const QList&lt;QBoxSet *&gt; &amp;<db:emphasis>sets</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>boxsetsAdded</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QBoxSet *&gt; &amp;</db:type>
<db:parameter>sets</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void boxsetsAdded(const QList&lt;QBoxSet *&gt; &amp;sets)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the list of box-and-whiskers items specified by <db:code role="parameter">sets</db:code> is added to the series.</db:para>
</db:section>
<db:section xml:id="boxsetsRemoved">
<db:title>void QBoxPlotSeries::boxsetsRemoved(const QList&lt;QBoxSet *&gt; &amp;<db:emphasis>sets</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>boxsetsRemoved</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QBoxSet *&gt; &amp;</db:type>
<db:parameter>sets</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void boxsetsRemoved(const QList&lt;QBoxSet *&gt; &amp;sets)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the list of box-and-whiskers items specified by <db:code role="parameter">sets</db:code> is removed from the series.</db:para>
</db:section>
<db:section xml:id="brushChanged">
<db:title>void QBoxPlotSeries::brushChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>brushChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">brush</db:synopsisinfo>
<db:synopsisinfo role="signature">void brushChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the brush used to fill the boxes of the box-and-whiskers items changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qboxplotseries.xml#brush-prop">brush</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="clear">
<db:title>void QBoxPlotSeries::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all box-and-whiskers items from the series and permanently deletes them.</db:para>
</db:section>
<db:section xml:id="clicked">
<db:title>void QBoxPlotSeries::clicked(QBoxSet *<db:emphasis>boxset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clicked</db:methodname>
<db:methodparam>
<db:type>QBoxSet *</db:type>
<db:parameter>boxset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clicked(QBoxSet *boxset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user clicks the box-and-whiskers item specified by <db:code role="parameter">boxset</db:code> in the chart.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>int QBoxPlotSeries::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">count</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of box-and-whiskers items in a box plot series.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qboxplotseries.xml#count-prop">count</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="countChanged">
<db:title>void QBoxPlotSeries::countChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>countChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">count</db:synopsisinfo>
<db:synopsisinfo role="signature">void countChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the number of box-and-whiskers items in the series changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qboxplotseries.xml#count-prop">count</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="doubleClicked">
<db:title>void QBoxPlotSeries::doubleClicked(QBoxSet *<db:emphasis>boxset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>doubleClicked</db:methodname>
<db:methodparam>
<db:type>QBoxSet *</db:type>
<db:parameter>boxset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void doubleClicked(QBoxSet *boxset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user double-clicks the box-and-whiskers item specified by <db:code role="parameter">boxset</db:code> in the chart.</db:para>
</db:section>
<db:section xml:id="hovered">
<db:title>void QBoxPlotSeries::hovered(bool <db:emphasis>status</db:emphasis>, QBoxSet *<db:emphasis>boxset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hovered</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBoxSet *</db:type>
<db:parameter>boxset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hovered(bool status, QBoxSet *boxset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a mouse is hovered over the box-and-whiskers item specified by <db:code role="parameter">boxset</db:code> in the chart. When the mouse moves over the item, <db:code role="parameter">status</db:code> turns <db:code>true</db:code>, and when the mouse moves away again, it turns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="insert">
<db:title>bool QBoxPlotSeries::insert(int <db:emphasis>index</db:emphasis>, QBoxSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBoxSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insert(int index, QBoxSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a box-and-whiskers item specified by <db:code role="parameter">set</db:code> to a series at the position specified by <db:code role="parameter">index</db:code> and takes ownership of the item. If the item is null or already belongs to the series, it will not be appended. Returns <db:code>true</db:code> if inserting succeeds.</db:para>
</db:section>
<db:section xml:id="penChanged">
<db:title>void QBoxPlotSeries::penChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>penChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pen</db:synopsisinfo>
<db:synopsisinfo role="signature">void penChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the pen used to draw the lines of the box-and-whiskers items changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qboxplotseries.xml#pen-prop">pen</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="pressed">
<db:title>void QBoxPlotSeries::pressed(QBoxSet *<db:emphasis>boxset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pressed</db:methodname>
<db:methodparam>
<db:type>QBoxSet *</db:type>
<db:parameter>boxset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pressed(QBoxSet *boxset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user clicks the box-and-whiskers item specified by <db:code role="parameter">boxset</db:code> in the chart and holds down the mouse button.</db:para>
</db:section>
<db:section xml:id="released">
<db:title>void QBoxPlotSeries::released(QBoxSet *<db:emphasis>boxset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>released</db:methodname>
<db:methodparam>
<db:type>QBoxSet *</db:type>
<db:parameter>boxset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void released(QBoxSet *boxset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user releases the mouse press on the box-and-whiskers item specified by <db:code role="parameter">boxset</db:code> in the chart.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>bool QBoxPlotSeries::remove(QBoxSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>QBoxSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool remove(QBoxSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the box-and-whiskers item specified by <db:code role="parameter">set</db:code> from the series and permanently deletes it if the removal succeeds. Returns <db:code>true</db:code> if the item was removed.</db:para>
</db:section>
<db:section xml:id="take">
<db:title>bool QBoxPlotSeries::take(QBoxSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>take</db:methodname>
<db:methodparam>
<db:type>QBoxSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool take(QBoxSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Takes the box-and-whiskers item specified by <db:code role="parameter">set</db:code> from the series. Does not delete the item.</db:para>
<db:note>
<db:para>The series remains the item's parent object. You must set the parent object to take full ownership.</db:para>
</db:note>
<db:para>Returns <db:code>true</db:code> if the take operation succeeds.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] QAbstractSeries::SeriesType QBoxPlotSeries::type() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QAbstractSeries::SeriesType</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractSeries::SeriesType type() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qabstractseries.xml#type-prop" role="property">QAbstractSeries::type</db:link>.</db:para>
<db:para>Returns the type of the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractseries.xml">QAbstractSeries</db:link></db:member>
<db:member><db:link xlink:href="qabstractseries.xml#SeriesType-enum">SeriesType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
