<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qmlformat</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A tool that automatically formats QML files according to QML coding convention.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="qmlformat">
<db:title>qmlformat</db:title>
<db:para><db:emphasis>qmlformat</db:emphasis> is a tool that automatically formats QML files in accordance with the <db:link xlink:href="">QML Coding Conventions</db:link>. <db:link xlink:href="qtqml-tooling-qmlpreview.xml#details">More...</db:link></db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Usage:</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>qmlformat [<db:link xlink:href="qtqml-tooling-qmlformat.xml#options">options</db:link>] <db:link xlink:href="qtqml-tooling-qmlformat.xml#arguments">arguments</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="options">
<db:title>Options</db:title>
<db:anchor xml:id="options"/>
<db:para>The following options are available:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Default Value</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>-h, –help</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Displays help on commandline options.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>–help-all</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Displays help, including generic Qt options.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-v, –version</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Displays version information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-V, –verbose</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Verbose mode. Outputs more detailed information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>–write-defaults</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Writes defaults settings to .qmlformat.ini and exits (Warning: This will overwrite any existing settings and comments!)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>–ignore-settings</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Ignores all settings files and only takes command line options into consideration</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-i, –inplace</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Edit file in-place instead of outputting to stdout.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-f, –force</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Continue even if an error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-t, –tabs</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Use tabs instead of spaces.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-w, –indent-width &lt;width&gt;</db:para>
</db:td>
<db:td>
<db:para>4</db:para>
</db:td>
<db:td>
<db:para>How many spaces are used when indenting.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-W, –column-width &lt;width&gt;</db:para>
</db:td>
<db:td>
<db:para>-1</db:para>
</db:td>
<db:td>
<db:para>Breaks the line into multiple lines if it exceeds the specified width. Use -1 to disable line wrapping. (default).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-n, –normalize</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Reorders the attributes of the objects according to the QML Coding Guidelines.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-F, –files &lt;file&gt;</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Format all files listed in file, in-place</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-l, –newline &lt;newline&gt;</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Override the new line format to use (native macos unix windows).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>–objects-spacing</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Ensure spaces between objects (only works with normalize option).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>–functions-spacing</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Ensure spaces between functions (only works with normalize option).</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="arguments">
<db:title>Arguments</db:title>
<db:anchor xml:id="arguments"/>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Arguments:</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>filenames</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="details">
<db:title>Details</db:title>
<db:para><db:emphasis>qmlformat</db:emphasis> is flexible and can be configured according to your needs.</db:para>
<db:section xml:id="output">
<db:title>Output</db:title>
<db:para>qmlformat writes the formatted version of the file to stdout. If you wish to have your file updated in-place specify the -i flag.</db:para>
</db:section>
<db:section xml:id="grouping-properties-functions-and-signals-together">
<db:title>Grouping Properties, Functions, and Signals Together</db:title>
<db:para>With -n or --normalize flag, <db:emphasis>qmlformat</db:emphasis> groups all properties, functions, and signals together, instead of retaining the order you specified.</db:para>
</db:section>
<db:section xml:id="settings-file">
<db:title>Settings File</db:title>
<db:para>You can configure <db:emphasis>qmlformat</db:emphasis> by including a settings file .qmlformat.ini in your project source or in the parent directories of your project source folder. A default settings file can be obtained by passing the --write-defaults flag. This generates the .qmlformat.ini file in the current working directory.</db:para>
<db:warning>
<db:para>--write-defaults will overwrite any existing settings and comments!</db:para>
</db:warning>
<db:anchor xml:id="qmlformat-settings"/>
<db:para>The following settings are available in the .qmlformat.ini file:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Setting</db:para>
</db:th>
<db:th>
<db:para>Default Value</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>UseTabs</db:para>
</db:td>
<db:td>
<db:para>false</db:para>
</db:td>
<db:td>
<db:para>Uses tabs instead of spaces.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>IndentWidth</db:para>
</db:td>
<db:td>
<db:para>4</db:para>
</db:td>
<db:td>
<db:para>How many spaces are used when indenting.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>NewlineType</db:para>
</db:td>
<db:td>
<db:para>native</db:para>
</db:td>
<db:td>
<db:para>Overrides the new line format to use (native, macos, unix, windows).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>NormalizeOrder</db:para>
</db:td>
<db:td>
<db:para>false</db:para>
</db:td>
<db:td>
<db:para>Reorders the attributes of the objects according to the QML coding guidelines.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FunctionsSpacing</db:para>
</db:td>
<db:td>
<db:para>false</db:para>
</db:td>
<db:td>
<db:para>Ensures spaces between functions (only works with normalize option).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ObjectsSpacing</db:para>
</db:td>
<db:td>
<db:para>false</db:para>
</db:td>
<db:td>
<db:para>Ensures spaces between objects (only works with normalize option).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MaxColumnWidth</db:para>
</db:td>
<db:td>
<db:para>-1</db:para>
</db:td>
<db:td>
<db:para>Breaks the line into multiple lines if it exceeds the specified width. Use -1 to disable line wrapping (default).</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="formatting-a-list-of-files">
<db:title>Formatting a List of Files</db:title>
<db:para>While you can pass a list of files to be formatted as arguments, qmlformat provides -F option to format a set of files stored in a file. In this case, formatting will happen inplace.</db:para>
<db:programlisting language="cpp">// FileList.txt
main.qml
mycomponent.qml
</db:programlisting>
<db:para>Then, use it like</db:para>
<db:programlisting language="cpp">qmlformat -F FileList.txt
</db:programlisting>
<db:note>
<db:para>If the file contains an invalid entry, for example, a file path that doesn't exist or a valid file path but the content is an invalid qml document, then qmlformat will error out for that particular entry. It will still format the valid file entries in place.</db:para>
</db:note>
<db:warning>
<db:para>If you provide -F option, qmlformat will ignore the positional arguments.</db:para>
</db:warning>
</db:section>
</db:section>
</db:section>
</db:article>
