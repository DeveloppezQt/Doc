<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTableView Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtableview.xml">QTableView</db:link> class provides a default model/view implementation of a table view.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTableView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemview.xml" xlink:role="class">QAbstractItemView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtablewidget.xml" xlink:role="class">QTableWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTableView is part of <db:simplelist><db:member>model-view</db:member><db:member>advanced</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-tableview.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A <db:link xlink:href="qtableview.xml">QTableView</db:link> implements a table view that displays items from a model. This class is used to provide standard tables that were previously provided by the QTable class, but using the more flexible approach provided by Qt's model/view architecture.</db:para>
<db:para>The <db:link xlink:href="qtableview.xml">QTableView</db:link> class is one of the <db:link xlink:href="model-view-programming.xml#the-model-view-classes">Model/View Classes</db:link> and is part of Qt's <db:link xlink:href="model-view-programming.xml">model/view framework</db:link>.</db:para>
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link> implements the interfaces defined by the <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> class to allow it to display data provided by models derived from the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class.</db:para>
<db:section xml:id="navigation">
<db:title>Navigation</db:title>
<db:para>You can navigate the cells in the table by clicking on a cell with the mouse, or by using the arrow keys. Because <db:link xlink:href="qtableview.xml">QTableView</db:link> enables <db:link xlink:href="qabstractitemview.xml#tabKeyNavigation-prop">tabKeyNavigation</db:link> by default, you can also hit Tab and Backtab to move from cell to cell.</db:para>
</db:section>
<db:section xml:id="visual-appearance">
<db:title>Visual Appearance</db:title>
<db:para>The table has a vertical header that can be obtained using the <db:link xlink:href="qtableview.xml#verticalHeader">verticalHeader</db:link>() function, and a horizontal header that is available through the <db:link xlink:href="qtableview.xml#horizontalHeader">horizontalHeader</db:link>() function. The height of each row in the table can be found by using <db:link xlink:href="qtableview.xml#rowHeight">rowHeight</db:link>(); similarly, the width of columns can be found using <db:link xlink:href="qtableview.xml#columnWidth">columnWidth</db:link>(). Since both of these are plain widgets, you can hide either of them using their <db:link xlink:href="qwidget.xml#hide">hide</db:link>() functions. Each header is configured with its <db:link xlink:href="qheaderview.xml#highlightSections-prop">highlightSections</db:link> and <db:link xlink:href="qheaderview.xml#sectionsClickable">sectionsClickable</db:link> properties set to true.</db:para>
<db:para>Rows and columns can be hidden and shown with <db:link xlink:href="qtableview.xml#hideRow">hideRow</db:link>(), <db:link xlink:href="qtableview.xml#hideColumn">hideColumn</db:link>(), <db:link xlink:href="qtableview.xml#showRow">showRow</db:link>(), and <db:link xlink:href="qtableview.xml#showColumn">showColumn</db:link>(). They can be selected with <db:link xlink:href="qtableview.xml#selectRow">selectRow</db:link>() and <db:link xlink:href="qtableview.xml#selectColumn">selectColumn</db:link>(). The table will show a grid depending on the <db:link xlink:href="qtableview.xml#showGrid-prop">showGrid</db:link> property.</db:para>
<db:para>The items shown in a table view, like those in the other item views, are rendered and edited using standard <db:link xlink:href="qstyleditemdelegate.xml">delegates</db:link>. However, for some tasks it is sometimes useful to be able to insert widgets in a table instead. Widgets are set for particular indexes with the <db:link xlink:href="qabstractitemview.xml#setIndexWidget">setIndexWidget</db:link>() function, and later retrieved with <db:link xlink:href="qabstractitemview.xml#indexWidget">indexWidget</db:link>().</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtableview-resized.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para>By default, the cells in a table do not expand to fill the available space.</db:para>
<db:para>You can make the cells fill the available space by stretching the last header section. Access the relevant header using <db:link xlink:href="qtableview.xml#horizontalHeader">horizontalHeader</db:link>() or <db:link xlink:href="qtableview.xml#verticalHeader">verticalHeader</db:link>() and set the header's <db:link xlink:href="qheaderview.xml#stretchLastSection-prop">stretchLastSection</db:link> property.</db:para>
<db:para>To distribute the available space according to the space requirement of each column or row, call the view's <db:link xlink:href="qtableview.xml#resizeColumnsToContents">resizeColumnsToContents</db:link>() or <db:link xlink:href="qtableview.xml#resizeRowsToContents">resizeRowsToContents</db:link>() functions.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="coordinate-systems">
<db:title>Coordinate Systems</db:title>
<db:para>For some specialized forms of tables it is useful to be able to convert between row and column indexes and widget coordinates. The <db:link xlink:href="qtableview.xml#rowAt">rowAt</db:link>() function provides the y-coordinate within the view of the specified row; the row index can be used to obtain a corresponding y-coordinate with <db:link xlink:href="qtableview.xml#rowViewportPosition">rowViewportPosition</db:link>(). The <db:link xlink:href="qtableview.xml#columnAt">columnAt</db:link>() and <db:link xlink:href="qtableview.xml#columnViewportPosition">columnViewportPosition</db:link>() functions provide the equivalent conversion operations between x-coordinates and column indexes.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtablewidget.xml">QTableWidget</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml#view-classes">View Classes</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:member>
<db:member><db:link xlink:href="qtsql-tablemodel-example.xml">Table Model Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="cornerButtonEnabled-prop">
<db:title>cornerButtonEnabled : bool</db:title>
<db:para>This property holds whether the button in the top-left corner is enabled</db:para>
<db:para>If this property is true then button in the top-left corner of the table view is enabled. Clicking on this button will select all the cells in the table view.</db:para>
<db:para>This property is true by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isCornerButtonEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCornerButtonEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="gridStyle-prop">
<db:title>gridStyle : Qt::PenStyle</db:title>
<db:para>This property holds the pen style used to draw the grid.</db:para>
<db:para>This property holds the style used when drawing the grid (see <db:link xlink:href="qtableview.xml#showGrid-prop">showGrid</db:link>).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#PenStyle-enum">Qt::PenStyle</db:link></db:type> <db:emphasis role="bold">gridStyle</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setGridStyle</db:emphasis>(<db:type><db:link xlink:href="qt.xml#PenStyle-enum">Qt::PenStyle</db:link></db:type> <db:emphasis>style</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="showGrid-prop">
<db:title>showGrid : bool</db:title>
<db:para>This property holds whether the grid is shown</db:para>
<db:para>If this property is true a grid is drawn for the table; if the property is false, no grid is drawn. The default value is true.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">showGrid</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setShowGrid</db:emphasis>(<db:type>bool</db:type> <db:emphasis>show</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sortingEnabled-prop">
<db:title>sortingEnabled : bool</db:title>
<db:para>This property holds whether sorting is enabled</db:para>
<db:para>If this property is true, sorting is enabled for the table. If this property is false, sorting is not enabled. The default value is false.</db:para>
<db:note>
<db:para>. Setting the property to true with <db:link xlink:href="qtableview.xml#setSortingEnabled">setSortingEnabled</db:link>() immediately triggers a call to <db:link xlink:href="qtableview.xml#sortByColumn">sortByColumn</db:link>() with the current sort section and order.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSortingEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtableview.xml#setSortingEnabled">setSortingEnabled</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#sortByColumn">sortByColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wordWrap-prop">
<db:title>wordWrap : bool</db:title>
<db:para>This property holds the item text word-wrapping policy</db:para>
<db:para>If this property is true then the item text is wrapped where necessary at word-breaks; otherwise it is not wrapped at all. This property is true by default.</db:para>
<db:para>Note that even of wrapping is enabled, the cell will not be expanded to fit all text. Ellipsis will be inserted according to the current <db:link xlink:href="qabstractitemview.xml#textElideMode-prop">textElideMode</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">wordWrap</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWordWrap</db:emphasis>(<db:type>bool</db:type> <db:emphasis>on</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTableView">
<db:title>[explicit] QTableView::QTableView(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a table view with a <db:code role="parameter">parent</db:code> to represent the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QTableView">
<db:title>[virtual noexcept] QTableView::~QTableView()</db:title>
<db:para>Destroys the table view.</db:para>
</db:section>
<db:section xml:id="clearSpans">
<db:title>void QTableView::clearSpans()</db:title>
<db:para>Removes all row and column spans in the table view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#setSpan">setSpan</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnAt">
<db:title>int QTableView::columnAt(int <db:emphasis>x</db:emphasis>) const</db:title>
<db:para>Returns the column in which the given x-coordinate, <db:code role="parameter">x</db:code>, in contents coordinates is located.</db:para>
<db:note>
<db:para>This function returns -1 if the given coordinate is not valid (has no column).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#rowAt">rowAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnCountChanged">
<db:title>[protected] void QTableView::columnCountChanged(int <db:emphasis>oldCount</db:emphasis>, int <db:emphasis>newCount</db:emphasis>)</db:title>
<db:para>This slot is called whenever columns are added or deleted. The previous number of columns is specified by <db:code role="parameter">oldCount</db:code>, and the new number of columns is specified by <db:code role="parameter">newCount</db:code>.</db:para>
</db:section>
<db:section xml:id="columnMoved">
<db:title>[protected] void QTableView::columnMoved(int <db:emphasis>column</db:emphasis>, int <db:emphasis>oldIndex</db:emphasis>, int <db:emphasis>newIndex</db:emphasis>)</db:title>
<db:para>This slot is called to change the index of the given <db:code role="parameter">column</db:code> in the table view. The old index is specified by <db:code role="parameter">oldIndex</db:code>, and the new index by <db:code role="parameter">newIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#rowMoved">rowMoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnResized">
<db:title>[protected] void QTableView::columnResized(int <db:emphasis>column</db:emphasis>, int <db:emphasis>oldWidth</db:emphasis>, int <db:emphasis>newWidth</db:emphasis>)</db:title>
<db:para>This slot is called to change the width of the given <db:code role="parameter">column</db:code>. The old width is specified by <db:code role="parameter">oldWidth</db:code>, and the new width by <db:code role="parameter">newWidth</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#rowResized">rowResized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnSpan">
<db:title>int QTableView::columnSpan(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>) const</db:title>
<db:para>Returns the column span of the table element at (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>). The default is 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#setSpan">setSpan</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#rowSpan">rowSpan</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnViewportPosition">
<db:title>int QTableView::columnViewportPosition(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:para>Returns the x-coordinate in contents coordinates of the given <db:code role="parameter">column</db:code>.</db:para>
</db:section>
<db:section xml:id="columnWidth">
<db:title>int QTableView::columnWidth(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:para>Returns the width of the given <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#setColumnWidth">setColumnWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#resizeColumnToContents">resizeColumnToContents</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#rowHeight">rowHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentChanged">
<db:title>[override virtual protected] void QTableView::currentChanged(const QModelIndex &amp;<db:emphasis>current</db:emphasis>, const QModelIndex &amp;<db:emphasis>previous</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#currentChanged" role="function">QAbstractItemView::currentChanged(const QModelIndex &amp;current, const QModelIndex &amp;previous)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QTableView::dropEvent(QDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#dropEvent" role="function">QAbstractItemView::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hideColumn">
<db:title>void QTableView::hideColumn(int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Hide the given <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#showColumn">showColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#hideRow">hideRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hideRow">
<db:title>void QTableView::hideRow(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Hide the given <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#showRow">showRow</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#hideColumn">hideColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalHeader">
<db:title>QHeaderView *QTableView::horizontalHeader() const</db:title>
<db:para>Returns the table view's horizontal header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#setHorizontalHeader">setHorizontalHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#verticalHeader">verticalHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#headerData">QAbstractItemModel::headerData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalOffset">
<db:title>[override virtual protected] int QTableView::horizontalOffset() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#horizontalOffset" role="function">QAbstractItemView::horizontalOffset() const</db:link>.</db:para>
<db:para>Returns the horizontal offset of the items in the table view.</db:para>
<db:para>Note that the table view uses the horizontal header section positions to determine the positions of columns in the view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#verticalOffset">verticalOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexAt">
<db:title>[override virtual] QModelIndex QTableView::indexAt(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#indexAt" role="function">QAbstractItemView::indexAt(const QPoint &amp;point) const</db:link>.</db:para>
<db:para>Returns the index position of the model item corresponding to the table item at position <db:code role="parameter">pos</db:code> in contents coordinates.</db:para>
</db:section>
<db:section xml:id="initViewItemOption">
<db:title>[override virtual protected] void QTableView::initViewItemOption(QStyleOptionViewItem *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#initViewItemOption" role="function">QAbstractItemView::initViewItemOption(QStyleOptionViewItem *option) const</db:link>.</db:para>
</db:section>
<db:section xml:id="isColumnHidden">
<db:title>bool QTableView::isColumnHidden(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:para>Returns true if the given <db:code role="parameter">column</db:code> is hidden; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#isRowHidden">isRowHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isIndexHidden">
<db:title>[override virtual protected] bool QTableView::isIndexHidden(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#isIndexHidden" role="function">QAbstractItemView::isIndexHidden(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="isRowHidden">
<db:title>bool QTableView::isRowHidden(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:para>Returns true if the given <db:code role="parameter">row</db:code> is hidden; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#isColumnHidden">isColumnHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveCursor">
<db:title>[override virtual protected] QModelIndex QTableView::moveCursor(QAbstractItemView::CursorAction <db:emphasis>cursorAction</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#moveCursor" role="function">QAbstractItemView::moveCursor(QAbstractItemView::CursorAction cursorAction, Qt::KeyboardModifiers modifiers)</db:link>.</db:para>
<db:para>Moves the cursor in accordance with the given <db:code role="parameter">cursorAction</db:code>, using the information provided by the <db:code role="parameter">modifiers</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#CursorAction-enum">QAbstractItemView::CursorAction</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QTableView::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#paintEvent" role="function">QAbstractScrollArea::paintEvent(QPaintEvent *event)</db:link>.</db:para>
<db:para>Paints the table on receipt of the given paint event <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="resizeColumnToContents">
<db:title>void QTableView::resizeColumnToContents(int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Resizes the given <db:code role="parameter">column</db:code> based on the size hints of the delegate used to render each item in the column.</db:para>
<db:note>
<db:para>Only visible columns will be resized. Reimplement <db:link xlink:href="qtableview.xml#sizeHintForColumn">sizeHintForColumn</db:link>() to resize hidden columns as well.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#resizeColumnsToContents">resizeColumnsToContents</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#sizeHintForColumn">sizeHintForColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#resizeContentsPrecision">QHeaderView::resizeContentsPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeColumnsToContents">
<db:title>void QTableView::resizeColumnsToContents()</db:title>
<db:para>Resizes all columns based on the size hints of the delegate used to render each item in the columns.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#resizeColumnToContents">resizeColumnToContents</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#sizeHintForColumn">sizeHintForColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#resizeContentsPrecision">QHeaderView::resizeContentsPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeRowToContents">
<db:title>void QTableView::resizeRowToContents(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Resizes the given <db:code role="parameter">row</db:code> based on the size hints of the delegate used to render each item in the row.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#resizeRowsToContents">resizeRowsToContents</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#sizeHintForRow">sizeHintForRow</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#resizeContentsPrecision">QHeaderView::resizeContentsPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeRowsToContents">
<db:title>void QTableView::resizeRowsToContents()</db:title>
<db:para>Resizes all rows based on the size hints of the delegate used to render each item in the rows.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#resizeRowToContents">resizeRowToContents</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#sizeHintForRow">sizeHintForRow</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#resizeContentsPrecision">QHeaderView::resizeContentsPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowAt">
<db:title>int QTableView::rowAt(int <db:emphasis>y</db:emphasis>) const</db:title>
<db:para>Returns the row in which the given y-coordinate, <db:code role="parameter">y</db:code>, in contents coordinates is located.</db:para>
<db:note>
<db:para>This function returns -1 if the given coordinate is not valid (has no row).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#columnAt">columnAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowCountChanged">
<db:title>[protected] void QTableView::rowCountChanged(int <db:emphasis>oldCount</db:emphasis>, int <db:emphasis>newCount</db:emphasis>)</db:title>
<db:para>This slot is called whenever rows are added or deleted. The previous number of rows is specified by <db:code role="parameter">oldCount</db:code>, and the new number of rows is specified by <db:code role="parameter">newCount</db:code>.</db:para>
</db:section>
<db:section xml:id="rowHeight">
<db:title>int QTableView::rowHeight(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:para>Returns the height of the given <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#setRowHeight">setRowHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#resizeRowToContents">resizeRowToContents</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#columnWidth">columnWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowMoved">
<db:title>[protected] void QTableView::rowMoved(int <db:emphasis>row</db:emphasis>, int <db:emphasis>oldIndex</db:emphasis>, int <db:emphasis>newIndex</db:emphasis>)</db:title>
<db:para>This slot is called to change the index of the given <db:code role="parameter">row</db:code> in the table view. The old index is specified by <db:code role="parameter">oldIndex</db:code>, and the new index by <db:code role="parameter">newIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#columnMoved">columnMoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowResized">
<db:title>[protected] void QTableView::rowResized(int <db:emphasis>row</db:emphasis>, int <db:emphasis>oldHeight</db:emphasis>, int <db:emphasis>newHeight</db:emphasis>)</db:title>
<db:para>This slot is called to change the height of the given <db:code role="parameter">row</db:code>. The old height is specified by <db:code role="parameter">oldHeight</db:code>, and the new height by <db:code role="parameter">newHeight</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#columnResized">columnResized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowSpan">
<db:title>int QTableView::rowSpan(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>) const</db:title>
<db:para>Returns the row span of the table element at (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>). The default is 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#setSpan">setSpan</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#columnSpan">columnSpan</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowViewportPosition">
<db:title>int QTableView::rowViewportPosition(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:para>Returns the y-coordinate in contents coordinates of the given <db:code role="parameter">row</db:code>.</db:para>
</db:section>
<db:section xml:id="scrollContentsBy">
<db:title>[override virtual protected] void QTableView::scrollContentsBy(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#scrollContentsBy" role="function">QAbstractScrollArea::scrollContentsBy(int dx, int dy)</db:link>.</db:para>
<db:para>Scroll the contents of the table view by (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>).</db:para>
</db:section>
<db:section xml:id="scrollTo">
<db:title>[override virtual] void QTableView::scrollTo(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, QAbstractItemView::ScrollHint <db:emphasis>hint</db:emphasis> = EnsureVisible)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#scrollTo" role="function">QAbstractItemView::scrollTo(const QModelIndex &amp;index, QAbstractItemView::ScrollHint hint)</db:link>.</db:para>
<db:para>Makes sure that the given <db:code role="parameter">index</db:code> is visible in the table view, scrolling if necessary.</db:para>
</db:section>
<db:section xml:id="selectColumn">
<db:title>void QTableView::selectColumn(int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Selects the given <db:code role="parameter">column</db:code> in the table view if the current SelectionMode and SelectionBehavior allows columns to be selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#selectRow">selectRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectRow">
<db:title>void QTableView::selectRow(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Selects the given <db:code role="parameter">row</db:code> in the table view if the current SelectionMode and SelectionBehavior allows rows to be selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#selectColumn">selectColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedIndexes">
<db:title>[override virtual protected] QModelIndexList QTableView::selectedIndexes() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#selectedIndexes" role="function">QAbstractItemView::selectedIndexes() const</db:link>.</db:para>
</db:section>
<db:section xml:id="selectionChanged">
<db:title>[override virtual protected] void QTableView::selectionChanged(const QItemSelection &amp;<db:emphasis>selected</db:emphasis>, const QItemSelection &amp;<db:emphasis>deselected</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#selectionChanged" role="function">QAbstractItemView::selectionChanged(const QItemSelection &amp;selected, const QItemSelection &amp;deselected)</db:link>.</db:para>
</db:section>
<db:section xml:id="setColumnHidden">
<db:title>void QTableView::setColumnHidden(int <db:emphasis>column</db:emphasis>, bool <db:emphasis>hide</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">hide</db:code> is true the given <db:code role="parameter">column</db:code> will be hidden; otherwise it will be shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#isColumnHidden">isColumnHidden</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#setRowHidden">setRowHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColumnWidth">
<db:title>void QTableView::setColumnWidth(int <db:emphasis>column</db:emphasis>, int <db:emphasis>width</db:emphasis>)</db:title>
<db:para>Sets the width of the given <db:code role="parameter">column</db:code> to be <db:code role="parameter">width</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#columnWidth">columnWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHorizontalHeader">
<db:title>void QTableView::setHorizontalHeader(QHeaderView *<db:emphasis>header</db:emphasis>)</db:title>
<db:para>Sets the widget to use for the horizontal header to <db:code role="parameter">header</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#horizontalHeader">horizontalHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#setVerticalHeader">setVerticalHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setModel">
<db:title>[override virtual] void QTableView::setModel(QAbstractItemModel *<db:emphasis>model</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setModel" role="function">QAbstractItemView::setModel(QAbstractItemModel *model)</db:link>.</db:para>
</db:section>
<db:section xml:id="setRootIndex">
<db:title>[override virtual] void QTableView::setRootIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setRootIndex" role="function">QAbstractItemView::setRootIndex(const QModelIndex &amp;index)</db:link>.</db:para>
</db:section>
<db:section xml:id="setRowHeight">
<db:title>void QTableView::setRowHeight(int <db:emphasis>row</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Sets the height of the given <db:code role="parameter">row</db:code> to be <db:code role="parameter">height</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#rowHeight">rowHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowHidden">
<db:title>void QTableView::setRowHidden(int <db:emphasis>row</db:emphasis>, bool <db:emphasis>hide</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">hide</db:code> is true <db:code role="parameter">row</db:code> will be hidden, otherwise it will be shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#isRowHidden">isRowHidden</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#setColumnHidden">setColumnHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelection">
<db:title>[override virtual protected] void QTableView::setSelection(const QRect &amp;<db:emphasis>rect</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setSelection" role="function">QAbstractItemView::setSelection(const QRect &amp;rect, QItemSelectionModel::SelectionFlags flags)</db:link>.</db:para>
<db:para>Selects the items within the given <db:code role="parameter">rect</db:code> and in accordance with the specified selection <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="setSelectionModel">
<db:title>[override virtual] void QTableView::setSelectionModel(QItemSelectionModel *<db:emphasis>selectionModel</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setSelectionModel" role="function">QAbstractItemView::setSelectionModel(QItemSelectionModel *selectionModel)</db:link>.</db:para>
</db:section>
<db:section xml:id="setSortingEnabled">
<db:title>void QTableView::setSortingEnabled(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enable</db:code> is true, enables sorting for the table and immediately trigger a call to <db:link xlink:href="qtableview.xml#sortByColumn">sortByColumn</db:link>() with the current sort section and order</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qtableview.xml#sortingEnabled-prop">sortingEnabled</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#sortingEnabled-prop">isSortingEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSpan">
<db:title>void QTableView::setSpan(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, int <db:emphasis>rowSpanCount</db:emphasis>, int <db:emphasis>columnSpanCount</db:emphasis>)</db:title>
<db:para>Sets the span of the table element at (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>) to the number of rows and columns specified by (<db:code role="parameter">rowSpanCount</db:code>, <db:code role="parameter">columnSpanCount</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#rowSpan">rowSpan</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#columnSpan">columnSpan</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalHeader">
<db:title>void QTableView::setVerticalHeader(QHeaderView *<db:emphasis>header</db:emphasis>)</db:title>
<db:para>Sets the widget to use for the vertical header to <db:code role="parameter">header</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#verticalHeader">verticalHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#setHorizontalHeader">setHorizontalHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showColumn">
<db:title>void QTableView::showColumn(int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Show the given <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#hideColumn">hideColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#showRow">showRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showRow">
<db:title>void QTableView::showRow(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Show the given <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#hideRow">hideRow</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#showColumn">showColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHintForColumn">
<db:title>[override virtual protected] int QTableView::sizeHintForColumn(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#sizeHintForColumn" role="function">QAbstractItemView::sizeHintForColumn(int column) const</db:link>.</db:para>
<db:para>Returns the size hint for the given <db:code role="parameter">column</db:code>'s width or -1 if there is no model.</db:para>
<db:para>If you need to set the width of a given column to a fixed value, call <db:link xlink:href="qheaderview.xml#resizeSection">QHeaderView::resizeSection</db:link>() on the table's horizontal header.</db:para>
<db:para>If you reimplement this function in a subclass, note that the value you return will be used when <db:link xlink:href="qtableview.xml#resizeColumnToContents">resizeColumnToContents</db:link>() or <db:link xlink:href="qheaderview.xml#resizeSections">QHeaderView::resizeSections</db:link>() is called. If a larger column width is required by either the horizontal header or the item delegate, the larger width will be used instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#sizeHint-prop">QWidget::sizeHint</db:link></db:member>
<db:member><db:link xlink:href="qtableview.xml#horizontalHeader">horizontalHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#resizeContentsPrecision">QHeaderView::resizeContentsPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHintForRow">
<db:title>[override virtual protected] int QTableView::sizeHintForRow(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#sizeHintForRow" role="function">QAbstractItemView::sizeHintForRow(int row) const</db:link>.</db:para>
<db:para>Returns the size hint for the given <db:code role="parameter">row</db:code>'s height or -1 if there is no model.</db:para>
<db:para>If you need to set the height of a given row to a fixed value, call <db:link xlink:href="qheaderview.xml#resizeSection">QHeaderView::resizeSection</db:link>() on the table's vertical header.</db:para>
<db:para>If you reimplement this function in a subclass, note that the value you return is only used when <db:link xlink:href="qtableview.xml#resizeRowToContents">resizeRowToContents</db:link>() is called. In that case, if a larger row height is required by either the vertical header or the item delegate, that width will be used instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#sizeHint-prop">QWidget::sizeHint</db:link></db:member>
<db:member><db:link xlink:href="qtableview.xml#verticalHeader">verticalHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#resizeContentsPrecision">QHeaderView::resizeContentsPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortByColumn">
<db:title>void QTableView::sortByColumn(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis>)</db:title>
<db:para>Sorts the model by the values in the given <db:code role="parameter">column</db:code> and <db:code role="parameter">order</db:code>.</db:para>
<db:para><db:code role="parameter">column</db:code> may be -1, in which case no sort indicator will be shown and the model will return to its natural, unsorted order. Note that not all models support this and may even crash in this case.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#sortingEnabled-prop">sortingEnabled</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QTableView::timerEvent(QTimerEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#timerEvent" role="function">QAbstractItemView::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="updateGeometries">
<db:title>[override virtual protected] void QTableView::updateGeometries()</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#updateGeometries" role="function">QAbstractItemView::updateGeometries()</db:link>.</db:para>
</db:section>
<db:section xml:id="verticalHeader">
<db:title>QHeaderView *QTableView::verticalHeader() const</db:title>
<db:para>Returns the table view's vertical header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#setVerticalHeader">setVerticalHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#horizontalHeader">horizontalHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#headerData">QAbstractItemModel::headerData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verticalOffset">
<db:title>[override virtual protected] int QTableView::verticalOffset() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#verticalOffset" role="function">QAbstractItemView::verticalOffset() const</db:link>.</db:para>
<db:para>Returns the vertical offset of the items in the table view.</db:para>
<db:para>Note that the table view uses the vertical header section positions to determine the positions of rows in the view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtableview.xml#horizontalOffset">horizontalOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewportSizeHint">
<db:title>[override virtual protected] QSize QTableView::viewportSizeHint() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#viewportSizeHint" role="function">QAbstractItemView::viewportSizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="visualRect">
<db:title>[override virtual] QRect QTableView::visualRect(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#visualRect" role="function">QAbstractItemView::visualRect(const QModelIndex &amp;index) const</db:link>.</db:para>
<db:para>Returns the rectangle on the viewport occupied by the given <db:code role="parameter">index</db:code>. If the index is hidden in the view it will return a null <db:link xlink:href="qrect.xml">QRect</db:link>.</db:para>
</db:section>
<db:section xml:id="visualRegionForSelection">
<db:title>[override virtual protected] QRegion QTableView::visualRegionForSelection(const QItemSelection &amp;<db:emphasis>selection</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#visualRegionForSelection" role="function">QAbstractItemView::visualRegionForSelection(const QItemSelection &amp;selection) const</db:link>.</db:para>
<db:para>Returns the rectangle from the viewport of the items in the given <db:code role="parameter">selection</db:code>.</db:para>
<db:para>Since 4.7, the returned region only contains rectangles intersecting (or included in) the viewport.</db:para>
</db:section>
</db:section>
</db:article>
