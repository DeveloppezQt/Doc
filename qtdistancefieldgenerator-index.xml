<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Distance Field Generator Manual</db:title>
<db:productname>QtDistanceFieldGenerator</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Distance Field Generator Manual</db:titleabbrev>
<db:abstract>
<db:para>Qt Distance Field Generator Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>If the user interface of an application has a lot of text, it may cause a small, but noticeable, performance impact the first time it is displayed to the user. This is especially true if the text is rendered in multiple different fonts or use a large amount of distinct characters (common for instance in writing systems such as Hanzi, written Chinese).</db:para>
<db:para>The reason is that in order to render the text efficiently later, Qt will spend some time creating graphical assets for each of the glyphs that will later be reused. This happens the first time a glyph is displayed in the scene.</db:para>
<db:para>For advanced users who want to optimize startup performance, it is possible to pregenerate this font cache, as long as Text.QtRendering is the rendering type in use. The Qt Distance Field Generator tool can be used to pregenerate the cache, either for all glyphs in the fonts, or just a selection that are known to be displayed during a critical phase.</db:para>
<db:note>
<db:para>This is a tool that may be used by advanced users to streamline their application in ways that cannot be done automatically by Qt. For most common use cases, the default behavior in Qt will be sufficient.</db:para>
</db:note>
<db:mediaobject>
<db:alt>&quot;Qt Distance Field Generator UI&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/distancefieldgenerator.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="general-usage">
<db:title>General Usage</db:title>
<db:para>Use the Qt Distance Field Generator in the following way:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Load a font file with <db:emphasis role="bold">File</db:emphasis> &gt; <db:emphasis role="bold">Open</db:emphasis> font. If the font file is large, there will be some waiting as it reads the fonts and generates the distance fields.</db:para>
</db:listitem>
<db:listitem>
<db:para>Once this is done, select the glyphs that you want to save in the pregenerated cache. This should ideally be the glyphs that are used by your application during a performance-critical phase, so that doing the generation ahead of time will give a visible impact on performance.</db:para>
</db:listitem>
<db:listitem>
<db:para>Finally, click <db:emphasis role="bold">Save</db:emphasis> to save the new font file.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>In order to modify a font in this way, you will need to make sure its license does not prohibit it.</db:para>
</db:note>
</db:section>
<db:section xml:id="selecting-glyphs">
<db:title>Selecting Glyphs</db:title>
<db:para>Glyphs can be selected in multiple ways. The simplest way is to click the grid of glyphs to select a particular glyph. You can cancel the selection by clicking on the glyph again.</db:para>
<db:para>In addition, you can use the list of Unicode ranges to select all glyphs matching the characters in a certain range.</db:para>
<db:para>If you want to make sure you pregenerate the glyphs for a specific string from your user interface, you can use the <db:emphasis role="bold">Select</db:emphasis> &gt; <db:emphasis role="bold">Select</db:emphasis> string function.</db:para>
<db:note>
<db:para>Both of the two latter selection methods base the results on the CMAP table in the font and will not do any shaping.</db:para>
</db:note>
</db:section>
<db:section xml:id="using-the-file">
<db:title>Using the File</db:title>
<db:para>Once you have prepared a file, the next step is to load it in your application. The saved file is a copy of the original font file, and can thus be used in the same ways as any other font file. In addition, it has a special font table which is recognized by Qt and used to prepopulate the glyph cache when the font is used in Qt Quick.</db:para>
<db:para>You can, for instance, load the font using a <db:code>FontLoader</db:code> in your application code. When it is used to display text in a <db:code>Text</db:code> element with <db:code>renderType</db:code> set to <db:code>Text.QtRendering</db:code> (the default), then the pregenerated cache will be loaded and used.</db:para>
</db:section>
<db:section xml:id="measuring-performance">
<db:title>Measuring performance</db:title>
<db:para>For analyzing the impact of distance field generation on your application, you can set the <db:code>QT_LOGGING_RULES</db:code> environment variable to <db:code>&quot;qt.scenegraph.time.glyph=true&quot;</db:code>.</db:para>
<db:para>When using normal fonts with no built-in cache, you will give output similar to this:</db:para>
<db:programlisting language="cpp">qt.scenegraph.time.glyph: distancefield: 50 glyphs prepared in 16ms, rendering=15, upload=1
</db:programlisting>
<db:para>If you have pregenerated all the glyphs in use, the output will instead read something like this:</db:para>
<db:programlisting language="cpp">qt.scenegraph.time.glyph: distancefield: 50 pre-generated glyphs loaded in 2ms
</db:programlisting>
<db:para>In this case, the time used to prepare the distance fields used to render in the application has been reduced from one full frame (16 ms) to 2 ms. You can also use the output to verify that all the glyphs in use are being loaded from the cache and to identify problematic phases in your application's life cycle, performance-wise.</db:para>
</db:section>
</db:article>
