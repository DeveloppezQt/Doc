<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qml Weather</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a basic demonstration showing how to use the different chart types by using qml.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.0
import QtCharts 2.0

Rectangle {
    width: 500
    height: 400
    gradient: Gradient {
        GradientStop { position: 0.0; color: &quot;lightblue&quot; }
        GradientStop { position: 1.0; color: &quot;white&quot; }
    }

    ChartView {
        id: chartView
        title: &quot;Weather forecast&quot;
        height: parent.height / 4 * 3
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.right: parent.right
        legend.alignment: Qt.AlignTop
        antialiasing: true

        BarCategoryAxis {
            id: barCategoriesAxis
            titleText: &quot;Date&quot;
        }

        ValueAxis{
            id: valueAxisY2
            min: 0
            max: 10
            titleText: &quot;Rainfall [mm]&quot;
        }

        ValueAxis {
            id: valueAxisX
            // Hide the value axis; it is only used to map the line series to bar categories axis
            visible: false
            min: 0
            max: 5
        }

        ValueAxis{
            id: valueAxisY
            min: 0
            max: 15
            titleText: &quot;Temperature [&amp;amp;deg;C]&quot;
        }

        LineSeries {
            id: maxTempSeries
            axisX: valueAxisX
            axisY: valueAxisY
            name: &quot;Max. temperature&quot;
        }

        LineSeries {
            id: minTempSeries
            axisX: valueAxisX
            axisY: valueAxisY
            name: &quot;Min. temperature&quot;
        }

        BarSeries {
            id: myBarSeries
            axisX: barCategoriesAxis
            axisYRight: valueAxisY2
            BarSet {
                id: rainfallSet
                label: &quot;Rainfall&quot;
            }
        }
    }

    // A timer to refresh the forecast every 5 minutes
    Timer {
        interval: 300000
        repeat: true
        triggeredOnStart: true
        running: true
        onTriggered: {
            if (weatherAppKey != &quot;&quot;) {
                // Make HTTP GET request and parse the result
                var xhr = new XMLHttpRequest;
                xhr.open(&quot;GET&quot;,
                         &quot;http://free.worldweatheronline.com/feed/weather.ashx?q=Jyv%c3%a4skyl%c3%a4,Finland&amp;amp;format=json&amp;amp;num_of_days=5&amp;amp;key=&quot;
                         + weatherAppKey);
                xhr.onreadystatechange = function() {
                    if (xhr.readyState == XMLHttpRequest.DONE) {
                        var a = JSON.parse(xhr.responseText);
                        parseWeatherData(a);
                    }
                }
                xhr.send();
            } else {
                // No app key for worldweatheronline.com given by the user -&amp;gt; use dummy static data
                var responseText = &quot;{ \&quot;data\&quot;: { \&quot;current_condition\&quot;: [ {\&quot;cloudcover\&quot;: \&quot;10\&quot;, \&quot;humidity\&quot;: \&quot;61\&quot;, \&quot;observation_time\&quot;: \&quot;06:26 AM\&quot;, \&quot;precipMM\&quot;: \&quot;0.0\&quot;, \&quot;pressure\&quot;: \&quot;1022\&quot;, \&quot;temp_C\&quot;: \&quot;6\&quot;, \&quot;temp_F\&quot;: \&quot;43\&quot;, \&quot;visibility\&quot;: \&quot;10\&quot;, \&quot;weatherCode\&quot;: \&quot;113\&quot;,  \&quot;weatherDesc\&quot;: [ {\&quot;value\&quot;: \&quot;Sunny\&quot; } ],  \&quot;weatherIconUrl\&quot;: [ {\&quot;value\&quot;: \&quot;http:\/\/www.worldweatheronline.com\/images\/wsymbols01_png_64\/wsymbol_0001_sunny.png\&quot; } ], \&quot;winddir16Point\&quot;: \&quot;SE\&quot;, \&quot;winddirDegree\&quot;: \&quot;140\&quot;, \&quot;windspeedKmph\&quot;: \&quot;7\&quot;, \&quot;windspeedMiles\&quot;: \&quot;4\&quot; } ],  \&quot;request\&quot;: [ {\&quot;query\&quot;: \&quot;Jyvaskyla, Finland\&quot;, \&quot;type\&quot;: \&quot;City\&quot; } ],  \&quot;weather\&quot;: [ {\&quot;date\&quot;: \&quot;2012-05-09\&quot;, \&quot;precipMM\&quot;: \&quot;0.4\&quot;, \&quot;tempMaxC\&quot;: \&quot;14\&quot;, \&quot;tempMaxF\&quot;: \&quot;57\&quot;, \&quot;tempMinC\&quot;: \&quot;7\&quot;, \&quot;tempMinF\&quot;: \&quot;45\&quot;, \&quot;weatherCode\&quot;: \&quot;116\&quot;,  \&quot;weatherDesc\&quot;: [ {\&quot;value\&quot;: \&quot;Partly Cloudy\&quot; } ],  \&quot;weatherIconUrl\&quot;: [ {\&quot;value\&quot;: \&quot;http:\/\/www.worldweatheronline.com\/images\/wsymbols01_png_64\/wsymbol_0002_sunny_intervals.png\&quot; } ], \&quot;winddir16Point\&quot;: \&quot;S\&quot;, \&quot;winddirDegree\&quot;: \&quot;179\&quot;, \&quot;winddirection\&quot;: \&quot;S\&quot;, \&quot;windspeedKmph\&quot;: \&quot;20\&quot;, \&quot;windspeedMiles\&quot;: \&quot;12\&quot; }, {\&quot;date\&quot;: \&quot;2012-05-10\&quot;, \&quot;precipMM\&quot;: \&quot;2.4\&quot;, \&quot;tempMaxC\&quot;: \&quot;13\&quot;, \&quot;tempMaxF\&quot;: \&quot;55\&quot;, \&quot;tempMinC\&quot;: \&quot;8\&quot;, \&quot;tempMinF\&quot;: \&quot;46\&quot;, \&quot;weatherCode\&quot;: \&quot;266\&quot;,  \&quot;weatherDesc\&quot;: [ {\&quot;value\&quot;: \&quot;Light drizzle\&quot; } ],  \&quot;weatherIconUrl\&quot;: [ {\&quot;value\&quot;: \&quot;http:\/\/www.worldweatheronline.com\/images\/wsymbols01_png_64\/wsymbol_0017_cloudy_with_light_rain.png\&quot; } ], \&quot;winddir16Point\&quot;: \&quot;SW\&quot;, \&quot;winddirDegree\&quot;: \&quot;219\&quot;, \&quot;winddirection\&quot;: \&quot;SW\&quot;, \&quot;windspeedKmph\&quot;: \&quot;21\&quot;, \&quot;windspeedMiles\&quot;: \&quot;13\&quot; }, {\&quot;date\&quot;: \&quot;2012-05-11\&quot;, \&quot;precipMM\&quot;: \&quot;11.1\&quot;, \&quot;tempMaxC\&quot;: \&quot;15\&quot;, \&quot;tempMaxF\&quot;: \&quot;59\&quot;, \&quot;tempMinC\&quot;: \&quot;7\&quot;, \&quot;tempMinF\&quot;: \&quot;44\&quot;, \&quot;weatherCode\&quot;: \&quot;266\&quot;,  \&quot;weatherDesc\&quot;: [ {\&quot;value\&quot;: \&quot;Light drizzle\&quot; } ],  \&quot;weatherIconUrl\&quot;: [ {\&quot;value\&quot;: \&quot;http:\/\/www.worldweatheronline.com\/images\/wsymbols01_png_64\/wsymbol_0017_cloudy_with_light_rain.png\&quot; } ], \&quot;winddir16Point\&quot;: \&quot;SSW\&quot;, \&quot;winddirDegree\&quot;: \&quot;200\&quot;, \&quot;winddirection\&quot;: \&quot;SSW\&quot;, \&quot;windspeedKmph\&quot;: \&quot;20\&quot;, \&quot;windspeedMiles\&quot;: \&quot;12\&quot; }, {\&quot;date\&quot;: \&quot;2012-05-12\&quot;, \&quot;precipMM\&quot;: \&quot;2.8\&quot;, \&quot;tempMaxC\&quot;: \&quot;7\&quot;, \&quot;tempMaxF\&quot;: \&quot;44\&quot;, \&quot;tempMinC\&quot;: \&quot;2\&quot;, \&quot;tempMinF\&quot;: \&quot;35\&quot;, \&quot;weatherCode\&quot;: \&quot;317\&quot;,  \&quot;weatherDesc\&quot;: [ {\&quot;value\&quot;: \&quot;Light sleet\&quot; } ],  \&quot;weatherIconUrl\&quot;: [ {\&quot;value\&quot;: \&quot;http:\/\/www.worldweatheronline.com\/images\/wsymbols01_png_64\/wsymbol_0021_cloudy_with_sleet.png\&quot; } ], \&quot;winddir16Point\&quot;: \&quot;NW\&quot;, \&quot;winddirDegree\&quot;: \&quot;311\&quot;, \&quot;winddirection\&quot;: \&quot;NW\&quot;, \&quot;windspeedKmph\&quot;: \&quot;24\&quot;, \&quot;windspeedMiles\&quot;: \&quot;15\&quot; }, {\&quot;date\&quot;: \&quot;2012-05-13\&quot;, \&quot;precipMM\&quot;: \&quot;0.4\&quot;, \&quot;tempMaxC\&quot;: \&quot;6\&quot;, \&quot;tempMaxF\&quot;: \&quot;42\&quot;, \&quot;tempMinC\&quot;: \&quot;2\&quot;, \&quot;tempMinF\&quot;: \&quot;35\&quot;, \&quot;weatherCode\&quot;: \&quot;116\&quot;,  \&quot;weatherDesc\&quot;: [ {\&quot;value\&quot;: \&quot;Partly Cloudy\&quot; } ],  \&quot;weatherIconUrl\&quot;: [ {\&quot;value\&quot;: \&quot;http:\/\/www.worldweatheronline.com\/images\/wsymbols01_png_64\/wsymbol_0002_sunny_intervals.png\&quot; } ], \&quot;winddir16Point\&quot;: \&quot;WNW\&quot;, \&quot;winddirDegree\&quot;: \&quot;281\&quot;, \&quot;winddirection\&quot;: \&quot;WNW\&quot;, \&quot;windspeedKmph\&quot;: \&quot;21\&quot;, \&quot;windspeedMiles\&quot;: \&quot;13\&quot; } ] }}&quot;;
                var a = JSON.parse(responseText);
                parseWeatherData(a);
            }
        }
    }

    Row {
        id: weatherImageRow
        anchors.top: chartView.bottom
        anchors.topMargin: 5
        anchors.bottom: poweredByText.top
        anchors.bottomMargin: 5
        anchors.horizontalCenter: parent.horizontalCenter
        height: parent.height - chartView.height - anchors.topMargin

        ListModel {
            id: weatherImageModel
        }

        Repeater {
            id: repeater
            model: weatherImageModel
            delegate: Image {
                source: imageSource
                width: weatherImageRow.height
                height: width
                fillMode: Image.PreserveAspectCrop
            }
        }
    }

    Text {
        id: poweredByText
        anchors.bottom: parent.bottom
        anchors.bottomMargin: 5
        anchors.left: parent.left
        anchors.leftMargin: 25
        height: parent.height / 25
        text: &quot;Powered by World Weather Online&quot;
    }

    function parseWeatherData(weatherData) {
        // Clear previous values
        maxTempSeries.clear();
        minTempSeries.clear();
        weatherImageModel.clear();

        // Loop through the parsed JSON
        for (var i in weatherData.data.weather) {
            var weatherObj = weatherData.data.weather[i];

            // Store temperature values, rainfall and weather icon.
            // The temperature values begin from 0.5 instead of 0.0 to make the start from the
            // middle of the rainfall bars. This makes the temperature lines visually better
            // synchronized with the rainfall bars.
            maxTempSeries.append(Number(i) + 0.5, weatherObj.tempMaxC);
            minTempSeries.append(Number(i) + 0.5, weatherObj.tempMinC);
            rainfallSet.append(i, weatherObj.precipMM);
            weatherImageModel.append({&quot;imageSource&quot;:weatherObj.weatherIconUrl[0].value});

            // Update scale of the chart
            valueAxisY.max = Math.max(chartView.axisY().max,weatherObj.tempMaxC);
            valueAxisX.min = 0;
            valueAxisX.max = Number(i) + 1;

            // Set the x-axis labels to the dates of the forecast
            var xLabels = barCategoriesAxis.categories;
            xLabels[Number(i)] = weatherObj.date.substring(5, 10);
            barCategoriesAxis.categories = xLabels;
            barCategoriesAxis.visible = true;
            barCategoriesAxis.min = 0;
            barCategoriesAxis.max = xLabels.length - 1;
        }
    }

}

</db:programlisting>
</db:article>
