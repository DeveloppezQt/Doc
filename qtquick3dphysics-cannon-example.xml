<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Physics - Cannon Example</db:title>
<db:productname>QtQuick3DPhysics</db:productname>
<db:edition>Qt Quick 3D Physics | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Physics Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to spawn physical objects.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/cannon-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates how to create and delete physical objects on demand. The scene consists of a number of stacks of boxes. You can move around by using <db:code>WASD</db:code> and the mouse and shoot a ball by pressing <db:code>space</db:code>.</db:para>
<db:para>The scene is setup with the usual Qt Quick 3D objects like view, camera and light:</db:para>
<db:programlisting language="qml">PerspectiveCamera {
    id: camera
    position: Qt.vector3d(-4000, 5000, 10000)
    eulerRotation : Qt.vector3d(-20, -20, 0)
    clipFar: 500000
    clipNear: 100
}
DirectionalLight {
    eulerRotation: Qt.vector3d(-45, 45, 0)
    castsShadow: true
    brightness: 1
    shadowMapQuality: Light.ShadowMapQualityVeryHigh
    shadowFactor: 100
}
</db:programlisting>
<db:para>We also add a static floor:</db:para>
<db:programlisting language="qml">StaticRigidBody {
    eulerRotation: Qt.vector3d(-90, 0, 0)
    collisionShapes: PlaneShape {}
    Model {
        source: &quot;#Rectangle&quot;
        scale: Qt.vector3d(2000, 2000, 0)
        materials: PrincipledMaterial {
            baseColor: &quot;green&quot;
        }
        castsShadows: false
        receivesShadows: true
    }
}
</db:programlisting>
<db:para>We create a Node we use as the spawner of objects and put inside our view:</db:para>
<db:programlisting language="qml">Node {
    id: shapeSpawner
    property var instancesBoxes: []
    property var instancesSpheres: []
    property int stackCount: 0

    function createStack(stackZ) {
        var size = 10;
        var extents = 400;

        for (var i = 0; i &amp;lt; size; i++) {
            for (var j = 0; j &amp;lt; size-i; j++) {
                var component = Qt.createComponent(&quot;box.qml&quot;);
                let x = j*2 - size + i;
                let y = i*2 + 1;
                let z = -5*stackZ;
                let center = Qt.vector3d(x, y, z).times(0.5*extents);
                let box = component.createObject(shapeSpawner, {position: center, xyzExtents: extents});
                instancesBoxes.push(box);

                if (box === null) {
                    console.log(&quot;Error creating object&quot;);
                }
            }
        }
    }

    function createBall(position, forward) {
        var diameter = 600;
        var speed = 20000;
        var component = Qt.createComponent(&quot;sphere.qml&quot;);
        let sphere = component.createObject(shapeSpawner, {position: position, linearVelocity: forward.times(speed), sphereDiameter: diameter});
        instancesSpheres.push(sphere);

        if (sphere === null) {
            console.log(&quot;Error creating object&quot;);
        }
    }

    function reset() {
        instancesSpheres.forEach(sphere =&amp;gt; { sphere.destroy(); });
        instancesBoxes.forEach(boxes =&amp;gt; { boxes.destroy(); });
        instancesSpheres = [];
        instancesBoxes = [];

        for (var stackI = 0; stackI &amp;lt; stackSlider.value; stackI++) {
            shapeSpawner.createStack(stackI);
        }
    }
}
</db:programlisting>
<db:para>We have three methods: <db:code>createStack</db:code> for creating a stack, <db:code>createBall</db:code> for creating a ball with velocity and <db:code>reset</db:code> for resetting the scene. The actual box and sphere that is spawn is stored in their own qml files (<db:code>box.qml</db:code> and <db:code>sphere.qml</db:code>).</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="cannon/CMakeLists.txt">cannon/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="cannon/Crosshair.qml">cannon/Crosshair.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="cannon/box.qml">cannon/box.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="cannon/cannon.pro">cannon/cannon.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="cannon/main.cpp">cannon/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="cannon/main.qml">cannon/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="cannon/qml.qrc">cannon/qml.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="cannon/sphere.qml">cannon/sphere.qml</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
