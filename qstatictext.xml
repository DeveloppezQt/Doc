<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStaticText Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstatictext.xml">QStaticText</db:link> class enables optimized drawing of text when the text and its layout is updated rarely.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStaticText</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStaticText is part of <db:simplelist><db:member>multimedia</db:member><db:member>text</db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstatictext.xml">QStaticText</db:link> provides a way to cache layout data for a block of text so that it can be drawn more efficiently than by using <db:link xlink:href="qpainter.xml#drawText">QPainter::drawText</db:link>() in which the layout information is recalculated with every call.</db:para>
<db:para>The class primarily provides an optimization for cases where the text, its font and the transformations on the painter are static over several paint events. If the text or its layout is changed for every iteration, <db:link xlink:href="qpainter.xml#drawText">QPainter::drawText</db:link>() is the more efficient alternative, since the static text's layout would have to be recalculated to take the new state into consideration.</db:para>
<db:para>Translating the painter will not cause the layout of the text to be recalculated, but will cause a very small performance impact on drawStaticText(). Altering any other parts of the painter's transformation or the painter's font will cause the layout of the static text to be recalculated. This should be avoided as often as possible to maximize the performance benefit of using <db:link xlink:href="qstatictext.xml">QStaticText</db:link>.</db:para>
<db:para>In addition, only affine transformations are supported by drawStaticText(). Calling drawStaticText() on a projected painter will perform slightly worse than using the regular drawText() call, so this should be avoided.</db:para>
<db:programlisting language="cpp">class MyWidget: public QWidget
{
public:
    MyWidget(QWidget *parent = nullptr) : QWidget(parent), m_staticText(&quot;This is static text&quot;)

protected:
    void paintEvent(QPaintEvent *)
    {
        QPainter painter(this);
        painter.drawStaticText(0, 0, m_staticText);
    }

private:
    QStaticText m_staticText;
};
</db:programlisting>
<db:para>The <db:link xlink:href="qstatictext.xml">QStaticText</db:link> class can be used to mimic the behavior of <db:link xlink:href="qpainter.xml#drawText">QPainter::drawText</db:link>() to a specific point with no boundaries, and also when <db:link xlink:href="qpainter.xml#drawText">QPainter::drawText</db:link>() is called with a bounding rectangle.</db:para>
<db:para>If a bounding rectangle is not required, create a <db:link xlink:href="qstatictext.xml">QStaticText</db:link> object without setting a preferred text width. The text will then occupy a single line.</db:para>
<db:para>If you set a text width on the <db:link xlink:href="qstatictext.xml">QStaticText</db:link> object, this will bound the text. The text will be formatted so that no line exceeds the given width. The text width set for <db:link xlink:href="qstatictext.xml">QStaticText</db:link> will not automatically be used for clipping. To achieve clipping in addition to line breaks, use <db:link xlink:href="qpainter.xml#setClipRect">QPainter::setClipRect</db:link>(). The position of the text is decided by the argument passed to <db:link xlink:href="qpainter.xml#drawStaticText">QPainter::drawStaticText</db:link>() and can change from call to call with a minimal impact on performance.</db:para>
<db:para>For extra convenience, it is possible to apply formatting to the text using the HTML subset supported by <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>. <db:link xlink:href="qstatictext.xml">QStaticText</db:link> will attempt to guess the format of the input text using <db:link xlink:href="qt-sub-qtgui.xml#mightBeRichText">Qt::mightBeRichText</db:link>(), and interpret it as rich text if this function returns <db:code>true</db:code>. To force <db:link xlink:href="qstatictext.xml">QStaticText</db:link> to display its contents as either plain text or rich text, use the function <db:link xlink:href="qstatictext.xml#setTextFormat">QStaticText::setTextFormat</db:link>() and pass in, respectively, <db:link xlink:href="qt.xml#TextFormat-enum">Qt::PlainText</db:link> and <db:link xlink:href="qt.xml#TextFormat-enum">Qt::RichText</db:link>.</db:para>
<db:para><db:link xlink:href="qstatictext.xml">QStaticText</db:link> can only represent text, so only HTML tags which alter the layout or appearance of the text will be respected. Adding an image to the input HTML, for instance, will cause the image to be included as part of the layout, affecting the positions of the text glyphs, but it will not be displayed. The result will be an empty area the size of the image in the output. Similarly, using tables will cause the text to be laid out in table format, but the borders will not be drawn.</db:para>
<db:para>If it's the first time the static text is drawn, or if the static text, or the painter's font has been altered since the last time it was drawn, the text's layout has to be recalculated. On some paint engines, changing the matrix of the painter will also cause the layout to be recalculated. In particular, this will happen for any engine except for the OpenGL2 paint engine. Recalculating the layout will impose an overhead on the <db:link xlink:href="qpainter.xml#drawStaticText">QPainter::drawStaticText</db:link>() call where it occurs. To avoid this overhead in the paint event, you can call <db:link xlink:href="qstatictext.xml#prepare">prepare</db:link>() ahead of time to ensure that the layout is calculated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawText">QPainter::drawText</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawStaticText">QPainter::drawStaticText</db:link>()</db:member>
<db:member><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link></db:member>
<db:member><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PerformanceHint-enum">
<db:title>enum QStaticText::PerformanceHint</db:title>
<db:para>This enum the different performance hints that can be set on the <db:link xlink:href="qstatictext.xml">QStaticText</db:link>. These hints can be used to indicate that the <db:link xlink:href="qstatictext.xml">QStaticText</db:link> should use additional caches, if possible, to improve performance at the expense of memory. In particular, setting the performance hint AggressiveCaching on the <db:link xlink:href="qstatictext.xml">QStaticText</db:link> will improve performance when using the OpenGL graphics system or when drawing to a QOpenGLWidget.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstatictext.xml">QStaticText</db:link></db:emphasis>::ModerateCaching</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Do basic caching for high performance at a low memory cost.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstatictext.xml">QStaticText</db:link></db:emphasis>::AggressiveCaching</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Use additional caching when available. This may improve performance at a higher memory cost.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStaticText">
<db:title>QStaticText::QStaticText()</db:title>
<db:para>Constructs an empty <db:link xlink:href="qstatictext.xml">QStaticText</db:link></db:para>
</db:section>
<db:section xml:id="QStaticText-2">
<db:title>[explicit] QStaticText::QStaticText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qstatictext.xml">QStaticText</db:link> object with the given <db:code role="parameter">text</db:code>.</db:para>
</db:section>
<db:section xml:id="QStaticText-1">
<db:title>QStaticText::QStaticText(const QStaticText &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qstatictext.xml">QStaticText</db:link> object which is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QStaticText">
<db:title>[noexcept] QStaticText::~QStaticText()</db:title>
<db:para>Destroys the <db:link xlink:href="qstatictext.xml">QStaticText</db:link>.</db:para>
</db:section>
<db:section xml:id="performanceHint">
<db:title>QStaticText::PerformanceHint QStaticText::performanceHint() const</db:title>
<db:para>Returns which performance hint is set for the <db:link xlink:href="qstatictext.xml">QStaticText</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatictext.xml#setPerformanceHint">setPerformanceHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prepare">
<db:title>void QStaticText::prepare(const QTransform &amp;<db:emphasis>matrix</db:emphasis> = QTransform(), const QFont &amp;<db:emphasis>font</db:emphasis> = QFont())</db:title>
<db:para>Prepares the <db:link xlink:href="qstatictext.xml">QStaticText</db:link> object for being painted with the given <db:code role="parameter">matrix</db:code> and the given <db:code role="parameter">font</db:code> to avoid overhead when the actual drawStaticText() call is made.</db:para>
<db:para>When drawStaticText() is called, the layout of the <db:link xlink:href="qstatictext.xml">QStaticText</db:link> will be recalculated if any part of the <db:link xlink:href="qstatictext.xml">QStaticText</db:link> object has changed since the last time it was drawn. It will also be recalculated if the painter's font is not the same as when the <db:link xlink:href="qstatictext.xml">QStaticText</db:link> was last drawn, or, on any other paint engine than the OpenGL2 engine, if the painter's matrix has been altered since the static text was last drawn.</db:para>
<db:para>To avoid the overhead of creating the layout the first time you draw the <db:link xlink:href="qstatictext.xml">QStaticText</db:link> after making changes, you can use the prepare() function and pass in the <db:code role="parameter">matrix</db:code> and <db:code role="parameter">font</db:code> you expect to use when drawing the text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setFont">QPainter::setFont</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setWorldTransform">QPainter::setWorldTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPerformanceHint">
<db:title>void QStaticText::setPerformanceHint(QStaticText::PerformanceHint <db:emphasis>performanceHint</db:emphasis>)</db:title>
<db:para>Sets the performance hint of the <db:link xlink:href="qstatictext.xml">QStaticText</db:link> according to the <db:code role="parameter">performanceHint</db:code> provided. The <db:code role="parameter">performanceHint</db:code> is used to customize how much caching is done internally to improve performance.</db:para>
<db:para>The default is <db:link xlink:href="qstatictext.xml#PerformanceHint-enum">QStaticText::ModerateCaching</db:link>.</db:para>
<db:note>
<db:para>This function will cause the layout of the text to require recalculation.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatictext.xml#performanceHint">performanceHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setText">
<db:title>void QStaticText::setText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the text of the <db:link xlink:href="qstatictext.xml">QStaticText</db:link> to <db:code role="parameter">text</db:code>.</db:para>
<db:note>
<db:para>This function will cause the layout of the text to require recalculation.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatictext.xml#text">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextFormat">
<db:title>void QStaticText::setTextFormat(Qt::TextFormat <db:emphasis>textFormat</db:emphasis>)</db:title>
<db:para>Sets the text format of the <db:link xlink:href="qstatictext.xml">QStaticText</db:link> to <db:code role="parameter">textFormat</db:code>. If <db:code role="parameter">textFormat</db:code> is set to <db:link xlink:href="qt.xml#TextFormat-enum">Qt::AutoText</db:link> (the default), the format of the text will try to be determined using the function <db:link xlink:href="qt-sub-qtgui.xml#mightBeRichText">Qt::mightBeRichText</db:link>(). If the text format is <db:link xlink:href="qt.xml#TextFormat-enum">Qt::PlainText</db:link>, then the text will be displayed as is, whereas it will be interpreted as HTML if the format is <db:link xlink:href="qt.xml#TextFormat-enum">Qt::RichText</db:link>. HTML tags that alter the font of the text, its color, or its layout are supported by <db:link xlink:href="qstatictext.xml">QStaticText</db:link>.</db:para>
<db:note>
<db:para>This function will cause the layout of the text to require recalculation.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatictext.xml#textFormat">textFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qstatictext.xml#setText">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qstatictext.xml#text">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextOption">
<db:title>void QStaticText::setTextOption(const QTextOption &amp;<db:emphasis>textOption</db:emphasis>)</db:title>
<db:para>Sets the text option structure that controls the layout process to the given <db:code role="parameter">textOption</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatictext.xml#textOption">textOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextWidth">
<db:title>void QStaticText::setTextWidth(qreal <db:emphasis>textWidth</db:emphasis>)</db:title>
<db:para>Sets the preferred width for this <db:link xlink:href="qstatictext.xml">QStaticText</db:link>. If the text is wider than the specified width, it will be broken into multiple lines and grow vertically. If the text cannot be split into multiple lines, it will be larger than the specified <db:code role="parameter">textWidth</db:code>.</db:para>
<db:para>Setting the preferred text width to a negative number will cause the text to be unbounded.</db:para>
<db:para>Use <db:link xlink:href="qstatictext.xml#size">size</db:link>() to get the actual size of the text.</db:para>
<db:note>
<db:para>This function will cause the layout of the text to require recalculation.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatictext.xml#textWidth">textWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qstatictext.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>QSizeF QStaticText::size() const</db:title>
<db:para>Returns the size of the bounding rect for this <db:link xlink:href="qstatictext.xml">QStaticText</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatictext.xml#textWidth">textWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QStaticText::swap(QStaticText &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this static text instance with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="text">
<db:title>QString QStaticText::text() const</db:title>
<db:para>Returns the text of the <db:link xlink:href="qstatictext.xml">QStaticText</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatictext.xml#setText">setText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textFormat">
<db:title>Qt::TextFormat QStaticText::textFormat() const</db:title>
<db:para>Returns the text format of the <db:link xlink:href="qstatictext.xml">QStaticText</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatictext.xml#setTextFormat">setTextFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qstatictext.xml#setText">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qstatictext.xml#text">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textOption">
<db:title>QTextOption QStaticText::textOption() const</db:title>
<db:para>Returns the current text option used to control the layout process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatictext.xml#setTextOption">setTextOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textWidth">
<db:title>qreal QStaticText::textWidth() const</db:title>
<db:para>Returns the preferred width for this <db:link xlink:href="qstatictext.xml">QStaticText</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatictext.xml#setTextWidth">setTextWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QStaticText::operator!=(const QStaticText &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Compares <db:code role="parameter">other</db:code> to this <db:link xlink:href="qstatictext.xml">QStaticText</db:link>. Returns <db:code>true</db:code> if the texts, fonts or maximum sizes are different.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QStaticText &amp;QStaticText::operator=(const QStaticText &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qstatictext.xml">QStaticText</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QStaticText::operator==(const QStaticText &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Compares <db:code role="parameter">other</db:code> to this <db:link xlink:href="qstatictext.xml">QStaticText</db:link>. Returns <db:code>true</db:code> if the texts, fonts and text widths are equal.</db:para>
</db:section>
</db:section>
</db:article>
