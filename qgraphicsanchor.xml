<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsAnchor Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicsanchor.xml">QGraphicsAnchor</db:link> class represents an anchor between two items in a <db:link xlink:href="qgraphicsanchorlayout.xml">QGraphicsAnchorLayout</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsAnchor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsAnchor is part of <db:simplelist><db:member>appearance</db:member><db:member>geomanagement</db:member><db:member>graphicsview-api</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The graphics anchor provides an API that enables you to query and manipulate the properties an anchor has. When an anchor is added to the layout with <db:link xlink:href="qgraphicsanchorlayout.xml#addAnchor">QGraphicsAnchorLayout::addAnchor</db:link>(), a <db:link xlink:href="qgraphicsanchor.xml">QGraphicsAnchor</db:link> instance is returned where the properties are initialized to their default values. The properties can then be further changed, and they will be picked up the next time the layout is activated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#anchor">QGraphicsAnchorLayout::anchor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="sizePolicy-prop">
<db:title>sizePolicy : QSizePolicy::Policy</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSizePolicy::Policy</db:type>
<db:varname>sizePolicy</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sizePolicy</db:synopsisinfo>
<db:synopsisinfo role="setter">setSizePolicy</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the size policy for the <db:link xlink:href="qgraphicsanchor.xml">QGraphicsAnchor</db:link>.</db:para>
<db:para>By setting the size policy on an anchor you can configure how the anchor can resize itself from its preferred spacing. For instance, if the anchor has the size policy <db:link xlink:href="qsizepolicy.xml#Policy-enum">QSizePolicy::Minimum</db:link>, the spacing is the minimum size of the anchor. However, its size can grow up to the anchors maximum size. If the default size policy is <db:link xlink:href="qsizepolicy.xml#Policy-enum">QSizePolicy::Fixed</db:link>, the anchor can neither grow or shrink, which means that the only size the anchor can have is the spacing. <db:link xlink:href="qsizepolicy.xml#Policy-enum">QSizePolicy::Fixed</db:link> is the default size policy. <db:link xlink:href="qgraphicsanchor.xml">QGraphicsAnchor</db:link> always has a minimum spacing of 0 and a very large maximum spacing.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsizepolicy.xml#Policy-enum">QSizePolicy::Policy</db:link></db:type> <db:emphasis role="bold">sizePolicy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSizePolicy</db:emphasis>(<db:type><db:link xlink:href="qsizepolicy.xml#Policy-enum">QSizePolicy::Policy</db:link></db:type> <db:emphasis>policy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsanchor.xml#spacing-prop">QGraphicsAnchor::spacing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="spacing-prop">
<db:title>spacing : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>spacing</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">spacing</db:synopsisinfo>
<db:synopsisinfo role="setter">setSpacing</db:synopsisinfo>
<db:synopsisinfo role="resetter">unsetSpacing</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the preferred space between items in the <db:link xlink:href="qgraphicsanchorlayout.xml">QGraphicsAnchorLayout</db:link>.</db:para>
<db:para>Depending on the anchor type, the default spacing is either 0 or a value returned from the style.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">spacing</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSpacing</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>spacing</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">unsetSpacing</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#addAnchor">QGraphicsAnchorLayout::addAnchor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QGraphicsAnchor">
<db:title>[virtual] QGraphicsAnchor::~QGraphicsAnchor()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGraphicsAnchor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGraphicsAnchor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Removes the <db:link xlink:href="qgraphicsanchor.xml">QGraphicsAnchor</db:link> object from the layout and destroys it.</db:para>
</db:section>
</db:section>
</db:article>
