<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Menus Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The Menus example demonstrates the use of <db:link xlink:href="qmenubar.xml">QMenuBar</db:link> and <db:link xlink:href="qstatusbar.xml">QStatusBar</db:link> in a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> to implement an in-place active control.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;menus.h&quot;
#include &amp;lt;QAction&amp;gt;
#include &amp;lt;QAxFactory&amp;gt;
#include &amp;lt;QMenuBar&amp;gt;
#include &amp;lt;QMessageBox&amp;gt;
#include &amp;lt;QTextEdit&amp;gt;
#include &amp;lt;QPixmap&amp;gt;

#include &quot;fileopen.xpm&quot;
#include &quot;filesave.xpm&quot;

QMenus::QMenus(QWidget *parent)
    : QMainWindow(parent, 0) // QMainWindow's default flag is WType_TopLevel
{
    QAction *action;

    QMenu *file = new QMenu(this);

    action = new QAction(QPixmap((const char**)fileopen), tr(&quot;&amp;amp;Open&quot;), this);
    action-&amp;gt;setShortcut(tr(&quot;CTRL+O&quot;));
    connect(action, &amp;amp;QAction::triggered, this, &amp;amp;QMenus::fileOpen);
    file-&amp;gt;addAction(action);

    action = new QAction(QPixmap((const char**)filesave), tr(&quot;&amp;amp;Save&quot;), this);
    action-&amp;gt;setShortcut(tr(&quot;CTRL+S&quot;));
    connect(action, &amp;amp;QAction::triggered, this, &amp;amp;QMenus::fileSave);
    file-&amp;gt;addAction(action);

    QMenu *edit = new QMenu(this);

    action = new QAction(tr(&quot;&amp;amp;Normal&quot;), this);
    action-&amp;gt;setShortcut(tr(&quot;CTRL+N&quot;));
    action-&amp;gt;setToolTip(tr(&quot;Normal&quot;));
    action-&amp;gt;setStatusTip(tr(&quot;Toggles Normal&quot;));
    action-&amp;gt;setCheckable(true);
    connect(action, &amp;amp;QAction::triggered, this, &amp;amp;QMenus::editNormal);
    edit-&amp;gt;addAction(action);

    action = new QAction(tr(&quot;&amp;amp;Bold&quot;), this);
    action-&amp;gt;setShortcut(tr(&quot;CTRL+B&quot;));
    action-&amp;gt;setCheckable(true);
    connect(action, &amp;amp;QAction::triggered, this, &amp;amp;QMenus::editBold);
    edit-&amp;gt;addAction(action);

    action = new QAction(tr(&quot;&amp;amp;Underline&quot;), this);
    action-&amp;gt;setShortcut(tr(&quot;CTRL+U&quot;));
    action-&amp;gt;setCheckable(true);
    connect(action, &amp;amp;QAction::triggered, this, &amp;amp;QMenus::editUnderline);
    edit-&amp;gt;addAction(action);

    QMenu *advanced = new QMenu(this);
    action = new QAction(tr(&quot;&amp;amp;Font...&quot;), this);
    connect(action, &amp;amp;QAction::triggered, this, &amp;amp;QMenus::editAdvancedFont);
    advanced-&amp;gt;addAction(action);

    action = new QAction(tr(&quot;&amp;amp;Style...&quot;), this);
    connect(action, &amp;amp;QAction::triggered, this, &amp;amp;QMenus::editAdvancedStyle);
    advanced-&amp;gt;addAction(action);

    edit-&amp;gt;addMenu(advanced)-&amp;gt;setText(tr(&quot;&amp;amp;Advanced&quot;));

    edit-&amp;gt;addSeparator();

    action = new QAction(tr(&quot;Una&amp;amp;vailable&quot;), this);
    action-&amp;gt;setShortcut(tr(&quot;CTRL+V&quot;));
    action-&amp;gt;setCheckable(true);
    action-&amp;gt;setEnabled(false);
    connect(action, &amp;amp;QAction::triggered, this, &amp;amp;QMenus::editUnderline);
    edit-&amp;gt;addAction(action);

    QMenu *help = new QMenu(this);

    action = new QAction(tr(&quot;&amp;amp;About...&quot;), this);
    action-&amp;gt;setShortcut(tr(&quot;F1&quot;));
    connect(action, &amp;amp;QAction::triggered, this, &amp;amp;QMenus::helpAbout);
    help-&amp;gt;addAction(action);

    action = new QAction(tr(&quot;&amp;amp;About Qt...&quot;), this);
    connect(action, &amp;amp;QAction::triggered, this, &amp;amp;QMenus::helpAboutQt);
    help-&amp;gt;addAction(action);

    if (!QAxFactory::isServer())
        menuBar()-&amp;gt;addMenu(file)-&amp;gt;setText(tr(&quot;&amp;amp;File&quot;));
    menuBar()-&amp;gt;addMenu(edit)-&amp;gt;setText(tr(&quot;&amp;amp;Edit&quot;));
    menuBar()-&amp;gt;addMenu(help)-&amp;gt;setText(tr(&quot;&amp;amp;Help&quot;));

    m_editor = new QTextEdit(this);
    setCentralWidget(m_editor);

    statusBar();
}

void QMenus::fileOpen()
{
    m_editor-&amp;gt;append(tr(&quot;File Open selected.&quot;));
}

void QMenus::fileSave()
{
    m_editor-&amp;gt;append(tr(&quot;File Save selected.&quot;));
}

void QMenus::editNormal()
{
    m_editor-&amp;gt;append(tr(&quot;Edit Normal selected.&quot;));
}

void QMenus::editBold()
{
    m_editor-&amp;gt;append(tr(&quot;Edit Bold selected.&quot;));
}

void QMenus::editUnderline()
{
    m_editor-&amp;gt;append(tr(&quot;Edit Underline selected.&quot;));
}

void QMenus::editAdvancedFont()
{
    m_editor-&amp;gt;append(tr(&quot;Edit Advanced Font selected.&quot;));
}

void QMenus::editAdvancedStyle()
{
    m_editor-&amp;gt;append(tr(&quot;Edit Advanced Style selected.&quot;));
}

void QMenus::helpAbout()
{
    QMessageBox::about(this, tr(&quot;About QMenus&quot;),
                       tr(&quot;This example implements an in-place ActiveX control with menus and status messages.&quot;));
}

void QMenus::helpAboutQt()
{
    QMessageBox::aboutQt(this);
}

</db:programlisting>
</db:article>
