<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Menus Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The Menus example demonstrates the use of QMenuBar and QStatusBar in a QMainWindow to implement an in-place active control.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;menus.h&quot;
#include &lt;QAction&gt;
#include &lt;QAxFactory&gt;
#include &lt;QMenuBar&gt;
#include &lt;QMessageBox&gt;
#include &lt;QTextEdit&gt;
#include &lt;QPixmap&gt;

#include &quot;fileopen.xpm&quot;
#include &quot;filesave.xpm&quot;

QMenus::QMenus(QWidget *parent)
    : QMainWindow(parent, 0) // QMainWindow's default flag is WType_TopLevel
{
    QAction *action;

    QMenu *file = new QMenu(this);

    action = new QAction(QPixmap((const char**)fileopen), &quot;&amp;Open&quot;, this);
    action-&gt;setShortcut(tr(&quot;CTRL+O&quot;));
    connect(action, SIGNAL(triggered()), this, SLOT(fileOpen()));
    file-&gt;addAction(action);

    action = new QAction(QPixmap((const char**)filesave),&quot;&amp;Save&quot;, this);
    action-&gt;setShortcut(tr(&quot;CTRL+S&quot;));
    connect(action, SIGNAL(triggered()), this, SLOT(fileSave()));
    file-&gt;addAction(action);

    QMenu *edit = new QMenu(this);

    action = new QAction(&quot;&amp;Normal&quot;, this);
    action-&gt;setShortcut(tr(&quot;CTRL+N&quot;));
    action-&gt;setToolTip(&quot;Normal&quot;);
    action-&gt;setStatusTip(&quot;Toggles Normal&quot;);
    action-&gt;setCheckable(true);
    connect(action, SIGNAL(triggered()), this, SLOT(editNormal()));
    edit-&gt;addAction(action);

    action = new QAction(&quot;&amp;Bold&quot;, this);
    action-&gt;setShortcut(tr(&quot;CTRL+B&quot;));
    action-&gt;setCheckable(true);
    connect(action, SIGNAL(triggered()), this, SLOT(editBold()));
    edit-&gt;addAction(action);

    action = new QAction(&quot;&amp;Underline&quot;, this);
    action-&gt;setShortcut(tr(&quot;CTRL+U&quot;));
    action-&gt;setCheckable(true);
    connect(action, SIGNAL(triggered()), this, SLOT(editUnderline()));
    edit-&gt;addAction(action);

    QMenu *advanced = new QMenu(this);
    action = new QAction(&quot;&amp;Font...&quot;, this);
    connect(action, SIGNAL(triggered()), this, SLOT(editAdvancedFont()));
    advanced-&gt;addAction(action);

    action = new QAction(&quot;&amp;Style...&quot;, this);
    connect(action, SIGNAL(triggered()), this, SLOT(editAdvancedStyle()));
    advanced-&gt;addAction(action);

    edit-&gt;addMenu(advanced)-&gt;setText(&quot;&amp;Advanced&quot;);

    edit-&gt;addSeparator();

    action = new QAction(&quot;Una&amp;vailable&quot;, this);
    action-&gt;setShortcut(tr(&quot;CTRL+V&quot;));
    action-&gt;setCheckable(true);
    action-&gt;setEnabled(false);
    connect(action, SIGNAL(triggered()), this, SLOT(editUnderline()));
    edit-&gt;addAction(action);

    QMenu *help = new QMenu(this);

    action = new QAction(&quot;&amp;About...&quot;, this);
    action-&gt;setShortcut(tr(&quot;F1&quot;));
    connect(action, SIGNAL(triggered()), this, SLOT(helpAbout()));
    help-&gt;addAction(action);

    action = new QAction(&quot;&amp;About Qt...&quot;, this);
    connect(action, SIGNAL(triggered()), this, SLOT(helpAboutQt()));
    help-&gt;addAction(action);

    if (!QAxFactory::isServer())
        menuBar()-&gt;addMenu(file)-&gt;setText(&quot;&amp;File&quot;);
    menuBar()-&gt;addMenu(edit)-&gt;setText(&quot;&amp;Edit&quot;);
    menuBar()-&gt;addMenu(help)-&gt;setText(&quot;&amp;Help&quot;);

    editor = new QTextEdit(this);
    setCentralWidget(editor);

    statusBar();
}

void QMenus::fileOpen()
{
    editor-&gt;append(&quot;File Open selected.&quot;);
}

void QMenus::fileSave()
{
    editor-&gt;append(&quot;File Save selected.&quot;);
}

void QMenus::editNormal()
{
    editor-&gt;append(&quot;Edit Normal selected.&quot;);
}

void QMenus::editBold()
{
    editor-&gt;append(&quot;Edit Bold selected.&quot;);
}

void QMenus::editUnderline()
{
    editor-&gt;append(&quot;Edit Underline selected.&quot;);
}

void QMenus::editAdvancedFont()
{
    editor-&gt;append(&quot;Edit Advanced Font selected.&quot;);
}

void QMenus::editAdvancedStyle()
{
    editor-&gt;append(&quot;Edit Advanced Style selected.&quot;);
}

void QMenus::helpAbout()
{
    QMessageBox::about(this, &quot;About QMenus&quot;,
                        &quot;This example implements an in-place ActiveX control with menus and status messages.&quot;);
}

void QMenus::helpAboutQt()
{
    QMessageBox::aboutQt(this);
}

</db:programlisting>
</db:article>
