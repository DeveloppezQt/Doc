<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>vector3d QML Value Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>a value with x, y, and z attributes.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:code>vector3d</db:code> type refers to a value with <db:code>x</db:code>, <db:code>y</db:code>, and <db:code>z</db:code> attributes.</db:para>
<db:para>Properties of type <db:code>vector3d</db:code> have a zero vector by default. This has <db:code>x</db:code>, <db:code>y</db:code> and <db:code>z</db:code> set to <db:code>0</db:code>.</db:para>
<db:para>To create a <db:code>vector3d</db:code> value, specify it as a &quot;x,y,z&quot; string:</db:para>
<db:programlisting language="qml">Rotation { angle: 60; axis: &quot;0,1,0&quot; }
</db:programlisting>
<db:para>or with the <db:link xlink:href="qml-qtqml-qt.xml#vector3d-method">Qt.vector3d</db:link>() function:</db:para>
<db:programlisting language="qml">Rotation { angle: 60; axis: Qt.vector3d(0, 1, 0) }
</db:programlisting>
<db:para>or as separate <db:code>x</db:code>, <db:code>y</db:code>, and <db:code>z</db:code> components:</db:para>
<db:programlisting language="qml">Rotation { angle: 60; axis.x: 0; axis.y: 1; axis.z: 0 }
</db:programlisting>
<db:para>Each attribute of a vector3d value is stored internally as a single-precision floating point number (<db:code>float</db:code>).</db:para>
<db:para>When integrating with C++, note that any <db:link xlink:href="qvector3d.xml">QVector3D</db:link> value <db:link xlink:href="qtqml-cppintegration-data.xml">passed into QML from C++</db:link> is automatically converted into a <db:code>vector3d</db:code> value, and vice-versa.</db:para>
<db:para>The vector3d type has the following idempotent functions which can be invoked in QML:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Function Signature</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
<db:th>
<db:para>Example</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>vector3d crossProduct(vector3d other)</db:para>
</db:td>
<db:td>
<db:para>Returns the vector3d result of the cross product of <db:code>this</db:code> vector3d with the <db:code>other</db:code> vector3d</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.vector3d(1,2,3);
var b = Qt.vector3d(4,5,6);
var c = a.crossProduct(b);
console.log(c.toString()); // QVector3D(-3, 6, -3)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>real dotProduct(vector3d other)</db:para>
</db:td>
<db:td>
<db:para>Returns the scalar real result of the dot product of <db:code>this</db:code> vector3d with the <db:code>other</db:code> vector3d</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.vector3d(1,2,3);
var b = Qt.vector3d(4,5,6);
var c = a.dotProduct(b);
console.log(c); // 32
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector3d times(matrix4x4 matrix)</db:para>
</db:td>
<db:td>
<db:para>Returns the vector3d result of transforming <db:code>this</db:code> vector3d with the 4x4 <db:code>matrix</db:code> with the matrix applied post-vector</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.vector3d(1,2,3);
var b = Qt.matrix4x4(4,5,6,7,8,9,10,11,
                     12,13,14,15,16,17,18,19);
var c = a.times(b);
console.log(c.toString());
// QVector3D(0.774194, 0.849462, 0.924731)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector3d times(vector3d other)</db:para>
</db:td>
<db:td>
<db:para>Returns the vector3d result of multiplying <db:code>this</db:code> vector3d with the <db:code>other</db:code> vector3d</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.vector3d(1,2,3);
var b = Qt.vector3d(4,5,6);
var c = a.times(b);
console.log(c.toString()); // QVector3D(4, 10, 18)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector3d times(real factor)</db:para>
</db:td>
<db:td>
<db:para>Returns the vector3d result of multiplying <db:code>this</db:code> vector3d with the scalar <db:code>factor</db:code></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.vector3d(1,2,3);
var b = 4.48;
var c = a.times(b);
console.log(c.toString()); // QVector3D(4.48, 8.96, 13.44)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector3d plus(vector3d other)</db:para>
</db:td>
<db:td>
<db:para>Returns the vector3d result of the addition of <db:code>this</db:code> vector3d with the <db:code>other</db:code> vector3d</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.vector3d(1,2,3);
var b = Qt.vector3d(4,5,6);
var c = a.plus(b);
console.log(c.toString()); // QVector3D(5, 7, 9)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector3d minus(vector3d other)</db:para>
</db:td>
<db:td>
<db:para>Returns the vector3d result of the subtraction of <db:code>other</db:code> vector3d from <db:code>this</db:code> vector3d</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.vector3d(1,2,3);
var b = Qt.vector3d(4,5,6);
var c = a.minus(b);
console.log(c.toString()); // QVector3D(-3, -3, -3)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector3d normalized()</db:para>
</db:td>
<db:td>
<db:para>Returns the normalized form of <db:code>this</db:code> vector</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.vector3d(1,2,3);
var b = a.normalized();
console.log(b.toString());
// QVector3D(0.267261, 0.534522, 0.801784)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>real length()</db:para>
</db:td>
<db:td>
<db:para>Returns the scalar real value of the length of <db:code>this</db:code> vector3d</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.vector3d(1,2,3);
var b = a.length();
console.log(b.toString()); // 3.7416573867739413
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector2d toVector2d()</db:para>
</db:td>
<db:td>
<db:para>Returns the vector2d result of converting <db:code>this</db:code> vector3d to a vector2d</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.vector3d(1,2,3);
var b = a.toVector2d();
console.log(b.toString()); // QVector2D(1, 2)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector4d toVector4d()</db:para>
</db:td>
<db:td>
<db:para>Returns the vector4d result of converting <db:code>this</db:code> vector3d to a vector4d</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.vector3d(1,2,3);
var b = a.toVector4d();
console.log(b.toString()); // QVector4D(1, 2, 3, 0)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>bool fuzzyEquals(vector3d other, real epsilon)</db:para>
</db:td>
<db:td>
<db:para>Returns true if <db:code>this</db:code> vector3d is approximately equal to the <db:code>other</db:code> vector3d. The approximation will be true if each attribute of <db:code>this</db:code> is within <db:code>epsilon</db:code> of <db:code>other</db:code>. Note that <db:code>epsilon</db:code> is an optional argument, the default <db:code>epsilon</db:code> is 0.00001.</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.vector3d(1,2,3);
var b = Qt.vector3d(1.0001, 1.9998, 2.0001);
var c = a.fuzzyEquals(b);        // default epsilon
var d = a.fuzzyEquals(b, 0.005); // supplied epsilon
console.log(c + &quot; &quot; + d); // false true
            </db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This value type is provided by the <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> import.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-typesystem-valuetypes.xml">QML Value Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
