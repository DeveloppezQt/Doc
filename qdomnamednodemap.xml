<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDomNamedNodeMap Class</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdomnamednodemap.xml">QDomNamedNodeMap</db:link> class contains a collection of nodes that can be accessed by name.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDomNamedNodeMap</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Xml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Xml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDomNamedNodeMap is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Note that <db:link xlink:href="qdomnamednodemap.xml">QDomNamedNodeMap</db:link> does not inherit from <db:link xlink:href="qdomnodelist.xml">QDomNodeList</db:link>. QDomNamedNodeMaps do not provide any specific node ordering. Although nodes in a <db:link xlink:href="qdomnamednodemap.xml">QDomNamedNodeMap</db:link> may be accessed by an ordinal index, this is simply to allow a convenient enumeration of the contents of a <db:link xlink:href="qdomnamednodemap.xml">QDomNamedNodeMap</db:link>, and does not imply that the DOM specifies an ordering of the nodes.</db:para>
<db:para>The <db:link xlink:href="qdomnamednodemap.xml">QDomNamedNodeMap</db:link> is used in three places:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para><db:link xlink:href="qdomdocumenttype.xml#entities">QDomDocumentType::entities</db:link>() returns a map of all entities described in the DTD.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdomdocumenttype.xml#notations">QDomDocumentType::notations</db:link>() returns a map of all notations described in the DTD.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdomnode.xml#attributes">QDomNode::attributes</db:link>() returns a map of all attributes of an element.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Items in the map are identified by the name which QDomNode::name() returns. Nodes are retrieved using <db:link xlink:href="qdomnamednodemap.xml#namedItem">namedItem</db:link>(), <db:link xlink:href="qdomnamednodemap.xml#namedItemNS">namedItemNS</db:link>() or <db:link xlink:href="qdomnamednodemap.xml#item">item</db:link>(). New nodes are inserted with <db:link xlink:href="qdomnamednodemap.xml#setNamedItem">setNamedItem</db:link>() or <db:link xlink:href="qdomnamednodemap.xml#setNamedItemNS">setNamedItemNS</db:link>() and removed with <db:link xlink:href="qdomnamednodemap.xml#removeNamedItem">removeNamedItem</db:link>() or <db:link xlink:href="qdomnamednodemap.xml#removeNamedItemNS">removeNamedItemNS</db:link>(). Use <db:link xlink:href="qdomnamednodemap.xml#contains">contains</db:link>() to see if an item with the given name is in the named node map. The number of items is returned by <db:link xlink:href="qdomnamednodemap.xml#length">length</db:link>().</db:para>
<db:para>Terminology: in this class we use &quot;item&quot; and &quot;node&quot; interchangeably.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDomNamedNodeMap">
<db:title>QDomNamedNodeMap::QDomNamedNodeMap()</db:title>
<db:constructorsynopsis>
<db:methodname>QDomNamedNodeMap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNamedNodeMap()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty named node map.</db:para>
</db:section>
<db:section xml:id="QDomNamedNodeMap-1">
<db:title>QDomNamedNodeMap::QDomNamedNodeMap(const QDomNamedNodeMap &amp;<db:emphasis>n</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDomNamedNodeMap</db:methodname>
<db:methodparam>
<db:type>const QDomNamedNodeMap &amp;</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNamedNodeMap(const QDomNamedNodeMap &amp;n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">n</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDomNamedNodeMap">
<db:title>QDomNamedNodeMap::~QDomNamedNodeMap()</db:title>
<db:destructorsynopsis>
<db:methodname>~QDomNamedNodeMap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDomNamedNodeMap()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the object and frees its resources.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>bool QDomNamedNodeMap::contains(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the map contains a node called <db:code role="parameter">name</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This function does not take the presence of namespaces into account. Use <db:link xlink:href="qdomnamednodemap.xml#namedItemNS">namedItemNS</db:link>() to test whether the map contains a node with a specific namespace URI and name.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>int QDomNamedNodeMap::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is provided for Qt API consistency. It is equivalent to <db:link xlink:href="qdomnamednodemap.xml#length">length</db:link>().</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QDomNamedNodeMap::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the map is empty; otherwise returns <db:code>false</db:code>. This function is provided for Qt API consistency.</db:para>
</db:section>
<db:section xml:id="item">
<db:title>QDomNode QDomNamedNodeMap::item(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDomNode</db:type>
<db:methodname>item</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNode item(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the node at position <db:code role="parameter">index</db:code>.</db:para>
<db:para>This can be used to iterate over the map. Note that the nodes in the map are ordered arbitrarily.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnamednodemap.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>int QDomNamedNodeMap::length() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>length</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int length() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of nodes in the map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnamednodemap.xml#item">item</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="namedItem">
<db:title>QDomNode QDomNamedNodeMap::namedItem(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDomNode</db:type>
<db:methodname>namedItem</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNode namedItem(const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the node called <db:code role="parameter">name</db:code>.</db:para>
<db:para>If the named node map does not contain such a node, a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link> is returned. A node's name is the name returned by <db:link xlink:href="qdomnode.xml#nodeName">QDomNode::nodeName</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnamednodemap.xml#setNamedItem">setNamedItem</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnamednodemap.xml#namedItemNS">namedItemNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="namedItemNS">
<db:title>QDomNode QDomNamedNodeMap::namedItemNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>localName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDomNode</db:type>
<db:methodname>namedItemNS</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nsURI</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>localName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNode namedItemNS(const QString &amp;nsURI, const QString &amp;localName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the node associated with the local name <db:code role="parameter">localName</db:code> and the namespace URI <db:code role="parameter">nsURI</db:code>.</db:para>
<db:para>If the map does not contain such a node, a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnamednodemap.xml#setNamedItemNS">setNamedItemNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnamednodemap.xml#namedItem">namedItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeNamedItem">
<db:title>QDomNode QDomNamedNodeMap::removeNamedItem(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomNode</db:type>
<db:methodname>removeNamedItem</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNode removeNamedItem(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the node called <db:code role="parameter">name</db:code> from the map.</db:para>
<db:para>The function returns the removed node or a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link> if the map did not contain a node called <db:code role="parameter">name</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnamednodemap.xml#setNamedItem">setNamedItem</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnamednodemap.xml#namedItem">namedItem</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnamednodemap.xml#removeNamedItemNS">removeNamedItemNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeNamedItemNS">
<db:title>QDomNode QDomNamedNodeMap::removeNamedItemNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>localName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomNode</db:type>
<db:methodname>removeNamedItemNS</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nsURI</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>localName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNode removeNamedItemNS(const QString &amp;nsURI, const QString &amp;localName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the node with the local name <db:code role="parameter">localName</db:code> and the namespace URI <db:code role="parameter">nsURI</db:code> from the map.</db:para>
<db:para>The function returns the removed node or a <db:link xlink:href="qdomnode.xml#isNull">null node</db:link> if the map did not contain a node with the local name <db:code role="parameter">localName</db:code> and the namespace URI <db:code role="parameter">nsURI</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnamednodemap.xml#setNamedItemNS">setNamedItemNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnamednodemap.xml#namedItemNS">namedItemNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnamednodemap.xml#removeNamedItem">removeNamedItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNamedItem">
<db:title>QDomNode QDomNamedNodeMap::setNamedItem(const QDomNode &amp;<db:emphasis>newNode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomNode</db:type>
<db:methodname>setNamedItem</db:methodname>
<db:methodparam>
<db:type>const QDomNode &amp;</db:type>
<db:parameter>newNode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNode setNamedItem(const QDomNode &amp;newNode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the node <db:code role="parameter">newNode</db:code> into the named node map. The name used by the map is the node name of <db:code role="parameter">newNode</db:code> as returned by <db:link xlink:href="qdomnode.xml#nodeName">QDomNode::nodeName</db:link>().</db:para>
<db:para>If the new node replaces an existing node, i.e. the map contains a node with the same name, the replaced node is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnamednodemap.xml#namedItem">namedItem</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnamednodemap.xml#removeNamedItem">removeNamedItem</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnamednodemap.xml#setNamedItemNS">setNamedItemNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNamedItemNS">
<db:title>QDomNode QDomNamedNodeMap::setNamedItemNS(const QDomNode &amp;<db:emphasis>newNode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomNode</db:type>
<db:methodname>setNamedItemNS</db:methodname>
<db:methodparam>
<db:type>const QDomNode &amp;</db:type>
<db:parameter>newNode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNode setNamedItemNS(const QDomNode &amp;newNode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the node <db:code role="parameter">newNode</db:code> in the map. If a node with the same namespace URI and the same local name already exists in the map, it is replaced by <db:code role="parameter">newNode</db:code>. If the new node replaces an existing node, the replaced node is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnamednodemap.xml#namedItemNS">namedItemNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnamednodemap.xml#removeNamedItemNS">removeNamedItemNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomnamednodemap.xml#setNamedItem">setNamedItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>int QDomNamedNodeMap::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is provided for Qt API consistency. It is equivalent to <db:link xlink:href="qdomnamednodemap.xml#length">length</db:link>().</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QDomNamedNodeMap::operator!=(const QDomNamedNodeMap &amp;<db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QDomNamedNodeMap &amp;</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QDomNamedNodeMap &amp;n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">n</db:code> and this named node map are not equal; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDomNamedNodeMap &amp;QDomNamedNodeMap::operator=(const QDomNamedNodeMap &amp;<db:emphasis>n</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomNamedNodeMap &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDomNamedNodeMap &amp;</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNamedNodeMap &amp; operator=(const QDomNamedNodeMap &amp;n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">n</db:code> to this named node map.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QDomNamedNodeMap::operator==(const QDomNamedNodeMap &amp;<db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QDomNamedNodeMap &amp;</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QDomNamedNodeMap &amp;n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">n</db:code> and this named node map are equal; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
