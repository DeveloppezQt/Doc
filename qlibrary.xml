<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLibrary Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlibrary.xml">QLibrary</db:link> class loads shared libraries at runtime.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLibrary</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QLibrary is part of <db:simplelist><db:member><db:link xlink:href="plugins.xml">Plugin Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An instance of a <db:link xlink:href="qlibrary.xml">QLibrary</db:link> object operates on a single shared object file (which we call a &quot;library&quot;, but is also known as a &quot;DLL&quot;). A <db:link xlink:href="qlibrary.xml">QLibrary</db:link> provides access to the functionality in the library in a platform independent way. You can either pass a file name in the constructor, or set it explicitly with <db:link xlink:href="qlibrary.xml#fileName-prop">setFileName</db:link>(). When loading the library, <db:link xlink:href="qlibrary.xml">QLibrary</db:link> searches in all the system-specific library locations (e.g. LD_LIBRARY_PATH on Unix), unless the file name has an absolute path.</db:para>
<db:para>If the file name is an absolute path then an attempt is made to load this path first. If the file cannot be found, <db:link xlink:href="qlibrary.xml">QLibrary</db:link> tries the name with different platform-specific file prefixes, like &quot;lib&quot; on Unix and Mac, and suffixes, like &quot;.so&quot; on Unix, &quot;.dylib&quot; on the Mac, or &quot;.dll&quot; on Windows.</db:para>
<db:para>If the file path is not absolute then <db:link xlink:href="qlibrary.xml">QLibrary</db:link> modifies the search order to try the system-specific prefixes and suffixes first, followed by the file path specified.</db:para>
<db:para>This makes it possible to specify shared libraries that are only identified by their basename (i.e. without their suffix), so the same code will work on different operating systems yet still minimise the number of attempts to find the library.</db:para>
<db:para>The most important functions are <db:link xlink:href="qlibrary.xml#load">load</db:link>() to dynamically load the library file, <db:link xlink:href="qlibrary.xml#isLoaded">isLoaded</db:link>() to check whether loading was successful, and <db:link xlink:href="qlibrary.xml#resolve">resolve</db:link>() to resolve a symbol in the library. The <db:link xlink:href="qlibrary.xml#resolve">resolve</db:link>() function implicitly tries to load the library if it has not been loaded yet. Multiple instances of <db:link xlink:href="qlibrary.xml">QLibrary</db:link> can be used to access the same physical library. Once loaded, libraries remain in memory until the application terminates. You can attempt to unload a library using <db:link xlink:href="qlibrary.xml#unload">unload</db:link>(), but if other instances of <db:link xlink:href="qlibrary.xml">QLibrary</db:link> are using the same library, the call will fail, and unloading will only happen when every instance has called <db:link xlink:href="qlibrary.xml#unload">unload</db:link>().</db:para>
<db:para>A typical use of <db:link xlink:href="qlibrary.xml">QLibrary</db:link> is to resolve an exported symbol in a library, and to call the C function that this symbol represents. This is called &quot;explicit linking&quot; in contrast to &quot;implicit linking&quot;, which is done by the link step in the build process when linking an executable against a library.</db:para>
<db:para>The following code snippet loads a library, resolves the symbol &quot;mysymbol&quot;, and calls the function if everything succeeded. If something goes wrong, e.g. the library file does not exist or the symbol is not defined, the function pointer will be nullptr and won't be called.</db:para>
<db:programlisting language="cpp">QLibrary myLib(&quot;mylib&quot;);
typedef void (*MyPrototype)();
MyPrototype myFunction = (MyPrototype) myLib.resolve(&quot;mysymbol&quot;);
if (myFunction)
    myFunction();
</db:programlisting>
<db:para>The symbol must be exported as a C function from the library for <db:link xlink:href="qlibrary.xml#resolve">resolve</db:link>() to work. This means that the function must be wrapped in an extern &quot;C&quot; block if the library is compiled with a C++ compiler. On Windows, this also requires the use of a dllexport macro; see <db:link xlink:href="qlibrary.xml#resolve">resolve</db:link>() for the details of how this is done. For convenience, there is a static <db:link xlink:href="qlibrary.xml#resolve">resolve</db:link>() function which you can use if you just want to call a function in a library without explicitly loading the library first:</db:para>
<db:programlisting language="cpp">typedef void (*MyPrototype)();
MyPrototype myFunction =
        (MyPrototype) QLibrary::resolve(&quot;mylib&quot;, &quot;mysymbol&quot;);
if (myFunction)
    myFunction();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="LoadHint-enum">
<db:title>enum QLibrary::LoadHint</db:title>
<db:bridgehead renderas="sect2">flags QLibrary::LoadHints</db:bridgehead>
<db:enumsynopsis>
<db:enumname>LoadHint</db:enumname>
<db:enumitem>
<db:enumidentifier>ResolveAllSymbolsHint</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExportExternalSymbolsHint</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LoadArchiveMemberHint</db:enumidentifier>
<db:enumvalue>0x04</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PreventUnloadHint</db:enumidentifier>
<db:enumvalue>0x08</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DeepBindHint</db:enumidentifier>
<db:enumvalue>0x10</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QLibrary::LoadHints</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes the possible hints that can be used to change the way libraries are handled when they are loaded. These values indicate how symbols are resolved when libraries are loaded, and are specified using the <db:link xlink:href="qlibrary.xml#loadHints-prop">setLoadHints</db:link>() function.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlibrary.xml">QLibrary</db:link></db:emphasis>::ResolveAllSymbolsHint</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Causes all symbols in a library to be resolved when it is loaded, not simply when <db:link xlink:href="qlibrary.xml#resolve">resolve</db:link>() is called.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlibrary.xml">QLibrary</db:link></db:emphasis>::ExportExternalSymbolsHint</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Exports unresolved and external symbols in the library so that they can be resolved in other dynamically-loaded libraries loaded later.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlibrary.xml">QLibrary</db:link></db:emphasis>::LoadArchiveMemberHint</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Allows the file name of the library to specify a particular object file within an archive file. If this hint is given, the filename of the library consists of a path, which is a reference to an archive file, followed by a reference to the archive member.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlibrary.xml">QLibrary</db:link></db:emphasis>::PreventUnloadHint</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>Prevents the library from being unloaded from the address space if close() is called. The library's static variables are not reinitialized if open() is called at a later time.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlibrary.xml">QLibrary</db:link></db:emphasis>::DeepBindHint</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Instructs the linker to prefer definitions in the loaded library over exported definitions in the loading application when resolving external symbols in the loaded library. This option is only supported on Linux.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>LoadHints</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;LoadHint&gt;. </db:code>It stores an OR combination of <db:code>LoadHint</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlibrary.xml#loadHints-prop">loadHints</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="fileName-prop">
<db:title>fileName : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>fileName</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">fileName</db:synopsisinfo>
<db:synopsisinfo role="setter">setFileName</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the file name of the library</db:para>
<db:para>We recommend omitting the file's suffix in the file name, since <db:link xlink:href="qlibrary.xml">QLibrary</db:link> will automatically look for the file with the appropriate suffix (see <db:link xlink:href="qlibrary.xml#isLibrary">isLibrary</db:link>()).</db:para>
<db:para>When loading the library, <db:link xlink:href="qlibrary.xml">QLibrary</db:link> searches in all system-specific library locations (for example, LD_LIBRARY_PATH on Unix), unless the file name has an absolute path. After loading the library successfully, fileName() returns the fully-qualified file name of the library, including the full path to the library if one was given in the constructor or passed to setFileName().</db:para>
<db:para>For example, after successfully loading the &quot;GL&quot; library on Unix platforms, fileName() will return &quot;libGL.so&quot;. If the file name was originally passed as &quot;/usr/lib/libGL&quot;, fileName() will return &quot;/usr/lib/libGL.so&quot;.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">fileName</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFileName</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>fileName</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="loadHints-prop">
<db:title>loadHints : LoadHints</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>LoadHints</db:type>
<db:varname>loadHints</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">loadHints</db:synopsisinfo>
<db:synopsisinfo role="setter">setLoadHints</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Give the <db:link xlink:href="qlibrary.xml#load">load</db:link>() function some hints on how it should behave.</db:para>
<db:para>You can give some hints on how the symbols are resolved. Usually, the symbols are not resolved at load time, but resolved lazily, (that is, when <db:link xlink:href="qlibrary.xml#resolve">resolve</db:link>() is called). If you set the loadHints to <db:link xlink:href="qlibrary.xml#LoadHint-enum">ResolveAllSymbolsHint</db:link>, then all symbols will be resolved at load time if the platform supports it.</db:para>
<db:para>Setting <db:link xlink:href="qlibrary.xml#LoadHint-enum">ExportExternalSymbolsHint</db:link> will make the external symbols in the library available for resolution in subsequent loaded libraries.</db:para>
<db:para>If <db:link xlink:href="qlibrary.xml#LoadHint-enum">LoadArchiveMemberHint</db:link> is set, the file name is composed of two components: A path which is a reference to an archive file followed by the second component which is the reference to the archive member. For instance, the <db:link xlink:href="qlibrary.xml#fileName-prop">fileName</db:link> libGL.a(shr_64.o) will refer to the library shr_64.o in the archive file named libGL.a. This is only supported on the AIX platform.</db:para>
<db:para>The interpretation of the load hints is platform dependent, and if you use it you are probably making some assumptions on which platform you are compiling for, so use them only if you understand the consequences of them.</db:para>
<db:para>By default, none of these flags are set, so libraries will be loaded with lazy symbol resolution, and will not export external symbols for resolution in other dynamically-loaded libraries.</db:para>
<db:note>
<db:para>Setting this property after the library has been loaded has no effect and loadHints() will not reflect those changes.</db:para>
</db:note>
<db:note>
<db:para>This property is shared among all <db:link xlink:href="qlibrary.xml">QLibrary</db:link> instances that refer to the same library.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlibrary.xml#LoadHint-enum">QLibrary::LoadHints</db:link></db:type> <db:emphasis role="bold">loadHints</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLoadHints</db:emphasis>(<db:type><db:link xlink:href="qlibrary.xml#LoadHint-enum">QLibrary::LoadHints</db:link></db:type> <db:emphasis>hints</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QLibrary">
<db:title>[explicit] QLibrary::QLibrary(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QLibrary</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QLibrary(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a library with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QLibrary-1">
<db:title>[explicit] QLibrary::QLibrary(const QString &amp;<db:emphasis>fileName</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QLibrary</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QLibrary(const QString &amp;fileName, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a library object with the given <db:code role="parameter">parent</db:code> that will load the library specified by <db:code role="parameter">fileName</db:code>.</db:para>
<db:para>We recommend omitting the file's suffix in <db:code role="parameter">fileName</db:code>, since <db:link xlink:href="qlibrary.xml">QLibrary</db:link> will automatically look for the file with the appropriate suffix in accordance with the platform, e.g. &quot;.so&quot; on Unix, &quot;.dylib&quot; on macOS and iOS, and &quot;.dll&quot; on Windows. (See <db:link xlink:href="qlibrary.xml#fileName-prop">fileName</db:link>.)</db:para>
</db:section>
<db:section xml:id="QLibrary-2">
<db:title>[explicit] QLibrary::QLibrary(const QString &amp;<db:emphasis>fileName</db:emphasis>, int <db:emphasis>verNum</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QLibrary</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>verNum</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QLibrary(const QString &amp;fileName, int verNum, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a library object with the given <db:code role="parameter">parent</db:code> that will load the library specified by <db:code role="parameter">fileName</db:code> and major version number <db:code role="parameter">verNum</db:code>. Currently, the version number is ignored on Windows.</db:para>
<db:para>We recommend omitting the file's suffix in <db:code role="parameter">fileName</db:code>, since <db:link xlink:href="qlibrary.xml">QLibrary</db:link> will automatically look for the file with the appropriate suffix in accordance with the platform, e.g. &quot;.so&quot; on Unix, &quot;.dylib&quot; on macOS and iOS, and &quot;.dll&quot; on Windows. (See <db:link xlink:href="qlibrary.xml#fileName-prop">fileName</db:link>.)</db:para>
</db:section>
<db:section xml:id="QLibrary-3">
<db:title>[explicit] QLibrary::QLibrary(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QString &amp;<db:emphasis>version</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QLibrary</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>version</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QLibrary(const QString &amp;fileName, const QString &amp;version, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a library object with the given <db:code role="parameter">parent</db:code> that will load the library specified by <db:code role="parameter">fileName</db:code> and full version number <db:code role="parameter">version</db:code>. Currently, the version number is ignored on Windows.</db:para>
<db:para>We recommend omitting the file's suffix in <db:code role="parameter">fileName</db:code>, since <db:link xlink:href="qlibrary.xml">QLibrary</db:link> will automatically look for the file with the appropriate suffix in accordance with the platform, e.g. &quot;.so&quot; on Unix, &quot;.dylib&quot; on macOS and iOS, and &quot;.dll&quot; on Windows. (See <db:link xlink:href="qlibrary.xml#fileName-prop">fileName</db:link>.)</db:para>
</db:section>
<db:section xml:id="dtor.QLibrary">
<db:title>[virtual] QLibrary::~QLibrary()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QLibrary</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QLibrary()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qlibrary.xml">QLibrary</db:link> object.</db:para>
<db:para>Unless <db:link xlink:href="qlibrary.xml#unload">unload</db:link>() was called explicitly, the library stays in memory until the application terminates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlibrary.xml#isLoaded">isLoaded</db:link>()</db:member>
<db:member><db:link xlink:href="qlibrary.xml#unload">unload</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>[since 4.2] QString QLibrary::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a text string with the description of the last error that occurred. Currently, errorString will only be set if <db:link xlink:href="qlibrary.xml#load">load</db:link>(), <db:link xlink:href="qlibrary.xml#unload">unload</db:link>() or <db:link xlink:href="qlibrary.xml#resolve">resolve</db:link>() for some reason fails.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="isLibrary">
<db:title>[static] bool QLibrary::isLibrary(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLibrary</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLibrary(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">fileName</db:code> has a valid suffix for a loadable library; otherwise returns false.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Platform</db:para>
</db:th>
<db:th>
<db:para>Valid suffixes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Windows</db:para>
</db:td>
<db:td>
<db:para>.dll, .DLL</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Unix/Linux</db:para>
</db:td>
<db:td>
<db:para>.so</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AIX</db:para>
</db:td>
<db:td>
<db:para>.a</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>HP-UX</db:para>
</db:td>
<db:td>
<db:para>.sl, .so (HP-UXi)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>macOS and iOS</db:para>
</db:td>
<db:td>
<db:para>.dylib, .bundle, .so</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Trailing versioning numbers on Unix are ignored.</db:para>
</db:section>
<db:section xml:id="isLoaded">
<db:title>bool QLibrary::isLoaded() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLoaded</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLoaded() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the library is loaded; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlibrary.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load">
<db:title>bool QLibrary::load()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>load</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool load()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the library and returns true if the library was loaded successfully; otherwise returns false. Since <db:link xlink:href="qlibrary.xml#resolve">resolve</db:link>() always calls this function before resolving any symbols it is not necessary to call it explicitly. In some situations you might want the library loaded in advance, in which case you would use this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlibrary.xml#unload">unload</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resolve">
<db:title>QFunctionPointer QLibrary::resolve(const char *<db:emphasis>symbol</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFunctionPointer</db:type>
<db:methodname>resolve</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>symbol</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFunctionPointer resolve(const char *symbol)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the address of the exported symbol <db:code role="parameter">symbol</db:code>. The library is loaded if necessary. The function returns nullptr if the symbol could not be resolved or if the library could not be loaded.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">typedef int (*AvgFunction)(int, int);

AvgFunction avg = (AvgFunction) library-&amp;gt;resolve(&quot;avg&quot;);
if (avg)
    return avg(5, 8);
else
    return -1;
</db:programlisting>
<db:para>The symbol must be exported as a C function from the library. This means that the function must be wrapped in an extern &quot;C&quot; if the library is compiled with a C++ compiler. On Windows you must also explicitly export the function from the DLL using the __declspec(dllexport) compiler directive, for example:</db:para>
<db:programlisting language="cpp">extern &quot;C&quot; MY_EXPORT int avg(int a, int b)
{
    return (a + b) / 2;
}
</db:programlisting>
<db:para>with MY_EXPORT defined as</db:para>
<db:programlisting language="cpp">#ifdef Q_OS_WIN
#define MY_EXPORT __declspec(dllexport)
#else
#define MY_EXPORT
#endif
</db:programlisting>
</db:section>
<db:section xml:id="resolve-1">
<db:title>[static] QFunctionPointer QLibrary::resolve(const QString &amp;<db:emphasis>fileName</db:emphasis>, const char *<db:emphasis>symbol</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFunctionPointer</db:type>
<db:methodname>resolve</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>symbol</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFunctionPointer resolve(const QString &amp;fileName, const char *symbol)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Loads the library <db:code role="parameter">fileName</db:code> and returns the address of the exported symbol <db:code role="parameter">symbol</db:code>. Note that <db:code role="parameter">fileName</db:code> should not include the platform-specific file suffix; (see <db:link xlink:href="qlibrary.xml#fileName-prop">fileName</db:link>). The library remains loaded until the application exits.</db:para>
<db:para>The function returns nullptr if the symbol could not be resolved or if the library could not be loaded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlibrary.xml#resolve">resolve</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resolve-2">
<db:title>[static] QFunctionPointer QLibrary::resolve(const QString &amp;<db:emphasis>fileName</db:emphasis>, int <db:emphasis>verNum</db:emphasis>, const char *<db:emphasis>symbol</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFunctionPointer</db:type>
<db:methodname>resolve</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>verNum</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>symbol</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QFunctionPointer resolve(const QString &amp;fileName, int verNum, const char *symbol)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Loads the library <db:code role="parameter">fileName</db:code> with major version number <db:code role="parameter">verNum</db:code> and returns the address of the exported symbol <db:code role="parameter">symbol</db:code>. Note that <db:code role="parameter">fileName</db:code> should not include the platform-specific file suffix; (see <db:link xlink:href="qlibrary.xml#fileName-prop">fileName</db:link>). The library remains loaded until the application exits. <db:code role="parameter">verNum</db:code> is ignored on Windows.</db:para>
<db:para>The function returns nullptr if the symbol could not be resolved or if the library could not be loaded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlibrary.xml#resolve">resolve</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resolve-3">
<db:title>[static, since 4.4] QFunctionPointer QLibrary::resolve(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QString &amp;<db:emphasis>version</db:emphasis>, const char *<db:emphasis>symbol</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFunctionPointer</db:type>
<db:methodname>resolve</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>version</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>symbol</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QFunctionPointer resolve(const QString &amp;fileName, const QString &amp;version, const char *symbol)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Loads the library <db:code role="parameter">fileName</db:code> with full version number <db:code role="parameter">version</db:code> and returns the address of the exported symbol <db:code role="parameter">symbol</db:code>. Note that <db:code role="parameter">fileName</db:code> should not include the platform-specific file suffix; (see <db:link xlink:href="qlibrary.xml#fileName-prop">fileName</db:link>). The library remains loaded until the application exits. <db:code role="parameter">version</db:code> is ignored on Windows.</db:para>
<db:para>The function returns nullptr if the symbol could not be resolved or if the library could not be loaded.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlibrary.xml#resolve">resolve</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileNameAndVersion">
<db:title>void QLibrary::setFileNameAndVersion(const QString &amp;<db:emphasis>fileName</db:emphasis>, int <db:emphasis>versionNumber</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFileNameAndVersion</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>versionNumber</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFileNameAndVersion(const QString &amp;fileName, int versionNumber)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:link xlink:href="qlibrary.xml#fileName-prop">fileName</db:link> property and major version number to <db:code role="parameter">fileName</db:code> and <db:code role="parameter">versionNumber</db:code> respectively. The <db:code role="parameter">versionNumber</db:code> is ignored on Windows.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlibrary.xml#fileName-prop">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileNameAndVersion-1">
<db:title>[since 4.4] void QLibrary::setFileNameAndVersion(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QString &amp;<db:emphasis>version</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFileNameAndVersion</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>version</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFileNameAndVersion(const QString &amp;fileName, const QString &amp;version)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:link xlink:href="qlibrary.xml#fileName-prop">fileName</db:link> property and full version number to <db:code role="parameter">fileName</db:code> and <db:code role="parameter">version</db:code> respectively. The <db:code role="parameter">version</db:code> parameter is ignored on Windows.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlibrary.xml#fileName-prop">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unload">
<db:title>bool QLibrary::unload()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>unload</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool unload()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unloads the library and returns true if the library could be unloaded; otherwise returns false.</db:para>
<db:para>This happens automatically on application termination, so you shouldn't normally need to call this function.</db:para>
<db:para>If other instances of <db:link xlink:href="qlibrary.xml">QLibrary</db:link> are using the same library, the call will fail, and unloading will only happen when every instance has called unload().</db:para>
<db:para>Note that on Mac OS X 10.3 (Panther), dynamic libraries cannot be unloaded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlibrary.xml#resolve">resolve</db:link>()</db:member>
<db:member><db:link xlink:href="qlibrary.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
