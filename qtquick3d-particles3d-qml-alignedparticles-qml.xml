<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Particles 3D Testbed Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to use the Qt Quick 3D Particles3D module.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2021 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D
import QtQuick3D.Particles3D

Item {
    id: mainWindow

    anchors.fill: parent

    View3D {
        anchors.fill: parent

        environment: SceneEnvironment {
            clearColor: &quot;#202020&quot;
            backgroundMode: SceneEnvironment.Color
            antialiasingMode: settings.antialiasingMode
            antialiasingQuality: settings.antialiasingQuality
        }

        PerspectiveCamera {
            id: camera
            position: Qt.vector3d(0, 100, 600)

            SequentialAnimation {
                running: true
                loops: Animation.Infinite
                NumberAnimation {
                    target: camera
                    property: &quot;eulerRotation.x&quot;
                    to: -90
                    duration: 20000
                    easing.type: Easing.Linear
                }
                NumberAnimation {
                    target: camera
                    property: &quot;eulerRotation.x&quot;
                    to: 0
                    duration: 2000
                    easing.type: Easing.Linear
                }
            }

            SequentialAnimation {
                running: true
                loops: Animation.Infinite
                NumberAnimation {
                    target: camera
                    property: &quot;position.y&quot;
                    to: 1400
                    duration: 20000
                    easing.type: Easing.Linear
                }
                NumberAnimation {
                    target: camera
                    property: &quot;position.y&quot;
                    to: 0
                    duration: 2000
                    easing.type: Easing.Linear
                }
            }

            SequentialAnimation {
                running: true
                loops: Animation.Infinite
                NumberAnimation {
                    target: camera
                    property: &quot;position.z&quot;
                    to: 0
                    duration: 20000
                    easing.type: Easing.Linear
                }
                NumberAnimation {
                    target: camera
                    property: &quot;position.z&quot;
                    to: 600
                    duration: 2000
                    easing.type: Easing.Linear
                }
            }
        }

        PointLight {
            position: Qt.vector3d(0, 400, 100)
            brightness: 10
            ambientColor: Qt.rgba(0.3, 0.3, 0.3, 1.0)
        }

        // Models shared between particles
        Component {
            id: particleComponent
            Model {
                source: &quot;#Cone&quot;
                scale: Qt.vector3d(0.1, 0.1, 0.1)
                materials: DefaultMaterial {
                }
            }
        }

        ParticleSystem3D {
            id: psystem

            // Particles
            ModelParticle3D {
                id: particleVelocity
                delegate: particleComponent
                maxAmount: 250
                color: &quot;#ff0000&quot;
                alignMode: Particle3D.AlignTowardsStartVelocity
            }

            ModelParticle3D {
                id: particleCamera
                delegate: particleComponent
                maxAmount: 250
                color: &quot;#00ff00&quot;
                alignMode: Particle3D.AlignTowardsTarget
                alignTargetPosition: camera.position
            }

            ModelParticle3D {
                id: particleNoAlign
                delegate: particleComponent
                maxAmount: 250
                color: &quot;#0000ff&quot;
            }

            SpriteParticle3D {
                id: particleBillboard
                sprite: Texture {
                    source: &quot;images/snowflake.png&quot;
                }
                maxAmount: 250
                color: &quot;#ffffff&quot;
                billboard: true
            }

            SpriteParticle3D {
                id: particleNoBillboard
                sprite: Texture {
                    source: &quot;images/snowflake.png&quot;
                }
                maxAmount: 250
                color: &quot;#aaaaff&quot;
            }

            // Emitters, one per particle
            ParticleEmitter3D {
                particle: particleVelocity
                position: Qt.vector3d(400, 50, 0)
                particleScale: 2
                particleRotation: Qt.vector3d(90, 0, 0)
                velocity: VectorDirection3D {
                    direction: Qt.vector3d(0, 100, 0)
                    directionVariation: Qt.vector3d(30, 30, 30)
                }
                emitRate: 10
                lifeSpan: 4000
                Node {
                    x: 20
                    Text {
                        anchors.verticalCenter: parent.verticalCenter
                        text: &quot;StartVelocity&quot;
                        font.pointSize: settings.fontSizeLarge
                        color: &quot;#ffffff&quot;
                    }
                }
            }

            ParticleEmitter3D {
                particle: particleCamera
                position: Qt.vector3d(200, 50, 0)
                particleScale: 2
                particleRotation: Qt.vector3d(90, 0, 0)
                velocity: VectorDirection3D {
                    direction: Qt.vector3d(0, 100, 0)
                    directionVariation: Qt.vector3d(30, 30, 30)
                }
                emitRate: 10
                lifeSpan: 4000
                Node {
                    x: 20
                    Text {
                        anchors.verticalCenter: parent.verticalCenter
                        text: &quot;Camera&quot;
                        font.pointSize: settings.fontSizeLarge
                        color: &quot;#ffffff&quot;
                    }
                }
            }

            ParticleEmitter3D {
                particle: particleNoAlign
                position: Qt.vector3d(0, 50, 0)
                particleScale: 2
                particleRotation: Qt.vector3d(90, 0, 0)
                velocity: VectorDirection3D {
                    direction: Qt.vector3d(0, 100, 0)
                    directionVariation: Qt.vector3d(30, 30, 30)
                }
                emitRate: 10
                lifeSpan: 4000
                Node {
                    x: 20
                    Text {
                        anchors.verticalCenter: parent.verticalCenter
                        text: &quot;NoAlign&quot;
                        font.pointSize: settings.fontSizeLarge
                        color: &quot;#ffffff&quot;
                    }
                }
            }

            ParticleEmitter3D {
                particle: particleBillboard
                position: Qt.vector3d(-200, 50, 0)
                particleScale: 8
                velocity: VectorDirection3D {
                    direction: Qt.vector3d(0, 100, 0)
                    directionVariation: Qt.vector3d(30, 30, 30)
                }
                emitRate: 10
                lifeSpan: 4000
                Node {
                    x: 20
                    Text {
                        anchors.verticalCenter: parent.verticalCenter
                        text: &quot;Billboard&quot;
                        font.pointSize: settings.fontSizeLarge
                        color: &quot;#ffffff&quot;
                    }
                }
            }

            ParticleEmitter3D {
                particle: particleNoBillboard
                position: Qt.vector3d(-400, 50, 0)
                particleScale: 8
                velocity: VectorDirection3D {
                    direction: Qt.vector3d(0, 100, 0)
                    directionVariation: Qt.vector3d(30, 30, 30)
                }
                emitRate: 10
                lifeSpan: 4000
                Node {
                    x: 20
                    Text {
                        anchors.verticalCenter: parent.verticalCenter
                        text: &quot;NoBillboard&quot;
                        font.pointSize: settings.fontSizeLarge
                        color: &quot;#ffffff&quot;
                    }
                }
            }
        }
    }

    LoggingView {
        anchors.bottom: parent.bottom
        particleSystems: [psystem]
    }
}

</db:programlisting>
</db:article>
