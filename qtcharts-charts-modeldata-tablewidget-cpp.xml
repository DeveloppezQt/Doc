<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Model Data Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to use the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> derived model as the data for the series.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;tablewidget.h&quot;
#include &quot;customtablemodel.h&quot;
#include &amp;lt;QtWidgets/QGridLayout&amp;gt;
#include &amp;lt;QtWidgets/QTableView&amp;gt;
#include &amp;lt;QtCharts/QChart&amp;gt;
#include &amp;lt;QtCharts/QChartView&amp;gt;
#include &amp;lt;QtCharts/QLineSeries&amp;gt;
#include &amp;lt;QtCharts/QVXYModelMapper&amp;gt;
#include &amp;lt;QtWidgets/QHeaderView&amp;gt;

QT_CHARTS_USE_NAMESPACE

TableWidget::TableWidget(QWidget *parent)
    : QWidget(parent)
{
    // create simple model for storing data
    // user's table data model
    CustomTableModel *model = new CustomTableModel;

    // create table view and add model to it
    QTableView *tableView = new QTableView;
    tableView-&amp;gt;setModel(model);
    tableView-&amp;gt;horizontalHeader()-&amp;gt;setSectionResizeMode(QHeaderView::Stretch);
    tableView-&amp;gt;verticalHeader()-&amp;gt;setSectionResizeMode(QHeaderView::Stretch);

    QChart *chart = new QChart;
    chart-&amp;gt;setAnimationOptions(QChart::AllAnimations);

    // series 1
    QLineSeries *series = new QLineSeries;
    series-&amp;gt;setName(&quot;Line 1&quot;);
    QVXYModelMapper *mapper = new QVXYModelMapper(this);
    mapper-&amp;gt;setXColumn(0);
    mapper-&amp;gt;setYColumn(1);
    mapper-&amp;gt;setSeries(series);
    mapper-&amp;gt;setModel(model);
    chart-&amp;gt;addSeries(series);

    // for storing color hex from the series
    QString seriesColorHex = &quot;#000000&quot;;

    // get the color of the series and use it for showing the mapped area
    seriesColorHex = &quot;#&quot; + QString::number(series-&amp;gt;pen().color().rgb(), 16).right(6).toUpper();
    model-&amp;gt;addMapping(seriesColorHex, QRect(0, 0, 2, model-&amp;gt;rowCount()));

    // series 2
    series = new QLineSeries;
    series-&amp;gt;setName(&quot;Line 2&quot;);

    mapper = new QVXYModelMapper(this);
    mapper-&amp;gt;setXColumn(2);
    mapper-&amp;gt;setYColumn(3);
    mapper-&amp;gt;setSeries(series);
    mapper-&amp;gt;setModel(model);
    chart-&amp;gt;addSeries(series);

    // get the color of the series and use it for showing the mapped area
    seriesColorHex = &quot;#&quot; + QString::number(series-&amp;gt;pen().color().rgb(), 16).right(6).toUpper();
    model-&amp;gt;addMapping(seriesColorHex, QRect(2, 0, 2, model-&amp;gt;rowCount()));

    chart-&amp;gt;createDefaultAxes();
    QChartView *chartView = new QChartView(chart);
    chartView-&amp;gt;setRenderHint(QPainter::Antialiasing);
    chartView-&amp;gt;setMinimumSize(640, 480);

    // create main layout
    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&amp;gt;addWidget(tableView, 1, 0);
    mainLayout-&amp;gt;addWidget(chartView, 1, 1);
    mainLayout-&amp;gt;setColumnStretch(1, 1);
    mainLayout-&amp;gt;setColumnStretch(0, 0);
    setLayout(mainLayout);
}

</db:programlisting>
</db:article>
