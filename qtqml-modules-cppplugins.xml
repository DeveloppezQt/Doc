<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Creating C++ Plugins for QML</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Description of how to write C++ plugins for QML.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="creating-a-plugin">
<db:title>Creating a Plugin</db:title>
<db:para>The <db:link xlink:href="qqmlengine.xml">QML engine</db:link> loads C++ plugins for QML. Such plugins are usually provided in a QML extension module, and can provide types for use by clients in QML documents that import the module. A module requires at least one registered type to be considered valid.</db:para>
<db:para><db:link xlink:href="qqmlengineextensionplugin.xml">QQmlEngineExtensionPlugin</db:link> is a plugin interface that lets you create QML extensions that can be loaded dynamically into QML applications. These extensions allow custom QML types to be made available to the QML engine.</db:para>
<db:para>To write a QML extension plugin:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Subclass <db:link xlink:href="qqmlengineextensionplugin.xml">QQmlEngineExtensionPlugin</db:link> and use the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro to register the plugin with the Qt meta object system.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use the <db:link xlink:href="qqmlengine.xml#QML_ELEMENT">QML_ELEMENT</db:link> and <db:link xlink:href="qqmlengine.xml#QML_NAMED_ELEMENT">QML_NAMED_ELEMENT</db:link>() macros to declare QML types.</db:para>
</db:listitem>
<db:listitem>
<db:para>Configure your build file.</db:para>
<db:para>CMake:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_qml_module(&amp;lt;target&amp;gt;
    URI &amp;lt;my.import.name&amp;gt;
    VERSION 1.0
    QML_FILES &amp;lt;app.qml&amp;gt;
    NO_RESOURCE_TARGET_PATH
)
</db:programlisting>
<db:para>qmake:</db:para>
<db:programlisting language="cpp" role="bad">CONFIG += qmltypes
QML_IMPORT_NAME = &amp;lt;my.import.name&amp;gt;
QML_IMPORT_MAJOR_VERSION = &amp;lt;version&amp;gt;
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>If you're using qmake, create a <db:link xlink:href="qtqml-modules-qmldir.xml">qmldir file</db:link> to describe the plugin. Note that CMake will, by default, automatically generate the <db:link xlink:href="qtqml-modules-qmldir.xml">qmldir file</db:link>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>QML extension plugins are for either application-specific or library-like plugins. Library plugins should limit themselves to registering types, as any manipulation of the engine's root context may cause conflicts or other issues in the library user's code.</db:para>
<db:note>
<db:para>When using the CMake <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> API, a plugin will be generated automatically for you. It will take care of type registration. You only need to write a custom plugin if you have special requirements, such as registering custom image providers. In that case, pass <db:link xlink:href="qt-add-qml-module.xml#no-generate-plugin-source">NO_GENERATE_PLUGIN_SOURCE</db:link> to the qt_add_qml_module call to disable the generation of the default plugin.</db:para>
</db:note>
<db:para>The linker might erroneously remove the generated type registration function as an optimization. You can prevent that by declaring a synthetic volatile pointer to the function somewhere in your code. If your module is called &quot;my.module&quot;, you would add the forward declaration in global scope:</db:para>
<db:programlisting language="cpp">void qml_register_types_my_module();
</db:programlisting>
<db:para>Then add the following snippet of code in the implementation of any function that's part of the same binary as the registration:</db:para>
<db:programlisting language="cpp">volatile auto registration = &amp;amp;qml_register_types_my_module;
Q_UNUSED(registration);
</db:programlisting>
</db:section>
<db:section xml:id="reference">
<db:title>Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtqml-tutorials-extending-qml-example.xml">Writing QML Extensions with C++</db:link> - contains a chapter on creating QML plugins.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-cppintegration-definetypes.xml">Defining QML Types from C++</db:link> - information about registering C++ types into the runtime.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link> - information about Qt plugins</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
