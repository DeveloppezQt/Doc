<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLayout Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlayout.xml">QLayout</db:link> class is the base class of geometry managers.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLayout</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qlayoutitem.xml" xlink:role="class">QLayoutItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qboxlayout.xml" xlink:role="class">QBoxLayout</db:link>, <db:link xlink:href="qformlayout.xml" xlink:role="class">QFormLayout</db:link>, <db:link xlink:href="qgridlayout.xml" xlink:role="class">QGridLayout</db:link>, and <db:link xlink:href="qstackedlayout.xml" xlink:role="class">QStackedLayout</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QLayout is part of <db:simplelist><db:member>geomanagement</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This is an abstract base class inherited by the concrete classes <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link>, <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link>, <db:link xlink:href="qformlayout.xml">QFormLayout</db:link>, and <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link>.</db:para>
<db:para>For users of <db:link xlink:href="qlayout.xml">QLayout</db:link> subclasses or of <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> there is seldom any need to use the basic functions provided by <db:link xlink:href="qlayout.xml">QLayout</db:link>, such as <db:link xlink:href="qlayout.xml#sizeConstraint-prop">setSizeConstraint</db:link>() or <db:link xlink:href="qlayout.xml#setMenuBar">setMenuBar</db:link>(). See <db:link xlink:href="layout.xml">Layout Management</db:link> for more information.</db:para>
<db:para>To make your own layout manager, implement the functions <db:link xlink:href="qlayout.xml#addItem">addItem</db:link>(), <db:link xlink:href="qlayoutitem.xml#sizeHint">sizeHint</db:link>(), <db:link xlink:href="qlayout.xml#setGeometry">setGeometry</db:link>(), <db:link xlink:href="qlayout.xml#itemAt">itemAt</db:link>() and <db:link xlink:href="qlayout.xml#takeAt">takeAt</db:link>(). You should also implement <db:link xlink:href="qlayout.xml#minimumSize">minimumSize</db:link>() to ensure your layout isn't resized to zero size if there is too little space. To support children whose heights depend on their widths, implement <db:link xlink:href="qlayoutitem.xml#hasHeightForWidth">hasHeightForWidth</db:link>() and <db:link xlink:href="qlayoutitem.xml#heightForWidth">heightForWidth</db:link>(). See the <db:link xlink:href="qtwidgets-layouts-flowlayout-example.xml">Flow Layout</db:link> example for more information about implementing custom layout managers.</db:para>
<db:para>Geometry management stops when the layout manager is deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayoutitem.xml">QLayoutItem</db:link></db:member>
<db:member><db:link xlink:href="layout.xml">Layout Management</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-layouts-basiclayouts-example.xml">Basic Layouts Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-layouts-flowlayout-example.xml">Flow Layout Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SizeConstraint-enum">
<db:title>enum QLayout::SizeConstraint</db:title>
<db:enumsynopsis>
<db:enumname>SizeConstraint</db:enumname>
<db:enumitem>
<db:enumidentifier>SetDefaultConstraint</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SetNoConstraint</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SetMinimumSize</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SetFixedSize</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SetMaximumSize</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SetMinAndMaxSize</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The possible values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlayout.xml">QLayout</db:link></db:emphasis>::SetDefaultConstraint</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The main widget's minimum size is set to <db:link xlink:href="qlayout.xml#minimumSize">minimumSize</db:link>(), unless the widget already has a minimum size.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlayout.xml">QLayout</db:link></db:emphasis>::SetFixedSize</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The main widget's size is set to <db:link xlink:href="qlayoutitem.xml#sizeHint">sizeHint</db:link>(); it cannot be resized at all.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlayout.xml">QLayout</db:link></db:emphasis>::SetMinimumSize</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The main widget's minimum size is set to <db:link xlink:href="qlayout.xml#minimumSize">minimumSize</db:link>(); it cannot be smaller.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlayout.xml">QLayout</db:link></db:emphasis>::SetMaximumSize</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The main widget's maximum size is set to <db:link xlink:href="qlayout.xml#maximumSize">maximumSize</db:link>(); it cannot be larger.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlayout.xml">QLayout</db:link></db:emphasis>::SetMinAndMaxSize</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The main widget's minimum size is set to <db:link xlink:href="qlayout.xml#minimumSize">minimumSize</db:link>() and its maximum size is set to <db:link xlink:href="qlayout.xml#maximumSize">maximumSize</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlayout.xml">QLayout</db:link></db:emphasis>::SetNoConstraint</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The widget is not constrained.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#sizeConstraint-prop">setSizeConstraint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="sizeConstraint-prop">
<db:title>sizeConstraint : SizeConstraint</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>SizeConstraint</db:type>
<db:varname>sizeConstraint</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sizeConstraint</db:synopsisinfo>
<db:synopsisinfo role="setter">setSizeConstraint</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the resize mode of the layout</db:para>
<db:para>The default mode is <db:link xlink:href="qlayout.xml#SizeConstraint-enum">SetDefaultConstraint</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlayout.xml#SizeConstraint-enum">QLayout::SizeConstraint</db:link></db:type> <db:emphasis role="bold">sizeConstraint</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSizeConstraint</db:emphasis>(<db:emphasis>QLayout::SizeConstraint</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="spacing-prop">
<db:title>spacing : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>spacing</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">spacing</db:synopsisinfo>
<db:synopsisinfo role="setter">setSpacing</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the spacing between widgets inside the layout</db:para>
<db:para>If no value is explicitly set, the layout's spacing is inherited from the parent layout, or from the style settings for the parent widget.</db:para>
<db:para>For <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> and <db:link xlink:href="qformlayout.xml">QFormLayout</db:link>, it is possible to set different horizontal and vertical spacings using <db:link xlink:href="qgridlayout.xml#horizontalSpacing-prop">setHorizontalSpacing</db:link>() and <db:link xlink:href="qgridlayout.xml#verticalSpacing-prop">setVerticalSpacing</db:link>(). In that case, spacing() returns -1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type>int</db:type> <db:emphasis role="bold">spacing</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para>virtual <db:type>void</db:type> <db:emphasis role="bold">setSpacing</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#contentsRect">contentsRect</db:link>()</db:member>
<db:member><db:link xlink:href="qlayout.xml#getContentsMargins">getContentsMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#layoutSpacing">QStyle::layoutSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#pixelMetric">QStyle::pixelMetric</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QLayout">
<db:title>[explicit] QLayout::QLayout(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QLayout</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayout(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new top-level <db:link xlink:href="qlayout.xml">QLayout</db:link>, with parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The layout is set directly as the top-level layout for <db:code role="parameter">parent</db:code>. There can be only one top-level layout for a widget. It is returned by <db:link xlink:href="qwidget.xml#layout">QWidget::layout</db:link>().</db:para>
<db:para>If <db:code role="parameter">parent</db:code> is <db:code>nullptr</db:code>, then you must insert this layout into another layout, or set it as a widget's layout using <db:link xlink:href="qwidget.xml#setLayout">QWidget::setLayout</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#setLayout">QWidget::setLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activate">
<db:title>bool QLayout::activate()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>activate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool activate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Redoes the layout for <db:link xlink:href="qlayout.xml#parentWidget">parentWidget</db:link>() if necessary.</db:para>
<db:para>You should generally not need to call this because it is automatically called at the most appropriate times. It returns true if the layout was redone.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#update">update</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#updateGeometry">QWidget::updateGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addChildLayout">
<db:title>[protected] void QLayout::addChildLayout(QLayout *<db:emphasis>childLayout</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addChildLayout</db:methodname>
<db:methodparam>
<db:type>QLayout *</db:type>
<db:parameter>childLayout</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addChildLayout(QLayout *childLayout)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called from <db:code>addLayout()</db:code> or <db:code>insertLayout()</db:code> functions in subclasses to add layout <db:code role="parameter">childLayout</db:code> as a sub-layout.</db:para>
<db:para>The only scenario in which you need to call it directly is if you implement a custom layout that supports nested layouts.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#addLayout">QBoxLayout::addLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#insertLayout">QBoxLayout::insertLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qgridlayout.xml#addLayout">QGridLayout::addLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addChildWidget">
<db:title>[protected] void QLayout::addChildWidget(QWidget *<db:emphasis>w</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addChildWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addChildWidget(QWidget *w)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called from <db:code>addWidget()</db:code> functions in subclasses to add <db:code role="parameter">w</db:code> as a managed widget of a layout.</db:para>
<db:para>If <db:code role="parameter">w</db:code> is already managed by a layout, this function will produce a warning, and remove <db:code role="parameter">w</db:code> from that layout. This function must therefore be called before adding <db:code role="parameter">w</db:code> to the layout's data structure.</db:para>
</db:section>
<db:section xml:id="addItem">
<db:title>[pure virtual] void QLayout::addItem(QLayoutItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>addItem</db:methodname>
<db:methodparam>
<db:type>QLayoutItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addItem(QLayoutItem *item) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implemented in subclasses to add an <db:code role="parameter">item</db:code>. How it is added is specific to each subclass.</db:para>
<db:para>This function is not usually called in application code. To add a widget to a layout, use the <db:link xlink:href="qlayout.xml#addWidget">addWidget</db:link>() function; to add a child layout, use the addLayout() function provided by the relevant <db:link xlink:href="qlayout.xml">QLayout</db:link> subclass.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The ownership of <db:code role="parameter">item</db:code> is transferred to the layout, and it's the layout's responsibility to delete it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#addLayout">QBoxLayout::addLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qgridlayout.xml#addLayout">QGridLayout::addLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addWidget">
<db:title>void QLayout::addWidget(QWidget *<db:emphasis>w</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addWidget(QWidget *w)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds widget <db:code role="parameter">w</db:code> to this layout in a manner specific to the layout. This function uses <db:link xlink:href="qlayout.xml#addItem">addItem</db:link>().</db:para>
</db:section>
<db:section xml:id="alignmentRect">
<db:title>[protected] QRect QLayout::alignmentRect(const QRect &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>alignmentRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect alignmentRect(const QRect &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the rectangle that should be covered when the geometry of this layout is set to <db:code role="parameter">r</db:code>, provided that this layout supports <db:link xlink:href="qlayout.xml#setAlignment">setAlignment</db:link>().</db:para>
<db:para>The result is derived from <db:link xlink:href="qlayoutitem.xml#sizeHint">sizeHint</db:link>() and <db:link xlink:href="qlayout.xml#expandingDirections">expandingDirections</db:link>(). It is never larger than <db:code role="parameter">r</db:code>.</db:para>
</db:section>
<db:section xml:id="childEvent">
<db:title>[override virtual protected] void QLayout::childEvent(QChildEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>childEvent</db:methodname>
<db:methodparam>
<db:type>QChildEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void childEvent(QChildEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#childEvent" role="function">QObject::childEvent(QChildEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="closestAcceptableSize">
<db:title>[static] QSize QLayout::closestAcceptableSize(const QWidget *<db:emphasis>widget</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QSize</db:type>
<db:methodname>closestAcceptableSize</db:methodname>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize closestAcceptableSize(const QWidget *widget, const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a size that satisfies all size constraints on <db:code role="parameter">widget</db:code>, including <db:link xlink:href="qlayoutitem.xml#heightForWidth">heightForWidth</db:link>() and that is as close as possible to <db:code role="parameter">size</db:code>.</db:para>
</db:section>
<db:section xml:id="contentsMargins">
<db:title>QMargins QLayout::contentsMargins() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMargins</db:type>
<db:methodname>contentsMargins</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">contentsMargins</db:synopsisinfo>
<db:synopsisinfo role="signature">QMargins contentsMargins() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the margins used around the layout.</db:para>
<db:para>By default, <db:link xlink:href="qlayout.xml">QLayout</db:link> uses the values provided by the style. On most platforms, the margin is 11 pixels in all directions.</db:para>
<db:note>
<db:para>Getter function for property contentsMargins. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#setContentsMargins">setContentsMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentsRect">
<db:title>QRect QLayout::contentsRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>contentsRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect contentsRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the layout's <db:link xlink:href="qlayout.xml#geometry">geometry</db:link>() rectangle, but taking into account the contents margins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#setContentsMargins">setContentsMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qlayout.xml#getContentsMargins">getContentsMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="controlTypes">
<db:title>[override virtual] QSizePolicy::ControlTypes QLayout::controlTypes() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSizePolicy::ControlTypes</db:type>
<db:methodname>controlTypes</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizePolicy::ControlTypes controlTypes() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#controlTypes" role="function">QLayoutItem::controlTypes() const</db:link>.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>[pure virtual] int QLayout::count() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Must be implemented in subclasses to return the number of items in the layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#itemAt">itemAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expandingDirections">
<db:title>[override virtual] Qt::Orientations QLayout::expandingDirections() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt::Orientations</db:type>
<db:methodname>expandingDirections</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Orientations expandingDirections() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#expandingDirections" role="function">QLayoutItem::expandingDirections() const</db:link>.</db:para>
<db:para>Returns whether this layout can make use of more space than <db:link xlink:href="qlayoutitem.xml#sizeHint">sizeHint</db:link>(). A value of <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link> or <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> means that it wants to grow in only one dimension, whereas <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link> | <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> means that it wants to grow in both dimensions.</db:para>
<db:para>The default implementation returns <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> | <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link>. Subclasses reimplement it to return a meaningful value based on their child widgets's <db:link xlink:href="qsizepolicy.xml">size policies</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayoutitem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="geometry">
<db:title>[override virtual] QRect QLayout::geometry() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>geometry</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect geometry() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#geometry" role="function">QLayoutItem::geometry() const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#setGeometry">setGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getContentsMargins">
<db:title>void QLayout::getContentsMargins(int *<db:emphasis>left</db:emphasis>, int *<db:emphasis>top</db:emphasis>, int *<db:emphasis>right</db:emphasis>, int *<db:emphasis>bottom</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getContentsMargins</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>left</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>top</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>right</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>bottom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getContentsMargins(int *left, int *top, int *right, int *bottom) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>For each of <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code> and <db:code role="parameter">bottom</db:code> that is not <db:code>nullptr</db:code>, stores the size of the margin named in the location the pointer refers to.</db:para>
<db:para>By default, <db:link xlink:href="qlayout.xml">QLayout</db:link> uses the values provided by the style. On most platforms, the margin is 11 pixels in all directions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#setContentsMargins">setContentsMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#pixelMetric">QStyle::pixelMetric</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutLeftMargin</db:link></db:member>
<db:member><db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutTopMargin</db:link></db:member>
<db:member><db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutRightMargin</db:link></db:member>
<db:member><db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutBottomMargin</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf">
<db:title>[virtual] int QLayout::indexOf(const QWidget *<db:emphasis>widget</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>const QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOf(const QWidget *widget) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches for widget <db:code role="parameter">widget</db:code> in this layout (not including child layouts).</db:para>
<db:para>Returns the index of <db:code role="parameter">widget</db:code>, or -1 if <db:code role="parameter">widget</db:code> is not found.</db:para>
<db:para>The default implementation iterates over all items using <db:link xlink:href="qlayout.xml#itemAt">itemAt</db:link>().</db:para>
</db:section>
<db:section xml:id="indexOf-1">
<db:title>[virtual] int QLayout::indexOf(const QLayoutItem *<db:emphasis>layoutItem</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>const QLayoutItem *</db:type>
<db:parameter>layoutItem</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOf(const QLayoutItem *layoutItem) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches for layout item <db:code role="parameter">layoutItem</db:code> in this layout (not including child layouts).</db:para>
<db:para>Returns the index of <db:code role="parameter">layoutItem</db:code>, or -1 if <db:code role="parameter">layoutItem</db:code> is not found.</db:para>
</db:section>
<db:section xml:id="invalidate">
<db:title>[override virtual] void QLayout::invalidate()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>invalidate</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void invalidate() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#invalidate" role="function">QLayoutItem::invalidate()</db:link>.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[override virtual] bool QLayout::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#isEmpty" role="function">QLayoutItem::isEmpty() const</db:link>.</db:para>
</db:section>
<db:section xml:id="isEnabled">
<db:title>bool QLayout::isEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the layout is enabled; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#setEnabled">setEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemAt">
<db:title>[pure virtual] QLayoutItem *QLayout::itemAt(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QLayoutItem *</db:type>
<db:methodname>itemAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayoutItem * itemAt(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Must be implemented in subclasses to return the layout item at <db:code role="parameter">index</db:code>. If there is no such item, the function must return <db:code>nullptr</db:code>. Items are numbered consecutively from 0. If an item is deleted, other items will be renumbered.</db:para>
<db:para>This function can be used to iterate over a layout. The following code will draw a rectangle for each layout item in the layout structure of the widget.</db:para>
<db:programlisting language="cpp">static void paintLayout(QPainter *painter, QLayoutItem *item)
{
    QLayout *layout = item-&amp;gt;layout();
    if (layout) {
        for (int i = 0; i &amp;lt; layout-&amp;gt;count(); ++i)
            paintLayout(painter, layout-&amp;gt;itemAt(i));
    }
    painter-&amp;gt;drawRect(item-&amp;gt;geometry());
}

void MyWidget::paintEvent(QPaintEvent *)
{
    QPainter painter(this);
    if (layout())
        paintLayout(&amp;amp;painter, layout());
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#count">count</db:link>()</db:member>
<db:member><db:link xlink:href="qlayout.xml#takeAt">takeAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layout">
<db:title>[override virtual] QLayout *QLayout::layout()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QLayout *</db:type>
<db:methodname>layout</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayout * layout() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#layout" role="function">QLayoutItem::layout()</db:link>.</db:para>
</db:section>
<db:section xml:id="maximumSize">
<db:title>[override virtual] QSize QLayout::maximumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>maximumSize</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize maximumSize() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#maximumSize" role="function">QLayoutItem::maximumSize() const</db:link>.</db:para>
<db:para>Returns the maximum size of this layout. This is the largest size that the layout can have while still respecting the specifications.</db:para>
<db:para>The returned value doesn't include the space required by <db:link xlink:href="qwidget.xml#setContentsMargins">QWidget::setContentsMargins</db:link>() or <db:link xlink:href="qlayout.xml#menuBar">menuBar</db:link>().</db:para>
<db:para>The default implementation allows unlimited resizing.</db:para>
</db:section>
<db:section xml:id="menuBar">
<db:title>QWidget *QLayout::menuBar() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>menuBar</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * menuBar() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the menu bar set for this layout, or <db:code>nullptr</db:code> if no menu bar is set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#setMenuBar">setMenuBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSize">
<db:title>[override virtual] QSize QLayout::minimumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>minimumSize</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize minimumSize() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#minimumSize" role="function">QLayoutItem::minimumSize() const</db:link>.</db:para>
<db:para>Returns the minimum size of this layout. This is the smallest size that the layout can have while still respecting the specifications.</db:para>
<db:para>The returned value doesn't include the space required by <db:link xlink:href="qwidget.xml#setContentsMargins">QWidget::setContentsMargins</db:link>() or <db:link xlink:href="qlayout.xml#menuBar">menuBar</db:link>().</db:para>
<db:para>The default implementation allows unlimited resizing.</db:para>
</db:section>
<db:section xml:id="parentWidget">
<db:title>QWidget *QLayout::parentWidget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>parentWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * parentWidget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the parent widget of this layout, or <db:code>nullptr</db:code> if this layout is not installed on any widget.</db:para>
<db:para>If the layout is a sub-layout, this function returns the parent widget of the parent layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#parent">parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeItem">
<db:title>void QLayout::removeItem(QLayoutItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeItem</db:methodname>
<db:methodparam>
<db:type>QLayoutItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeItem(QLayoutItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the layout item <db:code role="parameter">item</db:code> from the layout. It is the caller's responsibility to delete the item.</db:para>
<db:para>Notice that <db:code role="parameter">item</db:code> can be a layout (since <db:link xlink:href="qlayout.xml">QLayout</db:link> inherits <db:link xlink:href="qlayoutitem.xml">QLayoutItem</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#removeWidget">removeWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qlayout.xml#addItem">addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeWidget">
<db:title>void QLayout::removeWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeWidget(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the widget <db:code role="parameter">widget</db:code> from the layout. After this call, it is the caller's responsibility to give the widget a reasonable geometry or to put the widget back into a layout or to explicitly hide it if necessary.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The ownership of <db:code role="parameter">widget</db:code> remains the same as when it was added.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#removeItem">removeItem</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#geometry-prop">QWidget::setGeometry</db:link>()</db:member>
<db:member><db:link xlink:href="qlayout.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replaceWidget">
<db:title>[virtual] QLayoutItem *QLayout::replaceWidget(QWidget *<db:emphasis>from</db:emphasis>, QWidget *<db:emphasis>to</db:emphasis>, Qt::FindChildOptions <db:emphasis>options</db:emphasis> = Qt::FindChildrenRecursively)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QLayoutItem *</db:type>
<db:methodname>replaceWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>from</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>to</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::FindChildOptions</db:type>
<db:parameter>options</db:parameter>
<db:initializer>Qt::FindChildrenRecursively</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayoutItem * replaceWidget(QWidget *from, QWidget *to, Qt::FindChildOptions options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches for widget <db:code role="parameter">from</db:code> and replaces it with widget <db:code role="parameter">to</db:code> if found. Returns the layout item that contains the widget <db:code role="parameter">from</db:code> on success. Otherwise <db:code>nullptr</db:code> is returned. If <db:code role="parameter">options</db:code> contains <db:code>Qt::FindChildrenRecursively</db:code> (the default), sub-layouts are searched for doing the replacement. Any other flag in <db:code role="parameter">options</db:code> is ignored.</db:para>
<db:para>Notice that the returned item therefore might not belong to this layout, but to a sub-layout.</db:para>
<db:para>The returned layout item is no longer owned by the layout and should be either deleted or inserted to another layout. The widget <db:code role="parameter">from</db:code> is no longer managed by the layout and may need to be deleted or hidden. The parent of widget <db:code role="parameter">from</db:code> is left unchanged.</db:para>
<db:para>This function works for the built-in Qt layouts, but might not work for custom layouts.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAlignment">
<db:title>bool QLayout::setAlignment(QWidget *<db:emphasis>w</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setAlignment</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setAlignment(QWidget *w, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the alignment for widget <db:code role="parameter">w</db:code> to <db:code role="parameter">alignment</db:code> and returns true if <db:code role="parameter">w</db:code> is found in this layout (not including child layouts); otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="setAlignment-1">
<db:title>bool QLayout::setAlignment(QLayout *<db:emphasis>l</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setAlignment</db:methodname>
<db:methodparam>
<db:type>QLayout *</db:type>
<db:parameter>l</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setAlignment(QLayout *l, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the alignment for the layout <db:code role="parameter">l</db:code> to <db:code role="parameter">alignment</db:code> and returns <db:code>true</db:code> if <db:code role="parameter">l</db:code> is found in this layout (not including child layouts); otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="setContentsMargins">
<db:title>void QLayout::setContentsMargins(int <db:emphasis>left</db:emphasis>, int <db:emphasis>top</db:emphasis>, int <db:emphasis>right</db:emphasis>, int <db:emphasis>bottom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setContentsMargins</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>left</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>top</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>right</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>bottom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">contentsMargins</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContentsMargins(int left, int top, int right, int bottom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code>, and <db:code role="parameter">bottom</db:code> margins to use around the layout.</db:para>
<db:para>By default, <db:link xlink:href="qlayout.xml">QLayout</db:link> uses the values provided by the style. On most platforms, the margin is 11 pixels in all directions.</db:para>
<db:note>
<db:para>Setter function for property contentsMargins. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#contentsMargins">contentsMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qlayout.xml#getContentsMargins">getContentsMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#pixelMetric">QStyle::pixelMetric</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutLeftMargin</db:link></db:member>
<db:member><db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutTopMargin</db:link></db:member>
<db:member><db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutRightMargin</db:link></db:member>
<db:member><db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutBottomMargin</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContentsMargins-1">
<db:title>void QLayout::setContentsMargins(const QMargins &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setContentsMargins</db:methodname>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>margins</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="associated-property">contentsMargins</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContentsMargins(const QMargins &amp;margins)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">margins</db:code> to use around the layout.</db:para>
<db:para>By default, <db:link xlink:href="qlayout.xml">QLayout</db:link> uses the values provided by the style. On most platforms, the margin is 11 pixels in all directions.</db:para>
<db:note>
<db:para>Setter function for property contentsMargins. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#contentsMargins">contentsMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEnabled">
<db:title>void QLayout::setEnabled(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEnabled(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables this layout if <db:code role="parameter">enable</db:code> is true, otherwise disables it.</db:para>
<db:para>An enabled layout adjusts dynamically to changes; a disabled layout acts as if it did not exist.</db:para>
<db:para>By default all layouts are enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#isEnabled">isEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry">
<db:title>[override virtual] void QLayout::setGeometry(const QRect &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setGeometry</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGeometry(const QRect &amp;r) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#setGeometry" role="function">QLayoutItem::setGeometry(const QRect &amp;r)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#geometry">geometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMenuBar">
<db:title>void QLayout::setMenuBar(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMenuBar</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMenuBar(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Tells the geometry manager to place the menu bar <db:code role="parameter">widget</db:code> at the top of <db:link xlink:href="qlayout.xml#parentWidget">parentWidget</db:link>(), outside <db:link xlink:href="qwidget.xml#contentsMargins">QWidget::contentsMargins</db:link>(). All child widgets are placed below the bottom edge of the menu bar.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#menuBar">menuBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeAt">
<db:title>[pure virtual] QLayoutItem *QLayout::takeAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QLayoutItem *</db:type>
<db:methodname>takeAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayoutItem * takeAt(int index) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Must be implemented in subclasses to remove the layout item at <db:code role="parameter">index</db:code> from the layout, and return the item. If there is no such item, the function must do nothing and return 0. Items are numbered consecutively from 0. If an item is removed, other items will be renumbered.</db:para>
<db:para>The following code fragment shows a safe way to remove all items from a layout:</db:para>
<db:programlisting language="cpp">QLayoutItem *child;
while ((child = layout-&amp;gt;takeAt(0)) != nullptr) {
    ...
    delete child-&amp;gt;widget(); // delete the widget
    delete child;   // delete the layout item
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qlayout.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unsetContentsMargins">
<db:title>[since 6.1] void QLayout::unsetContentsMargins()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>unsetContentsMargins</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">contentsMargins</db:synopsisinfo>
<db:synopsisinfo role="signature">void unsetContentsMargins()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unsets any user-defined margins around the layout. The layout will use the default values provided by the style.</db:para>
<db:note>
<db:para>Resetter function for property contentsMargins. </db:para>
</db:note>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#setContentsMargins">setContentsMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="update">
<db:title>void QLayout::update()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>update</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void update()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Updates the layout for <db:link xlink:href="qlayout.xml#parentWidget">parentWidget</db:link>().</db:para>
<db:para>You should generally not need to call this because it is automatically called at the most appropriate times.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#activate">activate</db:link>()</db:member>
<db:member><db:link xlink:href="qlayout.xml#invalidate">invalidate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
