<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Stickman Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Stickman example shows how to animate transitions in a state machine to implement key frame animations.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtCore module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;animation.h&quot;
#include &quot;node.h&quot;
#include &quot;lifecycle.h&quot;
#include &quot;stickman.h&quot;
#include &quot;graphicsview.h&quot;
#include &quot;rectbutton.h&quot;

#include &lt;QtCore&gt;
#include &lt;QtWidgets&gt;

int main(int argc, char **argv)
{
    Q_INIT_RESOURCE(stickman);
    QApplication app(argc, argv);

    StickMan *stickMan = new StickMan;
    stickMan-&gt;setDrawSticks(false);

    QGraphicsTextItem *textItem = new QGraphicsTextItem();
    textItem-&gt;setHtml(&quot;&lt;font color=\&quot;white\&quot;&gt;&lt;b&gt;Stickman&lt;/b&gt;&quot;
        &quot;&lt;p&gt;&quot;
        &quot;Tell the stickman what to do!&quot;
        &quot;&lt;/p&gt;&quot;
        &quot;&lt;p&gt;&lt;i&gt;&quot;
        &quot;&lt;li&gt;Press &lt;font color=\&quot;purple\&quot;&gt;J&lt;/font&gt; to make the stickman jump.&lt;/li&gt;&quot;
        &quot;&lt;li&gt;Press &lt;font color=\&quot;purple\&quot;&gt;D&lt;/font&gt; to make the stickman dance.&lt;/li&gt;&quot;
        &quot;&lt;li&gt;Press &lt;font color=\&quot;purple\&quot;&gt;C&lt;/font&gt; to make him chill out.&lt;/li&gt;&quot;
        &quot;&lt;li&gt;When you are done, press &lt;font color=\&quot;purple\&quot;&gt;Escape&lt;/font&gt;.&lt;/li&gt;&quot;
        &quot;&lt;/i&gt;&lt;/p&gt;&quot;
        &quot;&lt;p&gt;If he is unlucky, the stickman will get struck by lightning, and never jump, dance or chill out again.&quot;
        &quot;&lt;/p&gt;&lt;/font&gt;&quot;);
    qreal w = textItem-&gt;boundingRect().width();
    QRectF stickManBoundingRect = stickMan-&gt;mapToScene(stickMan-&gt;boundingRect()).boundingRect();
    textItem-&gt;setPos(-w / 2.0, stickManBoundingRect.bottom() + 25.0);

    QGraphicsScene scene;
    scene.addItem(stickMan);

    scene.addItem(textItem);
    scene.setBackgroundBrush(Qt::black);

    GraphicsView view;
    view.setRenderHints(QPainter::Antialiasing);
    view.setTransformationAnchor(QGraphicsView::NoAnchor);
    view.setScene(&amp;scene);

    QRectF sceneRect = scene.sceneRect();
    // making enough room in the scene for stickman to jump and die
    view.resize(sceneRect.width() + 100, sceneRect.height() + 100);
    view.setSceneRect(sceneRect);

    view.show();
    view.setFocus();

    LifeCycle cycle(stickMan, &amp;view);
    cycle.setDeathAnimation(&quot;:/animations/dead.bin&quot;);

    cycle.addActivity(&quot;:/animations/jumping.bin&quot;, Qt::Key_J);
    cycle.addActivity(&quot;:/animations/dancing.bin&quot;, Qt::Key_D);
    cycle.addActivity(&quot;:/animations/chilling.bin&quot;, Qt::Key_C);

    cycle.start();

    return app.exec();
}

</db:programlisting>
</db:article>
