<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>CMake Commands in Qt6 GRPC</db:title>
<db:productname>QtGrpc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GRPC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt GRPC Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>You should call the following CMake commands to use the Qt6::Grpc module in your project:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Grpc)

target_link_libraries(mytarget PRIVATE Qt6::Grpc)
</db:programlisting>
<db:para>To generate gRPC services using Qt GRPC and link them with your program consider the following example:</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.16...3.22)
project(MyProject)

find_package(Qt6 REQUIRED COMPONENTS Protobuf Grpc)
qt_standard_project_setup()

qt_add_protobuf(MyProtoMessageLib
    PROTO_FILES
        path/to/helloworld.proto
    PROTO_INCLUDES
        path/to/proto/include
)

qt_add_grpc(MyGrpcClient CLIENT
    PROTO_FILES
        path/to/helloworld.proto
    PROTO_INCLUDES
        path/to/proto/include
)

qt_add_executable(MyApp main.cpp)

target_link_libraries(MyApp PRIVATE MyGrpcClient MyProtoMessageLib Qt6::Protobuf)
</db:programlisting>
<db:para>The example above calls the <db:code>qt_add_grpc()</db:code> CMake function to generate a library called <db:code>MyGrpcClient</db:code>.</db:para>
<db:note>
<db:para>if the <db:code>.proto</db:code> file API contains messages, then the <db:code>qt_add_protobuf()</db:code> CMake function should be called to generate protobuf message classes for the project.</db:para>
</db:note>
<db:para>Finally, the example creates a target for an executable called <db:emphasis>MyApp</db:emphasis> which links to the <db:emphasis>MyGrpcClient</db:emphasis> and <db:emphasis>MyProtoMessageLib</db:emphasis> libraries.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="cmake-command-reference.xml">CMake Command Reference</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
<db:section>
<db:title>Contents</db:title>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="qt-add-grpc.xml" xlink:role="page">qt_add_grpc</db:link></db:term>
<db:listitem>
<db:para>Generates Qt-based C++ services using a protobuf schema</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
