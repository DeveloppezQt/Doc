<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Style Sheet Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Style Sheet Example shows how to use style sheets.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:figure>
<db:title>Screen Shot of the Pagefold style sheet</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/stylesheet-pagefold.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>The Style Sheet example shows how widgets can be styled using Qt Style Sheets. You can open the style editor by selecting <db:guilabel>File</db:guilabel> &gt; <db:guilabel>Edit</db:guilabel> Style Sheet, to select an existing style sheet or design your own style and load it.</db:para>
<db:para>The Style Sheet example consists of 2 classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>MainWindow</db:para>
</db:listitem>
<db:listitem>
<db:para>StyleSheetEditor</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="mainwindow-class">
<db:title>MainWindow Class</db:title>
<db:para>MainWindow inherits <db:link xlink:href="qwidget.xml">QWidget</db:link>, and is the application's main window defined in mainwindow.ui. The style of MainWindow can be modified with StyleSheetEditor.</db:para>
</db:section>
<db:section xml:id="stylesheeteditor-class">
<db:title>StyleSheetEditor Class</db:title>
<db:para>StyleSheetEditor enables you to open an editor where you can load an existing style sheet. It is also possible to define a new stylesheet and load it. Its layout is defined in stylesheeteditor.ui.</db:para>
<db:programlisting language="cpp">    connect(ui.styleCombo, &amp;amp;QComboBox::textActivated, this, &amp;amp;StyleSheetEditor::setStyleName);
</db:programlisting>
<db:para>Sets the specified <db:code role="parameter">styleName</db:code> and grays the applyButton.</db:para>
<db:programlisting language="cpp">    connect(ui.styleSheetCombo, &amp;amp;QComboBox::textActivated, this, &amp;amp;StyleSheetEditor::setStyleSheetName);
</db:programlisting>
<db:para>Loads the stylesheet from styleSheetName.</db:para>
<db:programlisting language="cpp">void StyleSheetEditor::setModified()
</db:programlisting>
<db:para>Enables the applyButton when the text in the buffer has changed.</db:para>
<db:programlisting language="cpp">void StyleSheetEditor::apply()
</db:programlisting>
<db:para>Sets the stylesheet properties in <db:link xlink:href="qapplication.xml#qApp">qApp</db:link> and disables the applyButton.</db:para>
<db:programlisting language="cpp">void StyleSheetEditor::loadStyleSheet(const QString &amp;amp;sheetName)
</db:programlisting>
<db:para>Loads the specified <db:code role="parameter">sheetName</db:code>, and sets its properties in <db:link xlink:href="qapplication.xml#qApp">qApp</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/widgets/stylesheet?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
