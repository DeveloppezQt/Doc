<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCanBus Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcanbus.xml">QCanBus</db:link> class handles registration and creation of bus plugins.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCanBus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS SerialBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::SerialBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcanbus.xml">QCanBus</db:link> loads Qt CAN Bus plugins at runtime. The ownership of serial bus plugins is transferred to the loader.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="availableDevices">
<db:title>QList&lt;QCanBusDeviceInfo&gt; QCanBus::availableDevices(const QString &amp;<db:emphasis>plugin</db:emphasis>, QString *<db:emphasis>errorMessage</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QCanBusDeviceInfo&gt;</db:type>
<db:methodname>availableDevices</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>plugin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>errorMessage</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QCanBusDeviceInfo&gt; availableDevices(const QString &amp;plugin, QString *errorMessage) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the available interfaces for <db:code role="parameter">plugin</db:code>. In case of failure, the optional parameter <db:code role="parameter">errorMessage</db:code> returns a textual error description.</db:para>
<db:note>
<db:para>Some plugins might not or only partially support this function.</db:para>
</db:note>
<db:para>For example, the following call returns a list of all available SocketCAN interfaces (which can be used for <db:link xlink:href="qcanbus.xml#createDevice">createDevice</db:link>()):</db:para>
<db:programlisting language="cpp">QString errorString;
const QList&amp;lt;QCanBusDeviceInfo&amp;gt; devices = QCanBus::instance()-&amp;gt;availableDevices(
    QStringLiteral(&quot;socketcan&quot;), &amp;amp;errorString);
if (!errorString.isEmpty())
    qDebug() &amp;lt;&amp;lt; errorString;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbus.xml#createDevice">createDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createDevice">
<db:title>QCanBusDevice *QCanBus::createDevice(const QString &amp;<db:emphasis>plugin</db:emphasis>, const QString &amp;<db:emphasis>interfaceName</db:emphasis>, QString *<db:emphasis>errorMessage</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCanBusDevice *</db:type>
<db:methodname>createDevice</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>plugin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>interfaceName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>errorMessage</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanBusDevice * createDevice(const QString &amp;plugin, const QString &amp;interfaceName, QString *errorMessage) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a CAN bus device. <db:code role="parameter">plugin</db:code> is the name of the plugin as returned by the <db:link xlink:href="qcanbus.xml#plugins">plugins</db:link>() method. <db:code role="parameter">interfaceName</db:code> is the CAN bus interface name. In case of failure, the optional parameter <db:code role="parameter">errorMessage</db:code> returns a textual error description.</db:para>
<db:para>Ownership of the returned plugin is transferred to the caller. Returns <db:code>nullptr</db:code> if no suitable device can be found.</db:para>
<db:para>For example, the following call would connect to the SocketCAN interface vcan0:</db:para>
<db:programlisting language="cpp">QString errorString;
QCanBusDevice *device = QCanBus::instance()-&amp;gt;createDevice(
    QStringLiteral(&quot;socketcan&quot;), QStringLiteral(&quot;vcan0&quot;), &amp;amp;errorString);
if (!device)
    qDebug() &amp;lt;&amp;lt; errorString;
else
    device-&amp;gt;connectDevice();
</db:programlisting>
<db:note>
<db:para>The <db:code role="parameter">interfaceName</db:code> is plugin-dependent. See the corresponding plugin documentation for more information: <db:link xlink:href="qtcanbus-backends.xml#can-bus-plugins">CAN Bus Plugins</db:link>. To get a list of available interfaces, <db:link xlink:href="qcanbus.xml#availableDevices">availableDevices</db:link>() can be used.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanbus.xml#availableDevices">availableDevices</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="instance">
<db:title>[static] QCanBus *QCanBus::instance()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QCanBus *</db:type>
<db:methodname>instance</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanBus * instance()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the <db:link xlink:href="qcanbus.xml">QCanBus</db:link> class. The object is loaded if necessary. <db:link xlink:href="qcanbus.xml">QCanBus</db:link> uses the singleton design pattern.</db:para>
</db:section>
<db:section xml:id="plugins">
<db:title>QStringList QCanBus::plugins() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>plugins</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList plugins() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of identifiers for all loaded plugins.</db:para>
</db:section>
</db:section>
</db:article>
