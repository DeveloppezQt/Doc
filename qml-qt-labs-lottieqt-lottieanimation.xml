<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>LottieAnimation QML Type</db:title>
<db:productname>QtLottieAnimation</db:productname>
<db:edition>Qt Lottie Animation | Commercial or GPLv3</db:edition>
<db:titleabbrev>Bodymovin Player for Qt</db:titleabbrev>
<db:abstract>
<db:para>A Bodymovin player for Qt.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Qt.labs.lottieqt 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qt-labs-lottieqt-lottieanimation.xml">LottieAnimation</db:link> type shows Bodymovin format files.</db:para>
<db:para><db:link xlink:href="qml-qt-labs-lottieqt-lottieanimation.xml">LottieAnimation</db:link> is used to load and render Bodymovin files exported from Adobe After Effects. Currently, only subset of the full Bodymovin specification is supported. Most notable deviations are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Only Shape layer supported</db:para>
</db:listitem>
<db:listitem>
<db:para>Only integer frame-mode of a timeline supported (real frame numbers and time are rounded to the nearest integer)</db:para>
</db:listitem>
<db:listitem>
<db:para>Expressions are not supported</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For the full list of devations, please see see the <db:link xlink:href="qpainter.xml#limitations">Limitations</db:link> section.</db:para>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para>The following example shows a simple usage of the <db:link xlink:href="qml-qt-labs-lottieqt-lottieanimation.xml">LottieAnimation</db:link> type</db:para>
<db:programlisting language="qml">LottieAnimation {
    loops: 2
    quality: LottieAnimation.MediumQuality
    source: &quot;animation.json&quot;
    autoPlay: false
    onStatusChanged: {
        if (status === LottieAnimation.Ready) {
            // any acvities needed before
            // playing starts go here
            gotoAndPlay(startFrame);
        }
    }
    onFinished: {
        console.log(&quot;Finished playing&quot;)
    }
}
</db:programlisting>
<db:note>
<db:para>Changing width or height of the element does not change the size of the animation within. Also, it is not possible to align the the content inside of a <db:code>LottieAnimation</db:code> element. To achieve this, position the animation inside e.g. an <db:code>Item</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="rendering-performance">
<db:title>Rendering Performance</db:title>
<db:para>Internally, the rendered frame data is cached to improve performance. You can control the memory usage by setting the QLOTTIE_RENDER_CACHE_SIZE environment variable (default value is 2).</db:para>
<db:para>You can monitor the rendering performance by turning on two logging categories:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>qt.lottieqt.bodymovin.render</db:code> - Provides information how the animation is rendered</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qt.lottieqt.bodymovin.render.thread</db:code> - Provides information how the rendering process proceeds.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Specifically, you can monitor does the frame cache gets constantly full, or does the rendering process have to wait for frames to become ready. The first case implies that the animation is too complex, and the rendering cannot keep up the pace. Try making the animation simpler, or optimize the QML scene.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoPlay-prop">
<db:title>autoPlay : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>autoPlay</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines whether the player will start playing animation automatically after the animation file has been loaded.</db:para>
<db:para>The default value is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="direction-prop">
<db:title>direction : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>direction</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the direction of rendering.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>LottieAnimation.Forward</db:para>
</db:td>
<db:td>
<db:para>Forward direction (Default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>LottieAnimation.Reverse</db:para>
</db:td>
<db:td>
<db:para>Reverse direction</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="endFrame-prop">
<db:title>[read-only] endFrame : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>endFrame</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Frame number of the end of the animation. The value is available after the animation has been loaded and ready to play.</db:para>
</db:section>
<db:section xml:id="frameRate-prop">
<db:title>frameRate : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>frameRate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the frame rate value of the Bodymovin animation.</db:para>
<db:para><db:code>frameRate</db:code> changes after the asset has been loaded. Changing the frame rate does not have effect before that, as the value defined in the asset overrides the value. To change the frame rate, you can write:</db:para>
<db:programlisting language="qml">LottieAnimation {
    source: &quot;animation.json&quot;
    onStatusChanged: {
        if (status === LottieAnimation.Ready)
            frameRate = 60;
    }
</db:programlisting>
</db:section>
<db:section xml:id="loops-prop">
<db:title>loops : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>loops</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of loops the player will repeat. The value <db:code>LottieAnimation.Infinite</db:code> means that the the player repeats the animation continuously.</db:para>
<db:para>The default value is <db:code>1</db:code>.</db:para>
</db:section>
<db:section xml:id="quality-prop">
<db:title>quality : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>quality</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Speficies the rendering quality of the bodymovin player. If <db:code>LowQuality</db:code> is selected the rendering will happen into a frame buffer object, whereas with other options, the rendering will be done onto <db:code>QImage</db:code> (which in turn will be rendered on the screen).</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>LottieAnimation.LowQuality</db:para>
</db:td>
<db:td>
<db:para>Antialiasing or a smooth pixmap transformation algorithm are not used</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>LottieAnimation.MediumQuality</db:para>
</db:td>
<db:td>
<db:para>Smooth pixmap transformation algorithm is used but no antialiasing (Default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>LottieAnimation.HighQuality</db:para>
</db:td>
<db:td>
<db:para>Antialiasing and a smooth pixmap tranformation algorithm are both used</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>source</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The source of the Bodymovin asset that <db:link xlink:href="qml-qt-labs-lottieqt-lottieanimation.xml">LottieAnimation</db:link> plays.</db:para>
<db:para><db:link xlink:href="qml-qt-labs-lottieqt-lottieanimation.xml">LottieAnimation</db:link> can handle any URL scheme supported by Qt. The URL may be absolute, or relative to the URL of the component.</db:para>
<db:para>Setting the source property starts loading the animation asynchronously. To monitor progress of loading, connect to the <db:link xlink:href="qml-qt-labs-lottieqt-lottieanimation.xml#status-prop">status</db:link> change signal.</db:para>
</db:section>
<db:section xml:id="startFrame-prop">
<db:title>[read-only] startFrame : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>startFrame</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Frame number of the start of the animation. The value is available after the animation has been loaded and ready to play.</db:para>
</db:section>
<db:section xml:id="status-prop">
<db:title>status : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>status</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current status of the <db:link xlink:href="qml-qt-labs-lottieqt-lottieanimation.xml">LottieAnimation</db:link> element.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>LottieAnimation.Null</db:para>
</db:td>
<db:td>
<db:para>An initial value that is used when the source is not defined (Default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>LottieAnimation.Loading</db:para>
</db:td>
<db:td>
<db:para>The player is loading a Bodymovin file</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>LottieAnimation.Ready</db:para>
</db:td>
<db:td>
<db:para>Loading has finished successfully and the player is ready to play the animation</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>LottieAnimation.Error</db:para>
</db:td>
<db:td>
<db:para>An error occurred while loading the animation</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example, you could implement <db:code>onStatusChanged</db:code> signal handler to monitor progress of loading an animation as follows:</db:para>
<db:programlisting language="qml">LottieAnimation {
    source: &quot;animation.json&quot;
    autoPlay: false
    onStatusChanged: {
        if (status === LottieAnimation.Ready)
            start();
    }
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="finished-signal">
<db:title>finished()</db:title>
<db:para>This signal is emitted when the player has finished playing. In case of looping, the signal is emitted when the last loop has been finished.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onFinished</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="getDuration-method">
<db:title>double getDuration(bool <db:emphasis>inFrames</db:emphasis>)</db:title>
<db:para>Returns the duration of the currently playing asset.</db:para>
<db:para>If a given <db:code role="parameter">inFrames</db:code> is <db:code>true</db:code>, the return value is the duration in number of frames. Otherwise, returns the duration in seconds.</db:para>
</db:section>
<db:section xml:id="gotoAndPlay-method">
<db:title>void gotoAndPlay(int <db:emphasis>frame</db:emphasis>)</db:title>
<db:para>Plays the asset from the given <db:code role="parameter">frame</db:code>.</db:para>
</db:section>
<db:section xml:id="gotoAndPlay-method-1">
<db:title>bool gotoAndPlay(string <db:emphasis>frameMarker</db:emphasis>)</db:title>
<db:para>Plays the asset from the frame that has a marker with the given <db:code role="parameter">frameMarker</db:code>. Returns <db:code>true</db:code> if the frameMarker was found, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="gotoAndStop-method">
<db:title>void gotoAndStop(int <db:emphasis>frame</db:emphasis>)</db:title>
<db:para>Moves the playhead to the given <db:code role="parameter">frame</db:code> and stops.</db:para>
</db:section>
<db:section xml:id="gotoAndStop-method-1">
<db:title>bool gotoAndStop(string <db:emphasis>frameMarker</db:emphasis>)</db:title>
<db:para>Moves the playhead to the given marker and stops. Returns <db:code>true</db:code> if <db:code role="parameter">frameMarker</db:code> was found, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="pause-method">
<db:title>void pause()</db:title>
<db:para>Pauses the playback.</db:para>
</db:section>
<db:section xml:id="play-method">
<db:title>void play()</db:title>
<db:para>Starts or continues playing from the current position.</db:para>
</db:section>
<db:section xml:id="start-method">
<db:title>void start()</db:title>
<db:para>Starts playing the animation from the beginning.</db:para>
</db:section>
<db:section xml:id="stop-method">
<db:title>void stop()</db:title>
<db:para>Stops the playback and returns to <db:link xlink:href="qml-qt-labs-lottieqt-lottieanimation.xml#startFrame-prop">startFrame</db:link>.</db:para>
</db:section>
<db:section xml:id="togglePause-method">
<db:title>void togglePause()</db:title>
<db:para>Toggles the status of player between playing and paused states.</db:para>
</db:section>
</db:section>
</db:article>
