<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Advanced Tutorial 3 - Implementing the Game Logic</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtquick-tutorials-samegame-samegame2-example.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="QML Advanced Tutorial 2 - Populating the Game Canvas"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtquick-tutorials-samegame-samegame4-example.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="QML Advanced Tutorial 4 - Finishing Touches"/></db:extendedlink>
<db:abstract>
<db:para>Qt Quick Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="making-a-playable-game">
<db:title>Making a Playable Game</db:title>
<db:para>Now that we have all the game components, we can add the game logic that dictates how a player interacts with the blocks and plays the game until it is won or lost.</db:para>
<db:para>To do this, we have added the following functions to <db:code>samegame.js</db:code>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>handleClick(x,y)</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>floodFill(xIdx,yIdx,type)</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>shuffleDown()</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>victoryCheck()</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>floodMoveCheck(xIdx, yIdx, type)</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>As this is a tutorial about QML, not game design, we will only discuss <db:code>handleClick()</db:code> and <db:code>victoryCheck()</db:code> below since they interface directly with the QML types. Note that although the game logic here is written in JavaScript, it could have been written in C++ and then exposed to QML.</db:para>
<db:section xml:id="enabling-mouse-click-interaction">
<db:title>Enabling Mouse Click Interaction</db:title>
<db:para>To make it easier for the JavaScript code to interface with the QML types, we have added an Item called <db:code>gameCanvas</db:code> to <db:code>samegame.qml</db:code>. It replaces the background as the item which contains the blocks. It also accepts mouse input from the user. Here is the item code:</db:para>
<db:programlisting language="qml">        Item {
            id: gameCanvas

            property int score: 0
            property int blockSize: 40

            width: parent.width - (parent.width % blockSize)
            height: parent.height - (parent.height % blockSize)
            anchors.centerIn: parent

            MouseArea {
                anchors.fill: parent
                onClicked: (mouse)=&amp;gt; SameGame.handleClick(mouse.x, mouse.y)
            }
        }
</db:programlisting>
<db:para>The <db:code>gameCanvas</db:code> item is the exact size of the board, and has a <db:code>score</db:code> property and a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to handle mouse clicks. The blocks are now created as its children, and its dimensions are used to determine the board size so that the application scales to the available screen size. Since its size is bound to a multiple of <db:code>blockSize</db:code>, <db:code>blockSize</db:code> was moved out of <db:code>samegame.js</db:code> and into <db:code>samegame.qml</db:code> as a QML property. Note that it can still be accessed from the script.</db:para>
<db:para>When clicked, the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> calls <db:code>handleClick()</db:code> in <db:code>samegame.js</db:code>, which determines whether the player's click should cause any blocks to be removed, and updates <db:code>gameCanvas.score</db:code> with the current score if necessary. Here is the <db:code>handleClick()</db:code> function:</db:para>
<db:programlisting language="cpp">function handleClick(xPos, yPos) {
    var column = Math.floor(xPos / gameCanvas.blockSize);
    var row = Math.floor(yPos / gameCanvas.blockSize);
    if (column &amp;gt;= maxColumn || column &amp;lt; 0 || row &amp;gt;= maxRow || row &amp;lt; 0)
        return;
    if (board[index(column, row)] == null)
        return;
    //If it's a valid block, remove it and all connected (does nothing if it's not connected)
    floodFill(column, row, -1);
    if (fillFound &amp;lt;= 0)
        return;
    gameCanvas.score += (fillFound - 1) * (fillFound - 1);
    shuffleDown();
    victoryCheck();
}
</db:programlisting>
<db:para>Note that if <db:code>score</db:code> was a global variable in the <db:code>samegame.js</db:code> file you would not be able to bind to it. You can only bind to QML properties.</db:para>
</db:section>
<db:section xml:id="updating-the-score">
<db:title>Updating the Score</db:title>
<db:para>When the player clicks a block and triggers <db:code>handleClick()</db:code>, <db:code>handleClick()</db:code> also calls <db:code>victoryCheck()</db:code> to update the score and to check whether the player has completed the game. Here is the <db:code>victoryCheck()</db:code> code:</db:para>
<db:programlisting language="cpp">function victoryCheck() {
    //Award bonus points if no blocks left
    var deservesBonus = true;
    for (var column = maxColumn - 1; column &amp;gt;= 0; column--)
        if (board[index(column, maxRow - 1)] != null)
        deservesBonus = false;
    if (deservesBonus)
        gameCanvas.score += 500;

    //Check whether game has finished
    if (deservesBonus || !(floodMoveCheck(0, maxRow - 1, -1)))
        dialog.show(&quot;Game Over. Your score is &quot; + gameCanvas.score);
}
</db:programlisting>
<db:para>This updates the <db:code>gameCanvas.score</db:code> value and displays a &quot;Game Over&quot; dialog if the game is finished.</db:para>
<db:para>The Game Over dialog is created using a <db:code>Dialog</db:code> type that is defined in <db:code>Dialog.qml</db:code>. Here is the <db:code>Dialog.qml</db:code> code. Notice how it is designed to be usable imperatively from the script file, via the functions and signals:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    id: container

    function show(text) {
        dialogText.text = text;
        container.opacity = 1;
    }

    function hide() {
        container.opacity = 0;
    }

    width: dialogText.width + 20
    height: dialogText.height + 20
    opacity: 0

    Text {
        id: dialogText
        anchors.centerIn: parent
        text: &quot;&quot;
    }

    MouseArea {
        anchors.fill: parent
        onClicked: hide();
    }
}
</db:programlisting>
<db:para>And this is how it is used in the main <db:code>samegame.qml</db:code> file:</db:para>
<db:programlisting language="qml">    Dialog {
        id: dialog
        anchors.centerIn: parent
        z: 100
    }
</db:programlisting>
<db:para>We give the dialog a <db:link xlink:href="qml-qtquick-item.xml#z-prop">z</db:link> value of 100 to ensure it is displayed on top of our other components. The default <db:code>z</db:code> value for an item is 0.</db:para>
</db:section>
<db:section xml:id="a-dash-of-color">
<db:title>A Dash of Color</db:title>
<db:para>It's not much fun to play Same Game if all the blocks are the same color, so we've modified the <db:code>createBlock()</db:code> function in <db:code>samegame.js</db:code> to randomly create a different type of block (for either red, green or blue) each time it is called. <db:code>Block.qml</db:code> has also changed so that each block contains a different image depending on its type:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    id: block

    property int type: 0

    Image {
        id: img

        anchors.fill: parent
        source: {
            if (type == 0)
                return &quot;pics/redStone.png&quot;;
            else if (type == 1)
                return &quot;pics/blueStone.png&quot;;
            else
                return &quot;pics/greenStone.png&quot;;
        }
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="a-working-game">
<db:title>A Working Game</db:title>
<db:para>Now we now have a working game! The blocks can be clicked, the player can score, and the game can end (and then you can start a new one). Here is a screenshot of what has been accomplished so far:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-adv-tutorial3.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This is what <db:code>samegame.qml</db:code> looks like now:</db:para>
<db:programlisting language="qml">import QtQuick
import &quot;samegame.js&quot; as SameGame

Rectangle {
    id: screen

    width: 490; height: 720

    SystemPalette { id: activePalette }

    Item {
        width: parent.width
        anchors { top: parent.top; bottom: toolBar.top }

        Image {
            id: background
            anchors.fill: parent
            source: &quot;pics/background.jpg&quot;
            fillMode: Image.PreserveAspectCrop
        }

        Item {
            id: gameCanvas

            property int score: 0
            property int blockSize: 40

            width: parent.width - (parent.width % blockSize)
            height: parent.height - (parent.height % blockSize)
            anchors.centerIn: parent

            MouseArea {
                anchors.fill: parent
                onClicked: (mouse)=&amp;gt; SameGame.handleClick(mouse.x, mouse.y)
            }
        }
    }

    Dialog {
        id: dialog
        anchors.centerIn: parent
        z: 100
    }

    Rectangle {
        id: toolBar
        width: parent.width; height: 30
        color: activePalette.window
        anchors.bottom: screen.bottom

        Button {
            anchors { left: parent.left; verticalCenter: parent.verticalCenter }
            text: &quot;New Game&quot;
            onClicked: SameGame.startNewGame()
        }

        Text {
            id: score
            anchors { right: parent.right; verticalCenter: parent.verticalCenter }
            text: &quot;Score: Who knows?&quot;
        }
    }
}
</db:programlisting>
<db:para>The game works, but it's a little boring right now. Where are the smooth animated transitions? Where are the high scores? If you were a QML expert you could have written these in the first iteration, but in this tutorial they've been saved until the next chapter - where your application becomes alive!</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/tutorials/samegame/samegame3?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
