<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAudioInput Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> class provides an interface for receiving audio data from an audio input device.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAudioInput</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAudioInput is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_audio</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>You can construct an audio input with the system's <db:link xlink:href="qaudiodeviceinfo.xml#defaultInputDevice">default audio input device</db:link>. It is also possible to create <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> with a specific <db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link>. When you create the audio input, you should also send in the <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> to be used for the recording (see the <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> class description for details).</db:para>
<db:para>To record to a file:</db:para>
<db:para><db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> lets you record audio with an audio input device. The default constructor of this class will use the systems default audio device, but you can also specify a <db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link> for a specific device. You also need to pass in the <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> in which you wish to record.</db:para>
<db:para>Starting up the <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> is simply a matter of calling <db:link xlink:href="qaudioinput.xml#start">start</db:link>() with a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> opened for writing. For instance, to record to a file, you can:</db:para>
<db:programlisting language="cpp">QFile destinationFile;   // Class member
QAudioInput* audio; // Class member
{
    destinationFile.setFileName(&quot;/tmp/test.raw&quot;);
    destinationFile.open( QIODevice::WriteOnly | QIODevice::Truncate );

    QAudioFormat format;
    // Set up the desired format, for example:
    format.setSampleRate(8000);
    format.setChannelCount(1);
    format.setSampleSize(8);
    format.setCodec(&quot;audio/pcm&quot;);
    format.setByteOrder(QAudioFormat::LittleEndian);
    format.setSampleType(QAudioFormat::UnSignedInt);

    QAudioDeviceInfo info = QAudioDeviceInfo::defaultInputDevice();
    if (!info.isFormatSupported(format)) {
        qWarning() &lt;&lt; &quot;Default format not supported, trying to use the nearest.&quot;;
        format = info.nearestFormat(format);
    }

    audio = new QAudioInput(format, this);
    connect(audio, SIGNAL(stateChanged(QAudio::State)), this, SLOT(handleStateChanged(QAudio::State)));

    QTimer::singleShot(3000, this, SLOT(stopRecording()));
    audio-&gt;start(&amp;destinationFile);
    // Records audio for 3000ms
}
</db:programlisting>
<db:para>This will start recording if the format specified is supported by the input device (you can check this with <db:link xlink:href="qaudiodeviceinfo.xml#isFormatSupported">QAudioDeviceInfo::isFormatSupported</db:link>(). In case there are any snags, use the <db:link xlink:href="qaudioinput.xml#error">error</db:link>() function to check what went wrong. We stop recording in the <db:code>stopRecording()</db:code> slot.</db:para>
<db:programlisting language="cpp">void AudioInputExample::stopRecording()
{
    audio-&gt;stop();
    destinationFile.close();
    delete audio;
}
</db:programlisting>
<db:para>At any point in time, <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> will be in one of four states: active, suspended, stopped, or idle. These states are specified by the <db:link xlink:href="qaudio.xml#State-enum">QAudio::State</db:link> enum. You can request a state change directly through <db:link xlink:href="qaudioinput.xml#suspend">suspend</db:link>(), <db:link xlink:href="qaudioinput.xml#resume">resume</db:link>(), <db:link xlink:href="qaudioinput.xml#stop">stop</db:link>(), <db:link xlink:href="qaudioinput.xml#reset">reset</db:link>(), and <db:link xlink:href="qaudioinput.xml#start">start</db:link>(). The current state is reported by <db:link xlink:href="qaudioinput.xml#state">state</db:link>(). <db:link xlink:href="qaudiooutput.xml">QAudioOutput</db:link> will also signal you when the state changes (<db:link xlink:href="qaudioinput.xml#stateChanged">stateChanged</db:link>()).</db:para>
<db:para><db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> provides several ways of measuring the time that has passed since the <db:link xlink:href="qaudioinput.xml#start">start</db:link>() of the recording. The <db:code>processedUSecs()</db:code> function returns the length of the stream in microseconds written, i.e., it leaves out the times the audio input was suspended or idle. The <db:link xlink:href="qaudioinput.xml#elapsedUSecs">elapsedUSecs</db:link>() function returns the time elapsed since <db:link xlink:href="qaudioinput.xml#start">start</db:link>() was called regardless of which states the <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> has been in.</db:para>
<db:para>If an error should occur, you can fetch its reason with <db:link xlink:href="qaudioinput.xml#error">error</db:link>(). The possible error reasons are described by the <db:link xlink:href="qaudio.xml#Error-enum">QAudio::Error</db:link> enum. The <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> will enter the <db:link xlink:href="qaudio.xml#State-enum">StoppedState</db:link> when an error is encountered. Connect to the <db:link xlink:href="qaudioinput.xml#stateChanged">stateChanged</db:link>() signal to handle the error:</db:para>
<db:programlisting language="cpp">void AudioInputExample::handleStateChanged(QAudio::State newState)
{
    switch (newState) {
        case QAudio::StoppedState:
            if (audio-&gt;error() != QAudio::NoError) {
                // Error handling
            } else {
                // Finished recording
            }
            break;

        case QAudio::ActiveState:
            // Started recording - read from IO device
            break;

        default:
            // ... other cases as appropriate
            break;
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiooutput.xml">QAudioOutput</db:link></db:member>
<db:member><db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAudioInput">
<db:title>[explicit] QAudioInput::QAudioInput(const QAudioFormat &amp;<db:emphasis>format</db:emphasis> = QAudioFormat(), QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Construct a new audio input and attach it to <db:code role="parameter">parent</db:code>. The default audio input device is used with the output <db:code role="parameter">format</db:code> parameters.</db:para>
</db:section>
<db:section xml:id="QAudioInput-1">
<db:title>[explicit] QAudioInput::QAudioInput(const QAudioDeviceInfo &amp;<db:emphasis>audioDevice</db:emphasis>, const QAudioFormat &amp;<db:emphasis>format</db:emphasis> = QAudioFormat(), QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Construct a new audio input and attach it to <db:code role="parameter">parent</db:code>. The device referenced by <db:code role="parameter">audioDevice</db:code> is used with the input <db:code role="parameter">format</db:code> parameters.</db:para>
</db:section>
<db:section xml:id="dtor.QAudioInput">
<db:title>[virtual noexcept] QAudioInput::~QAudioInput()</db:title>
<db:para>Destroy this audio input.</db:para>
</db:section>
<db:section xml:id="bufferSize">
<db:title>int QAudioInput::bufferSize() const</db:title>
<db:para>Returns the audio buffer size in bytes.</db:para>
<db:para>If called before <db:link xlink:href="qaudioinput.xml#start">start</db:link>(), returns platform default value. If called before <db:link xlink:href="qaudioinput.xml#start">start</db:link>() but <db:link xlink:href="qaudioinput.xml#setBufferSize">setBufferSize</db:link>() was called prior, returns value set by <db:link xlink:href="qaudioinput.xml#setBufferSize">setBufferSize</db:link>(). If called after <db:link xlink:href="qaudioinput.xml#start">start</db:link>(), returns the actual buffer size being used. This may not be what was set previously by <db:link xlink:href="qaudioinput.xml#setBufferSize">setBufferSize</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioinput.xml#setBufferSize">setBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesReady">
<db:title>int QAudioInput::bytesReady() const</db:title>
<db:para>Returns the amount of audio data available to read in bytes.</db:para>
<db:para>Note: returned value is only valid while in <db:link xlink:href="qaudio.xml#State-enum">QAudio::ActiveState</db:link> or <db:link xlink:href="qaudio.xml#State-enum">QAudio::IdleState</db:link> state, otherwise returns zero.</db:para>
</db:section>
<db:section xml:id="elapsedUSecs">
<db:title>qint64 QAudioInput::elapsedUSecs() const</db:title>
<db:para>Returns the microseconds since <db:link xlink:href="qaudioinput.xml#start">start</db:link>() was called, including time in Idle and Suspend states.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QAudio::Error QAudioInput::error() const</db:title>
<db:para>Returns the error state.</db:para>
</db:section>
<db:section xml:id="format">
<db:title>QAudioFormat QAudioInput::format() const</db:title>
<db:para>Returns the <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> being used.</db:para>
</db:section>
<db:section xml:id="notify">
<db:title>void QAudioInput::notify()</db:title>
<db:para>This signal is emitted when x ms of audio data has been processed the interval set by <db:link xlink:href="qaudioinput.xml#setNotifyInterval">setNotifyInterval</db:link>(x).</db:para>
</db:section>
<db:section xml:id="notifyInterval">
<db:title>int QAudioInput::notifyInterval() const</db:title>
<db:para>Returns the notify interval in milliseconds.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioinput.xml#setNotifyInterval">setNotifyInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="periodSize">
<db:title>int QAudioInput::periodSize() const</db:title>
<db:para>Returns the period size in bytes.</db:para>
<db:para>Note: This is the recommended read size in bytes.</db:para>
</db:section>
<db:section xml:id="processedUSecs">
<db:title>qint64 QAudioInput::processedUSecs() const</db:title>
<db:para>Returns the amount of audio data processed since <db:link xlink:href="qaudioinput.xml#start">start</db:link>() was called in microseconds.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>void QAudioInput::reset()</db:title>
<db:para>Drops all audio data in the buffers, resets buffers to zero.</db:para>
</db:section>
<db:section xml:id="resume">
<db:title>void QAudioInput::resume()</db:title>
<db:para>Resumes processing audio data after a <db:link xlink:href="qaudioinput.xml#suspend">suspend</db:link>().</db:para>
<db:para>Sets <db:link xlink:href="qaudioinput.xml#error">error</db:link>() to <db:link xlink:href="qaudio.xml#Error-enum">QAudio::NoError</db:link>. Sets <db:link xlink:href="qaudioinput.xml#state">state</db:link>() to <db:link xlink:href="qaudio.xml#State-enum">QAudio::ActiveState</db:link> if you previously called start(<db:link xlink:href="qiodevice.xml">QIODevice</db:link>*). Sets <db:link xlink:href="qaudioinput.xml#state">state</db:link>() to <db:link xlink:href="qaudio.xml#State-enum">QAudio::IdleState</db:link> if you previously called <db:link xlink:href="qaudioinput.xml#start">start</db:link>(). emits <db:link xlink:href="qaudioinput.xml#stateChanged">stateChanged</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="setBufferSize">
<db:title>void QAudioInput::setBufferSize(int <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the audio buffer size to <db:code role="parameter">value</db:code> bytes.</db:para>
<db:para>Note: This function can be called anytime before <db:link xlink:href="qaudioinput.xml#start">start</db:link>(), calls to this are ignored after <db:link xlink:href="qaudioinput.xml#start">start</db:link>(). It should not be assumed that the buffer size set is the actual buffer size used, calling <db:link xlink:href="qaudioinput.xml#bufferSize">bufferSize</db:link>() anytime after <db:link xlink:href="qaudioinput.xml#start">start</db:link>() will return the actual buffer size being used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioinput.xml#bufferSize">bufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNotifyInterval">
<db:title>void QAudioInput::setNotifyInterval(int <db:emphasis>ms</db:emphasis>)</db:title>
<db:para>Sets the interval for <db:link xlink:href="qaudioinput.xml#notify">notify</db:link>() signal to be emitted. This is based on the <db:code role="parameter">ms</db:code> of audio data processed not on actual real-time. The minimum resolution of the timer is platform specific and values should be checked with <db:link xlink:href="qaudioinput.xml#notifyInterval">notifyInterval</db:link>() to confirm actual value being used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioinput.xml#notifyInterval">notifyInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVolume">
<db:title>void QAudioInput::setVolume(qreal <db:emphasis>volume</db:emphasis>)</db:title>
<db:para>Sets the input volume to <db:code role="parameter">volume</db:code>.</db:para>
<db:para>If the device does not support adjusting the input volume then <db:code role="parameter">volume</db:code> will be ignored and the input volume will remain at 1.0.</db:para>
<db:para>Note: Adjustments to the volume will change the volume of this audio stream, not the global volume.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioinput.xml#volume">volume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>QIODevice *QAudioInput::start()</db:title>
<db:para>Returns a pointer to the internal <db:link xlink:href="qiodevice.xml">QIODevice</db:link> being used to transfer data from the system's audio input. The device will already be open and <db:link xlink:href="qiodevice.xml#read">read</db:link>() can read data directly from it.</db:para>
<db:note>
<db:para>The pointer will become invalid after the stream is stopped or if you start another stream.</db:para>
</db:note>
<db:para>If the <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> is able to access the system's audio device, <db:link xlink:href="qaudioinput.xml#state">state</db:link>() returns <db:link xlink:href="qaudio.xml#State-enum">QAudio::IdleState</db:link>, <db:link xlink:href="qaudioinput.xml#error">error</db:link>() returns <db:link xlink:href="qaudio.xml#Error-enum">QAudio::NoError</db:link> and the <db:link xlink:href="qaudioinput.xml#stateChanged">stateChanged</db:link>() signal is emitted.</db:para>
<db:para>If a problem occurs during this process, <db:link xlink:href="qaudioinput.xml#error">error</db:link>() returns <db:link xlink:href="qaudio.xml#Error-enum">QAudio::OpenError</db:link>, <db:link xlink:href="qaudioinput.xml#state">state</db:link>() returns <db:link xlink:href="qaudio.xml#State-enum">QAudio::StoppedState</db:link> and the <db:link xlink:href="qaudioinput.xml#stateChanged">stateChanged</db:link>() signal is emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevice.xml">QIODevice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start-1">
<db:title>void QAudioInput::start(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Starts transferring audio data from the system's audio input to the <db:code role="parameter">device</db:code>. The <db:code role="parameter">device</db:code> must have been opened in the <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">WriteOnly</db:link>, <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">Append</db:link> or <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">ReadWrite</db:link> modes.</db:para>
<db:para>If the <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> is able to successfully get audio data, <db:link xlink:href="qaudioinput.xml#state">state</db:link>() returns either <db:link xlink:href="qaudio.xml#State-enum">QAudio::ActiveState</db:link> or <db:link xlink:href="qaudio.xml#State-enum">QAudio::IdleState</db:link>, <db:link xlink:href="qaudioinput.xml#error">error</db:link>() returns <db:link xlink:href="qaudio.xml#Error-enum">QAudio::NoError</db:link> and the <db:link xlink:href="qaudioinput.xml#stateChanged">stateChanged</db:link>() signal is emitted.</db:para>
<db:para>If a problem occurs during this process, <db:link xlink:href="qaudioinput.xml#error">error</db:link>() returns <db:link xlink:href="qaudio.xml#Error-enum">QAudio::OpenError</db:link>, <db:link xlink:href="qaudioinput.xml#state">state</db:link>() returns <db:link xlink:href="qaudio.xml#State-enum">QAudio::StoppedState</db:link> and the <db:link xlink:href="qaudioinput.xml#stateChanged">stateChanged</db:link>() signal is emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevice.xml">QIODevice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QAudio::State QAudioInput::state() const</db:title>
<db:para>Returns the state of audio processing.</db:para>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QAudioInput::stateChanged(QAudio::State <db:emphasis>state</db:emphasis>)</db:title>
<db:para>This signal is emitted when the device <db:code role="parameter">state</db:code> has changed.</db:para>
</db:section>
<db:section xml:id="stop">
<db:title>void QAudioInput::stop()</db:title>
<db:para>Stops the audio input, detaching from the system resource.</db:para>
<db:para>Sets <db:link xlink:href="qaudioinput.xml#error">error</db:link>() to <db:link xlink:href="qaudio.xml#Error-enum">QAudio::NoError</db:link>, <db:link xlink:href="qaudioinput.xml#state">state</db:link>() to <db:link xlink:href="qaudio.xml#State-enum">QAudio::StoppedState</db:link> and emit <db:link xlink:href="qaudioinput.xml#stateChanged">stateChanged</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="suspend">
<db:title>void QAudioInput::suspend()</db:title>
<db:para>Stops processing audio data, preserving buffered audio data.</db:para>
<db:para>Sets <db:link xlink:href="qaudioinput.xml#error">error</db:link>() to <db:link xlink:href="qaudio.xml#Error-enum">QAudio::NoError</db:link>, <db:link xlink:href="qaudioinput.xml#state">state</db:link>() to <db:link xlink:href="qaudio.xml#State-enum">QAudio::SuspendedState</db:link> and emit <db:link xlink:href="qaudioinput.xml#stateChanged">stateChanged</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="volume">
<db:title>qreal QAudioInput::volume() const</db:title>
<db:para>Returns the input volume (gain).</db:para>
<db:para>If the device does not support adjusting the input volume the returned value will be 1.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioinput.xml#setVolume">setVolume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
