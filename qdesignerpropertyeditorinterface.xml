<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDesignerPropertyEditorInterface Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdesignerpropertyeditorinterface.xml">QDesignerPropertyEditorInterface</db:link> class allows you to query and manipulate the current state of Qt Designer's property editor.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDesignerPropertyEditorInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Designer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Designer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdesignerpropertyeditorinterface.xml">QDesignerPropertyEditorInterface</db:link> contains a collection of functions that is typically used to query the property editor for its current state, and several slots manipulating it's state. The interface also provide a signal, <db:link xlink:href="qdesignerpropertyeditorinterface.xml#propertyChanged">propertyChanged</db:link>(), which is emitted whenever a property changes in the property editor. The signal's arguments are the property that changed and its new value.</db:para>
<db:para>For example, when implementing a custom widget plugin, you can connect the signal to a custom slot:</db:para>
<db:programlisting language="cpp">        auto *propertyEditor = formEditor-&amp;gt;propertyEditor();

        connect(propertyEditor, &amp;amp;QDesignerPropertyEditorInterface::propertyChanged,
                this, &amp;amp;MyClass::checkProperty);
</db:programlisting>
<db:para>Then the custom slot can check if the new value is within the range we want when a specified property, belonging to a particular widget, changes:</db:para>
<db:programlisting language="cpp">        void checkProperty(const QString &amp;amp;property, const QVariant &amp;amp;value)
        {
            auto *propertyEditor = formEditor-&amp;gt;propertyEditor();

            auto *object = propertyeditor-&amp;gt;object();
            auto *widget = qobject_cast&amp;lt;MyCustomWidget *&amp;gt;(object);

            if (widget &amp;amp;&amp;amp; property == aProperty &amp;amp;&amp;amp; value != expectedValue)
                {...}
        }
</db:programlisting>
<db:para>The <db:link xlink:href="qdesignerpropertyeditorinterface.xml">QDesignerPropertyEditorInterface</db:link> class is not intended to be instantiated directly. You can retrieve an interface to <db:emphasis>Qt Designer</db:emphasis>'s property editor using the <db:link xlink:href="qdesignerformeditorinterface.xml#propertyEditor">QDesignerFormEditorInterface::propertyEditor</db:link>() function. A pointer to <db:emphasis>Qt Designer</db:emphasis>'s current <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> object (<db:code>formEditor</db:code> in the examples above) is provided by the <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">QDesignerCustomWidgetInterface::initialize</db:link>() function's parameter. When implementing a custom widget plugin, you must subclass the <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> to expose your plugin to <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para>The functions accessing the property editor are the <db:link xlink:href="qdesignerpropertyeditorinterface.xml#core">core</db:link>() function that you can use to retrieve an interface to the form editor, the <db:link xlink:href="qdesignerpropertyeditorinterface.xml#currentPropertyName">currentPropertyName</db:link>() function that returns the name of the currently selected property in the property editor, the <db:link xlink:href="qdesignerpropertyeditorinterface.xml#object">object</db:link>() function that returns the currently selected object in <db:emphasis>Qt Designer</db:emphasis>'s workspace, and the <db:link xlink:href="qdesignerpropertyeditorinterface.xml#isReadOnly">isReadOnly</db:link>() function that returns true if the property editor is write proteced (otherwise false).</db:para>
<db:para>The slots manipulating the property editor's state are the <db:link xlink:href="qdesignerpropertyeditorinterface.xml#setObject">setObject</db:link>() slot that you can use to change the currently selected object in <db:emphasis>Qt Designer</db:emphasis>'s workspace, the <db:link xlink:href="qdesignerpropertyeditorinterface.xml#setPropertyValue">setPropertyValue</db:link>() slot that changes the value of a given property and the <db:link xlink:href="qdesignerpropertyeditorinterface.xml#setReadOnly">setReadOnly</db:link>() slot that control the write protection of the property editor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDesignerPropertyEditorInterface">
<db:title>[explicit] QDesignerPropertyEditorInterface::QDesignerPropertyEditorInterface(QWidget *<db:emphasis>parent</db:emphasis>, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = {})</db:title>
<db:constructorsynopsis>
<db:methodname>QDesignerPropertyEditorInterface</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>{}</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDesignerPropertyEditorInterface(QWidget *parent, Qt::WindowFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a property editor interface with the given <db:code role="parameter">parent</db:code> and the specified window <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDesignerPropertyEditorInterface">
<db:title>[virtual] QDesignerPropertyEditorInterface::~QDesignerPropertyEditorInterface()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDesignerPropertyEditorInterface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDesignerPropertyEditorInterface()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the property editor interface.</db:para>
</db:section>
<db:section xml:id="core">
<db:title>[virtual] QDesignerFormEditorInterface *QDesignerPropertyEditorInterface::core() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QDesignerFormEditorInterface *</db:type>
<db:methodname>core</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDesignerFormEditorInterface * core() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to <db:emphasis>Qt Designer</db:emphasis>'s current <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> object.</db:para>
</db:section>
<db:section xml:id="currentPropertyName">
<db:title>[pure virtual] QString QDesignerPropertyEditorInterface::currentPropertyName() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>currentPropertyName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString currentPropertyName() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the currently selected property in the property editor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertyeditorinterface.xml#setPropertyValue">setPropertyValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReadOnly">
<db:title>[pure virtual] bool QDesignerPropertyEditorInterface::isReadOnly() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isReadOnly</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isReadOnly() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the property editor is write protected; otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertyeditorinterface.xml#setReadOnly">setReadOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="object">
<db:title>[pure virtual] QObject *QDesignerPropertyEditorInterface::object() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>object</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * object() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the currently selected object in <db:emphasis>Qt Designer</db:emphasis>'s workspace.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertyeditorinterface.xml#setObject">setObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyChanged">
<db:title>void QDesignerPropertyEditorInterface::propertyChanged(const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>propertyChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void propertyChanged(const QString &amp;name, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a property changes in the property editor. The property that changed and its new value are specified by <db:code role="parameter">name</db:code> and <db:code role="parameter">value</db:code> respectively.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertyeditorinterface.xml#setPropertyValue">setPropertyValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setObject">
<db:title>[pure virtual] void QDesignerPropertyEditorInterface::setObject(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setObject</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setObject(QObject *object) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the currently selected object in <db:emphasis>Qt Designer</db:emphasis>'s workspace, to <db:code role="parameter">object</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertyeditorinterface.xml#object">object</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPropertyValue">
<db:title>[pure virtual] void QDesignerPropertyEditorInterface::setPropertyValue(const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, bool <db:emphasis>changed</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setPropertyValue</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>changed</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPropertyValue(const QString &amp;name, const QVariant &amp;value, bool changed) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of the property specified by <db:code role="parameter">name</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:para>In addition, the property is marked as <db:code role="parameter">changed</db:code> in the property editor, i.e. its value is different from the default value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertyeditorinterface.xml#currentPropertyName">currentPropertyName</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertyeditorinterface.xml#propertyChanged">propertyChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setReadOnly">
<db:title>[pure virtual] void QDesignerPropertyEditorInterface::setReadOnly(bool <db:emphasis>readOnly</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setReadOnly</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>readOnly</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setReadOnly(bool readOnly) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">readOnly</db:code> is true, the property editor is made write protected; otherwise the write protection is removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertyeditorinterface.xml#isReadOnly">isReadOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
