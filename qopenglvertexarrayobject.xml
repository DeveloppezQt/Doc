<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLVertexArrayObject Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopenglvertexarrayobject.xml">QOpenGLVertexArrayObject</db:link> class wraps an OpenGL Vertex Array Object.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLVertexArrayObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS OpenGL)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::OpenGL)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opengl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOpenGLVertexArrayObject is part of <db:simplelist><db:member>painting-3D</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A Vertex Array Object (VAO) is an OpenGL container object that encapsulates the state needed to specify per-vertex attribute data to the OpenGL pipeline. To put it another way, a VAO remembers the states of buffer objects (see <db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link>) and their associated state (e.g. vertex attribute divisors). This allows a very easy and efficient method of switching between OpenGL buffer states for rendering different &quot;objects&quot; in a scene. The <db:link xlink:href="qopenglvertexarrayobject.xml">QOpenGLVertexArrayObject</db:link> class is a thin wrapper around an OpenGL VAO.</db:para>
<db:para>For the desktop, VAOs are supported as a core feature in OpenGL 3.0 or newer and by the GL_ARB_vertex_array_object for older versions. On OpenGL ES 2, VAOs are provided by the optional GL_OES_vertex_array_object extension. You can check the version of OpenGL with QOpenGLContext::surfaceFormat() and check for the presence of extensions with <db:link xlink:href="qopenglcontext.xml#hasExtension">QOpenGLContext::hasExtension</db:link>().</db:para>
<db:para>As with the other Qt OpenGL classes, <db:link xlink:href="qopenglvertexarrayobject.xml">QOpenGLVertexArrayObject</db:link> has a <db:link xlink:href="qopenglvertexarrayobject.xml#create">create</db:link>() function to create the underlying OpenGL object. This is to allow the developer to ensure that there is a valid current OpenGL context at the time.</db:para>
<db:para>Once you have successfully created a VAO the typical usage pattern is:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>In scene initialization function, for each visual object:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Bind the VAO</db:para>
</db:listitem>
<db:listitem>
<db:para>Set vertex data state for this visual object (vertices, normals, texture coordinates etc.)</db:para>
</db:listitem>
<db:listitem>
<db:para>Unbind (<db:link xlink:href="qopenglvertexarrayobject.xml#release">release</db:link>()) the VAO</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>In render function, for each visual object:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Bind the VAO (and shader program if needed)</db:para>
</db:listitem>
<db:listitem>
<db:para>Call a glDraw*() function</db:para>
</db:listitem>
<db:listitem>
<db:para>Unbind (<db:link xlink:href="qopenglvertexarrayobject.xml#release">release</db:link>()) the VAO</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:para>The act of binding the VAO in the render function has the effect of restoring all of the vertex data state setup in the initialization phase. In this way we can set a great deal of state when setting up a VAO and efficiently switch between state sets of objects to be rendered. Using VAOs also allows the OpenGL driver to amortise the validation checks of the vertex data.</db:para>
<db:note>
<db:para>Vertex Array Objects, like all other OpenGL container objects, are specific to the context for which they were created and cannot be shared amongst a context group.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglvertexarrayobject-binder.xml">QOpenGLVertexArrayObject::Binder</db:link></db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLVertexArrayObject">
<db:title>[explicit] QOpenGLVertexArrayObject::QOpenGLVertexArrayObject(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOpenGLVertexArrayObject</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLVertexArrayObject(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qopenglvertexarrayobject.xml">QOpenGLVertexArrayObject</db:link> with the given <db:code role="parameter">parent</db:code>. You must call <db:link xlink:href="qopenglvertexarrayobject.xml#create">create</db:link>() with a valid OpenGL context before using.</db:para>
</db:section>
<db:section xml:id="dtor.QOpenGLVertexArrayObject">
<db:title>[virtual] QOpenGLVertexArrayObject::~QOpenGLVertexArrayObject()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QOpenGLVertexArrayObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QOpenGLVertexArrayObject()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qopenglvertexarrayobject.xml">QOpenGLVertexArrayObject</db:link> and the underlying OpenGL resource.</db:para>
</db:section>
<db:section xml:id="bind">
<db:title>void QOpenGLVertexArrayObject::bind()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bind</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void bind()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Binds this vertex array object to the OpenGL binding point. From this point on and until <db:link xlink:href="qopenglvertexarrayobject.xml#release">release</db:link>() is called or another vertex array object is bound, any modifications made to vertex data state are stored inside this vertex array object.</db:para>
<db:para>If another vertex array object is then bound you can later restore the set of state associated with this object by calling bind() on this object once again. This allows efficient changes between vertex data states in rendering functions.</db:para>
</db:section>
<db:section xml:id="create">
<db:title>bool QOpenGLVertexArrayObject::create()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>create</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool create()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates the underlying OpenGL vertex array object. There must be a valid OpenGL context that supports vertex array objects current for this function to succeed.</db:para>
<db:para>Returns <db:code>true</db:code> if the OpenGL vertex array object was successfully created.</db:para>
<db:para>When the return value is <db:code>false</db:code>, vertex array object support is not available. This is not an error: on systems with OpenGL 2.x or OpenGL ES 2.0 vertex array objects may not be supported. The application is free to continue execution in this case, but it then has to be prepared to operate in a VAO-less manner too. This means that instead of merely calling <db:link xlink:href="qopenglvertexarrayobject.xml#bind">bind</db:link>(), the value of <db:link xlink:href="qopenglvertexarrayobject.xml#isCreated">isCreated</db:link>() must be checked and the vertex arrays has to be initialized in the traditional way when there is no vertex array object present.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglvertexarrayobject.xml#isCreated">isCreated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="destroy">
<db:title>void QOpenGLVertexArrayObject::destroy()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>destroy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void destroy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Destroys the underlying OpenGL vertex array object. There must be a valid OpenGL context that supports vertex array objects current for this function to succeed.</db:para>
</db:section>
<db:section xml:id="isCreated">
<db:title>bool QOpenGLVertexArrayObject::isCreated() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCreated</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCreated() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> is the underlying OpenGL vertex array object has been created. If this returns <db:code>true</db:code> and the associated OpenGL context is current, then you are able to <db:link xlink:href="qopenglvertexarrayobject.xml#bind">bind</db:link>() this object.</db:para>
</db:section>
<db:section xml:id="objectId">
<db:title>GLuint QOpenGLVertexArrayObject::objectId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLuint</db:type>
<db:methodname>objectId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint objectId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the id of the underlying OpenGL vertex array object.</db:para>
</db:section>
<db:section xml:id="release">
<db:title>void QOpenGLVertexArrayObject::release()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>release</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void release()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unbinds this vertex array object by binding the default vertex array object (id = 0).</db:para>
</db:section>
</db:section>
</db:article>
