<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStyleHintReturn Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link> class provides style hints that return more than basic data types.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStyleHintReturn</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qstylehintreturnmask.xml" xlink:role="class">QStyleHintReturnMask</db:link> and <db:link xlink:href="qstylehintreturnvariant.xml" xlink:role="class">QStyleHintReturnVariant</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStyleHintReturn is part of <db:simplelist><db:member>appearance</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link> and its subclasses are used to pass information from a style back to the querying widget. This is most useful when the return value from <db:link xlink:href="qstyle.xml#styleHint">QStyle::styleHint</db:link>() does not provide enough detail; for example, when a mask is to be returned.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="HintReturnType-enum">
<db:title>enum QStyleHintReturn::HintReturnType</db:title>
<db:enumsynopsis>
<db:enumname>HintReturnType</db:enumname>
<db:enumitem>
<db:enumidentifier>SH_Default</db:enumidentifier>
<db:enumvalue>0xf000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SH_Mask</db:enumidentifier>
<db:enumvalue>0xf001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SH_Variant</db:enumidentifier>
<db:enumvalue>0xf002</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link></db:emphasis>::SH_Default</db:code></db:para>
</db:td>
<db:td><db:code>0xf000</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link></db:emphasis>::SH_Mask</db:code></db:para>
</db:td>
<db:td><db:code>0xf001</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qstyle.xml#StyleHint-enum">QStyle::SH_RubberBand_Mask</db:link> <db:link xlink:href="qstyle.xml#StyleHint-enum">QStyle::SH_FocusFrame_Mask</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link></db:emphasis>::SH_Variant</db:code></db:para>
</db:td>
<db:td><db:code>0xf002</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qstyle.xml#StyleHint-enum">QStyle::SH_TextControl_FocusIndicatorTextCharFormat</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="StyleOptionType-enum">
<db:title>enum QStyleHintReturn::StyleOptionType</db:title>
<db:enumsynopsis>
<db:enumname>StyleOptionType</db:enumname>
<db:enumitem>
<db:enumidentifier>Type</db:enumidentifier>
<db:enumvalue>SH_Default</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is used to hold information about the type of the style option, and is defined for each <db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link> subclass.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link></db:emphasis>::Type</db:code></db:para>
</db:td>
<db:td><db:code>SH_Default</db:code></db:td>
<db:td>
<db:para>The type of style option provided (<db:link xlink:href="qstylehintreturn.xml#HintReturnType-enum">SH_Default</db:link> for this class).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The type is used internally by <db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link>, its subclasses, and <db:link xlink:href="qstylehintreturn.xml#qstyleoption_cast">qstyleoption_cast</db:link>() to determine the type of style option. In general you do not need to worry about this unless you want to create your own <db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link> subclass and your own styles.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstylehintreturn.xml#StyleOptionVersion-enum">StyleOptionVersion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="StyleOptionVersion-enum">
<db:title>enum QStyleHintReturn::StyleOptionVersion</db:title>
<db:enumsynopsis>
<db:enumname>StyleOptionVersion</db:enumname>
<db:enumitem>
<db:enumidentifier>Version</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is used to hold information about the version of the style option, and is defined for each <db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link> subclass.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link></db:emphasis>::Version</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>1</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The version is used by <db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link> subclasses to implement extensions without breaking compatibility. If you use <db:link xlink:href="qstylehintreturn.xml#qstyleoption_cast">qstyleoption_cast</db:link>(), you normally do not need to check it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstylehintreturn.xml#StyleOptionType-enum">StyleOptionType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStyleHintReturn">
<db:title>QStyleHintReturn::QStyleHintReturn(int <db:emphasis>version</db:emphasis> = QStyleOption::Version, int <db:emphasis>type</db:emphasis> = SH_Default)</db:title>
<db:constructorsynopsis>
<db:methodname>QStyleHintReturn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>version</db:parameter>
<db:initializer>QStyleOption::Version</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>type</db:parameter>
<db:initializer>SH_Default</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QStyleHintReturn(int version, int type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link> with version <db:code role="parameter">version</db:code> and type <db:code role="parameter">type</db:code>.</db:para>
<db:para>The version has no special meaning for <db:link xlink:href="qstylehintreturn.xml">QStyleHintReturn</db:link>; it can be used by subclasses to distinguish between different version of the same hint type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#version-var">QStyleOption::version</db:link></db:member>
<db:member><db:link xlink:href="qstyleoption.xml#type-var">QStyleOption::type</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="type-var">
<db:title>int QStyleHintReturn::type</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>type</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This variable holds the type of the style hint container</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstylehintreturn.xml#HintReturnType-enum">HintReturnType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="version-var">
<db:title>int QStyleHintReturn::version</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>version</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This variable holds the version of the style hint return container</db:para>
<db:para>This value can be used by subclasses to implement extensions without breaking compatibility. If you use <db:link xlink:href="qstylehintreturn.xml#qstyleoption_cast">qstyleoption_cast</db:link>&lt;T&gt;(), you normally do not need to check it.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qstyleoption_cast">
<db:title>T qstyleoption_cast(const QStyleHintReturn *<db:emphasis>hint</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>T</db:type>
<db:methodname>qstyleoption_cast</db:methodname>
<db:methodparam>
<db:type>const QStyleHintReturn *</db:type>
<db:parameter>hint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T qstyleoption_cast(const QStyleHintReturn *hint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a T or <db:code>nullptr</db:code> depending on the <db:link xlink:href="qstylehintreturn.xml#type-var">type</db:link> and <db:link xlink:href="qstylehintreturn.xml#version-var">version</db:link> of <db:code role="parameter">hint</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int MyStyle::styleHint(StyleHint stylehint, const QStyleOption *opt,
                       const QWidget *widget, QStyleHintReturn* returnData) const;
{
    if (stylehint == SH_RubberBand_Mask) {
        const QStyleHintReturnMask *maskReturn =
                qstyleoption_cast&amp;lt;const QStyleHintReturnMask *&amp;gt;(hint);
        if (maskReturn) {
            ...
        }
    }
    ...
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstylehintreturn.xml#type-var">QStyleHintReturn::type</db:link></db:member>
<db:member><db:link xlink:href="qstylehintreturn.xml#version-var">QStyleHintReturn::version</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qstyleoption_cast-1">
<db:title>T qstyleoption_cast(QStyleHintReturn *<db:emphasis>hint</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>T</db:type>
<db:methodname>qstyleoption_cast</db:methodname>
<db:methodparam>
<db:type>QStyleHintReturn *</db:type>
<db:parameter>hint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">T qstyleoption_cast(QStyleHintReturn *hint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a T or <db:code>nullptr</db:code> depending on the type of <db:code role="parameter">hint</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
