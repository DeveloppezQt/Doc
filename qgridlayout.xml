<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGridLayout Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> class lays out widgets in a grid.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGridLayout</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlayout.xml" xlink:role="class">QLayout</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGridLayout is part of <db:simplelist><db:member>geomanagement</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> takes the space made available to it (by its parent layout or by the <db:link xlink:href="qlayout.xml#parentWidget">parentWidget</db:link>()), divides it up into rows and columns, and puts each widget it manages into the correct cell.</db:para>
<db:para>Columns and rows behave identically; we will discuss columns, but there are equivalent functions for rows.</db:para>
<db:para>Each column has a minimum width and a stretch factor. The minimum width is the greatest of that set using <db:link xlink:href="qgridlayout.xml#setColumnMinimumWidth">setColumnMinimumWidth</db:link>() and the minimum width of each widget in that column. The stretch factor is set using <db:link xlink:href="qgridlayout.xml#setColumnStretch">setColumnStretch</db:link>() and determines how much of the available space the column will get over and above its necessary minimum.</db:para>
<db:para>Normally, each managed widget or layout is put into a cell of its own using <db:link xlink:href="qgridlayout.xml#addWidget-1">addWidget</db:link>(). It is also possible for a widget to occupy multiple cells using the row and column spanning overloads of <db:link xlink:href="qgridlayout.xml#addItem">addItem</db:link>() and <db:link xlink:href="qgridlayout.xml#addWidget-1">addWidget</db:link>(). If you do this, <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> will guess how to distribute the size over the columns/rows (based on the stretch factors).</db:para>
<db:para>To remove a widget from a layout, call <db:link xlink:href="qlayout.xml#removeWidget">removeWidget</db:link>(). Calling <db:link xlink:href="qwidget.xml#hide">QWidget::hide</db:link>() on a widget also effectively removes the widget from the layout until <db:link xlink:href="qwidget.xml#show">QWidget::show</db:link>() is called.</db:para>
<db:para>This illustration shows a fragment of a dialog with a five-column, three-row grid (the grid is shown overlaid in magenta):</db:para>
<db:mediaobject>
<db:alt>A grid layout</db:alt>
<db:imageobject>
<db:imagedata fileref="images/qgridlayout.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Columns 0, 2 and 4 in this dialog fragment are made up of a <db:link xlink:href="qlabel.xml">QLabel</db:link>, a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, and a QListBox. Columns 1 and 3 are placeholders made with <db:link xlink:href="qgridlayout.xml#setColumnMinimumWidth">setColumnMinimumWidth</db:link>(). Row 0 consists of three <db:link xlink:href="qlabel.xml">QLabel</db:link> objects, row 1 of three <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> objects and row 2 of three QListBox objects. We used placeholder columns (1 and 3) to get the right amount of space between the columns.</db:para>
<db:para>Note that the columns and rows are not equally wide or tall. If you want two columns to have the same width, you must set their minimum widths and stretch factors to be the same yourself. You do this using <db:link xlink:href="qgridlayout.xml#setColumnMinimumWidth">setColumnMinimumWidth</db:link>() and <db:link xlink:href="qgridlayout.xml#setColumnStretch">setColumnStretch</db:link>().</db:para>
<db:para>If the <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> is not the top-level layout (i.e. does not manage all of the widget's area and children), you must add it to its parent layout when you create it, but before you do anything with it. The normal way to add a layout is by calling <db:link xlink:href="qgridlayout.xml#addLayout">addLayout</db:link>() on the parent layout.</db:para>
<db:para>Once you have added your layout you can start putting widgets and other layouts into the cells of your grid layout using <db:link xlink:href="qgridlayout.xml#addWidget-1">addWidget</db:link>(), <db:link xlink:href="qgridlayout.xml#addItem">addItem</db:link>(), and <db:link xlink:href="qgridlayout.xml#addLayout">addLayout</db:link>().</db:para>
<db:para><db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> also includes two margin widths: the <db:link xlink:href="qlayout.xml#getContentsMargins">contents margin</db:link> and the <db:link xlink:href="qgridlayout.xml#spacing">spacing</db:link>(). The contents margin is the width of the reserved space along each of the <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link>'s four sides. The <db:link xlink:href="qgridlayout.xml#spacing">spacing</db:link>() is the width of the automatically allocated spacing between neighboring boxes.</db:para>
<db:para>The default contents margin values are provided by the <db:link xlink:href="qstyle.xml#pixelMetric">style</db:link>. The default value Qt styles specify is 9 for child widgets and 11 for windows. The spacing defaults to the same as the margin width for a top-level layout, or to the same as the parent layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link></db:member>
<db:member><db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link></db:member>
<db:member><db:link xlink:href="layout.xml">Layout Management</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-layouts-basiclayouts-example.xml">Basic Layouts Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="horizontalSpacing-prop">
<db:title>horizontalSpacing : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>horizontalSpacing</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">horizontalSpacing</db:synopsisinfo>
<db:synopsisinfo role="setter">setHorizontalSpacing</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the spacing between widgets that are laid out side by side</db:para>
<db:para>If no value is explicitly set, the layout's horizontal spacing is inherited from the parent layout, or from the style settings for the parent widget.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">horizontalSpacing</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHorizontalSpacing</db:emphasis>(<db:type>int</db:type> <db:emphasis>spacing</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#verticalSpacing-prop">verticalSpacing</db:link></db:member>
<db:member><db:link xlink:href="qstyle.xml#pixelMetric">QStyle::pixelMetric</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutHorizontalSpacing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verticalSpacing-prop">
<db:title>verticalSpacing : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>verticalSpacing</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">verticalSpacing</db:synopsisinfo>
<db:synopsisinfo role="setter">setVerticalSpacing</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the spacing between widgets that are laid out on top of each other</db:para>
<db:para>If no value is explicitly set, the layout's vertical spacing is inherited from the parent layout, or from the style settings for the parent widget.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">verticalSpacing</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVerticalSpacing</db:emphasis>(<db:type>int</db:type> <db:emphasis>spacing</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#horizontalSpacing-prop">horizontalSpacing</db:link></db:member>
<db:member><db:link xlink:href="qstyle.xml#pixelMetric">QStyle::pixelMetric</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutHorizontalSpacing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGridLayout">
<db:title>[explicit] QGridLayout::QGridLayout(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGridLayout</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGridLayout(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> with parent widget, <db:code role="parameter">parent</db:code>. The layout has one row and one column initially, and will expand when new items are inserted.</db:para>
<db:para>The layout is set directly as the top-level layout for <db:code role="parameter">parent</db:code>. There can be only one top-level layout for a widget. It is returned by <db:link xlink:href="qwidget.xml#layout">QWidget::layout</db:link>().</db:para>
<db:para>If <db:code role="parameter">parent</db:code> is <db:code>nullptr</db:code>, then you must insert this grid layout into another layout, or set it as a widget's layout using <db:link xlink:href="qwidget.xml#setLayout">QWidget::setLayout</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#setLayout">QWidget::setLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QGridLayout">
<db:title>[virtual] QGridLayout::~QGridLayout()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGridLayout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGridLayout()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the grid layout. Geometry management is terminated if this is a top-level grid.</db:para>
<db:para>The layout's widgets aren't destroyed.</db:para>
</db:section>
<db:section xml:id="addItem">
<db:title>void QGridLayout::addItem(QLayoutItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, int <db:emphasis>rowSpan</db:emphasis> = 1, int <db:emphasis>columnSpan</db:emphasis> = 1, Qt::Alignment <db:emphasis>alignment</db:emphasis> = Qt::Alignment())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addItem</db:methodname>
<db:methodparam>
<db:type>QLayoutItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rowSpan</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columnSpan</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
<db:initializer>Qt::Alignment()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addItem(QLayoutItem *item, int row, int column, int rowSpan, int columnSpan, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">item</db:code> at position <db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>, spanning <db:code role="parameter">rowSpan</db:code> rows and <db:code role="parameter">columnSpan</db:code> columns, and aligns it according to <db:code role="parameter">alignment</db:code>. If <db:code role="parameter">rowSpan</db:code> and/or <db:code role="parameter">columnSpan</db:code> is -1, then the item will extend to the bottom and/or right edge, respectively. The layout takes ownership of the <db:code role="parameter">item</db:code>.</db:para>
<db:warning>
<db:para>Do not use this function to add child layouts or child widget items. Use <db:link xlink:href="qgridlayout.xml#addLayout">addLayout</db:link>() or <db:link xlink:href="qgridlayout.xml#addWidget-1">addWidget</db:link>() instead.</db:para>
</db:warning>
</db:section>
<db:section xml:id="addItem-1">
<db:title>[override virtual protected] void QGridLayout::addItem(QLayoutItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>addItem</db:methodname>
<db:methodparam>
<db:type>QLayoutItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void addItem(QLayoutItem *item) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#addItem" role="function">QLayout::addItem(QLayoutItem *item)</db:link>.</db:para>
</db:section>
<db:section xml:id="addLayout">
<db:title>void QGridLayout::addLayout(QLayout *<db:emphasis>layout</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis> = Qt::Alignment())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addLayout</db:methodname>
<db:methodparam>
<db:type>QLayout *</db:type>
<db:parameter>layout</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
<db:initializer>Qt::Alignment()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addLayout(QLayout *layout, int row, int column, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Places the <db:code role="parameter">layout</db:code> at position (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>) in the grid. The top-left position is (0, 0).</db:para>
<db:para>The alignment is specified by <db:code role="parameter">alignment</db:code>. The default alignment is 0, which means that the widget fills the entire cell.</db:para>
<db:para>A non-zero alignment indicates that the layout should not grow to fill the available space but should be sized according to <db:link xlink:href="qgridlayout.xml#sizeHint">sizeHint</db:link>().</db:para>
<db:para><db:code role="parameter">layout</db:code> becomes a child of the grid layout.</db:para>
</db:section>
<db:section xml:id="addLayout-1">
<db:title>void QGridLayout::addLayout(QLayout *<db:emphasis>layout</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, int <db:emphasis>rowSpan</db:emphasis>, int <db:emphasis>columnSpan</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis> = Qt::Alignment())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addLayout</db:methodname>
<db:methodparam>
<db:type>QLayout *</db:type>
<db:parameter>layout</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rowSpan</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columnSpan</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
<db:initializer>Qt::Alignment()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void addLayout(QLayout *layout, int row, int column, int rowSpan, int columnSpan, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This version adds the layout <db:code role="parameter">layout</db:code> to the cell grid, spanning multiple rows/columns. The cell will start at <db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code> spanning <db:code role="parameter">rowSpan</db:code> rows and <db:code role="parameter">columnSpan</db:code> columns.</db:para>
<db:para>If <db:code role="parameter">rowSpan</db:code> and/or <db:code role="parameter">columnSpan</db:code> is -1, then the layout will extend to the bottom and/or right edge, respectively.</db:para>
</db:section>
<db:section xml:id="addWidget-1">
<db:title>void QGridLayout::addWidget(QWidget *<db:emphasis>widget</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis> = Qt::Alignment())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
<db:initializer>Qt::Alignment()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void addWidget(QWidget *widget, int row, int column, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">widget</db:code> to the cell grid at <db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>. The top-left position is (0, 0) by default.</db:para>
<db:para>The alignment is specified by <db:code role="parameter">alignment</db:code>. The default alignment is 0, which means that the widget fills the entire cell.</db:para>
</db:section>
<db:section xml:id="addWidget-2">
<db:title>void QGridLayout::addWidget(QWidget *<db:emphasis>widget</db:emphasis>, int <db:emphasis>fromRow</db:emphasis>, int <db:emphasis>fromColumn</db:emphasis>, int <db:emphasis>rowSpan</db:emphasis>, int <db:emphasis>columnSpan</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis> = Qt::Alignment())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fromRow</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fromColumn</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rowSpan</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columnSpan</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
<db:initializer>Qt::Alignment()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void addWidget(QWidget *widget, int fromRow, int fromColumn, int rowSpan, int columnSpan, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This version adds the given <db:code role="parameter">widget</db:code> to the cell grid, spanning multiple rows/columns. The cell will start at <db:code role="parameter">fromRow</db:code>, <db:code role="parameter">fromColumn</db:code> spanning <db:code role="parameter">rowSpan</db:code> rows and <db:code role="parameter">columnSpan</db:code> columns. The <db:code role="parameter">widget</db:code> will have the given <db:code role="parameter">alignment</db:code>.</db:para>
<db:para>If <db:code role="parameter">rowSpan</db:code> and/or <db:code role="parameter">columnSpan</db:code> is -1, then the widget will extend to the bottom and/or right edge, respectively.</db:para>
</db:section>
<db:section xml:id="cellRect">
<db:title>QRect QGridLayout::cellRect(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>cellRect</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect cellRect(int row, int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the geometry of the cell with row <db:code role="parameter">row</db:code> and column <db:code role="parameter">column</db:code> in the grid. Returns an invalid rectangle if <db:code role="parameter">row</db:code> or <db:code role="parameter">column</db:code> is outside the grid.</db:para>
<db:warning>
<db:para>in the current version of Qt this function does not return valid results until <db:link xlink:href="qgridlayout.xml#setGeometry">setGeometry</db:link>() has been called, i.e. after the <db:link xlink:href="qlayout.xml#parentWidget">parentWidget</db:link>() is visible.</db:para>
</db:warning>
</db:section>
<db:section xml:id="columnCount">
<db:title>int QGridLayout::columnCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columnCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columnCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of columns in this grid.</db:para>
</db:section>
<db:section xml:id="columnMinimumWidth">
<db:title>int QGridLayout::columnMinimumWidth(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columnMinimumWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columnMinimumWidth(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the column spacing for column <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#setColumnMinimumWidth">setColumnMinimumWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnStretch">
<db:title>int QGridLayout::columnStretch(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columnStretch</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columnStretch(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the stretch factor for column <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#setColumnStretch">setColumnStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>[override virtual] int QGridLayout::count() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#count" role="function">QLayout::count() const</db:link>.</db:para>
</db:section>
<db:section xml:id="expandingDirections">
<db:title>[override virtual] Qt::Orientations QGridLayout::expandingDirections() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt::Orientations</db:type>
<db:methodname>expandingDirections</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Orientations expandingDirections() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#expandingDirections" role="function">QLayout::expandingDirections() const</db:link>.</db:para>
</db:section>
<db:section xml:id="getItemPosition">
<db:title>void QGridLayout::getItemPosition(int <db:emphasis>index</db:emphasis>, int *<db:emphasis>row</db:emphasis>, int *<db:emphasis>column</db:emphasis>, int *<db:emphasis>rowSpan</db:emphasis>, int *<db:emphasis>columnSpan</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getItemPosition</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>rowSpan</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>columnSpan</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getItemPosition(int index, int *row, int *column, int *rowSpan, int *columnSpan) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position information of the item with the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>The variables passed as <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> are updated with the position of the item in the layout, and the <db:code role="parameter">rowSpan</db:code> and <db:code role="parameter">columnSpan</db:code> variables are updated with the vertical and horizontal spans of the item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#itemAtPosition">itemAtPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qgridlayout.xml#itemAt">itemAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasHeightForWidth">
<db:title>[override virtual] bool QGridLayout::hasHeightForWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasHeightForWidth</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasHeightForWidth() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#hasHeightForWidth" role="function">QLayoutItem::hasHeightForWidth() const</db:link>.</db:para>
</db:section>
<db:section xml:id="heightForWidth">
<db:title>[override virtual] int QGridLayout::heightForWidth(int <db:emphasis>w</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>heightForWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int heightForWidth(int w) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#heightForWidth" role="function">QLayoutItem::heightForWidth(int) const</db:link>.</db:para>
</db:section>
<db:section xml:id="invalidate">
<db:title>[override virtual] void QGridLayout::invalidate()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>invalidate</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void invalidate() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#invalidate" role="function">QLayout::invalidate()</db:link>.</db:para>
</db:section>
<db:section xml:id="itemAt">
<db:title>[override virtual] QLayoutItem *QGridLayout::itemAt(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QLayoutItem *</db:type>
<db:methodname>itemAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayoutItem * itemAt(int index) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#itemAt" role="function">QLayout::itemAt(int index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="itemAtPosition">
<db:title>QLayoutItem *QGridLayout::itemAtPosition(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLayoutItem *</db:type>
<db:methodname>itemAtPosition</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayoutItem * itemAtPosition(int row, int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the layout item that occupies cell (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>), or <db:code>nullptr</db:code> if the cell is empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#getItemPosition">getItemPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qlayout.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumSize">
<db:title>[override virtual] QSize QGridLayout::maximumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>maximumSize</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize maximumSize() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#maximumSize" role="function">QLayout::maximumSize() const</db:link>.</db:para>
</db:section>
<db:section xml:id="minimumHeightForWidth">
<db:title>[override virtual] int QGridLayout::minimumHeightForWidth(int <db:emphasis>w</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>minimumHeightForWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int minimumHeightForWidth(int w) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#minimumHeightForWidth" role="function">QLayoutItem::minimumHeightForWidth(int w) const</db:link>.</db:para>
</db:section>
<db:section xml:id="minimumSize">
<db:title>[override virtual] QSize QGridLayout::minimumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>minimumSize</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize minimumSize() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#minimumSize" role="function">QLayout::minimumSize() const</db:link>.</db:para>
</db:section>
<db:section xml:id="originCorner">
<db:title>Qt::Corner QGridLayout::originCorner() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::Corner</db:type>
<db:methodname>originCorner</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Corner originCorner() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the corner that's used for the grid's origin, i.e. for position (0, 0).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#setOriginCorner">setOriginCorner</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowCount">
<db:title>int QGridLayout::rowCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rowCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rowCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of rows in this grid.</db:para>
</db:section>
<db:section xml:id="rowMinimumHeight">
<db:title>int QGridLayout::rowMinimumHeight(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rowMinimumHeight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rowMinimumHeight(int row) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum width set for row <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#setRowMinimumHeight">setRowMinimumHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowStretch">
<db:title>int QGridLayout::rowStretch(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rowStretch</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rowStretch(int row) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the stretch factor for row <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#setRowStretch">setRowStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColumnMinimumWidth">
<db:title>void QGridLayout::setColumnMinimumWidth(int <db:emphasis>column</db:emphasis>, int <db:emphasis>minSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumnMinimumWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>minSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumnMinimumWidth(int column, int minSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the minimum width of column <db:code role="parameter">column</db:code> to <db:code role="parameter">minSize</db:code> pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#columnMinimumWidth">columnMinimumWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qgridlayout.xml#setRowMinimumHeight">setRowMinimumHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColumnStretch">
<db:title>void QGridLayout::setColumnStretch(int <db:emphasis>column</db:emphasis>, int <db:emphasis>stretch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumnStretch</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumnStretch(int column, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the stretch factor of column <db:code role="parameter">column</db:code> to <db:code role="parameter">stretch</db:code>. The first column is number 0.</db:para>
<db:para>The stretch factor is relative to the other columns in this grid. Columns with a higher stretch factor take more of the available space.</db:para>
<db:para>The default stretch factor is 0. If the stretch factor is 0 and no other column in this table can grow at all, the column may still grow.</db:para>
<db:para>An alternative approach is to add spacing using <db:link xlink:href="qgridlayout.xml#addItem">addItem</db:link>() with a <db:link xlink:href="qspaceritem.xml">QSpacerItem</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#columnStretch">columnStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qgridlayout.xml#setRowStretch">setRowStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry">
<db:title>[override virtual] void QGridLayout::setGeometry(const QRect &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setGeometry</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGeometry(const QRect &amp;rect) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#setGeometry" role="function">QLayout::setGeometry(const QRect &amp;r)</db:link>.</db:para>
</db:section>
<db:section xml:id="setOriginCorner">
<db:title>void QGridLayout::setOriginCorner(Qt::Corner <db:emphasis>corner</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOriginCorner</db:methodname>
<db:methodparam>
<db:type>Qt::Corner</db:type>
<db:parameter>corner</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOriginCorner(Qt::Corner corner)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the grid's origin corner, i.e. position (0, 0), to <db:code role="parameter">corner</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#originCorner">originCorner</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowMinimumHeight">
<db:title>void QGridLayout::setRowMinimumHeight(int <db:emphasis>row</db:emphasis>, int <db:emphasis>minSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRowMinimumHeight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>minSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRowMinimumHeight(int row, int minSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the minimum height of row <db:code role="parameter">row</db:code> to <db:code role="parameter">minSize</db:code> pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#rowMinimumHeight">rowMinimumHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qgridlayout.xml#setColumnMinimumWidth">setColumnMinimumWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowStretch">
<db:title>void QGridLayout::setRowStretch(int <db:emphasis>row</db:emphasis>, int <db:emphasis>stretch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRowStretch</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRowStretch(int row, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the stretch factor of row <db:code role="parameter">row</db:code> to <db:code role="parameter">stretch</db:code>. The first row is number 0.</db:para>
<db:para>The stretch factor is relative to the other rows in this grid. Rows with a higher stretch factor take more of the available space.</db:para>
<db:para>The default stretch factor is 0. If the stretch factor is 0 and no other row in this table can grow at all, the row may still grow.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#rowStretch">rowStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qgridlayout.xml#setRowMinimumHeight">setRowMinimumHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qgridlayout.xml#setColumnStretch">setColumnStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSpacing">
<db:title>[override virtual] void QGridLayout::setSpacing(int <db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setSpacing</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSpacing(int spacing) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qlayout.xml#spacing-prop" role="property">QLayout::spacing</db:link>.</db:para>
<db:para>This function sets both the vertical and horizontal spacing to <db:code role="parameter">spacing</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#spacing">spacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgridlayout.xml#verticalSpacing-prop">setVerticalSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgridlayout.xml#horizontalSpacing-prop">setHorizontalSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QGridLayout::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#sizeHint" role="function">QLayoutItem::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="spacing">
<db:title>[override virtual] int QGridLayout::spacing() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>spacing</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int spacing() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qlayout.xml#spacing-prop" role="property">QLayout::spacing</db:link>.</db:para>
<db:para>If the vertical spacing is equal to the horizontal spacing, this function returns that value; otherwise it return -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml#setSpacing">setSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgridlayout.xml#verticalSpacing-prop">verticalSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgridlayout.xml#horizontalSpacing-prop">horizontalSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeAt">
<db:title>[override virtual] QLayoutItem *QGridLayout::takeAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QLayoutItem *</db:type>
<db:methodname>takeAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayoutItem * takeAt(int index) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#takeAt" role="function">QLayout::takeAt(int index)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
