<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSensorFilter Class</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsensorfilter.xml">QSensorFilter</db:link> class provides an efficient callback facility for asynchronous notifications of sensor changes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSensorFilter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Sensors)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Sensors)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sensors</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qaccelerometerfilter.xml" xlink:role="class">QAccelerometerFilter</db:link>, <db:link xlink:href="qambientlightfilter.xml" xlink:role="class">QAmbientLightFilter</db:link>, <db:link xlink:href="qambienttemperaturefilter.xml" xlink:role="class">QAmbientTemperatureFilter</db:link>, <db:link xlink:href="qcompassfilter.xml" xlink:role="class">QCompassFilter</db:link>, <db:link xlink:href="qgyroscopefilter.xml" xlink:role="class">QGyroscopeFilter</db:link>, <db:link xlink:href="qhumidityfilter.xml" xlink:role="class">QHumidityFilter</db:link>, <db:link xlink:href="qlightfilter.xml" xlink:role="class">QLightFilter</db:link>, <db:link xlink:href="qmagnetometerfilter.xml" xlink:role="class">QMagnetometerFilter</db:link>, <db:link xlink:href="qorientationfilter.xml" xlink:role="class">QOrientationFilter</db:link>, <db:link xlink:href="qpressurefilter.xml" xlink:role="class">QPressureFilter</db:link>, <db:link xlink:href="qproximityfilter.xml" xlink:role="class">QProximityFilter</db:link>, <db:link xlink:href="qrotationfilter.xml" xlink:role="class">QRotationFilter</db:link>, and <db:link xlink:href="qtiltfilter.xml" xlink:role="class">QTiltFilter</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSensorFilter is part of <db:simplelist><db:member>sensors_main</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Some sensors (eg. the accelerometer) are often accessed very frequently. This may be slowed down by the use of signals and slots. The <db:link xlink:href="qsensorfilter.xml">QSensorFilter</db:link> interface provides a more efficient way for the sensor to notify your class that the sensor has changed.</db:para>
<db:para>Additionally, multiple filters can be added to a sensor. They are called in order and each filter has the option to modify the values in the reading or to suppress the reading altogether.</db:para>
<db:para>Note that the values in the class returned by <db:link xlink:href="qsensor.xml#reading-prop">QSensor::reading</db:link>() will not be updated until after the filters have been run.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsensorfilter.xml#filter">filter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QSensorFilter">
<db:title>[virtual protected] QSensorFilter::~QSensorFilter()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSensorFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSensorFilter()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Notifies the attached sensor (if any) that the filter is being destroyed.</db:para>
</db:section>
<db:section xml:id="filter">
<db:title>[pure virtual] bool QSensorFilter::filter(QSensorReading *<db:emphasis>reading</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>filter</db:methodname>
<db:methodparam>
<db:type>QSensorReading *</db:type>
<db:parameter>reading</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool filter(QSensorReading *reading) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called when the sensor <db:code role="parameter">reading</db:code> changes.</db:para>
<db:para>The filter can modify the reading.</db:para>
<db:para>Returns true to allow the next filter to receive the value. If this is the last filter, returning true causes the signal to be emitted and the value is stored in the sensor.</db:para>
<db:para>Returns false to drop the reading.</db:para>
</db:section>
</db:section>
</db:article>
