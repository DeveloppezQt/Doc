<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QReadWriteLock Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link> class provides read-write locking.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QReadWriteLock</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QReadWriteLock is part of <db:simplelist><db:member>thread</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A read-write lock is a synchronization tool for protecting resources that can be accessed for reading and writing. This type of lock is useful if you want to allow multiple threads to have simultaneous read-only access, but as soon as one thread wants to write to the resource, all other threads must be blocked until the writing is complete.</db:para>
<db:para>In many cases, <db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link> is a direct competitor to <db:link xlink:href="qmutex.xml">QMutex</db:link>. <db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link> is a good choice if there are many concurrent reads and writing occurs infrequently.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QReadWriteLock lock;

void ReaderThread::run()
{
    ...
    lock.lockForRead();
    read_file();
    lock.unlock();
    ...
}

void WriterThread::run()
{
    ...
    lock.lockForWrite();
    write_file();
    lock.unlock();
    ...
}
</db:programlisting>
<db:para>To ensure that writers aren't blocked forever by readers, readers attempting to obtain a lock will not succeed if there is a blocked writer waiting for access, even if the lock is currently only accessed by other readers. Also, if the lock is accessed by a writer and another writer comes in, that writer will have priority over any readers that might also be waiting.</db:para>
<db:para>Like <db:link xlink:href="qmutex.xml">QMutex</db:link>, a <db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link> can be recursively locked by the same thread when constructed with <db:link xlink:href="qreadwritelock.xml#RecursionMode-enum">QReadWriteLock::Recursive</db:link> as <db:link xlink:href="qreadwritelock.xml#RecursionMode-enum">QReadWriteLock::RecursionMode</db:link>. In such cases, <db:link xlink:href="qreadwritelock.xml#unlock">unlock</db:link>() must be called the same number of times <db:link xlink:href="qreadwritelock.xml#lockForWrite">lockForWrite</db:link>() or <db:link xlink:href="qreadwritelock.xml#lockForRead">lockForRead</db:link>() was called. Note that the lock type cannot be changed when trying to lock recursively, i.e. it is not possible to lock for reading in a thread that already has locked for writing (and vice versa).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadlocker.xml">QReadLocker</db:link></db:member>
<db:member><db:link xlink:href="qwritelocker.xml">QWriteLocker</db:link></db:member>
<db:member><db:link xlink:href="qmutex.xml">QMutex</db:link></db:member>
<db:member><db:link xlink:href="qsemaphore.xml">QSemaphore</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RecursionMode-enum">
<db:title>enum QReadWriteLock::RecursionMode</db:title>
<db:enumsynopsis>
<db:enumname>RecursionMode</db:enumname>
<db:enumitem>
<db:enumidentifier>NonRecursive</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Recursive</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link></db:emphasis>::Recursive</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>In this mode, a thread can lock the same <db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link> multiple times. The <db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link> won't be unlocked until a corresponding number of <db:link xlink:href="qreadwritelock.xml#unlock">unlock</db:link>() calls have been made.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link></db:emphasis>::NonRecursive</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>In this mode, a thread may only lock a <db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link> once.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadwritelock.xml#QReadWriteLock">QReadWriteLock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QReadWriteLock">
<db:title>[explicit] QReadWriteLock::QReadWriteLock(QReadWriteLock::RecursionMode <db:emphasis>recursionMode</db:emphasis> = NonRecursive)</db:title>
<db:constructorsynopsis>
<db:methodname>QReadWriteLock</db:methodname>
<db:methodparam>
<db:type>QReadWriteLock::RecursionMode</db:type>
<db:parameter>recursionMode</db:parameter>
<db:initializer>NonRecursive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QReadWriteLock(QReadWriteLock::RecursionMode recursionMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link> object in the given <db:code role="parameter">recursionMode</db:code>.</db:para>
<db:para>The default recursion mode is <db:link xlink:href="qreadwritelock.xml#RecursionMode-enum">NonRecursive</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadwritelock.xml#lockForRead">lockForRead</db:link>()</db:member>
<db:member><db:link xlink:href="qreadwritelock.xml#lockForWrite">lockForWrite</db:link>()</db:member>
<db:member><db:link xlink:href="qreadwritelock.xml#RecursionMode-enum">RecursionMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QReadWriteLock">
<db:title>QReadWriteLock::~QReadWriteLock()</db:title>
<db:destructorsynopsis>
<db:methodname>~QReadWriteLock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QReadWriteLock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link> object.</db:para>
<db:warning>
<db:para>Destroying a read-write lock that is in use may result in undefined behavior.</db:para>
</db:warning>
</db:section>
<db:section xml:id="lockForRead">
<db:title>void QReadWriteLock::lockForRead()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>lockForRead</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void lockForRead()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Locks the lock for reading. This function will block the current thread if another thread has locked for writing.</db:para>
<db:para>It is not possible to lock for read if the thread already has locked for write.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadwritelock.xml#unlock">unlock</db:link>()</db:member>
<db:member><db:link xlink:href="qreadwritelock.xml#lockForWrite">lockForWrite</db:link>()</db:member>
<db:member><db:link xlink:href="qreadwritelock.xml#tryLockForRead">tryLockForRead</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lockForWrite">
<db:title>void QReadWriteLock::lockForWrite()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>lockForWrite</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void lockForWrite()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Locks the lock for writing. This function will block the current thread if another thread (including the current) has locked for reading or writing (unless the lock has been created using the <db:link xlink:href="qreadwritelock.xml#RecursionMode-enum">QReadWriteLock::Recursive</db:link> mode).</db:para>
<db:para>It is not possible to lock for write if the thread already has locked for read.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadwritelock.xml#unlock">unlock</db:link>()</db:member>
<db:member><db:link xlink:href="qreadwritelock.xml#lockForRead">lockForRead</db:link>()</db:member>
<db:member><db:link xlink:href="qreadwritelock.xml#tryLockForWrite">tryLockForWrite</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryLockForRead">
<db:title>bool QReadWriteLock::tryLockForRead(int <db:emphasis>timeout</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>tryLockForRead</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeout</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool tryLockForRead(int timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to lock for reading. This function returns true if the lock was obtained; otherwise it returns false. If another thread has locked for writing, this function will wait for at most <db:code role="parameter">timeout</db:code> milliseconds for the lock to become available.</db:para>
<db:para>Note: Passing a negative number as the <db:code role="parameter">timeout</db:code> is equivalent to calling <db:link xlink:href="qreadwritelock.xml#lockForRead">lockForRead</db:link>(), i.e. this function will wait forever until lock can be locked for reading when <db:code role="parameter">timeout</db:code> is negative.</db:para>
<db:para>If the lock was obtained, the lock must be unlocked with <db:link xlink:href="qreadwritelock.xml#unlock">unlock</db:link>() before another thread can successfully lock it for writing.</db:para>
<db:para>It is not possible to lock for read if the thread already has locked for write.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadwritelock.xml#unlock">unlock</db:link>()</db:member>
<db:member><db:link xlink:href="qreadwritelock.xml#lockForRead">lockForRead</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryLockForRead-1">
<db:title>[since 6.6] bool QReadWriteLock::tryLockForRead(QDeadlineTimer <db:emphasis>timeout</db:emphasis> = {})</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>tryLockForRead</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>timeout</db:parameter>
<db:initializer>{}</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool tryLockForRead(QDeadlineTimer timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Attempts to lock for reading. This function returns true if the lock was obtained; otherwise it returns false. If another thread has locked for writing, this function will wait until <db:code role="parameter">timeout</db:code> expires for the lock to become available.</db:para>
<db:para>If the lock was obtained, the lock must be unlocked with <db:link xlink:href="qreadwritelock.xml#unlock">unlock</db:link>() before another thread can successfully lock it for writing.</db:para>
<db:para>It is not possible to lock for read if the thread already has locked for write.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadwritelock.xml#unlock">unlock</db:link>()</db:member>
<db:member><db:link xlink:href="qreadwritelock.xml#lockForRead">lockForRead</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryLockForWrite">
<db:title>bool QReadWriteLock::tryLockForWrite(int <db:emphasis>timeout</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>tryLockForWrite</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeout</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool tryLockForWrite(int timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to lock for writing. This function returns true if the lock was obtained; otherwise it returns false. If another thread has locked for reading or writing, this function will wait for at most <db:code role="parameter">timeout</db:code> milliseconds for the lock to become available.</db:para>
<db:para>Note: Passing a negative number as the <db:code role="parameter">timeout</db:code> is equivalent to calling <db:link xlink:href="qreadwritelock.xml#lockForWrite">lockForWrite</db:link>(), i.e. this function will wait forever until lock can be locked for writing when <db:code role="parameter">timeout</db:code> is negative.</db:para>
<db:para>If the lock was obtained, the lock must be unlocked with <db:link xlink:href="qreadwritelock.xml#unlock">unlock</db:link>() before another thread can successfully lock it.</db:para>
<db:para>It is not possible to lock for write if the thread already has locked for read.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadwritelock.xml#unlock">unlock</db:link>()</db:member>
<db:member><db:link xlink:href="qreadwritelock.xml#lockForWrite">lockForWrite</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryLockForWrite-1">
<db:title>[since 6.6] bool QReadWriteLock::tryLockForWrite(QDeadlineTimer <db:emphasis>timeout</db:emphasis> = {})</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>tryLockForWrite</db:methodname>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>timeout</db:parameter>
<db:initializer>{}</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool tryLockForWrite(QDeadlineTimer timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Attempts to lock for writing. This function returns true if the lock was obtained; otherwise it returns false. If another thread has locked for reading or writing, this function will wait until <db:code role="parameter">timeout</db:code> expires for the lock to become available.</db:para>
<db:para>If the lock was obtained, the lock must be unlocked with <db:link xlink:href="qreadwritelock.xml#unlock">unlock</db:link>() before another thread can successfully lock it.</db:para>
<db:para>It is not possible to lock for write if the thread already has locked for read.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadwritelock.xml#unlock">unlock</db:link>()</db:member>
<db:member><db:link xlink:href="qreadwritelock.xml#lockForWrite">lockForWrite</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unlock">
<db:title>void QReadWriteLock::unlock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>unlock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unlock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unlocks the lock.</db:para>
<db:para>Attempting to unlock a lock that is not locked is an error, and will result in program termination.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadwritelock.xml#lockForRead">lockForRead</db:link>()</db:member>
<db:member><db:link xlink:href="qreadwritelock.xml#lockForWrite">lockForWrite</db:link>()</db:member>
<db:member><db:link xlink:href="qreadwritelock.xml#tryLockForRead">tryLockForRead</db:link>()</db:member>
<db:member><db:link xlink:href="qreadwritelock.xml#tryLockForWrite">tryLockForWrite</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
