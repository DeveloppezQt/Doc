<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Text</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a collection of QML examples relating to text.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/
import QtQuick 2.0

Rectangle {
    id: editor
    color: &quot;lightGrey&quot;
    width: 640; height: 480

    Rectangle {
        color: &quot;white&quot;
        anchors.fill: parent
        anchors.margins: 20

        BorderImage {
            id: startHandle
            source: &quot;pics/startHandle.sci&quot;
            opacity: 0.0
            width: 10
            x: edit.positionToRectangle(edit.selectionStart).x - flick.contentX-width
            y: edit.positionToRectangle(edit.selectionStart).y - flick.contentY
            height: edit.positionToRectangle(edit.selectionStart).height
        }

        BorderImage {
            id: endHandle
            source: &quot;pics/endHandle.sci&quot;
            opacity: 0.0
            width: 10
            x: edit.positionToRectangle(edit.selectionEnd).x - flick.contentX
            y: edit.positionToRectangle(edit.selectionEnd).y - flick.contentY
            height: edit.positionToRectangle(edit.selectionEnd).height
        }

        Flickable {
            id: flick

            anchors.fill: parent
            contentWidth: edit.paintedWidth
            contentHeight: edit.paintedHeight
            interactive: true
            clip: true

            function ensureVisible(r) {
                if (contentX &amp;gt;= r.x)
                    contentX = r.x;
                else if (contentX+width &amp;lt;= r.x+r.width)
                    contentX = r.x+r.width-width;
                if (contentY &amp;gt;= r.y)
                    contentY = r.y;
                else if (contentY+height &amp;lt;= r.y+r.height)
                    contentY = r.y+r.height-height;
            }

            TextEdit {
                id: edit
                width: flick.width
                height: flick.height
                focus: true
                wrapMode: TextEdit.Wrap
                textFormat: TextEdit.RichText

                onCursorRectangleChanged: flick.ensureVisible(cursorRectangle)

                text: &quot;&amp;lt;h1&amp;gt;Text Selection&amp;lt;/h1&amp;gt;&quot;
                    +&quot;&amp;lt;p&amp;gt;This example is a whacky text selection mechanisms, showing how these can be implemented in the TextEdit element, to cater for whatever style is appropriate for the target platform.&quot;
                    +&quot;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Press-and-hold&amp;lt;/b&amp;gt; to select a word, then drag the selection handles.&quot;
                    +&quot;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Drag outside the selection&amp;lt;/b&amp;gt; to scroll the text.&quot;
                    +&quot;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Click inside the selection&amp;lt;/b&amp;gt; to cut/copy/paste/cancel selection.&quot;
                    +&quot;&amp;lt;p&amp;gt;It's too whacky to let you paste if there is no current selection.&quot;

            }
        }

        Item {
            id: menu
            opacity: 0.0
            width: 100
            height: 120
            anchors.centerIn: parent

            Rectangle {
                border.width: 1
                border.color: &quot;darkBlue&quot;
                radius: 15
                color: &quot;#806080FF&quot;
                anchors.fill: parent
            }

            Column {
                anchors.centerIn: parent
                spacing: 8

                Rectangle {
                    border.width: 1
                    border.color: &quot;darkBlue&quot;
                    color: &quot;#ff7090FF&quot;
                    width: 60
                    height: 16

                    Text { anchors.centerIn: parent; text: &quot;Cut&quot; }

                    MouseArea {
                        anchors.fill: parent
                        onClicked: { edit.cut(); editor.state = &quot;&quot; }
                    }
                }

                Rectangle {
                    border.width: 1
                    border.color: &quot;darkBlue&quot;
                    color: &quot;#ff7090FF&quot;
                    width: 60
                    height: 16

                    Text { anchors.centerIn: parent; text: &quot;Copy&quot; }

                    MouseArea {
                        anchors.fill: parent
                        onClicked: { edit.copy(); editor.state = &quot;selection&quot; }
                    }
                }

                Rectangle {
                    border.width: 1
                    border.color: &quot;darkBlue&quot;
                    color: &quot;#ff7090FF&quot;
                    width: 60
                    height: 16

                    Text { anchors.centerIn: parent; text: &quot;Paste&quot; }

                    MouseArea {
                        anchors.fill: parent
                        onClicked: { edit.paste(); edit.cursorPosition = edit.selectionEnd; editor.state = &quot;&quot; }
                    }
                }

                Rectangle {
                    border.width: 1
                    border.color: &quot;darkBlue&quot;
                    color: &quot;#ff7090FF&quot;
                    width: 60
                    height: 16

                    Text { anchors.centerIn: parent; text: &quot;Deselect&quot; }

                    MouseArea {
                        anchors.fill: parent
                        onClicked: {
                            edit.cursorPosition = edit.selectionEnd;
                            edit.deselect();
                            editor.state = &quot;&quot;
                        }
                    }
                }
            }
        }
    }

    states: [
        State {
            name: &quot;selection&quot;
            PropertyChanges { target: startHandle; opacity: 1.0 }
            PropertyChanges { target: endHandle; opacity: 1.0 }
        },
        State {
            name: &quot;menu&quot;
            PropertyChanges { target: startHandle; opacity: 0.5 }
            PropertyChanges { target: endHandle; opacity: 0.5 }
            PropertyChanges { target: menu; opacity: 1.0 }
        }
    ]
}

</db:programlisting>
</db:article>
