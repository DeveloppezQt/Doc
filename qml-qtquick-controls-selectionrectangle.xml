<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SelectionRectangle QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Used to select table cells inside a <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>.</db:para>
<db:para>This type was introduced in Qt 6.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-control.xml">Control</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>SelectionRectangle is part of <db:simplelist><db:member>utilities</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-selectionrectangle.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml">SelectionRectangle</db:link> is used for selecting table cells in a <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>. It lets the user start a selection by doing a pointer drag inside the viewport, or by doing a long press on top of a cell.</db:para>
<db:para>For a <db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml">SelectionRectangle</db:link> to be able to select cells, <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> must have an <db:link xlink:href="qml-qtqml-models-itemselectionmodel.xml">ItemSelectionModel</db:link> assigned. The <db:link xlink:href="qml-qtqml-models-itemselectionmodel.xml">ItemSelectionModel</db:link> will store any selections done on the model, and can be used for querying which cells that the user has selected.</db:para>
<db:para>The following example shows how you can make a <db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml">SelectionRectangle</db:link> target a <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>:</db:para>
<db:programlisting language="qml">    TableView {
        id: tableView
        anchors.fill: parent
        clip: true

        model: TableModel {
            TableModelColumn { display: &quot;name&quot; }
            rows: [ { &quot;name&quot;: &quot;Harry&quot; }, { &quot;name&quot;: &quot;Hedwig&quot; } ]
        }

        selectionModel: ItemSelectionModel {
            model: tableView.model
        }

        delegate: Rectangle {
            implicitWidth: 100
            implicitHeight: 30
            color: selected ? &quot;blue&quot; : &quot;lightgray&quot;

            required property bool selected

            Text { text: display }
        }
    }

    SelectionRectangle {
        target: tableView
    }
</db:programlisting>
<db:note>
<db:para>A <db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml">SelectionRectangle</db:link> itself is not shown as part of a selection. Only the delegates (like <db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml#topLeftHandle-prop">topLeftHandle</db:link> and <db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml#bottomRightHandle-prop">bottomRightHandle</db:link>) are used. You should also consider <db:link xlink:href="qml-qtquick-tableview.xml#selecting-items">rendering the TableView delegate as selected</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-tableview.xml#selectionModel-prop">TableView::selectionModel</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-models-itemselectionmodel.xml">ItemSelectionModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="active-prop">
<db:title>[read-only] active : bool</db:title>
<db:para>This property is <db:code>true</db:code> while the user is performing a selection. The selection will be active from the time the the user starts to select, and until the selection is removed again, for example from tapping inside the viewport.</db:para>
</db:section>
<db:section xml:id="bottomRightHandle-prop">
<db:title>bottomRightHandle : Component</db:title>
<db:para>This property holds the delegate that will be shown on the center of the top-left corner of the selection rectangle. When a handle is provided, the user can drag it to adjust the selection.</db:para>
<db:para>The handle is not hidden by default when a selection is removed. Instead, this is the responsibility of the delegate, to open up for custom fade-out animations. The easiest way to ensure that the handle ends up hidden, is to simply bind <db:link xlink:href="qml-qtquick-item.xml#visible-prop">visible</db:link> to the <db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml#active-prop">active</db:link> state of the <db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml">SelectionRectangle</db:link>:</db:para>
<db:programlisting language="qml">SelectionRectangle {
    bottomRightHandle: Rectangle {
        width: 20
        height: 20
        visible: SelectionRectangle.control.active
    }
}
</db:programlisting>
<db:para>Set this property to <db:code>null</db:code> if you don't want a selection handle on the bottom-right.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml#topLeftHandle-prop">topLeftHandle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragging-prop">
<db:title>[read-only] dragging : bool</db:title>
<db:para>This property is <db:code>true</db:code> whenever the user is doing a pointer drag or a handle drag to adjust the selection rectangle.</db:para>
</db:section>
<db:section xml:id="selectionMode-prop">
<db:title>selectionMode : enumeration</db:title>
<db:para>This property holds when a selection should start.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>SelectionRectangle.Drag</db:para>
</db:td>
<db:td>
<db:para>A selection will start by doing a pointer drag inside the viewport</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SelectionRectangle.PressAndHold</db:para>
</db:td>
<db:td>
<db:para>A selection will start by doing a press and hold on top a cell</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SelectionRectangle.Auto</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml">SelectionRectangle</db:link> will choose which mode to use based on the target and the platform. This normally means <db:code>PressAndHold</db:code> on touch based platforms, and <db:code>Drag</db:code> on desktop. However, <db:code>Drag</db:code> will only be used if it doesn't conflict with flicking. This means that <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> will need to be configured with <db:code>interactive</db:code> set to <db:code>false</db:code>, or placed inside a <db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link> (where flicking, by default, is off for mouse events), for <db:code>Drag</db:code> to be chosen.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is <db:code>Auto</db:code>.</db:para>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : Item</db:title>
<db:para>This property holds the <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> on which the <db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml">SelectionRectangle</db:link> should act.</db:para>
</db:section>
<db:section xml:id="topLeftHandle-prop">
<db:title>topLeftHandle : Component</db:title>
<db:para>This property holds the delegate that will be shown on the center of the top-left corner of the selection rectangle. When a handle is provided, the user can drag it to adjust the selection.</db:para>
<db:para>The handle is not hidden by default when a selection is removed. Instead, this is the responsibility of the delegate, to open up for custom fade-out animations. The easiest way to ensure that the handle ends up hidden, is to simply bind <db:link xlink:href="qml-qtquick-item.xml#visible-prop">visible</db:link> to the <db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml#active-prop">active</db:link> state of the <db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml">SelectionRectangle</db:link>:</db:para>
<db:programlisting language="qml">SelectionRectangle {
    topLeftHandle: Rectangle {
        width: 20
        height: 20
        visible: SelectionRectangle.control.active
    }
}
</db:programlisting>
<db:para>Set this property to <db:code>null</db:code> if you don't want a selection handle on the top-left.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml#bottomRightHandle-prop">bottomRightHandle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="attached-property-documentation">
<db:title>Attached Property Documentation</db:title>
<db:section xml:id="control-attached-prop">
<db:title>SelectionRectangle.control : SelectionRectangle</db:title>
<db:para>This attached property holds the <db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml">SelectionRectangle</db:link> that manages the delegate instance. It is attached to each handle instance.</db:para>
</db:section>
<db:section xml:id="dragging-attached-prop">
<db:title>SelectionRectangle.dragging : bool</db:title>
<db:para>This attached property will be <db:code>true</db:code> if the user is dragging on the handle. It is attached to each handle instance.</db:para>
</db:section>
</db:section>
</db:article>
