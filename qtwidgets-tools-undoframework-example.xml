<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Undo Framework Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to implement undo/redo functionality with the Qt undo framework.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:alt>The Undo Diagram Example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/undoframeworkexample.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In the Qt undo framework, all actions that the user performs are implemented in classes that inherit <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link>. An undo command class knows how to both <db:link xlink:href="qundocommand.xml#redo">redo</db:link>() - or just do the first time - and <db:link xlink:href="qundocommand.xml#undo">undo</db:link>() an action. For each action the user performs, a command is placed on a <db:link xlink:href="qundostack.xml">QUndoStack</db:link>. Since the stack contains all commands executed (stacked in chronological order) on the document, it can roll the state of the document backwards and forwards by undoing and redoing its commands. See the <db:link xlink:href="">overview document</db:link> for a high-level introduction to the undo framework.</db:para>
<db:para>The undo example implements a simple diagram application. It is possible to add and delete items, which are either box or rectangular shaped, and move the items by dragging them with the mouse. The undo stack is shown in a <db:link xlink:href="qundoview.xml">QUndoView</db:link>, which is a list in which the commands are shown as list items. Undo and redo are available through the edit menu. The user can also select a command from the undo view.</db:para>
<db:para>We use the <db:link xlink:href="graphicsview.xml">graphics view framework</db:link> to implement the diagram. We only treat the related code briefly as the framework has examples of its own (e.g., the <db:link xlink:href="qtwidgets-graphicsview-diagramscene-example.xml">Diagram Scene Example</db:link>).</db:para>
<db:para>The example consists of the following classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>MainWindow is the main window and arranges the example's widgets. It creates the commands based on user input and keeps them on the command stack.</db:para>
</db:listitem>
<db:listitem>
<db:para>AddCommand adds an item to the scene.</db:para>
</db:listitem>
<db:listitem>
<db:para>DeleteCommand deletes an item from the scene.</db:para>
</db:listitem>
<db:listitem>
<db:para>MoveCommand when an item is moved the MoveCommand keeps record of the start and stop positions of the move, and it moves the item according to these when redo() and undo() is called.</db:para>
</db:listitem>
<db:listitem>
<db:para>DiagramScene inherits <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> and emits signals for the MoveComands when an item is moved.</db:para>
</db:listitem>
<db:listitem>
<db:para>DiagramItem inherits <db:link xlink:href="qgraphicspolygonitem.xml">QGraphicsPolygonItem</db:link> and represents an item in the diagram.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="mainwindow-class-definition">
<db:title>MainWindow Class Definition</db:title>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow();

public slots:
    void itemMoved(DiagramItem *movedDiagram, const QPointF &amp;amp;moveStartPosition);

private slots:
    void deleteItem();
    void addBox();
    void addTriangle();
    void about();
    void itemMenuAboutToShow();
    void itemMenuAboutToHide();

private:
    void createActions();
    void createMenus();
    void createUndoView();

    QAction *deleteAction = nullptr;
    QAction *addBoxAction = nullptr;
    QAction *addTriangleAction = nullptr;
    QAction *undoAction = nullptr;
    QAction *redoAction = nullptr;
    QAction *exitAction = nullptr;
    QAction *aboutAction = nullptr;

    QMenu *fileMenu = nullptr;
    QMenu *editMenu = nullptr;
    QMenu *itemMenu = nullptr;
    QMenu *helpMenu = nullptr;

    DiagramScene *diagramScene = nullptr;
    QUndoStack *undoStack = nullptr;
    QUndoView *undoView = nullptr;
};
</db:programlisting>
<db:para>The MainWindow class maintains the undo stack, i.e., it creates <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link>s and pushes and pops them from the stack when it receives the triggered() signal from undoAction and redoAction.</db:para>
</db:section>
<db:section xml:id="mainwindow-class-implementation">
<db:title>MainWindow Class Implementation</db:title>
<db:para>We will start with a look at the constructor:</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow()
{
    undoStack = new QUndoStack(this);

    createActions();
    createMenus();

    createUndoView();

    diagramScene = new DiagramScene();
    QBrush pixmapBrush(QPixmap(&quot;:/images/cross.png&quot;).scaled(30, 30));
    diagramScene-&amp;gt;setBackgroundBrush(pixmapBrush);
    diagramScene-&amp;gt;setSceneRect(QRect(0, 0, 500, 500));

    connect(diagramScene, &amp;amp;DiagramScene::itemMoved,
            this, &amp;amp;MainWindow::itemMoved);

    setWindowTitle(&quot;Undo Framework&quot;);
    QGraphicsView *view = new QGraphicsView(diagramScene);
    setCentralWidget(view);
    resize(700, 500);
}
</db:programlisting>
<db:para>In the constructor, we set up the DiagramScene and <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>.</db:para>
<db:para>Here is the createUndoView() function:</db:para>
<db:programlisting language="cpp">void MainWindow::createUndoView()
{
    undoView = new QUndoView(undoStack);
    undoView-&amp;gt;setWindowTitle(tr(&quot;Command List&quot;));
    undoView-&amp;gt;show();
    undoView-&amp;gt;setAttribute(Qt::WA_QuitOnClose, false);
}
</db:programlisting>
<db:para>The <db:link xlink:href="qundoview.xml">QUndoView</db:link> is a widget that display the text, which is set with the <db:link xlink:href="qundocommand.xml#setText">setText</db:link>() function, for each <db:link xlink:href="qundocommand.xml">QUndoCommand</db:link> in the undo stack in a list.</db:para>
<db:para>Here is the createActions() function:</db:para>
<db:programlisting language="cpp">void MainWindow::createActions()
{
    deleteAction = new QAction(tr(&quot;&amp;amp;Delete Item&quot;), this);
    deleteAction-&amp;gt;setShortcut(tr(&quot;Del&quot;));
    connect(deleteAction, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::deleteItem);
    ...
    undoAction = undoStack-&amp;gt;createUndoAction(this, tr(&quot;&amp;amp;Undo&quot;));
    undoAction-&amp;gt;setShortcuts(QKeySequence::Undo);

    redoAction = undoStack-&amp;gt;createRedoAction(this, tr(&quot;&amp;amp;Redo&quot;));
    redoAction-&amp;gt;setShortcuts(QKeySequence::Redo);
</db:programlisting>
<db:para>The createActions() function sets up all the examples actions in the manner shown above. The <db:link xlink:href="qundostack.xml#createUndoAction">createUndoAction</db:link>() and <db:link xlink:href="qundostack.xml#createRedoAction">createRedoAction</db:link>() methods help us create actions that are disabled and enabled based on the state of the stack. Also, the text of the action will be updated automatically based on the <db:link xlink:href="qundocommand.xml#text">text</db:link>() of the undo commands. For the other actions we have implemented slots in the MainWindow class.</db:para>
<db:para>Here is the createMenus() function:</db:para>
<db:programlisting language="cpp">void MainWindow::createMenus()
{
    ...
    editMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Edit&quot;));
    editMenu-&amp;gt;addAction(undoAction);
    editMenu-&amp;gt;addAction(redoAction);
    editMenu-&amp;gt;addSeparator();
    editMenu-&amp;gt;addAction(deleteAction);
    connect(editMenu, &amp;amp;QMenu::aboutToShow,
            this, &amp;amp;MainWindow::itemMenuAboutToShow);
    connect(editMenu, &amp;amp;QMenu::aboutToHide,
            this, &amp;amp;MainWindow::itemMenuAboutToHide);
    ...
}
</db:programlisting>
<db:para>We have to use the <db:link xlink:href="qmenu.xml">QMenu</db:link> aboutToShow() and aboutToHide() signals since we only want deleteAction to be enabled when we have selected an item.</db:para>
<db:para>Here is the itemMoved() slot:</db:para>
<db:programlisting language="cpp">void MainWindow::itemMoved(DiagramItem *movedItem,
                           const QPointF &amp;amp;oldPosition)
{
    undoStack-&amp;gt;push(new MoveCommand(movedItem, oldPosition));
}
</db:programlisting>
<db:para>We simply push a MoveCommand on the stack, which calls redo() on it.</db:para>
<db:para>Here is the deleteItem() slot:</db:para>
<db:programlisting language="cpp">void MainWindow::deleteItem()
{
    if (diagramScene-&amp;gt;selectedItems().isEmpty())
        return;

    QUndoCommand *deleteCommand = new DeleteCommand(diagramScene);
    undoStack-&amp;gt;push(deleteCommand);
}
</db:programlisting>
<db:para>An item must be selected to be deleted. We need to check if it is selected as the deleteAction may be enabled even if an item is not selected. This can happen as we do not catch a signal or event when an item is selected.</db:para>
<db:para>Here is the itemMenuAboutToShow() and itemMenuAboutToHide() slots:</db:para>
<db:programlisting language="cpp">void MainWindow::itemMenuAboutToHide()
{
    deleteAction-&amp;gt;setEnabled(true);
}

void MainWindow::itemMenuAboutToShow()
{
    deleteAction-&amp;gt;setEnabled(!diagramScene-&amp;gt;selectedItems().isEmpty());
}
</db:programlisting>
<db:para>We implement itemMenuAboutToShow() and itemMenuAboutToHide() to get a dynamic item menu. These slots are connected to the <db:link xlink:href="qmenu.xml#aboutToShow">aboutToShow</db:link>() and <db:link xlink:href="qmenu.xml#aboutToHide">aboutToHide</db:link>() signals. We need this to disable or enable the deleteAction.</db:para>
<db:para>Here is the addBox() slot:</db:para>
<db:programlisting language="cpp">void MainWindow::addBox()
{
    QUndoCommand *addCommand = new AddCommand(DiagramItem::Box, diagramScene);
    undoStack-&amp;gt;push(addCommand);
}
</db:programlisting>
<db:para>The addBox() function creates an AddCommand and pushes it on the undo stack.</db:para>
<db:para>Here is the addTriangle() sot:</db:para>
<db:programlisting language="cpp">void MainWindow::addTriangle()
{
    QUndoCommand *addCommand = new AddCommand(DiagramItem::Triangle,
                                              diagramScene);
    undoStack-&amp;gt;push(addCommand);
}
</db:programlisting>
<db:para>The addTriangle() function creates an AddCommand and pushes it on the undo stack.</db:para>
<db:para>Here is the implementation of about():</db:para>
<db:programlisting language="cpp">void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About Undo&quot;),
                       tr(&quot;The &amp;lt;b&amp;gt;Undo&amp;lt;/b&amp;gt; example demonstrates how to &quot;
                          &quot;use Qt's undo framework.&quot;));
}
</db:programlisting>
<db:para>The about slot is triggered by the aboutAction and displays an about box for the example.</db:para>
</db:section>
<db:section xml:id="addcommand-class-definition">
<db:title>AddCommand Class Definition</db:title>
<db:programlisting language="cpp">class AddCommand : public QUndoCommand
{
public:
    AddCommand(DiagramItem::DiagramType addType, QGraphicsScene *graphicsScene,
               QUndoCommand *parent = nullptr);
    ~AddCommand();

    void undo() override;
    void redo() override;

private:
    DiagramItem *myDiagramItem;
    QGraphicsScene *myGraphicsScene;
    QPointF initialPosition;
};
</db:programlisting>
<db:para>The AddCommand class adds DiagramItem graphics items to the DiagramScene.</db:para>
</db:section>
<db:section xml:id="addcommand-class-implementation">
<db:title>AddCommand Class Implementation</db:title>
<db:para>We start with the constructor:</db:para>
<db:programlisting language="cpp">AddCommand::AddCommand(DiagramItem::DiagramType addType,
                       QGraphicsScene *scene, QUndoCommand *parent)
    : QUndoCommand(parent), myGraphicsScene(scene)
{
    static int itemCount = 0;

    myDiagramItem = new DiagramItem(addType);
    initialPosition = QPointF((itemCount * 15) % int(scene-&amp;gt;width()),
                              (itemCount * 15) % int(scene-&amp;gt;height()));
    scene-&amp;gt;update();
    ++itemCount;
    setText(QObject::tr(&quot;Add %1&quot;)
        .arg(createCommandString(myDiagramItem, initialPosition)));
}
</db:programlisting>
<db:para>We first create the DiagramItem to add to the DiagramScene. The <db:link xlink:href="qundocommand.xml#setText">setText</db:link>() function let us set a <db:link xlink:href="qstring.xml">QString</db:link> that describes the command. We use this to get custom messages in the <db:link xlink:href="qundoview.xml">QUndoView</db:link> and in the menu of the main window.</db:para>
<db:programlisting language="cpp">void AddCommand::undo()
{
    myGraphicsScene-&amp;gt;removeItem(myDiagramItem);
    myGraphicsScene-&amp;gt;update();
}
</db:programlisting>
<db:para>undo() removes the item from the scene.</db:para>
<db:programlisting language="cpp">void AddCommand::redo()
{
    myGraphicsScene-&amp;gt;addItem(myDiagramItem);
    myDiagramItem-&amp;gt;setPos(initialPosition);
    myGraphicsScene-&amp;gt;clearSelection();
    myGraphicsScene-&amp;gt;update();
}
</db:programlisting>
<db:para>We set the position of the item as we do not do this in the constructor.</db:para>
</db:section>
<db:section xml:id="deletecommand-class-definition">
<db:title>DeleteCommand Class Definition</db:title>
<db:programlisting language="cpp">class DeleteCommand : public QUndoCommand
{
public:
    explicit DeleteCommand(QGraphicsScene *graphicsScene, QUndoCommand *parent = nullptr);

    void undo() override;
    void redo() override;

private:
    DiagramItem *myDiagramItem;
    QGraphicsScene *myGraphicsScene;
};
</db:programlisting>
<db:para>The DeleteCommand class implements the functionality to remove an item from the scene.</db:para>
</db:section>
<db:section xml:id="deletecommand-class-implementation">
<db:title>DeleteCommand Class Implementation</db:title>
<db:programlisting language="cpp">DeleteCommand::DeleteCommand(QGraphicsScene *scene, QUndoCommand *parent)
    : QUndoCommand(parent), myGraphicsScene(scene)
{
    QList&amp;lt;QGraphicsItem *&amp;gt; list = myGraphicsScene-&amp;gt;selectedItems();
    list.first()-&amp;gt;setSelected(false);
    myDiagramItem = static_cast&amp;lt;DiagramItem *&amp;gt;(list.first());
    setText(QObject::tr(&quot;Delete %1&quot;)
        .arg(createCommandString(myDiagramItem, myDiagramItem-&amp;gt;pos())));
}
</db:programlisting>
<db:para>We know that there must be one selected item as it is not possible to create a DeleteCommand unless the item to be deleted is selected and that only one item can be selected at any time. The item must be unselected if it is inserted back into the scene.</db:para>
<db:programlisting language="cpp">void DeleteCommand::undo()
{
    myGraphicsScene-&amp;gt;addItem(myDiagramItem);
    myGraphicsScene-&amp;gt;update();
}
</db:programlisting>
<db:para>The item is simply reinserted into the scene.</db:para>
<db:programlisting language="cpp">void DeleteCommand::redo()
{
    myGraphicsScene-&amp;gt;removeItem(myDiagramItem);
}
</db:programlisting>
<db:para>The item is removed from the scene.</db:para>
</db:section>
<db:section xml:id="movecommand-class-definition">
<db:title>MoveCommand Class Definition</db:title>
<db:programlisting language="cpp">class MoveCommand : public QUndoCommand
{
public:
    enum { Id = 1234 };

    MoveCommand(DiagramItem *diagramItem, const QPointF &amp;amp;oldPos,
                QUndoCommand *parent = nullptr);

    void undo() override;
    void redo() override;
    bool mergeWith(const QUndoCommand *command) override;
    int id() const override { return Id; }

private:
    DiagramItem *myDiagramItem;
    QPointF myOldPos;
    QPointF newPos;
};
</db:programlisting>
<db:para>The <db:link xlink:href="qundocommand.xml#mergeWith">mergeWith</db:link>() is reimplemented to make consecutive moves of an item one MoveCommand, i.e, the item will be moved back to the start position of the first move.</db:para>
</db:section>
<db:section xml:id="movecommand-class-implementation">
<db:title>MoveCommand Class Implementation</db:title>
<db:para>The constructor of MoveCommand looks like this:</db:para>
<db:programlisting language="cpp">MoveCommand::MoveCommand(DiagramItem *diagramItem, const QPointF &amp;amp;oldPos,
                         QUndoCommand *parent)
    : QUndoCommand(parent), myDiagramItem(diagramItem)
    , myOldPos(oldPos), newPos(diagramItem-&amp;gt;pos())
{
}
</db:programlisting>
<db:para>We save both the old and new positions for undo and redo respectively.</db:para>
<db:programlisting language="cpp">void MoveCommand::undo()
{
    myDiagramItem-&amp;gt;setPos(myOldPos);
    myDiagramItem-&amp;gt;scene()-&amp;gt;update();
    setText(QObject::tr(&quot;Move %1&quot;)
        .arg(createCommandString(myDiagramItem, newPos)));
}
</db:programlisting>
<db:para>We simply set the items old position and update the scene.</db:para>
<db:programlisting language="cpp">void MoveCommand::redo()
{
    myDiagramItem-&amp;gt;setPos(newPos);
    setText(QObject::tr(&quot;Move %1&quot;)
        .arg(createCommandString(myDiagramItem, newPos)));
}
</db:programlisting>
<db:para>We set the item to its new position.</db:para>
<db:programlisting language="cpp">bool MoveCommand::mergeWith(const QUndoCommand *command)
{
    const MoveCommand *moveCommand = static_cast&amp;lt;const MoveCommand *&amp;gt;(command);
    DiagramItem *item = moveCommand-&amp;gt;myDiagramItem;

    if (myDiagramItem != item)
        return false;

    newPos = item-&amp;gt;pos();
    setText(QObject::tr(&quot;Move %1&quot;)
        .arg(createCommandString(myDiagramItem, newPos)));

    return true;
}
</db:programlisting>
<db:para>Whenever a MoveCommand is created, this function is called to check if it should be merged with the previous command. It is the previous command object that is kept on the stack. The function returns true if the command is merged; otherwise false.</db:para>
<db:para>We first check whether it is the same item that has been moved twice, in which case we merge the commands. We update the position of the item so that it will take the last position in the move sequence when undone.</db:para>
</db:section>
<db:section xml:id="diagramscene-class-definition">
<db:title>DiagramScene Class Definition</db:title>
<db:programlisting language="cpp">class DiagramScene : public QGraphicsScene
{
    Q_OBJECT

public:
    DiagramScene(QObject *parent = nullptr);

signals:
    void itemMoved(DiagramItem *movedItem, const QPointF &amp;amp;movedFromPosition);

protected:
    void mousePressEvent(QGraphicsSceneMouseEvent *event) override;
    void mouseReleaseEvent(QGraphicsSceneMouseEvent *event) override;

private:
    QGraphicsItem *movingItem = nullptr;
    QPointF oldPos;
};
</db:programlisting>
<db:para>The DiagramScene implements the functionality to move a DiagramItem with the mouse. It emits a signal when a move is completed. This is caught by the MainWindow, which makes MoveCommands. We do not examine the implementation of DiagramScene as it only deals with graphics framework issues.</db:para>
</db:section>
<db:section xml:id="the-main-function">
<db:title>The main() Function</db:title>
<db:para>The main() function of the program looks like this:</db:para>
<db:programlisting language="cpp">int main(int argv, char *args[])
{
    Q_INIT_RESOURCE(undoframework);

    QApplication app(argv, args);

    MainWindow mainWindow;
    mainWindow.show();

    return app.exec();
}
</db:programlisting>
<db:para>We draw a grid in the background of the DiagramScene, so we use a resource file. The rest of the function creates the MainWindow and shows it as a top level window.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/tools/undoframework?h=6.3">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
