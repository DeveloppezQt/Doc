<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Changes to Qt GUI</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Migrate Qt GUI to Qt 6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 6 is a result of the conscious effort to make the framework more efficient and easy to use.</db:para>
<db:para>We try to maintain binary and source compatibility for all the public APIs in each release. But some changes were inevitable in an effort to make Qt a better framework.</db:para>
<db:para>In this topic we summarize those changes in Qt GUI, and provide guidance to handle them.</db:para>
<db:section xml:id="kernel-classes">
<db:title>Kernel classes</db:title>
<db:section xml:id="the-qbitmap-class">
<db:title>The QBitmap class</db:title>
<db:para>Implicit construction of a <db:link xlink:href="qbitmap.xml">QBitmap</db:link> from a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> is no longer supported. The constructor and assignment operator have been made explicit and marked as deprecated. Use the new static factory function <db:link xlink:href="qbitmap.xml#fromPixmap">fromPixmap</db:link> instead.</db:para>
</db:section>
<db:section xml:id="the-qcursor-class">
<db:title>The QCursor class</db:title>
<db:para>Implicit construction of a <db:link xlink:href="qcursor.xml">QCursor</db:link> from a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> is no longer supported, the constructor has been made explicit.</db:para>
</db:section>
<db:section xml:id="the-qkeycombination-class">
<db:title>The QKeyCombination class</db:title>
<db:para><db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> is a new class for storing a combination of a key with an optional modifier. It should be used as a replacement for combining values from the <db:link xlink:href="qt.xml#Key-enum">Qt::Key</db:link> enum with a modifier in a type-safe way.</db:para>
<db:para>We recommend migrating code that currently uses operator+() to combine a key and modifiers, as future C++ standards are likely to declare arithmetic operations between unrelated enumeration types as illegal. Use operator|(), and change APIs that expect an <db:code>int</db:code> to expect a <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> instead.</db:para>
<db:para>Existing APIs that expect an <db:code>int</db:code> for a key combination can be called using <db:link xlink:href="qkeycombination.xml#toCombined">QKeyCombination::toCombined</db:link>().</db:para>
</db:section>
</db:section>
<db:section xml:id="text-classes">
<db:title>Text classes</db:title>
<db:section xml:id="the-qfontdatabase-class">
<db:title>The QFontDatabase class</db:title>
<db:para>The <db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link> class has now only static member functions. The constructor has been deprecated. Instead of e.g.</db:para>
<db:programlisting language="cpp">const QStringList fontFamilies = QFontDatabase().families();
</db:programlisting>
<db:para>use</db:para>
<db:programlisting language="cpp">const QStringList fontFamilies = QFontDatabase::families();
</db:programlisting>
</db:section>
<db:section xml:id="the-qfont-class">
<db:title>The QFont class</db:title>
<db:para>The numerical values of the <db:link xlink:href="qfont.xml#Weight-enum">QFont::Weight</db:link> enumerator have been changed to be in line with OpenType weight values. <db:link xlink:href="qfont.xml#setWeight">QFont::setWeight</db:link>() expects an enum value instead of an <db:code>int</db:code>, and code that calls the setter with an integer will fail to compile. To continue to use old integer values, use QFont::setLegacyWeight().</db:para>
</db:section>
</db:section>
<db:section xml:id="painting-classes">
<db:title>Painting classes</db:title>
<db:para>See the porting guide for <db:link xlink:href="printsupport-changes-qt6.xml">Qt Print Support</db:link> for information about <db:link xlink:href="qpagedpaintdevice.xml">QPagedPaintDevice</db:link> and other printing related classes.</db:para>
</db:section>
<db:section xml:id="utility-classes">
<db:title>Utility classes</db:title>
<db:section xml:id="qintvalidator-and-qdoublevalidator">
<db:title>QIntValidator and QDoubleValidator</db:title>
<db:para>The <db:link xlink:href="qintvalidator.xml#setRange">setRange</db:link>() method is no longer marked as virtual.</db:para>
</db:section>
</db:section>
<db:section xml:id="opengl-classes">
<db:title>OpenGL classes</db:title>
<db:para>With the introduction of Qt RHI as the rendering foundation in Qt, most classes prefixed by <db:code>QOpenGL</db:code> have been moved into the <db:link xlink:href="qtopengl-index.xml">Qt OpenGL</db:link> module.</db:para>
<db:para>More details can be found in <db:link xlink:href="opengl-changes-qt6.xml">the Qt OpenGL porting guide</db:link>.</db:para>
<db:para>One notable exception is the class <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>, which still resides in Qt GUI.</db:para>
<db:para>In addition, the class <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link> has been moved to a new module, named Qt OpenGL Widgets.</db:para>
<db:section xml:id="the-qopenglcontext-class">
<db:title>The QOpenGLContext class</db:title>
<db:para>The QOpenGLContext::versionFunctions() function is replaced by <db:link xlink:href="qopenglversionfunctionsfactory.xml#get">QOpenGLVersionFunctionsFactory::get</db:link>(). <db:link xlink:href="qopenglversionfunctionsfactory.xml">QOpenGLVersionFunctionsFactory</db:link> is a public class now, part of the <db:link xlink:href="qtopengl-index.xml">Qt OpenGL</db:link> module.</db:para>
</db:section>
<db:section xml:id="angle">
<db:title>ANGLE</db:title>
<db:para>On Windows, ANGLE, a third-party OpenGL ES to Direct 3D translator, is no longer included in Qt. This means <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_UseOpenGLES</db:link> and the environment variable <db:code>QT_OPENGL=angle</db:code> no longer have any effect. In <db:link xlink:href="windows-graphics.xml#dynamically-loading-opengl">dynamic OpenGL builds</db:link> there is no automatic fallback to ANGLE in case OpenGL proper fails to initialize. For <db:link xlink:href="qwindow.xml">QWindow</db:link> or <db:link xlink:href="qwidget.xml">QWidget</db:link> based applications using OpenGL directly, for example via <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>, this means that OpenGL proper is the only option at run time. However, the alternative of using a pure software OpenGL implementation, such as Mesa llvmpipe that is shipped with the pre-built Qt packages, is still available. For Qt Quick and Qt Quick 3D applications, Qt 6 introduces support for Direct 3D 11, Vulkan, and Metal, in addition to OpenGL. On Windows the default choice is Direct 3D, therefore the removal of ANGLE is alleviated by having support for graphics APIs other than OpenGL as well.</db:para>
</db:section>
</db:section>
</db:article>
