<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Changes to Qt GUI</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Kernel, Text, Painting, and Utility classes are modified.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 6 is a result of the conscious effort to make the framework more efficient and easy to use.</db:para>
<db:para>We try to maintain binary and source compatibility for all the public APIs in each release. But some changes were inevitable in an effort to make Qt a better framework.</db:para>
<db:para>In this topic we summarize those changes in Qt GUI, and provide guidance to handle them.</db:para>
<db:section xml:id="kernel-classes">
<db:title>Kernel classes</db:title>
<db:section xml:id="the-qbitmap-class">
<db:title>The QBitmap class</db:title>
<db:para>Implicit construction of a <db:link xlink:href="qbitmap.xml">QBitmap</db:link> from a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> is no longer supported. The constructor and assignment operator have been made explicit and marked as deprecated. Use the new static factory function <db:link xlink:href="qbitmap.xml#fromPixmap">fromPixmap</db:link> instead.</db:para>
</db:section>
<db:section xml:id="the-qcursor-class">
<db:title>The QCursor class</db:title>
<db:para>Implicit construction of a <db:link xlink:href="qcursor.xml">QCursor</db:link> from a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> is no longer supported, the constructor has been made explicit.</db:para>
</db:section>
<db:section xml:id="the-qkeycombination-class">
<db:title>The QKeyCombination class</db:title>
<db:para><db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> is a new class for storing a combination of a key with an optional modifier. It should be used as a replacement for combining values from the <db:link xlink:href="qt.xml#Key-enum">Qt::Key</db:link> enum with a modifier in a type-safe way.</db:para>
<db:para>We recommend migrating code that currently uses operator+() to combine a key and modifiers, as future C++ standards are likely to declare arithmetic operations between unrelated enumeration types as illegal. Use operator|(), and change APIs that expect an <db:code>int</db:code> to expect a <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> instead.</db:para>
<db:para>Existing APIs that expect an <db:code>int</db:code> for a key combination can be called using <db:link xlink:href="qkeycombination.xml#toCombined">QKeyCombination::toCombined</db:link>().</db:para>
</db:section>
</db:section>
<db:section xml:id="text-classes">
<db:title>Text classes</db:title>
<db:section xml:id="the-qfontdatabase-class">
<db:title>The QFontDatabase class</db:title>
<db:para>The <db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link> class has now only static member functions. The constructor has been deprecated. Instead of e.g.</db:para>
<db:programlisting language="cpp">const QStringList fontFamilies = QFontDatabase().families();
</db:programlisting>
<db:para>use</db:para>
<db:programlisting language="cpp">const QStringList fontFamilies = QFontDatabase::families();
</db:programlisting>
</db:section>
<db:section xml:id="the-qfont-class">
<db:title>The QFont class</db:title>
<db:para>The numerical values of the <db:link xlink:href="qfont.xml#Weight-enum">QFont::Weight</db:link> enumerator have been changed to be in line with OpenType weight values. <db:link xlink:href="qfont.xml#setWeight">QFont::setWeight</db:link>() expects an enum value instead of an <db:code>int</db:code>, and code that calls the setter with an integer will fail to compile. To continue to use old integer values, use QFont::setLegacyWeight().</db:para>
</db:section>
</db:section>
<db:section xml:id="painting-classes">
<db:title>Painting classes</db:title>
<db:para>See the porting guide for <db:link xlink:href="">Qt Print Support</db:link> for information about <db:link xlink:href="qpagedpaintdevice.xml">QPagedPaintDevice</db:link> and other printing related classes.</db:para>
</db:section>
<db:section xml:id="utility-classes">
<db:title>Utility classes</db:title>
<db:section xml:id="qintvalidator-and-qdoublevalidator">
<db:title>QIntValidator and QDoubleValidator</db:title>
<db:para>The <db:link xlink:href="qintvalidator.xml#setRange">setRange</db:link>() method is no longer marked as virtual.</db:para>
</db:section>
</db:section>
<db:section xml:id="opengl-classes">
<db:title>OpenGL classes</db:title>
<db:para>With the introduction of Qt RHI as the rendering foundation in Qt, most classes prefixed by <db:code>QOpenGL</db:code> have been moved into the <db:link xlink:href="">Qt OpenGL</db:link> module.</db:para>
<db:para>More details can be found in <db:link xlink:href="">the Qt OpenGL porting guide</db:link>.</db:para>
<db:para>One notable exception is the class <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>, which still resides in Qt GUI.</db:para>
<db:para>In addition, the class QOpenGLWidget has been moved to a new module, named Qt OpenGL Widgets.</db:para>
<db:section xml:id="the-qopenglcontext-class">
<db:title>The QOpenGLContext class</db:title>
<db:para>The QOpenGLContext::versionFunctions() function is replaced by QOpenGLVersionFunctionsFactory::get(). QOpenGLVersionFunctionsFactory is a public class now, part of the <db:link xlink:href="">Qt OpenGL</db:link> module.</db:para>
</db:section>
<db:section xml:id="angle">
<db:title>ANGLE</db:title>
<db:para>On Windows, ANGLE, a third-party OpenGL ES to Direct 3D translator, is no longer included in Qt. This means <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_UseOpenGLES</db:link> and the environment variable <db:code>QT_OPENGL=angle</db:code> no longer have any effect. In <db:link xlink:href="">dynamic OpenGL builds</db:link> there is no automatic fallback to ANGLE in case OpenGL proper fails to initialize. For <db:link xlink:href="qwindow.xml">QWindow</db:link> or QWidget based applications using OpenGL directly, for example via QOpenGLWidget, this means that OpenGL proper is the only option at run time. However, the alternative of using a pure software OpenGL implementation, such as Mesa llvmpipe that is shipped with the pre-built Qt packages, is still available. For Qt Quick and Qt Quick 3D applications, Qt 6 introduces support for Direct 3D 11, Vulkan, and Metal, in addition to OpenGL. On Windows the default choice is Direct 3D, therefore the removal of ANGLE is alleviated by having support for graphics APIs other than OpenGL as well.</db:para>
</db:section>
<db:section xml:id="native-clipboard-integration">
<db:title>Native clipboard integration</db:title>
<db:para>Qt 5 provided interfaces for integrating platform specific or custom clipboard formats into Qt through <db:code>QMacPasteboardMime</db:code> in <db:code>QtMacExtras</db:code>, and <db:code>QWindowsMime</db:code> from the Windows QPA API. Since Qt 6.6, the equivalent functionality is provided by the classes <db:link xlink:href="qutimimeconverter.xml">QUtiMimeConverter</db:link> for macOS, and the <db:link xlink:href="qwindowsmimeconverter.xml">QWindowsMimeConverter</db:link> for Windows.</db:para>
<db:para>Porting from QWindowsMime to <db:link xlink:href="qwindowsmimeconverter.xml">QWindowsMimeConverter</db:link> requires practically no changes, as the virtual interface is identical. However, in Qt 6 it is no longer needed to register a <db:link xlink:href="qwindowsmimeconverter.xml">QWindowsMimeConverter</db:link> implementation; instantiating the type implicitly registers the converter.</db:para>
<db:para>Porting a QMacPasteboardMime to <db:link xlink:href="qutimimeconverter.xml">QUtiMimeConverter</db:link> requires renaming some of the virtual functions. Note that the <db:code>QMacPasteboardMime</db:code> API used the outdated term <db:code>flavor</db:code> for the native clipboard format on macOS, whereas the platform now uses <db:code>Uniform Type Identifiers</db:code>, i.e. <db:code>UTI</db:code>s, which Qt has adapted for function and parameter names.</db:para>
<db:para>The <db:code>mimeFor</db:code> and <db:code>flavorFor</db:code> functions are replaced by the mimeForUti and utiForMime implementations, respectively. Those should return the name of the mime type or <db:code>UTI</db:code> that the converter can convert the input format to, so a port usually just involves renaming existing overrides. The <db:code>convertToMime</db:code>, <db:code>convertFromMime</db:code>, and <db:code>count</db:code> functions in <db:link xlink:href="qutimimeconverter.xml">QUtiMimeConverter</db:link> are identical to their QMacPasteboardMime versions.</db:para>
<db:para>The <db:code>canConvert</db:code>, <db:code>converterName</db:code> functions are no longer needed, they are implied by implementation of the above functions, so overrides of those functions can be removed.</db:para>
<db:para>As with the the <db:link xlink:href="qwindowsmimeconverter.xml">QWindowsMimeConverter</db:link>, registration is done by instantiating the type.</db:para>
</db:section>
</db:section>
</db:article>
