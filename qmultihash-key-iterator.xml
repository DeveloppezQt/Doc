<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>key_iterator Class</db:title>
<db:subtitle>QMultiHash::key_iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmultihash-key-iterator.xml">QMultiHash::key_iterator</db:link> class provides an STL-style const iterator for <db:link xlink:href="qmultihash.xml">QMultiHash</db:link> keys.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>key_iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmultihash-key-iterator.xml">QMultiHash::key_iterator</db:link> is essentially the same as <db:link xlink:href="qmultihash-const-iterator.xml">QMultiHash::const_iterator</db:link> with the difference that operator*() and operator-&gt;() return a key instead of a value.</db:para>
<db:para>For most uses <db:link xlink:href="qmultihash-iterator.xml">QMultiHash::iterator</db:link> and <db:link xlink:href="qmultihash-const-iterator.xml">QMultiHash::const_iterator</db:link> should be used, you can easily access the key by calling <db:link xlink:href="qmultihash-iterator.xml#key">QMultiHash::iterator::key</db:link>():</db:para>
<db:programlisting language="cpp">for (auto it = hash.cbegin(), end = hash.cend(); it != end; ++it) {
    cout &lt;&lt; &quot;The key: &quot; &lt;&lt; it.key() &lt;&lt; endl;
    cout &lt;&lt; &quot;The value: &quot; &lt;&lt; qPrintable(it.value()) &lt;&lt; endl;
    cout &lt;&lt; &quot;Also the value: &quot; &lt;&lt; qPrintable(*it) &lt;&lt; endl;
}
</db:programlisting>
<db:para>However, to have interoperability between <db:link xlink:href="qmultihash.xml">QMultiHash</db:link>'s keys and STL-style algorithms we need an iterator that dereferences to a key instead of a value. With <db:link xlink:href="qmultihash-key-iterator.xml">QMultiHash::key_iterator</db:link> we can apply an algorithm to a range of keys without having to call <db:link xlink:href="qmultihash.xml#keys">QMultiHash::keys</db:link>(), which is inefficient as it costs one <db:link xlink:href="qmultihash.xml">QMultiHash</db:link> iteration and memory allocation to create a temporary <db:link xlink:href="qlist.xml">QList</db:link>.</db:para>
<db:programlisting language="cpp">// Inefficient, keys() is expensive
QList&lt;int&gt; keys = hash.keys();
int numPrimes = std::count_if(keys.cbegin(), keys.cend(), isPrimeNumber);
qDeleteAll(hash2.keys());

// Efficient, no memory allocation needed
int numPrimes = std::count_if(hash.keyBegin(), hash.keyEnd(), isPrimeNumber);
qDeleteAll(hash2.keyBegin(), hash2.keyEnd());
</db:programlisting>
<db:para><db:link xlink:href="qmultihash-key-iterator.xml">QMultiHash::key_iterator</db:link> is const, it's not possible to modify the key.</db:para>
<db:para>The default <db:link xlink:href="qmultihash-key-iterator.xml">QMultiHash::key_iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a <db:link xlink:href="qmultihash.xml">QMultiHash</db:link> function like <db:link xlink:href="qmultihash.xml#keyBegin">QMultiHash::keyBegin</db:link>() or <db:link xlink:href="qmultihash.xml#keyEnd">QMultiHash::keyEnd</db:link>().</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultihash-const-iterator.xml">QMultiHash::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmultihash-iterator.xml">QMultiHash::iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="base">
<db:title>[noexcept] QMultiHash&lt;Key, T&gt;::const_iterator key_iterator::base() const</db:title>
<db:para>Returns the underlying <db:link xlink:href="qmultihash-const-iterator.xml">const_iterator</db:link> this <db:link xlink:href="qmultihash-key-iterator.xml">key_iterator</db:link> is based on.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool key_iterator::operator!=(QMultiHash&lt;Key, T&gt;::key_iterator <db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to a different item than this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultihash-key-iterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a">
<db:title>[noexcept] const Key &amp;key_iterator::operator*() const</db:title>
<db:para>Returns the current item's key.</db:para>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>[noexcept] QMultiHash&lt;Key, T&gt;::key_iterator &amp;key_iterator::operator++()</db:title>
<db:para>The prefix ++ operator (++i) advances the iterator to the next item in the hash and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qmultihash.xml#keyEnd">QMultiHash::keyEnd</db:link>() leads to undefined results.</db:para>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>[noexcept] QMultiHash&lt;Key, T&gt;::key_iterator key_iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator (i++) advances the iterator to the next item in the hash and returns an iterator to the previous item.</db:para>
</db:section>
<db:section xml:id="operator--gt">
<db:title>[noexcept] const Key *key_iterator::operator-&gt;() const</db:title>
<db:para>Returns a pointer to the current item's key.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool key_iterator::operator==(QMultiHash&lt;Key, T&gt;::key_iterator <db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to the same item as this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultihash-key-iterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
