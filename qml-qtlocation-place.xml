<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Place QML Type</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Place type represents a location that is a position of interest.</db:para>
<db:para>This type was introduced in Qt Location 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtLocation 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt Location 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Place is part of <db:simplelist><db:member>qml-QtLocation5-places</db:member><db:member>qml-QtLocation5-places-data</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Place type represents a physical location with additional metadata describing that location. Contrasted with <db:link xlink:href="mobiledevelopment.xml#location">Location</db:link>, <db:link xlink:href="qml-qtpositioning-address.xml">Address</db:link>, and <db:link xlink:href="qml-coordinate.xml">coordinate</db:link> type which are used to describe where a location is. The basic properties of a Place are its <db:link xlink:href="qml-qtlocation-place.xml#name-prop">name</db:link> and <db:link xlink:href="qml-qtlocation-place.xml#location-prop">location</db:link>.</db:para>
<db:para>Place objects are typically obtained from a search model and will generally only have their basic properties set. The <db:link xlink:href="qml-qtlocation-place.xml#detailsFetched-prop">detailsFetched</db:link> property can be used to test if further property values need to be fetched from the <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link>. This can be done by invoking the <db:link xlink:href="qml-qtlocation-place.xml#getDetails-method">getDetails</db:link>() method. Progress of the fetching operation can be monitored with the <db:link xlink:href="qml-qtlocation-place.xml#status-prop">status</db:link> property, which will be set to Place.Fetching when the details are being fetched.</db:para>
<db:para>The Place type has many properties holding information about the location. Details on how to contact the place are available from the <db:link xlink:href="qml-qtlocation-place.xml#contactDetails-prop">contactDetails</db:link> property. Convenience properties for obtaining the primary <db:link xlink:href="qml-qtlocation-place.xml#primaryPhone-prop">phone</db:link>, <db:link xlink:href="qml-qtlocation-place.xml#primaryFax-prop">fax</db:link>, <db:link xlink:href="qml-qtlocation-place.xml#primaryEmail-prop">email</db:link> and <db:link xlink:href="qml-qtlocation-place.xml#primaryWebsite-prop">website</db:link> are also available.</db:para>
<db:para>Each place is assigned zero or more <db:link xlink:href="qml-qtlocation-place.xml#categories-prop">categories</db:link>. Categories are typically used when searching for a particular kind of place, such as a restaurant or hotel. Some places have a <db:link xlink:href="qml-qtlocation-place.xml#ratings-prop">ratings</db:link> object, which gives an indication of the quality of the place.</db:para>
<db:para>Place metadata is provided by a <db:link xlink:href="qml-qtlocation-place.xml#supplier-prop">supplier</db:link> who may require that an <db:link xlink:href="qml-qtlocation-place.xml#attribution-prop">attribution</db:link> message be displayed to the user when the place details are viewed.</db:para>
<db:para>Places have an associated <db:link xlink:href="qml-qtlocation-place.xml#icon-prop">icon</db:link> which can be used to represent a place on a map or to decorate a delegate in a view.</db:para>
<db:para>Places may have additional rich content associated with them. The currently supported rich content include editorial descriptions, reviews and images. These are exposed as a set of models for retrieving the content. Editorial descriptions of the place are available from the <db:link xlink:href="qml-qtlocation-place.xml#editorialModel-prop">editorialModel</db:link> property. Reviews of the place are available from the <db:link xlink:href="qml-qtlocation-place.xml#reviewModel-prop">reviewModel</db:link> property. A gallery of pictures of the place can be accessed using the <db:link xlink:href="qml-qtlocation-place.xml#imageModel-prop">imageModel</db:link> property.</db:para>
<db:para>Places may have additional attributes which are not covered in the formal API. The <db:link xlink:href="qml-qtlocation-place.xml#extendedAttributes-prop">extendedAttributes</db:link> property provides access to these. The type of extended attributes available is specific to each <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link>.</db:para>
<db:para>A Place is almost always tied to a <db:link xlink:href="qml-qtlocation-place.xml#plugin-prop">plugin</db:link>. The <db:link xlink:href="qml-qtlocation-place.xml#plugin-prop">plugin</db:link> property must be set before it is possible to call <db:link xlink:href="qml-qtlocation-place.xml#save-method">save</db:link>(), <db:link xlink:href="qml-qtlocation-place.xml#remove-method">remove</db:link>() or <db:link xlink:href="qml-qtlocation-place.xml#getDetails-method">getDetails</db:link>(). The <db:link xlink:href="qml-qtlocation-place.xml#reviewModel-prop">reviewModel</db:link>, <db:link xlink:href="qml-qtlocation-place.xml#imageModel-prop">imageModel</db:link> and <db:link xlink:href="qml-qtlocation-place.xml#editorialModel-prop">editorialModel</db:link> are only valid then the <db:link xlink:href="qml-qtlocation-place.xml#plugin-prop">plugin</db:link> property is set.</db:para>
<db:section xml:id="saving-a-place">
<db:title>Saving a Place</db:title>
<db:para>If the <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> supports it, the Place type can be used to save a place. First create a new Place and set its properties:</db:para>
<db:programlisting language="qml">Place {
    id: myPlace
    plugin: myPlugin

    name: &quot;Brisbane Technology Park&quot;
    location: Location {
        address: Address {
            street: &quot;53 Brandl Street&quot;
            city: &quot;Eight Mile Plains&quot;
            postalCode: &quot;4113&quot;
            country: &quot;Australia&quot;
        }
        coordinate {
            latitude: -27.579646
            longitude: 153.100308
        }
    }

    visibility: Place.PrivateVisibility
}
</db:programlisting>
<db:para>Then invoke the <db:link xlink:href="qml-qtlocation-place.xml#save-method">save</db:link>() method:</db:para>
<db:programlisting language="qml">    myPlace.save();
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtlocation-place.xml#status-prop">status</db:link> property will change to Place.Saving and then to Place.Ready if the save was successful or to Place.Error if an error occurs.</db:para>
<db:para>If the <db:link xlink:href="qml-qtlocation-place.xml#placeId-prop">placeId</db:link> property is set, the backend will update an existing place otherwise it will create a new place. On success the <db:link xlink:href="qml-qtlocation-place.xml#placeId-prop">placeId</db:link> property will be updated with the identifier of the newly saved place.</db:para>
<db:section xml:id="caveats">
<db:title>Caveats</db:title>
<db:para>The Places API is currently designed for only saving <db:code role="parameter">core</db:code> details. Saving rich content like images and reviews or details like supplier and rating is not a supported use case. Typically a manager will generally ignore these fields upon save and may produce a warning message if they are populated.</db:para>
<db:para>The Places API only supports saving of the following <db:emphasis>core details</db:emphasis>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>name</db:para>
</db:listitem>
<db:listitem>
<db:para>place id</db:para>
</db:listitem>
<db:listitem>
<db:para>location</db:para>
</db:listitem>
<db:listitem>
<db:para>contact details</db:para>
</db:listitem>
<db:listitem>
<db:para>icon</db:para>
</db:listitem>
<db:listitem>
<db:para>categories (tag-like names to describe a place)</db:para>
</db:listitem>
<db:listitem>
<db:para>visibility scope</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>It is possible that providers may only support a subset of these. See the <db:link xlink:href="qtlocation-index.xml#plugin-references-and-parameters">plugin documentation</db:link> for more details.</db:para>
<db:para>Saving of properties such as the rating, extended attributes, images, reviews, editorials and supplier is explicitly not supported by the Places API.</db:para>
</db:section>
<db:section xml:id="saving-between-plugins">
<db:title>Saving Between Plugins</db:title>
<db:para>When saving places between plugins, there are a few things to be aware of. Some fields of a place such as the id, categories and icons are plugin specific entities. For example the categories in one manager may not be recognised in another. Therefore trying to save a place directly from one plugin to another is not possible.</db:para>
<db:para>It is generally recommended that saving across plugins be handled as saving <db:link xlink:href="qml-qtlocation-place.xml#favorites">favorites</db:link> as explained in the Favorites section. However there is another approach which is to create a new place, set its (destination) plugin and then use the <db:link xlink:href="qml-qtlocation-place.xml#copyFrom-method">copyFrom</db:link>() method to copy the details of the original place. Using <db:link xlink:href="qml-qtlocation-place.xml#copyFrom-method">copyFrom</db:link>() only copies data that is supported by the destination plugin, plugin specific data such as the place identifier is not copied over. Once the copy is done, the place is in a suitable state to be saved.</db:para>
<db:para>The following snippet provides an example of saving a place to a different plugin using the <db:link xlink:href="qml-qtlocation-place.xml#copyFrom-method">copyFrom</db:link> method:</db:para>
<db:programlisting language="qml">var place = Qt.createQmlObject('import QtLocation 5.3; Place { }', parent);
place.plugin = destinationPlugin;
place.copyFrom(originalPlace);
place.save();
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="removing-a-place">
<db:title>Removing a Place</db:title>
<db:para>To remove a place, ensure that a Place object with a valid <db:link xlink:href="qml-qtlocation-place.xml#placeId-prop">placeId</db:link> property exists and call its <db:link xlink:href="qml-qtlocation-place.xml#remove-method">remove</db:link>() method. The <db:link xlink:href="qml-qtlocation-place.xml#status-prop">status</db:link> property will change to Place.Removing and then to Place.Ready if the save was successful or to Place.Error if an error occurs.</db:para>
</db:section>
<db:section xml:id="favorites">
<db:title>Favorites</db:title>
<db:para>The Places API supports the concept of favorites. Favorites are generally implemented by using two plugins, the first plugin is typically a read-only source of places (origin plugin) and a second read/write plugin (destination plugin) is used to store places from the origin as favorites.</db:para>
<db:para>Each Place has a favorite property which is intended to contain the corresponding place from the destination plugin (the place itself is sourced from the origin plugin). Because both the original place and favorite instances are available, the developer can choose which properties to show to the user. For example the favorite may have a modified name which should be displayed rather than the original name.</db:para>
<db:programlisting language="qml">Text { text: place.favorite ? place.favorite.name : place.name }
</db:programlisting>
<db:para>The following demonstrates how to save a new favorite instance. A call is made to create/initialize the favorite instance and then the instance is saved.</db:para>
<db:programlisting language="qml">place.initializeFavorite(destinationPlugin);
//if necessary customizations to the favorite can be made here.
//...
place.favorite.save();
</db:programlisting>
<db:para>The following demonstrates favorite removal:</db:para>
<db:programlisting language="qml">place.favorite.remove();
    ...
//check successful removal of the favorite by monitoring its status.
//once that is done we can assign null to the favorite
place.favorite = null;
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> has a favoritesPlugin property. If the property is set, any places found during a search are checked against the favoritesPlugin to see if there is a corresponding favorite place. If so, the favorite property of the Place is set, otherwise the favorite property is remains null.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="attribution-prop">
<db:title>attribution : string</db:title>
<db:para>This property holds a rich text attribution string for the place. Some providers may require that the attribution be shown to the user whenever a place is displayed. The contents of this property should be shown to the user if it is not empty.</db:para>
</db:section>
<db:section xml:id="categories-prop">
<db:title>[read-only] categories : list&lt;Category&gt;</db:title>
<db:para>This property holds the list of categories this place is a member of. The categories that can be assigned to a place are specific to each <db:link xlink:href="qml-qtlocation-place.xml#plugin-prop">plugin</db:link>.</db:para>
</db:section>
<db:section xml:id="contactDetails-prop">
<db:title>[read-only] contactDetails : ContactDetails</db:title>
<db:para>This property holds the contact information for this place, for example a phone number or a website URL. This property is a map of <db:link xlink:href="qml-qtlocation-contactdetail.xml">ContactDetail</db:link> objects.</db:para>
</db:section>
<db:section xml:id="detailsFetched-prop">
<db:title>[read-only] detailsFetched : bool</db:title>
<db:para>This property indicates whether the details of the place have been fetched. If this property is false, the place details have not yet been fetched. Fetching can be done by invoking the <db:link xlink:href="qml-qtlocation-place.xml#getDetails-method">getDetails</db:link>() method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-place.xml#getDetails-method">getDetails</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="editorialModel-prop">
<db:title>[read-only] editorialModel : EditorialModel</db:title>
<db:para>This property holds a model which can be used to retrieve editorial descriptions of the place.</db:para>
</db:section>
<db:section xml:id="extendedAttributes-prop">
<db:title>[read-only] extendedAttributes : ExtendedAttributes</db:title>
<db:para>This property holds the extended attributes of a place. Extended attributes are additional information about a place not covered by the place's properties.</db:para>
</db:section>
<db:section xml:id="favorite-prop">
<db:title>favorite : Place</db:title>
<db:para>This property holds the favorite instance of a place.</db:para>
</db:section>
<db:section xml:id="icon-prop">
<db:title>icon : Icon</db:title>
<db:para>This property holds a graphical icon which can be used to represent the place.</db:para>
</db:section>
<db:section xml:id="imageModel-prop">
<db:title>[read-only] imageModel : ImageModel</db:title>
<db:para>This property holds a model which can be used to retrieve images of the place.</db:para>
</db:section>
<db:section xml:id="location-prop">
<db:title>location : QtPositioning::Location</db:title>
<db:para>This property holds the location of the place which can be used to retrieve the coordinate, address and the bounding box.</db:para>
</db:section>
<db:section xml:id="name-prop">
<db:title>name : string</db:title>
<db:para>This property holds the name of the place which can be used to represent the place.</db:para>
</db:section>
<db:section xml:id="place-prop">
<db:title>place : QPlace</db:title>
<db:para>For details on how to use this property to interface between C++ and QML see &quot;<db:link xlink:href="location-cpp-qml.xml#place-qplace">Interfaces between C++ and QML Code</db:link>&quot;.</db:para>
</db:section>
<db:section xml:id="placeId-prop">
<db:title>placeId : string</db:title>
<db:para>This property holds the unique identifier of the place. The place identifier is only meaningful to the <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> that generated it and is not transferable between <db:link xlink:href="qml-qtlocation-plugin.xml">Plugins</db:link>. The place id is not guaranteed to be universally unique, but unique within the <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> that generated it.</db:para>
<db:para>If only the place identifier is known, all other place data can fetched from the <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link>.</db:para>
<db:programlisting language="qml">    place.plugin = myPlugin;
    place.placeId = &quot;known-place-id&quot;;
    place.getDetails();
</db:programlisting>
</db:section>
<db:section xml:id="plugin-prop">
<db:title>plugin : Plugin</db:title>
<db:para>This property holds the <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> that provided this place which can be used to retrieve more information about the service.</db:para>
</db:section>
<db:section xml:id="primaryEmail-prop">
<db:title>[read-only] primaryEmail : string</db:title>
<db:para>This property holds the primary email address of the place. If no &quot;email&quot; contact detail is defined for this place this property will be an empty string. It is equivalent to</db:para>
<db:programlisting language="qml">    var primaryEmail;
    if (place.contactDetails[&quot;email&quot;].length &gt; 0)
        primaryEmail = place.contactDetails[&quot;email&quot;][0].value;
</db:programlisting>
</db:section>
<db:section xml:id="primaryFax-prop">
<db:title>[read-only] primaryFax : string</db:title>
<db:para>This property holds the primary fax number of the place. If no &quot;fax&quot; contact detail is defined for this place this property will be an empty string. It is equivalent to</db:para>
<db:programlisting language="qml">    var primaryFax;
    if (place.contactDetails[&quot;fax&quot;].length &gt; 0)
        primaryFax = place.contactDetails[&quot;fax&quot;][0].value;
</db:programlisting>
</db:section>
<db:section xml:id="primaryPhone-prop">
<db:title>[read-only] primaryPhone : string</db:title>
<db:para>This property holds the primary phone number of the place. If no &quot;phone&quot; contact detail is defined for this place, this property will be an empty string. It is equivalent to:</db:para>
<db:programlisting language="qml">    var primaryPhone;
    if (place.contactDetails[&quot;phone&quot;].length &gt; 0)
        primaryPhone = place.contactDetails[&quot;phone&quot;][0].value;
</db:programlisting>
</db:section>
<db:section xml:id="primaryWebsite-prop">
<db:title>[read-only] primaryWebsite : string</db:title>
<db:para>This property holds the primary website url of the place. If no &quot;website&quot; contact detail is defined for this place this property will be an empty string. It is equivalent to</db:para>
<db:programlisting language="qml">    var primaryWebsite;
    if (place.contactDetails[&quot;website&quot;].length &gt; 0)
        primaryWebsite = place.contactDetails[&quot;website&quot;][0].value;
</db:programlisting>
</db:section>
<db:section xml:id="ratings-prop">
<db:title>ratings : Ratings</db:title>
<db:para>This property holds ratings of the place. The ratings provide an indication of the quality of a place.</db:para>
</db:section>
<db:section xml:id="reviewModel-prop">
<db:title>[read-only] reviewModel : ReviewModel</db:title>
<db:para>This property holds a model which can be used to retrieve reviews about the place.</db:para>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : enumeration</db:title>
<db:para>This property holds the status of the place. It can be one of:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Place.Ready</db:para>
</db:td>
<db:td>
<db:para>No error occurred during the last operation, further operations may be performed on the place.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Place.Saving</db:para>
</db:td>
<db:td>
<db:para>The place is currently being saved, no other operation may be performed until complete.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Place.Fetching</db:para>
</db:td>
<db:td>
<db:para>The place details are currently being fetched, no other operations may be performed until complete.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Place.Removing</db:para>
</db:td>
<db:td>
<db:para>The place is currently being removed, no other operations can be performed until complete.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Place.Error</db:para>
</db:td>
<db:td>
<db:para>An error occurred during the last operation, further operations can still be performed on the place.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The status of a place can be checked by connecting the status property to a handler function, and then have the handler function process the change in status.</db:para>
<db:programlisting language="qml">place.statusChanged.connect(statusChangedHandler);
    ...
function statusChangedHandler() {
    if (statusChangedHandler.prevStatus === Place.Saving) {
        switch (place.status) {
        case Place.Ready:
            console.log('Save successful');
            break;
        case Place.Error:
            console.log('Save failed');
            break;
        default:
            break;
        }
    }
    statusChangedHandler.prevStatus = place.status;
}
</db:programlisting>
</db:section>
<db:section xml:id="supplier-prop">
<db:title>supplier : Supplier</db:title>
<db:para>This property holds the supplier of the place data. The supplier is typically a business or organization that collected the data about the place.</db:para>
</db:section>
<db:section xml:id="visibility-prop">
<db:title>visibility : enumeration</db:title>
<db:para>This property holds the visibility of the place. It can be one of:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Place.UnspecifiedVisibility</db:para>
</db:td>
<db:td>
<db:para>The visibility of the place is unspecified, the default visibility of the <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> will be used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Place.DeviceVisibility</db:para>
</db:td>
<db:td>
<db:para>The place is limited to the current device. The place will not be transferred off of the device.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Place.PrivateVisibility</db:para>
</db:td>
<db:td>
<db:para>The place is private to the current user. The place may be transferred to an online service but is only ever visible to the current user.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Place.PublicVisibility</db:para>
</db:td>
<db:td>
<db:para>The place is public.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that visibility does not affect how the place is displayed in the user-interface of an application on the device. Instead, it defines the sharing semantics of the place.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="copyFrom-method">
<db:title>void copyFrom(Place <db:emphasis>original</db:emphasis>)</db:title>
<db:para>Copies data from an <db:code role="parameter">original</db:code> place into this place. Only data that is supported by this place's plugin is copied over and plugin specific data such as place identifier is not copied over.</db:para>
</db:section>
<db:section xml:id="errorString-method">
<db:title>string errorString()</db:title>
<db:para>Returns a string description of the error of the last operation. If the last operation completed successfully then the string is empty.</db:para>
</db:section>
<db:section xml:id="getDetails-method">
<db:title>void getDetails()</db:title>
<db:para>This method starts fetching place details.</db:para>
<db:para>The <db:link xlink:href="qml-qtlocation-place.xml#status-prop">status</db:link> property will change to Place.Fetching while the fetch is in progress. On success the object's properties will be updated, <db:link xlink:href="qml-qtlocation-place.xml#status-prop">status</db:link> will be set to Place.Ready and <db:link xlink:href="qml-qtlocation-place.xml#detailsFetched-prop">detailsFetched</db:link> will be set to true. On error <db:link xlink:href="qml-qtlocation-place.xml#status-prop">status</db:link> will be set to Place.Error. The <db:link xlink:href="qml-qtlocation-place.xml#errorString-method">errorString</db:link>() method can be used to get the details of the error.</db:para>
</db:section>
<db:section xml:id="initializeFavorite-method">
<db:title>void initializeFavorite(Plugin <db:emphasis>destinationPlugin</db:emphasis>)</db:title>
<db:para>Creates a favorite instance for the place which is to be saved into the <db:code role="parameter">destination</db:code> plugin. This method does nothing if the favorite property is not null.</db:para>
</db:section>
<db:section xml:id="remove-method">
<db:title>void remove()</db:title>
<db:para>This method performs a remove operation on the place.</db:para>
<db:para>The <db:link xlink:href="qml-qtlocation-place.xml#status-prop">status</db:link> property will change to Place.Removing while the save operation is in progress. On success <db:link xlink:href="qml-qtlocation-place.xml#status-prop">status</db:link> will be set to Place.Ready. On error <db:link xlink:href="qml-qtlocation-place.xml#status-prop">status</db:link> will be set to Place.Error. The <db:link xlink:href="qml-qtlocation-place.xml#errorString-method">errorString</db:link>() method can be used to get the details of the error.</db:para>
</db:section>
<db:section xml:id="save-method">
<db:title>void save()</db:title>
<db:para>This method performs a save operation on the place.</db:para>
<db:para>The <db:link xlink:href="qml-qtlocation-place.xml#status-prop">status</db:link> property will change to Place.Saving while the save operation is in progress. On success the <db:link xlink:href="qml-qtlocation-place.xml#status-prop">status</db:link> will be set to Place.Ready. On error <db:link xlink:href="qml-qtlocation-place.xml#status-prop">status</db:link> will be set to Place.Error. The <db:link xlink:href="qml-qtlocation-place.xml#errorString-method">errorString</db:link>() method can be used to get the details of the error.</db:para>
<db:para>If the <db:link xlink:href="qml-qtlocation-place.xml#placeId-prop">placeId</db:link> property was previously empty, it will be assigned a valid value automatically during a successful save operation.</db:para>
<db:para>Note that a <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> will call <db:link xlink:href="qml-qtlocation-place.xml#getDetails-method">Place::getDetails</db:link> on any place that it detects an update on. A consequence of this is that whenever a Place from a <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> is successfully saved, it will be followed by a fetch of place details, leading to a sequence of state changes of <db:code>Saving</db:code>, <db:code>Ready</db:code>, <db:code>Fetching</db:code>, <db:code>Ready</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
