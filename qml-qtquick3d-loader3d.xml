<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Loader3D QML Type</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Allows dynamic loading of a 3D subtree from a URL or Component.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Node</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick3d-loader3d.xml">Loader3D</db:link> is used to dynamically load QML components for Qt Quick 3D.</db:para>
<db:para><db:link xlink:href="qml-qtquick3d-loader3d.xml">Loader3D</db:link> can load a QML file (using the <db:link xlink:href="qml-qtquick3d-loader3d.xml#source-prop">source</db:link> property) or a <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> object (using the <db:link xlink:href="qml-qtquick3d-loader3d.xml#sourceComponent-prop">sourceComponent</db:link> property). It is useful for delaying the creation of a component until it is required: for example, when a component should be created on demand, or when a component should not be created unnecessarily for performance reasons.</db:para>
<db:note>
<db:para><db:link xlink:href="qml-qtquick3d-loader3d.xml">Loader3D</db:link> works the same way as <db:link xlink:href="qml-qtquick-loader.xml">Loader</db:link>. The difference between the two is that <db:link xlink:href="qml-qtquick-loader.xml">Loader</db:link> provides a way to dynamically load objects that inherit <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>, whereas <db:link xlink:href="qml-qtquick3d-loader3d.xml">Loader3D</db:link> provides a way to load objects that inherit <db:link xlink:href="qml-qtquick3d-object3d.xml">Object3D</db:link> and is part of a 3D scene.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="active-prop">
<db:title>active : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>active</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is <db:code>true</db:code> if the <db:link xlink:href="qml-qtquick3d-loader3d.xml">Loader3D</db:link> is currently active. The default value for this property is <db:code>true</db:code>.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick3d-loader3d.xml">Loader3D</db:link> is inactive, changing the <db:link xlink:href="qml-qtquick3d-loader3d.xml#source-prop">source</db:link> or <db:link xlink:href="qml-qtquick3d-loader3d.xml#sourceComponent-prop">sourceComponent</db:link> will not cause the item to be instantiated until the <db:link xlink:href="qml-qtquick3d-loader3d.xml">Loader3D</db:link> is made active.</db:para>
<db:para>Setting the value to inactive will cause any <db:link xlink:href="qml-qtquick3d-loader3d.xml#item-prop">item</db:link> loaded by the loader to be released, but will not affect the <db:link xlink:href="qml-qtquick3d-loader3d.xml#source-prop">source</db:link> or <db:link xlink:href="qml-qtquick3d-loader3d.xml#sourceComponent-prop">sourceComponent</db:link>.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick3d-loader3d.xml#status-prop">status</db:link> of an inactive loader is always <db:code>Null</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-loader3d.xml#source-prop">source</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-loader3d.xml#sourceComponent-prop">sourceComponent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="asynchronous-prop">
<db:title>asynchronous : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>asynchronous</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the component will be instantiated asynchronously. By default it is <db:code>false</db:code>.</db:para>
<db:para>When used in conjunction with the <db:link xlink:href="qml-qtquick3d-loader3d.xml#source-prop">source</db:link> property, loading and compilation will also be performed in a background thread.</db:para>
<db:para>Loading asynchronously creates the objects declared by the component across multiple frames, and reduces the likelihood of glitches in animation. When loading asynchronously the status will change to <db:link xlink:href="qml-qtquick3d-loader3d.xml">Loader3D</db:link>.Loading. Once the entire component has been created, the <db:link xlink:href="qml-qtquick3d-loader3d.xml#item-prop">item</db:link> will be available and the status will change to Loader.Ready.</db:para>
<db:para>Changing the value of this property to <db:code>false</db:code> while an asynchronous load is in progress will force immediate, synchronous completion. This allows beginning an asynchronous load and then forcing completion if the <db:link xlink:href="qml-qtquick3d-loader3d.xml">Loader3D</db:link> content must be accessed before the asynchronous load has completed.</db:para>
<db:para>To avoid seeing the items loading progressively set <db:code>visible</db:code> appropriately, e.g.</db:para>
<db:programlisting language="cpp">Loader3D {
    source: &quot;mycomponent.qml&quot;
    asynchronous: true
    visible: status == Loader3D.Ready
}
</db:programlisting>
<db:para>Note that this property affects object instantiation only; it is unrelated to loading a component asynchronously via a network.</db:para>
</db:section>
<db:section xml:id="item-prop">
<db:title>[read-only] item : object</db:title>
<db:fieldsynopsis>
<db:type>object</db:type>
<db:varname>item</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the top-level object that is currently loaded.</db:para>
</db:section>
<db:section xml:id="progress-prop">
<db:title>[read-only] progress : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>progress</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the progress of loading QML data from the network, from 0.0 (nothing loaded) to 1.0 (finished). Most QML files are quite small, so this value will rapidly change from 0 to 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-loader3d.xml#status-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>source</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URL of the QML component to instantiate.</db:para>
<db:para>To unload the currently loaded object, set this property to an empty string, or set <db:link xlink:href="qml-qtquick3d-loader3d.xml#sourceComponent-prop">sourceComponent</db:link> to <db:code>undefined</db:code>. Setting <db:code>source</db:code> to a new URL will also cause the item created by the previous URL to be unloaded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-loader3d.xml#sourceComponent-prop">sourceComponent</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-loader3d.xml#status-prop">status</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-loader3d.xml#progress-prop">progress</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceComponent-prop">
<db:title>sourceComponent : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>sourceComponent</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> to instantiate.</db:para>
<db:programlisting language="qml">Item {
    Component {
        id: redCube
        Model {
            source: &quot;#Cube&quot;
            materials: DefaultMaterial {
                diffuseColor: &quot;red&quot;
            }
        }
    }

    Loader3D { sourceComponent: redCube }
    Loader3D { sourceComponent: redCube; x: 10 }
}
</db:programlisting>
<db:para>To unload the currently loaded object, set this property to <db:code>undefined</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-loader3d.xml#source-prop">source</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-loader3d.xml#progress-prop">progress</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>status</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the status of QML loading. It can be one of:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Loader3D.Null</db:para>
</db:td>
<db:td>
<db:para>The loader is inactive or no QML source has been set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Loader3D.Ready</db:para>
</db:td>
<db:td>
<db:para>The QML source has been loaded.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Loader3D.Loading</db:para>
</db:td>
<db:td>
<db:para>The QML source is currently being loaded.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Loader3D.Error</db:para>
</db:td>
<db:td>
<db:para>An error occurred while loading the QML source.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Use this status to provide an update or respond to the status change in some way. For example, you could:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Trigger a state change:</db:para>
<db:programlisting language="qml">State { name: 'loaded'; when: loader.status == Loader3D.Ready }
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Implement an <db:code>onStatusChanged</db:code> signal handler:</db:para>
<db:programlisting language="qml">Loader3D {
    id: loader
    onStatusChanged: if (loader.status == Loader3D.Ready) console.log('Loaded')
}
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Bind to the status value:</db:para>
<db:programlisting language="qml">Text { text: loader.status == Loader3D.Ready ? 'Loaded' : 'Not loaded' }
</db:programlisting>
</db:listitem>
</db:itemizedlist>
<db:para>Note that if the source is a local file, the status will initially be Ready (or Error). While there will be no onStatusChanged signal in that case, the onLoaded will still be invoked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-loader3d.xml#progress-prop">progress</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="loaded-signal">
<db:title>loaded()</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qml-qtquick3d-loader3d.xml#status-prop">status</db:link> becomes <db:code>Loader3D.Ready</db:code>, or on successful initial load.</db:para>
<db:para>The corresponding handler is <db:code>onLoaded</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLoaded</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="setSource-method">
<db:title>object setSource(url <db:emphasis>source</db:emphasis>, object <db:emphasis>properties</db:emphasis>)</db:title>
<db:para>Creates an object instance of the given <db:code role="parameter">source</db:code> component that will have the given <db:code role="parameter">properties</db:code>. The <db:code role="parameter">properties</db:code> argument is optional. The instance will be accessible via the <db:link xlink:href="qml-qtquick3d-loader3d.xml#item-prop">item</db:link> property once loading and instantiation is complete.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick3d-loader3d.xml#active-prop">active</db:link> property is <db:code>false</db:code> at the time when this function is called, the given <db:code role="parameter">source</db:code> component will not be loaded but the <db:code role="parameter">source</db:code> and initial <db:code role="parameter">properties</db:code> will be cached. When the loader is made <db:link xlink:href="qml-qtquick3d-loader3d.xml#active-prop">active</db:link>, an instance of the <db:code role="parameter">source</db:code> component will be created with the initial <db:code role="parameter">properties</db:code> set.</db:para>
<db:para>Setting the initial property values of an instance of a component in this manner will <db:emphasis role="bold">not</db:emphasis> trigger any associated <db:link xlink:href="qml-qtquick-behavior.xml">Behavior</db:link>s.</db:para>
<db:para>Note that the cached <db:code role="parameter">properties</db:code> will be cleared if the <db:link xlink:href="qml-qtquick3d-loader3d.xml#source-prop">source</db:link> or <db:link xlink:href="qml-qtquick3d-loader3d.xml#sourceComponent-prop">sourceComponent</db:link> is changed after calling this function but prior to setting the loader <db:link xlink:href="qml-qtquick3d-loader3d.xml#active-prop">active</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-loader3d.xml#source-prop">source</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-loader3d.xml#active-prop">active</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
