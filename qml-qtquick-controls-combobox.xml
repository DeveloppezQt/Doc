<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ComboBox QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Combined button and popup list for selecting options.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Control</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ComboBox is part of <db:simplelist><db:member>qtquickcontrols-input</db:member><db:member>qtquickcontrols-focusscopes</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-combobox.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> is a combined button and popup list. It provides a means of presenting a list of options to the user in a way that takes up the minimum amount of screen space.</db:para>
<db:para><db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> is populated with a data model. The data model is commonly a JavaScript array, a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> or an integer, but other types of <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#qml-data-models">data models</db:link> are also supported.</db:para>
<db:programlisting language="cpp">ComboBox {
    model: [&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;]
}
</db:programlisting>
<db:section xml:id="editable-combobox">
<db:title>Editable ComboBox</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> can be made <db:link xlink:href="qml-qtquick-controls-combobox.xml#editable-prop">editable</db:link>. An editable combo box auto-completes its text based on what is available in the model.</db:para>
<db:para>The following example demonstrates appending content to an editable combo box by reacting to the <db:link xlink:href="qml-qtquick-controls-combobox.xml#accepted-signal">accepted</db:link> signal.</db:para>
<db:programlisting language="qml">ComboBox {
    editable: true
    model: ListModel {
        id: model
        ListElement { text: &quot;Banana&quot; }
        ListElement { text: &quot;Apple&quot; }
        ListElement { text: &quot;Coconut&quot; }
    }
    onAccepted: {
        if (find(editText) === -1)
            model.append({text: editText})
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="combobox-s-popup">
<db:title>ComboBox's Popup</db:title>
<db:para>By default, clicking outside of <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link>'s popup will close it, and the event is propagated to items lower in the stacking order. To prevent the popup from closing, set its <db:link xlink:href="qml-qtquick-controls-popup.xml#closePolicy-prop">closePolicy</db:link>:</db:para>
<db:programlisting language="qml">    popup.closePolicy: Popup.CloseOnEscape
</db:programlisting>
<db:para>To prevent event propagation, set its <db:link xlink:href="qml-qtquick-controls-popup.xml#modal-prop">modal</db:link> property to <db:code>true</db:code>:</db:para>
<db:programlisting language="qml">    popup.modal: true
</db:programlisting>
</db:section>
<db:section xml:id="combobox-model-roles">
<db:title>ComboBox Model Roles</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> is able to visualize standard <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#qml-data-models">data models</db:link> that provide the <db:code>modelData</db:code> role:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>models that have only one role</db:para>
</db:listitem>
<db:listitem>
<db:para>models that do not have named roles (JavaScript array, integer)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When using models that have multiple named roles, <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> must be configured to use a specific <db:link xlink:href="qml-qtquick-controls-combobox.xml#textRole-prop">text role</db:link> for its <db:link xlink:href="qml-qtquick-controls-combobox.xml#displayText-prop">display text</db:link> and <db:link xlink:href="qml-qtquick-controls-combobox.xml#delegate-prop">delegate</db:link> instances. If you want to use a role of the model item that corresponds to the text role, set <db:link xlink:href="qml-qtquick-controls-combobox.xml#valueRole-prop">valueRole</db:link>. The <db:link xlink:href="qml-qtquick-controls-combobox.xml#currentValue-prop">currentValue</db:link> property and <db:link xlink:href="qml-qtquick-controls-combobox.xml#indexOfValue-method">indexOfValue</db:link>() method can then be used to get information about those values.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="qml">ApplicationWindow {
    width: 640
    height: 480
    visible: true

    // Used as an example of a backend - this would usually be
    // e.g. a C++ type exposed to QML.
    QtObject {
        id: backend
        property int modifier
    }

    ComboBox {
        textRole: &quot;text&quot;
        valueRole: &quot;value&quot;
        // When an item is selected, update the backend.
        onActivated: backend.modifier = currentValue
        // Set the initial currentIndex to the value stored in the backend.
        Component.onCompleted: currentIndex = indexOfValue(backend.modifier)
        model: [
            { value: Qt.NoModifier, text: qsTr(&quot;No modifier&quot;) },
            { value: Qt.ShiftModifier, text: qsTr(&quot;Shift&quot;) },
            { value: Qt.ControlModifier, text: qsTr(&quot;Control&quot;) }
        ]
    }
}
</db:programlisting>
<db:note>
<db:para>If <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> is assigned a data model that has multiple named roles, but <db:link xlink:href="qml-qtquick-controls-combobox.xml#textRole-prop">textRole</db:link> is not defined, <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> is unable to visualize it and throws a <db:code>ReferenceError: modelData is not defined</db:code>.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols-customize.xml#customizing-combobox">Customizing ComboBox</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-input.xml">Input Controls</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-focus.xml">Focus Management in Qt Quick Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="acceptableInput-prop">
<db:title>[read-only, since QtQuick.Controls 2.2 (Qt 5.9)] acceptableInput : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>acceptableInput</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the combo box contains acceptable text in the editable text field.</db:para>
<db:para>If a validator has been set, the value is <db:code>true</db:code> only if the current text is acceptable to the validator as a final string (not as an intermediate string).</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#validator-prop">validator</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#accepted-signal">accepted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of items in the combo box.</db:para>
</db:section>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>currentIndex</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the index of the current item in the combo box.</db:para>
<db:para>The default value is <db:code>-1</db:code> when <db:link xlink:href="qml-qtquick-controls-combobox.xml#count-prop">count</db:link> is <db:code>0</db:code>, and <db:code>0</db:code> otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#activated-signal">activated</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentText-prop">currentText</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#highlightedIndex-prop">highlightedIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentText-prop">
<db:title>[read-only] currentText : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>currentText</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the text of the current item in the combo box.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#displayText-prop">displayText</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#textRole-prop">textRole</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#editText-prop">editText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentValue-prop">
<db:title>[read-only, since QtQuick.Controls 2.14 (Qt 5.14)] currentValue : var</db:title>
<db:fieldsynopsis>
<db:type>var</db:type>
<db:varname>currentValue</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the value of the current item in the combo box.</db:para>
<db:para>For an example of how to use this property, see <db:link xlink:href="qml-qtquick-controls-combobox.xml#combobox-model-roles">ComboBox Model Roles</db:link>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.14 (Qt 5.14).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentText-prop">currentText</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#valueRole-prop">valueRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="delegate-prop">
<db:title>delegate : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>delegate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a delegate that presents an item in the combo box popup.</db:para>
<db:para>It is recommended to use <db:link xlink:href="qml-qtquick-controls-itemdelegate.xml">ItemDelegate</db:link> (or any other <db:link xlink:href="qml-qtquick-controls-abstractbutton.xml">AbstractButton</db:link> derivatives) as the delegate. This ensures that the interaction works as expected, and the popup will automatically close when appropriate. When other types are used as the delegate, the popup must be closed manually. For example, if <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is used:</db:para>
<db:programlisting language="cpp">delegate: Rectangle {
    // ...
    MouseArea {
        // ...
        onClicked: comboBox.popup.close()
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-itemdelegate.xml">ItemDelegate</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-customize.xml#customizing-combobox">Customizing ComboBox</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="displayText-prop">
<db:title>displayText : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>displayText</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the text that is displayed on the combo box button.</db:para>
<db:para>By default, the display text presents the current selection. That is, it follows the text of the current item. However, the default display text can be overridden with a custom value.</db:para>
<db:programlisting language="cpp">ComboBox {
    currentIndex: 1
    displayText: &quot;Size: &quot; + currentText
    model: [&quot;S&quot;, &quot;M&quot;, &quot;L&quot;]
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentText-prop">currentText</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#textRole-prop">textRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="down-prop">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] down : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>down</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the combo box button is visually down.</db:para>
<db:para>Unless explicitly set, this property is <db:code>true</db:code> when either <db:code>pressed</db:code> or <db:code>popup.visible</db:code> is <db:code>true</db:code>. To return to the default value, set this property to <db:code>undefined</db:code>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#pressed-prop">pressed</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#popup-prop">popup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="editText-prop">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] editText : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>editText</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the text in the text field of an editable combo box.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#editable-prop">editable</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentText-prop">currentText</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#displayText-prop">displayText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="editable-prop">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] editable : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>editable</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the combo box is editable.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#validator-prop">validator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flat-prop">
<db:title>[since QtQuick.Controls 2.1 (Qt 5.8)] flat : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>flat</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the combo box button is flat.</db:para>
<db:para>A flat combo box button does not draw a background unless it is interacted with. In comparison to normal combo boxes, flat combo boxes provide looks that make them stand out less from the rest of the UI. For instance, when placing a combo box into a tool bar, it may be desirable to make the combo box flat so it matches better with the flat looks of tool buttons.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.1 (Qt 5.8).</db:para>
</db:section>
<db:section xml:id="highlightedIndex-prop">
<db:title>[read-only] highlightedIndex : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>highlightedIndex</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the index of the highlighted item in the combo box popup list.</db:para>
<db:para>When a highlighted item is activated, the popup is closed, <db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link> is set to <db:code>highlightedIndex</db:code>, and the value of this property is reset to <db:code>-1</db:code>, as there is no longer a highlighted item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#highlighted-signal">highlighted</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="implicitContentWidthPolicy-prop">
<db:title>[since QtQuick.Controls 6.0 (Qt 6.0)] implicitContentWidthPolicy : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>implicitContentWidthPolicy</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property controls how the <db:link xlink:href="qml-qtquick-controls-control.xml#implicitContentWidth-prop">implicitContentWidth</db:link> of the <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> is calculated.</db:para>
<db:para>When the width of a <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> is not large enough to display text, that text is elided. Depending on which parts of the text are elided, this can make selecting an item difficult for the end user. An efficient way of ensuring that a <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> is wide enough to avoid text being elided is to set a width that is known to be large enough:</db:para>
<db:programlisting language="cpp">width: 300
implicitContentWidthPolicy: ComboBox.ContentItemImplicitWidth
</db:programlisting>
<db:para>However, it is often not possible to know whether or not a hard-coded value will be large enough, as the size of text depends on many factors, such as font family, font size, translations, and so on.</db:para>
<db:para>implicitContentWidthPolicy provides an easy way to control how the implicitContentWidth is calculated, which in turn affects the <db:link xlink:href="qml-qtquick-item.xml#implicitWidth-prop">implicitWidth</db:link> of the <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> and ensures that text will not be elided.</db:para>
<db:para>The available values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ContentItemImplicitWidth</db:para>
</db:td>
<db:td>
<db:para>The implicitContentWidth will default to that of the <db:link xlink:href="qml-qtquick-controls-control.xml#contentItem-prop">contentItem</db:link>. This is the most efficient option, as no extra text layout is done.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WidestText</db:para>
</db:td>
<db:td>
<db:para>The implicitContentWidth will be set to the implicit width of the the largest text for the given <db:link xlink:href="qml-qtquick-controls-combobox.xml#textRole-prop">textRole</db:link> every time the model changes. This option should be used with smaller models, as it can be expensive.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WidestTextWhenCompleted</db:para>
</db:td>
<db:td>
<db:para>The implicitContentWidth will be set to the implicit width of the the largest text for the given <db:link xlink:href="qml-qtquick-controls-combobox.xml#textRole-prop">textRole</db:link> once after <db:link xlink:href="qqmlparserstatus.xml#componentComplete">component completion</db:link>. This option should be used with smaller models, as it can be expensive.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is <db:code>ContentItemImplicitWidth</db:code>.</db:para>
<db:para>As this property only affects the <db:code>implicitWidth</db:code> of the <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link>, setting an explicit <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> can still result in eliding.</db:para>
<db:note>
<db:para>This feature requires the contentItem to be a type derived from <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.</db:para>
</db:note>
<db:note>
<db:para>This feature requires text to be laid out, and can therefore be expensive for large models or models whose contents are updated frequently.</db:para>
</db:note>
<db:para>This property was introduced in QtQuick.Controls 6.0 (Qt 6.0).</db:para>
</db:section>
<db:section xml:id="implicitIndicatorHeight-prop">
<db:title>[read-only, since QtQuick.Controls 2.5 (Qt 5.12)] implicitIndicatorHeight : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>implicitIndicatorHeight</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the implicit indicator height.</db:para>
<db:para>The value is equal to <db:code>indicator ? indicator.implicitHeight : 0</db:code>.</db:para>
<db:para>This is typically used, together with <db:link xlink:href="qml-qtquick-controls-control.xml#implicitContentHeight-prop">implicitContentHeight</db:link> and <db:link xlink:href="qml-qtquick-controls-control.xml#implicitBackgroundHeight-prop">implicitBackgroundHeight</db:link>, to calculate the <db:link xlink:href="qml-qtquick-item.xml#implicitHeight-prop">implicitHeight</db:link>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.5 (Qt 5.12).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#implicitIndicatorWidth-prop">implicitIndicatorWidth</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="implicitIndicatorWidth-prop">
<db:title>[read-only, since QtQuick.Controls 2.5 (Qt 5.12)] implicitIndicatorWidth : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>implicitIndicatorWidth</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the implicit indicator width.</db:para>
<db:para>The value is equal to <db:code>indicator ? indicator.implicitWidth : 0</db:code>.</db:para>
<db:para>This is typically used, together with <db:link xlink:href="qml-qtquick-controls-control.xml#implicitContentWidth-prop">implicitContentWidth</db:link> and <db:link xlink:href="qml-qtquick-controls-control.xml#implicitBackgroundWidth-prop">implicitBackgroundWidth</db:link>, to calculate the <db:link xlink:href="qml-qtquick-item.xml#implicitWidth-prop">implicitWidth</db:link>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.5 (Qt 5.12).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#implicitIndicatorHeight-prop">implicitIndicatorHeight</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indicator-prop">
<db:title>indicator : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>indicator</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the drop indicator item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols-customize.xml#customizing-combobox">Customizing ComboBox</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodComposing-prop">
<db:title>[read-only, since QtQuick.Controls 2.2 (Qt 5.9)] inputMethodComposing : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>inputMethodComposing</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether an editable combo box has partial text input from an input method.</db:para>
<db:para>While it is composing, an input method may rely on mouse or key events from the combo box to edit or commit the partial text. This property can be used to determine when to disable event handlers that may interfere with the correct operation of an input method.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
</db:section>
<db:section xml:id="inputMethodHints-prop">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] inputMethodHints : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>inputMethodHints</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Provides hints to the input method about the expected content of the combo box and how it should operate.</db:para>
<db:para>The default value is <db:code>Qt.ImhNoPredictiveText</db:code>.</db:para>
<db:para>The value is a bit-wise combination of flags or <db:code>Qt.ImhNone</db:code> if no hints are set.</db:para>
<db:para>Flags that alter behavior are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhHiddenText - Characters should be hidden, as is typically used when entering passwords.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhSensitiveData - Typed text should not be stored by the active input method in any persistent storage like predictive user dictionary.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhNoAutoUppercase - The input method should not try to automatically switch to upper case when a sentence ends.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferNumbers - Numbers are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferUppercase - Upper case letters are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferLowercase - Lower case letters are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhNoPredictiveText - Do not use predictive text (i.e. dictionary lookup) while typing.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhDate - The text editor functions as a date field.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhTime - The text editor functions as a time field.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Flags that restrict input (exclusive flags) are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhDigitsOnly - Only digits are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhFormattedNumbersOnly - Only number input is allowed. This includes decimal point and minus sign.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhUppercaseOnly - Only upper case letter input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhLowercaseOnly - Only lower case letter input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhDialableCharactersOnly - Only characters suitable for phone dialing are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhEmailCharactersOnly - Only characters suitable for email addresses are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhUrlCharactersOnly - Only characters suitable for URLs are allowed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Masks:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhExclusiveInputMask - This mask yields nonzero if any of the exclusive flags are used.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This property was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
</db:section>
<db:section xml:id="model-prop">
<db:title>model : model</db:title>
<db:fieldsynopsis>
<db:type>model</db:type>
<db:varname>model</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the model providing data for the combo box.</db:para>
<db:programlisting language="cpp">ComboBox {
    textRole: &quot;key&quot;
    model: ListModel {
        ListElement { key: &quot;First&quot;; value: 123 }
        ListElement { key: &quot;Second&quot;; value: 456 }
        ListElement { key: &quot;Third&quot;; value: 789 }
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#textRole-prop">textRole</db:link></db:member>
<db:member><db:link xlink:href="qtquick-modelviewsdata-modelview.xml#qml-data-models">Data Models</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="popup-prop">
<db:title>popup : Popup</db:title>
<db:fieldsynopsis>
<db:type>Popup</db:type>
<db:varname>popup</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the popup.</db:para>
<db:para>The popup can be opened or closed manually, if necessary:</db:para>
<db:programlisting language="cpp">onSpecialEvent: comboBox.popup.close()
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols-customize.xml#customizing-combobox">Customizing ComboBox</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pressed-prop">
<db:title>[read-only] pressed : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>pressed</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the combo box button is physically pressed. A button can be pressed by either touch or key events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#down-prop">down</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectTextByMouse-prop">
<db:title>[since QtQuick.Controls 2.15 (Qt 5.15)] selectTextByMouse : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>selectTextByMouse</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the text field for an editable <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> can be selected with the mouse.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.15 (Qt 5.15).</db:para>
</db:section>
<db:section xml:id="textRole-prop">
<db:title>textRole : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>textRole</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the model role used for populating the combo box.</db:para>
<db:para>When the model has multiple roles, <db:code>textRole</db:code> can be set to determine which role should be displayed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#model">model</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentText-prop">currentText</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#displayText-prop">displayText</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#combobox-model-roles">ComboBox Model Roles</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="validator-prop">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] validator : Validator</db:title>
<db:fieldsynopsis>
<db:type>Validator</db:type>
<db:varname>validator</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds an input text validator for an editable combo box.</db:para>
<db:para>When a validator is set, the text field will only accept input which leaves the text property in an intermediate state. The <db:link xlink:href="qml-qtquick-controls-combobox.xml#accepted-signal">accepted</db:link> signal will only be emitted if the text is in an acceptable state when the <db:guilabel>Return</db:guilabel> or <db:guilabel>Enter</db:guilabel> key is pressed.</db:para>
<db:para>The currently supported validators are <db:link xlink:href="qml-qtquick-intvalidator.xml">IntValidator</db:link>, <db:link xlink:href="qml-qtquick-doublevalidator.xml">DoubleValidator</db:link>, and <db:link xlink:href="qml-qtquick-regularexpressionvalidator.xml">RegularExpressionValidator</db:link>. An example of using validators is shown below, which allows input of integers between <db:code>0</db:code> and <db:code>10</db:code> into the text field:</db:para>
<db:programlisting language="cpp">ComboBox {
    model: 10
    editable: true
    validator: IntValidator {
        top: 9
        bottom: 0
    }
}
</db:programlisting>
<db:para>This property was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#acceptableInput-prop">acceptableInput</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#accepted-signal">accepted</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#editable-prop">editable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueRole-prop">
<db:title>[since QtQuick.Controls 2.14 (Qt 5.14)] valueRole : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>valueRole</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the model role used for storing the value associated with each item in the model.</db:para>
<db:para>For an example of how to use this property, see <db:link xlink:href="qml-qtquick-controls-combobox.xml#combobox-model-roles">ComboBox Model Roles</db:link>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.14 (Qt 5.14).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#model">model</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentValue-prop">currentValue</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="accepted-signal">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] void accepted()</db:title>
<db:para>This signal is emitted when the <db:guilabel>Return</db:guilabel> or <db:guilabel>Enter</db:guilabel> key is pressed on an <db:link xlink:href="qml-qtquick-controls-combobox.xml#editable-prop">editable</db:link> combo box.</db:para>
<db:para>You can handle this signal in order to add the newly entered item to the model, for example:</db:para>
<db:programlisting language="qml">ComboBox {
    editable: true
    model: ListModel {
        id: model
        ListElement { text: &quot;Banana&quot; }
        ListElement { text: &quot;Apple&quot; }
        ListElement { text: &quot;Coconut&quot; }
    }
    onAccepted: {
        if (find(editText) === -1)
            model.append({text: editText})
    }
}
</db:programlisting>
<db:para>Before the signal is emitted, a check is done to see if the string exists in the model. If it does, <db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link> will be set to its index, and <db:link xlink:href="qml-qtquick-controls-combobox.xml#currentText-prop">currentText</db:link> to the string itself.</db:para>
<db:para>After the signal has been emitted, and if the first check failed (that is, the item did not exist), another check will be done to see if the item was added by the signal handler. If it was, the <db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link> and <db:link xlink:href="qml-qtquick-controls-combobox.xml#currentText-prop">currentText</db:link> are updated accordingly. Otherwise, they will be set to <db:code>-1</db:code> and <db:code>&quot;&quot;</db:code>, respectively.</db:para>
<db:note>
<db:para>If there is a <db:link xlink:href="qml-qtquick-controls-combobox.xml#validator-prop">validator</db:link> set on the combo box, the signal will only be emitted if the input is in an acceptable state.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onAccepted</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
</db:section>
<db:section xml:id="activated-signal">
<db:title>void activated(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted when the item at <db:code role="parameter">index</db:code> is activated by the user.</db:para>
<db:para>An item is activated when it is selected while the popup is open, causing the popup to close (and <db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link> to change), or while the popup is closed and the combo box is navigated via keyboard, causing the <db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link> to change. The <db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link> property is set to <db:code role="parameter">index</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onActivated</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="highlighted-signal">
<db:title>void highlighted(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted when the item at <db:code role="parameter">index</db:code> in the popup list is highlighted by the user.</db:para>
<db:para>The highlighted signal is only emitted when the popup is open and an item is highlighted, but not necessarily <db:link xlink:href="qml-qtquick-controls-combobox.xml#activated-signal">activated</db:link>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onHighlighted</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#highlightedIndex-prop">highlightedIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="decrementCurrentIndex-method">
<db:title>void decrementCurrentIndex()</db:title>
<db:para>Decrements the current index of the combo box, or the highlighted index if the popup list is visible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#highlightedIndex-prop">highlightedIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="find-method">
<db:title>int find(string <db:emphasis>text</db:emphasis>, enumeration <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Returns the index of the specified <db:code role="parameter">text</db:code>, or <db:code>-1</db:code> if no match is found.</db:para>
<db:para>The way the search is performed is defined by the specified match <db:code role="parameter">flags</db:code>. By default, combo box performs case sensitive exact matching (<db:code>Qt.MatchExactly</db:code>). All other match types are case-insensitive unless the <db:code>Qt.MatchCaseSensitive</db:code> flag is also specified.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Qt.MatchExactly</db:para>
</db:td>
<db:td>
<db:para>The search term matches exactly (default).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.MatchRegularExpression</db:para>
</db:td>
<db:td>
<db:para>The search term matches as a regular expression.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.MatchWildcard</db:para>
</db:td>
<db:td>
<db:para>The search term matches using wildcards.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.MatchFixedString</db:para>
</db:td>
<db:td>
<db:para>The search term matches as a fixed string.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.MatchStartsWith</db:para>
</db:td>
<db:td>
<db:para>The search term matches the start of the item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.MatchEndsWidth</db:para>
</db:td>
<db:td>
<db:para>The search term matches the end of the item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.MatchContains</db:para>
</db:td>
<db:td>
<db:para>The search term is contained in the item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.MatchCaseSensitive</db:para>
</db:td>
<db:td>
<db:para>The search is case sensitive.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>This function can only be used after <db:link xlink:href="qml-qtqml-component.xml#completed-signal">Component.completed</db:link>() is emitted for the <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link>.</db:para>
</db:note>
<db:para>For example:</db:para>
<db:programlisting language="qml">ComboBox {
    model: ListModel {
        ListElement { text: &quot;Banana&quot; }
        ListElement { text: &quot;Apple&quot; }
        ListElement { text: &quot;Coconut&quot; }
    }
    Component.onCompleted: currentIndex = find(&quot;Coconut&quot;)
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#textRole-prop">textRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="incrementCurrentIndex-method">
<db:title>void incrementCurrentIndex()</db:title>
<db:para>Increments the current index of the combo box, or the highlighted index if the popup list is visible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#highlightedIndex-prop">highlightedIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfValue-method">
<db:title>[since QtQuick.Controls 2.14 (Qt 5.14)] int indexOfValue(object <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Returns the index of the specified <db:code role="parameter">value</db:code>, or <db:code>-1</db:code> if no match is found.</db:para>
<db:para>For an example of how to use this method, see <db:link xlink:href="qml-qtquick-controls-combobox.xml#combobox-model-roles">ComboBox Model Roles</db:link>.</db:para>
<db:note>
<db:para>This function can only be used after <db:link xlink:href="qml-qtqml-component.xml#completed-signal">Component.completed</db:link>() is emitted for the <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link>.</db:para>
</db:note>
<db:para>This method was introduced in QtQuick.Controls 2.14 (Qt 5.14).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#find-method">find</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentValue-prop">currentValue</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#valueRole-prop">valueRole</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#valueAt-method">valueAt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectAll-method">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] void selectAll()</db:title>
<db:para>Selects all the text in the editable text field of the combo box.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#editText-prop">editText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textAt-method">
<db:title>string textAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the text for the specified <db:code role="parameter">index</db:code>, or an empty string if the index is out of bounds.</db:para>
<db:note>
<db:para>This function can only be used after <db:link xlink:href="qml-qtqml-component.xml#completed-signal">Component.completed</db:link>() is emitted for the <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link>.</db:para>
</db:note>
<db:para>For example:</db:para>
<db:programlisting language="qml">ComboBox {
    model: ListModel {
        ListElement { text: &quot;Banana&quot; }
        ListElement { text: &quot;Apple&quot; }
        ListElement { text: &quot;Coconut&quot; }
    }
    onActivated: (index) =&amp;gt; { print(textAt(index)) }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#textRole-prop">textRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueAt-method">
<db:title>[since QtQuick.Controls 2.14 (Qt 5.14)] var valueAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the value at position <db:code role="parameter">index</db:code> in the combo box.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.14 (Qt 5.14).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#indexOfValue-method">indexOfValue</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
