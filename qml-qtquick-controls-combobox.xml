<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ComboBox QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a drop-down list functionality.</db:para>
<db:para>This type was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 1.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-focusscope.xml">FocusScope</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ComboBox is part of <db:simplelist><db:member><db:link xlink:href="controls.xml">Buttons and Controls</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/combobox.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Add items to the <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> by assigning it a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link>, or a list of strings to the <db:link xlink:href="qml-qtquick-controls-combobox.xml#model-prop">model</db:link> property.</db:para>
<db:programlisting language="qml">ComboBox {
    width: 200
    model: [ &quot;Banana&quot;, &quot;Apple&quot;, &quot;Coconut&quot; ]
}
</db:programlisting>
<db:para>In this example we are demonstrating how to use a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> with a combo box.</db:para>
<db:programlisting language="qml">ComboBox {
    currentIndex: 2
    model: ListModel {
        id: cbItems
        ListElement { text: &quot;Banana&quot;; color: &quot;Yellow&quot; }
        ListElement { text: &quot;Apple&quot;; color: &quot;Green&quot; }
        ListElement { text: &quot;Coconut&quot;; color: &quot;Brown&quot; }
    }
    width: 200
    onCurrentIndexChanged: console.debug(cbItems.get(currentIndex).text + &quot;, &quot; + cbItems.get(currentIndex).color)
}
</db:programlisting>
<db:para>You can make a combo box editable by setting the <db:link xlink:href="qml-qtquick-controls-combobox.xml#editable-prop">editable</db:link> property. An editable combo box will autocomplete its text based on what is available in the model.</db:para>
<db:para>In the next example we demonstrate how you can append content to an editable combo box by reacting to the <db:link xlink:href="qml-qtquick-controls-combobox.xml#accepted-signal">accepted</db:link> signal. Note that you have to explicitly prevent duplicates.</db:para>
<db:programlisting language="qml">ComboBox {
    editable: true
    model: ListModel {
        id: model
        ListElement { text: &quot;Banana&quot;; color: &quot;Yellow&quot; }
        ListElement { text: &quot;Apple&quot;; color: &quot;Green&quot; }
        ListElement { text: &quot;Coconut&quot;; color: &quot;Brown&quot; }
    }
    onAccepted: {
        if (find(currentText) === -1) {
            model.append({text: editText})
            currentIndex = find(editText)
        }
    }
}
</db:programlisting>
<db:para>You can create a custom appearance for a <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> by assigning a <db:link xlink:href="qml-qtquick-controls-styles-comboboxstyle.xml">ComboBoxStyle</db:link>.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="acceptableInput-prop">
<db:title>[read-only, since QtQuick.Controls 1.1] acceptableInput : bool</db:title>
<db:para>Returns <db:code>true</db:code> if the combo box contains acceptable text in the editable text field.</db:para>
<db:para>If a validator was set, this property will return <db:code>true</db:code> if the current text satisfies the validator or mask as a final string (not as an intermediate string).</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#validator-prop">validator</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#accepted-signal">accepted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activeFocusOnPress-prop">
<db:title>activeFocusOnPress : bool</db:title>
<db:para>This property specifies whether the combobox should gain active focus when pressed. The default value is <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only, since QtQuick.Controls 1.1] count : int</db:title>
<db:para>This property holds the number of items in the combo box.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:para>The index of the currently selected item in the <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link>.</db:para>
<db:para>Setting currentIndex to <db:code>-1</db:code> will reset the selection and clear the text label. If <db:link xlink:href="qml-qtquick-controls-combobox.xml#editable-prop">editable</db:link> is <db:code>true</db:code>, you may also need to manually clear <db:link xlink:href="qml-qtquick-controls-combobox.xml#editText-prop">editText</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#model-prop">model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentText-prop">
<db:title>[read-only] currentText : string</db:title>
<db:para>The text of the currently selected item in the <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link>.</db:para>
<db:note>
<db:para>Since <db:code>currentText</db:code> depends on <db:code>currentIndex</db:code>, there's no way to ensure <db:code>currentText</db:code> will be up to date whenever a <db:code>onCurrentIndexChanged</db:code> handler is called.</db:para>
</db:note>
</db:section>
<db:section xml:id="editText-prop">
<db:title>[since QtQuick.Controls 1.1] editText : string</db:title>
<db:para>This property specifies text being manipulated by the user for an editable combo box.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
<db:section xml:id="editable-prop">
<db:title>[since QtQuick.Controls 1.1] editable : bool</db:title>
<db:para>This property holds whether the combo box can be edited by the user. The default value is <db:code>false</db:code>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
<db:section xml:id="hovered-prop">
<db:title>[read-only] hovered : bool</db:title>
<db:para>This property indicates whether the control is being hovered.</db:para>
</db:section>
<db:section xml:id="inputMethodComposing-prop">
<db:title>[read-only, since QtQuick.Controls 1.3] inputMethodComposing : bool</db:title>
<db:para>This property holds whether an editable <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> has partial text input from an input method.</db:para>
<db:para>While it is composing an input method may rely on mouse or key events from the <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> to edit or commit the partial text. This property can be used to determine when to disable events handlers that may interfere with the correct operation of an input method.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
<db:section xml:id="inputMethodHints-prop">
<db:title>[since QtQuick.Controls 1.5] inputMethodHints : enumeration</db:title>
<db:para>Provides hints to the input method about the expected content of the combo box and how it should operate.</db:para>
<db:para>The value is a bit-wise combination of flags or <db:code>Qt.ImhNone</db:code> if no hints are set.</db:para>
<db:para>Flags that alter behavior are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhHiddenText - Characters should be hidden, as is typically used when entering passwords.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhSensitiveData - Typed text should not be stored by the active input method in any persistent storage like predictive user dictionary.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhNoAutoUppercase - The input method should not try to automatically switch to upper case when a sentence ends.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferNumbers - Numbers are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferUppercase - Upper case letters are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferLowercase - Lower case letters are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhNoPredictiveText - Do not use predictive text (i.e. dictionary lookup) while typing.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhDate - The text editor functions as a date field.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhTime - The text editor functions as a time field.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Flags that restrict input (exclusive flags) are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhDigitsOnly - Only digits are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhFormattedNumbersOnly - Only number input is allowed. This includes decimal point and minus sign.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhUppercaseOnly - Only upper case letter input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhLowercaseOnly - Only lower case letter input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhDialableCharactersOnly - Only characters suitable for phone dialing are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhEmailCharactersOnly - Only characters suitable for email addresses are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhUrlCharactersOnly - Only characters suitable for URLs are allowed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Masks:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhExclusiveInputMask - This mask yields nonzero if any of the exclusive flags are used.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This property was introduced in QtQuick.Controls 1.5.</db:para>
</db:section>
<db:section xml:id="menu-prop">
<db:title>[since QtQuick.Controls 1.3] menu : Component</db:title>
<db:para>This property contains the edit <db:link xlink:href="qml-qtquick-controls-menu.xml">Menu</db:link> for working with text selection. Set it to <db:code>null</db:code> if no menu is wanted.</db:para>
<db:note>
<db:para>The menu is only in use when <db:link xlink:href="qml-qtquick-controls-combobox.xml#editable-prop">editable</db:link> is <db:code>true</db:code></db:para>
</db:note>
<db:para>This property was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
<db:section xml:id="model-prop">
<db:title>model : model</db:title>
<db:para>The model to populate the <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> from.</db:para>
<db:para>Changing the model after initialization will reset <db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link> to <db:code>0</db:code>.</db:para>
</db:section>
<db:section xml:id="pressed-prop">
<db:title>[read-only] pressed : bool</db:title>
<db:para>This property holds whether the button is being pressed.</db:para>
</db:section>
<db:section xml:id="selectByMouse-prop">
<db:title>[since QtQuick.Controls 1.3] selectByMouse : bool</db:title>
<db:para>This property determines if the user can select the text in the editable text field with the mouse.</db:para>
<db:para>The default value is <db:code>true</db:code>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
<db:section xml:id="style-prop">
<db:title>style : Component</db:title>
<db:para>The style Component for this control.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-controls-styles-qmlmodule.xml">Qt Quick Controls Styles QML Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textRole-prop">
<db:title>textRole : string</db:title>
<db:para>The model role used for populating the <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link>.</db:para>
</db:section>
<db:section xml:id="validator-prop">
<db:title>[since QtQuick.Controls 1.1] validator : Validator</db:title>
<db:para>Allows you to set a text validator for an editable <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link>. When a validator is set, the text field will only accept input which leaves the text property in an intermediate state. The accepted signal will only be sent if the text is in an acceptable state when enter is pressed.</db:para>
<db:para>Currently supported validators are <db:link xlink:href="qml-qtquick-intvalidator.xml">IntValidator</db:link>, <db:link xlink:href="qml-qtquick-doublevalidator.xml">DoubleValidator</db:link>, and <db:link xlink:href="qml-qtquick-regexpvalidator.xml">RegExpValidator</db:link>. An example of using validators is shown below, which allows input of integers between 11 and 31 into the text field:</db:para>
<db:note>
<db:para>This property is only applied when <db:link xlink:href="qml-qtquick-controls-combobox.xml#editable-prop">editable</db:link> is <db:code>true</db:code></db:para>
</db:note>
<db:programlisting language="qml">import QtQuick 2.2
import QtQuick.Controls 1.2

ComboBox {
    editable: true
    model: 10
    validator: IntValidator {bottom: 0; top: 10;}
    focus: true
}
</db:programlisting>
<db:para>This property was introduced in QtQuick.Controls 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#acceptableInput-prop">acceptableInput</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#accepted-signal">accepted</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-combobox.xml#editable-prop">editable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="accepted-signal">
<db:title>[since QtQuick.Controls 1.1] accepted()</db:title>
<db:para>This signal is emitted when the Return or Enter key is pressed on an <db:link xlink:href="qml-qtquick-controls-combobox.xml#editable-prop">editable</db:link> combo box. If the confirmed string is not currently in the model, the <db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link> will be set to -1 and the <db:link xlink:href="qml-qtquick-controls-combobox.xml#currentText-prop">currentText</db:link> will be updated accordingly.</db:para>
<db:note>
<db:para>If there is a <db:link xlink:href="qml-qtquick-controls-combobox.xml#validator-prop">validator</db:link> set on the combobox, the signal will only be emitted if the input is in an acceptable state.</db:para>
</db:note>
<db:para>The corresponding handler is <db:code>onAccepted</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onAccepted</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
<db:section xml:id="activated-signal">
<db:title>[since QtQuick.Controls 1.1] activated(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is similar to <db:link xlink:href="qml-qtquick-controls-combobox.xml#currentIndex-prop">currentIndex</db:link> changed, but will only be emitted if the combo box index was changed by the user, not when set programmatically.</db:para>
<db:para><db:code role="parameter">index</db:code> is the activated model index, or <db:code>-1</db:code> if a new string is accepted.</db:para>
<db:para>The corresponding handler is <db:code>onActivated</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onActivated</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="find-method">
<db:title>[since QtQuick.Controls 1.1] int find(string <db:emphasis>text</db:emphasis>)</db:title>
<db:para>Finds and returns the index of a given <db:code role="parameter">text</db:code> If no match is found, <db:code>-1</db:code> is returned. The search is case sensitive.</db:para>
<db:para>This method was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
<db:section xml:id="selectAll-method">
<db:title>[since QtQuick.Controls 1.1] void selectAll()</db:title>
<db:para>Causes all <db:link xlink:href="qml-qtquick-controls-combobox.xml#editText-prop">editText</db:link> to be selected.</db:para>
<db:para>This method was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
<db:section xml:id="textAt-method">
<db:title>[since QtQuick.Controls 1.1] string textAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the text for a given <db:code role="parameter">index</db:code>. If an invalid index is provided, <db:code>null</db:code> is returned</db:para>
<db:para>This method was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
</db:section>
</db:article>
