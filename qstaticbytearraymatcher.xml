<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStaticByteArrayMatcher Class</db:title>
<db:subtitle>template &lt;int N&gt; class QStaticByteArrayMatcher</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstaticbytearraymatcher.xml">QStaticByteArrayMatcher</db:link> class is a compile-time version of QByteArrayMatcher.</db:para>
<db:para>This class was introduced in Qt 5.9.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStaticByteArrayMatcher</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.9</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStaticByteArrayMatcher is part of <db:simplelist><db:member>tools</db:member><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is useful when you have a sequence of bytes that you want to repeatedly match against some byte arrays (perhaps in a loop), or when you want to search for the same sequence of bytes multiple times in the same byte array. Using a matcher object and <db:link xlink:href="qstaticbytearraymatcher.xml#indexIn">indexIn</db:link>() is faster than matching a plain QByteArray with QByteArray::indexOf(), in particular if repeated matching takes place.</db:para>
<db:para>Unlike QByteArrayMatcher, this class calculates the internal representation at <db:emphasis>compile-time</db:emphasis>, if your compiler supports C++14-level constexpr (C++11 is not sufficient), so it can even benefit if you are doing one-off byte array matches.</db:para>
<db:para>Create the <db:link xlink:href="qstaticbytearraymatcher.xml">QStaticByteArrayMatcher</db:link> by calling qMakeStaticByteArrayMatcher(), passing it the C string literal you want to search for. Store the return value of that function in a static const auto variable, so you don't need to pass the N template parameter explicitly:</db:para>
<db:programlisting language="cpp">static const auto matcher = qMakeStaticByteArrayMatcher(&quot;needle&quot;);
</db:programlisting>
<db:para>Then call <db:link xlink:href="qstaticbytearraymatcher.xml#indexIn">indexIn</db:link>() on the QByteArray in which you want to search, just like with QByteArrayMatcher.</db:para>
<db:para>Since this class is designed to do all the up-front calculations at compile-time, it does not offer a setPattern() method.</db:para>
<db:note>
<db:para>Qt detects the necessary C++14 compiler support by way of the feature test recommendations from <db:link xlink:href="https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations">C++ Committee's Standing Document 6</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QByteArrayMatcher</db:member>
<db:member>QStringMatcher</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="indexIn">
<db:title>int QStaticByteArrayMatcher::indexIn(const QByteArray &amp;<db:emphasis>haystack</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexIn</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>haystack</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexIn(const QByteArray &amp;haystack, int from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches the char string <db:code role="parameter">haystack</db:code>, from byte position <db:code role="parameter">from</db:code> (default 0, i.e. from the first byte), for the byte array <db:link xlink:href="qstaticbytearraymatcher.xml#pattern">pattern</db:link>() that was set in the constructor.</db:para>
<db:para>Returns the position where the <db:link xlink:href="qstaticbytearraymatcher.xml#pattern">pattern</db:link>() matched in <db:code role="parameter">haystack</db:code>, or -1 if no match was found.</db:para>
</db:section>
<db:section xml:id="indexIn-1">
<db:title>int QStaticByteArrayMatcher::indexIn(const char *<db:emphasis>haystack</db:emphasis>, int <db:emphasis>hlen</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexIn</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>haystack</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>hlen</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexIn(const char *haystack, int hlen, int from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches the char string <db:code role="parameter">haystack</db:code>, which has length <db:code role="parameter">hlen</db:code>, from byte position <db:code role="parameter">from</db:code> (default 0, i.e. from the first byte), for the byte array <db:link xlink:href="qstaticbytearraymatcher.xml#pattern">pattern</db:link>() that was set in the constructor.</db:para>
<db:para>Returns the position where the <db:link xlink:href="qstaticbytearraymatcher.xml#pattern">pattern</db:link>() matched in <db:code role="parameter">haystack</db:code>, or -1 if no match was found.</db:para>
</db:section>
<db:section xml:id="pattern">
<db:title>QByteArray QStaticByteArrayMatcher::pattern() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>pattern</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray pattern() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the byte array pattern that this byte array matcher will search for.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QByteArrayMatcher::setPattern()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
