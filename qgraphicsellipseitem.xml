<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QGraphicsEllipseItem Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicsellipseitem.xml">QGraphicsEllipseItem</db:link> class provides an ellipse item that you can add to a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsEllipseItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractgraphicsshapeitem.xml" xlink:role="class">QAbstractGraphicsShapeItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsEllipseItem is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qgraphicsellipseitem.xml">QGraphicsEllipseItem</db:link> respresents an ellipse with a fill and an outline, and you can also use it for ellipse segments (see <db:link xlink:href="qgraphicsellipseitem.xml#startAngle">startAngle</db:link>(), <db:link xlink:href="qgraphicsellipseitem.xml#spanAngle">spanAngle</db:link>()).</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicsview-ellipseitem.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicsview-ellipseitem-pie.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>To set the item's ellipse, pass a <db:link xlink:href="qrectf.xml">QRectF</db:link> to <db:link xlink:href="qgraphicsellipseitem.xml">QGraphicsEllipseItem</db:link>'s constructor, or call <db:link xlink:href="qgraphicsellipseitem.xml#setRect">setRect</db:link>(). The <db:link xlink:href="qgraphicsellipseitem.xml#rect">rect</db:link>() function returns the current ellipse geometry.</db:para>
<db:para><db:link xlink:href="qgraphicsellipseitem.xml">QGraphicsEllipseItem</db:link> uses the rect and the pen width to provide a reasonable implementation of <db:link xlink:href="qgraphicsellipseitem.xml#boundingRect">boundingRect</db:link>(), <db:link xlink:href="qgraphicsellipseitem.xml#shape">shape</db:link>(), and <db:link xlink:href="qgraphicsellipseitem.xml#contains">contains</db:link>(). The <db:link xlink:href="qgraphicsellipseitem.xml#paint">paint</db:link>() function draws the ellipse using the item's associated pen and brush, which you can set by calling <db:link xlink:href="qabstractgraphicsshapeitem.xml#setPen">setPen</db:link>() and <db:link xlink:href="qabstractgraphicsshapeitem.xml#setBrush">setBrush</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspathitem.xml">QGraphicsPathItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsrectitem.xml">QGraphicsRectItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicspolygonitem.xml">QGraphicsPolygonItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicstextitem.xml">QGraphicsTextItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslineitem.xml">QGraphicsLineItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link></db:member>
<db:member><db:link xlink:href="graphicsview.xml">Graphics View Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="setRect-1">
<db:title>void QGraphicsEllipseItem::setRect(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>width</db:emphasis>, qreal <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Sets the item's rectangle to the rectangle defined by (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) and the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
<db:para>This convenience function is equivalent to calling <db:code>setRect(QRectF(x, y, width, height))</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsellipseitem.xml#rect">rect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGraphicsEllipseItem">
<db:title>[explicit] QGraphicsEllipseItem::QGraphicsEllipseItem(QGraphicsItem *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicsellipseitem.xml">QGraphicsEllipseItem</db:link>. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qabstractgraphicsshapeitem.xml">QAbstractGraphicsShapeItem</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGraphicsEllipseItem-1">
<db:title>[explicit] QGraphicsEllipseItem::QGraphicsEllipseItem(const QRectF &amp;<db:emphasis>rect</db:emphasis>, QGraphicsItem *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicsellipseitem.xml">QGraphicsEllipseItem</db:link> using <db:code role="parameter">rect</db:code> as the default rectangle. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qabstractgraphicsshapeitem.xml">QAbstractGraphicsShapeItem</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGraphicsEllipseItem-2">
<db:title>[explicit, since 4.3] QGraphicsEllipseItem::QGraphicsEllipseItem(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>width</db:emphasis>, qreal <db:emphasis>height</db:emphasis>, QGraphicsItem *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicsellipseitem.xml">QGraphicsEllipseItem</db:link> using the rectangle defined by (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) and the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, as the default rectangle. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qabstractgraphicsshapeitem.xml">QAbstractGraphicsShapeItem</db:link>'s constructor.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QGraphicsEllipseItem">
<db:title>[virtual noexcept] QGraphicsEllipseItem::~QGraphicsEllipseItem()</db:title>
<db:para>Destroys the <db:link xlink:href="qgraphicsellipseitem.xml">QGraphicsEllipseItem</db:link>.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>[override virtual] QRectF QGraphicsEllipseItem::boundingRect() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#boundingRect" role="function">QGraphicsItem::boundingRect() const</db:link>.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>[override virtual] bool QGraphicsEllipseItem::contains(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#contains" role="function">QGraphicsItem::contains(const QPointF &amp;point) const</db:link>.</db:para>
</db:section>
<db:section xml:id="isObscuredBy">
<db:title>[override virtual] bool QGraphicsEllipseItem::isObscuredBy(const QGraphicsItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractgraphicsshapeitem.xml#isObscuredBy" role="function">QAbstractGraphicsShapeItem::isObscuredBy(const QGraphicsItem *item) const</db:link>.</db:para>
</db:section>
<db:section xml:id="opaqueArea">
<db:title>[override virtual] QPainterPath QGraphicsEllipseItem::opaqueArea() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractgraphicsshapeitem.xml#opaqueArea" role="function">QAbstractGraphicsShapeItem::opaqueArea() const</db:link>.</db:para>
</db:section>
<db:section xml:id="paint">
<db:title>[override virtual] void QGraphicsEllipseItem::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QStyleOptionGraphicsItem *<db:emphasis>option</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis> = 0)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#paint" role="function">QGraphicsItem::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</db:link>.</db:para>
</db:section>
<db:section xml:id="rect">
<db:title>QRectF QGraphicsEllipseItem::rect() const</db:title>
<db:para>Returns the item's ellipse geometry as a <db:link xlink:href="qrectf.xml">QRectF</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsellipseitem.xml#setRect">setRect</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawEllipse">QPainter::drawEllipse</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRect">
<db:title>void QGraphicsEllipseItem::setRect(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>Sets the item's ellipse geometry to <db:code role="parameter">rect</db:code>. The rectangle's left edge defines the left edge of the ellipse, and the rectangle's top edge describes the top of the ellipse. The height and width of the rectangle describe the height and width of the ellipse.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsellipseitem.xml#rect">rect</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawEllipse">QPainter::drawEllipse</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSpanAngle">
<db:title>void QGraphicsEllipseItem::setSpanAngle(int <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Sets the span angle for an ellipse segment to <db:code role="parameter">angle</db:code>, which is in 16ths of a degree. This angle is used together with <db:link xlink:href="qgraphicsellipseitem.xml#startAngle">startAngle</db:link>() to represent an ellipse segment (a pie). By default, the span angle is 5760 (360 * 16, a full ellipse).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsellipseitem.xml#spanAngle">spanAngle</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsellipseitem.xml#setStartAngle">setStartAngle</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawPie">QPainter::drawPie</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStartAngle">
<db:title>void QGraphicsEllipseItem::setStartAngle(int <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Sets the start angle for an ellipse segment to <db:code role="parameter">angle</db:code>, which is in 16ths of a degree. This angle is used together with <db:link xlink:href="qgraphicsellipseitem.xml#spanAngle">spanAngle</db:link>() for representing an ellipse segment (a pie). By default, the start angle is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsellipseitem.xml#startAngle">startAngle</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsellipseitem.xml#setSpanAngle">setSpanAngle</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawPie">QPainter::drawPie</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shape">
<db:title>[override virtual] QPainterPath QGraphicsEllipseItem::shape() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#shape" role="function">QGraphicsItem::shape() const</db:link>.</db:para>
</db:section>
<db:section xml:id="spanAngle">
<db:title>int QGraphicsEllipseItem::spanAngle() const</db:title>
<db:para>Returns the span angle of an ellipse segment in 16ths of a degree. This angle is used together with <db:link xlink:href="qgraphicsellipseitem.xml#startAngle">startAngle</db:link>() for representing an ellipse segment (a pie). By default, this function returns 5760 (360 * 16, a full ellipse).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsellipseitem.xml#setSpanAngle">setSpanAngle</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsellipseitem.xml#startAngle">startAngle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startAngle">
<db:title>int QGraphicsEllipseItem::startAngle() const</db:title>
<db:para>Returns the start angle for an ellipse segment in 16ths of a degree. This angle is used together with <db:link xlink:href="qgraphicsellipseitem.xml#spanAngle">spanAngle</db:link>() for representing an ellipse segment (a pie). By default, the start angle is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsellipseitem.xml#setStartAngle">setStartAngle</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsellipseitem.xml#spanAngle">spanAngle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] int QGraphicsEllipseItem::type() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#type" role="function">QGraphicsItem::type() const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
