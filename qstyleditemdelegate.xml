<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QStyledItemDelegate Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link> class provides display and editing facilities for data items from a model.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStyledItemDelegate</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemdelegate.xml" xlink:role="class">QAbstractItemDelegate</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStyledItemDelegate is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>When displaying data from models in Qt item views, e.g., a <db:link xlink:href="qtableview.xml">QTableView</db:link>, the individual items are drawn by a delegate. Also, when an item is edited, it provides an editor widget, which is placed on top of the item view while editing takes place. <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link> is the default delegate for all Qt item views, and is installed upon them when they are created.</db:para>
<db:para>The <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link> class is one of the <db:link xlink:href="model-view-programming.xml#the-model-view-classes">Model/View Classes</db:link> and is part of Qt's <db:link xlink:href="model-view-programming.xml">model/view framework</db:link>. The delegate allows the display and editing of items to be developed independently from the model and view.</db:para>
<db:para>The data of items in models are assigned an <db:link xlink:href="qt.xml#ItemDataRole-enum">ItemDataRole</db:link>; each item can store a <db:link xlink:href="qvariant.xml">QVariant</db:link> for each role. <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link> implements display and editing for the most common datatypes expected by users, including booleans, integers, and strings.</db:para>
<db:para>The data will be drawn differently depending on which role they have in the model. The following table describes the roles and the data types the delegate can handle for each of them. It is often sufficient to ensure that the model returns appropriate data for each of the roles to determine the appearance of items in views.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Role</db:para>
</db:th>
<db:th>
<db:para>Accepted Types</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::BackgroundRole</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qbrush.xml">QBrush</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::BackgroundColorRole</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcolor.xml">QColor</db:link> (obsolete; use <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::BackgroundRole</db:link> instead)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::CheckStateRole</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#CheckState-enum">Qt::CheckState</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DecorationRole</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qicon.xml">QIcon</db:link>, <db:link xlink:href="qpixmap.xml">QPixmap</db:link>, <db:link xlink:href="qimage.xml">QImage</db:link> and <db:link xlink:href="qcolor.xml">QColor</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> and types with a string representation</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link></db:para>
</db:td>
<db:td>
<db:para>See <db:link xlink:href="qitemeditorfactory.xml">QItemEditorFactory</db:link> for details</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::FontRole</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qfont.xml">QFont</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::SizeHintRole</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qsize.xml">QSize</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::TextAlignmentRole</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ForegroundRole</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qbrush.xml">QBrush</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::TextColorRole</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcolor.xml">QColor</db:link> (obsolete; use <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ForegroundRole</db:link> instead)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Editors are created with a <db:link xlink:href="qitemeditorfactory.xml">QItemEditorFactory</db:link>; a default static instance provided by <db:link xlink:href="qitemeditorfactory.xml">QItemEditorFactory</db:link> is installed on all item delegates. You can set a custom factory using <db:link xlink:href="qstyleditemdelegate.xml#setItemEditorFactory">setItemEditorFactory</db:link>() or set a new default factory with <db:link xlink:href="qitemeditorfactory.xml#setDefaultFactory">QItemEditorFactory::setDefaultFactory</db:link>(). It is the data stored in the item model with the <db:link xlink:href="qt.xml#ItemDataRole-enum">EditRole</db:link> that is edited. See the <db:link xlink:href="qitemeditorfactory.xml">QItemEditorFactory</db:link> class for a more high-level introduction to item editor factories. The <db:link xlink:href="qtwidgets-itemviews-coloreditorfactory-example.xml">Color Editor Factory</db:link> example shows how to create custom editors with a factory.</db:para>
<db:section xml:id="subclassing-qstyleditemdelegate">
<db:title>Subclassing QStyledItemDelegate</db:title>
<db:para>If the delegate does not support painting of the data types you need or you want to customize the drawing of items, you need to subclass <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link>, and reimplement <db:link xlink:href="qstyleditemdelegate.xml#paint">paint</db:link>() and possibly <db:link xlink:href="qstyleditemdelegate.xml#sizeHint">sizeHint</db:link>(). The <db:link xlink:href="qstyleditemdelegate.xml#paint">paint</db:link>() function is called individually for each item, and with <db:link xlink:href="qstyleditemdelegate.xml#sizeHint">sizeHint</db:link>(), you can specify the hint for each of them.</db:para>
<db:para>When reimplementing <db:link xlink:href="qstyleditemdelegate.xml#paint">paint</db:link>(), one would typically handle the datatypes one would like to draw and use the superclass implementation for other types.</db:para>
<db:para>The painting of check box indicators are performed by the current style. The style also specifies the size and the bounding rectangles in which to draw the data for the different data roles. The bounding rectangle of the item itself is also calculated by the style. When drawing already supported datatypes, it is therefore a good idea to ask the style for these bounding rectangles. The <db:link xlink:href="qstyle.xml">QStyle</db:link> class description describes this in more detail.</db:para>
<db:para>If you wish to change any of the bounding rectangles calculated by the style or the painting of check box indicators, you can subclass <db:link xlink:href="qstyle.xml">QStyle</db:link>. Note, however, that the size of the items can also be affected by reimplementing <db:link xlink:href="qstyleditemdelegate.xml#sizeHint">sizeHint</db:link>().</db:para>
<db:para>It is possible for a custom delegate to provide editors without the use of an editor item factory. In this case, the following virtual functions must be reimplemented:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qstyleditemdelegate.xml#createEditor">createEditor</db:link>() returns the widget used to change data from the model and can be reimplemented to customize editing behavior.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstyleditemdelegate.xml#setEditorData">setEditorData</db:link>() provides the widget with data to manipulate.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstyleditemdelegate.xml#updateEditorGeometry">updateEditorGeometry</db:link>() ensures that the editor is displayed correctly with respect to the item view.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstyleditemdelegate.xml#setModelData">setModelData</db:link>() returns updated data to the model.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:link xlink:href="qtwidgets-itemviews-stardelegate-example.xml">Star Delegate</db:link> example creates editors by reimplementing these methods.</db:para>
</db:section>
<db:section xml:id="qstyleditemdelegate-vs-qitemdelegate">
<db:title>QStyledItemDelegate vs. QItemDelegate</db:title>
<db:para>Since Qt 4.4, there are two delegate classes: <db:link xlink:href="qitemdelegate.xml">QItemDelegate</db:link> and <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link>. However, the default delegate is <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link>. These two classes are independent alternatives to painting and providing editors for items in views. The difference between them is that <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link> uses the current style to paint its items. We therefore recommend using <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link> as the base class when implementing custom delegates or when working with Qt style sheets. The code required for either class should be equal unless the custom delegate needs to use the style for drawing.</db:para>
<db:para>If you wish to customize the painting of item views, you should implement a custom style. Please see the <db:link xlink:href="qstyle.xml">QStyle</db:link> class documentation for details.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="model-view-programming.xml#delegate-classes">Delegate Classes</db:link></db:member>
<db:member><db:link xlink:href="qitemdelegate.xml">QItemDelegate</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemdelegate.xml">QAbstractItemDelegate</db:link></db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-spinboxdelegate-example.xml">Spin Box Delegate Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-stardelegate-example.xml">Star Delegate Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-coloreditorfactory-example.xml">Color Editor Factory Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStyledItemDelegate">
<db:title>[explicit] QStyledItemDelegate::QStyledItemDelegate(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs an item delegate with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QStyledItemDelegate">
<db:title>[virtual noexcept] QStyledItemDelegate::~QStyledItemDelegate()</db:title>
<db:para>Destroys the item delegate.</db:para>
</db:section>
<db:section xml:id="createEditor">
<db:title>[override virtual] QWidget *QStyledItemDelegate::createEditor(QWidget *<db:emphasis>parent</db:emphasis>, const QStyleOptionViewItem &amp;<db:emphasis>option</db:emphasis>, const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemdelegate.xml#createEditor" role="function">QAbstractItemDelegate::createEditor(QWidget *parent, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</db:link>.</db:para>
<db:para>Returns the widget used to edit the item specified by <db:code role="parameter">index</db:code> for editing. The <db:code role="parameter">parent</db:code> widget and style <db:code role="parameter">option</db:code> are used to control how the editor widget appears.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemdelegate.xml#createEditor">QAbstractItemDelegate::createEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="displayText">
<db:title>[virtual] QString QStyledItemDelegate::displayText(const QVariant &amp;<db:emphasis>value</db:emphasis>, const QLocale &amp;<db:emphasis>locale</db:emphasis>) const</db:title>
<db:para>This function returns the string that the delegate will use to display the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> of the model in <db:code role="parameter">locale</db:code>. <db:code role="parameter">value</db:code> is the value of the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> provided by the model.</db:para>
<db:para>The default implementation uses the <db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link> to convert <db:code role="parameter">value</db:code> into a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>This function is not called for empty model indices, i.e., indices for which the model returns an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#data">QAbstractItemModel::data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="editorEvent">
<db:title>[override virtual protected] bool QStyledItemDelegate::editorEvent(QEvent *<db:emphasis>event</db:emphasis>, QAbstractItemModel *<db:emphasis>model</db:emphasis>, const QStyleOptionViewItem &amp;<db:emphasis>option</db:emphasis>, const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemdelegate.xml#editorEvent" role="function">QAbstractItemDelegate::editorEvent(QEvent *event, QAbstractItemModel *model, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual protected] bool QStyledItemDelegate::eventFilter(QObject *<db:emphasis>editor</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *, QEvent *)</db:link>.</db:para>
<db:para>Returns <db:code>true</db:code> if the given <db:code role="parameter">editor</db:code> is a valid <db:link xlink:href="qwidget.xml">QWidget</db:link> and the given <db:code role="parameter">event</db:code> is handled; otherwise returns <db:code>false</db:code>. The following key press events are handled by default:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:guilabel>Tab</db:guilabel></db:para>
</db:listitem>
<db:listitem>
<db:para><db:guilabel>Backtab</db:guilabel></db:para>
</db:listitem>
<db:listitem>
<db:para><db:guilabel>Enter</db:guilabel></db:para>
</db:listitem>
<db:listitem>
<db:para><db:guilabel>Return</db:guilabel></db:para>
</db:listitem>
<db:listitem>
<db:para><db:guilabel>Esc</db:guilabel></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In the case of <db:guilabel>Tab</db:guilabel>, <db:guilabel>Backtab</db:guilabel>, <db:guilabel>Enter</db:guilabel> and <db:guilabel>Return</db:guilabel> key press events, the <db:code role="parameter">editor</db:code>'s data is comitted to the model and the editor is closed. If the <db:code role="parameter">event</db:code> is a <db:guilabel>Tab</db:guilabel> key press the view will open an editor on the next item in the view. Likewise, if the <db:code role="parameter">event</db:code> is a <db:guilabel>Backtab</db:guilabel> key press the view will open an editor on the <db:emphasis>previous</db:emphasis> item in the view.</db:para>
<db:para>If the event is a <db:guilabel>Esc</db:guilabel> key press event, the <db:code role="parameter">editor</db:code> is closed <db:emphasis>without</db:emphasis> committing its data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemdelegate.xml#commitData">commitData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemdelegate.xml#closeEditor">closeEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[virtual protected] void QStyledItemDelegate::initStyleOption(QStyleOptionViewItem *<db:emphasis>option</db:emphasis>, const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values using the index <db:code role="parameter">index</db:code>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionviewitem.xml">QStyleOptionViewItem</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemEditorFactory">
<db:title>QItemEditorFactory *QStyledItemDelegate::itemEditorFactory() const</db:title>
<db:para>Returns the editor factory used by the item delegate. If no editor factory is set, the function will return null.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleditemdelegate.xml#setItemEditorFactory">setItemEditorFactory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paint">
<db:title>[override virtual] void QStyledItemDelegate::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QStyleOptionViewItem &amp;<db:emphasis>option</db:emphasis>, const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemdelegate.xml#paint" role="function">QAbstractItemDelegate::paint(QPainter *painter, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</db:link>.</db:para>
<db:para>Renders the delegate using the given <db:code role="parameter">painter</db:code> and style <db:code role="parameter">option</db:code> for the item specified by <db:code role="parameter">index</db:code>.</db:para>
<db:para>This function paints the item using the view's <db:link xlink:href="qstyle.xml">QStyle</db:link>.</db:para>
<db:para>When reimplementing paint in a subclass. Use the <db:link xlink:href="qstyleditemdelegate.xml#initStyleOption">initStyleOption</db:link>() to set up the <db:code role="parameter">option</db:code> in the same way as the <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link>.</db:para>
<db:para>Whenever possible, use the <db:code role="parameter">option</db:code> while painting. Especially its <db:link xlink:href="qstyleoption.xml#rect-var">rect</db:link> variable to decide where to draw and its <db:link xlink:href="qstyleoption.xml#state-var">state</db:link> to determine if it is enabled or selected.</db:para>
<db:para>After painting, you should ensure that the painter is returned to its the state it was supplied in when this function was called. For example, it may be useful to call <db:link xlink:href="qpainter.xml#save">QPainter::save</db:link>() before painting and <db:link xlink:href="qpainter.xml#restore">QPainter::restore</db:link>() afterwards.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemdelegate.xml#paint">QItemDelegate::paint</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#drawControl">QStyle::drawControl</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#ControlElement-enum">QStyle::CE_ItemViewItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEditorData">
<db:title>[override virtual] void QStyledItemDelegate::setEditorData(QWidget *<db:emphasis>editor</db:emphasis>, const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemdelegate.xml#setEditorData" role="function">QAbstractItemDelegate::setEditorData(QWidget *editor, const QModelIndex &amp;index) const</db:link>.</db:para>
<db:para>Sets the data to be displayed and edited by the <db:code role="parameter">editor</db:code> from the data model item specified by the model <db:code role="parameter">index</db:code>.</db:para>
<db:para>The default implementation stores the data in the <db:code role="parameter">editor</db:code> widget's <db:link xlink:href="properties.xml#qt-s-property-system">user property</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isUser">QMetaProperty::isUser</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemEditorFactory">
<db:title>void QStyledItemDelegate::setItemEditorFactory(QItemEditorFactory *<db:emphasis>factory</db:emphasis>)</db:title>
<db:para>Sets the editor factory to be used by the item delegate to be the <db:code role="parameter">factory</db:code> specified. If no editor factory is set, the item delegate will use the default editor factory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleditemdelegate.xml#itemEditorFactory">itemEditorFactory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setModelData">
<db:title>[override virtual] void QStyledItemDelegate::setModelData(QWidget *<db:emphasis>editor</db:emphasis>, QAbstractItemModel *<db:emphasis>model</db:emphasis>, const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemdelegate.xml#setModelData" role="function">QAbstractItemDelegate::setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &amp;index) const</db:link>.</db:para>
<db:para>Gets data from the <db:code role="parameter">editor</db:code> widget and stores it in the specified <db:code role="parameter">model</db:code> at the item <db:code role="parameter">index</db:code>.</db:para>
<db:para>The default implementation gets the value to be stored in the data model from the <db:code role="parameter">editor</db:code> widget's <db:link xlink:href="properties.xml#qt-s-property-system">user property</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isUser">QMetaProperty::isUser</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QStyledItemDelegate::sizeHint(const QStyleOptionViewItem &amp;<db:emphasis>option</db:emphasis>, const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemdelegate.xml#sizeHint" role="function">QAbstractItemDelegate::sizeHint(const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</db:link>.</db:para>
<db:para>Returns the size needed by the delegate to display the item specified by <db:code role="parameter">index</db:code>, taking into account the style information provided by <db:code role="parameter">option</db:code>.</db:para>
<db:para>This function uses the view's <db:link xlink:href="qstyle.xml">QStyle</db:link> to determine the size of the item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QStyle::sizeFromContents()</db:link></db:member>
<db:member><db:link xlink:href="qstyle.xml#ContentsType-enum">QStyle::CT_ItemViewItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateEditorGeometry">
<db:title>[override virtual] void QStyledItemDelegate::updateEditorGeometry(QWidget *<db:emphasis>editor</db:emphasis>, const QStyleOptionViewItem &amp;<db:emphasis>option</db:emphasis>, const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemdelegate.xml#updateEditorGeometry" role="function">QAbstractItemDelegate::updateEditorGeometry(QWidget *editor, const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const</db:link>.</db:para>
<db:para>Updates the <db:code role="parameter">editor</db:code> for the item specified by <db:code role="parameter">index</db:code> according to the style <db:code role="parameter">option</db:code> given.</db:para>
</db:section>
</db:section>
</db:article>
