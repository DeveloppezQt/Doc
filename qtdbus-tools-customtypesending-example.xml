<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Custom Type Sending Example</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>QtDBus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>QtDBus Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Custom Type Sending example shows how to use a custom type with signals and slots.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/customtypesending-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>In the <db:link xlink:href="qtcore-tools-customtype-example.xml">Custom Type Example</db:link>, we showed how to integrate custom types with the meta-object system, enabling them to be stored in <db:link xlink:href="qvariant.xml">QVariant</db:link> objects, written out in debugging information and used in signal-slot communication.</db:para>
<db:para>In this example, we demonstrate that the preparations made to the Message class and its declaration with <db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>() enable it to be used with direct signal-slot connections. We do this by creating a Window class containing signals and slots whose signatures include Message arguments.</db:para>
</db:section>
<db:section xml:id="the-window-and-message-class-definitions">
<db:title>The Window and Message Class Definitions</db:title>
<db:para>We define a simple Window class with a signal and public slot that allow a Message object to be sent via a signal-slot connection:</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>The window will contain a text editor to show the contents of a message and a push button that the user can click to send a message. To facilitate this, we also define the sendMessage() slot. We also keep a Message instance in the thisMessage private variable which holds the actual message to be sent.</db:para>
<db:para>The Message class is defined in the following way:</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>The type is declared to the meta-type system with the <db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>() macro:</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>This will make the type available for use in direct signal-slot connections.</db:para>
</db:section>
<db:section xml:id="the-window-class-implementation">
<db:title>The Window Class Implementation</db:title>
<db:para>The Window constructor sets up a user interface containing a text editor and a push button.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>The button's <db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>() signal is connected to the window's sendMessage() slot, which emits the messageSent(Message) signal with the Message held by the thisMessage variable:</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>We implement a slot to allow the message to be received, and this also lets us set the message in the window programatically:</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>In this function, we simply assign the new message to thisMessage and update the text in the editor.</db:para>
</db:section>
<db:section xml:id="making-the-connection">
<db:title>Making the Connection</db:title>
<db:para>In the example's main() function, we perform the connection between two instances of the Window class:</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>We set the message for the first window and connect the messageSent(Message) signal from each window to the other's setMessage(Message) slot. Since the signals and slots mechanism is only concerned with the type, we can simplify the signatures of both the signal and slot when we make the connection.</db:para>
<db:para>When the user clicks on the <db:guilabel>Send message</db:guilabel> button in either window, the message shown will be emitted in a signal that the other window will receive and display.</db:para>
</db:section>
<db:section xml:id="further-reading">
<db:title>Further Reading</db:title>
<db:para>Although the custom Message type can be used with direct signals and slots, an additional registration step needs to be performed if you want to use it with queued signal-slot connections. See the <db:link xlink:href="qtcore-threads-queuedcustomtype-example.xml">Queued Custom Type Example</db:link> for details.</db:para>
<db:para>More information on using custom types with Qt can be found in the <db:link xlink:href="custom-types.xml">Creating Custom Qt Types</db:link> document.</db:para>
</db:section>
</db:article>
