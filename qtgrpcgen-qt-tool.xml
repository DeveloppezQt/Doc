<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The qtgrpcgen Tool</db:title>
<db:productname>QtGrpc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GRPC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of the qtgrpcgen tool and how to use it.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:code>qtgrpcgen</db:code> tool can be used to generate Qt GRPC service classes from a protobuf schema. The tool is provided by the CMake <db:code>Qt6::GrpcTools</db:code> package. It works as an extension to Google's <db:code>protoc</db:code> tool.</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 COMPONENTS GrpcTools REQUIRED)
</db:programlisting>
<db:section xml:id="usage">
<db:title>Usage</db:title>
<db:para>Qt provides CMake functions that ease the use of the <db:code>qtgrpcgen</db:code> tool. When using CMake as a build tool you should prefer using the <db:link xlink:href="cmake-commands-qtgrpc.xml">Qt CMake API</db:link>. For build systems other than CMake, adapt the commands described in <db:link xlink:href="qtgrpcgen-qt-tool.xml#running-qtgrpcgen-manually">Running qtgrpcgen manually</db:link>.</db:para>
<db:note>
<db:para>there is no explicit support for building gRPC and Protobuf applications using the Qt GRPC module with <db:emphasis>qmake</db:emphasis>.</db:para>
</db:note>
<db:section xml:id="cmake">
<db:title>CMake</db:title>
<db:para>The following CMake commands integrate a gRPC service into a Qt project.</db:para>
<db:anchor xml:id="cmake-commands-qtgrpc"/>
<db:variablelist role="cmake-commands-qtgrpc">
<db:varlistentry>
<db:term><db:link xlink:href="qt-add-grpc.xml" xlink:role="page">qt_add_grpc</db:link></db:term>
<db:listitem>
<db:para>Generates Qt-based C++ services using a protobuf schema</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para>Usually <db:code>qtgrpcgen</db:code> would be invoked through CMake using the <db:code>qt_add_grpc</db:code> macro, as shown in the following example:</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.16...3.22)
project(MyProject)

find_package(Qt6 REQUIRED COMPONENTS Protobuf Grpc)
qt_standard_project_setup()

qt_add_protobuf(MyProtoMessageLib
    PROTO_FILES
        path/to/helloworld.proto
    PROTO_INCLUDES
        path/to/proto/include
)

qt_add_grpc(MyGrpcClient CLIENT
    PROTO_FILES
        path/to/helloworld.proto
    PROTO_INCLUDES
        path/to/proto/include
)

qt_add_executable(MyApp main.cpp)

target_link_libraries(MyApp PRIVATE MyGrpcClient MyProtoMessageLib Qt6::Protobuf)
</db:programlisting>
<db:para>The example above calls the <db:code>qt_add_grpc()</db:code> CMake function to generate a library called <db:code>MyGrpcClient</db:code>.</db:para>
<db:note>
<db:para>if the <db:code>.proto</db:code> file API contains messages, then the <db:code>qt_add_protobuf()</db:code> CMake function should be called to generate protobuf message classes for the project.</db:para>
</db:note>
<db:para>Finally, the example creates a target for an executable called <db:emphasis>MyApp</db:emphasis> which links to the <db:emphasis>MyGrpcClient</db:emphasis> and <db:emphasis>MyProtoMessageLib</db:emphasis> libraries.</db:para>
</db:section>
<db:section xml:id="running-qtgrpcgen-manually">
<db:title>Running <db:code>qtgrpcgen</db:code> manually</db:title>
<db:programlisting language="cpp" role="bad">protoc --plugin=protoc-gen-qtgrpc=&amp;lt;path/to/bin/&amp;gt;qtgrpcgen \
    --qtgrpc_out=&quot;[&amp;lt;options&amp;gt;:]&amp;lt;output_dir&amp;gt;&quot; \
    [--qtgrpc_opt=&quot;&amp;lt;options&amp;gt;&quot;] \
    [-I/extra/proto/include/path] \
    &amp;lt;protofile&amp;gt;.proto
</db:programlisting>
<db:para>The <db:code>options</db:code> argument is a semicolon-separated list of <db:link xlink:href="qtgrpcgen-qt-tool.xml#options">Options</db:link>. It can be passed by prepending the <db:code>options</db:code> to the <db:code>output_dir</db:code> argument, delimited by a colon, or through a separate argument, <db:code>--qtgrpc_opt</db:code>. You also can pass the corresponding keys as the <db:code>QT_GRPC_OPTIONS</db:code> environment variable. Keys must be presented as a semicolon-separated list:</db:para>
<db:programlisting language="cpp" role="bad">export QT_GRPC_OPTIONS=&quot;COPY_COMMENTS;GENERATE_PACKAGE_SUBFOLDERS;EXTRA_NAMESPACE=MyTopLevelNamespace&quot;
</db:programlisting>
</db:section>
<db:section xml:id="options">
<db:title>Options</db:title>
<db:para>The generator supports options that can be provided to tune generation. Options have direct aliases in the <db:link xlink:href="qt-add-grpc.xml">qt_add_grpc</db:link> function. The following options are supported:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>COPY_COMMENTS</db:code> copies comments from <db:code>.proto</db:code> files. If provided in the parameter list, comments related to messages and fields are copied to generated header files.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>GENERATE_PACKAGE_SUBFOLDERS</db:code> generates a folder structure for the generated files matching the <db:code>.proto</db:code> file's package name. For example, <db:code>package io.qt.test;</db:code> would put the generated files into <db:code>io/qt/test/</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>EXTRA_NAMESPACE</db:code> is an optional namespace that will be used for the generated classes. The classes are always generated in a namespace whose name is the same as the package name specified in the <db:code>.proto</db:code> file. If this option is used, then everything will be nested inside the extra namespace.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>EXPORT_MACRO</db:code> is the base name of the symbol export macro used for the generated code. The generated macro name is constructed as <db:code>QPB_&lt;EXPORT_MACRO&gt;_EXPORT</db:code>. If the option is not set, the macro is not generated.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QML</db:code> enables a <db:code>QmlClient</db:code> generation. The class is inherited from the base <db:code>CLIENT</db:code> class, but extends it with <db:code>QML_ELEMENT</db:code> macro, QML properties, and <db:code>Q_INVOKABLE</db:code> methods. The result of generation may be added into the QML module, that makes QmlClient available as an object from QML. See example of adding the <db:code>QmlClient</db:code> class into QML module below:</db:para>
<db:programlisting language="cpp" role="bad">qt_add_protobuf(targetname
    QML
    ...
)
qt_add_grpc(targetname
    QML
    ...
)
</db:programlisting>
<db:note>
<db:para>for Qt 6.7 only <db:code>QmlClient</db:code> source code generation is supported.</db:para>
</db:note>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:article>
