<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>What's New in Qt 6.4</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lists the new features in Qt 6.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="new-and-restored-modules-in-qt-6-4">
<db:title>New and Restored Modules in Qt 6.4</db:title>
<db:para>Qt 6.4 adds the following modules:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qthttpserver-index.xml">Qt HTTP Server</db:link> - A module for embedding an HTTP server into Qt applications. This module is in technical preview, API and ABI stability is not guaranteed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick3dphysics-index.xml">Qt Quick 3D Physics</db:link> - A high-level QML module adding physical simulation capabilities to Qt Quick 3D.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Qt 6.4 reintroduces the <db:link xlink:href="qttexttospeech-index.xml">Qt TextToSpeech</db:link> module from Qt 5. This module wasn't present in Qt 6.3. It now uses the CMake build system and works with Qt 6.</db:para>
<db:para>You'll find more details about changes to each module in <db:link xlink:href="modulechanges.xml">Changes to Qt Modules in Qt 6</db:link>.</db:para>
</db:section>
<db:section xml:id="new-features-in-qt-6-4">
<db:title>New Features in Qt 6.4</db:title>
<db:section xml:id="qt-core-module">
<db:title>Qt Core Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link> as an alias for <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>. This is now the recommended name for referring to a Latin-1 string view.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QLatin1StringView(const char *, qsizetype) and QLatin1StringView(const char *, const char *) constructors are made non-explicit.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added literal operator _L1 for creating Latin-1 string and char literals in the <db:link xlink:href="qt-literals-stringliterals.xml">Qt::Literals::StringLiterals</db:link> namespace.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added literal operators _s and _ba for creating <db:link xlink:href="qstring.xml">QString</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link> literals respectively, in the <db:link xlink:href="qt-literals-stringliterals.xml">Qt::Literals::StringLiterals</db:link> namespace. Deprecated _qs and _qba in favor of _s and _ba.</db:para>
</db:listitem>
<db:listitem>
<db:para>Deprecated QString::count() and QByteArray::count() that take no parameters, to avoid confusion with the algorithm overloads of the same name. They can be replaced by size() or length() methods.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link> and <db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link> support now all codecs supported by ICU when Qt is built with ICU support enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the classes for Android and JNI development, <db:link xlink:href="qjniobject.xml">QJniObject</db:link> and <db:link xlink:href="qjnienvironment.xml">QJniEnvironment</db:link>, overloads have been added for callMethod, <db:link xlink:href="qjnienvironment.xml#findMethod">findMethod</db:link> and similar methods. It is now possible to call Java functions and register native methods without specifying a signature string.</db:para>
</db:listitem>
<db:listitem>
<db:para>The new template function <db:link xlink:href="">QJniObject::construct</db:link>() allows instantiating of a Java class from C++ without specifying a type or signature string.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qbytearray.xml">QByteArray</db:link> now has a percentDecoded() instance method as an alternative to calling the fromPercentEncoding() static method on the instance.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtextstream.xml">QTextStream</db:link> now supports input and output of char16_t.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstringview.xml">QStringView</db:link> now has a localeAwareCompare() method and can count() how many times a given sub-string appears.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdate.xml">QDate</db:link> can now be constructed from various std::chrono year-month-day structure types, when available, and it has an addDuration() taking a std::chrono::days, when available.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> likewise gains an addDuration(std::chrono::milliseconds), along with arithmetic to add or subtract the same type, a difference of <db:link xlink:href="qdatetime.xml">QDateTime</db:link> values returning it, and a few static pseudo-constructors taking various std::chrono types describing a moment in time.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qtimezone.xml#fromStdTimeZonePtr">QTimeZone::fromStdTimeZonePtr</db:link>(const std::chrono::time_zone *).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcalendar.xml">QCalendar</db:link>'s construction by name now accepts <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-gui-module">
<db:title>Qt GUI Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added <db:link xlink:href="qtextdocumentfragment.xml#toMarkdown">QTextDocumentFragment::toMarkdown</db:link>(), <db:link xlink:href="qtextdocumentfragment.xml#fromMarkdown">QTextDocumentFragment::fromMarkdown</db:link>(), and <db:link xlink:href="qtextcursor.xml#insertMarkdown">QTextCursor::insertMarkdown</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-module">
<db:title>Qt Quick Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Several new properties and functions has been added to <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> that improves support for keyboard navigation and selection, row- and column selections, animations, sub-cell positioning, and more.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> now support selections, and has gained a broader API for expanding and collapsing nodes in the tree recursively.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> is now functional with all supported 3D graphics APIs (Vulkan, Metal, Direct3D 11) in addition to OpenGL. Applications no longer have to enforce rendering with OpenGL when using <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added support for arrays of combined image samplers in shaders used with custom materials. This is supported by the new function <db:link xlink:href="qsgmaterialshader.xml#combinedImageSamplerCount">QSGMaterialShader::combinedImageSamplerCount</db:link>() and the enhanced semantics of the existing texture argument of <db:link xlink:href="qsgmaterialshader.xml#updateSampledImage">QSGMaterialShader::updateSampledImage</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>Added support changing the polygon rasterization mode from solid to line in <db:link xlink:href="qsgmaterialshader-graphicspipelinestate.xml">QSGMaterialShader::GraphicsPipelineState</db:link>. (available only when the 3D API in use supports this)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffectsource.xml#format-prop">ShaderEffectSource.format</db:link> and <db:link xlink:href="qml-qtquick-item.xml#layer.format-prop">layer.format</db:link> were not useful in previous Qt 6 releases, with the legacy values ignored in practice. This is now documented and new, actually useful values are introduced, in particular to enable requesting floating point (FP16 or FP32) textures instead of RGBA8, if desired.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qquickrendertarget.xml#fromPaintDevice">QQuickRenderTarget::fromPaintDevice</db:link>(), enabling redirecting the output from a <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> using the software backend as well.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added overloads in <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> that enable specifying the native format of the texture or image object. This is relevant in some advanced use cases when one has to work with native textures that are not RGBA8. Note that only native formats that are supported by Qt's rendering infrastructure are accepted.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qquickrendertarget.xml#setMirrorVertically">setMirrorVertically</db:link>() to <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link>, which allows requesting the Qt Quick renderer to alter its matrices to get vertically flipped results when redirecting the 3D API-based rendering into a texture.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt Quick windows will now attempt to use the software rasterization platform of Direct 3D (WARP) in case the primary graphics device is not compatible with Qt, without having to resort to manually setting environment variables.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added simple heuristics to the threaded render loop of the Qt Quick scenegraph for recognizing broken vsync-based throttling. When frames are rendered/presented too fast, without blocking the render thread, it now switches automatically to the regular timer-based approach of running animations, thus preventing QML animations running too fast.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qml-qtquick-frameanimation.xml">FrameAnimation</db:link> for custom animations. Allows running custom scripts in synchronization with the animation frames.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-controls-module">
<db:title>Qt Quick Controls Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added a new native-looking style for iOS, <db:link xlink:href="qtquickcontrols-ios.xml">iOS Style</db:link>, as Tech Preview.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml">TreeViewDelegate</db:link> has three new properties that describes if it's current, selected, or highlighted in the <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-dialogs-module">
<db:title>Qt Quick Dialogs Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added <db:link xlink:href="qml-qtquick-dialogs-colordialog.xml">ColorDialog</db:link>. This is a native dialog on platforms that support it, and a non-native Qt Quick dialog on other platforms.</db:para>
<db:para>The non-native dialog supports all of the non-native styles: Basic, Fusion, Imagine, Material and Universal.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-widgets-module">
<db:title>Qt Widgets Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qformlayout.xml">QFormLayout</db:link> has new <db:link xlink:href="qformlayout.xml#isRowVisible">isRowVisible</db:link>() and <db:link xlink:href="qformlayout.xml#setRowVisible">setRowVisible</db:link>() member functions, with overloads that allow hiding and showing rows by index, input widget, or row layout.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qkeysequenceedit.xml">QKeySequenceEdit</db:link> has a new <db:link xlink:href="qkeysequenceedit.xml#clearButtonEnabled-prop">clearButtonEnabled</db:link> property. Use it to control whether the widget shows a clear button that allows the user to clear the edit.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwizard.xml">QWizard</db:link> has a new slot, <db:link xlink:href="qwizard.xml#setCurrentId">setCurrentId</db:link>, that allows applications to move to a page without visiting the pages between the current page and the target.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-network-module">
<db:title>Qt Network Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added <db:link xlink:href="qsslserver.xml">QSslServer</db:link>. This simplifies creation of a server which solely communicates over TLS.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link> now has loadBackendByFeatures(Features) and loadBackendByName(<db:link xlink:href="qstringview.xml">QStringView</db:link>), meant to eventually replace the corresponding overloaded load(Features/<db:link xlink:href="qstringview.xml">QStringView</db:link>) functions which are now marked as deprecated.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-test-module">
<db:title>Qt Test Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>QTestEventLoop::enterLoopMSecs() now uses a PreciseTimer if the timeout is less than a second.</db:para>
</db:listitem>
<db:listitem>
<db:para>Custom QTest::compare() implementations should now revise any calls to QTest::compare_helper() to use one of the two new overloads instead of the old one, which is now deprecated (so as to only generate the strings to represent values in a failure report if the check actually does fail).</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qabstractitemmodeltester.xml#setUseFetchMore">QAbstractItemModelTester::setUseFetchMore</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>New macros QCOMPARE_{EQ,NE,GT,GE,LT,LE}() support comparisons with reporting similar to that of <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>(). The EQ one does exact comparisons, without <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>()'s customizations. These also come with the usual QTRY_COMPARE_*() and QTRY_COMPARE_*_WITH_TIMEOUT() variants.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-qml-module">
<db:title>Qt QML Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>QML Language</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>You can register custom value types with names now. That is, the argument to <db:link xlink:href="qqmlengine.xml#QML_VALUE_TYPE">QML_VALUE_TYPE</db:link> is no longer ignored. It must be lower case. Once registered, you can declare properties of your own value types in QML.</db:para>
</db:listitem>
<db:listitem>
<db:para>You can store any named value type in a list in QML now. For example list&lt;rect&gt; in QML is like a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qrectf.xml">QRectF</db:link>&gt; in C++. This removes the need to use var for such properties or wrap their elements into objects.</db:para>
</db:listitem>
<db:listitem>
<db:para>The new pragma ComponentBehavior lets you specify whether components defined in a QML file can be used outside of their creation context. If not (pragma ComponentBehavior: Bound), then Qt Quick Compiler can optimize your code better.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>QML Type Compiler (qmltc)</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Expanded QML language coverage</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>QML Script Compiler (qmlsc, qmlcachegen)</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Various operations on lists of value types are now compiled to C++.</db:para>
</db:listitem>
<db:listitem>
<db:para>Dead code and dead stores are optimized out more aggressively now.</db:para>
</db:listitem>
<db:listitem>
<db:para>Type conversions now happen at the place where a value is written, not at the place where it's read. If the value is read multiple times, this is faster.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>QML Linter (qmllint)</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Added new warnings regarding proper use of <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> and <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>QML Language Server (qmlls)</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Added completions support</db:para>
</db:listitem>
<db:listitem>
<db:para>Added code action fixing for some linter warnings/hints</db:para>
</db:listitem>
<db:listitem>
<db:para>Moved executable to libexec</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Cleaned up CMake API:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt-target-compile-qml-to-cpp.xml">qt_target_compile_qml_to_cpp()</db:link> used to invoke the QML type compiler is deprecated. Its functionality has been integrated into <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module()</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-3d-module">
<db:title>Qt Quick 3D Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added a preview of lightmap baking support. This provides a static global illumination solution with lightmaps pre-generated using raytracing. See <db:link xlink:href="quick3d-lightmap.xml">Lightmaps and Global Illumination</db:link> for details.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qml-qtquick3d-specularglossymaterial.xml">SpecularGlossyMaterial</db:link> to enable using the specular/glossiness workflow instead of metalness/roughness.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added the <db:link xlink:href="qml-qtquick3d-particles3d-lineparticle3d.xml">LineParticle3D</db:link> type that allows creating line shaped sprite particles.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added the <db:link xlink:href="qml-qtquick3d-model.xml#castsReflections-prop">Model.castsReflection</db:link> property to control if a model is rendered by reflection probes and if it can be seen in reflections. The same property is also introduced for <db:link xlink:href="qml-qtquick3d-particles3d-spriteparticle3d.xml">sprite particles</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added the <db:link xlink:href="qml-qtquick3d-reflectionprobe.xml#boxOffset-prop">ReflectionProbe.boxOffset</db:link> property to move the box relative to the position of the probe without affecting the position of the capture point.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added the <db:link xlink:href="qml-qtquick3d-reflectionprobe.xml#debugView-prop">ReflectionProbe.debugView</db:link> property to display a cube visualizing the probe box.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qml-qtquick3d-helpers-heightfieldgeometry.xml">HeightFieldGeometry</db:link> to enable creating a height-field geometry from an image file.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qml-qtquick3d-cubemaptexture.xml">CubeMapTexture</db:link> to enable custom materials and post-processing effects to work with cube map textures in the shaders. The input is either a .ktx container with image data for all 6 faces, or 6 individual image files.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added support for rendering a skybox from a cubemap instead of the light probe. This can be requested by setting the background mode <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#backgroundMode-prop">SceneEnvironment.SkyBoxCubeMap</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qml-qtquick3d-helpers-proceduralskytexturedata.xml">ProceduralSkyTextureData</db:link> to procedurally generate a HDR light probe or sky box texture.</db:para>
</db:listitem>
<db:listitem>
<db:para>Improved shadow rendering for point and spot lights.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added the <db:link xlink:href="qml-qtquick3d-view3d.xml#renderFormat-prop">renderFormat</db:link> property to <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> to allow specifying the backing texture format when the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> is using its (default) Offscreen render mode. The available values are the same as with <db:link xlink:href="qml-qtquick-shadereffectsource.xml#format-prop">ShaderEffectSource.format</db:link> (which itself is also revised in 6.4). This enables using floating point textures instead of the default RGBA8.</db:para>
</db:listitem>
<db:listitem>
<db:para>Support for importing UIP files was removed. The mapping from old Qt 3D Studio features to Qt Quick 3D was problematic in previous releases already. Therefore, Qt 6.4 removes support for .uip files from the balsam tool.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-connectivity-module">
<db:title>Qt Connectivity Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qndefmessage.xml">QNdefMessage</db:link> is no longer exported. This class inherits <db:link xlink:href="qlist.xml">QList</db:link> publicly, but <db:link xlink:href="qlist.xml">QList</db:link> isn't designed to be inherited by an exported class.</db:para>
<db:warning>
<db:para>This is not backward compatible, but this will prevent future BC breaks going forward.</db:para>
</db:warning>
</db:listitem>
<db:listitem>
<db:para>In Qt Bluetooth various error enums are extended with new error codes that represent a missing permissions error. Currently these codes are used on Android and macOS/iOS. See <db:link xlink:href="qbluetoothlocaldevice.xml#Error-enum">QBluetoothLocalDevice::MissingPermissionsError</db:link> as an example.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-webengine-module">
<db:title>Qt WebEngine Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>HTML5 file-system access API added, controlled by <db:link xlink:href="qwebenginefilesystemaccessrequest.xml">QWebEngineFileSystemAccessRequest</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwebengineloadinginfo.xml">QWebEngineLoadingInfo</db:link> improved error codes, in particular for HTTP errors</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwebengineview.xml#setPage">QWebEngineView::setPage</db:link>() now works on pages already loaded</db:para>
</db:listitem>
<db:listitem>
<db:para>QWebEngineSettings::NavigateOnDrop added to allow disabling navigation on drag-an-drop of URLs</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwebengineurlrequestinfo.xml#ResourceType-enum">QWebEngineUrlRequestInfo::ResourceTypeWebSocket</db:link> added to allow interception of websocket connections</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="platform-changes">
<db:title>Platform Changes</db:title>
<db:section xml:id="webassembly">
<db:title>WebAssembly</db:title>
<db:para>Qt is now fully supported on the WebAssembly platform. See the platform documentation at <db:link xlink:href="wasm.xml">Qt for WebAssembly</db:link> for details.</db:para>
</db:section>
<db:section xml:id="mobile-platforms">
<db:title>Mobile Platforms</db:title>
<db:section xml:id="android">
<db:title>Android</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Updated Gradle to 7.4.2 and Android Gradle Plugin to 7.2.1.</db:para>
</db:listitem>
<db:listitem>
<db:para>Updated NDK to r23b (23.1.7779620).</db:para>
</db:listitem>
<db:listitem>
<db:para>Added CMake variables <db:link xlink:href="cmake-variable-qt-android-sign-apk.xml">QT_ANDROID_SIGN_APK</db:link> and <db:link xlink:href="cmake-variable-qt-android-sign-aab.xml">QT_ANDROID_SIGN_AAB</db:link> to build signed packages directly from CMake.</db:para>
</db:listitem>
<db:listitem>
<db:para>Android Accessibility is now aware of scroll events.</db:para>
</db:listitem>
<db:listitem>
<db:para>Improved assets loading speed for Android apps.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="embedded-platforms">
<db:title>Embedded Platforms</db:title>
<db:section xml:id="boot-to-qt">
<db:title>Boot to Qt</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Boot to Qt stack was updated to use Yocto 4.0.3 (kirkstone).</db:para>
</db:listitem>
<db:listitem>
<db:para>NXP i.MX8M Plus LPDDR4 EVK added as a new reference device.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qnx">
<db:title>QNX</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added support for <db:link xlink:href="qtmultimedia-index.xml">Qt Multimedia</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="webos">
<db:title>WebOS</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Qt 6.4 has been verified to work with LG webOS OSE 2.18.0 (<db:link xlink:href="webos.xml">Qt for webOS</db:link>).</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:section>
<db:section xml:id="list-of-api-changes">
<db:title>List of API Changes</db:title>
<db:para>These pages contain an overview of API changes in Qt 6.4:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="newclasses64.xml">New Classes and Functions in Qt 6.4</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="obsoleteclasses.xml">Obsolete Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
