<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides access to and enables adopting OpenGL texture objects.</db:para>
<db:para>This struct was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSGTexture</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSGOpenGLTexture is part of <db:simplelist><db:member>native-interfaces</db:member><db:member>native-interfaces-qsgtexture</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="fromNative">
<db:title>[static, since 6.0] QSGTexture *QSGOpenGLTexture::fromNative(GLuint <db:emphasis>textureId</db:emphasis>, QQuickWindow *<db:emphasis>window</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>, QQuickWindow::CreateTextureOptions <db:emphasis>options</db:emphasis> = {})</db:title>
<db:para>Creates a new <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> wrapping an existing OpenGL texture object for <db:code role="parameter">window</db:code>.</db:para>
<db:para>The native object specified in <db:code role="parameter">textureId</db:code> is wrapped, but not owned, by the resulting <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link>. The caller of the function is responsible for deleting the returned <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link>, but that will not destroy the underlying native object.</db:para>
<db:para>This function is currently suitable for 2D RGBA textures only.</db:para>
<db:warning>
<db:para>This function will return null if the scenegraph has not yet been initialized.</db:para>
</db:warning>
<db:para>Use <db:code role="parameter">options</db:code> to customize the texture attributes. Only the TextureHasAlphaChannel and TextureHasMipmaps are taken into account here.</db:para>
<db:para><db:code role="parameter">size</db:code> specifies the size in pixels.</db:para>
<db:note>
<db:para>This function must be called on the scenegraph rendering thread.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#sceneGraphInitialized">QQuickWindow::sceneGraphInitialized</db:link>()</db:member>
<db:member><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:member>
<db:member><db:link xlink:href="qtquick-scenegraph-metaltextureimport-example.xml">Scene Graph - Metal Texture Import</db:link></db:member>
<db:member><db:link xlink:href="qtquick-scenegraph-vulkantextureimport-example.xml">Scene Graph - Vulkan Texture Import</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromNativeExternalOES">
<db:title>[static, since 6.1] QSGTexture *QSGOpenGLTexture::fromNativeExternalOES(GLuint <db:emphasis>textureId</db:emphasis>, QQuickWindow *<db:emphasis>window</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>, QQuickWindow::CreateTextureOptions <db:emphasis>options</db:emphasis> = {})</db:title>
<db:para>Creates a new <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> wrapping an existing OpenGL ES texture object for <db:code role="parameter">window</db:code>.</db:para>
<db:para>The native object specified in <db:code role="parameter">textureId</db:code> is wrapped, but not owned, by the resulting <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link>. The caller of the function is responsible for deleting the returned <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link>, but that will not destroy the underlying native object.</db:para>
<db:para>This function is suitable only for textures that are meant to be used with the <db:code>GL_TEXTURE_EXTERNAL_OES</db:code> target: usually textures to which another device (such as a camera) writes data.</db:para>
<db:warning>
<db:para>This function will return null if the scenegraph has not yet been initialized.</db:para>
</db:warning>
<db:para>Use <db:code role="parameter">options</db:code> to customize the texture attributes. Only the TextureHasAlphaChannel and TextureHasMipmaps are taken into account here.</db:para>
<db:para><db:code role="parameter">size</db:code> specifies the size in pixels.</db:para>
<db:note>
<db:para>This function must be called on the scenegraph rendering thread.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnativeinterface-qsgopengltexture.xml#fromNative">fromNative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nativeTexture">
<db:title>[pure virtual] GLuint QSGOpenGLTexture::nativeTexture() const</db:title>
<db:para>Returns the OpenGL texture ID.</db:para>
</db:section>
</db:section>
</db:article>
