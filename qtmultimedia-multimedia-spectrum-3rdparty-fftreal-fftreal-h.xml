<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Spectrum Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Analyzing a raw audio stream using the FFTReal library.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/*****************************************************************************

        FFTReal.h
        Copyright (c) 2005 Laurent de Soras

--- Legal stuff ---

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*Tab=3***********************************************************************/

#if ! defined (FFTReal_HEADER_INCLUDED)
#define FFTReal_HEADER_INCLUDED

#if defined (_MSC_VER)
        #pragma once
        #pragma warning (4 : 4250) // &quot;Inherits via dominance.&quot;
#endif

/*\\\ INCLUDE FILES \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

#include        &quot;def.h&quot;
#include        &quot;DynArray.h&quot;
#include        &quot;OscSinCos.h&quot;

template &amp;lt;class DT&amp;gt;
class FFTReal
{

/*\\\ PUBLIC \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

public:

        enum {                  MAX_BIT_DEPTH   = 30    };      // So length can be represented as long int

        typedef DT      DataType;

        explicit                        FFTReal (long length);
        virtual                 ~FFTReal () {}

        long                            get_length () const;
        void                            do_fft (DataType f [], const DataType x []) const;
        void                            do_ifft (const DataType f [], DataType x []) const;
        void                            rescale (DataType x []) const;
        DataType *              use_buffer () const;

/*\\\ PROTECTED \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

protected:

/*\\\ PRIVATE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

private:

   // Over this bit depth, we use direct calculation for sin/cos
   enum {             TRIGO_BD_LIMIT    = 12  };

        typedef OscSinCos &amp;lt;DataType&amp;gt;    OscType;

        void                            init_br_lut ();
        void                            init_trigo_lut ();
        void                            init_trigo_osc ();

        FORCEINLINE const long *
                                                get_br_ptr () const;
        FORCEINLINE const DataType      *
                                                get_trigo_ptr (int level) const;
        FORCEINLINE long
                                                get_trigo_level_index (int level) const;

        inline void             compute_fft_general (DataType f [], const DataType x []) const;
        inline void             compute_direct_pass_1_2 (DataType df [], const DataType x []) const;
        inline void             compute_direct_pass_3 (DataType df [], const DataType sf []) const;
        inline void             compute_direct_pass_n (DataType df [], const DataType sf [], int pass) const;
        inline void             compute_direct_pass_n_lut (DataType df [], const DataType sf [], int pass) const;
        inline void             compute_direct_pass_n_osc (DataType df [], const DataType sf [], int pass) const;

        inline void             compute_ifft_general (const DataType f [], DataType x []) const;
        inline void             compute_inverse_pass_n (DataType df [], const DataType sf [], int pass) const;
        inline void             compute_inverse_pass_n_osc (DataType df [], const DataType sf [], int pass) const;
        inline void             compute_inverse_pass_n_lut (DataType df [], const DataType sf [], int pass) const;
        inline void             compute_inverse_pass_3 (DataType df [], const DataType sf []) const;
        inline void             compute_inverse_pass_1_2 (DataType x [], const DataType sf []) const;

        const long              _length;
        const int               _nbr_bits;
        DynArray &amp;lt;long&amp;gt;
                                                _br_lut;
        DynArray &amp;lt;DataType&amp;gt;
                                                _trigo_lut;
        mutable DynArray &amp;lt;DataType&amp;gt;
                                                _buffer;
   mutable DynArray &amp;lt;OscType&amp;gt;
                                                _trigo_osc;

/*\\\ FORBIDDEN MEMBER FUNCTIONS \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

private:

                                                FFTReal ();
                                                FFTReal (const FFTReal &amp;amp;other);
        FFTReal &amp;amp;               operator = (const FFTReal &amp;amp;other);
        bool                            operator == (const FFTReal &amp;amp;other);
        bool                            operator != (const FFTReal &amp;amp;other);

};      // class FFTReal

#include        &quot;FFTReal.hpp&quot;

#endif  // FFTReal_HEADER_INCLUDED

/*\\\ EOF \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

</db:programlisting>
</db:article>
