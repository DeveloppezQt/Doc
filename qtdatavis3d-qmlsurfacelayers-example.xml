<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 2 Surface Multiseries Example</db:title>
<db:productname>QtDataVis3D</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using multiple series with <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> in a QML application.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Quick 2 surface example shows how to make a 3D surface plot displaying 3 layers using <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> with Qt Quick 2.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlsurfacelayers-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The focus in this example is on generating a multiseries surface plot from 3 different height map images, so in this section we skip explaining the application creation. For a more detailed QML example documentation, see <db:link xlink:href="qtdatavis3d-qmlscatter-example.xml">Qt Quick 2 Scatter Example</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="adding-data-to-the-graph">
<db:title>Adding Data to the Graph</db:title>
<db:para>This example shows how to add several surface series to one graph using using HeightMapSurfaceDataProxies and how to control their visibilities individually.</db:para>
<db:para>Let's start by creating a specific gradient for each layer:</db:para>
<db:programlisting language="qml">ColorGradient {
    id: layerOneGradient
    ColorGradientStop { position: 0.0; color: &quot;black&quot; }
    ColorGradientStop { position: 0.31; color: &quot;tan&quot; }
    ColorGradientStop { position: 0.32; color: &quot;green&quot; }
    ColorGradientStop { position: 0.40; color: &quot;darkslategray&quot; }
    ColorGradientStop { position: 1.0; color: &quot;white&quot; }
}

ColorGradient {
    id: layerTwoGradient
    ColorGradientStop { position: 0.315; color: &quot;blue&quot; }
    ColorGradientStop { position: 0.33; color: &quot;white&quot; }
}

ColorGradient {
    id: layerThreeGradient
    ColorGradientStop { position: 0.0; color: &quot;red&quot; }
    ColorGradientStop { position: 0.15; color: &quot;black&quot; }
}
</db:programlisting>
<db:para>Then we'll create the series themselves. It happens simply by adding 3 separate <db:link xlink:href="qml-qtdatavisualization-surface3dseries.xml">Surface3DSeries</db:link> to the <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> graph as children:</db:para>
<db:programlisting language="cpp">...
Surface3DSeries {
    id: layerOneSeries
    baseGradient: layerOneGradient
    HeightMapSurfaceDataProxy {
        heightMapFile: &quot;:/heightmaps/layer_1.png&quot;
    }
    flatShadingEnabled: false
    drawMode: Surface3DSeries.DrawSurface
    visible: layerOneToggle.checked // bind to checkbox state
}

Surface3DSeries {
    id: layerTwoSeries
    baseGradient: layerTwoGradient
    HeightMapSurfaceDataProxy {
        heightMapFile: &quot;:/heightmaps/layer_2.png&quot;
    }
    flatShadingEnabled: false
    drawMode: Surface3DSeries.DrawSurface
    visible: layerTwoToggle.checked // bind to checkbox state
}

Surface3DSeries {
    id: layerThreeSeries
    baseGradient: layerThreeGradient
    HeightMapSurfaceDataProxy {
        heightMapFile: &quot;:/heightmaps/layer_3.png&quot;
    }
    flatShadingEnabled: false
    drawMode: Surface3DSeries.DrawSurface
    visible: layerThreeToggle.checked // bind to checkbox state
}
...
</db:programlisting>
<db:para>You'll notice we added the created gradients to the <db:code>baseGradient</db:code> properties of the series. We could have added them to the <db:code>baseGradients</db:code> property of the <db:link xlink:href="qml-qtdatavisualization-theme3d.xml">Theme3D</db:link> in <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> instead, but doing it this way ensures each gradient is applied to a correct series:</db:para>
<db:programlisting language="qml">Surface3DSeries {
    id: layerOneSeries
    baseGradient: layerOneGradient
    ...
</db:programlisting>
</db:section>
<db:section xml:id="controlling-the-graph">
<db:title>Controlling the Graph</db:title>
<db:para>Let's add some checkboxes to control the visibility of layers:</db:para>
<db:programlisting language="qml">GroupBox {
    Layout.fillWidth: true
    Column {
        spacing: 10

        Label {
            font.pointSize: fontSize
            font.bold: true
            text: portraitMode ? &quot;Layer\nSelection&quot; : &quot;Layer Selection&quot;
        }

        CheckBox {
            id: layerOneToggle
            checked: true
            text: portraitMode ? &quot;Show\nGround\nLayer&quot; : &quot;Show Ground Layer&quot;
        }

        CheckBox {
            id: layerTwoToggle
            checked: true
            text: portraitMode ? &quot;Show\nSea\nLayer&quot; : &quot;Show Sea Layer&quot;
        }

        CheckBox {
            id: layerThreeToggle
            checked: true
            text: portraitMode ? &quot;Show\nTectonic\nLayer&quot; : &quot;Show Tectonic Layer&quot;
        }
    }
}
</db:programlisting>
<db:para>We don't need to do anything on the <db:code>onCheckedChanged</db:code> as we bound the <db:code>checked</db:code> state to the <db:code>visible</db:code> property of the series directly:</db:para>
<db:programlisting language="cpp">...
visible: layerOneToggle.checked // bind to checkbox state
...
</db:programlisting>
<db:para>Let's add some more checkboxes to control how the layers are displayed, when visible:</db:para>
<db:programlisting language="qml">GroupBox {
    Layout.fillWidth: true
    Column {
        spacing: 10

        Label {
            font.pointSize: fontSize
            font.bold: true
            text: portraitMode ? &quot;Layer\nStyle&quot; : &quot;Layer Style&quot;
        }

        CheckBox {
            id: layerOneGrid
            text: portraitMode ? &quot;Show\nGround\nas Grid&quot; : &quot;Show Ground as Grid&quot;
            onCheckedChanged: {
                if (checked)
                    layerOneSeries.drawMode = Surface3DSeries.DrawWireframe
                else
                    layerOneSeries.drawMode = Surface3DSeries.DrawSurface
            }
        }

        CheckBox {
            id: layerTwoGrid
            text: portraitMode ? &quot;Show\nSea\nas Grid&quot; : &quot;Show Sea as Grid&quot;

            onCheckedChanged: {
                if (checked)
                    layerTwoSeries.drawMode = Surface3DSeries.DrawWireframe
                else
                    layerTwoSeries.drawMode = Surface3DSeries.DrawSurface
            }
        }

        CheckBox {
            id: layerThreeGrid
            text: portraitMode ? &quot;Show\nTectonic\nas Grid&quot; : &quot;Show Tectonic as Grid&quot;
            onCheckedChanged: {
                if (checked)
                    layerThreeSeries.drawMode = Surface3DSeries.DrawWireframe
                else
                    layerThreeSeries.drawMode = Surface3DSeries.DrawSurface
            }
        }
    }
}
</db:programlisting>
<db:para>In addition to these we have three buttons, one of which is of special interest to us. It is used to control whether we want to slice into only one layer, or all of them:</db:para>
<db:programlisting language="qml">Button {
    id: sliceButton
    text: portraitMode ? &quot;Slice\nAll\nLayers&quot; : &quot;Slice All Layers&quot;
    Layout.fillWidth: true
    Layout.minimumHeight: 40
    onClicked: {
        if (surfaceLayers.selectionMode &amp;amp; AbstractGraph3D.SelectionMultiSeries) {
            surfaceLayers.selectionMode = AbstractGraph3D.SelectionRow
                    | AbstractGraph3D.SelectionSlice
            text = portraitMode ? &quot;Slice\nAll\nLayers&quot; : &quot;Slice All Layers&quot;
        } else {
            surfaceLayers.selectionMode = AbstractGraph3D.SelectionRow
                    | AbstractGraph3D.SelectionSlice
                    | AbstractGraph3D.SelectionMultiSeries
            text = portraitMode ? &quot;Slice\nOne\nLayer&quot; : &quot;Slice One Layer&quot;
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="example-contents">
<db:title>Example Contents</db:title>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdatavis3d.git/tree/examples/datavisualization/qmlsurfacelayers?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:section>
</db:article>
