<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Building with CMake</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="cmake-manual"/>
<db:para><db:code>CMake</db:code> is a tool that helps simplify the build process for development projects across different platforms. <db:code>CMake</db:code> automates the generation of buildsystems such as Makefiles and Visual Studio project files.</db:para>
<db:para><db:code>CMake</db:code> is a 3rd party tool with its own <db:link xlink:href="http://www.cmake.org/cmake/help/documentation.html">documentation</db:link>. The rest of this topic details the specifics of how to use Qt 5 with <db:code>CMake</db:code>. The minimum version required to use Qt5 is <db:code>CMake</db:code> 3.1.0.</db:para>
<db:section xml:id="getting-started">
<db:title>Getting Started</db:title>
<db:para>The first requirement when using <db:code>CMake</db:code> is to use <db:code>find_package</db:code> to locate the libraries and header files shipped with Qt. These libraries and header files can then be used to build libraries and applications based on Qt.</db:para>
<db:para>The recommended way to use Qt libraries and headers with <db:code>CMake</db:code> is to use the <db:code>target_link_libraries</db:code> command. This command automatically adds appropriate include directories, compile definitions, the position-independent-code flag, and links to the qtmain.lib library on Windows.</db:para>
<db:para>To build a helloworld GUI executable, typical usage would be:</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.1.0)

project(helloworld)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

if(CMAKE_VERSION VERSION_LESS &quot;3.7.0&quot;)
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
endif()

find_package(Qt5 COMPONENTS Widgets REQUIRED)

add_executable(helloworld
    mainwindow.ui
    mainwindow.cpp
    main.cpp
    resources.qrc
)

target_link_libraries(helloworld Qt5::Widgets)
</db:programlisting>
<db:para>In order for <db:code>find_package</db:code> to be successful, Qt 5 must be found below the CMAKE_PREFIX_PATH, or the <db:code>Qt5_DIR</db:code> must be set in the <db:code>CMake</db:code> cache to the location of the <db:code>Qt5Config.cmake</db:code> file. The easiest way to use <db:code>CMake</db:code> is to set the CMAKE_PREFIX_PATH environment variable to the install prefix of Qt 5.</db:para>
<db:para>The CMAKE_AUTOMOC setting runs moc automatically when required. For more on this feature see the <db:link xlink:href="https://cmake.org/cmake/help/latest/manual/cmake-qt.7.html#automoc">CMake AUTOMOC documentation</db:link></db:para>
<db:section xml:id="imported-targets">
<db:title>Imported targets</db:title>
<db:para>Imported targets are created for each Qt module. Imported target names should be preferred instead of using a variable like Qt5&lt;Module&gt;_LIBRARIES in CMake commands such as <db:code>target_link_libraries</db:code>. The actual path to the library can be obtained using the <db:link xlink:href="https://cmake.org/cmake/help/latest/prop_tgt/LOCATION.html">LOCATION property</db:link>:</db:para>
<db:programlisting language="cpp">find_package(Qt5 COMPONENTS Core REQUIRED)

get_target_property(QtCore_location Qt5::Core LOCATION)
</db:programlisting>
<db:para>Note however that it is rare to require the full location to the library in <db:code>CMake</db:code> code. Most <db:code>CMake</db:code> APIs are aware of imported targets and can automatically use them instead of the full path.</db:para>
<db:para>Each module in Qt 5 has a library target with the naming convention Qt5::&lt;Module&gt; which can be used for this purpose.</db:para>
<db:para>Imported targets are created with the configurations Qt was configured with. That is, if Qt was configured with the -debug switch, an imported target with the configuration DEBUG will be created. If Qt was configured with the -release switch an imported target with the configuration RELEASE will be created. If Qt was configured with the -debug-and-release switch (the default on windows), then imported targets will be created with both RELEASE and DEBUG configurations.</db:para>
<db:para>If your project has custom CMake build configurations, it may be necessary to set a mapping from your custom configuration to either the debug or release Qt configuration.</db:para>
<db:programlisting language="cpp">find_package(Qt5 COMPONENTS Core REQUIRED)

set(CMAKE_CXX_FLAGS_COVERAGE &quot;${CMAKE_CXX_FLAGS_RELEASE} -fprofile-arcs -ftest-coverage&quot;)

# set up a mapping so that the Release configuration for the Qt imported target is
# used in the COVERAGE CMake configuration.
set_target_properties(Qt5::Core PROPERTIES MAP_IMPORTED_CONFIG_COVERAGE &quot;RELEASE&quot;)
</db:programlisting>
<db:para>Plugins are also available as <db:code>IMPORTED</db:code> targets in CMake. The <db:link xlink:href="qtnetwork-index.xml">Qt Network</db:link>, <db:link xlink:href="qtsql-index.xml">Qt SQL</db:link>, <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link>, and <db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link> modules have plugins associated. They provide a list of plugins in the <db:code>Qt5</db:code><db:emphasis>&lt;Module&gt;</db:emphasis><db:code>_PLUGINS</db:code> variable.</db:para>
<db:programlisting language="cpp">foreach(plugin ${Qt5Network_PLUGINS})
  get_target_property(_loc ${plugin} LOCATION)
  message(&quot;Plugin ${plugin} is at location ${_loc}&quot;)
endforeach()
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="variable-reference">
<db:title>Variable Reference</db:title>
<db:section xml:id="module-variables">
<db:title>Module variables</db:title>
<db:para>The result of a <db:code>find_package</db:code> call is that imported targets will be created for use with <db:code>target_link_libraries</db:code>, some variables will be populated with information required to configure the build, and macros will be made available for use. The name of the imported target for each module matches the name of the module with a prefix of 'Qt5::', for example Qt5::Widgets. All of the package-specific variables have a consistent name with a prefix of the name of the package. For example, <db:code>find_package(Qt5 COMPONENTS Widgets)</db:code> will make the following variables available if successfully found:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt5Widgets_VERSION String describing the version of the module.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt5Widgets_LIBRARIES List of libraries for use with the target_link_libraries command.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt5Widgets_INCLUDE_DIRS List of directories for use with the include_directories command.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt5Widgets_DEFINITIONS List of definitions for use with add_definitions.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt5Widgets_COMPILE_DEFINITIONS List of definitions for use with the COMPILE_DEFINITIONS target property.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt5Widgets_FOUND Boolean describing whether the module was found successfully.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt5Widgets_EXECUTABLE_COMPILE_FLAGS String of flags to be used when building executables.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Equivalents of those variables will be available for all packages found with a <db:code>find_package</db:code> call. Note that the variables are case-sensitive.</db:para>
</db:section>
<db:section xml:id="installation-variables">
<db:title>Installation variables</db:title>
<db:para>Additionally, several other variables are available which do not relate to a particular package, but to the Qt installation itself.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QT_VISIBILITY_AVAILABLE Boolean describing whether Qt was built with hidden visibility.</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_LIBINFIX String containing the infix used in library names.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="command-reference">
<db:title>Command Reference</db:title>
<db:section xml:id="qt5-core">
<db:title>Qt5::Core</db:title>
<db:variablelist role="cmake-macros-qtcore">
<db:varlistentry>
<db:term><db:link xlink:href="qtcore-cmake-qt5-add-big-resources.xml" xlink:role="page">qt5_add_big_resources</db:link></db:term>
<db:listitem>
<db:para>Compiles big binary resources into object code.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtcore-cmake-qt5-add-binary-resources.xml" xlink:role="page">qt5_add_binary_resources</db:link></db:term>
<db:listitem>
<db:para>Creates an RCC file from a list of Qt resource files.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtcore-cmake-qt5-add-resources.xml" xlink:role="page">qt5_add_resources</db:link></db:term>
<db:listitem>
<db:para>Compiles binary resources into source code.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtcore-cmake-qt5-generate-moc.xml" xlink:role="page">qt5_generate_moc</db:link></db:term>
<db:listitem>
<db:para>Calls moc on an input file.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtcore-cmake-qt5-wrap-cpp.xml" xlink:role="page">qt5_wrap_cpp</db:link></db:term>
<db:listitem>
<db:para>Creates &lt;@op&gt;.&lt;/@op&gt;moc files from sources.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt5-widgets">
<db:title>Qt5::Widgets</db:title>
<db:variablelist role="cmake-macros-qtwidgets">
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-cmake-qt5-wrap-ui.xml" xlink:role="page">qt5_wrap_ui</db:link></db:term>
<db:listitem>
<db:para>Creates sources for &lt;@op&gt;.&lt;/@op&gt;ui files.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt5-dbus">
<db:title>Qt5::DBus</db:title>
<db:variablelist role="cmake-commands-qtdbus">
<db:varlistentry>
<db:term><db:link xlink:href="qtdbus-cmake-qt5-add-dbus-adaptor.xml" xlink:role="page">qt5_add_dbus_adaptor</db:link></db:term>
<db:listitem>
<db:para>Generates an adaptor class for a D-Bus interface.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdbus-cmake-qt5-add-dbus-interface.xml" xlink:role="page">qt5_add_dbus_interface</db:link></db:term>
<db:listitem>
<db:para>Generates C++ sources implementing an interface for a D-Bus interface description file.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdbus-cmake-qt5-add-dbus-interfaces.xml" xlink:role="page">qt5_add_dbus_interfaces</db:link></db:term>
<db:listitem>
<db:para>Generates C++ sources implementing interfaces for D-Bus interface description files.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdbus-cmake-qt5-generate-dbus-interface.xml" xlink:role="page">qt5_generate_dbus_interface</db:link></db:term>
<db:listitem>
<db:para>Generates a D-Bus interface from a header file.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt5-linguisttools">
<db:title>Qt5::LinguistTools</db:title>
<db:variablelist role="cmake-macros-qtlinguisttools">
<db:varlistentry>
<db:term><db:link xlink:href="qtlinguist-cmake-qt5-add-translation.xml" xlink:role="page">qt5_add_translation</db:link></db:term>
<db:listitem>
<db:para>Compiles Qt Linguist .ts files into .qm files.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtlinguist-cmake-qt5-create-translation.xml" xlink:role="page">qt5_create_translation</db:link></db:term>
<db:listitem>
<db:para>Sets up the Qt Linguist translation toolchain.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
