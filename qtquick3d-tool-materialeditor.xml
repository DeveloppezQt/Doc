<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Custom Material Editor</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>GUI tool for creating custom materials.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="the-material-editor-tool">
<db:title>The Material Editor tool</db:title>
<db:para>The Material Editor tool is a GUI tool that makes authoring <db:link xlink:href="quick3d-pbr.xml#custommaterial">CustomMaterials</db:link> for <db:link xlink:href="qtquick3d-qmlmodule.xml">QtQuick3D</db:link> easier by providing: a real-time preview of the material, syntax highlighting, error reporting, and the ability to export the material to a <db:link xlink:href="quick3d-pbr.xml#custommaterial">CustomMaterial</db:link> QML component.</db:para>
<db:section xml:id="usage">
<db:title>Usage</db:title>
<db:para>The Material Editor can be launched by running the command:</db:para>
<db:programlisting language="cpp" role="bad">$(QTDIR)/bin/materialeditor[.exe]
</db:programlisting>
<db:para>The Material Editor window consists of two main components, the editor on the left and the preview on the right.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/MaterialEditor-main.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="shader-editing">
<db:title>Shader editing</db:title>
<db:para>In the editor view there are two editors, one for the vertex shader and one for the fragment shader. When editing the shader snippets the result of those changes will immediately become visible in the preview. If the material could not be assembled a message describing the problem will be visible in the output panel.</db:para>
<db:para>The language used for writing the <db:link xlink:href="quick3d-pbr.xml#custommaterial">CustomMaterial</db:link>'s shader snippets is Vulkan-style GLSL with some additional keywords that are specific for <db:link xlink:href="qtquick3d-qmlmodule.xml">QtQuick3D</db:link>, these are easily identifiable by being written in all upper-case characters. The <db:link xlink:href="qtquick3d-qmlmodule.xml">QtQuick3D</db:link> specific keywords will also be highlighted by the editor.</db:para>
<db:para>For a more detailed overview of the language used in shaders snippets and how they interact with the rest of the rendering pipeline, see the <db:link xlink:href="qtquick3d-custom.xml">Programmable Materials</db:link> documentation.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/MaterialEditor-vertex.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="material-properties">
<db:title>Material properties</db:title>
<db:para>The Material Properties section contains the common QML properties for the material. These properties and how they affect the material are described in more details in the <db:link xlink:href="quick3d-pbr.xml#custommaterial">CustomMaterial</db:link> documentation.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/MaterialEditor-properties.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="preview">
<db:title>Preview</db:title>
<db:para>In addition to showing how the current material is rendered, the preview panel contains a selection of controls that can be adjusted to see how the material looks under different conditions. These controls allows the user to: Select a different model, toggle the usage of <db:link xlink:href="quick3d-asset-conditioning-ibl.xml">Image Based Lighting</db:link>, turn the scene light <db:emphasis role="bold">on</db:emphasis> or <db:emphasis role="bold">off</db:emphasis>, and adjust the rotation of the environment. It's also possible to orbit around the model using the mouse.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/MaterialEditor-preview.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="uniforms">
<db:title>Uniforms</db:title>
<db:para>The uniform table is where the uniforms used by the shaders are listed. Uniforms can be added, removed or changed at any time, but all uniforms used by the shader snippets needs to be added to the uniform table. Once a uniform is added it will become accessible to both shaders. When exporting the material to a QML component the uniforms will become properties on the material component.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/MaterialEditor-uniforms.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="output-panel">
<db:title>Output panel</db:title>
<db:para>The output panel shows diagnostic messages, for example, errors found in the shader snippets.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/MaterialEditor-output.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="importing-shaders">
<db:title>Importing shaders</db:title>
<db:para>Shaders snippets can be imported into the application, these have the file extension <db:code>.vert</db:code> and <db:code>.frag</db:code> and are expected to contain plain-text. Imported shader snippets will of course need to be adapted, manually, if the shader code is not in a language or in a form that's compatible with the <db:link xlink:href="quick3d-pbr.xml#custommaterial">CustomMaterial</db:link> already (no translation is attempted by the tool.)</db:para>
</db:section>
<db:section xml:id="saving-and-loading-projects">
<db:title>Saving and loading projects.</db:title>
<db:para>The Material Editor can save or load project files using it's own project format. The extension of the Material Editor project files are <db:code>.qmp</db:code>.</db:para>
<db:note>
<db:para>The Material Editor's project file-format is not intended for runtime usage, it is only intended to be used with the Material Editor.</db:para>
</db:note>
</db:section>
<db:section xml:id="exporting">
<db:title>Exporting.</db:title>
<db:para>For the material to be usable from an application it needs to be exported as a QML Component, this can be done by opening the export dialog from the application menu. The export dialog will ask for an output folder, the name of the material component, and the name(s) of the shader snippets. When the material has been successfully exported the output folder will contain a QML Component describing the material together with any shader snippet and texture needed by the material.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/MaterialEditor-export.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
</db:section>
</db:article>
