<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Rogue Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Rogue example shows how to use the Qt state machine for event handling.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#ifndef MOVEMENTTRANSITION_H
#define MOVEMENTTRANSITION_H

#include &lt;QtWidgets&gt;

#include &quot;window.h&quot;

class MovementTransition : public QEventTransition
{
    Q_OBJECT

public:
    MovementTransition(Window *window) :
        QEventTransition(window, QEvent::KeyPress) {
        this-&gt;window = window;
    }

protected:
    bool eventTest(QEvent *event) {
        if (event-&gt;type() == QEvent::StateMachineWrapped &amp;&amp;
            static_cast&lt;QStateMachine::WrappedEvent *&gt;(event)-&gt;event()-&gt;type() == QEvent::KeyPress) {
            QEvent *wrappedEvent = static_cast&lt;QStateMachine::WrappedEvent *&gt;(event)-&gt;event();

            QKeyEvent *keyEvent = static_cast&lt;QKeyEvent *&gt;(wrappedEvent);
            int key = keyEvent-&gt;key();

            return key == Qt::Key_2 || key == Qt::Key_8 || key == Qt::Key_6 ||
                   key == Qt::Key_4 || key == Qt::Key_Down || key == Qt::Key_Up ||
                   key == Qt::Key_Right || key == Qt::Key_Left;
        }
        return false;
    }

    void onTransition(QEvent *event) {
        QKeyEvent *keyEvent = static_cast&lt;QKeyEvent *&gt;(
            static_cast&lt;QStateMachine::WrappedEvent *&gt;(event)-&gt;event());

        int key = keyEvent-&gt;key();
        switch (key) {
            case Qt::Key_Left:
            case Qt::Key_4:
                window-&gt;movePlayer(Window::Left);
                break;
            case Qt::Key_Up:
            case Qt::Key_8:
                window-&gt;movePlayer(Window::Up);
                break;
            case Qt::Key_Right:
            case Qt::Key_6:
                window-&gt;movePlayer(Window::Right);
                break;
            case Qt::Key_Down:
            case Qt::Key_2:
                window-&gt;movePlayer(Window::Down);
                break;
            default:
                ;
        }
    }

private:
    Window *window;
};

#endif

</db:programlisting>
</db:article>
