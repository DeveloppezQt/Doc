<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRhiScissor Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Specifies a scissor rectangle.</db:para>
<db:para>This class was introduced in Qt 6.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>rhi/qrhi.h</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::GuiPrivate)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui-private</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Used with <db:link xlink:href="qrhicommandbuffer.xml#setScissor">QRhiCommandBuffer::setScissor</db:link>(). Setting a scissor rectangle is only possible with a <db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link> that has <db:link xlink:href="qrhigraphicspipeline.xml#Flag-enum">QRhiGraphicsPipeline::UsesScissor</db:link> set.</db:para>
<db:para><db:link xlink:href="qrhi.xml">QRhi</db:link> assumes OpenGL-style scissor coordinates, meaning x and y are bottom-left. Negative width or height are not allowed. However, apart from that, the flexible OpenGL semantics apply: negative x and y, partially out of bounds rectangles, etc. will be handled gracefully, clamping as appropriate. Therefore, any rendering logic targeting OpenGL can feed scissor rectangles into <db:link xlink:href="qrhiscissor.xml">QRhiScissor</db:link> as-is, without any adaptation.</db:para>
<db:note>
<db:para>This is a RHI API with limited compatibility guarantees, see <db:link xlink:href="qrhi.xml">QRhi</db:link> for details.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrhicommandbuffer.xml#setScissor">QRhiCommandBuffer::setScissor</db:link>()</db:member>
<db:member><db:link xlink:href="qrhiviewport.xml">QRhiViewport</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRhiScissor">
<db:title>QRhiScissor::QRhiScissor(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>)</db:title>
<db:para>Constructs a scissor with the rectangle specified by <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, and <db:code role="parameter">h</db:code>.</db:para>
<db:note>
<db:para><db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> are assumed to be the bottom-left position. Negative <db:code role="parameter">w</db:code> or <db:code role="parameter">h</db:code> are not allowed, such scissor rectangles will be ignored by <db:link xlink:href="qrhicommandbuffer.xml">QRhiCommandBuffer</db:link>. Other than that, the flexible OpenGL semantics apply: negative x and y, partially out of bounds rectangles, etc. will be handled gracefully, clamping as appropriate.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
