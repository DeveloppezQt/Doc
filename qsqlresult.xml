<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSqlResult Class</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link> class provides an abstract interface for accessing data from specific SQL databases.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSqlResult</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Sql)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Sql)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sql</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSqlResult is part of <db:simplelist><db:member><db:link xlink:href="database.xml">Database Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Normally, you would use <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> instead of <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link>, since <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> provides a generic wrapper for database-specific implementations of <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link>.</db:para>
<db:para>If you are implementing your own SQL driver (by subclassing <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link>), you will need to provide your own <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link> subclass that implements all the pure virtual functions and other virtual functions that you need.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="BindingSyntax-enum">
<db:title>enum QSqlResult::BindingSyntax</db:title>
<db:para>This enum type specifies the different syntaxes for specifying placeholders in prepared queries.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlresult.xml">QSqlResult</db:link></db:emphasis>::PositionalBinding</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Use the ODBC-style positional syntax, with &quot;?&quot; as placeholders.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlresult.xml">QSqlResult</db:link></db:emphasis>::NamedBinding</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Use the Oracle-style syntax with named placeholders (e.g., &quot;:id&quot;)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#bindingSyntax">bindingSyntax</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSqlResult">
<db:title>[explicit protected] QSqlResult::QSqlResult(const QSqlDriver *<db:emphasis>db</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link> using database driver <db:code role="parameter">db</db:code>. The object is initialized to an inactive state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#driver">driver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QSqlResult">
<db:title>[virtual noexcept] QSqlResult::~QSqlResult()</db:title>
<db:para>Destroys the object and frees any allocated resources.</db:para>
</db:section>
<db:section xml:id="addBindValue">
<db:title>[protected] void QSqlResult::addBindValue(const QVariant &amp;<db:emphasis>val</db:emphasis>, QSql::ParamType <db:emphasis>paramType</db:emphasis>)</db:title>
<db:para>Binds the value <db:code role="parameter">val</db:code> of parameter type <db:code role="parameter">paramType</db:code> to the next available position in the current record (row).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#bindValue">bindValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="at">
<db:title>[protected] int QSqlResult::at() const</db:title>
<db:para>Returns the current (zero-based) row position of the result. May return the special values <db:link xlink:href="qsql.xml#Location-enum">QSql::BeforeFirstRow</db:link> or <db:link xlink:href="qsql.xml#Location-enum">QSql::AfterLastRow</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#setAt">setAt</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bindValue">
<db:title>[virtual protected] void QSqlResult::bindValue(int <db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>val</db:emphasis>, QSql::ParamType <db:emphasis>paramType</db:emphasis>)</db:title>
<db:para>Binds the value <db:code role="parameter">val</db:code> of parameter type <db:code role="parameter">paramType</db:code> to position <db:code role="parameter">index</db:code> in the current record (row).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#addBindValue">addBindValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bindValue-1">
<db:title>[virtual protected] void QSqlResult::bindValue(const QString &amp;<db:emphasis>placeholder</db:emphasis>, const QVariant &amp;<db:emphasis>val</db:emphasis>, QSql::ParamType <db:emphasis>paramType</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Binds the value <db:code role="parameter">val</db:code> of parameter type <db:code role="parameter">paramType</db:code> to the <db:code role="parameter">placeholder</db:code> name in the current record (row).</db:para>
<db:note>
<db:para>Binding an undefined placeholder will result in undefined behavior.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquery.xml#bindValue">QSqlQuery::bindValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bindValueType">
<db:title>[protected] QSql::ParamType QSqlResult::bindValueType(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the parameter type for the value bound at position <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#boundValue">boundValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bindValueType-1">
<db:title>[protected] QSql::ParamType QSqlResult::bindValueType(const QString &amp;<db:emphasis>placeholder</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the parameter type for the value bound with the given <db:code role="parameter">placeholder</db:code> name.</db:para>
</db:section>
<db:section xml:id="bindingSyntax">
<db:title>[protected] QSqlResult::BindingSyntax QSqlResult::bindingSyntax() const</db:title>
<db:para>Returns the binding syntax used by prepared queries.</db:para>
</db:section>
<db:section xml:id="boundValue">
<db:title>[protected] QVariant QSqlResult::boundValue(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the value bound at position <db:code role="parameter">index</db:code> in the current record (row).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#bindValue">bindValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#boundValues">boundValues</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundValue-1">
<db:title>[protected] QVariant QSqlResult::boundValue(const QString &amp;<db:emphasis>placeholder</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the value bound by the given <db:code role="parameter">placeholder</db:code> name in the current record (row).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#bindValueType">bindValueType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundValueCount">
<db:title>[protected] int QSqlResult::boundValueCount() const</db:title>
<db:para>Returns the number of bound values in the result.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#boundValues">boundValues</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundValueName">
<db:title>[protected] QString QSqlResult::boundValueName(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the name of the bound value at position <db:code role="parameter">index</db:code> in the current record (row).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#boundValue">boundValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#boundValueNames">boundValueNames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundValueNames">
<db:title>[protected] QStringList QSqlResult::boundValueNames() const</db:title>
<db:para>Returns the names of all bound values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#boundValue">boundValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#boundValueName">boundValueName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundValues">
<db:title>[protected] QVariantList QSqlResult::boundValues() const</db:title>
<db:para>Returns a list of the result's bound values for the current record (row).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#boundValueCount">boundValueCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundValues-1">
<db:title>[protected] QVariantList &amp;QSqlResult::boundValues()</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a mutable reference to the list of the result's bound values for the current record (row).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#boundValueCount">boundValueCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>[protected] void QSqlResult::clear()</db:title>
<db:para>Clears the entire result set and releases any associated resources.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[pure virtual protected] QVariant QSqlResult::data(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the data for field <db:code role="parameter">index</db:code> in the current row as a <db:link xlink:href="qvariant.xml">QVariant</db:link>. This function is only called if the result is in an active state and is positioned on a valid record and <db:code role="parameter">index</db:code> is non-negative. Derived classes must reimplement this function and return the value of field <db:code role="parameter">index</db:code>, or QVariant() if it cannot be determined.</db:para>
</db:section>
<db:section xml:id="driver">
<db:title>[protected] const QSqlDriver *QSqlResult::driver() const</db:title>
<db:para>Returns the driver associated with the result. This is the object that was passed to the constructor.</db:para>
</db:section>
<db:section xml:id="exec">
<db:title>[virtual protected] bool QSqlResult::exec()</db:title>
<db:para>Executes the query, returning true if successful; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#prepare">prepare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="executedQuery">
<db:title>[protected] QString QSqlResult::executedQuery() const</db:title>
<db:para>Returns the query that was actually executed. This may differ from the query that was passed, for example if bound values were used with a prepared query and the underlying database doesn't support prepared queries.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#exec">exec</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#setQuery">setQuery</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fetch">
<db:title>[pure virtual protected] bool QSqlResult::fetch(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Positions the result to an arbitrary (zero-based) row <db:code role="parameter">index</db:code>.</db:para>
<db:para>This function is only called if the result is in an active state. Derived classes must reimplement this function and position the result to the row <db:code role="parameter">index</db:code>, and call <db:link xlink:href="qsqlresult.xml#setAt">setAt</db:link>() with an appropriate value. Return true to indicate success, or false to signify failure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#fetchFirst">fetchFirst</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#fetchLast">fetchLast</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#fetchNext">fetchNext</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#fetchPrevious">fetchPrevious</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fetchFirst">
<db:title>[pure virtual protected] bool QSqlResult::fetchFirst()</db:title>
<db:para>Positions the result to the first record (row 0) in the result.</db:para>
<db:para>This function is only called if the result is in an active state. Derived classes must reimplement this function and position the result to the first record, and call <db:link xlink:href="qsqlresult.xml#setAt">setAt</db:link>() with an appropriate value. Return true to indicate success, or false to signify failure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#fetch">fetch</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#fetchLast">fetchLast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fetchLast">
<db:title>[pure virtual protected] bool QSqlResult::fetchLast()</db:title>
<db:para>Positions the result to the last record (last row) in the result.</db:para>
<db:para>This function is only called if the result is in an active state. Derived classes must reimplement this function and position the result to the last record, and call <db:link xlink:href="qsqlresult.xml#setAt">setAt</db:link>() with an appropriate value. Return true to indicate success, or false to signify failure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#fetch">fetch</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#fetchFirst">fetchFirst</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fetchNext">
<db:title>[virtual protected] bool QSqlResult::fetchNext()</db:title>
<db:para>Positions the result to the next available record (row) in the result.</db:para>
<db:para>This function is only called if the result is in an active state. The default implementation calls <db:link xlink:href="qsqlresult.xml#fetch">fetch</db:link>() with the next index. Derived classes can reimplement this function and position the result to the next record in some other way, and call <db:link xlink:href="qsqlresult.xml#setAt">setAt</db:link>() with an appropriate value. Return true to indicate success, or false to signify failure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#fetch">fetch</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#fetchPrevious">fetchPrevious</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fetchPrevious">
<db:title>[virtual protected] bool QSqlResult::fetchPrevious()</db:title>
<db:para>Positions the result to the previous record (row) in the result.</db:para>
<db:para>This function is only called if the result is in an active state. The default implementation calls <db:link xlink:href="qsqlresult.xml#fetch">fetch</db:link>() with the previous index. Derived classes can reimplement this function and position the result to the next record in some other way, and call <db:link xlink:href="qsqlresult.xml#setAt">setAt</db:link>() with an appropriate value. Return true to indicate success, or false to signify failure.</db:para>
</db:section>
<db:section xml:id="handle">
<db:title>[virtual] QVariant QSqlResult::handle() const</db:title>
<db:para>Returns the low-level database handle for this result set wrapped in a <db:link xlink:href="qvariant.xml">QVariant</db:link> or an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> if there is no handle.</db:para>
<db:warning>
<db:para>Use this with uttermost care and only if you know what you're doing.</db:para>
</db:warning>
<db:warning>
<db:para>The handle returned here can become a stale pointer if the result is modified (for example, if you clear it).</db:para>
</db:warning>
<db:warning>
<db:para>The handle can be NULL if the result was not executed yet.</db:para>
</db:warning>
<db:warning>
<db:para>PostgreSQL: in forward-only mode, the handle of <db:link xlink:href="qsqlresult.xml">QSqlResult</db:link> can change after calling <db:link xlink:href="qsqlresult.xml#fetch">fetch</db:link>(), <db:link xlink:href="qsqlresult.xml#fetchFirst">fetchFirst</db:link>(), <db:link xlink:href="qsqlresult.xml#fetchLast">fetchLast</db:link>(), <db:link xlink:href="qsqlresult.xml#fetchNext">fetchNext</db:link>(), <db:link xlink:href="qsqlresult.xml#fetchPrevious">fetchPrevious</db:link>(), nextResult().</db:para>
</db:warning>
<db:para>The handle returned here is database-dependent, you should query the type name of the variant before accessing it.</db:para>
<db:para>This example retrieves the handle for a sqlite result:</db:para>
<db:programlisting language="cpp">QSqlDatabase db = QSqlDatabase::database(&quot;sales&quot;);
QSqlQuery query(&quot;SELECT NAME, DOB FROM EMPLOYEES&quot;, db);

QVariant v = query.result()-&gt;handle();
if (v.isValid() &amp;&amp; qstrcmp(v.typeName(), &quot;sqlite3_stmt*&quot;) == 0) {
    // v.data() returns a pointer to the handle
    sqlite3_stmt *handle = *static_cast&lt;sqlite3_stmt **&gt;(v.data());
    if (handle) {
        // ...
    }
}
</db:programlisting>
<db:para>This snippet returns the handle for PostgreSQL or MySQL:</db:para>
<db:programlisting language="cpp">if (qstrcmp(v.typeName(), &quot;PGresult*&quot;) == 0) {
    PGresult *handle = *static_cast&lt;PGresult **&gt;(v.data());
    if (handle) {
        // ...
        }
}

if (qstrcmp(v.typeName(), &quot;MYSQL_STMT*&quot;) == 0) {
    MYSQL_STMT *handle = *static_cast&lt;MYSQL_STMT **&gt;(v.data());
    if (handle) {
        // ...
        }
    }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#handle">QSqlDriver::handle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasOutValues">
<db:title>[protected] bool QSqlResult::hasOutValues() const</db:title>
<db:para>Returns <db:code>true</db:code> if at least one of the query's bound values is a <db:code>QSql::Out</db:code> or a <db:link xlink:href="qsql.xml#ParamTypeFlag-enum">QSql::InOut</db:link>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#bindValueType">bindValueType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isActive">
<db:title>[protected] bool QSqlResult::isActive() const</db:title>
<db:para>Returns <db:code>true</db:code> if the result has records to be retrieved; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isForwardOnly">
<db:title>[protected] bool QSqlResult::isForwardOnly() const</db:title>
<db:para>Returns <db:code>true</db:code> if you can only scroll forward through the result set; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#setForwardOnly">setForwardOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>[pure virtual protected] bool QSqlResult::isNull(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the field at position <db:code role="parameter">index</db:code> in the current row is null; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isSelect">
<db:title>[protected] bool QSqlResult::isSelect() const</db:title>
<db:para>Returns <db:code>true</db:code> if the current result is from a <db:code>SELECT</db:code> statement; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#setSelect">setSelect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>[protected] bool QSqlResult::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if the result is positioned on a valid record (that is, the result is not positioned before the first or after the last record); otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#at">at</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastError">
<db:title>[protected] QSqlError QSqlResult::lastError() const</db:title>
<db:para>Returns the last error associated with the result.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#setLastError">setLastError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastInsertId">
<db:title>[virtual protected] QVariant QSqlResult::lastInsertId() const</db:title>
<db:para>Returns the object ID of the most recent inserted row if the database supports it. An invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> will be returned if the query did not insert any value or if the database does not report the id back. If more than one row was touched by the insert, the behavior is undefined.</db:para>
<db:para>Note that for Oracle databases the row's ROWID will be returned, while for MySQL databases the row's auto-increment field will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldriver.xml#hasFeature">QSqlDriver::hasFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastQuery">
<db:title>[protected] QString QSqlResult::lastQuery() const</db:title>
<db:para>Returns the current SQL query text, or an empty string if there isn't one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#setQuery">setQuery</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="numRowsAffected">
<db:title>[pure virtual protected] int QSqlResult::numRowsAffected()</db:title>
<db:para>Returns the number of rows affected by the last query executed, or -1 if it cannot be determined or if the query is a <db:code>SELECT</db:code> statement.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prepare">
<db:title>[virtual protected] bool QSqlResult::prepare(const QString &amp;<db:emphasis>query</db:emphasis>)</db:title>
<db:para>Prepares the given <db:code role="parameter">query</db:code> for execution; the query will normally use placeholders so that it can be executed repeatedly. Returns true if the query is prepared successfully; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#exec">exec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="record">
<db:title>[virtual protected] QSqlRecord QSqlResult::record() const</db:title>
<db:para>Returns the current record if the query is active; otherwise returns an empty <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link>.</db:para>
<db:para>The default implementation always returns an empty <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#isActive">isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>[pure virtual protected] bool QSqlResult::reset(const QString &amp;<db:emphasis>query</db:emphasis>)</db:title>
<db:para>Sets the result to use the SQL statement <db:code role="parameter">query</db:code> for subsequent data retrieval.</db:para>
<db:para>Derived classes must reimplement this function and apply the <db:code role="parameter">query</db:code> to the database. This function is only called after the result is set to an inactive state and is positioned before the first record of the new result. Derived classes should return true if the query was successful and ready to be used, or false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#setQuery">setQuery</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetBindCount">
<db:title>[protected] void QSqlResult::resetBindCount()</db:title>
<db:para>Resets the number of bind parameters.</db:para>
</db:section>
<db:section xml:id="savePrepare">
<db:title>[virtual protected] bool QSqlResult::savePrepare(const QString &amp;<db:emphasis>query</db:emphasis>)</db:title>
<db:para>Prepares the given <db:code role="parameter">query</db:code>, using the underlying database functionality where possible. Returns <db:code>true</db:code> if the query is prepared successfully; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Note: This method should have been called &quot;safePrepare()&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#prepare">prepare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setActive">
<db:title>[virtual protected] void QSqlResult::setActive(bool <db:emphasis>active</db:emphasis>)</db:title>
<db:para>This function is provided for derived classes to set the internal active state to <db:code role="parameter">active</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#isActive">isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAt">
<db:title>[virtual protected] void QSqlResult::setAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This function is provided for derived classes to set the internal (zero-based) row position to <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#at">at</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setForwardOnly">
<db:title>[virtual protected] void QSqlResult::setForwardOnly(bool <db:emphasis>forward</db:emphasis>)</db:title>
<db:para>Sets forward only mode to <db:code role="parameter">forward</db:code>. If <db:code role="parameter">forward</db:code> is true, only <db:link xlink:href="qsqlresult.xml#fetchNext">fetchNext</db:link>() is allowed for navigating the results. Forward only mode needs much less memory since results do not have to be cached. By default, this feature is disabled.</db:para>
<db:para>Setting forward only to false is a suggestion to the database engine, which has the final say on whether a result set is forward only or scrollable. <db:link xlink:href="qsqlresult.xml#isForwardOnly">isForwardOnly</db:link>() will always return the correct status of the result set.</db:para>
<db:note>
<db:para>Calling setForwardOnly after execution of the query will result in unexpected results at best, and crashes at worst.</db:para>
</db:note>
<db:note>
<db:para>To make sure the forward-only query completed successfully, the application should check <db:link xlink:href="qsqlresult.xml#lastError">lastError</db:link>() for an error not only after executing the query, but also after navigating the query results.</db:para>
</db:note>
<db:warning>
<db:para>PostgreSQL: While navigating the query results in forward-only mode, do not execute any other SQL command on the same database connection. This will cause the query results to be lost.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#isForwardOnly">isForwardOnly</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#fetchNext">fetchNext</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquery.xml#setForwardOnly">QSqlQuery::setForwardOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLastError">
<db:title>[virtual protected] void QSqlResult::setLastError(const QSqlError &amp;<db:emphasis>error</db:emphasis>)</db:title>
<db:para>This function is provided for derived classes to set the last error to <db:code role="parameter">error</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#lastError">lastError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQuery">
<db:title>[virtual protected] void QSqlResult::setQuery(const QString &amp;<db:emphasis>query</db:emphasis>)</db:title>
<db:para>Sets the current query for the result to <db:code role="parameter">query</db:code>. You must call <db:link xlink:href="qsqlresult.xml#reset">reset</db:link>() to execute the query on the database.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#reset">reset</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlresult.xml#lastQuery">lastQuery</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelect">
<db:title>[virtual protected] void QSqlResult::setSelect(bool <db:emphasis>select</db:emphasis>)</db:title>
<db:para>This function is provided for derived classes to indicate whether or not the current statement is a SQL <db:code>SELECT</db:code> statement. The <db:code role="parameter">select</db:code> parameter should be true if the statement is a <db:code>SELECT</db:code> statement; otherwise it should be false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#isSelect">isSelect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>[pure virtual protected] int QSqlResult::size()</db:title>
<db:para>Returns the size of the <db:code>SELECT</db:code> result, or -1 if it cannot be determined or if the query is not a <db:code>SELECT</db:code> statement.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlresult.xml#numRowsAffected">numRowsAffected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
