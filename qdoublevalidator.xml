<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDoubleValidator Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link> class provides range checking of floating-point numbers.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDoubleValidator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtquick-doublevalidator.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qvalidator.xml" xlink:role="class">QValidator</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link> provides an upper bound, a lower bound, and a limit on the number of digits after the decimal point.</db:para>
<db:para>You can set the acceptable range in one call with <db:link xlink:href="qdoublevalidator.xml#setRange">setRange</db:link>(), or with <db:link xlink:href="qdoublevalidator.xml#bottom-prop">setBottom</db:link>() and <db:link xlink:href="qdoublevalidator.xml#top-prop">setTop</db:link>(). Set the number of decimal places with <db:link xlink:href="qdoublevalidator.xml#decimals-prop">setDecimals</db:link>(). The <db:link xlink:href="qdoublevalidator.xml#validate">validate</db:link>() function returns the validation state.</db:para>
<db:para><db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link> uses its <db:link xlink:href="qvalidator.xml#locale">locale</db:link>() to interpret the number. For example, in the German locale, &quot;1,234&quot; will be accepted as the fractional number 1.234. In Arabic locales, <db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link> will accept Arabic digits.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qlocale.xml#NumberOption-enum">QLocale::NumberOptions</db:link> set on the <db:link xlink:href="qvalidator.xml#locale">locale</db:link>() also affect the way the number is interpreted. For example, since <db:link xlink:href="qlocale.xml#NumberOption-enum">QLocale::RejectGroupSeparator</db:link> is not set by default (except on the <db:code>&quot;C&quot;</db:code> locale), the validator will accept group separators. If the string passes validation, pass it to <db:link xlink:href="qvalidator.xml#locale">locale</db:link>().toDouble() to obtain its numeric value.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qintvalidator.xml">QIntValidator</db:link></db:member>
<db:member><db:link xlink:href="qregularexpressionvalidator.xml">QRegularExpressionValidator</db:link></db:member>
<db:member><db:link xlink:href="qlocale.xml#toDouble">QLocale::toDouble</db:link>()</db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-lineedits-example.xml">Line Edits Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Notation-enum">
<db:title>enum QDoubleValidator::Notation</db:title>
<db:enumsynopsis>
<db:enumname>Notation</db:enumname>
<db:enumitem>
<db:enumidentifier>StandardNotation</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ScientificNotation</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the allowed notations for entering a double.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link></db:emphasis>::StandardNotation</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The string is written in the standard format, a whole number part optionally followed by a separator and fractional part, for example <db:code>&quot;0.015&quot;</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link></db:emphasis>::ScientificNotation</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The string is written in scientific form, which optionally appends an exponent part to the standard format, for example <db:code>&quot;1.5E-2&quot;</db:code>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The whole number part may, as usual, include a sign. This, along with the separators for fractional part, exponent and any digit-grouping, depend on locale. <db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link> doesn't check the placement (which would also depend on locale) of any digit-grouping separators it finds, but it will reject input that contains them if <db:link xlink:href="qlocale.xml#NumberOption-enum">QLocale::RejectGroupSeparator</db:link> is set in <db:code>locale().numberOptions()</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlocale.xml#numberOptions">QLocale::numberOptions</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#decimalPoint">QLocale::decimalPoint</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#exponential">QLocale::exponential</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#negativeSign">QLocale::negativeSign</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="bottom-prop">
<db:title>bottom : double</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>double</db:type>
<db:varname>bottom</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">bottom</db:synopsisinfo>
<db:synopsisinfo role="setter">setBottom</db:synopsisinfo>
<db:synopsisinfo role="notifier">bottomChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the validator's minimum acceptable value</db:para>
<db:para>By default, this property contains a value of -infinity.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold">bottom</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBottom</db:emphasis>(<db:emphasis>double</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">bottomChanged</db:emphasis>(<db:type>double</db:type> <db:emphasis>bottom</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublevalidator.xml#setRange">setRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="decimals-prop">
<db:title>decimals : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>decimals</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">decimals</db:synopsisinfo>
<db:synopsisinfo role="setter">setDecimals</db:synopsisinfo>
<db:synopsisinfo role="notifier">decimalsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the validator's maximum number of digits after the decimal point</db:para>
<db:para>By default, this property contains a value of -1, which means any number of digits is accepted.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">decimals</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDecimals</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">decimalsChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>decimals</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublevalidator.xml#setRange">setRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="notation-prop">
<db:title>notation : Notation</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Notation</db:type>
<db:varname>notation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">notation</db:synopsisinfo>
<db:synopsisinfo role="setter">setNotation</db:synopsisinfo>
<db:synopsisinfo role="notifier">notationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the notation of how a string can describe a number</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qdoublevalidator.xml#Notation-enum">ScientificNotation</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdoublevalidator.xml#Notation-enum">QDoubleValidator::Notation</db:link></db:type> <db:emphasis role="bold">notation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setNotation</db:emphasis>(<db:emphasis>QDoubleValidator::Notation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">notationChanged</db:emphasis>(<db:type><db:link xlink:href="qdoublevalidator.xml#Notation-enum">QDoubleValidator::Notation</db:link></db:type> <db:emphasis>notation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublevalidator.xml#Notation-enum">Notation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="top-prop">
<db:title>top : double</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>double</db:type>
<db:varname>top</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">top</db:synopsisinfo>
<db:synopsisinfo role="setter">setTop</db:synopsisinfo>
<db:synopsisinfo role="notifier">topChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the validator's maximum acceptable value</db:para>
<db:para>By default, this property contains a value of infinity.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold">top</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTop</db:emphasis>(<db:emphasis>double</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">topChanged</db:emphasis>(<db:type>double</db:type> <db:emphasis>top</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdoublevalidator.xml#setRange">setRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDoubleValidator">
<db:title>[explicit] QDoubleValidator::QDoubleValidator(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QDoubleValidator</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDoubleValidator(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a validator object with a <db:code role="parameter">parent</db:code> object that accepts any double.</db:para>
</db:section>
<db:section xml:id="QDoubleValidator-1">
<db:title>QDoubleValidator::QDoubleValidator(double <db:emphasis>bottom</db:emphasis>, double <db:emphasis>top</db:emphasis>, int <db:emphasis>decimals</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QDoubleValidator</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>bottom</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>top</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>decimals</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDoubleValidator(double bottom, double top, int decimals, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a validator object with a <db:code role="parameter">parent</db:code> object. This validator will accept doubles from <db:code role="parameter">bottom</db:code> to <db:code role="parameter">top</db:code> inclusive, with up to <db:code role="parameter">decimals</db:code> digits after the decimal point.</db:para>
</db:section>
<db:section xml:id="dtor.QDoubleValidator">
<db:title>[virtual] QDoubleValidator::~QDoubleValidator()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDoubleValidator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDoubleValidator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the validator.</db:para>
</db:section>
<db:section xml:id="fixup">
<db:title>[override virtual, since 6.3] void QDoubleValidator::fixup(QString &amp;<db:emphasis>input</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>fixup</db:methodname>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>input</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fixup(QString &amp;input) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qvalidator.xml#fixup" role="function">QValidator::fixup(QString &amp;input) const</db:link>.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Attempts to fix the <db:code role="parameter">input</db:code> string to an <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link> representation of a double.</db:para>
<db:para>The format of the number is determined by <db:link xlink:href="qdoublevalidator.xml#notation-prop">notation</db:link>(), <db:link xlink:href="qdoublevalidator.xml#decimals-prop">decimals</db:link>(), <db:link xlink:href="qvalidator.xml#locale">locale</db:link>() and the latter's <db:link xlink:href="qlocale.xml#numberOptions">numberOptions</db:link>().</db:para>
<db:para>To comply with <db:link xlink:href="qdoublevalidator.xml#notation-prop">notation</db:link>(), when <db:link xlink:href="qdoublevalidator.xml#Notation-enum">ScientificNotation</db:link> is used, the fixed value will be represented in its normalized form, which means that any non-zero value will have one non-zero digit before the decimal point.</db:para>
<db:programlisting language="cpp">QString input = &quot;0.98765e2&quot;;
QDoubleValidator val;
val.setLocale(QLocale::C);
val.setNotation(QDoubleValidator::ScientificNotation);
val.fixup(input); // input == &quot;9.8765e+01&quot;
</db:programlisting>
<db:para>To comply with <db:link xlink:href="qdoublevalidator.xml#decimals-prop">decimals</db:link>(), when it is <db:code>-1</db:code> the number of digits used will be determined by <db:link xlink:href="qlocale.xml#FloatingPointPrecisionOption-enum">QLocale::FloatingPointShortest</db:link>. Otherwise, the fractional part of the number is truncated (with rounding, as appropriate) if its length exceeds <db:link xlink:href="qdoublevalidator.xml#decimals-prop">decimals</db:link>(). When <db:link xlink:href="qdoublevalidator.xml#notation-prop">notation</db:link>() is <db:link xlink:href="qdoublevalidator.xml#Notation-enum">ScientificNotation</db:link> this is done after the number has been put into its normalized form.</db:para>
<db:programlisting language="cpp">input = &quot;-1234.6789&quot;;
val.setDecimals(2);
val.setLocale(QLocale::C);
val.setNotation(QDoubleValidator::StandardNotation);
val.fixup(input); // input == &quot;-1234.68&quot;
</db:programlisting>
<db:note>
<db:para>If <db:link xlink:href="qdoublevalidator.xml#decimals-prop">decimals</db:link>() is set to, and the string provides, more than <db:code>std::numeric_limits&lt;double&gt;::digits10</db:code>, digits beyond that many in the fractional part may be changed. The resulting string shall encode the same floating-point number, when parsed to a <db:code>double</db:code>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="setRange">
<db:title>void QDoubleValidator::setRange(double <db:emphasis>minimum</db:emphasis>, double <db:emphasis>maximum</db:emphasis>, int <db:emphasis>decimals</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRange</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>minimum</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>maximum</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>decimals</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRange(double minimum, double maximum, int decimals)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the validator to accept doubles from <db:code role="parameter">minimum</db:code> to <db:code role="parameter">maximum</db:code> inclusive, with at most <db:code role="parameter">decimals</db:code> digits after the decimal point.</db:para>
<db:note>
<db:para>Setting the number of decimals to -1 effectively sets it to unlimited. This is also the value used by a default-constructed validator.</db:para>
</db:note>
</db:section>
<db:section xml:id="setRange-1">
<db:title>void QDoubleValidator::setRange(double <db:emphasis>minimum</db:emphasis>, double <db:emphasis>maximum</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRange</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>minimum</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>maximum</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRange(double minimum, double maximum)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the validator to accept doubles from <db:code role="parameter">minimum</db:code> to <db:code role="parameter">maximum</db:code> inclusive without changing the number of digits after the decimal point.</db:para>
</db:section>
<db:section xml:id="validate">
<db:title>[override virtual] QValidator::State QDoubleValidator::validate(QString &amp;<db:emphasis>input</db:emphasis>, int &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QValidator::State</db:type>
<db:methodname>validate</db:methodname>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>input</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QValidator::State validate(QString &amp;input, int &amp;pos) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qvalidator.xml#validate" role="function">QValidator::validate(QString &amp;input, int &amp;pos) const</db:link>.</db:para>
<db:para>Returns <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link> if the string <db:code role="parameter">input</db:code> is in the correct format and contains a double within the valid range.</db:para>
<db:para>Returns <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> if <db:code role="parameter">input</db:code> is in the wrong format or contains a double outside the range.</db:para>
<db:para>Returns <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link> if the <db:code role="parameter">input</db:code> doesn't represent a double or has too many digits after the decimal point.</db:para>
<db:para>Note: If the valid range consists of just positive doubles (e.g. 0.0 to 100.0) and <db:code role="parameter">input</db:code> is a negative double then <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link> is returned. If <db:link xlink:href="qdoublevalidator.xml#notation-prop">notation</db:link>() is set to <db:link xlink:href="qdoublevalidator.xml#Notation-enum">StandardNotation</db:link>, and the input contains more digits before the decimal point than a double in the valid range may have, <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link> is returned. If <db:link xlink:href="qdoublevalidator.xml#notation-prop">notation</db:link>() is <db:link xlink:href="qdoublevalidator.xml#Notation-enum">ScientificNotation</db:link>, and the input is not in the valid range, <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> is returned. The value may yet become valid by changing the exponent.</db:para>
<db:para>By default, the <db:code role="parameter">pos</db:code> parameter is not used by this validator.</db:para>
</db:section>
</db:section>
</db:article>
