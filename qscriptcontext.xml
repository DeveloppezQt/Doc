<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScriptContext Class</db:title>
<db:productname>QtScript</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>QtScript Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link> class represents a Qt Script function invocation.</db:para>
<db:para>This class was introduced in Qt 4.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScriptContext</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += script</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QScriptContext is part of <db:simplelist><db:member><db:link xlink:href="script.xml">Scripting Classes and Overviews</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link> provides access to the `this' object and arguments passed to a script function. You typically want to access this information when you're writing a native (C++) function (see <db:link xlink:href="qscriptengine.xml#newFunction">QScriptEngine::newFunction</db:link>()) that will be called from script code. For example, when the script code</db:para>
<db:programlisting language="cpp">foo(20.5, &quot;hello&quot;, new Object())
</db:programlisting>
<db:para>is evaluated, a <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link> will be created, and the context will carry the arguments as QScriptValues; in this particular case, the arguments will be one <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> containing the number 20.5, a second <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> containing the string <db:code>&quot;hello&quot;</db:code>, and a third <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> containing a Qt Script object.</db:para>
<db:para>Use <db:link xlink:href="qscriptcontext.xml#argumentCount">argumentCount</db:link>() to get the number of arguments passed to the function, and <db:link xlink:href="qscriptcontext.xml#argument">argument</db:link>() to get an argument at a certain index. The <db:link xlink:href="qscriptcontext.xml#argumentsObject">argumentsObject</db:link>() function returns a Qt Script array object containing all the arguments; you can use the <db:link xlink:href="qscriptvalueiterator.xml">QScriptValueIterator</db:link> to iterate over its elements, or pass the array on as arguments to another script function using <db:link xlink:href="qscriptvalue.xml#call">QScriptValue::call</db:link>().</db:para>
<db:para>Use <db:link xlink:href="qscriptcontext.xml#thisObject">thisObject</db:link>() to get the `this' object associated with the function call, and <db:link xlink:href="qscriptcontext.xml#setThisObject">setThisObject</db:link>() to set the `this' object. If you are implementing a native &quot;instance method&quot;, you typically fetch the <db:link xlink:href="qscriptcontext.xml#thisObject">thisObject</db:link>() and access one or more of its properties:</db:para>
<db:programlisting language="cpp">QScriptValue Person_prototype_fullName(QScriptContext *context, QScriptEngine *engine)
{
    QScriptValue self = context-&gt;thisObject();
    QString result;
    result += self.property(&quot;firstName&quot;).toString();
    result += QLatin1String(&quot; &quot;);
    result += self.property(&quot;lastName&quot;).toString();
    return result;
}
</db:programlisting>
<db:para>Use <db:link xlink:href="qscriptcontext.xml#isCalledAsConstructor">isCalledAsConstructor</db:link>() to determine if the function was called as a constructor (e.g. <db:code>&quot;new foo()&quot;</db:code> (as constructor) or just <db:code>&quot;foo()&quot;</db:code>). When a function is called as a constructor, the <db:link xlink:href="qscriptcontext.xml#thisObject">thisObject</db:link>() contains the newly constructed object that the function is expected to initialize.</db:para>
<db:para>Use <db:link xlink:href="qscriptcontext.xml#throwValue">throwValue</db:link>() or <db:link xlink:href="qscriptcontext.xml#throwError">throwError</db:link>() to throw an exception.</db:para>
<db:para>Use <db:link xlink:href="qscriptcontext.xml#callee">callee</db:link>() to obtain the <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> that represents the function being called. This can for example be used to call the function recursively.</db:para>
<db:para>Use <db:link xlink:href="qscriptcontext.xml#parentContext">parentContext</db:link>() to get a pointer to the context that precedes this context in the activation stack. This is mostly useful for debugging purposes (e.g. when constructing some form of backtrace).</db:para>
<db:para>The <db:link xlink:href="qscriptcontext.xml#activationObject">activationObject</db:link>() function returns the object that is used to hold the local variables associated with this function call. You can replace the activation object by calling <db:link xlink:href="qscriptcontext.xml#setActivationObject">setActivationObject</db:link>(). A typical usage of these functions is when you want script code to be evaluated in the context of the parent context, e.g. to implement an include() function:</db:para>
<db:programlisting language="cpp">QScriptValue myInclude(QScriptContext *ctx, QScriptEngine *eng)
{
    QString fileName = ctx-&gt;argument(0).toString();
    QString contents = readTheFile(fileName);
    ctx-&gt;setActivationObject(ctx-&gt;parentContext()-&gt;activationObject());
    ctx-&gt;setThisObject(ctx-&gt;parentContext()-&gt;thisObject());
    return eng-&gt;evaluate(contents, fileName);
}
</db:programlisting>
<db:para>Use <db:link xlink:href="qscriptcontext.xml#backtrace">backtrace</db:link>() to get a human-readable backtrace associated with this context. This can be useful for debugging purposes when implementing native functions. The <db:link xlink:href="qscriptcontext.xml#toString">toString</db:link>() function provides a string representation of the context. (<db:link xlink:href="qscriptcontextinfo.xml">QScriptContextInfo</db:link> provides more detailed debugging-related information about the <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link>.)</db:para>
<db:para>Use <db:link xlink:href="qscriptcontext.xml#engine">engine</db:link>() to obtain a pointer to the <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link> that this context resides in.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptcontextinfo.xml">QScriptContextInfo</db:link></db:member>
<db:member><db:link xlink:href="qscriptengine.xml#newFunction">QScriptEngine::newFunction</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptable.xml">QScriptable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QScriptContext::Error</db:title>
<db:para>This enum specifies types of error.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link></db:emphasis>::ReferenceError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A reference error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link></db:emphasis>::SyntaxError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A syntax error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link></db:emphasis>::TypeError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>A type error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link></db:emphasis>::RangeError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>A range error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link></db:emphasis>::URIError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>A URI error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>An unknown error.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ExecutionState-enum">
<db:title>enum QScriptContext::ExecutionState</db:title>
<db:para>This enum specifies the frameution state of the context.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link></db:emphasis>::NormalState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The context is in a normal state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link></db:emphasis>::ExceptionState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The context is in an exceptional state.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QScriptContext">
<db:title>[noexcept] QScriptContext::~QScriptContext()</db:title>
<db:para>Destroys this <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link>.</db:para>
</db:section>
<db:section xml:id="activationObject">
<db:title>QScriptValue QScriptContext::activationObject() const</db:title>
<db:para>Returns the activation object of this <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link>. The activation object provides access to the local variables associated with this context.</db:para>
<db:note>
<db:para>The activation object might not be available if there is no active <db:link xlink:href="qscriptengineagent.xml">QScriptEngineAgent</db:link>, as it might be optimized.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptcontext.xml#setActivationObject">setActivationObject</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptcontext.xml#argument">argument</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptcontext.xml#argumentsObject">argumentsObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="argument">
<db:title>QScriptValue QScriptContext::argument(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the function argument at the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>If <db:code role="parameter">index</db:code> &gt;= <db:link xlink:href="qscriptcontext.xml#argumentCount">argumentCount</db:link>(), a <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> of the primitive type Undefined is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptcontext.xml#argumentCount">argumentCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="argumentCount">
<db:title>int QScriptContext::argumentCount() const</db:title>
<db:para>Returns the number of arguments passed to the function in this invocation.</db:para>
<db:para>Note that the argument count can be different from the formal number of arguments (the <db:code>length</db:code> property of <db:link xlink:href="qscriptcontext.xml#callee">callee</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptcontext.xml#argument">argument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="argumentsObject">
<db:title>QScriptValue QScriptContext::argumentsObject() const</db:title>
<db:para>Returns the arguments object of this <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link>.</db:para>
<db:para>The arguments object has properties <db:code>callee</db:code> (equal to <db:link xlink:href="qscriptcontext.xml#callee">callee</db:link>()) and <db:code>length</db:code> (equal to <db:link xlink:href="qscriptcontext.xml#argumentCount">argumentCount</db:link>()), and properties <db:code>0</db:code>, <db:code>1</db:code>, ..., <db:link xlink:href="qscriptcontext.xml#argumentCount">argumentCount</db:link>() - 1 that provide access to the argument values. Initially, property <db:code>P</db:code> (0 &lt;= <db:code>P</db:code> &lt; <db:link xlink:href="qscriptcontext.xml#argumentCount">argumentCount</db:link>()) has the same value as argument(<db:code>P</db:code>). In the case when <db:code>P</db:code> is less than the number of formal parameters of the function, <db:code>P</db:code> shares its value with the corresponding property of the activation object (<db:link xlink:href="qscriptcontext.xml#activationObject">activationObject</db:link>()). This means that changing this property changes the corresponding property of the activation object and vice versa.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptcontext.xml#argument">argument</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptcontext.xml#activationObject">activationObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="backtrace">
<db:title>QStringList QScriptContext::backtrace() const</db:title>
<db:para>Returns a human-readable backtrace of this <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link>.</db:para>
<db:para>Each line is of the form <db:code>&lt;function-name&gt;(&lt;arguments&gt;)@&lt;file-name&gt;:&lt;line-number&gt;</db:code>.</db:para>
<db:para>To access individual pieces of debugging-related information (for example, to construct your own backtrace representation), use <db:link xlink:href="qscriptcontextinfo.xml">QScriptContextInfo</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengine.xml#uncaughtExceptionBacktrace">QScriptEngine::uncaughtExceptionBacktrace</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptcontextinfo.xml">QScriptContextInfo</db:link></db:member>
<db:member><db:link xlink:href="qscriptcontext.xml#toString">toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="callee">
<db:title>QScriptValue QScriptContext::callee() const</db:title>
<db:para>Returns the callee. The callee is the function object that this <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link> represents an invocation of.</db:para>
</db:section>
<db:section xml:id="engine">
<db:title>QScriptEngine *QScriptContext::engine() const</db:title>
<db:para>Returns the <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link> that this <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link> belongs to.</db:para>
</db:section>
<db:section xml:id="isCalledAsConstructor">
<db:title>bool QScriptContext::isCalledAsConstructor() const</db:title>
<db:para>Returns true if the function was called as a constructor (e.g. <db:code>&quot;new foo()&quot;</db:code>); otherwise returns false.</db:para>
<db:para>When a function is called as constructor, the <db:link xlink:href="qscriptcontext.xml#thisObject">thisObject</db:link>() contains the newly constructed object to be initialized.</db:para>
<db:note>
<db:para>This function is only guaranteed to work for a context corresponding to native functions.</db:para>
</db:note>
</db:section>
<db:section xml:id="parentContext">
<db:title>QScriptContext *QScriptContext::parentContext() const</db:title>
<db:para>Returns the parent context of this <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link>.</db:para>
</db:section>
<db:section xml:id="setActivationObject">
<db:title>void QScriptContext::setActivationObject(const QScriptValue &amp;<db:emphasis>activation</db:emphasis>)</db:title>
<db:para>Sets the activation object of this <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link> to be the given <db:code role="parameter">activation</db:code>.</db:para>
<db:para>If <db:code role="parameter">activation</db:code> is not an object, this function does nothing.</db:para>
<db:note>
<db:para>For a context corresponding to a JavaScript function, this is only guaranteed to work if there was an <db:link xlink:href="qscriptengineagent.xml">QScriptEngineAgent</db:link> active on the engine while the function was evaluated.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptcontext.xml#activationObject">activationObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setThisObject">
<db:title>void QScriptContext::setThisObject(const QScriptValue &amp;<db:emphasis>thisObject</db:emphasis>)</db:title>
<db:para>Sets the `this' object associated with this <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link> to be <db:code role="parameter">thisObject</db:code>.</db:para>
<db:para>If <db:code role="parameter">thisObject</db:code> is not an object, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptcontext.xml#thisObject">thisObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QScriptContext::ExecutionState QScriptContext::state() const</db:title>
<db:para>Returns the frameution state of this <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link>.</db:para>
</db:section>
<db:section xml:id="thisObject">
<db:title>QScriptValue QScriptContext::thisObject() const</db:title>
<db:para>Returns the `this' object associated with this <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptcontext.xml#setThisObject">setThisObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="throwError">
<db:title>QScriptValue QScriptContext::throwError(QScriptContext::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Throws an <db:code role="parameter">error</db:code> with the given <db:code role="parameter">text</db:code>. Returns the created error object.</db:para>
<db:para>The <db:code role="parameter">text</db:code> will be stored in the <db:code>message</db:code> property of the error object.</db:para>
<db:para>The error object will be initialized to contain information about the location where the error occurred; specifically, it will have properties <db:code>lineNumber</db:code>, <db:code>fileName</db:code> and <db:code>stack</db:code>. These properties are described in <db:link xlink:href="qtscript-index.xml#qt-script-extensions-to-ecmascript">Qt Script Extensions to ECMAScript</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptcontext.xml#throwValue">throwValue</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptcontext.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="throwError-1">
<db:title>QScriptValue QScriptContext::throwError(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Throws an error with the given <db:code role="parameter">text</db:code>. Returns the created error object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptcontext.xml#throwValue">throwValue</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptcontext.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="throwValue">
<db:title>QScriptValue QScriptContext::throwValue(const QScriptValue &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Throws an exception with the given <db:code role="parameter">value</db:code>. Returns the value thrown (the same as the argument).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptcontext.xml#throwError">throwError</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptcontext.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>[since 4.4] QString QScriptContext::toString() const</db:title>
<db:para>Returns a string representation of this context. This is useful for debugging.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptcontext.xml#backtrace">backtrace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
