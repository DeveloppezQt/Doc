<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Input Handlers</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A module with a set of QML elements that handle events from input devices in a user interface.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Quick Input Handlers are a set of QML types used to handle <db:link xlink:href="qinputevent.xml">events</db:link> from keyboard, touch, mouse, and stylus <db:link xlink:href="qinputdevice.xml">devices</db:link> in a UI. In contrast to event-handling items, such as <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> and <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link>, input handlers are explicitly non-visual, require less memory and are intended to be used in greater numbers: one handler instance per aspect of interaction. Each input handler instance handles certain events on behalf of its parent Item. Thus the visual and behavioral concerns are better separated, and the behavior is built up by finer-grained composition.</db:para>
<db:para>The pre-existing <db:link xlink:href="qml-qtquick-keys.xml">Keys</db:link> attached property is similar in concept, so we refer to the pointing-device-oriented handlers plus <db:code>Keys</db:code> together as the set of Input Handlers. We expect to offer more attached-property use cases in future versions of Qt.</db:para>
<db:section xml:id="input-handlers">
<db:title>Input Handlers</db:title>
<db:variablelist role="qtquick-input-handlers">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-draghandler.xml" xlink:role="">DragHandler</db:link></db:term>
<db:listitem>
<db:para>Handler for dragging.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-hoverhandler.xml" xlink:role="">HoverHandler</db:link></db:term>
<db:listitem>
<db:para>Handler for mouse and tablet hover.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-keynavigation.xml" xlink:role="">KeyNavigation</db:link></db:term>
<db:listitem>
<db:para>Supports key navigation by arrow keys.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-keys.xml" xlink:role="">Keys</db:link></db:term>
<db:listitem>
<db:para>Provides key handling to Items.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-pinchhandler.xml" xlink:role="">PinchHandler</db:link></db:term>
<db:listitem>
<db:para>Handler for pinch gestures.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-pointhandler.xml" xlink:role="">PointHandler</db:link></db:term>
<db:listitem>
<db:para>Handler for reacting to a single touchpoint.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-taphandler.xml" xlink:role="">TapHandler</db:link></db:term>
<db:listitem>
<db:para>Handler for taps and clicks.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-wheelhandler.xml" xlink:role="">WheelHandler</db:link></db:term>
<db:listitem>
<db:para>Handler for the mouse wheel.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="key-features">
<db:title>Key Features</db:title>
<db:para>Some of the key features are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Handle keystrokes within the focused Item</db:para>
</db:listitem>
<db:listitem>
<db:para>Handle gestures such as tapping or dragging regardless which device it comes from</db:para>
</db:listitem>
<db:listitem>
<db:para>Handle gestures from different classes of devices in different ways</db:para>
</db:listitem>
<db:listitem>
<db:para>Each Item can have unlimited Handlers</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="handlers-manipulating-items">
<db:title>Handlers Manipulating Items</db:title>
<db:para>Some Handlers add interactivity simply by being declared inside an Item:</db:para>
<db:programlisting language="qml">import QtQuick 2.12

Rectangle {
    width: 100
    height: 100
    color: &quot;lightsteelblue&quot;
    DragHandler { }
}
</db:programlisting>
</db:section>
<db:section xml:id="handler-properties-and-signals">
<db:title>Handler Properties and Signals</db:title>
<db:para>All Handlers have properties that can be used in bindings, and signals that can be handled to react to input:</db:para>
<db:programlisting language="qml">import QtQuick 2.12

Rectangle {
    id: button
    signal clicked

    width: 150; height: 50; radius: 3
    color: tapHandler.pressed ? &quot;goldenrod&quot; : hoverHandler.hovered ? &quot;wheat&quot; : &quot;beige&quot;
    border.color: activeFocus ? &quot;brown&quot; : &quot;transparent&quot;
    focus: true

    HoverHandler {
        id: hoverHandler
    }

    TapHandler {
        id: tapHandler
        onTapped: button.clicked()
    }

    Keys.onEnterPressed: button.clicked()
}
</db:programlisting>
</db:section>
<db:section xml:id="pointer-grab">
<db:title>Pointer Grab</db:title>
<db:para>An important concept with Pointer Handlers is the type of grabs that they perform. The only kind of grab an Item can take is the exclusive grab: for example if you call <db:link xlink:href="qpointerevent.xml#setExclusiveGrabber">QPointerEvent::setExclusiveGrabber</db:link>(), the following mouse moves and mouse release event will be sent only to that object. (As a workaround to this exclusivity, see <db:link xlink:href="qquickitem.xml#setFiltersChildMouseEvents">QQuickItem::setFiltersChildMouseEvents</db:link>() and <db:link xlink:href="qquickitem.xml#childMouseEventFilter">QQuickItem::childMouseEventFilter</db:link>().) However Pointer Handlers have an additional mechanism available: the <db:link xlink:href="qpointerevent.xml#addPassiveGrabber">passive grab</db:link>. Mouse and touch <db:link xlink:href="qeventpoint.xml#state-prop">press</db:link> events are delivered by visiting all the Items in top-down Z order: first each Item's child Handlers, and then the <db:link xlink:href="qquickitem.xml#event">Item</db:link> itself. At the time a press event is delivered, a Handler can take either a passive or an exclusive grab depending on its needs. If it takes a passive grab, it is guaranteed to receive the updates and the release, even if other Items or Handlers in the scene take any kind of grab, passive or exclusve. Some Handlers (such as <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link>) can work only with passive grabs; others require exclusive grabs; and others can &quot;lurk&quot; with passive grabs until they detect that a gesture is being performed, and then make the transition from passive to exclusive grab.</db:para>
<db:para>When a grab transition is requested, <db:link xlink:href="qml-qtquick-pointerhandler.xml#grabPermissions-prop">PointerHandler::grabPermissions</db:link>, <db:link xlink:href="qquickitem.xml#keepMouseGrab">QQuickItem::keepMouseGrab</db:link>() and <db:link xlink:href="qquickitem.xml#keepTouchGrab">QQuickItem::keepTouchGrab</db:link>() control whether the transition will be allowed.</db:para>
</db:section>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-index.xml">Qt Quick</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
