<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using File Selectors with Qt Quick Controls</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick Controls Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:link xlink:href="qfileselector.xml">File selectors</db:link> provide a convenient way of selecting file variants. Qt offers the platform name and the locale as built-in selectors. Qt Quick Controls extends the built-in selectors with the name (Capitalized) of the style that an application is running with.</db:para>
<db:para>By using file selectors, style-specific tweaks can be applied without creating a hard dependency to a style. From the available file variants, only the selected QML file is loaded by the QML engine. Each file variant can assume the context, that is, a specific style. This typically leads to some code duplication, but on the other hand, cuts the aforementioned hard dependency to the style, and leads to simpler and more efficient QML code.</db:para>
<db:para>The following example demonstrates a custom rounded button that has a styled drop shadow in the <db:link xlink:href="qtquickcontrols-material.xml">Material style</db:link>, and looks flat in other styles. The files are organized so that the Material version of <db:code>CustomButton.qml</db:code> is placed into a <db:code>+Material</db:code> sub-directory.</db:para>
<db:programlisting language="cpp">:/main.qml
:/CustomButton.qml
:/+Material/CustomButton.qml
</db:programlisting>
<db:para>By default, <db:code>main.qml</db:code> will use <db:code>CustomButton.qml</db:code> for the <db:code>CustomButton</db:code> type. However, when the application is run with the Material style, the <db:code>Material</db:code> selector will be present and the <db:code>+Material/CustomButton.qml</db:code> version will be used instead.</db:para>
<db:programlisting language="cpp">// main.qml
import QtQuick
import QtQuick.Controls

ApplicationWindow {
    id: window
    visible: true

    CustomButton {
        text: &quot;Button&quot;
        anchors.centerIn: parent
    }
}
</db:programlisting>
<db:para>The base implementation of the custom button is a simple rounded flat button.</db:para>
<db:programlisting language="cpp">// CustomButton.qml
import QtQuick
import QtQuick.Controls

Button {
    id: control

    background: Rectangle {
        radius: width / 2
        implicitWidth: 36
        implicitHeight: 36
        color: control.pressed ? &quot;#ccc&quot; : &quot;#eee&quot;
    }
}
</db:programlisting>
<db:para>The Material style's implementation of the custom button imports the Material style, requests a dark theme to get light text, and creates a drop shadow for the background.</db:para>
<db:programlisting language="cpp">// +Material/CustomButton.qml
import QtQuick
import QtQuick.Effects
import QtQuick.Controls
import QtQuick.Controls.Material

Button {
    id: control

    Material.theme: Material.Dark

    background: Rectangle {
        implicitWidth: 48
        implicitHeight: 48
        color: Material.accentColor
        radius: width / 2

        layer.enabled: control.enabled
        layer.effect: MultiEffect {
            shadowEnabled: true
            shadowHorizontalOffset: 3
            shadowVerticalOffset: 3
            shadowColor: Material.dropShadowColor
            shadowBlur: control.pressed ? 0.8 : 0.4
        }
    }
}
</db:programlisting>
<db:note>
<db:para>It is recommended to use <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link>, which internally creates a <db:link xlink:href="qqmlfileselector.xml">QQmlFileSelector</db:link> instance. This is all that is needed to take QML file selectors into use.</db:para>
</db:note>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qfileselector.xml">QFileSelector</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qqmlfileselector.xml">QQmlFileSelector</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-styles.xml">Styling Qt Quick Controls</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
