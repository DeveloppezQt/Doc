<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Concurrent Map and Map-Reduce</db:title>
<db:productname>QtConcurrent</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Concurrent Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The QtConcurrent::map(), QtConcurrent::mapped() and QtConcurrent::mappedReduced() functions run computations in parallel on the items in a sequence such as a QList or a QVector. QtConcurrent::map() modifies a sequence in-place, QtConcurrent::mapped() returns a new sequence containing the modified content, and QtConcurrent::mappedReduced() returns a single result.</db:para>
<db:para>These functions are a part of the <db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link> framework.</db:para>
<db:para>Each of the above functions has a blocking variant that returns the final result instead of a QFuture. You use them in the same way as the asynchronous variants.</db:para>
<db:programlisting language="cpp">QList&lt;QImage&gt; images = ...;

// each call blocks until the entire operation is finished
QList&lt;QImage&gt; future = QtConcurrent::blockingMapped(images, scaled);

QtConcurrent::blockingMap(images, scale);

QImage collage = QtConcurrent::blockingMappedReduced(images, scaled, addToCollage);
</db:programlisting>
<db:para>Note that the result types above are not QFuture objects, but real result types (in this case, QList&lt;QImage&gt; and QImage).</db:para>
<db:section xml:id="concurrent-map">
<db:title>Concurrent Map</db:title>
<db:para>QtConcurrent::mapped() takes an input sequence and a map function. This map function is then called for each item in the sequence, and a new sequence containing the return values from the map function is returned.</db:para>
<db:para>The map function must be of the form:</db:para>
<db:programlisting language="cpp">U function(const T &amp;t);
</db:programlisting>
<db:para>T and U can be any type (and they can even be the same type), but T must match the type stored in the sequence. The function returns the modified or <db:emphasis>mapped</db:emphasis> content.</db:para>
<db:para>This example shows how to apply a scale function to all the items in a sequence:</db:para>
<db:programlisting language="cpp">QImage scaled(const QImage &amp;image)
{
    return image.scaled(100, 100);
}

QList&lt;QImage&gt; images = ...;
QFuture&lt;QImage&gt; thumbnails = QtConcurrent::mapped(images, scaled);
</db:programlisting>
<db:para>The results of the map are made available through QFuture. See the QFuture and QFutureWatcher documentation for more information on how to use QFuture in your applications.</db:para>
<db:para>If you want to modify a sequence in-place, use QtConcurrent::map(). The map function must then be of the form:</db:para>
<db:programlisting language="cpp">U function(T &amp;t);
</db:programlisting>
<db:para>Note that the return value and return type of the map function are not used.</db:para>
<db:para>Using QtConcurrent::map() is similar to using QtConcurrent::mapped():</db:para>
<db:programlisting language="cpp">void scale(QImage &amp;image)
{
    image = image.scaled(100, 100);
}

QList&lt;QImage&gt; images = ...;
QFuture&lt;void&gt; future = QtConcurrent::map(images, scale);
</db:programlisting>
<db:para>Since the sequence is modified in place, QtConcurrent::map() does not return any results via QFuture. However, you can still use QFuture and QFutureWatcher to monitor the status of the map.</db:para>
</db:section>
<db:section xml:id="concurrent-map-reduce">
<db:title>Concurrent Map-Reduce</db:title>
<db:para>QtConcurrent::mappedReduced() is similar to QtConcurrent::mapped(), but instead of returning a sequence with the new results, the results are combined into a single value using a reduce function.</db:para>
<db:para>The reduce function must be of the form:</db:para>
<db:programlisting language="cpp">V function(T &amp;result, const U &amp;intermediate)
</db:programlisting>
<db:para>T is the type of the final result, U is the return type of the map function. Note that the return value and return type of the reduce function are not used.</db:para>
<db:para>Call QtConcurrent::mappedReduced() like this:</db:para>
<db:programlisting language="cpp">void addToCollage(QImage &amp;collage, const QImage &amp;thumbnail)
{
    QPainter p(&amp;collage);
    static QPoint offset = QPoint(0, 0);
    p.drawImage(offset, thumbnail);
    offset += ...;
}

QList&lt;QImage&gt; images = ...;
QFuture&lt;QImage&gt; collage = QtConcurrent::mappedReduced(images, scaled, addToCollage);
</db:programlisting>
<db:para>The reduce function will be called once for each result returned by the map function, and should merge the <db:emphasis>intermediate</db:emphasis> into the <db:emphasis>result</db:emphasis> variable. QtConcurrent::mappedReduced() guarantees that only one thread will call reduce at a time, so using a mutex to lock the result variable is not necessary. The QtConcurrent::ReduceOptions enum provides a way to control the order in which the reduction is done. If <db:link xlink:href="qtconcurrent.xml#ReduceOption-enum">QtConcurrent::UnorderedReduce</db:link> is used (the default), the order is undefined, while <db:link xlink:href="qtconcurrent.xml#ReduceOption-enum">QtConcurrent::OrderedReduce</db:link> ensures that the reduction is done in the order of the original sequence.</db:para>
</db:section>
<db:section xml:id="additional-api-features">
<db:title>Additional API Features</db:title>
<db:section xml:id="using-iterators-instead-of-sequence">
<db:title>Using Iterators instead of Sequence</db:title>
<db:para>Each of the above functions has a variant that takes an iterator range instead of a sequence. You use them in the same way as the sequence variants:</db:para>
<db:programlisting language="cpp">QList&lt;QImage&gt; images = ...;

QFuture&lt;QImage&gt; thumbnails = QtConcurrent::mapped(images.constBegin(), images.constEnd(), scaled);

// map in-place only works on non-const iterators
QFuture&lt;void&gt; future = QtConcurrent::map(images.begin(), images.end(), scale);

QFuture&lt;QImage&gt; collage = QtConcurrent::mappedReduced(images.constBegin(), images.constEnd(), scaled, addToCollage);
</db:programlisting>
</db:section>
<db:section xml:id="blocking-variants">
<db:title>Blocking Variants</db:title>
<db:para>Each of the above functions has a blocking variant that returns the final result instead of a QFuture. You use them in the same way as the asynchronous variants.</db:para>
<db:programlisting language="cpp">QList&lt;QImage&gt; images = ...;

// each call blocks until the entire operation is finished
QList&lt;QImage&gt; future = QtConcurrent::blockingMapped(images, scaled);

QtConcurrent::blockingMap(images, scale);

QImage collage = QtConcurrent::blockingMappedReduced(images, scaled, addToCollage);
</db:programlisting>
<db:para>Note that the result types above are not QFuture objects, but real result types (in this case, QList&lt;QImage&gt; and QImage).</db:para>
</db:section>
<db:section xml:id="using-member-functions">
<db:title>Using Member Functions</db:title>
<db:para>QtConcurrent::map(), QtConcurrent::mapped(), and QtConcurrent::mappedReduced() accept pointers to member functions. The member function class type must match the type stored in the sequence:</db:para>
<db:programlisting language="cpp">// squeeze all strings in a QStringList
QStringList strings = ...;
QFuture&lt;void&gt; squeezedStrings = QtConcurrent::map(strings, &amp;QString::squeeze);

// swap the rgb values of all pixels on a list of images
QList&lt;QImage&gt; images = ...;
QFuture&lt;QImage&gt; bgrImages = QtConcurrent::mapped(images, &amp;QImage::rgbSwapped);

// create a set of the lengths of all strings in a list
QStringList strings = ...;
QFuture&lt;QSet&lt;int&gt; &gt; wordLengths = QtConcurrent::mappedReduced(string, &amp;QString::length, &amp;QSet&lt;int&gt;::insert);
</db:programlisting>
<db:para>Note that when using QtConcurrent::mappedReduced(), you can mix the use of normal and member functions freely:</db:para>
<db:programlisting language="cpp">// can mix normal functions and member functions with QtConcurrent::mappedReduced()

// compute the average length of a list of strings
extern void computeAverage(int &amp;average, int length);
QStringList strings = ...;
QFuture&lt;int&gt; averageWordLength = QtConcurrent::mappedReduced(strings, &amp;QString::length, computeAverage);

// create a set of the color distribution of all images in a list
extern int colorDistribution(const QImage &amp;string);
QList&lt;QImage&gt; images = ...;
QFuture&lt;QSet&lt;int&gt; &gt; totalColorDistribution = QtConcurrent::mappedReduced(images, colorDistribution, QSet&lt;int&gt;::insert);
</db:programlisting>
</db:section>
<db:section xml:id="using-function-objects">
<db:title>Using Function Objects</db:title>
<db:para>QtConcurrent::map(), QtConcurrent::mapped(), and QtConcurrent::mappedReduced() accept function objects, which can be used to add state to a function call. The result_type typedef must define the result type of the function call operator:</db:para>
<db:programlisting language="cpp">struct Scaled
{
    Scaled(int size)
    : m_size(size) { }

    typedef QImage result_type;

    QImage operator()(const QImage &amp;image)
    {
        return image.scaled(m_size, m_size);
    }

    int m_size;
};

QList&lt;QImage&gt; images = ...;
QFuture&lt;QImage&gt; thumbnails = QtConcurrent::mapped(images, Scaled(100));
</db:programlisting>
</db:section>
<db:section xml:id="using-bound-function-arguments">
<db:title>Using Bound Function Arguments</db:title>
<db:para>If you want to use a map function that takes more than one argument you can use std::bind() to transform it onto a function that takes one argument. If C++11 support is not available, <db:link xlink:href="http://www.boost.org/libs/bind/bind.html">boost::bind()</db:link> or <db:link xlink:href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf">std::tr1::bind()</db:link> are suitable replacements.</db:para>
<db:para>As an example, we'll use QImage::scaledToWidth():</db:para>
<db:programlisting language="cpp">QImage QImage::scaledToWidth(int width, Qt::TransformationMode) const;
</db:programlisting>
<db:para>scaledToWidth takes three arguments (including the &quot;this&quot; pointer) and can't be used with QtConcurrent::mapped() directly, because QtConcurrent::mapped() expects a function that takes one argument. To use QImage::scaledToWidth() with QtConcurrent::mapped() we have to provide a value for the <db:emphasis>width</db:emphasis> and the <db:emphasis>transformation mode</db:emphasis>:</db:para>
<db:programlisting language="cpp">std::bind(&amp;QImage::scaledToWidth, 100, Qt::SmoothTransformation)
</db:programlisting>
<db:para>The return value from std::bind() is a function object (functor) with the following signature:</db:para>
<db:programlisting language="cpp">QImage scaledToWith(const QImage &amp;image)
</db:programlisting>
<db:para>This matches what QtConcurrent::mapped() expects, and the complete example becomes:</db:para>
<db:programlisting language="cpp">QList&lt;QImage&gt; images = ...;
QFuture&lt;QImage&gt; thumbnails = QtConcurrent::mapped(images, std::bind(&amp;QImage::scaledToWidth, 100 Qt::SmoothTransformation));
</db:programlisting>
</db:section>
</db:section>
</db:article>
