<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCommandLineParser Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link> class provides a means for handling the command line options.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCommandLineParser</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCommandLineParser is part of <db:simplelist><db:member>tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> provides the command-line arguments as a simple list of strings. <db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link> provides the ability to define a set of options, parse the command-line arguments, and store which options have actually been used, as well as option values.</db:para>
<db:para>Any argument that isn't an option (i.e. doesn't start with a -) is stored as a &quot;positional argument&quot;.</db:para>
<db:para>The parser handles short names, long names, more than one name for the same option, and option values.</db:para>
<db:para>Options on the command line are recognized as starting with a single or double - character(s). The option - (single dash alone) is a special case, often meaning standard input, and not treated as an option. The parser will treat everything after the option -- (double dash) as positional arguments.</db:para>
<db:para>Short options are single letters. The option v would be specified by passing -v on the command line. In the default parsing mode, short options can be written in a compact form, for instance -abc is equivalent to -a -b -c. The parsing mode for can be set to <db:link xlink:href="qcommandlineparser.xml#SingleDashWordOptionMode-enum">ParseAsLongOptions</db:link>, in which case -abc will be parsed as the long option abc.</db:para>
<db:para>Long options are more than one letter long and cannot be compacted together. The long option verbose would be passed as --verbose or -verbose.</db:para>
<db:para>Passing values to options can be done using the assignment operator: -v=value --verbose=value, or a space: -v value --verbose value, i.e. the next argument is used as value (even if it starts with a -).</db:para>
<db:para>The parser does not support optional values - if an option is set to require a value, one must be present. If such an option is placed last and has no value, the option will be treated as if it had not been specified.</db:para>
<db:para>The parser does not automatically support negating or disabling long options by using the format --disable-option or --no-option. However, it is possible to handle this case explicitly by making an option with no-option as one of its names, and handling the option explicitly.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);
    QCoreApplication::setApplicationName(&quot;my-copy-program&quot;);
    QCoreApplication::setApplicationVersion(&quot;1.0&quot;);

    QCommandLineParser parser;
    parser.setApplicationDescription(&quot;Test helper&quot;);
    parser.addHelpOption();
    parser.addVersionOption();
    parser.addPositionalArgument(&quot;source&quot;, QCoreApplication::translate(&quot;main&quot;, &quot;Source file to copy.&quot;));
    parser.addPositionalArgument(&quot;destination&quot;, QCoreApplication::translate(&quot;main&quot;, &quot;Destination directory.&quot;));

    // A boolean option with a single name (-p)
    QCommandLineOption showProgressOption(&quot;p&quot;, QCoreApplication::translate(&quot;main&quot;, &quot;Show progress during copy&quot;));
    parser.addOption(showProgressOption);

    // A boolean option with multiple names (-f, --force)
    QCommandLineOption forceOption(QStringList() &amp;lt;&amp;lt; &quot;f&quot; &amp;lt;&amp;lt; &quot;force&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;Overwrite existing files.&quot;));
    parser.addOption(forceOption);

    // An option with a value
    QCommandLineOption targetDirectoryOption(QStringList() &amp;lt;&amp;lt; &quot;t&quot; &amp;lt;&amp;lt; &quot;target-directory&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;Copy all source files into &amp;lt;directory&amp;gt;.&quot;),
            QCoreApplication::translate(&quot;main&quot;, &quot;directory&quot;));
    parser.addOption(targetDirectoryOption);

    // Process the actual command line arguments given by the user
    parser.process(app);

    const QStringList args = parser.positionalArguments();
    // source is args.at(0), destination is args.at(1)

    bool showProgress = parser.isSet(showProgressOption);
    bool force = parser.isSet(forceOption);
    QString targetDir = parser.value(targetDirectoryOption);
    // ...
}
</db:programlisting>
<db:para>If your compiler supports the C++11 standard, the three <db:link xlink:href="qcommandlineparser.xml#addOption">addOption</db:link>() calls in the above example can be simplified:</db:para>
<db:programlisting language="cpp">    parser.addOptions({
        // A boolean option with a single name (-p)
        {&quot;p&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;Show progress during copy&quot;)},
        // A boolean option with multiple names (-f, --force)
        {{&quot;f&quot;, &quot;force&quot;},
            QCoreApplication::translate(&quot;main&quot;, &quot;Overwrite existing files.&quot;)},
        // An option with a value
        {{&quot;t&quot;, &quot;target-directory&quot;},
            QCoreApplication::translate(&quot;main&quot;, &quot;Copy all source files into &amp;lt;directory&amp;gt;.&quot;),
            QCoreApplication::translate(&quot;main&quot;, &quot;directory&quot;)},
    });
</db:programlisting>
<db:para>Known limitation: the parsing of Qt options inside <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> and subclasses happens before <db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link> exists, so it can't take it into account. This means any option value that looks like a builtin Qt option, will be treated by <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> as a builtin Qt option. Example: --profile -reverse will lead to <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> seeing the -reverse option set, and removing it from <db:link xlink:href="qcoreapplication.xml#arguments">QCoreApplication::arguments</db:link>() before <db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link> defines the profile option and parses the command line.</db:para>
<db:section xml:id="how-to-use-qcommandlineparser-in-complex-applications">
<db:title>How to Use QCommandLineParser in Complex Applications</db:title>
<db:para>In practice, additional error checking needs to be performed on the positional arguments and option values. For example, ranges of numbers should be checked.</db:para>
<db:para>It is then advisable to introduce a function to do the command line parsing which takes a struct or class receiving the option values returning an enumeration representing the result. The dnslookup example of the <db:link xlink:href="qtnetwork-module.xml">QtNetwork</db:link> module illustrates this:</db:para>
<db:programlisting language="cpp">struct DnsQuery
{
    DnsQuery() : type(QDnsLookup::A) {}

    QDnsLookup::Type type;
    QHostAddress nameServer;
    QString name;
};

enum CommandLineParseResult
{
    CommandLineOk,
    CommandLineError,
    CommandLineVersionRequested,
    CommandLineHelpRequested
};

CommandLineParseResult parseCommandLine(QCommandLineParser &amp;amp;parser, DnsQuery *query, QString *errorMessage)
{
    parser.setSingleDashWordOptionMode(QCommandLineParser::ParseAsLongOptions);
    const QCommandLineOption nameServerOption(&quot;n&quot;, &quot;The name server to use.&quot;, &quot;nameserver&quot;);
    parser.addOption(nameServerOption);
    const QCommandLineOption typeOption(&quot;t&quot;, &quot;The lookup type.&quot;, &quot;type&quot;);
    parser.addOption(typeOption);
    parser.addPositionalArgument(&quot;name&quot;, &quot;The name to look up.&quot;);
    const QCommandLineOption helpOption = parser.addHelpOption();
    const QCommandLineOption versionOption = parser.addVersionOption();

    if (!parser.parse(QCoreApplication::arguments())) {
        *errorMessage = parser.errorText();
        return CommandLineError;
    }

    if (parser.isSet(versionOption))
        return CommandLineVersionRequested;

    if (parser.isSet(helpOption))
        return CommandLineHelpRequested;

    if (parser.isSet(nameServerOption)) {
        const QString nameserver = parser.value(nameServerOption);
        query-&amp;gt;nameServer = QHostAddress(nameserver);
        if (query-&amp;gt;nameServer.isNull() || query-&amp;gt;nameServer.protocol() == QAbstractSocket::UnknownNetworkLayerProtocol) {
            *errorMessage = &quot;Bad nameserver address: &quot; + nameserver;
            return CommandLineError;
        }
    }

    if (parser.isSet(typeOption)) {
        const QString typeParameter = parser.value(typeOption);
        const int type = typeFromParameter(typeParameter.toLower());
        if (type &amp;lt; 0) {
            *errorMessage = &quot;Bad record type: &quot; + typeParameter;
            return CommandLineError;
        }
        query-&amp;gt;type = static_cast&amp;lt;QDnsLookup::Type&amp;gt;(type);
    }

    const QStringList positionalArguments = parser.positionalArguments();
    if (positionalArguments.isEmpty()) {
        *errorMessage = &quot;Argument 'name' missing.&quot;;
        return CommandLineError;
    }
    if (positionalArguments.size() &amp;gt; 1) {
        *errorMessage = &quot;Several 'name' arguments specified.&quot;;
        return CommandLineError;
    }
    query-&amp;gt;name = positionalArguments.first();

    return CommandLineOk;
}
</db:programlisting>
<db:para>In the main function, help should be printed to the standard output if the help option was passed and the application should return the exit code 0.</db:para>
<db:para>If an error was detected, the error message should be printed to the standard error output and the application should return an exit code other than 0.</db:para>
<db:programlisting language="cpp">    QCoreApplication::setApplicationVersion(QT_VERSION_STR);
    QCoreApplication::setApplicationName(QCoreApplication::translate(&quot;QDnsLookupExample&quot;, &quot;DNS Lookup Example&quot;));
    QCommandLineParser parser;
    parser.setApplicationDescription(QCoreApplication::translate(&quot;QDnsLookupExample&quot;, &quot;An example demonstrating the class QDnsLookup.&quot;));
    DnsQuery query;
    QString errorMessage;
    switch (parseCommandLine(parser, &amp;amp;query, &amp;amp;errorMessage)) {
    case CommandLineOk:
        break;
    case CommandLineError:
        fputs(qPrintable(errorMessage), stderr);
        fputs(&quot;\n\n&quot;, stderr);
        fputs(qPrintable(parser.helpText()), stderr);
        return 1;
    case CommandLineVersionRequested:
        printf(&quot;%s %s\n&quot;, qPrintable(QCoreApplication::applicationName()),
               qPrintable(QCoreApplication::applicationVersion()));
        return 0;
    case CommandLineHelpRequested:
        parser.showHelp();
        Q_UNREACHABLE();
    }
</db:programlisting>
<db:para>A special case to consider here are GUI applications on Windows and mobile platforms. These applications may not use the standard output or error channels since the output is either discarded or not accessible.</db:para>
<db:para>On Windows, <db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link> uses message boxes to display usage information and errors if no console window can be obtained.</db:para>
<db:para>For other platforms, it is recommended to display help texts and error messages using a <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link>. To preserve the formatting of the help text, rich text with &lt;pre&gt; elements should be used:</db:para>
<db:programlisting language="cpp">switch (parseCommandLine(parser, &amp;amp;query, &amp;amp;errorMessage)) {
case CommandLineOk:
    break;
case CommandLineError:
    QMessageBox::warning(0, QGuiApplication::applicationDisplayName(),
                         &quot;&amp;lt;html&amp;gt;&amp;lt;head/&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h2&amp;gt;&quot; + errorMessage + &quot;&amp;lt;/h2&amp;gt;&amp;lt;pre&amp;gt;&quot;
                         + parser.helpText() + &quot;&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;);
    return 1;
case CommandLineVersionRequested:
    QMessageBox::information(0, QGuiApplication::applicationDisplayName(),
                             QGuiApplication::applicationDisplayName() + ' '
                             + QCoreApplication::applicationVersion());
    return 0;
case CommandLineHelpRequested:
    QMessageBox::warning(0, QGuiApplication::applicationDisplayName(),
                         &quot;&amp;lt;html&amp;gt;&amp;lt;head/&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;&quot;
                         + parser.helpText() + &quot;&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;);
    return 0;
}
</db:programlisting>
<db:para>However, this does not apply to the dnslookup example, because it is a console application.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineoption.xml">QCommandLineOption</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="OptionsAfterPositionalArgumentsMode-enum">
<db:title>[since 5.6] enum QCommandLineParser::OptionsAfterPositionalArgumentsMode</db:title>
<db:enumsynopsis>
<db:enumname>OptionsAfterPositionalArgumentsMode</db:enumname>
<db:enumitem>
<db:enumidentifier>ParseAsOptions</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ParseAsPositionalArguments</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the way the parser interprets options that occur after positional arguments.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link></db:emphasis>::ParseAsOptions</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>application argument --opt -t is interpreted as setting the options opt and t, just like application --opt -t argument would do. This is the default parsing mode. In order to specify that --opt and -t are positional arguments instead, the user can use --, as in application argument -- --opt -t.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link></db:emphasis>::ParseAsPositionalArguments</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>application argument --opt is interpreted as having two positional arguments, argument and --opt. This mode is useful for executables that aim to launch other executables (e.g. wrappers, debugging tools, etc.) or that support internal commands followed by options for the command. argument is the name of the command, and all options occurring after it can be collected and parsed by another command line parser, possibly in another executable.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#setOptionsAfterPositionalArgumentsMode">setOptionsAfterPositionalArgumentsMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="SingleDashWordOptionMode-enum">
<db:title>enum QCommandLineParser::SingleDashWordOptionMode</db:title>
<db:enumsynopsis>
<db:enumname>SingleDashWordOptionMode</db:enumname>
<db:enumitem>
<db:enumidentifier>ParseAsCompactedShortOptions</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ParseAsLongOptions</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the way the parser interprets command-line options that use a single dash followed by multiple letters, as as -abc.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link></db:emphasis>::ParseAsCompactedShortOptions</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>-abc is interpreted as -a -b -c, i.e. as three short options that have been compacted on the command-line, if none of the options take a value. If a takes a value, then it is interpreted as -a bc, i.e. the short option a followed by the value bc. This is typically used in tools that behave like compilers, in order to handle options such as -DDEFINE=VALUE or -I/include/path. This is the default parsing mode. New applications are recommended to use this mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link></db:emphasis>::ParseAsLongOptions</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>-abc is interpreted as --abc, i.e. as the long option named abc. This is how Qt's own tools (uic, rcc...) have always been parsing arguments. This mode should be used for preserving compatibility in applications that were parsing arguments in such a way. There is an exception if the a option has the <db:link xlink:href="qcommandlineoption.xml#Flag-enum">QCommandLineOption::ShortOptionStyle</db:link> flag set, in which case it is still interpreted as -a bc.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#setSingleDashWordOptionMode">setSingleDashWordOptionMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCommandLineParser">
<db:title>QCommandLineParser::QCommandLineParser()</db:title>
<db:constructorsynopsis>
<db:methodname>QCommandLineParser</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCommandLineParser()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a command line parser object.</db:para>
</db:section>
<db:section xml:id="dtor.QCommandLineParser">
<db:title>QCommandLineParser::~QCommandLineParser()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCommandLineParser</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCommandLineParser()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the command line parser object.</db:para>
</db:section>
<db:section xml:id="addHelpOption">
<db:title>QCommandLineOption QCommandLineParser::addHelpOption()</db:title>
<db:methodsynopsis>
<db:type>QCommandLineOption</db:type>
<db:methodname>addHelpOption</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCommandLineOption addHelpOption()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the help option (-h, --help and -? on Windows) as well as an option --help-all to include Qt-specific options in the output.</db:para>
<db:para>These options are handled automatically by <db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link>.</db:para>
<db:para>Remember to use <db:link xlink:href="qcommandlineparser.xml#setApplicationDescription">setApplicationDescription</db:link> to set the application description, which will be displayed when this option is used.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);
    QCoreApplication::setApplicationName(&quot;my-copy-program&quot;);
    QCoreApplication::setApplicationVersion(&quot;1.0&quot;);

    QCommandLineParser parser;
    parser.setApplicationDescription(&quot;Test helper&quot;);
    parser.addHelpOption();
    parser.addVersionOption();
    parser.addPositionalArgument(&quot;source&quot;, QCoreApplication::translate(&quot;main&quot;, &quot;Source file to copy.&quot;));
    parser.addPositionalArgument(&quot;destination&quot;, QCoreApplication::translate(&quot;main&quot;, &quot;Destination directory.&quot;));

    // A boolean option with a single name (-p)
    QCommandLineOption showProgressOption(&quot;p&quot;, QCoreApplication::translate(&quot;main&quot;, &quot;Show progress during copy&quot;));
    parser.addOption(showProgressOption);

    // A boolean option with multiple names (-f, --force)
    QCommandLineOption forceOption(QStringList() &amp;lt;&amp;lt; &quot;f&quot; &amp;lt;&amp;lt; &quot;force&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;Overwrite existing files.&quot;));
    parser.addOption(forceOption);

    // An option with a value
    QCommandLineOption targetDirectoryOption(QStringList() &amp;lt;&amp;lt; &quot;t&quot; &amp;lt;&amp;lt; &quot;target-directory&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;Copy all source files into &amp;lt;directory&amp;gt;.&quot;),
            QCoreApplication::translate(&quot;main&quot;, &quot;directory&quot;));
    parser.addOption(targetDirectoryOption);

    // Process the actual command line arguments given by the user
    parser.process(app);

    const QStringList args = parser.positionalArguments();
    // source is args.at(0), destination is args.at(1)

    bool showProgress = parser.isSet(showProgressOption);
    bool force = parser.isSet(forceOption);
    QString targetDir = parser.value(targetDirectoryOption);
    // ...
}
</db:programlisting>
<db:para>Returns the option instance, which can be used to call <db:link xlink:href="qcommandlineparser.xml#isSet">isSet</db:link>().</db:para>
</db:section>
<db:section xml:id="addOption">
<db:title>bool QCommandLineParser::addOption(const QCommandLineOption &amp;<db:emphasis>option</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addOption</db:methodname>
<db:methodparam>
<db:type>const QCommandLineOption &amp;</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addOption(const QCommandLineOption &amp;option)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the option <db:code role="parameter">option</db:code> to look for while parsing.</db:para>
<db:para>Returns true if adding the option was successful; otherwise returns false.</db:para>
<db:para>Adding the option fails if there is no name attached to the option, or the option has a name that clashes with an option name added before.</db:para>
</db:section>
<db:section xml:id="addOptions">
<db:title>[since 5.4] bool QCommandLineParser::addOptions(const QList&lt;QCommandLineOption&gt; &amp;<db:emphasis>options</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addOptions</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QCommandLineOption&gt; &amp;</db:type>
<db:parameter>options</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addOptions(const QList&lt;QCommandLineOption&gt; &amp;options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the options to look for while parsing. The options are specified by the parameter <db:code role="parameter">options</db:code>.</db:para>
<db:para>Returns true if adding all of the options was successful; otherwise returns false.</db:para>
<db:para>See the documentation for <db:link xlink:href="qcommandlineparser.xml#addOption">addOption</db:link>() for when this function may fail.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="addPositionalArgument">
<db:title>void QCommandLineParser::addPositionalArgument(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>description</db:emphasis>, const QString &amp;<db:emphasis>syntax</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addPositionalArgument</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>description</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>syntax</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addPositionalArgument(const QString &amp;name, const QString &amp;description, const QString &amp;syntax)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Defines an additional argument to the application, for the benefit of the help text.</db:para>
<db:para>The argument <db:code role="parameter">name</db:code> and <db:code role="parameter">description</db:code> will appear under the Arguments: section of the help. If <db:code role="parameter">syntax</db:code> is specified, it will be appended to the Usage line, otherwise the <db:code role="parameter">name</db:code> will be appended.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">// Usage: image-editor file
//
// Arguments:
//   file                  The file to open.
parser.addPositionalArgument(&quot;file&quot;, QCoreApplication::translate(&quot;main&quot;, &quot;The file to open.&quot;));

// Usage: web-browser [urls...]
//
// Arguments:
//   urls                URLs to open, optionally.
parser.addPositionalArgument(&quot;urls&quot;, QCoreApplication::translate(&quot;main&quot;, &quot;URLs to open, optionally.&quot;), &quot;[urls...]&quot;);

// Usage: cp source destination
//
// Arguments:
//   source                Source file to copy.
//   destination           Destination directory.
parser.addPositionalArgument(&quot;source&quot;, QCoreApplication::translate(&quot;main&quot;, &quot;Source file to copy.&quot;));
parser.addPositionalArgument(&quot;destination&quot;, QCoreApplication::translate(&quot;main&quot;, &quot;Destination directory.&quot;));
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#addHelpOption">addHelpOption</db:link>()</db:member>
<db:member><db:link xlink:href="qcommandlineparser.xml#helpText">helpText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addVersionOption">
<db:title>QCommandLineOption QCommandLineParser::addVersionOption()</db:title>
<db:methodsynopsis>
<db:type>QCommandLineOption</db:type>
<db:methodname>addVersionOption</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCommandLineOption addVersionOption()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the -v / --version option, which displays the version string of the application.</db:para>
<db:para>This option is handled automatically by <db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link>.</db:para>
<db:para>You can set the actual version string by using <db:link xlink:href="qcoreapplication.xml#applicationVersion-prop">QCoreApplication::setApplicationVersion</db:link>().</db:para>
<db:para>Returns the option instance, which can be used to call <db:link xlink:href="qcommandlineparser.xml#isSet">isSet</db:link>().</db:para>
</db:section>
<db:section xml:id="applicationDescription">
<db:title>QString QCommandLineParser::applicationDescription() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>applicationDescription</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString applicationDescription() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the application description set in <db:link xlink:href="qcommandlineparser.xml#setApplicationDescription">setApplicationDescription</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#setApplicationDescription">setApplicationDescription</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearPositionalArguments">
<db:title>void QCommandLineParser::clearPositionalArguments()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearPositionalArguments</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearPositionalArguments()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the definitions of additional arguments from the help text.</db:para>
<db:para>This is only needed for the special case of tools which support multiple commands with different options. Once the actual command has been identified, the options for this command can be defined, and the help text for the command can be adjusted accordingly.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QCoreApplication app(argc, argv);
QCommandLineParser parser;

parser.addPositionalArgument(&quot;command&quot;, &quot;The command to execute.&quot;);

// Call parse() to find out the positional arguments.
parser.parse(QCoreApplication::arguments());

const QStringList args = parser.positionalArguments();
const QString command = args.isEmpty() ? QString() : args.first();
if (command == &quot;resize&quot;) {
    parser.clearPositionalArguments();
    parser.addPositionalArgument(&quot;resize&quot;, &quot;Resize the object to a new size.&quot;, &quot;resize [resize_options]&quot;);
    parser.addOption(QCommandLineOption(&quot;size&quot;, &quot;New size.&quot;, &quot;new_size&quot;));
    parser.process(app);
    // ...
}

/*
This code results in context-dependent help:

$ tool --help
Usage: tool command

Arguments:
  command  The command to execute.

$ tool resize --help
Usage: tool resize [resize_options]

Options:
  --size &amp;lt;size&amp;gt;  New size.

Arguments:
  resize         Resize the object to a new size.
*/
</db:programlisting>
</db:section>
<db:section xml:id="errorText">
<db:title>QString QCommandLineParser::errorText() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorText</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorText() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a translated error text for the user. This should only be called when <db:link xlink:href="qcommandlineparser.xml#parse">parse</db:link>() returns false.</db:para>
</db:section>
<db:section xml:id="helpText">
<db:title>QString QCommandLineParser::helpText() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>helpText</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString helpText() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string containing the complete help information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#showHelp">showHelp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSet">
<db:title>bool QCommandLineParser::isSet(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSet</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSet(const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Checks whether the option <db:code role="parameter">name</db:code> was passed to the application.</db:para>
<db:para>Returns true if the option <db:code role="parameter">name</db:code> was set, false otherwise.</db:para>
<db:para>The name provided can be any long or short name of any option that was added with addOption(). All the options names are treated as being equivalent. If the name is not recognized or that option was not present, false is returned.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">bool verbose = parser.isSet(&quot;verbose&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="isSet-1">
<db:title>bool QCommandLineParser::isSet(const QCommandLineOption &amp;<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSet</db:methodname>
<db:methodparam>
<db:type>const QCommandLineOption &amp;</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSet(const QCommandLineOption &amp;option) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Checks whether the <db:code role="parameter">option</db:code> was passed to the application.</db:para>
<db:para>Returns true if the <db:code role="parameter">option</db:code> was set, false otherwise.</db:para>
<db:para>This is the recommended way to check for options with no values.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QCoreApplication app(argc, argv);
QCommandLineParser parser;
QCommandLineOption verboseOption(&quot;verbose&quot;);
parser.addOption(verboseOption);
parser.process(app);
bool verbose = parser.isSet(verboseOption);
</db:programlisting>
</db:section>
<db:section xml:id="optionNames">
<db:title>QStringList QCommandLineParser::optionNames() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>optionNames</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList optionNames() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of option names that were found.</db:para>
<db:para>This returns a list of all the recognized option names found by the parser, in the order in which they were found. For any long options that were in the form {–option=value}, the value part will have been dropped.</db:para>
<db:para>The names in this list do not include the preceding dash characters. Names may appear more than once in this list if they were encountered more than once by the parser.</db:para>
<db:para>Any entry in the list can be used with value() or with values() to get any relevant option values.</db:para>
</db:section>
<db:section xml:id="parse">
<db:title>bool QCommandLineParser::parse(const QStringList &amp;<db:emphasis>arguments</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>parse</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>arguments</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool parse(const QStringList &amp;arguments)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Parses the command line <db:code role="parameter">arguments</db:code>.</db:para>
<db:para>Most programs don't need to call this, a simple call to <db:link xlink:href="qcommandlineparser.xml#process">process</db:link>() is enough.</db:para>
<db:para>parse() is more low-level, and only does the parsing. The application will have to take care of the error handling, using <db:link xlink:href="qcommandlineparser.xml#errorText">errorText</db:link>() if parse() returns false. This can be useful for instance to show a graphical error message in graphical programs.</db:para>
<db:para>Calling parse() instead of <db:link xlink:href="qcommandlineparser.xml#process">process</db:link>() can also be useful in order to ignore unknown options temporarily, because more option definitions will be provided later on (depending on one of the arguments), before calling <db:link xlink:href="qcommandlineparser.xml#process">process</db:link>().</db:para>
<db:para>Don't forget that <db:code role="parameter">arguments</db:code> must start with the name of the executable (ignored, though).</db:para>
<db:para>Returns false in case of a parse error (unknown option or missing value); returns true otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#process">process</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="positionalArguments">
<db:title>QStringList QCommandLineParser::positionalArguments() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>positionalArguments</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList positionalArguments() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of positional arguments.</db:para>
<db:para>These are all of the arguments that were not recognized as part of an option.</db:para>
</db:section>
<db:section xml:id="process">
<db:title>void QCommandLineParser::process(const QStringList &amp;<db:emphasis>arguments</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>process</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>arguments</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void process(const QStringList &amp;arguments)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Processes the command line <db:code role="parameter">arguments</db:code>.</db:para>
<db:para>In addition to parsing the options (like <db:link xlink:href="qcommandlineparser.xml#parse">parse</db:link>()), this function also handles the builtin options and handles errors.</db:para>
<db:para>The builtin options are --version if <db:link xlink:href="qcommandlineparser.xml#addVersionOption">addVersionOption</db:link> was called and --help / --help-all if <db:link xlink:href="qcommandlineparser.xml#addHelpOption">addHelpOption</db:link> was called.</db:para>
<db:para>When invoking one of these options, or when an error happens (for instance an unknown option was passed), the current process will then stop, using the exit() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#arguments">QCoreApplication::arguments</db:link>()</db:member>
<db:member><db:link xlink:href="qcommandlineparser.xml#parse">parse</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="process-1">
<db:title>void QCommandLineParser::process(const QCoreApplication &amp;<db:emphasis>app</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>process</db:methodname>
<db:methodparam>
<db:type>const QCoreApplication &amp;</db:type>
<db:parameter>app</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void process(const QCoreApplication &amp;app)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The command line is obtained from the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> instance <db:code role="parameter">app</db:code>.</db:para>
</db:section>
<db:section xml:id="setApplicationDescription">
<db:title>void QCommandLineParser::setApplicationDescription(const QString &amp;<db:emphasis>description</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setApplicationDescription</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>description</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setApplicationDescription(const QString &amp;description)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the application <db:code role="parameter">description</db:code> shown by <db:link xlink:href="qcommandlineparser.xml#helpText">helpText</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#applicationDescription">applicationDescription</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOptionsAfterPositionalArgumentsMode">
<db:title>[since 5.6] void QCommandLineParser::setOptionsAfterPositionalArgumentsMode(QCommandLineParser::OptionsAfterPositionalArgumentsMode <db:emphasis>parsingMode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOptionsAfterPositionalArgumentsMode</db:methodname>
<db:methodparam>
<db:type>QCommandLineParser::OptionsAfterPositionalArgumentsMode</db:type>
<db:parameter>parsingMode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOptionsAfterPositionalArgumentsMode(QCommandLineParser::OptionsAfterPositionalArgumentsMode parsingMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the parsing mode to <db:code role="parameter">parsingMode</db:code>. This must be called before <db:link xlink:href="qcommandlineparser.xml#process">process</db:link>() or <db:link xlink:href="qcommandlineparser.xml#parse">parse</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="setSingleDashWordOptionMode">
<db:title>void QCommandLineParser::setSingleDashWordOptionMode(QCommandLineParser::SingleDashWordOptionMode <db:emphasis>singleDashWordOptionMode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSingleDashWordOptionMode</db:methodname>
<db:methodparam>
<db:type>QCommandLineParser::SingleDashWordOptionMode</db:type>
<db:parameter>singleDashWordOptionMode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSingleDashWordOptionMode(QCommandLineParser::SingleDashWordOptionMode singleDashWordOptionMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the parsing mode to <db:code role="parameter">singleDashWordOptionMode</db:code>. This must be called before <db:link xlink:href="qcommandlineparser.xml#process">process</db:link>() or <db:link xlink:href="qcommandlineparser.xml#parse">parse</db:link>().</db:para>
</db:section>
<db:section xml:id="showHelp">
<db:title>void QCommandLineParser::showHelp(int <db:emphasis>exitCode</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>showHelp</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>exitCode</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showHelp(int exitCode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Displays the help information, and exits the application. This is automatically triggered by the –help option, but can also be used to display the help when the user is not invoking the application correctly. The exit code is set to <db:code role="parameter">exitCode</db:code>. It should be set to 0 if the user requested to see the help, and to any other value in case of an error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#helpText">helpText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showVersion">
<db:title>[since 5.4] void QCommandLineParser::showVersion()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>showVersion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showVersion()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Displays the version information from <db:link xlink:href="qcoreapplication.xml#applicationVersion-prop">QCoreApplication::applicationVersion</db:link>(), and exits the application. This is automatically triggered by the –version option, but can also be used to display the version when not using <db:link xlink:href="qcommandlineparser.xml#process">process</db:link>(). The exit code is set to EXIT_SUCCESS (0).</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#addVersionOption">addVersionOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unknownOptionNames">
<db:title>QStringList QCommandLineParser::unknownOptionNames() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>unknownOptionNames</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList unknownOptionNames() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of unknown option names.</db:para>
<db:para>This list will include both long an short name options that were not recognized. For any long options that were in the form {–option=value}, the value part will have been dropped and only the long name is added.</db:para>
<db:para>The names in this list do not include the preceding dash characters. Names may appear more than once in this list if they were encountered more than once by the parser.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#optionNames">optionNames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>QString QCommandLineParser::value(const QString &amp;<db:emphasis>optionName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>optionName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString value(const QString &amp;optionName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the option value found for the given option name <db:code role="parameter">optionName</db:code>, or an empty string if not found.</db:para>
<db:para>The name provided can be any long or short name of any option that was added with addOption(). All the option names are treated as being equivalent. If the name is not recognized or that option was not present, an empty string is returned.</db:para>
<db:para>For options found by the parser, the last value found for that option is returned. If the option wasn't specified on the command line, the default value is returned.</db:para>
<db:para>An empty string is returned if the option does not take a value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#values">values</db:link>()</db:member>
<db:member><db:link xlink:href="qcommandlineoption.xml#setDefaultValue">QCommandLineOption::setDefaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qcommandlineoption.xml#setDefaultValues">QCommandLineOption::setDefaultValues</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value-1">
<db:title>QString QCommandLineParser::value(const QCommandLineOption &amp;<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>const QCommandLineOption &amp;</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString value(const QCommandLineOption &amp;option) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the option value found for the given <db:code role="parameter">option</db:code>, or an empty string if not found.</db:para>
<db:para>For options found by the parser, the last value found for that option is returned. If the option wasn't specified on the command line, the default value is returned.</db:para>
<db:para>An empty string is returned if the option does not take a value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#values">values</db:link>()</db:member>
<db:member><db:link xlink:href="qcommandlineoption.xml#setDefaultValue">QCommandLineOption::setDefaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qcommandlineoption.xml#setDefaultValues">QCommandLineOption::setDefaultValues</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="values">
<db:title>QStringList QCommandLineParser::values(const QString &amp;<db:emphasis>optionName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>values</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>optionName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList values(const QString &amp;optionName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of option values found for the given option name <db:code role="parameter">optionName</db:code>, or an empty list if not found.</db:para>
<db:para>The name provided can be any long or short name of any option that was added with addOption(). All the options names are treated as being equivalent. If the name is not recognized or that option was not present, an empty list is returned.</db:para>
<db:para>For options found by the parser, the list will contain an entry for each time the option was encountered by the parser. If the option wasn't specified on the command line, the default values are returned.</db:para>
<db:para>An empty list is returned if the option does not take a value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qcommandlineoption.xml#setDefaultValue">QCommandLineOption::setDefaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qcommandlineoption.xml#setDefaultValues">QCommandLineOption::setDefaultValues</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="values-1">
<db:title>QStringList QCommandLineParser::values(const QCommandLineOption &amp;<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>values</db:methodname>
<db:methodparam>
<db:type>const QCommandLineOption &amp;</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList values(const QCommandLineOption &amp;option) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of option values found for the given <db:code role="parameter">option</db:code>, or an empty list if not found.</db:para>
<db:para>For options found by the parser, the list will contain an entry for each time the option was encountered by the parser. If the option wasn't specified on the command line, the default values are returned.</db:para>
<db:para>An empty list is returned if the option does not take a value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcommandlineparser.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qcommandlineoption.xml#setDefaultValue">QCommandLineOption::setDefaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qcommandlineoption.xml#setDefaultValues">QCommandLineOption::setDefaultValues</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
