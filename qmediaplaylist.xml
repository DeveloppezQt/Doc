<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaPlaylist Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link> class provides a list of media content to play.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaPlaylist</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qmediabindableinterface.xml" xlink:role="class">QMediaBindableInterface</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaPlaylist is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_playback</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link> is intended to be used with other media objects, like <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link>.</db:para>
<db:para><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link> allows to access the service intrinsic playlist functionality if available, otherwise it provides the local memory playlist implementation.</db:para>
<db:programlisting language="cpp">playlist = new QMediaPlaylist;
playlist-&amp;gt;addMedia(QUrl(&quot;http://example.com/movie1.mp4&quot;));
playlist-&amp;gt;addMedia(QUrl(&quot;http://example.com/movie2.mp4&quot;));
playlist-&amp;gt;addMedia(QUrl(&quot;http://example.com/movie3.mp4&quot;));
playlist-&amp;gt;setCurrentIndex(1);

player = new QMediaPlayer;
player-&amp;gt;setPlaylist(playlist);

videoWidget = new QVideoWidget;
player-&amp;gt;setVideoOutput(videoWidget);
videoWidget-&amp;gt;show();

player-&amp;gt;play();
</db:programlisting>
<db:para>Depending on playlist source implementation, most of the playlist mutating operations can be asynchronous.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediacontent.xml">QMediaContent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QMediaPlaylist::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FormatError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FormatNotSupportedError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NetworkError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AccessDeniedError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the <db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link> error codes.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No errors.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link></db:emphasis>::FormatError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Format error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link></db:emphasis>::FormatNotSupportedError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Format not supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link></db:emphasis>::NetworkError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Network error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link></db:emphasis>::AccessDeniedError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Access denied error.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PlaybackMode-enum">
<db:title>enum QMediaPlaylist::PlaybackMode</db:title>
<db:enumsynopsis>
<db:enumname>PlaybackMode</db:enumname>
<db:enumitem>
<db:enumidentifier>CurrentItemOnce</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CurrentItemInLoop</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sequential</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Loop</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Random</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The QMediaPlaylist::PlaybackMode describes the order items in playlist are played.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link></db:emphasis>::CurrentItemOnce</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The current item is played only once.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link></db:emphasis>::CurrentItemInLoop</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The current item is played repeatedly in a loop.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link></db:emphasis>::Sequential</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Playback starts from the current and moves through each successive item until the last is reached and then stops. The next item is a null item when the last one is currently playing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link></db:emphasis>::Loop</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Playback restarts at the first item after the last has finished playing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link></db:emphasis>::Random</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Play items in random order.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>currentIndex</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentIndex</db:synopsisinfo>
<db:synopsisinfo role="setter">setCurrentIndex</db:synopsisinfo>
<db:synopsisinfo role="notifier">currentIndexChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Current position.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml#currentIndex">currentIndex</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml#setCurrentIndex">setCurrentIndex</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>playlistPosition</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml#currentIndexChanged">currentIndexChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="currentMedia-prop">
<db:title>[read-only] currentMedia : const QMediaContent</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaContent</db:type>
<db:varname>currentMedia</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentMedia</db:synopsisinfo>
<db:synopsisinfo role="notifier">currentMediaChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Current media content.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediacontent.xml">QMediaContent</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml#currentMedia">currentMedia</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml#currentMediaChanged">currentMediaChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qmediacontent.xml">QMediaContent</db:link></db:type> &amp;<db:emphasis>content</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="playbackMode-prop">
<db:title>playbackMode : QMediaPlaylist::PlaybackMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaPlaylist::PlaybackMode</db:type>
<db:varname>playbackMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">playbackMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setPlaybackMode</db:synopsisinfo>
<db:synopsisinfo role="notifier">playbackModeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the order that items in the playlist are played.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediaplaylist.xml#PlaybackMode-enum">QMediaPlaylist::PlaybackMode</db:link></db:type> <db:emphasis role="bold">playbackMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPlaybackMode</db:emphasis>(<db:type><db:link xlink:href="qmediaplaylist.xml#PlaybackMode-enum">QMediaPlaylist::PlaybackMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplaylist.xml#playbackModeChanged">playbackModeChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qmediaplaylist.xml#PlaybackMode-enum">QMediaPlaylist::PlaybackMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplaylist.xml#PlaybackMode-enum">QMediaPlaylist::PlaybackMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaPlaylist">
<db:title>[explicit] QMediaPlaylist::QMediaPlaylist(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaPlaylist</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaPlaylist(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a new playlist object with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaPlaylist">
<db:title>[virtual] QMediaPlaylist::~QMediaPlaylist()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QMediaPlaylist</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMediaPlaylist()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the playlist.</db:para>
</db:section>
<db:section xml:id="addMedia">
<db:title>bool QMediaPlaylist::addMedia(const QMediaContent &amp;<db:emphasis>content</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addMedia</db:methodname>
<db:methodparam>
<db:type>const QMediaContent &amp;</db:type>
<db:parameter>content</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addMedia(const QMediaContent &amp;content)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Append the media <db:code role="parameter">content</db:code> to the playlist.</db:para>
<db:para>Returns true if the operation is successful, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="addMedia-1">
<db:title>bool QMediaPlaylist::addMedia(const QList&lt;QMediaContent&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addMedia</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QMediaContent&gt; &amp;</db:type>
<db:parameter>items</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addMedia(const QList&lt;QMediaContent&gt; &amp;items)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Append multiple media content <db:code role="parameter">items</db:code> to the playlist.</db:para>
<db:para>Returns true if the operation is successful, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>bool QMediaPlaylist::clear()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Remove all the items from the playlist.</db:para>
<db:para>Returns true if the operation is successful, otherwise return false.</db:para>
</db:section>
<db:section xml:id="currentIndex">
<db:title>int QMediaPlaylist::currentIndex() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>currentIndex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">currentIndex</db:synopsisinfo>
<db:synopsisinfo role="signature">int currentIndex() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns position of the current media content in the playlist.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qmediaplaylist.xml#currentIndex-prop">currentIndex</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplaylist.xml#setCurrentIndex">setCurrentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentIndexChanged">
<db:title>void QMediaPlaylist::currentIndexChanged(int <db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>currentIndexChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">currentIndex</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentIndexChanged(int position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when playlist position changed to <db:code role="parameter">position</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplaylist.xml#currentIndex-prop">currentIndex</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="currentMedia">
<db:title>QMediaContent QMediaPlaylist::currentMedia() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaContent</db:type>
<db:methodname>currentMedia</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">currentMedia</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaContent currentMedia() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current media content.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qmediaplaylist.xml#currentMedia-prop">currentMedia</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="currentMediaChanged">
<db:title>void QMediaPlaylist::currentMediaChanged(const QMediaContent &amp;<db:emphasis>content</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>currentMediaChanged</db:methodname>
<db:methodparam>
<db:type>const QMediaContent &amp;</db:type>
<db:parameter>content</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">currentMedia</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentMediaChanged(const QMediaContent &amp;content)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when current media changes to <db:code role="parameter">content</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplaylist.xml#currentMedia-prop">currentMedia</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="error">
<db:title>QMediaPlaylist::Error QMediaPlaylist::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaPlaylist::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaPlaylist::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last error condition.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QMediaPlaylist::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string describing the last error condition.</db:para>
</db:section>
<db:section xml:id="insertMedia">
<db:title>bool QMediaPlaylist::insertMedia(int <db:emphasis>pos</db:emphasis>, const QMediaContent &amp;<db:emphasis>content</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>insertMedia</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMediaContent &amp;</db:type>
<db:parameter>content</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertMedia(int pos, const QMediaContent &amp;content)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Insert the media <db:code role="parameter">content</db:code> to the playlist at position <db:code role="parameter">pos</db:code>.</db:para>
<db:para>Returns true if the operation is successful, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="insertMedia-1">
<db:title>bool QMediaPlaylist::insertMedia(int <db:emphasis>pos</db:emphasis>, const QList&lt;QMediaContent&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>insertMedia</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;QMediaContent&gt; &amp;</db:type>
<db:parameter>items</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertMedia(int pos, const QList&lt;QMediaContent&gt; &amp;items)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Insert multiple media content <db:code role="parameter">items</db:code> to the playlist at position <db:code role="parameter">pos</db:code>.</db:para>
<db:para>Returns true if the operation is successful, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QMediaPlaylist::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the playlist contains no items, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplaylist.xml#mediaCount">mediaCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReadOnly">
<db:title>bool QMediaPlaylist::isReadOnly() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isReadOnly</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isReadOnly() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the playlist can be modified, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplaylist.xml#mediaCount">mediaCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load">
<db:title>void QMediaPlaylist::load(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QNetworkRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>format</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void load(const QNetworkRequest &amp;request, const char *format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Load playlist using network <db:code role="parameter">request</db:code>. If <db:code role="parameter">format</db:code> is specified, it is used, otherwise format is guessed from playlist name and data.</db:para>
<db:para>New items are appended to playlist.</db:para>
<db:para><db:link xlink:href="qmediaplaylist.xml#loaded">QMediaPlaylist::loaded</db:link>() signal is emitted if playlist was loaded successfully, otherwise the playlist emits <db:link xlink:href="qmediaplaylist.xml#loadFailed">loadFailed</db:link>().</db:para>
</db:section>
<db:section xml:id="load-1">
<db:title>void QMediaPlaylist::load(const QUrl &amp;<db:emphasis>location</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>format</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void load(const QUrl &amp;location, const char *format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Load playlist from <db:code role="parameter">location</db:code>. If <db:code role="parameter">format</db:code> is specified, it is used, otherwise format is guessed from location name and data.</db:para>
<db:para>New items are appended to playlist.</db:para>
<db:para><db:link xlink:href="qmediaplaylist.xml#loaded">QMediaPlaylist::loaded</db:link>() signal is emitted if playlist was loaded successfully, otherwise the playlist emits <db:link xlink:href="qmediaplaylist.xml#loadFailed">loadFailed</db:link>().</db:para>
</db:section>
<db:section xml:id="load-2">
<db:title>void QMediaPlaylist::load(QIODevice *<db:emphasis>device</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>format</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void load(QIODevice *device, const char *format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Load playlist from <db:link xlink:href="qiodevice.xml">QIODevice</db:link> <db:code role="parameter">device</db:code>. If <db:code role="parameter">format</db:code> is specified, it is used, otherwise format is guessed from device data.</db:para>
<db:para>New items are appended to playlist.</db:para>
<db:para><db:link xlink:href="qmediaplaylist.xml#loaded">QMediaPlaylist::loaded</db:link>() signal is emitted if playlist was loaded successfully, otherwise the playlist emits <db:link xlink:href="qmediaplaylist.xml#loadFailed">loadFailed</db:link>().</db:para>
</db:section>
<db:section xml:id="loadFailed">
<db:title>void QMediaPlaylist::loadFailed()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadFailed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadFailed()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted if failed to load playlist.</db:para>
</db:section>
<db:section xml:id="loaded">
<db:title>void QMediaPlaylist::loaded()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loaded</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loaded()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when playlist finished loading.</db:para>
</db:section>
<db:section xml:id="media">
<db:title>QMediaContent QMediaPlaylist::media(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaContent</db:type>
<db:methodname>media</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaContent media(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the media content at <db:code role="parameter">index</db:code> in the playlist.</db:para>
</db:section>
<db:section xml:id="mediaAboutToBeInserted">
<db:title>void QMediaPlaylist::mediaAboutToBeInserted(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mediaAboutToBeInserted</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mediaAboutToBeInserted(int start, int end)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when items are to be inserted at <db:code role="parameter">start</db:code> and ending at <db:code role="parameter">end</db:code>.</db:para>
</db:section>
<db:section xml:id="mediaAboutToBeRemoved">
<db:title>void QMediaPlaylist::mediaAboutToBeRemoved(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mediaAboutToBeRemoved</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mediaAboutToBeRemoved(int start, int end)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when item are to be deleted at <db:code role="parameter">start</db:code> and ending at <db:code role="parameter">end</db:code>.</db:para>
</db:section>
<db:section xml:id="mediaChanged">
<db:title>void QMediaPlaylist::mediaChanged(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mediaChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mediaChanged(int start, int end)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after media has been changed in the playlist between <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> positions inclusive.</db:para>
</db:section>
<db:section xml:id="mediaCount">
<db:title>int QMediaPlaylist::mediaCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>mediaCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int mediaCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of items in the playlist.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplaylist.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mediaInserted">
<db:title>void QMediaPlaylist::mediaInserted(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mediaInserted</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mediaInserted(int start, int end)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after media has been inserted into the playlist. The new items are those between <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> inclusive.</db:para>
</db:section>
<db:section xml:id="mediaObject">
<db:title>[override virtual] QMediaObject *QMediaPlaylist::mediaObject() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMediaObject *</db:type>
<db:methodname>mediaObject</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaObject * mediaObject() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qmediabindableinterface.xml#mediaObject" role="function">QMediaBindableInterface::mediaObject() const</db:link>.</db:para>
<db:para>Returns the <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link> instance that this <db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link> is bound too, or 0 otherwise.</db:para>
</db:section>
<db:section xml:id="mediaRemoved">
<db:title>void QMediaPlaylist::mediaRemoved(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mediaRemoved</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mediaRemoved(int start, int end)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after media has been removed from the playlist. The removed items are those between <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> inclusive.</db:para>
</db:section>
<db:section xml:id="moveMedia">
<db:title>[since 5.7] bool QMediaPlaylist::moveMedia(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>moveMedia</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>to</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool moveMedia(int from, int to)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move the item from position <db:code role="parameter">from</db:code> to position <db:code role="parameter">to</db:code>.</db:para>
<db:para>Returns true if the operation is successful, otherwise false.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="next">
<db:title>void QMediaPlaylist::next()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>next</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void next()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Advance to the next media content in playlist.</db:para>
</db:section>
<db:section xml:id="nextIndex">
<db:title>int QMediaPlaylist::nextIndex(int <db:emphasis>steps</db:emphasis> = 1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>nextIndex</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>steps</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int nextIndex(int steps) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the item, which would be current after calling <db:link xlink:href="qmediaplaylist.xml#next">next</db:link>() <db:code role="parameter">steps</db:code> times.</db:para>
<db:para>Returned value depends on the size of playlist, current position and playback mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplaylist.xml#playbackMode-prop">QMediaPlaylist::playbackMode</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplaylist.xml#previousIndex">previousIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="playbackModeChanged">
<db:title>void QMediaPlaylist::playbackModeChanged(QMediaPlaylist::PlaybackMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>playbackModeChanged</db:methodname>
<db:methodparam>
<db:type>QMediaPlaylist::PlaybackMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">playbackMode</db:synopsisinfo>
<db:synopsisinfo role="signature">void playbackModeChanged(QMediaPlaylist::PlaybackMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when playback mode changed to <db:code role="parameter">mode</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplaylist.xml#playbackMode-prop">playbackMode</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="previous">
<db:title>void QMediaPlaylist::previous()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>previous</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void previous()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return to the previous media content in playlist.</db:para>
</db:section>
<db:section xml:id="previousIndex">
<db:title>int QMediaPlaylist::previousIndex(int <db:emphasis>steps</db:emphasis> = 1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>previousIndex</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>steps</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int previousIndex(int steps) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the item, which would be current after calling <db:link xlink:href="qmediaplaylist.xml#previous">previous</db:link>() <db:code role="parameter">steps</db:code> times.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplaylist.xml#playbackMode-prop">QMediaPlaylist::playbackMode</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplaylist.xml#nextIndex">nextIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeMedia">
<db:title>bool QMediaPlaylist::removeMedia(int <db:emphasis>pos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>removeMedia</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeMedia(int pos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Remove the item from the playlist at position <db:code role="parameter">pos</db:code>.</db:para>
<db:para>Returns true if the operation is successful, otherwise return false.</db:para>
</db:section>
<db:section xml:id="removeMedia-1">
<db:title>bool QMediaPlaylist::removeMedia(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>removeMedia</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeMedia(int start, int end)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Remove items in the playlist from <db:code role="parameter">start</db:code> to <db:code role="parameter">end</db:code> inclusive.</db:para>
<db:para>Returns true if the operation is successful, otherwise return false.</db:para>
</db:section>
<db:section xml:id="save">
<db:title>bool QMediaPlaylist::save(const QUrl &amp;<db:emphasis>location</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>save</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>format</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool save(const QUrl &amp;location, const char *format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Save playlist to <db:code role="parameter">location</db:code>. If <db:code role="parameter">format</db:code> is specified, it is used, otherwise format is guessed from location name.</db:para>
<db:para>Returns true if playlist was saved successfully, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="save-1">
<db:title>bool QMediaPlaylist::save(QIODevice *<db:emphasis>device</db:emphasis>, const char *<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>save</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool save(QIODevice *device, const char *format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Save playlist to <db:link xlink:href="qiodevice.xml">QIODevice</db:link> <db:code role="parameter">device</db:code> using format <db:code role="parameter">format</db:code>.</db:para>
<db:para>Returns true if playlist was saved successfully, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="setCurrentIndex">
<db:title>void QMediaPlaylist::setCurrentIndex(int <db:emphasis>playlistPosition</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCurrentIndex</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>playlistPosition</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">currentIndex</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCurrentIndex(int playlistPosition)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Activate media content from playlist at position <db:code role="parameter">playlistPosition</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qmediaplaylist.xml#currentIndex-prop">currentIndex</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplaylist.xml#currentIndex">currentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shuffle">
<db:title>void QMediaPlaylist::shuffle()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>shuffle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void shuffle()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shuffle items in the playlist.</db:para>
</db:section>
</db:section>
</db:article>
