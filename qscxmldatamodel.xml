<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScxmlDataModel Class</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SCXML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscxmldatamodel.xml">QScxmlDataModel</db:link> class is the data model base class for a Qt SCXML state machine.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScxmlDataModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Scxml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Scxml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += scxml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qscxmlcppdatamodel.xml" xlink:role="class">QScxmlCppDataModel</db:link> and <db:link xlink:href="qscxmlnulldatamodel.xml" xlink:role="class">QScxmlNullDataModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>SCXML data models are described in <db:link xlink:href="https://www.w3.org/TR/scxml/#data-module">SCXML Specification - 5 Data Model and Data Manipulation</db:link>. For more information about supported data models, see <db:link xlink:href="qtscxml-scxml-compliance.xml">SCXML Compliance</db:link>.</db:para>
<db:para>One data model can only belong to one state machine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlstatemachine.xml">QScxmlStateMachine</db:link></db:member>
<db:member><db:link xlink:href="qscxmlcppdatamodel.xml">QScxmlCppDataModel</db:link></db:member>
<db:member><db:link xlink:href="qscxmlnulldatamodel.xml">QScxmlNullDataModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="stateMachine-prop">
<db:title>[bindable] stateMachine : QScxmlStateMachine*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QScxmlStateMachine*</db:type>
<db:varname>stateMachine</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">stateMachine</db:synopsisinfo>
<db:synopsisinfo role="setter">setStateMachine</db:synopsisinfo>
<db:synopsisinfo role="notifier">stateMachineChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the state machine this data model belongs to.</db:para>
<db:para>A data model can only belong to a single state machine and a state machine can only have one data model. This relation needs to be set up before the state machine is started. Setting this property on a data model will automatically set the corresponding <db:code>dataModel</db:code> property on the <db:code role="parameter">stateMachine</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScxmlDataModel">
<db:title>[explicit] QScxmlDataModel::QScxmlDataModel(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QScxmlDataModel</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QScxmlDataModel(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new data model, with the parent object <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QScxmlDataModel-1">
<db:title>[explicit protected] QScxmlDataModel::QScxmlDataModel(QScxmlDataModelPrivate &amp;<db:emphasis>dd</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QScxmlDataModel</db:methodname>
<db:methodparam>
<db:type>QScxmlDataModelPrivate &amp;</db:type>
<db:parameter>dd</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QScxmlDataModel(QScxmlDataModelPrivate &amp;dd, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new data model from the private object <db:code role="parameter">dd</db:code>, with the parent object <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="createScxmlDataModel">
<db:title>[static] QScxmlDataModel *QScxmlDataModel::createScxmlDataModel(const QString &amp;<db:emphasis>pluginKey</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QScxmlDataModel *</db:type>
<db:methodname>createScxmlDataModel</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>pluginKey</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QScxmlDataModel * createScxmlDataModel(const QString &amp;pluginKey)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a data model from a plugin specified by a <db:code role="parameter">pluginKey</db:code>.</db:para>
</db:section>
<db:section xml:id="evaluateAssignment">
<db:title>[pure virtual] void QScxmlDataModel::evaluateAssignment(QScxmlExecutableContent::EvaluatorId <db:emphasis>id</db:emphasis>, bool *<db:emphasis>ok</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>evaluateAssignment</db:methodname>
<db:methodparam>
<db:type>QScxmlExecutableContent::EvaluatorId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void evaluateAssignment(QScxmlExecutableContent::EvaluatorId id, bool *ok) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Evaluates the assignment pointed to by <db:code role="parameter">id</db:code> and sets <db:code role="parameter">ok</db:code> to <db:code>false</db:code> if there was an error or to <db:code>true</db:code> if there was not.</db:para>
</db:section>
<db:section xml:id="evaluateForeach">
<db:title>[pure virtual] void QScxmlDataModel::evaluateForeach(QScxmlExecutableContent::EvaluatorId <db:emphasis>id</db:emphasis>, bool *<db:emphasis>ok</db:emphasis>, QScxmlDataModel::ForeachLoopBody *<db:emphasis>body</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>evaluateForeach</db:methodname>
<db:methodparam>
<db:type>QScxmlExecutableContent::EvaluatorId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QScxmlDataModel::ForeachLoopBody *</db:type>
<db:parameter>body</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void evaluateForeach(QScxmlExecutableContent::EvaluatorId id, bool *ok, QScxmlDataModel::ForeachLoopBody *body) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Evaluates the foreach loop pointed to by <db:code role="parameter">id</db:code> and sets <db:code role="parameter">ok</db:code> to <db:code>false</db:code> if there was an error or to <db:code>true</db:code> if there was not. The <db:code role="parameter">body</db:code> is executed on each iteration.</db:para>
</db:section>
<db:section xml:id="evaluateInitialization">
<db:title>[pure virtual] void QScxmlDataModel::evaluateInitialization(QScxmlExecutableContent::EvaluatorId <db:emphasis>id</db:emphasis>, bool *<db:emphasis>ok</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>evaluateInitialization</db:methodname>
<db:methodparam>
<db:type>QScxmlExecutableContent::EvaluatorId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void evaluateInitialization(QScxmlExecutableContent::EvaluatorId id, bool *ok) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Evaluates the initialization pointed to by <db:code role="parameter">id</db:code> and sets <db:code role="parameter">ok</db:code> to <db:code>false</db:code> if there was an error or to <db:code>true</db:code> if there was not.</db:para>
</db:section>
<db:section xml:id="evaluateToBool">
<db:title>[pure virtual] bool QScxmlDataModel::evaluateToBool(QScxmlExecutableContent::EvaluatorId <db:emphasis>id</db:emphasis>, bool *<db:emphasis>ok</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>evaluateToBool</db:methodname>
<db:methodparam>
<db:type>QScxmlExecutableContent::EvaluatorId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool evaluateToBool(QScxmlExecutableContent::EvaluatorId id, bool *ok) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Evaluates the executable content pointed to by <db:code role="parameter">id</db:code> and sets <db:code role="parameter">ok</db:code> to <db:code>false</db:code> if there was an error or to <db:code>true</db:code> if there was not. Returns the result of the evaluation as a boolean value.</db:para>
</db:section>
<db:section xml:id="evaluateToString">
<db:title>[pure virtual] QString QScxmlDataModel::evaluateToString(QScxmlExecutableContent::EvaluatorId <db:emphasis>id</db:emphasis>, bool *<db:emphasis>ok</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QString</db:type>
<db:methodname>evaluateToString</db:methodname>
<db:methodparam>
<db:type>QScxmlExecutableContent::EvaluatorId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString evaluateToString(QScxmlExecutableContent::EvaluatorId id, bool *ok) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Evaluates the executable content pointed to by <db:code role="parameter">id</db:code> and sets <db:code role="parameter">ok</db:code> to <db:code>false</db:code> if there was an error or to <db:code>true</db:code> if there was not. Returns the result of the evaluation as a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
</db:section>
<db:section xml:id="evaluateToVariant">
<db:title>[pure virtual] QVariant QScxmlDataModel::evaluateToVariant(QScxmlExecutableContent::EvaluatorId <db:emphasis>id</db:emphasis>, bool *<db:emphasis>ok</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>evaluateToVariant</db:methodname>
<db:methodparam>
<db:type>QScxmlExecutableContent::EvaluatorId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant evaluateToVariant(QScxmlExecutableContent::EvaluatorId id, bool *ok) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Evaluates the executable content pointed to by <db:code role="parameter">id</db:code> and sets <db:code role="parameter">ok</db:code> to <db:code>false</db:code> if there was an error or to <db:code>true</db:code> if there was not. Returns the result of the evaluation as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="evaluateToVoid">
<db:title>[pure virtual] void QScxmlDataModel::evaluateToVoid(QScxmlExecutableContent::EvaluatorId <db:emphasis>id</db:emphasis>, bool *<db:emphasis>ok</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>evaluateToVoid</db:methodname>
<db:methodparam>
<db:type>QScxmlExecutableContent::EvaluatorId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void evaluateToVoid(QScxmlExecutableContent::EvaluatorId id, bool *ok) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Evaluates the executable content pointed to by <db:code role="parameter">id</db:code> and sets <db:code role="parameter">ok</db:code> to <db:code>false</db:code> if there was an error or to <db:code>true</db:code> if there was not. The execution is expected to return no result.</db:para>
</db:section>
<db:section xml:id="hasScxmlProperty">
<db:title>[pure virtual] bool QScxmlDataModel::hasScxmlProperty(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasScxmlProperty</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasScxmlProperty(const QString &amp;name) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if a property with the given <db:code role="parameter">name</db:code> exists, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="scxmlProperty">
<db:title>[pure virtual] QVariant QScxmlDataModel::scxmlProperty(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>scxmlProperty</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant scxmlProperty(const QString &amp;name) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property <db:code role="parameter">name</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmldatamodel.xml#setScxmlProperty">setScxmlProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScxmlEvent">
<db:title>[pure virtual] void QScxmlDataModel::setScxmlEvent(const QScxmlEvent &amp;<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setScxmlEvent</db:methodname>
<db:methodparam>
<db:type>const QScxmlEvent &amp;</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setScxmlEvent(const QScxmlEvent &amp;event) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">event</db:code> to use in the subsequent executable content execution.</db:para>
</db:section>
<db:section xml:id="setScxmlProperty">
<db:title>[pure virtual] bool QScxmlDataModel::setScxmlProperty(const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, const QString &amp;<db:emphasis>context</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setScxmlProperty</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setScxmlProperty(const QString &amp;name, const QVariant &amp;value, const QString &amp;context) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a the value <db:code role="parameter">value</db:code> for the property <db:code role="parameter">name</db:code>.</db:para>
<db:para>The <db:code role="parameter">context</db:code> is a string that is used in error messages to indicate the location in the SCXML file where the error occurred.</db:para>
<db:para>Returns <db:code>true</db:code> if successful or <db:code>false</db:code> if an error occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmldatamodel.xml#scxmlProperty">scxmlProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStateMachine">
<db:title>void QScxmlDataModel::setStateMachine(QScxmlStateMachine *<db:emphasis>stateMachine</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStateMachine</db:methodname>
<db:methodparam>
<db:type>QScxmlStateMachine *</db:type>
<db:parameter>stateMachine</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">stateMachine</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStateMachine(QScxmlStateMachine *stateMachine)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the state machine this model belongs to to <db:code role="parameter">stateMachine</db:code>. There is a 1:1 relation between state machines and models. After setting the state machine once you cannot change it anymore. Any further attempts to set the state machine using this method will be ignored.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qscxmldatamodel.xml#stateMachine-prop">stateMachine</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmldatamodel.xml#stateMachine">stateMachine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setup">
<db:title>[pure virtual] bool QScxmlDataModel::setup(const QVariantMap &amp;<db:emphasis>initialDataValues</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setup</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>initialDataValues</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setup(const QVariantMap &amp;initialDataValues) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes the data model with the initial values specified by <db:code role="parameter">initialDataValues</db:code>.</db:para>
<db:para>Returns <db:code>false</db:code> if parse errors occur or if any of the initialization steps fail. Returns <db:code>true</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="stateMachine">
<db:title>QScxmlStateMachine *QScxmlDataModel::stateMachine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QScxmlStateMachine *</db:type>
<db:methodname>stateMachine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">stateMachine</db:synopsisinfo>
<db:synopsisinfo role="signature">QScxmlStateMachine * stateMachine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the state machine associated with the data model.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qscxmldatamodel.xml#stateMachine-prop">stateMachine</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmldatamodel.xml#setStateMachine">setStateMachine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
