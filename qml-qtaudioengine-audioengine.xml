<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>AudioEngine QML Type</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Organize all your 3d audio content in one place.</db:para>
<db:para><db:emphasis role="bold">This type is under development and is subject to change.</db:emphasis></db:para>
<db:para>This type was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtAudioEngine 1.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-item.xml">Item</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>AudioEngine is part of <db:simplelist><db:member>multimedia_audioengine</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Preliminary</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This type is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:programlisting language="qml">Rectangle {
    color:&quot;white&quot;
    width: 300
    height: 500

    AudioEngine {
        id:audioengine

        AudioSample {
            name:&quot;explosion&quot;
            source: &quot;explosion-02.wav&quot;
        }

        Sound {
            name:&quot;explosion&quot;
            PlayVariation {
                sample:&quot;explosion&quot;
            }
        }

        dopplerFactor: 1
        speedOfSound: 343.33 // Approximate speed of sound in air at 20 degrees Celsius

        listener.up:&quot;0,0,1&quot;
        listener.position:&quot;0,0,0&quot;
        listener.velocity:&quot;0,0,0&quot;
        listener.direction:&quot;0,1,0&quot;
    }

    MouseArea {
        anchors.fill: parent
        onPressed: {
            audioengine.sounds[&quot;explosion&quot;].play();
        }
    }
}
</db:programlisting>
<db:para><db:code>AudioEngine</db:code> acts as a central library for configuring all 3d audio content in an app, so you should define only one in your app.</db:para>
<db:para>It is mostly used as a container to access other types such as <db:link xlink:href="qml-qtaudioengine-audiocategory.xml">AudioCategory</db:link>, <db:link xlink:href="qml-qtaudioengine-audiosample.xml">AudioSample</db:link> and Sound.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtaudioengine-audiocategory.xml">AudioCategory</db:link></db:member>
<db:member><db:link xlink:href="qml-qtaudioengine-audiosample.xml">AudioSample</db:link></db:member>
<db:member><db:link xlink:href="qml-qtaudioengine-sound.xml">Sound</db:link></db:member>
<db:member><db:link xlink:href="qml-qtaudioengine-soundinstance.xml">SoundInstance</db:link></db:member>
<db:member><db:link xlink:href="qml-qtaudioengine-attenuationmodellinear.xml">AttenuationModelLinear</db:link></db:member>
<db:member><db:link xlink:href="qml-qtaudioengine-attenuationmodelinverse.xml">AttenuationModelInverse</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="categories-prop">
<db:title>[read-only] categories : map</db:title>
<db:para>Container of all <db:link xlink:href="qml-qtaudioengine-audiocategory.xml">AudioCategory</db:link> instances.</db:para>
</db:section>
<db:section xml:id="dopplerFactor-prop">
<db:title>dopplerFactor : real</db:title>
<db:para>This property holds a simple scaling for the effect of doppler shift.</db:para>
</db:section>
<db:section xml:id="listener-prop">
<db:title>[read-only] listener : QtAudioEngine::AudioListener</db:title>
<db:para>This property holds the listener object. You can change various properties to affect the 3D positioning of sounds.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtaudioengine-audiolistener.xml">AudioListener</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="liveInstances-prop">
<db:title>[read-only] liveInstances : int</db:title>
<db:para>This property indicates how many live sound instances there are at the moment.</db:para>
</db:section>
<db:section xml:id="loading-prop">
<db:title>[read-only] loading : bool</db:title>
<db:para>This property indicates if the audio engine is loading any audio sample at the moment. This may be useful if you specified the preloaded property in <db:link xlink:href="qml-qtaudioengine-audiosample.xml">AudioSample</db:link> and would like to show a loading screen to the user before all audio samples are loaded.</db:para>
<db:para>/sa <db:link xlink:href="qml-qtaudioengine-audioengine.xml#finishedLoading-signal">finishedLoading</db:link>, <db:link xlink:href="qml-qtaudioengine-audiosample.xml#preloaded-prop">AudioSample::preloaded</db:link></db:para>
</db:section>
<db:section xml:id="samples-prop">
<db:title>[read-only] samples : map</db:title>
<db:para>Container of all <db:link xlink:href="qml-qtaudioengine-audiosample.xml">AudioSample</db:link> instances.</db:para>
</db:section>
<db:section xml:id="sounds-prop">
<db:title>[read-only] sounds : map</db:title>
<db:para>Container of all Sound instances.</db:para>
</db:section>
<db:section xml:id="speedOfSound-prop">
<db:title>speedOfSound : real</db:title>
<db:para>This property holds the reference value of the sound speed (in meters per second) which will be used in doppler shift calculation. The doppler shift calculation is used to emulate the change in frequency in sound that is perceived by an observer when the sound source is travelling towards or away from the observer. The speed of sound depends on the medium the sound is propagating through.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="finishedLoading-signal">
<db:title>finishedLoading()</db:title>
<db:para>This signal is emitted when <db:link xlink:href="qml-qtaudioengine-audioengine.xml#loading-prop">loading</db:link> has completed.</db:para>
<db:para>The corresponding handler is <db:code>onFinishedLoading</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onFinishedLoading</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="isLoadingChanged-signal">
<db:title>isLoadingChanged()</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qml-qtaudioengine-audioengine.xml#loading-prop">loading</db:link> property changes.</db:para>
<db:para>The corresponding handler is <db:code>onIsLoadingChanged</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onIsLoadingChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="liveInstanceCountChanged-signal">
<db:title>liveInstanceCountChanged()</db:title>
<db:para>This signal is emitted when the number of live instances managed by the <db:link xlink:href="qml-qtaudioengine-audioengine.xml">AudioEngine</db:link> is changed.</db:para>
<db:para>The corresponding handler is <db:code>onLiveInstanceCountChanged</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLiveInstanceCountChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="ready-signal">
<db:title>ready()</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qml-qtaudioengine-audioengine.xml">AudioEngine</db:link> is ready to use.</db:para>
<db:para>The corresponding handler is <db:code>onReady</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onReady</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addAttenuationModel-method">
<db:title>addAttenuationModel(AttenuationModel <db:emphasis>attenuationModel</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">attenuationModel</db:code> to the engine. This can be used when the <db:link xlink:href="qml-qtaudioengine-attenuationmodellinear.xml">AttenuationModelLinear</db:link> / <db:link xlink:href="qml-qtaudioengine-attenuationmodelinverse.xml">AttenuationModelInverse</db:link> is created dynamically:</db:para>
<db:programlisting language="qml">import QtAudioEngine 1.1

AudioEngine {
    id: engine

    Component.onCompleted: {
        var attenuationModel = Qt.createQmlObject('import QtAudioEngine 1.1; AttenuationModelLinear {}', engine);
        attenuationModel.name =&quot;linear&quot;
        attenuationModel.start = 20
        attenuationModel.end = 180
        engine.addAttenuationModel(attenuationModel);
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="addAudioCategory-method">
<db:title>addAudioCategory(AudioCategory <db:emphasis>category</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">category</db:code> to the engine. This can be used when the <db:link xlink:href="qml-qtaudioengine-audiocategory.xml">AudioCategory</db:link> is created dynamically:</db:para>
<db:programlisting language="qml">import QtAudioEngine 1.1

AudioEngine {
    id: engine

    Component.onCompleted: {
        var category = Qt.createQmlObject('import QtAudioEngine 1.1; AudioCategory {}', engine);
        category.name = &quot;sample&quot;;
        category.volume = 0.9;
        engine.addAudioCategory(category);
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="addAudioSample-method">
<db:title>addAudioSample(AudioSample <db:emphasis>sample</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">sample</db:code> to the engine. This can be used when the <db:link xlink:href="qml-qtaudioengine-audiosample.xml">AudioSample</db:link> is created dynamically:</db:para>
<db:programlisting language="qml">import QtAudioEngine 1.1

AudioEngine {
    id: engine

    Component.onCompleted: {
        var sample = Qt.createQmlObject('import QtAudioEngine 1.1; AudioSample {}', engine);
        sample.name = &quot;example&quot;;
        sample.source = &quot;example.wav&quot;;
        engine.addAudioSample(sample);
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="addSound-method">
<db:title>addSound(Sound <db:emphasis>sound</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">sound</db:code> to the engine. This can be used when the Sound is created dynamically:</db:para>
<db:programlisting language="qml">import QtAudioEngine 1.1

AudioEngine {
    id: engine

    Component.onCompleted: {
        var sound = Qt.createQmlObject('import QtAudioEngine 1.1; Sound {}', engine);
        sound.name = &quot;example&quot;;
        engine.addSound(sound);
    }
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
