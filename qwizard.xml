<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWizard Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwizard.xml">QWizard</db:link> class provides a framework for wizards.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWizard</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdialog.xml" xlink:role="class">QDialog</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A wizard (also called an assistant on macOS) is a special type of input dialog that consists of a sequence of pages. A wizard's purpose is to guide the user through a process step by step. Wizards are useful for complex or infrequent tasks that users may find difficult to learn.</db:para>
<db:para><db:link xlink:href="qwizard.xml">QWizard</db:link> inherits <db:link xlink:href="qdialog.xml">QDialog</db:link> and represents a wizard. Each page is a <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link> (a <db:link xlink:href="qwidget.xml">QWidget</db:link> subclass). To create your own wizards, you can use these classes directly, or you can subclass them for more control.</db:para>
<db:para>Topics:</db:para>
<db:section xml:id="a-trivial-example">
<db:title>A Trivial Example</db:title>
<db:para>The following example illustrates how to create wizard pages and add them to a wizard. For more advanced examples, see <db:link xlink:href="qtwidgets-dialogs-classwizard-example.xml">Class Wizard</db:link> and <db:link xlink:href="qtwidgets-dialogs-licensewizard-example.xml">License Wizard</db:link>.</db:para>
<db:programlisting language="cpp">QWizardPage *createIntroPage()
{
    QWizardPage *page = new QWizardPage;
    page-&amp;gt;setTitle(&quot;Introduction&quot;);

    QLabel *label = new QLabel(&quot;This wizard will help you register your copy &quot;
                               &quot;of Super Product Two.&quot;);
    label-&amp;gt;setWordWrap(true);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&amp;gt;addWidget(label);
    page-&amp;gt;setLayout(layout);

    return page;
}

QWizardPage *createRegistrationPage()
{
    ...
}

QWizardPage *createConclusionPage()
{
    ...
}

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

#ifndef QT_NO_TRANSLATION
    QString translatorFileName = QLatin1String(&quot;qtbase_&quot;);
    translatorFileName += QLocale::system().name();
    QTranslator *translator = new QTranslator(&amp;amp;app);
    if (translator-&amp;gt;load(translatorFileName, QLibraryInfo::path(QLibraryInfo::TranslationsPath)))
        app.installTranslator(translator);
#endif

    QWizard wizard;
    wizard.addPage(createIntroPage());
    wizard.addPage(createRegistrationPage());
    wizard.addPage(createConclusionPage());

    wizard.setWindowTitle(&quot;Trivial Wizard&quot;);
    wizard.show();

    return app.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="wizard-look-and-feel">
<db:title>Wizard Look and Feel</db:title>
<db:para><db:link xlink:href="qwizard.xml">QWizard</db:link> supports four wizard looks:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qwizard.xml#WizardStyle-enum">ClassicStyle</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwizard.xml#WizardStyle-enum">MacStyle</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwizard.xml#WizardStyle-enum">AeroStyle</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You can explicitly set the look to use using <db:link xlink:href="qwizard.xml#wizardStyle-prop">setWizardStyle</db:link>() (e.g., if you want the same look on all platforms).</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qwizard.xml#WizardStyle-enum">ClassicStyle</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qwizard.xml#WizardStyle-enum">MacStyle</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qwizard.xml#WizardStyle-enum">AeroStyle</db:link></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtwizard-classic1.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtwizard-modern1.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtwizard-mac1.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtwizard-aero1.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtwizard-classic2.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtwizard-modern2.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtwizard-mac2.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtwizard-aero2.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note: <db:link xlink:href="qwizard.xml#WizardStyle-enum">AeroStyle</db:link> has effect only on a Windows Vista system with alpha compositing enabled. <db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link> is used as a fallback when this condition is not met.</db:para>
<db:para>In addition to the wizard style, there are several options that control the look and feel of the wizard. These can be set using <db:link xlink:href="qwizard.xml#setOption">setOption</db:link>() or <db:link xlink:href="qwizard.xml#options-prop">setOptions</db:link>(). For example, <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveHelpButton</db:link> makes <db:link xlink:href="qwizard.xml">QWizard</db:link> show a <db:guilabel>Help</db:guilabel> button along with the other wizard buttons.</db:para>
<db:para>You can even change the order of the wizard buttons to any arbitrary order using <db:link xlink:href="qwizard.xml#setButtonLayout">setButtonLayout</db:link>(), and you can add up to three custom buttons (e.g., a <db:guilabel>Print</db:guilabel> button) to the button row. This is achieved by calling <db:link xlink:href="qwizard.xml#setButton">setButton</db:link>() or <db:link xlink:href="qwizard.xml#setButtonText">setButtonText</db:link>() with <db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton1</db:link>, <db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton2</db:link>, or <db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton3</db:link> to set up the button, and by enabling the <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton1</db:link>, <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton2</db:link>, or <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton3</db:link> options. Whenever the user clicks a custom button, <db:link xlink:href="qwizard.xml#customButtonClicked">customButtonClicked</db:link>() is emitted. For example:</db:para>
<db:programlisting language="cpp">        wizard()-&amp;gt;setButtonText(QWizard::CustomButton1, tr(&quot;&amp;amp;Print&quot;));
        wizard()-&amp;gt;setOption(QWizard::HaveCustomButton1, true);
        connect(wizard(), &amp;amp;QWizard::customButtonClicked,
                this, &amp;amp;ConclusionPage::printButtonClicked);
</db:programlisting>
</db:section>
<db:section xml:id="elements-of-a-wizard-page">
<db:title>Elements of a Wizard Page</db:title>
<db:para>Wizards consist of a sequence of <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link>s. At any time, only one page is shown. A page has the following attributes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A <db:link xlink:href="qwizardpage.xml#title-prop">title</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qwizardpage.xml#subTitle-prop">subTitle</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>A set of pixmaps, which may or may not be honored, depending on the wizard's style:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qwizard.xml#WizardPixmap-enum">WatermarkPixmap</db:link> (used by <db:link xlink:href="qwizard.xml#WizardStyle-enum">ClassicStyle</db:link> and <db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwizard.xml#WizardPixmap-enum">BannerPixmap</db:link> (used by <db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwizard.xml#WizardPixmap-enum">LogoPixmap</db:link> (used by <db:link xlink:href="qwizard.xml#WizardStyle-enum">ClassicStyle</db:link> and <db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwizard.xml#WizardPixmap-enum">BackgroundPixmap</db:link> (used by <db:link xlink:href="qwizard.xml#WizardStyle-enum">MacStyle</db:link>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:para>The diagram belows shows how <db:link xlink:href="qwizard.xml">QWizard</db:link> renders these attributes, assuming they are all present and <db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link> is used:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtwizard-nonmacpage.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>When a <db:link xlink:href="qwizardpage.xml#subTitle-prop">subTitle</db:link> is set, <db:link xlink:href="qwizard.xml">QWizard</db:link> displays it in a header, in which case it also uses the <db:link xlink:href="qwizard.xml#WizardPixmap-enum">BannerPixmap</db:link> and the <db:link xlink:href="qwizard.xml#WizardPixmap-enum">LogoPixmap</db:link> to decorate the header. The <db:link xlink:href="qwizard.xml#WizardPixmap-enum">WatermarkPixmap</db:link> is displayed on the left side, below the header. At the bottom, there is a row of buttons allowing the user to navigate through the pages.</db:para>
<db:para>The page itself (the <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link> widget) occupies the area between the header, the watermark, and the button row. Typically, the page is a <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link> on which a <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> is installed, with standard child widgets (<db:link xlink:href="qlabel.xml">QLabel</db:link>s, <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>s, etc.).</db:para>
<db:para>If the wizard's style is <db:link xlink:href="qwizard.xml#WizardStyle-enum">MacStyle</db:link>, the page looks radically different:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtwizard-macpage.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The watermark, banner, and logo pixmaps are ignored by the <db:link xlink:href="qwizard.xml#WizardStyle-enum">MacStyle</db:link>. If the <db:link xlink:href="qwizard.xml#WizardPixmap-enum">BackgroundPixmap</db:link> is set, it is used as the background for the wizard; otherwise, a default &quot;assistant&quot; image is used.</db:para>
<db:para>The title and subtitle are set by calling <db:link xlink:href="qwizardpage.xml#title-prop">QWizardPage::setTitle</db:link>() and <db:link xlink:href="qwizardpage.xml#subTitle-prop">QWizardPage::setSubTitle</db:link>() on the individual pages. They may be plain text or HTML (see <db:link xlink:href="qwizard.xml#titleFormat-prop">titleFormat</db:link> and <db:link xlink:href="qwizard.xml#subTitleFormat-prop">subTitleFormat</db:link>). The pixmaps can be set globally for the entire wizard using <db:link xlink:href="qwizard.xml#setPixmap">setPixmap</db:link>(), or on a per-page basis using <db:link xlink:href="qwizardpage.xml#setPixmap">QWizardPage::setPixmap</db:link>().</db:para>
<db:anchor xml:id="field-mechanism"/>
</db:section>
<db:section xml:id="registering-and-using-fields">
<db:title>Registering and Using Fields</db:title>
<db:para>In many wizards, the contents of a page may affect the default values of the fields of a later page. To make it easy to communicate between pages, <db:link xlink:href="qwizard.xml">QWizard</db:link> supports a &quot;field&quot; mechanism that allows you to register a field (e.g., a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>) on a page and to access its value from any page. It is also possible to specify mandatory fields (i.e., fields that must be filled before the user can advance to the next page).</db:para>
<db:para>To register a field, call <db:link xlink:href="qwizardpage.xml#registerField">QWizardPage::registerField</db:link>() field. For example:</db:para>
<db:programlisting language="cpp">ClassInfoPage::ClassInfoPage(QWidget *parent)
    : QWizardPage(parent)
{
    ...
    classNameLabel = new QLabel(tr(&quot;&amp;amp;Class name:&quot;));
    classNameLineEdit = new QLineEdit;
    classNameLabel-&amp;gt;setBuddy(classNameLineEdit);

    baseClassLabel = new QLabel(tr(&quot;B&amp;amp;ase class:&quot;));
    baseClassLineEdit = new QLineEdit;
    baseClassLabel-&amp;gt;setBuddy(baseClassLineEdit);

    qobjectMacroCheckBox = new QCheckBox(tr(&quot;Generate Q_OBJECT &amp;amp;macro&quot;));

    registerField(&quot;className*&quot;, classNameLineEdit);
    registerField(&quot;baseClass&quot;, baseClassLineEdit);
    registerField(&quot;qobjectMacro&quot;, qobjectMacroCheckBox);
    ...
}
</db:programlisting>
<db:para>The above code registers three fields, className, baseClass, and qobjectMacro, which are associated with three child widgets. The asterisk (*) next to className denotes a mandatory field.</db:para>
<db:anchor xml:id="initialize-page"/>
<db:para>The fields of any page are accessible from any other page. For example:</db:para>
<db:programlisting language="cpp">void OutputFilesPage::initializePage()
{
    QString className = field(&quot;className&quot;).toString();
    headerLineEdit-&amp;gt;setText(className.toLower() + &quot;.h&quot;);
    implementationLineEdit-&amp;gt;setText(className.toLower() + &quot;.cpp&quot;);
    outputDirLineEdit-&amp;gt;setText(QDir::toNativeSeparators(QDir::tempPath()));
}
</db:programlisting>
<db:para>Here, we call <db:link xlink:href="qwizardpage.xml#field">QWizardPage::field</db:link>() to access the contents of the className field (which was defined in the ClassInfoPage) and use it to initialize the OutputFilePage. The field's contents is returned as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>When we create a field using <db:link xlink:href="qwizardpage.xml#registerField">QWizardPage::registerField</db:link>(), we pass a unique field name and a widget. We can also provide a Qt property name and a &quot;changed&quot; signal (a signal that is emitted when the property changes) as third and fourth arguments; however, this is not necessary for the most common Qt widgets, such as <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>, and <db:link xlink:href="qcombobox.xml">QComboBox</db:link>, because <db:link xlink:href="qwizard.xml">QWizard</db:link> knows which properties to look for.</db:para>
<db:anchor xml:id="mandatory-fields"/>
<db:para>If an asterisk (*) is appended to the name when the property is registered, the field is a <db:emphasis>mandatory field</db:emphasis>. When a page has mandatory fields, the <db:guilabel>Next</db:guilabel> and/or <db:guilabel>Finish</db:guilabel> buttons are enabled only when all mandatory fields are filled.</db:para>
<db:para>To consider a field &quot;filled&quot;, <db:link xlink:href="qwizard.xml">QWizard</db:link> simply checks that the field's current value doesn't equal the original value (the value it had when <db:link xlink:href="qwizard.xml#initializePage">initializePage</db:link>() was called). For <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> and <db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link> subclasses, <db:link xlink:href="qwizard.xml">QWizard</db:link> also checks that <db:link xlink:href="qlineedit.xml#acceptableInput-prop">hasAcceptableInput</db:link>() returns true, to honor any validator or mask.</db:para>
<db:para><db:link xlink:href="qwizard.xml">QWizard</db:link>'s mandatory field mechanism is provided for convenience. A more powerful (but also more cumbersome) alternative is to reimplement <db:link xlink:href="qwizardpage.xml#isComplete">QWizardPage::isComplete</db:link>() and to emit the <db:link xlink:href="qwizardpage.xml#completeChanged">QWizardPage::completeChanged</db:link>() signal whenever the page becomes complete or incomplete.</db:para>
<db:para>The enabled/disabled state of the <db:guilabel>Next</db:guilabel> and/or <db:guilabel>Finish</db:guilabel> buttons is one way to perform validation on the user input. Another way is to reimplement <db:link xlink:href="qwizard.xml#validateCurrentPage">validateCurrentPage</db:link>() (or <db:link xlink:href="qwizardpage.xml#validatePage">QWizardPage::validatePage</db:link>()) to perform some last-minute validation (and show an error message if the user has entered incomplete or invalid information). If the function returns true, the next page is shown (or the wizard finishes); otherwise, the current page stays up.</db:para>
</db:section>
<db:section xml:id="creating-linear-wizards">
<db:title>Creating Linear Wizards</db:title>
<db:para>Most wizards have a linear structure, with page 1 followed by page 2 and so on until the last page. The <db:link xlink:href="qtwidgets-dialogs-classwizard-example.xml">Class Wizard</db:link> example is such a wizard. With <db:link xlink:href="qwizard.xml">QWizard</db:link>, linear wizards are created by instantiating the <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link>s and inserting them using <db:link xlink:href="qwizard.xml#addPage">addPage</db:link>(). By default, the pages are shown in the order in which they were added. For example:</db:para>
<db:programlisting language="cpp">ClassWizard::ClassWizard(QWidget *parent)
    : QWizard(parent)
{
    addPage(new IntroPage);
    addPage(new ClassInfoPage);
    addPage(new CodeStylePage);
    addPage(new OutputFilesPage);
    addPage(new ConclusionPage);
    ...
}
</db:programlisting>
<db:para>When a page is about to be shown, <db:link xlink:href="qwizard.xml">QWizard</db:link> calls <db:link xlink:href="qwizard.xml#initializePage">initializePage</db:link>() (which in turn calls <db:link xlink:href="qwizardpage.xml#initializePage">QWizardPage::initializePage</db:link>()) to fill the page with default values. By default, this function does nothing, but it can be reimplemented to initialize the page's contents based on other pages' fields (see the <db:link xlink:href="qwizard.xml#initialize-page">example above</db:link>).</db:para>
<db:para>If the user presses <db:guilabel>Back</db:guilabel>, <db:link xlink:href="qwizard.xml#cleanupPage">cleanupPage</db:link>() is called (which in turn calls <db:link xlink:href="qwizardpage.xml#cleanupPage">QWizardPage::cleanupPage</db:link>()). The default implementation resets the page's fields to their original values (the values they had before <db:link xlink:href="qwizard.xml#initializePage">initializePage</db:link>() was called). If you want the <db:guilabel>Back</db:guilabel> button to be non-destructive and keep the values entered by the user, simply enable the <db:link xlink:href="qwizard.xml#WizardOption-enum">IndependentPages</db:link> option.</db:para>
</db:section>
<db:section xml:id="creating-non-linear-wizards">
<db:title>Creating Non-Linear Wizards</db:title>
<db:para>Some wizards are more complex in that they allow different traversal paths based on the information provided by the user. The <db:link xlink:href="qtwidgets-dialogs-licensewizard-example.xml">License Wizard</db:link> example illustrates this. It provides five wizard pages; depending on which options are selected, the user can reach different pages.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/licensewizard-flow.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In complex wizards, pages are identified by IDs. These IDs are typically defined using an enum. For example:</db:para>
<db:programlisting language="cpp">class LicenseWizard : public QWizard
{
    ...
    enum { Page_Intro, Page_Evaluate, Page_Register, Page_Details,
           Page_Conclusion };
    ...
};
</db:programlisting>
<db:para>The pages are inserted using <db:link xlink:href="qwizard.xml#setPage">setPage</db:link>(), which takes an ID and an instance of <db:link xlink:href="qwizardpage.xml">QWizardPage</db:link> (or of a subclass):</db:para>
<db:programlisting language="cpp">LicenseWizard::LicenseWizard(QWidget *parent)
    : QWizard(parent)
{
    setPage(Page_Intro, new IntroPage);
    setPage(Page_Evaluate, new EvaluatePage);
    setPage(Page_Register, new RegisterPage);
    setPage(Page_Details, new DetailsPage);
    setPage(Page_Conclusion, new ConclusionPage);
    ...
}
</db:programlisting>
<db:para>By default, the pages are shown in increasing ID order. To provide a dynamic order that depends on the options chosen by the user, we must reimplement <db:link xlink:href="qwizardpage.xml#nextId">QWizardPage::nextId</db:link>(). For example:</db:para>
<db:programlisting language="cpp">int IntroPage::nextId() const
{
    if (evaluateRadioButton-&amp;gt;isChecked()) {
        return LicenseWizard::Page_Evaluate;
    } else {
        return LicenseWizard::Page_Register;
    }
}

int EvaluatePage::nextId() const
{
    return LicenseWizard::Page_Conclusion;
}

int RegisterPage::nextId() const
{
    if (upgradeKeyLineEdit-&amp;gt;text().isEmpty()) {
        return LicenseWizard::Page_Details;
    } else {
        return LicenseWizard::Page_Conclusion;
    }
}

int DetailsPage::nextId() const
{
    return LicenseWizard::Page_Conclusion;
}

int ConclusionPage::nextId() const
{
    return -1;
}
</db:programlisting>
<db:para>It would also be possible to put all the logic in one place, in a <db:link xlink:href="qwizard.xml#nextId">QWizard::nextId</db:link>() reimplementation. For example:</db:para>
<db:programlisting language="cpp">int LicenseWizard::nextId() const
{
    switch (currentId()) {
    case Page_Intro:
        if (field(&quot;intro.evaluate&quot;).toBool()) {
            return Page_Evaluate;
        } else {
            return Page_Register;
        }
    case Page_Evaluate:
        return Page_Conclusion;
    case Page_Register:
        if (field(&quot;register.upgradeKey&quot;).toString().isEmpty()) {
            return Page_Details;
        } else {
            return Page_Conclusion;
        }
    case Page_Details:
        return Page_Conclusion;
    case Page_Conclusion:
    default:
        return -1;
    }
}
</db:programlisting>
<db:para>To start at another page than the page with the lowest ID, call <db:link xlink:href="qwizard.xml#startId-prop">setStartId</db:link>().</db:para>
<db:para>To test whether a page has been visited or not, call <db:link xlink:href="qwizard.xml#hasVisitedPage">hasVisitedPage</db:link>(). For example:</db:para>
<db:programlisting language="cpp">void ConclusionPage::initializePage()
{
    QString licenseText;

    if (wizard()-&amp;gt;hasVisitedPage(LicenseWizard::Page_Evaluate)) {
        licenseText = tr(&quot;&amp;lt;u&amp;gt;Evaluation License Agreement:&amp;lt;/u&amp;gt; &quot;
                         &quot;You can use this software for 30 days and make one &quot;
                         &quot;backup, but you are not allowed to distribute it.&quot;);
    } else if (wizard()-&amp;gt;hasVisitedPage(LicenseWizard::Page_Details)) {
        licenseText = tr(&quot;&amp;lt;u&amp;gt;First-Time License Agreement:&amp;lt;/u&amp;gt; &quot;
                         &quot;You can use this software subject to the license &quot;
                         &quot;you will receive by email.&quot;);
    } else {
        licenseText = tr(&quot;&amp;lt;u&amp;gt;Upgrade License Agreement:&amp;lt;/u&amp;gt; &quot;
                         &quot;This software is licensed under the terms of your &quot;
                         &quot;current license.&quot;);
    }
    bottomLabel-&amp;gt;setText(licenseText);
}
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml">QWizardPage</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-classwizard-example.xml">Class Wizard Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-licensewizard-example.xml">License Wizard Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="WizardButton-enum">
<db:title>enum QWizard::WizardButton</db:title>
<db:enumsynopsis>
<db:enumname>WizardButton</db:enumname>
<db:enumitem>
<db:enumidentifier>BackButton</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NextButton</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CommitButton</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FinishButton</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CancelButton</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HelpButton</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CustomButton1</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CustomButton2</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CustomButton3</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Stretch</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoButton</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NStandardButtons</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NButtons</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies the buttons in a wizard.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::BackButton</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The <db:guilabel>Back</db:guilabel> button (<db:guilabel>Go Back</db:guilabel> on macOS)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::NextButton</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The <db:guilabel>Next</db:guilabel> button (<db:guilabel>Continue</db:guilabel> on macOS)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::CommitButton</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The <db:guilabel>Commit</db:guilabel> button</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::FinishButton</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The <db:guilabel>Finish</db:guilabel> button (<db:guilabel>Done</db:guilabel> on macOS)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::CancelButton</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The <db:guilabel>Cancel</db:guilabel> button (see also <db:link xlink:href="qwizard.xml#WizardOption-enum">NoCancelButton</db:link>)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::HelpButton</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The <db:guilabel>Help</db:guilabel> button (see also <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveHelpButton</db:link>)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::CustomButton1</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The first user-defined button (see also <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton1</db:link>)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::CustomButton2</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The second user-defined button (see also <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton2</db:link>)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::CustomButton3</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The third user-defined button (see also <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton3</db:link>)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following value is only useful when calling <db:link xlink:href="qwizard.xml#setButtonLayout">setButtonLayout</db:link>():</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::Stretch</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>A horizontal stretch in the button layout</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#setButton">setButton</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setButtonText">setButtonText</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setButtonLayout">setButtonLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#customButtonClicked">customButtonClicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="WizardOption-enum">
<db:title>enum QWizard::WizardOption</db:title>
<db:bridgehead renderas="sect2">flags QWizard::WizardOptions</db:bridgehead>
<db:enumsynopsis>
<db:enumname>WizardOption</db:enumname>
<db:enumitem>
<db:enumidentifier>IndependentPages</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IgnoreSubTitles</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExtendedWatermarkPixmap</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoDefaultButton</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoBackButtonOnStartPage</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoBackButtonOnLastPage</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DisabledBackButtonOnLastPage</db:enumidentifier>
<db:enumvalue>0x00000040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HaveNextButtonOnLastPage</db:enumidentifier>
<db:enumvalue>0x00000080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HaveFinishButtonOnEarlyPages</db:enumidentifier>
<db:enumvalue>0x00000100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoCancelButton</db:enumidentifier>
<db:enumvalue>0x00000200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CancelButtonOnLeft</db:enumidentifier>
<db:enumvalue>0x00000400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HaveHelpButton</db:enumidentifier>
<db:enumvalue>0x00000800</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HelpButtonOnRight</db:enumidentifier>
<db:enumvalue>0x00001000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HaveCustomButton1</db:enumidentifier>
<db:enumvalue>0x00002000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HaveCustomButton2</db:enumidentifier>
<db:enumvalue>0x00004000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HaveCustomButton3</db:enumidentifier>
<db:enumvalue>0x00008000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoCancelButtonOnLastPage</db:enumidentifier>
<db:enumvalue>0x00010000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QWizard::WizardOptions</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum specifies various options that affect the look and feel of a wizard.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::IndependentPages</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>The pages are independent of each other (i.e., they don't derive values from each other).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::IgnoreSubTitles</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Don't show any subtitles, even if they are set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::ExtendedWatermarkPixmap</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Extend any <db:link xlink:href="qwizard.xml#WizardPixmap-enum">WatermarkPixmap</db:link> all the way down to the window's edge.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::NoDefaultButton</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>Don't make the <db:guilabel>Next</db:guilabel> or <db:guilabel>Finish</db:guilabel> button the dialog's <db:link xlink:href="qpushbutton.xml#default-prop">default button</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::NoBackButtonOnStartPage</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>Don't show the <db:guilabel>Back</db:guilabel> button on the start page.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::NoBackButtonOnLastPage</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>Don't show the <db:guilabel>Back</db:guilabel> button on the last page.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::DisabledBackButtonOnLastPage</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>Disable the <db:guilabel>Back</db:guilabel> button on the last page.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::HaveNextButtonOnLastPage</db:code></db:para>
</db:td>
<db:td><db:code>0x00000080</db:code></db:td>
<db:td>
<db:para>Show the (disabled) <db:guilabel>Next</db:guilabel> button on the last page.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::HaveFinishButtonOnEarlyPages</db:code></db:para>
</db:td>
<db:td><db:code>0x00000100</db:code></db:td>
<db:td>
<db:para>Show the (disabled) <db:guilabel>Finish</db:guilabel> button on non-final pages.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::NoCancelButton</db:code></db:para>
</db:td>
<db:td><db:code>0x00000200</db:code></db:td>
<db:td>
<db:para>Don't show the <db:guilabel>Cancel</db:guilabel> button.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::CancelButtonOnLeft</db:code></db:para>
</db:td>
<db:td><db:code>0x00000400</db:code></db:td>
<db:td>
<db:para>Put the <db:guilabel>Cancel</db:guilabel> button on the left of <db:guilabel>Back</db:guilabel> (rather than on the right of <db:guilabel>Finish</db:guilabel> or <db:guilabel>Next</db:guilabel>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::HaveHelpButton</db:code></db:para>
</db:td>
<db:td><db:code>0x00000800</db:code></db:td>
<db:td>
<db:para>Show the <db:guilabel>Help</db:guilabel> button.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::HelpButtonOnRight</db:code></db:para>
</db:td>
<db:td><db:code>0x00001000</db:code></db:td>
<db:td>
<db:para>Put the <db:guilabel>Help</db:guilabel> button on the far right of the button layout (rather than on the far left).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::HaveCustomButton1</db:code></db:para>
</db:td>
<db:td><db:code>0x00002000</db:code></db:td>
<db:td>
<db:para>Show the first user-defined button (<db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton1</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::HaveCustomButton2</db:code></db:para>
</db:td>
<db:td><db:code>0x00004000</db:code></db:td>
<db:td>
<db:para>Show the second user-defined button (<db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton2</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::HaveCustomButton3</db:code></db:para>
</db:td>
<db:td><db:code>0x00008000</db:code></db:td>
<db:td>
<db:para>Show the third user-defined button (<db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton3</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::NoCancelButtonOnLastPage</db:code></db:para>
</db:td>
<db:td><db:code>0x00010000</db:code></db:td>
<db:td>
<db:para>Don't show the <db:guilabel>Cancel</db:guilabel> button on the last page.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>WizardOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;WizardOption&gt;. </db:code>It stores an OR combination of <db:code>WizardOption</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#options-prop">setOptions</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setOption">setOption</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="WizardPixmap-enum">
<db:title>enum QWizard::WizardPixmap</db:title>
<db:enumsynopsis>
<db:enumname>WizardPixmap</db:enumname>
<db:enumitem>
<db:enumidentifier>WatermarkPixmap</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LogoPixmap</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BannerPixmap</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BackgroundPixmap</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NPixmaps</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies the pixmaps that can be associated with a page.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::WatermarkPixmap</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The tall pixmap on the left side of a <db:link xlink:href="qwizard.xml#WizardStyle-enum">ClassicStyle</db:link> or <db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link> page</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::LogoPixmap</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The small pixmap on the right side of a <db:link xlink:href="qwizard.xml#WizardStyle-enum">ClassicStyle</db:link> or <db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link> page header</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::BannerPixmap</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The pixmap that occupies the background of a <db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link> page header</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::BackgroundPixmap</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The pixmap that occupies the background of a <db:link xlink:href="qwizard.xml#WizardStyle-enum">MacStyle</db:link> wizard</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#setPixmap">setPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#setPixmap">QWizardPage::setPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#elements-of-a-wizard-page">Elements of a Wizard Page</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="WizardStyle-enum">
<db:title>enum QWizard::WizardStyle</db:title>
<db:enumsynopsis>
<db:enumname>WizardStyle</db:enumname>
<db:enumitem>
<db:enumidentifier>ClassicStyle</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ModernStyle</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MacStyle</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AeroStyle</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NStyles</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies the different looks supported by <db:link xlink:href="qwizard.xml">QWizard</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::ClassicStyle</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Classic Windows look</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::ModernStyle</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Modern Windows look</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::MacStyle</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>macOS look</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwizard.xml">QWizard</db:link></db:emphasis>::AeroStyle</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Windows Aero look</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#wizardStyle-prop">setWizardStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#WizardOption-enum">WizardOption</db:link></db:member>
<db:member><db:link xlink:href="qwizard.xml#wizard-look-and-feel">Wizard Look and Feel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="currentId-prop">
<db:title>[read-only] currentId : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>currentId</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentId</db:synopsisinfo>
<db:synopsisinfo role="notifier">currentIdChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the ID of the current page</db:para>
<db:para>This property cannot be set directly. To change the current page, call <db:link xlink:href="qwizard.xml#next">next</db:link>(), <db:link xlink:href="qwizard.xml#back">back</db:link>(), or <db:link xlink:href="qwizard.xml#restart">restart</db:link>().</db:para>
<db:para>By default, this property has a value of -1, indicating that no page is currently shown.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">currentId</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qwizard.xml#currentIdChanged">currentIdChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>id</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#currentPage">currentPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="options-prop">
<db:title>options : WizardOptions</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>WizardOptions</db:type>
<db:varname>options</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">options</db:synopsisinfo>
<db:synopsisinfo role="setter">setOptions</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the various options that affect the look and feel of the wizard</db:para>
<db:para>By default, the following options are set (depending on the platform):</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Windows: <db:link xlink:href="qwizard.xml#WizardOption-enum">HelpButtonOnRight</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>macOS: <db:link xlink:href="qwizard.xml#WizardOption-enum">NoDefaultButton</db:link> and <db:link xlink:href="qwizard.xml#WizardOption-enum">NoCancelButton</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>X11 and QWS (Qt for Embedded Linux): none.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qwizard.xml#WizardOption-enum">QWizard::WizardOptions</db:link></db:type> <db:emphasis role="bold">options</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOptions</db:emphasis>(<db:type><db:link xlink:href="qwizard.xml#WizardOption-enum">QWizard::WizardOptions</db:link></db:type> <db:emphasis>options</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#wizardStyle-prop">wizardStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startId-prop">
<db:title>startId : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>startId</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">startId</db:synopsisinfo>
<db:synopsisinfo role="setter">setStartId</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the ID of the first page</db:para>
<db:para>If this property isn't explicitly set, this property defaults to the lowest page ID in this wizard, or -1 if no page has been inserted yet.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">startId</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setStartId</db:emphasis>(<db:type>int</db:type> <db:emphasis>id</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#restart">restart</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#nextId">nextId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subTitleFormat-prop">
<db:title>subTitleFormat : Qt::TextFormat</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::TextFormat</db:type>
<db:varname>subTitleFormat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">subTitleFormat</db:synopsisinfo>
<db:synopsisinfo role="setter">setSubTitleFormat</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the text format used by page subtitles</db:para>
<db:para>The default format is <db:link xlink:href="qt.xml#TextFormat-enum">Qt::AutoText</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#TextFormat-enum">Qt::TextFormat</db:link></db:type> <db:emphasis role="bold">subTitleFormat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSubTitleFormat</db:emphasis>(<db:type><db:link xlink:href="qt.xml#TextFormat-enum">Qt::TextFormat</db:link></db:type> <db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#title-prop">QWizardPage::title</db:link></db:member>
<db:member><db:link xlink:href="qwizard.xml#titleFormat-prop">titleFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="titleFormat-prop">
<db:title>titleFormat : Qt::TextFormat</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::TextFormat</db:type>
<db:varname>titleFormat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">titleFormat</db:synopsisinfo>
<db:synopsisinfo role="setter">setTitleFormat</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the text format used by page titles</db:para>
<db:para>The default format is <db:link xlink:href="qt.xml#TextFormat-enum">Qt::AutoText</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#TextFormat-enum">Qt::TextFormat</db:link></db:type> <db:emphasis role="bold">titleFormat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTitleFormat</db:emphasis>(<db:type><db:link xlink:href="qt.xml#TextFormat-enum">Qt::TextFormat</db:link></db:type> <db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#title-prop">QWizardPage::title</db:link></db:member>
<db:member><db:link xlink:href="qwizard.xml#subTitleFormat-prop">subTitleFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wizardStyle-prop">
<db:title>wizardStyle : WizardStyle</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>WizardStyle</db:type>
<db:varname>wizardStyle</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">wizardStyle</db:synopsisinfo>
<db:synopsisinfo role="setter">setWizardStyle</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the look and feel of the wizard</db:para>
<db:para>By default, <db:link xlink:href="qwizard.xml">QWizard</db:link> uses the <db:link xlink:href="qwizard.xml#WizardStyle-enum">AeroStyle</db:link> on a Windows Vista system with alpha compositing enabled, regardless of the current widget style. If this is not the case, the default wizard style depends on the current widget style as follows: <db:link xlink:href="qwizard.xml#WizardStyle-enum">MacStyle</db:link> is the default if the current widget style is QMacStyle, <db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link> is the default if the current widget style is QWindowsStyle, and <db:link xlink:href="qwizard.xml#WizardStyle-enum">ClassicStyle</db:link> is the default in all other cases.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qwizard.xml#WizardStyle-enum">QWizard::WizardStyle</db:link></db:type> <db:emphasis role="bold">wizardStyle</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWizardStyle</db:emphasis>(<db:type><db:link xlink:href="qwizard.xml#WizardStyle-enum">QWizard::WizardStyle</db:link></db:type> <db:emphasis>style</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#wizard-look-and-feel">Wizard Look and Feel</db:link></db:member>
<db:member><db:link xlink:href="qwizard.xml#options">options</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWizard">
<db:title>[explicit] QWizard::QWizard(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = Qt::WindowFlags())</db:title>
<db:constructorsynopsis>
<db:methodname>QWizard</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::WindowFlags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWizard(QWidget *parent, Qt::WindowFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a wizard with the given <db:code role="parameter">parent</db:code> and window <db:code role="parameter">flags</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#parent">parent</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#windowFlags-prop">windowFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QWizard">
<db:title>[virtual] QWizard::~QWizard()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QWizard</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWizard()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the wizard and its pages, releasing any allocated resources.</db:para>
</db:section>
<db:section xml:id="addPage">
<db:title>int QWizard::addPage(QWizardPage *<db:emphasis>page</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>addPage</db:methodname>
<db:methodparam>
<db:type>QWizardPage *</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int addPage(QWizardPage *page)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">page</db:code> to the wizard, and returns the page's ID.</db:para>
<db:para>The ID is guaranteed to be larger than any other ID in the <db:link xlink:href="qwizard.xml">QWizard</db:link> so far.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#setPage">setPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#page">page</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#pageAdded">pageAdded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="back">
<db:title>void QWizard::back()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>back</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void back()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Goes back to the previous page.</db:para>
<db:para>This is equivalent to pressing the <db:guilabel>Back</db:guilabel> button.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#next">next</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#accept">accept</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#reject">reject</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#restart">restart</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="button">
<db:title>QAbstractButton *QWizard::button(QWizard::WizardButton <db:emphasis>which</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractButton *</db:type>
<db:methodname>button</db:methodname>
<db:methodparam>
<db:type>QWizard::WizardButton</db:type>
<db:parameter>which</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractButton * button(QWizard::WizardButton which) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the button corresponding to role <db:code role="parameter">which</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#setButton">setButton</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setButtonText">setButtonText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buttonText">
<db:title>QString QWizard::buttonText(QWizard::WizardButton <db:emphasis>which</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>buttonText</db:methodname>
<db:methodparam>
<db:type>QWizard::WizardButton</db:type>
<db:parameter>which</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString buttonText(QWizard::WizardButton which) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text on button <db:code role="parameter">which</db:code>.</db:para>
<db:para>If a text has ben set using <db:link xlink:href="qwizard.xml#setButtonText">setButtonText</db:link>(), this text is returned.</db:para>
<db:para>By default, the text on buttons depends on the <db:link xlink:href="qwizard.xml#wizardStyle-prop">wizardStyle</db:link>. For example, on macOS, the <db:guilabel>Next</db:guilabel> button is called <db:guilabel>Continue</db:guilabel>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#button">button</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setButton">setButton</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setButtonText">setButtonText</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#buttonText">QWizardPage::buttonText</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#setButtonText">QWizardPage::setButtonText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cleanupPage">
<db:title>[virtual protected] void QWizard::cleanupPage(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>cleanupPage</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cleanupPage(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called by <db:link xlink:href="qwizard.xml">QWizard</db:link> to clean up page <db:code role="parameter">id</db:code> just before the user leaves it by clicking <db:guilabel>Back</db:guilabel> (unless the <db:link xlink:href="qwizard.xml#WizardOption-enum">QWizard::IndependentPages</db:link> option is set).</db:para>
<db:para>The default implementation calls <db:link xlink:href="qwizardpage.xml#cleanupPage">QWizardPage::cleanupPage</db:link>() on page(<db:code role="parameter">id</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#cleanupPage">QWizardPage::cleanupPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#initializePage">initializePage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentIdChanged">
<db:title>void QWizard::currentIdChanged(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>currentIdChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">currentId</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentIdChanged(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the current page changes, with the new current <db:code role="parameter">id</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qwizard.xml#currentId-prop">currentId</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#currentId-prop">currentId</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#currentPage">currentPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentPage">
<db:title>QWizardPage *QWizard::currentPage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWizardPage *</db:type>
<db:methodname>currentPage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWizardPage * currentPage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the current page, or nullptr if there is no current page (e.g., before the wizard is shown).</db:para>
<db:para>This is equivalent to calling page(<db:link xlink:href="qwizard.xml#currentId-prop">currentId</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#page">page</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#currentId-prop">currentId</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#restart">restart</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="customButtonClicked">
<db:title>void QWizard::customButtonClicked(int <db:emphasis>which</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>customButtonClicked</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>which</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void customButtonClicked(int which)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user clicks a custom button. <db:code role="parameter">which</db:code> can be <db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton1</db:link>, <db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton2</db:link>, or <db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton3</db:link>.</db:para>
<db:para>By default, no custom button is shown. Call <db:link xlink:href="qwizard.xml#setOption">setOption</db:link>() with <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton1</db:link>, <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton2</db:link>, or <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton3</db:link> to have one, and use <db:link xlink:href="qwizard.xml#setButtonText">setButtonText</db:link>() or <db:link xlink:href="qwizard.xml#setButton">setButton</db:link>() to configure it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#helpRequested">helpRequested</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="done">
<db:title>[override virtual protected] void QWizard::done(int <db:emphasis>result</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>done</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>result</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void done(int result) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#done" role="function">QDialog::done(int r)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QWizard::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="field">
<db:title>QVariant QWizard::field(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>field</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant field(const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the field called <db:code role="parameter">name</db:code>.</db:para>
<db:para>This function can be used to access fields on any page of the wizard.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#registerField">QWizardPage::registerField</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#field">QWizardPage::field</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setField">setField</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasVisitedPage">
<db:title>bool QWizard::hasVisitedPage(int <db:emphasis>id</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasVisitedPage</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasVisitedPage(int id) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the page history contains page <db:code role="parameter">id</db:code>; otherwise, returns false.</db:para>
<db:para>Pressing <db:guilabel>Back</db:guilabel> marks the current page as &quot;unvisited&quot; again.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#visitedIds">visitedIds</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="helpRequested">
<db:title>void QWizard::helpRequested()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>helpRequested</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void helpRequested()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user clicks the <db:guilabel>Help</db:guilabel> button.</db:para>
<db:para>By default, no <db:guilabel>Help</db:guilabel> button is shown. Call <db:link xlink:href="qwizard.xml#setOption">setOption</db:link>(<db:link xlink:href="qwizard.xml#WizardOption-enum">HaveHelpButton</db:link>, true) to have one.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">LicenseWizard::LicenseWizard(QWidget *parent)
    : QWizard(parent)
{
    ...
    setOption(HaveHelpButton, true);
    connect(this, &amp;amp;QWizard::helpRequested, this, &amp;amp;LicenseWizard::showHelp);
    ...
}

void LicenseWizard::showHelp()
{
    static QString lastHelpMessage;

    QString message;

    switch (currentId()) {
    case Page_Intro:
        message = tr(&quot;The decision you make here will affect which page you &quot;
                     &quot;get to see next.&quot;);
        break;
    ...
    default:
        message = tr(&quot;This help is likely not to be of any help.&quot;);
    }

    QMessageBox::information(this, tr(&quot;License Wizard Help&quot;), message);

}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#customButtonClicked">customButtonClicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initializePage">
<db:title>[virtual protected] void QWizard::initializePage(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>initializePage</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initializePage(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called by <db:link xlink:href="qwizard.xml">QWizard</db:link> to prepare page <db:code role="parameter">id</db:code> just before it is shown either as a result of <db:link xlink:href="qwizard.xml#restart">QWizard::restart</db:link>() being called, or as a result of the user clicking <db:guilabel>Next</db:guilabel>. (However, if the <db:link xlink:href="qwizard.xml#WizardOption-enum">QWizard::IndependentPages</db:link> option is set, this function is only called the first time the page is shown.)</db:para>
<db:para>By reimplementing this function, you can ensure that the page's fields are properly initialized based on fields from previous pages.</db:para>
<db:para>The default implementation calls <db:link xlink:href="qwizardpage.xml#initializePage">QWizardPage::initializePage</db:link>() on page(<db:code role="parameter">id</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#initializePage">QWizardPage::initializePage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#cleanupPage">cleanupPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nativeEvent">
<db:title>[override virtual protected] bool QWizard::nativeEvent(const QByteArray &amp;<db:emphasis>eventType</db:emphasis>, void *<db:emphasis>message</db:emphasis>, qintptr *<db:emphasis>result</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>nativeEvent</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>eventType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qintptr *</db:type>
<db:parameter>result</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool nativeEvent(const QByteArray &amp;eventType, void *message, qintptr *result) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#nativeEvent" role="function">QWidget::nativeEvent(const QByteArray &amp;eventType, void *message, qintptr *result)</db:link>.</db:para>
</db:section>
<db:section xml:id="next">
<db:title>void QWizard::next()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>next</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void next()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Advances to the next page.</db:para>
<db:para>This is equivalent to pressing the <db:guilabel>Next</db:guilabel> or <db:guilabel>Commit</db:guilabel> button.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#nextId">nextId</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#back">back</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#accept">accept</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#reject">reject</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#restart">restart</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextId">
<db:title>[virtual] int QWizard::nextId() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>nextId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int nextId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called by <db:link xlink:href="qwizard.xml">QWizard</db:link> to find out which page to show when the user clicks the <db:guilabel>Next</db:guilabel> button.</db:para>
<db:para>The return value is the ID of the next page, or -1 if no page follows.</db:para>
<db:para>The default implementation calls <db:link xlink:href="qwizardpage.xml#nextId">QWizardPage::nextId</db:link>() on the <db:link xlink:href="qwizard.xml#currentPage">currentPage</db:link>().</db:para>
<db:para>By reimplementing this function, you can specify a dynamic page order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#nextId">QWizardPage::nextId</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#currentPage">currentPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="page">
<db:title>QWizardPage *QWizard::page(int <db:emphasis>id</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWizardPage *</db:type>
<db:methodname>page</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWizardPage * page(int id) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the page with the given <db:code role="parameter">id</db:code>, or nullptr if there is no such page.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#addPage">addPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setPage">setPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pageAdded">
<db:title>void QWizard::pageAdded(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pageAdded</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pageAdded(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a page is added to the wizard. The page's <db:code role="parameter">id</db:code> is passed as parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#addPage">addPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setPage">setPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#startId-prop">startId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pageIds">
<db:title>QList&lt;int&gt; QWizard::pageIds() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;int&gt;</db:type>
<db:methodname>pageIds</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;int&gt; pageIds() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of page IDs.</db:para>
</db:section>
<db:section xml:id="pageRemoved">
<db:title>void QWizard::pageRemoved(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pageRemoved</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pageRemoved(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a page is removed from the wizard. The page's <db:code role="parameter">id</db:code> is passed as parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#removePage">removePage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#startId-prop">startId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QWizard::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="pixmap">
<db:title>QPixmap QWizard::pixmap(QWizard::WizardPixmap <db:emphasis>which</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>pixmap</db:methodname>
<db:methodparam>
<db:type>QWizard::WizardPixmap</db:type>
<db:parameter>which</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap pixmap(QWizard::WizardPixmap which) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pixmap set for role <db:code role="parameter">which</db:code>.</db:para>
<db:para>By default, the only pixmap that is set is the <db:link xlink:href="qwizard.xml#WizardPixmap-enum">BackgroundPixmap</db:link> on macOS version 10.13 and earlier.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#setPixmap">setPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#pixmap">QWizardPage::pixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#elements-of-a-wizard-page">Elements of a Wizard Page</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removePage">
<db:title>void QWizard::removePage(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removePage</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removePage(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the page with the given <db:code role="parameter">id</db:code>. <db:link xlink:href="qwizard.xml#cleanupPage">cleanupPage</db:link>() will be called if necessary.</db:para>
<db:note>
<db:para>Removing a page may influence the value of the <db:link xlink:href="qwizard.xml#startId-prop">startId</db:link> property.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#addPage">addPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setPage">setPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#pageRemoved">pageRemoved</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#startId-prop">startId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QWizard::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#resizeEvent" role="function">QDialog::resizeEvent(QResizeEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="restart">
<db:title>void QWizard::restart()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>restart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void restart()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Restarts the wizard at the start page. This function is called automatically when the wizard is shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#startId-prop">startId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setButton">
<db:title>void QWizard::setButton(QWizard::WizardButton <db:emphasis>which</db:emphasis>, QAbstractButton *<db:emphasis>button</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setButton</db:methodname>
<db:methodparam>
<db:type>QWizard::WizardButton</db:type>
<db:parameter>which</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractButton *</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setButton(QWizard::WizardButton which, QAbstractButton *button)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the button corresponding to role <db:code role="parameter">which</db:code> to <db:code role="parameter">button</db:code>.</db:para>
<db:para>To add extra buttons to the wizard (e.g., a <db:guilabel>Print</db:guilabel> button), one way is to call setButton() with <db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton1</db:link> to <db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton3</db:link>, and make the buttons visible using the <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton1</db:link> to <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton3</db:link> options.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#button">button</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setButtonText">setButtonText</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setButtonLayout">setButtonLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#options">options</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setButtonLayout">
<db:title>void QWizard::setButtonLayout(const QList&lt;QWizard::WizardButton&gt; &amp;<db:emphasis>layout</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setButtonLayout</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QWizard::WizardButton&gt; &amp;</db:type>
<db:parameter>layout</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setButtonLayout(const QList&lt;QWizard::WizardButton&gt; &amp;layout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the order in which buttons are displayed to <db:code role="parameter">layout</db:code>, where <db:code role="parameter">layout</db:code> is a list of <db:link xlink:href="qwizard.xml#WizardButton-enum">WizardButton</db:link>s.</db:para>
<db:para>The default layout depends on the options (e.g., whether <db:link xlink:href="qwizard.xml#WizardOption-enum">HelpButtonOnRight</db:link>) that are set. You can call this function if you need more control over the buttons' layout than what <db:link xlink:href="qwizard.xml#options">options</db:link> already provides.</db:para>
<db:para>You can specify horizontal stretches in the layout using <db:link xlink:href="qwizard.xml#WizardButton-enum">Stretch</db:link>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">MyWizard::MyWizard(QWidget *parent)
    : QWizard(parent)
{
    ...
    QList&amp;lt;QWizard::WizardButton&amp;gt; layout;
    layout &amp;lt;&amp;lt; QWizard::Stretch &amp;lt;&amp;lt; QWizard::BackButton &amp;lt;&amp;lt; QWizard::CancelButton
           &amp;lt;&amp;lt; QWizard::NextButton &amp;lt;&amp;lt; QWizard::FinishButton;
    setButtonLayout(layout);
    ...
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#setButton">setButton</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setButtonText">setButtonText</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#options-prop">setOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setButtonText">
<db:title>void QWizard::setButtonText(QWizard::WizardButton <db:emphasis>which</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setButtonText</db:methodname>
<db:methodparam>
<db:type>QWizard::WizardButton</db:type>
<db:parameter>which</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setButtonText(QWizard::WizardButton which, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the text on button <db:code role="parameter">which</db:code> to be <db:code role="parameter">text</db:code>.</db:para>
<db:para>By default, the text on buttons depends on the <db:link xlink:href="qwizard.xml#wizardStyle-prop">wizardStyle</db:link>. For example, on macOS, the <db:guilabel>Next</db:guilabel> button is called <db:guilabel>Continue</db:guilabel>.</db:para>
<db:para>To add extra buttons to the wizard (e.g., a <db:guilabel>Print</db:guilabel> button), one way is to call setButtonText() with <db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton1</db:link>, <db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton2</db:link>, or <db:link xlink:href="qwizard.xml#WizardButton-enum">CustomButton3</db:link> to set their text, and make the buttons visible using the <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton1</db:link>, <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton2</db:link>, and/or <db:link xlink:href="qwizard.xml#WizardOption-enum">HaveCustomButton3</db:link> options.</db:para>
<db:para>Button texts may also be set on a per-page basis using <db:link xlink:href="qwizardpage.xml#setButtonText">QWizardPage::setButtonText</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#buttonText">buttonText</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setButton">setButton</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#button">button</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#setButtonLayout">setButtonLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#options-prop">setOptions</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#setButtonText">QWizardPage::setButtonText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultProperty">
<db:title>void QWizard::setDefaultProperty(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>property</db:emphasis>, const char *<db:emphasis>changedSignal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDefaultProperty</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>property</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>changedSignal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDefaultProperty(const char *className, const char *property, const char *changedSignal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the default property for <db:code role="parameter">className</db:code> to be <db:code role="parameter">property</db:code>, and the associated change signal to be <db:code role="parameter">changedSignal</db:code>.</db:para>
<db:para>The default property is used when an instance of <db:code role="parameter">className</db:code> (or of one of its subclasses) is passed to <db:link xlink:href="qwizardpage.xml#registerField">QWizardPage::registerField</db:link>() and no property is specified.</db:para>
<db:para><db:link xlink:href="qwizard.xml">QWizard</db:link> knows the most common Qt widgets. For these (or their subclasses), you don't need to specify a <db:code role="parameter">property</db:code> or a <db:code role="parameter">changedSignal</db:code>. The table below lists these widgets:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Widget</db:para>
</db:th>
<db:th>
<db:para>Property</db:para>
</db:th>
<db:th>
<db:para>Change Notification Signal</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link></db:para>
</db:td>
<db:td>
<db:para>bool <db:link xlink:href="qabstractbutton.xml#checked-prop">checked</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qabstractbutton.xml#toggled">toggled</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:para>
</db:td>
<db:td>
<db:para>int <db:link xlink:href="qabstractslider.xml#value-prop">value</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:para>
</db:td>
<db:td>
<db:para>int <db:link xlink:href="qcombobox.xml#currentIndex-prop">currentIndex</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcombobox.xml#currentIndexChanged">currentIndexChanged</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> <db:link xlink:href="qdatetimeedit.xml#dateTime-prop">dateTime</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdatetimeedit.xml#dateTimeChanged">dateTimeChanged</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> <db:link xlink:href="qlineedit.xml#text-prop">text</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlineedit.xml#textChanged">textChanged</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qlistwidget.xml">QListWidget</db:link></db:para>
</db:td>
<db:td>
<db:para>int <db:link xlink:href="qlistwidget.xml#currentRow-prop">currentRow</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlistwidget.xml#currentRowChanged">currentRowChanged</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qspinbox.xml">QSpinBox</db:link></db:para>
</db:td>
<db:td>
<db:para>int <db:link xlink:href="qspinbox.xml#value-prop">value</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qspinbox.xml#valueChanged">valueChanged</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#registerField">QWizardPage::registerField</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setField">
<db:title>void QWizard::setField(const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setField</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setField(const QString &amp;name, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of the field called <db:code role="parameter">name</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function can be used to set fields on any page of the wizard.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#registerField">QWizardPage::registerField</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#setField">QWizardPage::setField</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#field">field</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOption">
<db:title>void QWizard::setOption(QWizard::WizardOption <db:emphasis>option</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOption</db:methodname>
<db:methodparam>
<db:type>QWizard::WizardOption</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOption(QWizard::WizardOption option, bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the given <db:code role="parameter">option</db:code> to be enabled if <db:code role="parameter">on</db:code> is true; otherwise, clears the given <db:code role="parameter">option</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#options">options</db:link></db:member>
<db:member><db:link xlink:href="qwizard.xml#testOption">testOption</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#wizardStyle-prop">setWizardStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPage">
<db:title>void QWizard::setPage(int <db:emphasis>id</db:emphasis>, QWizardPage *<db:emphasis>page</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPage</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWizardPage *</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPage(int id, QWizardPage *page)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">page</db:code> to the wizard with the given <db:code role="parameter">id</db:code>.</db:para>
<db:note>
<db:para>Adding a page may influence the value of the <db:link xlink:href="qwizard.xml#startId-prop">startId</db:link> property in case it was not set explicitly.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#addPage">addPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#page">page</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#pageAdded">pageAdded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPixmap">
<db:title>void QWizard::setPixmap(QWizard::WizardPixmap <db:emphasis>which</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPixmap</db:methodname>
<db:methodparam>
<db:type>QWizard::WizardPixmap</db:type>
<db:parameter>which</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPixmap(QWizard::WizardPixmap which, const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pixmap for role <db:code role="parameter">which</db:code> to <db:code role="parameter">pixmap</db:code>.</db:para>
<db:para>The pixmaps are used by <db:link xlink:href="qwizard.xml">QWizard</db:link> when displaying a page. Which pixmaps are actually used depend on the <db:link xlink:href="qwizard.xml#wizard-look-and-feel">wizard style</db:link>.</db:para>
<db:para>Pixmaps can also be set for a specific page using <db:link xlink:href="qwizardpage.xml#setPixmap">QWizardPage::setPixmap</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#pixmap">pixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qwizardpage.xml#setPixmap">QWizardPage::setPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#elements-of-a-wizard-page">Elements of a Wizard Page</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSideWidget">
<db:title>void QWizard::setSideWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSideWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSideWidget(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the given <db:code role="parameter">widget</db:code> to be shown on the left side of the wizard. For styles which use the <db:link xlink:href="qwizard.xml#WizardPixmap-enum">WatermarkPixmap</db:link> (<db:link xlink:href="qwizard.xml#WizardStyle-enum">ClassicStyle</db:link> and <db:link xlink:href="qwizard.xml#WizardStyle-enum">ModernStyle</db:link>) the side widget is displayed on top of the watermark, for other styles or when the watermark is not provided the side widget is displayed on the left side of the wizard.</db:para>
<db:para>Passing nullptr shows no side widget.</db:para>
<db:para>When the <db:code role="parameter">widget</db:code> is not nullptr the wizard reparents it.</db:para>
<db:para>Any previous side widget is hidden.</db:para>
<db:para>You may call setSideWidget() with the same widget at different times.</db:para>
<db:para>All widgets set here will be deleted by the wizard when it is destroyed unless you separately reparent the widget after setting some other side widget (or nullptr).</db:para>
<db:para>By default, no side widget is present.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#sideWidget">sideWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[override virtual] void QWizard::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setVisible</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVisible(bool visible) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#setVisible" role="function">QDialog::setVisible(bool visible)</db:link>.</db:para>
</db:section>
<db:section xml:id="sideWidget">
<db:title>QWidget *QWizard::sideWidget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>sideWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * sideWidget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the widget on the left side of the wizard or nullptr.</db:para>
<db:para>By default, no side widget is present.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#setSideWidget">setSideWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QWizard::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#sizeHint" role="function">QDialog::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="testOption">
<db:title>bool QWizard::testOption(QWizard::WizardOption <db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>testOption</db:methodname>
<db:methodparam>
<db:type>QWizard::WizardOption</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool testOption(QWizard::WizardOption option) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the given <db:code role="parameter">option</db:code> is enabled; otherwise, returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#options">options</db:link></db:member>
<db:member><db:link xlink:href="qwizard.xml#setOption">setOption</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#wizardStyle-prop">setWizardStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="validateCurrentPage">
<db:title>[virtual] bool QWizard::validateCurrentPage()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>validateCurrentPage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool validateCurrentPage()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called by <db:link xlink:href="qwizard.xml">QWizard</db:link> when the user clicks <db:guilabel>Next</db:guilabel> or <db:guilabel>Finish</db:guilabel> to perform some last-minute validation. If it returns true, the next page is shown (or the wizard finishes); otherwise, the current page stays up.</db:para>
<db:para>The default implementation calls <db:link xlink:href="qwizardpage.xml#validatePage">QWizardPage::validatePage</db:link>() on the <db:link xlink:href="qwizard.xml#currentPage">currentPage</db:link>().</db:para>
<db:para>When possible, it is usually better style to disable the <db:guilabel>Next</db:guilabel> or <db:guilabel>Finish</db:guilabel> button (by specifying <db:link xlink:href="qwizard.xml#mandatory-fields">mandatory fields</db:link> or by reimplementing <db:link xlink:href="qwizardpage.xml#isComplete">QWizardPage::isComplete</db:link>()) than to reimplement validateCurrentPage().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizardpage.xml#validatePage">QWizardPage::validatePage</db:link>()</db:member>
<db:member><db:link xlink:href="qwizard.xml#currentPage">currentPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visitedIds">
<db:title>[since 5.15] QList&lt;int&gt; QWizard::visitedIds() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;int&gt;</db:type>
<db:methodname>visitedIds</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;int&gt; visitedIds() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of IDs of visited pages, in the order in which the pages were visited.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwizard.xml#hasVisitedPage">hasVisitedPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
