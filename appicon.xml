<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Setting the Application Icon</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to set your application's icon.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The application icon, typically displayed in the top-left corner of an application's top-level windows, is set by calling the <db:link xlink:href="qwindow.xml#setIcon">QWindow::setIcon</db:link>() method.</db:para>
<db:para>In order to change the icon of the executable application file itself, as it is presented on the desktop (that is, prior to application launch), it is necessary to employ another, platform-dependent technique.</db:para>
<db:section xml:id="setting-the-application-icon-on-windows">
<db:title>Setting the Application Icon on Windows</db:title>
<db:para>First, create an ICO format bitmap file that contains the icon image. This can be done using Microsoft Visual Studio: Select <db:guilabel>File &gt;&gt; New</db:guilabel>, and choose the <db:guilabel>Icon File</db:guilabel>.</db:para>
<db:note>
<db:para>You need not load the application into the Visual Studio IDE as you are using the icon editor only.</db:para>
</db:note>
<db:para>Alternatively, an .ico file can be created from a set of images using ImageMagick's <db:link xlink:href="https://imagemagick.org/script/convert.php">convert</db:link> tool:</db:para>
<db:programlisting language="cpp" role="bad">magick.exe convert icon-16.png icon-32.png icon-256.png icon.ico
</db:programlisting>
<db:para>Store the ICO file in your application's source code directory, for example, with the name appico.ico.</db:para>
<db:section xml:id="using-cmake-on-windows">
<db:title>Using CMake on Windows</db:title>
<db:para>To configure your application's icon, a resource file containing information about the icon is required. A resource file is a text file that contains information about the application resources, such as icons, cursors, fonts, and so on. For more information about resource files and what it can contain, see <db:link xlink:href="https://docs.microsoft.com/en-us/windows/win32/menurc/about-resource-files">About Resource Files</db:link>.</db:para>
<db:para>Once you have the .rc file, add information about the ICO file to it and use it to configure your application icon.</db:para>
<db:para>The following snippet demonstrates how the <db:link xlink:href="qtdoc-demos-photosurface-example.xml">Qt Quick Demo - Photo Surface</db:link> example application uses CMake to set up an application icon:</db:para>
<db:programlisting language="cpp">    set(app_icon_resource_windows &quot;${CMAKE_CURRENT_SOURCE_DIR}/resources/photosurface.rc&quot;)
    qt_add_executable(photosurface main.cpp ${app_icon_resource_windows})
</db:programlisting>
<db:para>Notice that the set command, defines the app_icon_windows variable, which contains the path of the RC file. This variable is used with the add_executable command to set the application's icon.</db:para>
</db:section>
<db:section xml:id="using-qmake-on-windows">
<db:title>Using qmake on Windows</db:title>
<db:para>If you are still using qmake to generate your makefiles, you need to add a single line to your .pro project file:</db:para>
<db:programlisting language="cpp">RC_ICONS = myappico.ico
</db:programlisting>
<db:para>Finally, regenerate your makefile and your application. The .exe file will now be represented by your icon in Explorer.</db:para>
<db:para>However, if you already have an .rc file, for example, with the name myapp.rc, which you want to reuse, the following two steps will be required. First, put a single line of text to the myapp.rc file:</db:para>
<db:programlisting language="cpp">IDI_ICON1               ICON    &quot;myappico.ico&quot;
</db:programlisting>
<db:para>Then, add this line to your myapp.pro file:</db:para>
<db:programlisting language="cpp">RC_FILE = myapp.rc
</db:programlisting>
<db:para>If you do not use qmake, the necessary steps are: first, create an .rc file and run the rc or windres program on the .rc file, then link your application with the resulting .res file.</db:para>
</db:section>
</db:section>
<db:section xml:id="setting-the-application-icon-on-macos">
<db:title>Setting the Application Icon on macOS</db:title>
<db:para>The application icon, typically displayed in the application dock area, is set by calling QWindow::setWindowIcon() on a window. It is possible that the program could appear in the application dock area before the function call, in which case a default icon will appear during the bouncing animation.</db:para>
<db:para>To ensure that the correct icon appears, both when the application is being launched, and in the Finder, it is necessary to employ a platform-dependent technique.</db:para>
<db:para>Although many programs can create icon files (.icns), the recommended approach is to use the <db:emphasis>iconutil</db:emphasis> program supplied by Apple. <db:emphasis>iconutil</db:emphasis> is a command-line tool that converts iconset folders to deployment-ready, high-resolution icns files. Using this tool also compresses the resulting icns file, so there is no need for you to perform additional compression.</db:para>
<db:section xml:id="using-cmake-on-macos">
<db:title>Using CMake on macOS</db:title>
<db:para>To configure the application's icon, the Info.plist file generated by CMake must contain the icon information. This can be achieved by setting the .icns file name to the MACOSX_BUNDLE_ICON_FILE variable.</db:para>
<db:para>The following snippet demonstrates how the <db:link xlink:href="qtdoc-demos-photosurface-example.xml">Qt Quick Demo - Photo Surface</db:link> example application uses CMake to set up an application icon:</db:para>
<db:programlisting language="cpp">    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # generated by CMake. This variable contains the .icns file name,
    # without the path.
    set(MACOSX_BUNDLE_ICON_FILE photosurface.icns)

    # And the following tells CMake where to find and install the file itself.
    set(app_icon_macos &quot;${CMAKE_CURRENT_SOURCE_DIR}/resources/photosurface.icns&quot;)
    set_source_files_properties(${app_icon_macos} PROPERTIES
           MACOSX_PACKAGE_LOCATION &quot;Resources&quot;)

    qt_add_executable(photosurface MACOSX_BUNDLE main.cpp ${app_icon_macos})
</db:programlisting>
<db:para>Notice that the first set command defines the MACOSX_BUNDLE_ICON_FILE variable, which is required to add the icon file to the Info.plist file. The second set command defines the app_icon_macos variable with the absolute path to the icon file. This variable is then used to configure MACOSX_PACKAGE_LOCATION, which defines the icon file's install location. Finally, the add_executable uses the app_icon_macOS variable to set the application's icon.</db:para>
</db:section>
<db:section xml:id="using-qmake-on-macos">
<db:title>Using qmake on macOS</db:title>
<db:para>If you are still using qmake to generate your makefiles, you only need to add a single line to your .pro project file. For example, if the name of your icon file is myapp.icns, and your project file is myapp.pro, add this line to myapp.pro:</db:para>
<db:programlisting language="cpp">ICON = myapp.icns
</db:programlisting>
<db:para>This will ensure that qmake puts your icons in the proper place and creates an Info.plist entry for the icon.</db:para>
<db:para>If you do not use qmake, you must do the following manually:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Create an Info.plist file for your application (using the PropertyListEditor, found in Developer/Applications).</db:para>
</db:listitem>
<db:listitem>
<db:para>Associate your .icns record with the CFBundleIconFile record in the Info.plist file (again, using the PropertyListEditor).</db:para>
</db:listitem>
<db:listitem>
<db:para>Copy the Info.plist file into your application bundle's Contents directory.</db:para>
</db:listitem>
<db:listitem>
<db:para>Copy the .icns file into your application bundle's Contents/Resources directory.</db:para>
</db:listitem>
</db:orderedlist>
</db:section>
</db:section>
<db:section xml:id="setting-the-application-icon-on-common-linux-desktops">
<db:title>Setting the Application Icon on Common Linux Desktops</db:title>
<db:para>In this section we briefly describe the issues involved in providing icons for applications for two common Linux desktop environments: <db:link xlink:href="http://www.kde.org/">KDE</db:link> and <db:link xlink:href="http://www.gnome.org/">GNOME</db:link>. The core technology used to describe application icons is the same for both desktops, and may also apply to others, but there are details which are specific to each. The main source of information on the standards used by these Linux desktops is <db:link xlink:href="http://www.freedesktop.org/">freedesktop.org</db:link>. For information on other Linux desktops please refer to the documentation for the desktops you are interested in.</db:para>
<db:para>Often, users do not use executable files directly, but instead launch applications by clicking icons on the desktop. These icons are representations of &quot;desktop entry files&quot; that contain a description of the application that includes information about its icon. Both desktop environments are able to retrieve the information in these files, and they use it to generate shortcuts to applications on the desktop, in the start menu, and on the panel.</db:para>
<db:para>More information about desktop entry files can be found in the <db:link xlink:href="http://www.freedesktop.org/Standards/desktop-entry-spec">Desktop Entry Specification</db:link>.</db:para>
<db:para>Although desktop entry files can usefully encapsulate the application's details, we still need to store the icons in the conventional location for each desktop environment. A number of locations for icons are given in the <db:link xlink:href="http://www.freedesktop.org/Standards/icon-theme-spec">Icon Theme Specification</db:link>.</db:para>
<db:para>Although the path used to locate icons depends on the desktop in use, and on its configuration, the directory structure beneath each of these should follow the same pattern: subdirectories are arranged by theme, icon size, and application type. Generally, application icons are added to the hicolor theme, so a square application icon 32 pixels in size would be stored in the hicolor/32x32/apps directory beneath the icon path.</db:para>
<db:section xml:id="k-desktop-environment-kde">
<db:title>K Desktop Environment (KDE)</db:title>
<db:para>Application icons can be installed for use by all users, or on a per-user basis. A user currently logged into their KDE 4 desktop can discover these locations by using kde4-config, for example, by typing the following in a terminal window:</db:para>
<db:programlisting language="cpp">kde4-config --path icon
</db:programlisting>
<db:para>Applications using Qt 5 and KDE Frameworks 5 will find their icons in the list returned by this command:</db:para>
<db:programlisting language="cpp">qtpaths --locate-dirs GenericDataLocation icons
</db:programlisting>
<db:para>Typically, the list of colon-separated paths printed to stdout includes the user-specific icon path and the system-wide path. Beneath these directories, it should be possible to locate and install icons according to the conventions described in the <db:link xlink:href="http://www.freedesktop.org/Standards/icon-theme-spec">Icon Theme Specification</db:link>.</db:para>
<db:para>If you are developing exclusively for KDE, you may wish to take advantage of the <db:link xlink:href="http://techbase.kde.org/Development/CMake/Addons_for_KDE">KDE build system</db:link> to configure your application. This ensures that your icons are installed in the appropriate locations for KDE.</db:para>
<db:para>The KDE developer website is at <db:link xlink:href="http://techbase.kde.org/">http://techbase.kde.org/</db:link>.</db:para>
</db:section>
<db:section xml:id="gnome">
<db:title>GNOME</db:title>
<db:para>Application icons are stored within a standard system-wide directory containing architecture-independent files. This location can be determined by using gnome-config, for example by typing the following in a terminal window:</db:para>
<db:programlisting language="cpp">gnome-config --datadir
</db:programlisting>
<db:para>The path printed on stdout refers to a location that should contain a directory called pixmaps; the directory structure within the pixmaps directory is described in the <db:link xlink:href="http://www.freedesktop.org/Standards/icon-theme-spec">Icon Theme Specification</db:link>.</db:para>
<db:para>If you are developing exclusively for GNOME, you may want to use the standard set of GNU Build Tools. For more information, see the <db:link xlink:href="https://developer.gnome.org/platform-overview/unstable/dev-launching.html.en">Application launching</db:link> section. This ensures that your icons are installed in the appropriate locations for GNOME.</db:para>
<db:para>The GNOME developer website, <db:link xlink:href="http://developer.gnome.org/">http://developer.gnome.org/</db:link>, provides more insight into developing applications.</db:para>
</db:section>
</db:section>
</db:article>
