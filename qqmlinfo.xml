<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlInfo Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlinfo.xml">QQmlInfo</db:link> class allows logging of QML-related messages.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlInfo</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdebug.xml" xlink:role="class">QDebug</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qqmlinfo.xml">QQmlInfo</db:link> is an opaque handle for QML-related diagnostic messages. You can use the <db:code>&lt;&lt;</db:code> operator to add content to the message. When the <db:link xlink:href="qqmlinfo.xml">QQmlInfo</db:link> object is destroyed, it prints the resulting message along with information on the context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlinfo.xml#qmlDebug">qmlDebug</db:link></db:member>
<db:member><db:link xlink:href="qqmlinfo.xml#qmlInfo">qmlInfo</db:link></db:member>
<db:member><db:link xlink:href="qqmlinfo.xml#qmlWarning">qmlWarning</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qmlDebug">
<db:title>QQmlInfo qmlDebug(const QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Prints debug messages that include the file and line number for the specified QML <db:code role="parameter">object</db:code>.</db:para>
<db:para>When QML types produce logging messages, it improves traceability if they include the QML file and line number on which the particular instance was instantiated.</db:para>
<db:para>To include the file and line number, an object must be passed. If the file and line number is not available for that instance (either it was not instantiated by the QML engine or location information is disabled), &quot;unknown location&quot; will be used instead.</db:para>
<db:para>For example,</db:para>
<db:programlisting language="cpp">qmlDebug(object) &lt;&lt; &quot;Internal state: 42&quot;;
</db:programlisting>
<db:para>prints</db:para>
<db:programlisting language="cpp" role="bad">QML MyCustomType (unknown location): Internal state: 42
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlinfo.xml#qmlInfo">qmlInfo</db:link></db:member>
<db:member><db:link xlink:href="qqmlinfo.xml#qmlWarning">qmlWarning</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qmlInfo">
<db:title>QQmlInfo qmlInfo(const QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Prints informational messages that include the file and line number for the specified QML <db:code role="parameter">object</db:code>.</db:para>
<db:para>When QML types produce logging messages, it improves traceability if they include the QML file and line number on which the particular instance was instantiated.</db:para>
<db:para>To include the file and line number, an object must be passed. If the file and line number is not available for that instance (either it was not instantiated by the QML engine or location information is disabled), &quot;unknown location&quot; will be used instead.</db:para>
<db:para>For example,</db:para>
<db:programlisting language="cpp">qmlInfo(object) &lt;&lt; tr(&quot;component property is a write-once property&quot;);
</db:programlisting>
<db:para>prints</db:para>
<db:programlisting language="cpp" role="bad">QML MyCustomType (unknown location): component property is a write-once property
</db:programlisting>
<db:note>
<db:para>In versions prior to Qt 5.9, qmlInfo reported messages using a warning <db:link xlink:href="qtlogging.xml#QtMsgType-enum">QtMsgType</db:link>. For Qt 5.9 and above, qmlInfo uses an info <db:link xlink:href="qtlogging.xml#QtMsgType-enum">QtMsgType</db:link>. To send warnings, use <db:link xlink:href="qqmlinfo.xml#qmlWarning">qmlWarning</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlinfo.xml#qmlDebug">qmlDebug</db:link></db:member>
<db:member><db:link xlink:href="qqmlinfo.xml#qmlWarning">qmlWarning</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qmlWarning">
<db:title>QQmlInfo qmlWarning(const QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Prints warning messages that include the file and line number for the specified QML <db:code role="parameter">object</db:code>.</db:para>
<db:para>When QML types produce logging messages, it improves traceability if they include the QML file and line number on which the particular instance was instantiated.</db:para>
<db:para>To include the file and line number, an object must be passed. If the file and line number is not available for that instance (either it was not instantiated by the QML engine or location information is disabled), &quot;unknown location&quot; will be used instead.</db:para>
<db:para>For example,</db:para>
<db:programlisting language="cpp">qmlInfo(object) &lt;&lt; tr(&quot;property cannot be set to 0&quot;);
</db:programlisting>
<db:para>prints</db:para>
<db:programlisting language="cpp" role="bad">QML MyCustomType (unknown location): property cannot be set to 0
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlinfo.xml#qmlDebug">qmlDebug</db:link></db:member>
<db:member><db:link xlink:href="qqmlinfo.xml#qmlInfo">qmlInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
