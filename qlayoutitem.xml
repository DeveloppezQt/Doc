<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLayoutItem Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlayoutitem.xml">QLayoutItem</db:link> class provides an abstract item that a <db:link xlink:href="qlayout.xml">QLayout</db:link> manipulates.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLayoutItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlayout.xml" xlink:role="class">QLayout</db:link>, <db:link xlink:href="qspaceritem.xml" xlink:role="class">QSpacerItem</db:link>, and <db:link xlink:href="qwidgetitem.xml" xlink:role="class">QWidgetItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QLayoutItem is part of <db:simplelist><db:member>geomanagement</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This is used by custom layouts.</db:para>
<db:para>Pure virtual functions are provided to return information about the layout, including, <db:link xlink:href="qlayoutitem.xml#sizeHint">sizeHint</db:link>(), <db:link xlink:href="qlayoutitem.xml#minimumSize">minimumSize</db:link>(), <db:link xlink:href="qlayoutitem.xml#maximumSize">maximumSize</db:link>() and <db:link xlink:href="qlayoutitem.xml#expandingDirections">expandingDirections</db:link>().</db:para>
<db:para>The layout's geometry can be set and retrieved with <db:link xlink:href="qlayoutitem.xml#setGeometry">setGeometry</db:link>() and <db:link xlink:href="qlayoutitem.xml#geometry">geometry</db:link>(), and its alignment with <db:link xlink:href="qlayoutitem.xml#setAlignment">setAlignment</db:link>() and <db:link xlink:href="qlayoutitem.xml#alignment">alignment</db:link>().</db:para>
<db:para><db:link xlink:href="qlayoutitem.xml#isEmpty">isEmpty</db:link>() returns whether the layout item is empty. If the concrete item is a <db:link xlink:href="qwidget.xml">QWidget</db:link>, it can be retrieved using <db:link xlink:href="qlayoutitem.xml#widget">widget</db:link>(). Similarly for <db:link xlink:href="qlayoutitem.xml#layout">layout</db:link>() and <db:link xlink:href="qlayoutitem.xml#spacerItem">spacerItem</db:link>().</db:para>
<db:para>Some layouts have width and height interdependencies. These can be expressed using <db:link xlink:href="qlayoutitem.xml#hasHeightForWidth">hasHeightForWidth</db:link>(), <db:link xlink:href="qlayoutitem.xml#heightForWidth">heightForWidth</db:link>(), and <db:link xlink:href="qlayoutitem.xml#minimumHeightForWidth">minimumHeightForWidth</db:link>(). For more explanation see the <db:emphasis>Qt Quarterly</db:emphasis> article <db:link xlink:href="http://doc.qt.io/archives/qq/qq04-height-for-width.html">Trading Height for Width</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml">QLayout</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QLayoutItem">
<db:title>[explicit] QLayoutItem::QLayoutItem(Qt::Alignment <db:emphasis>alignment</db:emphasis> = Qt::Alignment())</db:title>
<db:constructorsynopsis>
<db:methodname>QLayoutItem</db:methodname>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
<db:initializer>Qt::Alignment()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayoutItem(Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a layout item with an <db:code role="parameter">alignment</db:code>. Not all subclasses support alignment.</db:para>
</db:section>
<db:section xml:id="dtor.QLayoutItem">
<db:title>[virtual] QLayoutItem::~QLayoutItem()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QLayoutItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QLayoutItem()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qlayoutitem.xml">QLayoutItem</db:link>.</db:para>
</db:section>
<db:section xml:id="alignment">
<db:title>Qt::Alignment QLayoutItem::alignment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::Alignment</db:type>
<db:methodname>alignment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Alignment alignment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the alignment of this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayoutitem.xml#setAlignment">setAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="controlTypes">
<db:title>[virtual] QSizePolicy::ControlTypes QLayoutItem::controlTypes() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSizePolicy::ControlTypes</db:type>
<db:methodname>controlTypes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizePolicy::ControlTypes controlTypes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the control type(s) for the layout item. For a <db:link xlink:href="qwidgetitem.xml">QWidgetItem</db:link>, the control type comes from the widget's size policy; for a <db:link xlink:href="qlayoutitem.xml">QLayoutItem</db:link>, the control types is derived from the layout's contents.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#controlType">QSizePolicy::controlType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expandingDirections">
<db:title>[pure virtual] Qt::Orientations QLayoutItem::expandingDirections() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt::Orientations</db:type>
<db:methodname>expandingDirections</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Orientations expandingDirections() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this layout item can make use of more space than <db:link xlink:href="qlayoutitem.xml#sizeHint">sizeHint</db:link>(). A value of <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link> or <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> means that it wants to grow in only one dimension, whereas <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link> | <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> means that it wants to grow in both dimensions.</db:para>
</db:section>
<db:section xml:id="geometry">
<db:title>[pure virtual] QRect QLayoutItem::geometry() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>geometry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect geometry() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the rectangle covered by this layout item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayoutitem.xml#setGeometry">setGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasHeightForWidth">
<db:title>[virtual] bool QLayoutItem::hasHeightForWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasHeightForWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasHeightForWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this layout's preferred height depends on its width; otherwise returns <db:code>false</db:code>. The default implementation returns false.</db:para>
<db:para>Reimplement this function in layout managers that support height for width.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayoutitem.xml#heightForWidth">heightForWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#heightForWidth">QWidget::heightForWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="heightForWidth">
<db:title>[virtual] int QLayoutItem::heightForWidth(<db:emphasis>int</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>heightForWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int heightForWidth(int) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the preferred height for this layout item, given the width, which is not used in this default implementation.</db:para>
<db:para>The default implementation returns -1, indicating that the preferred height is independent of the width of the item. Using the function <db:link xlink:href="qlayoutitem.xml#hasHeightForWidth">hasHeightForWidth</db:link>() will typically be much faster than calling this function and testing for -1.</db:para>
<db:para>Reimplement this function in layout managers that support height for width. A typical implementation will look like this:</db:para>
<db:programlisting language="cpp">int MyLayout::heightForWidth(int w) const
{
    if (cache_dirty || cached_width != w) {
        MyLayout *that = const_cast&amp;lt;MyLayout *&amp;gt;(this);
        int h = calculateHeightForWidth(w);
        that-&amp;gt;cached_hfw = h;
        return h;
    }
    return cached_hfw;
}
</db:programlisting>
<db:para>Caching is strongly recommended; without it layout will take exponential time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayoutitem.xml#hasHeightForWidth">hasHeightForWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invalidate">
<db:title>[virtual] void QLayoutItem::invalidate()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>invalidate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void invalidate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Invalidates any cached information in this layout item.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[pure virtual] bool QLayoutItem::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implemented in subclasses to return whether this item is empty, i.e. whether it contains any widgets.</db:para>
</db:section>
<db:section xml:id="layout">
<db:title>[virtual] QLayout *QLayoutItem::layout()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QLayout *</db:type>
<db:methodname>layout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayout * layout()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If this item is a <db:link xlink:href="qlayout.xml">QLayout</db:link>, it is returned as a <db:link xlink:href="qlayout.xml">QLayout</db:link>; otherwise <db:code>nullptr</db:code> is returned. This function provides type-safe casting.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayoutitem.xml#spacerItem">spacerItem</db:link>()</db:member>
<db:member><db:link xlink:href="qlayoutitem.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumSize">
<db:title>[pure virtual] QSize QLayoutItem::maximumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>maximumSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize maximumSize() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implemented in subclasses to return the maximum size of this item.</db:para>
</db:section>
<db:section xml:id="minimumHeightForWidth">
<db:title>[virtual] int QLayoutItem::minimumHeightForWidth(int <db:emphasis>w</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>minimumHeightForWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int minimumHeightForWidth(int w) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum height this widget needs for the given width, <db:code role="parameter">w</db:code>. The default implementation simply returns <db:link xlink:href="qlayoutitem.xml#heightForWidth">heightForWidth</db:link>(<db:code role="parameter">w</db:code>).</db:para>
</db:section>
<db:section xml:id="minimumSize">
<db:title>[pure virtual] QSize QLayoutItem::minimumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>minimumSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize minimumSize() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implemented in subclasses to return the minimum size of this item.</db:para>
</db:section>
<db:section xml:id="setAlignment">
<db:title>void QLayoutItem::setAlignment(Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAlignment</db:methodname>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAlignment(Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the alignment of this item to <db:code role="parameter">alignment</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Item alignment is only supported by <db:link xlink:href="qlayoutitem.xml">QLayoutItem</db:link> subclasses where it would have a visual effect. Except for <db:link xlink:href="qspaceritem.xml">QSpacerItem</db:link>, which provides blank space for layouts, all public Qt classes that inherit <db:link xlink:href="qlayoutitem.xml">QLayoutItem</db:link> support item alignment.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayoutitem.xml#alignment">alignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry">
<db:title>[pure virtual] void QLayoutItem::setGeometry(const QRect &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setGeometry</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGeometry(const QRect &amp;r) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implemented in subclasses to set this item's geometry to <db:code role="parameter">r</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayoutitem.xml#geometry">geometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[pure virtual] QSize QLayoutItem::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Implemented in subclasses to return the preferred size of this item.</db:para>
</db:section>
<db:section xml:id="spacerItem">
<db:title>[virtual] QSpacerItem *QLayoutItem::spacerItem()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QSpacerItem *</db:type>
<db:methodname>spacerItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSpacerItem * spacerItem()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If this item is a <db:link xlink:href="qspaceritem.xml">QSpacerItem</db:link>, it is returned as a <db:link xlink:href="qspaceritem.xml">QSpacerItem</db:link>; otherwise <db:code>nullptr</db:code> is returned. This function provides type-safe casting.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayoutitem.xml#layout">layout</db:link>()</db:member>
<db:member><db:link xlink:href="qlayoutitem.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widget">
<db:title>[virtual] QWidget *QLayoutItem::widget() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>widget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * widget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If this item manages a <db:link xlink:href="qwidget.xml">QWidget</db:link>, returns that widget. Otherwise, <db:code>nullptr</db:code> is returned.</db:para>
<db:note>
<db:para>While the functions <db:link xlink:href="qlayoutitem.xml#layout">layout</db:link>() and <db:link xlink:href="qlayoutitem.xml#spacerItem">spacerItem</db:link>() perform casts, this function returns another object: <db:link xlink:href="qlayout.xml">QLayout</db:link> and <db:link xlink:href="qspaceritem.xml">QSpacerItem</db:link> inherit <db:link xlink:href="qlayoutitem.xml">QLayoutItem</db:link>, while <db:link xlink:href="qwidget.xml">QWidget</db:link> does not.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayoutitem.xml#layout">layout</db:link>()</db:member>
<db:member><db:link xlink:href="qlayoutitem.xml#spacerItem">spacerItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
