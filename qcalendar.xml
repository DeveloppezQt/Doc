<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCalendar Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcalendar.xml">QCalendar</db:link> class describes calendar systems.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCalendar</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qcalendar.xml">QCalendar</db:link> object maps a year, month, and day-number to a specific day (ultimately identified by its Julian day number), using the rules of a particular system.</db:para>
<db:para>The default <db:link xlink:href="qcalendar.xml#QCalendar">QCalendar</db:link>() is a proleptic Gregorian calendar, which has no year zero. Other calendars may be supported by enabling suitable features or loading plugins. Calendars supported as features can be constructed by passing the <db:link xlink:href="qcalendar.xml#System-enum">QCalendar::System</db:link> enumeration to the constructor. All supported calendars may be constructed by name, once they have been constructed. (Thus plugins instantiate their calendar backend to register it.) Built-in backends, accessible via <db:link xlink:href="qcalendar.xml#System-enum">QCalendar::System</db:link>, are also always available by name. Calendars using custom backends may also be constructed using a unique ID allocated to the backend on construction.</db:para>
<db:para>A <db:link xlink:href="qcalendar.xml">QCalendar</db:link> value is immutable.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml">QDate</db:link></db:member>
<db:member><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="System-enum">
<db:title>enum QCalendar::System</db:title>
<db:para>This enumerated type is used to specify a choice of calendar system.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcalendar.xml">QCalendar</db:link></db:emphasis>::<db:emphasis role="bold">System</db:emphasis>::Gregorian</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The default calendar, used internationally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcalendar.xml">QCalendar</db:link></db:emphasis>::<db:emphasis role="bold">System</db:emphasis>::Julian</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>An ancient Roman calendar.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcalendar.xml">QCalendar</db:link></db:emphasis>::<db:emphasis role="bold">System</db:emphasis>::Milankovic</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>A revised Julian calendar used by some Orthodox churches.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcalendar.xml">QCalendar</db:link></db:emphasis>::<db:emphasis role="bold">System</db:emphasis>::Jalali</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>The Solar Hijri calendar (also called Persian).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcalendar.xml">QCalendar</db:link></db:emphasis>::<db:emphasis role="bold">System</db:emphasis>::IslamicCivil</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>The (tabular) Islamic Civil calendar.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml">QCalendar</db:link></db:member>
<db:member><db:link xlink:href="qcalendar-systemid.xml">QCalendar::SystemId</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCalendar">
<db:title>[explicit] QCalendar::QCalendar()</db:title>
<db:bridgehead renderas="sect2" xml:id="QCalendar-1">[explicit] QCalendar::QCalendar(QAnyStringView <db:emphasis>name</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="QCalendar-2">[explicit] QCalendar::QCalendar(QCalendar::System <db:emphasis>system</db:emphasis>)</db:bridgehead>
<db:para>Constructs a calendar object.</db:para>
<db:para>The choice of calendar to use may be indicated by <db:code role="parameter">system</db:code>, using the enumeration <db:link xlink:href="qcalendar.xml#System-enum">QCalendar::System</db:link>, or by <db:code role="parameter">name</db:code>, using a string (either Unicode or Latin 1). Construction by name may depend on an instance of the given calendar being constructed by other means first. With no argument, the default constructor returns the Gregorian calendar.</db:para>
<db:note>
<db:para>In Qt versions before 6.4, the constructor by <db:code role="parameter">name</db:code> accepted only <db:link xlink:href="qstringview.xml">QStringView</db:link> and <db:link xlink:href="qlatin1string.xml">QLatin1String</db:link>, not <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml">QCalendar</db:link></db:member>
<db:member><db:link xlink:href="qcalendar.xml#System-enum">System</db:link></db:member>
<db:member><db:link xlink:href="qcalendar.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dateFromParts">
<db:title>QDate QCalendar::dateFromParts(const QCalendar::YearMonthDay &amp;<db:emphasis>parts</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="dateFromParts-1">QDate QCalendar::dateFromParts(int <db:emphasis>year</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>day</db:emphasis>) const</db:bridgehead>
<db:para>Converts a year, month, and day to a <db:link xlink:href="qdate.xml">QDate</db:link>.</db:para>
<db:para>The <db:code role="parameter">year</db:code>, <db:code role="parameter">month</db:code>, and <db:code role="parameter">day</db:code> may be passed as separate numbers or packaged together as the members of <db:code role="parameter">parts</db:code>. Returns a <db:link xlink:href="qdate.xml">QDate</db:link> with the given year, month, and day of the month in this calendar, if there is one. Otherwise, including the case where any of the values is QCalendar::Unspecified, returns a <db:link xlink:href="qdate.xml">QDate</db:link> whose isNull() is true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#isDateValid">isDateValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#partsFromDate">partsFromDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QCalendar-3">
<db:title>[explicit, since 6.2] QCalendar::QCalendar(QCalendar::SystemId <db:emphasis>id</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Constructs a calendar object.</db:para>
<db:para>When using a custom calendar implementation, its backend is allocated a unique ID when created; passing that as <db:code role="parameter">id</db:code> to this constructor will get a <db:link xlink:href="qcalendar.xml">QCalendar</db:link> using that backend. This can be useful when the backend is not registered by name.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="availableCalendars">
<db:title>[static] QStringList QCalendar::availableCalendars()</db:title>
<db:para>Returns a list of names of the available calendar systems.</db:para>
<db:para>These may be supplied by plugins or other code linked into an application, in addition to the ones provided by Qt, some of which are controlled by features.</db:para>
</db:section>
<db:section xml:id="dateTimeToString">
<db:title>QString QCalendar::dateTimeToString(QStringView <db:emphasis>format</db:emphasis>, const QDateTime &amp;<db:emphasis>datetime</db:emphasis>, QDate <db:emphasis>dateOnly</db:emphasis>, QTime <db:emphasis>timeOnly</db:emphasis>, const QLocale &amp;<db:emphasis>locale</db:emphasis>) const</db:title>
<db:para>Returns a string representing a given date, time or date-time.</db:para>
<db:para>If <db:code role="parameter">datetime</db:code> is valid, it is represented and format specifiers for both date and time fields are recognized; otherwise, if <db:code role="parameter">dateOnly</db:code> is valid, it is represented and only format specifiers for date fields are recognized; finally, if <db:code role="parameter">timeOnly</db:code> is valid, it is represented and only format specifiers for time fields are recognized. If none of these is valid, an empty string is returned.</db:para>
<db:para>See <db:link xlink:href="qdate.xml#toString">QDate::toString</db:link> and <db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>() for the supported field specifiers. Characters in <db:code role="parameter">format</db:code> that are recognized as field specifiers are replaced by text representing appropriate data from the date and/or time being represented. The texts to represent them may depend on the <db:code role="parameter">locale</db:code> specified. Other charagers in <db:code role="parameter">format</db:code> are copied verbatim into the returned string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#monthName">monthName</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#weekDayName">weekDayName</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#toString">QDate::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dayOfWeek">
<db:title>int QCalendar::dayOfWeek(QDate <db:emphasis>date</db:emphasis>) const</db:title>
<db:para>Returns the day of the week number for the given <db:code role="parameter">date</db:code>.</db:para>
<db:para>Returns zero if the calendar is unable to represent the indicated date. Returns 1 for Monday through 7 for Sunday. Calendars with intercallary days may use other numbers to represent these.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#partsFromDate">partsFromDate</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#DayOfWeek-enum">Qt::DayOfWeek</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysInMonth">
<db:title>int QCalendar::daysInMonth(int <db:emphasis>month</db:emphasis>, int <db:emphasis>year</db:emphasis> = Unspecified) const</db:title>
<db:para>Returns the number of days in the given <db:code role="parameter">month</db:code> of the given <db:code role="parameter">year</db:code>.</db:para>
<db:para>Months are numbered consecutively, starting with 1 for the first month of each year. If <db:code role="parameter">year</db:code> is Unspecified (its default, if not passed), the month's length in a normal year is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#maximumDaysInMonth">maximumDaysInMonth</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#minimumDaysInMonth">minimumDaysInMonth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysInYear">
<db:title>int QCalendar::daysInYear(int <db:emphasis>year</db:emphasis>) const</db:title>
<db:para>Returns the number of days in the given <db:code role="parameter">year</db:code>.</db:para>
<db:para>Handling of Unspecified as <db:code role="parameter">year</db:code> is undefined.</db:para>
</db:section>
<db:section xml:id="hasYearZero">
<db:title>bool QCalendar::hasYearZero() const</db:title>
<db:para>Returns true if this calendar has a year zero.</db:para>
<db:para>A calendar may represent years from its first year onwards but provide no way to describe years before its first; such a calendar has no year zero and is not proleptic.</db:para>
<db:para>A calendar which represents years before its first may number these years simply by following the usual integer counting, so that the year before the first is year zero, with negative-numbered years preceding this; such a calendar is proleptic and has a year zero. A calendar might also have a year zero (for example, the year of some great event, with subsequent years being the first year after that event, the second year after, and so on) without describing years before its year zero. Such a calendar would have a year zero without being proleptic.</db:para>
<db:para>Some calendars, however, represent years before their first by an alternate numbering; for example, the proleptic Gregorian calendar's first year is 1 CE and the year before it is 1 BCE, preceded by 2 BCE and so on. In this case, we use negative year numbers for this alternate numbering, with year -1 as the year before year 1, year -2 as the year before year -1 and so on. Such a calendar is proleptic but has no year zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#isProleptic">isProleptic</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDateValid">
<db:title>bool QCalendar::isDateValid(int <db:emphasis>year</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>day</db:emphasis>) const</db:title>
<db:para>Returns true precisely if the given <db:code role="parameter">year</db:code>, <db:code role="parameter">month</db:code>, and <db:code role="parameter">day</db:code> specify a valid date in this calendar.</db:para>
<db:para>Usually this means 1 &lt;= month &lt;= <db:link xlink:href="qcalendar.xml#monthsInYear">monthsInYear</db:link>(year) and 1 &lt;= day &lt;= <db:link xlink:href="qcalendar.xml#daysInMonth">daysInMonth</db:link>(month, year). However, calendars with intercallary days or months may complicate that.</db:para>
</db:section>
<db:section xml:id="isGregorian">
<db:title>bool QCalendar::isGregorian() const</db:title>
<db:para>Returns true if this calendar object is the Gregorian calendar object used as default calendar by other Qt APIs, e.g. in <db:link xlink:href="qdate.xml">QDate</db:link>.</db:para>
</db:section>
<db:section xml:id="isLeapYear">
<db:title>bool QCalendar::isLeapYear(int <db:emphasis>year</db:emphasis>) const</db:title>
<db:para>Returns true if the given <db:code role="parameter">year</db:code> is a leap year.</db:para>
<db:para>Since the year is not a whole number of days long, some years are longer than others. The difference may be a whole month or just a single day; the details vary between calendars.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#isDateValid">isDateValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLunar">
<db:title>bool QCalendar::isLunar() const</db:title>
<db:para>Returns true if this calendar is a lunar calendar.</db:para>
<db:para>A lunar calendar is one based primarily on the phases of the moon.</db:para>
</db:section>
<db:section xml:id="isLuniSolar">
<db:title>bool QCalendar::isLuniSolar() const</db:title>
<db:para>Returns true if this calendar is luni-solar.</db:para>
<db:para>A luni-solar calendar expresses the phases of the moon but adapts itself to also keep track of the Sun's varying position in the sky, relative to the fixed stars.</db:para>
</db:section>
<db:section xml:id="isProleptic">
<db:title>bool QCalendar::isProleptic() const</db:title>
<db:para>Returns true if this calendar is proleptic.</db:para>
<db:para>A proleptic calendar is able to describe years arbitrarily long before its first. These are represented by negative year numbers and possibly by a year zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#hasYearZero">hasYearZero</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSolar">
<db:title>bool QCalendar::isSolar() const</db:title>
<db:para>Returns true if this calendar is solar.</db:para>
<db:para>A solar calendar is based primarily on the Sun's varying position in the sky, relative to the fixed stars.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QCalendar::isValid() const</db:title>
<db:para>Returns true if this is a valid calendar object.</db:para>
<db:para>Constructing a calendar with an unrecognised calendar name may result in an invalid object. Use this method to check after creating a calendar by name.</db:para>
</db:section>
<db:section xml:id="matchCenturyToWeekday">
<db:title>[since 6.7] QDate QCalendar::matchCenturyToWeekday(const QCalendar::YearMonthDay &amp;<db:emphasis>parts</db:emphasis>, int <db:emphasis>dow</db:emphasis>) const</db:title>
<db:para>Adjusts the century of a date to match a given day of the week.</db:para>
<db:para>For use when given a date's day of week, day of month, month and last two digits of the year. Returns a <db:link xlink:href="qdate.xml">QDate</db:link> instance with the given <db:code role="parameter">dow</db:code> as its <db:link xlink:href="qdate.xml#dayOfWeek-1">dayOfWeek</db:link>(), matching the given <db:code role="parameter">parts</db:code> in month and day of the month. The returned <db:link xlink:href="qdate.xml">QDate</db:link>'s <db:link xlink:href="qdate.xml#year-1">year</db:link>() shall differ from parts.year by a multiple of 100, preferring small multiples over larger and positive multiples over their negations.</db:para>
<db:para>If no date matches these conditions, an invalid <db:link xlink:href="qdate.xml">QDate</db:link> is returned: the day of week is incompatible with the other data given. This arises, for example, with the Gregorian calendar, whose 400-year cycle is a whole number of weeks long, so any given month and day of that month only ever falls, in years with a given last two digits, on four days of the week. (In the special case of February 29th at the turn of a century, when that is a leap year, only one day of the week is possible: Tuesday.)</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="maximumDaysInMonth">
<db:title>int QCalendar::maximumDaysInMonth() const</db:title>
<db:para>Returns the number of days in the longest month in the calendar, in any year.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#daysInMonth">daysInMonth</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#minimumDaysInMonth">minimumDaysInMonth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumMonthsInYear">
<db:title>int QCalendar::maximumMonthsInYear() const</db:title>
<db:para>Returns the largest number of months that any year may contain.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#monthName">monthName</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#standaloneMonthName">standaloneMonthName</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#monthsInYear">monthsInYear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumDaysInMonth">
<db:title>int QCalendar::minimumDaysInMonth() const</db:title>
<db:para>Returns the number of days in the shortest month in the calendar, in any year.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#daysInMonth">daysInMonth</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#maximumDaysInMonth">maximumDaysInMonth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="monthName">
<db:title>QString QCalendar::monthName(const QLocale &amp;<db:emphasis>locale</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>year</db:emphasis> = Unspecified, QLocale::FormatType <db:emphasis>format</db:emphasis> = QLocale::LongFormat) const</db:title>
<db:para>Returns a suitably localised name for a month.</db:para>
<db:para>The month is indicated by a number, with <db:code role="parameter">month</db:code> = 1 meaning the first month of the year and subsequent months numbered accordingly. Returns an empty string if the <db:code role="parameter">month</db:code> number is unrecognized.</db:para>
<db:para>The <db:code role="parameter">year</db:code> may be Unspecified, in which case the mapping from numbers to names for a typical year's months should be used. Some calendars have leap months that aren't always at the end of the year; their mapping of month numbers to names may then depend on the placement of a leap month. Thus the year should normally be specified, if known.</db:para>
<db:para>The name is returned in the form that would normally be used in a full date, in the specified <db:code role="parameter">locale</db:code>; the <db:code role="parameter">format</db:code> determines how fully it shall be expressed (i.e. to what extent it is abbreviated).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#standaloneMonthName">standaloneMonthName</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#maximumMonthsInYear">maximumMonthsInYear</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#dateTimeToString">dateTimeToString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="monthsInYear">
<db:title>int QCalendar::monthsInYear(int <db:emphasis>year</db:emphasis>) const</db:title>
<db:para>Returns the number of months in the given <db:code role="parameter">year</db:code>.</db:para>
<db:para>If <db:code role="parameter">year</db:code> is Unspecified, returns the maximum number of months in a year.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#maximumMonthsInYear">maximumMonthsInYear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QCalendar::name() const</db:title>
<db:para>The primary name of this calendar.</db:para>
<db:para>The calendar may also be known by some aliases. A calendar instantiated by name may use such an alias, in which case its name() need not match the alias by which it was instantiated.</db:para>
</db:section>
<db:section xml:id="partsFromDate">
<db:title>QCalendar::YearMonthDay QCalendar::partsFromDate(QDate <db:emphasis>date</db:emphasis>) const</db:title>
<db:para>Converts a <db:link xlink:href="qdate.xml">QDate</db:link> to a year, month, and day of the month.</db:para>
<db:para>The returned structure's <db:link xlink:href="qcalendar.xml#isValid">isValid</db:link>() shall be false if the calendar is unable to represent the given <db:code role="parameter">date</db:code>. Otherwise its year, month, and day members record the so-named parts of its representation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#dateFromParts">dateFromParts</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#isProleptic">isProleptic</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#hasYearZero">hasYearZero</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="standaloneMonthName">
<db:title>QString QCalendar::standaloneMonthName(const QLocale &amp;<db:emphasis>locale</db:emphasis>, int <db:emphasis>month</db:emphasis>, int <db:emphasis>year</db:emphasis> = Unspecified, QLocale::FormatType <db:emphasis>format</db:emphasis> = QLocale::LongFormat) const</db:title>
<db:para>Returns a suitably localised standalone name for a month.</db:para>
<db:para>The month is indicated by a number, with <db:code role="parameter">month</db:code> = 1 meaning the first month of the year and subsequent months numbered accordingly. Returns an empty string if the <db:code role="parameter">month</db:code> number is unrecognized.</db:para>
<db:para>The <db:code role="parameter">year</db:code> may be Unspecified, in which case the mapping from numbers to names for a typical year's months should be used. Some calendars have leap months that aren't always at the end of the year; their mapping of month numbers to names may then depend on the placement of a leap month. Thus the year should normally be specified, if known.</db:para>
<db:para>The name is returned in the form that would be used in isolation in the specified <db:code role="parameter">locale</db:code>; the <db:code role="parameter">format</db:code> determines how fully it shall be expressed (i.e. to what extent it is abbreviated).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#monthName">monthName</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#maximumMonthsInYear">maximumMonthsInYear</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#dateTimeToString">dateTimeToString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="standaloneWeekDayName">
<db:title>QString QCalendar::standaloneWeekDayName(const QLocale &amp;<db:emphasis>locale</db:emphasis>, int <db:emphasis>day</db:emphasis>, QLocale::FormatType <db:emphasis>format</db:emphasis> = QLocale::LongFormat) const</db:title>
<db:para>Returns a suitably localised standalone name for a day of the week.</db:para>
<db:para>The days of the week are numbered from 1 for Monday through 7 for Sunday. Some calendars may support higher numbers for other days (e.g. intercallary days, that are not part of any week). Returns an empty string if the <db:code role="parameter">day</db:code> number is unrecognized.</db:para>
<db:para>The name is returned in the form that would be used in isolation (for example as a column heading in a calendar's tabular display of a month with successive weeks as rows) in the specified <db:code role="parameter">locale</db:code>; the <db:code role="parameter">format</db:code> determines how fully it shall be expressed (i.e. to what extent it is abbreviated).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#weekDayName">weekDayName</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#dayOfWeek">dayOfWeek</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="weekDayName">
<db:title>QString QCalendar::weekDayName(const QLocale &amp;<db:emphasis>locale</db:emphasis>, int <db:emphasis>day</db:emphasis>, QLocale::FormatType <db:emphasis>format</db:emphasis> = QLocale::LongFormat) const</db:title>
<db:para>Returns a suitably localised name for a day of the week.</db:para>
<db:para>The days of the week are numbered from 1 for Monday through 7 for Sunday. Some calendars may support higher numbers for other days (e.g. intercallary days, that are not part of any week). Returns an empty string if the <db:code role="parameter">day</db:code> number is unrecognized.</db:para>
<db:para>The name is returned in the form that would normally be used in a full date, in the specified <db:code role="parameter">locale</db:code>; the <db:code role="parameter">format</db:code> determines how fully it shall be expressed (i.e. to what extent it is abbreviated).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcalendar.xml#standaloneWeekDayName">standaloneWeekDayName</db:link>()</db:member>
<db:member><db:link xlink:href="qcalendar.xml#dayOfWeek">dayOfWeek</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
