<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Qt Test Overview</db:title>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Overview of the Qt unit testing framework.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Test is a framework for unit testing Qt based applications and libraries. Qt Test provides all the functionality commonly found in unit testing frameworks as well as extensions for testing graphical user interfaces.</db:para>
<db:para>Qt Test is designed to ease the writing of unit tests for Qt based applications and libraries:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Feature</db:para>
</db:th>
<db:th>
<db:para>Details</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Lightweight</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Qt Test consists of about 6000 lines of code and 60 exported symbols.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Self-contained</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Qt Test requires only a few symbols from the Qt Core module for non-gui testing.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Rapid testing</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Qt Test needs no special test-runners; no special registration for tests.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Data-driven testing</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>A test can be executed multiple times with different test data.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Basic GUI testing</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Qt Test offers functionality for mouse and keyboard simulation.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Benchmarking</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Qt Test supports benchmarking and provides several measurement back-ends.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">IDE friendly</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Qt Test outputs messages that can be interpreted by Visual Studio and KDevelop.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Thread-safety</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>The error reporting is thread safe and atomic.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Type-safety</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Extensive use of templates prevent errors introduced by implicit type casting.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Easily extendable</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>Custom types can easily be added to the test data and test output.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="creating-a-test">
<db:title>Creating a Test</db:title>
<db:para>To create a test, subclass <db:link xlink:href="qobject.xml">QObject</db:link> and add one or more private slots to it. Each private slot is a test function in your test. <db:link xlink:href="qtest.xml#qExec">QTest::qExec</db:link>() can be used to execute all test functions in the test object.</db:para>
<db:para>In addition, there are four private slots that are <db:emphasis>not</db:emphasis> treated as test functions. They will be executed by the testing framework and can be used to initialize and clean up either the entire test or the current test function.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>initTestCase()</db:code> will be called before the first test function is executed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>cleanupTestCase()</db:code> will be called after the last test function was executed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>init()</db:code> will be called before each test function is executed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>cleanup()</db:code> will be called after every test function.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If <db:code>initTestCase()</db:code> fails, no test function will be executed. If <db:code>init()</db:code> fails, the following test function will not be executed, the test will proceed to the next test function.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">class MyFirstTest: public QObject
{
    Q_OBJECT
private slots:
    void initTestCase()
    { qDebug(&quot;called before everything else&quot;); }
    void myFirstTest()
    { QVERIFY(1 == 1); }
    void mySecondTest()
    { QVERIFY(1 != 2); }
    void cleanupTestCase()
    { qDebug(&quot;called after myFirstTest and mySecondTest&quot;); }
};
</db:programlisting>
<db:para>For more examples, refer to the <db:link xlink:href="qtest-tutorial.xml">Qt Test Tutorial</db:link>.</db:para>
</db:section>
<db:section xml:id="building-a-test">
<db:title>Building a Test</db:title>
<db:para>If you are using <db:code>qmake</db:code> as your build tool, just add the following to your project file:</db:para>
<db:programlisting language="cpp">QT += testlib
</db:programlisting>
<db:para>If you would like to run the test via <db:code>make check</db:code>, add the additional line:</db:para>
<db:programlisting language="cpp">CONFIG += testcase
</db:programlisting>
<db:para>See the <db:link xlink:href="">qmake manual</db:link> for more information about <db:code>make check</db:code>.</db:para>
<db:para>If you are using other build tools, make sure that you add the location of the Qt Test header files to your include path (usually <db:code>include/QtTest</db:code> under your Qt installation directory). If you are using a release build of Qt, link your test to the <db:code>QtTest</db:code> library. For debug builds, use <db:code>QtTest_debug</db:code>.</db:para>
<db:para>See <db:link xlink:href="qttestlib-tutorial1-example.xml">Writing a Unit Test</db:link> for a step by step explanation.</db:para>
</db:section>
<db:section xml:id="qt-test-command-line-arguments">
<db:title>Qt Test Command Line Arguments</db:title>
<db:section xml:id="syntax">
<db:title>Syntax</db:title>
<db:para>The syntax to execute an autotest takes the following simple form:</db:para>
<db:programlisting language="cpp">testname [options] [testfunctions[:testdata]]...
</db:programlisting>
<db:para>Substitute <db:code>testname</db:code> with the name of your executable. <db:code>testfunctions</db:code> can contain names of test functions to be executed. If no <db:code>testfunctions</db:code> are passed, all tests are run. If you append the name of an entry in <db:code>testdata</db:code>, the test function will be run only with that test data.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">/myTestDirectory$ testQString toUpper
</db:programlisting>
<db:para>Runs the test function called <db:code>toUpper</db:code> with all available test data.</db:para>
<db:programlisting language="cpp">/myTestDirectory$ testQString toUpper toInt:zero
</db:programlisting>
<db:para>Runs the <db:code>toUpper</db:code> test function with all available test data, and the <db:code>toInt</db:code> test function with the test data called <db:code>zero</db:code> (if the specified test data doesn't exist, the associated test will fail).</db:para>
<db:programlisting language="cpp">/myTestDirectory$ testMyWidget -vs -eventdelay 500
</db:programlisting>
<db:para>Runs the <db:code>testMyWidget</db:code> function test, outputs every signal emission and waits 500 milliseconds after each simulated mouse/keyboard event.</db:para>
</db:section>
<db:section xml:id="options">
<db:title>Options</db:title>
<db:section xml:id="logging-options">
<db:title>Logging Options</db:title>
<db:para>The following command line options determine how test results are reported:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-o</db:code> <db:emphasis>filename,format</db:emphasis>  Writes output to the specified file, in the specified format (one of <db:code>txt</db:code>, <db:code>xml</db:code>, <db:code>lightxml</db:code> or <db:code>xunitxml</db:code>). The special filename <db:code>-</db:code> may be used to log to standard output.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-o</db:code> <db:emphasis>filename</db:emphasis>  Writes output to the specified file.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-txt</db:code>  Outputs results in plain text.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-xml</db:code>  Outputs results as an XML document.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-lightxml</db:code>  Outputs results as a stream of XML tags.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-xunitxml</db:code>  Outputs results as an Xunit XML document.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-csv</db:code>  Outputs results as comma-separated values (CSV). This mode is only suitable for benchmarks, since it suppresses normal pass/fail messages.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The first version of the <db:code>-o</db:code> option may be repeated in order to log test results in multiple formats, but no more than one instance of this option can log test results to standard output.</db:para>
<db:para>If the first version of the <db:code>-o</db:code> option is used, neither the second version of the <db:code>-o</db:code> option nor the <db:code>-txt</db:code>, <db:code>-xml</db:code>, <db:code>-lightxml</db:code> or <db:code>-xunitxml</db:code> options should be used.</db:para>
<db:para>If neither version of the <db:code>-o</db:code> option is used, test results will be logged to standard output. If no format option is used, test results will be logged in plain text.</db:para>
</db:section>
<db:section xml:id="test-log-detail-options">
<db:title>Test Log Detail Options</db:title>
<db:para>The following command line options control how much detail is reported in test logs:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-silent</db:code>  Silent output; only shows fatal errors, test failures and minimal status messages.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-v1</db:code>  Verbose output; shows when each test function is entered. (This option only affects plain text output.)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-v2</db:code>  Extended verbose output; shows each <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>() and <db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>(). (This option affects all output formats and implies <db:code>-v1</db:code> for plain text output.)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-vs</db:code>  Shows all signals that get emitted and the slot invocations resulting from those signals. (This option affects all output formats.)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="testing-options">
<db:title>Testing Options</db:title>
<db:para>The following command-line options influence how tests are run:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-functions</db:code>  Outputs all test functions available in the test, then quits.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-datatags</db:code>  Outputs all data tags available in the test. A global data tag is preceded by ' __global__ '.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-eventdelay</db:code> <db:emphasis>ms</db:emphasis>  If no delay is specified for keyboard or mouse simulation (<db:link xlink:href="qtest.xml#keyClick">QTest::keyClick</db:link>(), <db:link xlink:href="qtest.xml#mouseClick">QTest::mouseClick</db:link>() etc.), the value from this parameter (in milliseconds) is substituted.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-keydelay</db:code> <db:emphasis>ms</db:emphasis>  Like -eventdelay, but only influences keyboard simulation and not mouse simulation.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-mousedelay</db:code> <db:emphasis>ms</db:emphasis>  Like -eventdelay, but only influences mouse simulation and not keyboard simulation.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-maxwarnings</db:code> <db:emphasis>number</db:emphasis>  Sets the maximum number of warnings to output. 0 for unlimited, defaults to 2000.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-nocrashhandler</db:code>  Disables the crash handler on Unix platforms. On Windows, it re-enables the Windows Error Reporting dialog, which is turned off by default.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-platform</db:code> <db:emphasis>name</db:emphasis>  This command line argument applies to all Qt applications, but might be especially useful in the context of auto-testing. By using the &quot;offscreen&quot; platform plugin (-platform offscreen) it's possible to have tests that use QWidget or <db:link xlink:href="qwindow.xml">QWindow</db:link> run without showing anything on the screen. Currently the offscreen platform plugin is only fully supported on X11.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="benchmarking-options">
<db:title>Benchmarking Options</db:title>
<db:para>The following command line options control benchmark testing:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-callgrind</db:code>  Uses Callgrind to time benchmarks (Linux only).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-tickcounter</db:code>  Uses CPU tick counters to time benchmarks.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-eventcounter</db:code>  Counts events received during benchmarks.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-minimumvalue</db:code> <db:emphasis>n</db:emphasis>  Sets the minimum acceptable measurement value.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-minimumtotal</db:code> <db:emphasis>n</db:emphasis>  Sets the minimum acceptable total for repeated executions of a test function.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-iterations</db:code> <db:emphasis>n</db:emphasis>  Sets the number of accumulation iterations.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-median</db:code> <db:emphasis>n</db:emphasis>  Sets the number of median iterations.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-vb</db:code>  Outputs verbose benchmarking information.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="miscellaneous-options">
<db:title>Miscellaneous Options</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-help</db:code>  Outputs the possible command line arguments and gives some useful help.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:section>
<db:section xml:id="creating-a-benchmark">
<db:title>Creating a Benchmark</db:title>
<db:para>To create a benchmark, follow the instructions for creating a test and then add a QBENCHMARK macro to the test function that you want to benchmark.</db:para>
<db:programlisting language="cpp">class MyFirstBenchmark: public QObject
{
    Q_OBJECT
private slots:
    void myFirstBenchmark()
    {
        QString string1;
        QString string2;
        QBENCHMARK {
            string1.localeAwareCompare(string2);
        }
    }
};
</db:programlisting>
<db:para>The code inside the QBENCHMARK macro will be measured, and possibly also repeated several times in order to get an accurate measurement. This depends on the selected measurement back-end. Several back-ends are available. They can be selected on the command line:</db:para>
<db:anchor xml:id="testlib-benchmarking-measurement"/>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Name</db:para>
</db:th>
<db:th>
<db:para>Command-line Argument</db:para>
</db:th>
<db:th>
<db:para>Availability</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Walltime</db:para>
</db:td>
<db:td>
<db:para>(default)</db:para>
</db:td>
<db:td>
<db:para>All platforms</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CPU tick counter</db:para>
</db:td>
<db:td>
<db:para>-tickcounter</db:para>
</db:td>
<db:td>
<db:para>Windows, Mac OS X, Linux, many UNIX-like systems.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Event Counter</db:para>
</db:td>
<db:td>
<db:para>-eventcounter</db:para>
</db:td>
<db:td>
<db:para>All platforms</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Valgrind Callgrind</db:para>
</db:td>
<db:td>
<db:para>-callgrind</db:para>
</db:td>
<db:td>
<db:para>Linux (if installed)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Linux Perf</db:para>
</db:td>
<db:td>
<db:para>-perf</db:para>
</db:td>
<db:td>
<db:para>Linux</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In short, walltime is always available but requires many repetitions to get a useful result. Tick counters are usually available and can provide results with fewer repetitions, but can be susceptible to CPU frequency scaling issues. Valgrind provides exact results, but does not take I/O waits into account, and is only available on a limited number of platforms. Event counting is available on all platforms and it provides the number of events that were received by the event loop before they are sent to their corresponding targets (this might include non-Qt events).</db:para>
<db:para>The Linux Performance Monitoring solution is available only on Linux and provides many different counters, which can be selected by passing an additional option <db:code>-perfcounter countername</db:code>, such as <db:code>-perfcounter cache-misses</db:code>, <db:code>-perfcounter branch-misses</db:code>, or <db:code>-perfcounter l1d-load-misses</db:code>. The default counter is <db:code>cpu-cycles</db:code>. The full list of counters can be obtained by running any benchmark executable with the option <db:code>-perfcounterlist</db:code>.</db:para>
<db:para>Note that using the performance counter may require enabling access to non-privileged applications.</db:para>
<db:note>
<db:para>Depending on the device configuration, tick counters on the Windows CE platform may not be as fine-grained, compared to other platforms. Devices that do not support high-resolution timers default to one-millisecond granularity.</db:para>
</db:note>
<db:para>See <db:link xlink:href="qttestlib-tutorial5-example.xml">Writing a Benchmark</db:link> in the Qt Test Tutorial for more benchmarking examples.</db:para>
</db:section>
<db:section xml:id="using-qt-test-remotely-on-windows-ce">
<db:title>Using Qt Test Remotely on Windows CE</db:title>
<db:para>The <db:code>cetest</db:code> convenience application enables you to launch an application remotely on a Windows CE device or emulator.</db:para>
<db:para>It needs to be executed after the unit test has been successfully compiled.</db:para>
<db:para>Prior to launching, the following files are copied to the device:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>all Qt libraries the project links to</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtest-overview.xml#qtremote">QtRemote.dll</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>the c runtime library specified during installation</db:para>
</db:listitem>
<db:listitem>
<db:para>all files specified in the <db:code>.pro</db:code> file following the DEPLOYMENT rules.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="using-qt-test-remotely-on-windows-ce-syntax-12">
<db:title>Syntax</db:title>
<db:para>The syntax to execute an autotest takes the following simple form:</db:para>
<db:programlisting language="cpp">cetest [options] ...
</db:programlisting>
</db:section>
<db:section xml:id="using-qt-test-remotely-on-windows-ce-options-13">
<db:title>Options</db:title>
<db:para><db:code>cetest</db:code> provides the same options as those for unit-testing on non cross-compiled platforms. See <db:link xlink:href="qtest-overview.xml#qt-test-command-line-arguments">Command Line Arguments</db:link> for more information.</db:para>
<db:para>The following commands are also included:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-debug</db:code>  Compiles the test version in debug mode.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-release</db:code>  Compiles the test version in release mode.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-libpath</db:code> <db:emphasis>path</db:emphasis>  Copies Qt libraries to the specified path.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-qt-delete</db:code>  Deletes Qt libraries after execution.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-project-delete</db:code>  Deletes project files after execution.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-delete</db:code>  Deletes project and Qt libraries after execution.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-conf</db:code>  Specifies a qt.conf file to be deployed to remote directory.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para><db:code>debug</db:code> is the default build option.</db:para>
</db:note>
</db:section>
<db:section xml:id="qtremote">
<db:title>QtRemote</db:title>
<db:para><db:code>QtRemote</db:code> is a small library which is built after Qt Test. It allows the host system to create a process on a remote device and waits until its execution has been finished.</db:para>
</db:section>
<db:section xml:id="requirements">
<db:title>Requirements</db:title>
<db:para><db:code>cetest</db:code> uses Microsoft ActiveSync to establish a remote connection between the host computer and the device. Thus header files and libraries are needed to compile cetest and QtRemote successfully.</db:para>
<db:para>Prior to installation of Qt, you need to set your <db:code>INCLUDE</db:code> and <db:code>LIB</db:code> environment variables properly.</db:para>
<db:para>A default installation of Windows Mobile 5 for Pocket PC can be obtained by:</db:para>
<db:programlisting language="cpp">set INCLUDE=C:\Program Files\Windows CE Tools\wce500\Windows Mobile 5.0 Pocket PC SDK\Activesync\Inc;%INCLUDE%
set LIB=C:\Program Files\Windows CE Tools\wce500\Windows Mobile 5.0 Pocket PC SDK\Activesync\Lib;%LIB%
</db:programlisting>
<db:para>Note that Qt will remember the path, so you do not need to set it again after switching the environments for cross-compilation.</db:para>
</db:section>
</db:section>
<db:section xml:id="A3rd-party-code">
<db:title>3rd Party Code</db:title>
<db:para>The CPU tick counters used for benchmarking are licensed under the following license: (from src/testlib/3rdparty/cycle.h)</db:para>
<db:para>Copyright (c) 2003, 2006 Matteo Frigo Copyright (c) 2003, 2006 Massachusetts Institute of Technology</db:para>
<db:para>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</db:para>
<db:para>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</db:para>
<db:para>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</db:para>
</db:section>
</db:article>
