<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Gestures in Widgets and Graphics View</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="index.xml" xlink:type="arc" xlink:arcrole="start" xlink:title="Qt Reference Documentation"/></db:extendedlink>
<db:abstract>
<db:para>An overview of Qt support for Gesture programming.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt includes a framework for gesture programming that has the ability to form gestures from a series of events, independently of the input methods used. A gesture could be a particular movement of a mouse, a touch screen action, or a series of events from some other source. The nature of the input, the interpretation of the gesture and the action taken are the choice of the developer.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para><db:link xlink:href="qgesture.xml">QGesture</db:link> is the central class in Qt's gesture framework, providing a container for information about gestures performed by the user. <db:link xlink:href="qgesture.xml">QGesture</db:link> exposes properties that give general information that is common to all gestures, and these can be extended to provide additional gesture-specific information. Common panning, pinching and swiping gestures are represented by specialized classes: <db:link xlink:href="qpangesture.xml">QPanGesture</db:link>, <db:link xlink:href="qpinchgesture.xml">QPinchGesture</db:link> and <db:link xlink:href="qswipegesture.xml">QSwipeGesture</db:link>.</db:para>
<db:para>Developers can also implement new gestures by subclassing and extending the <db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link> class. Adding support for a new gesture involves implementing code to recognize the gesture from input events. This is described in the <db:link xlink:href="gestures-overview.xml#creating-your-own-gesture-recognizer">Creating Your Own Gesture Recognizer</db:link> section.</db:para>
</db:section>
<db:section xml:id="using-standard-gestures-with-widgets">
<db:title>Using Standard Gestures with Widgets</db:title>
<db:para>Gestures can be enabled for instances of <db:link xlink:href="qwidget.xml">QWidget</db:link> and <db:link xlink:href="qgraphicsobject.xml">QGraphicsObject</db:link> subclasses. An object that accepts gesture input is referred to throughout the documentation as a <db:emphasis>target object</db:emphasis>.</db:para>
<db:para>To enable a gesture for a target object, call its <db:link xlink:href="qwidget.xml#grabGesture">QWidget::grabGesture</db:link>() or <db:link xlink:href="qgraphicsobject.xml#grabGesture">QGraphicsObject::grabGesture</db:link>() function with an argument describing the required gesture type. The standard types are defined by the <db:link xlink:href="qt.xml#GestureType-enum">Qt::GestureType</db:link> enum and include many commonly used gestures.</db:para>
<db:programlisting language="cpp">foreach (Qt::GestureType gesture, gestures)
    grabGesture(gesture);
</db:programlisting>
<db:para>In the above code, the gestures are set up in the constructor of the target object itself.</db:para>
</db:section>
<db:section xml:id="handling-events">
<db:title>Handling Events</db:title>
<db:para>When the user performs a gesture, <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link> events will be delivered to the target object, and these can be handled by reimplementing the <db:link xlink:href="qwidget.xml#event">QWidget::event</db:link>() handler function for widgets or <db:link xlink:href="qgraphicsitem.xml#sceneEvent">QGraphicsItem::sceneEvent</db:link>() for graphics objects.</db:para>
<db:para>As one target object can subscribe to more than one gesture type, the <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link> can contain more than one <db:link xlink:href="qgesture.xml">QGesture</db:link>, indicating several possible gestures are active at the same time. It is then up to the widget to determine how to handle those multiple gestures and choose if some should be canceled in favor of others.</db:para>
<db:para>Each <db:link xlink:href="qgesture.xml">QGesture</db:link> contained within a <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link> object can be accepted() or ignored() individually, or all together. Additionally, you can query the individual <db:link xlink:href="qgesture.xml">QGesture</db:link> data objects (the state) using several getters.</db:para>
<db:section xml:id="standard-procedure-for-event-handling">
<db:title>Standard Procedure for Event Handling</db:title>
<db:para>A <db:link xlink:href="qgesture.xml">QGesture</db:link> is by default accepted when it arrives at your widget. However, it is good practice to always explicitly accept or reject a gesture. The general rule is that, if you accept a gesture, you are using it. If you are ignoring it you are not interested in it. Ignoring a gesture may mean it gets offered to another target object, or it will get canceled.</db:para>
<db:para>Each <db:link xlink:href="qgesture.xml">QGesture</db:link> has several states it goes through; there is a well defined way to change the state, typically the user input is the cause of state changes (by starting and stopping interaction, for instance) but the widget can also cause state changes.</db:para>
<db:para>The first time a particular <db:link xlink:href="qgesture.xml">QGesture</db:link> is delivered to a widget or graphics item, it will be in the <db:link xlink:href="qt.xml#GestureState-enum">Qt::GestureStarted</db:link> state. The way you handle the gesture at this point influences whether you can interact with it later.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Accepting the gesture means the widget acts on the gesture and there will follow gestures with the Qt::GestureUpdatedstate.</db:para>
</db:listitem>
<db:listitem>
<db:para>Ignoring the gesture will mean the gesture will never be offered to you again. It will be offered to a parent widget or item as well.</db:para>
</db:listitem>
<db:listitem>
<db:para>Calling setGestureCancelPolicy() on the gesture when it is in its starting state, and is also accepted can cause other gestures to be canceled.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Using <db:link xlink:href="qgesture.xml#GestureCancelPolicy-enum">QGesture::CancelAllInContext</db:link> to cancel a gesture will cause all gestures, in any state, to be canceled unless they are explicitly accepted. This means that active gestures on children will get canceled. It also means that gestures delivered in the same <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link> will get canceled if the widget ignores them. This can be a useful way to filter out all gestures except the one you are interested in.</db:para>
</db:section>
<db:section xml:id="example-event-handling">
<db:title>Example Event Handling</db:title>
<db:para>For convenience, the <db:link xlink:href="qtwidgets-gestures-imagegestures-example.xml">Image Gestures Example</db:link> reimplements the general <db:link xlink:href="qwidget.xml#event">event</db:link>() handler function and delegates gesture events to a specialized gestureEvent() function:</db:para>
<db:programlisting language="cpp">bool ImageWidget::event(QEvent *event)
{
    if (event-&amp;gt;type() == QEvent::Gesture)
        return gestureEvent(static_cast&amp;lt;QGestureEvent*&amp;gt;(event));
    return QWidget::event(event);
}
</db:programlisting>
<db:para>The gesture events delivered to the target object can be examined individually and dealt with appropriately:</db:para>
<db:programlisting language="cpp">bool ImageWidget::gestureEvent(QGestureEvent *event)
{
    qCDebug(lcExample) &amp;lt;&amp;lt; &quot;gestureEvent():&quot; &amp;lt;&amp;lt; event;
    if (QGesture *swipe = event-&amp;gt;gesture(Qt::SwipeGesture))
        swipeTriggered(static_cast&amp;lt;QSwipeGesture *&amp;gt;(swipe));
    else if (QGesture *pan = event-&amp;gt;gesture(Qt::PanGesture))
        panTriggered(static_cast&amp;lt;QPanGesture *&amp;gt;(pan));
    if (QGesture *pinch = event-&amp;gt;gesture(Qt::PinchGesture))
        pinchTriggered(static_cast&amp;lt;QPinchGesture *&amp;gt;(pinch));
    return true;
}
</db:programlisting>
<db:para>Responding to a gesture is simply a matter of obtaining the <db:link xlink:href="qgesture.xml">QGesture</db:link> object delivered in the <db:link xlink:href="qgestureevent.xml">QGestureEvent</db:link> sent to the target object and examining the information it contains.</db:para>
<db:programlisting language="cpp">void ImageWidget::swipeTriggered(QSwipeGesture *gesture)
{
    if (gesture-&amp;gt;state() == Qt::GestureFinished) {
        if (gesture-&amp;gt;horizontalDirection() == QSwipeGesture::Left
            || gesture-&amp;gt;verticalDirection() == QSwipeGesture::Up) {
            qCDebug(lcExample) &amp;lt;&amp;lt; &quot;swipeTriggered(): swipe to previous&quot;;
            goPrevImage();
        } else {
            qCDebug(lcExample) &amp;lt;&amp;lt; &quot;swipeTriggered(): swipe to next&quot;;
            goNextImage();
        }
        update();
    }
}
</db:programlisting>
<db:para>Here, we examine the direction in which the user swiped the widget and modify its contents accordingly.</db:para>
</db:section>
</db:section>
<db:section xml:id="creating-your-own-gesture-recognizer">
<db:title>Creating Your Own Gesture Recognizer</db:title>
<db:para>Adding support for a new gesture involves creating and registering a new gesture recognizer. Depending on the recognition process for the gesture, it may also involve creating a new gesture object.</db:para>
<db:para>To create a new recognizer, you need to subclass <db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link> to create a custom recognizer class. There is one virtual function that you must reimplement and two others that can be reimplemented as required.</db:para>
<db:section xml:id="filtering-input-events">
<db:title>Filtering Input Events</db:title>
<db:para>The <db:link xlink:href="qgesturerecognizer.xml#recognize">recognize</db:link>() function must be reimplemented. This function handles and filters the incoming input events for the target objects and determines whether or not they correspond to the gesture the recognizer is looking for.</db:para>
<db:para>Although the logic for gesture recognition is implemented in this function, possibly using a state machine based on the <db:link xlink:href="qt.xml#GestureState-enum">Qt::GestureState</db:link> enums, you can store persistent information about the state of the recognition process in the <db:link xlink:href="qgesture.xml">QGesture</db:link> object supplied.</db:para>
<db:para>Your <db:link xlink:href="qgesturerecognizer.xml#recognize">recognize</db:link>() function must return a value of <db:link xlink:href="qgesturerecognizer.xml#ResultFlag-enum">QGestureRecognizer::Result</db:link> that indicates the state of recognition for a given gesture and target object. This determines whether or not a gesture event will be delivered to a target object.</db:para>
</db:section>
<db:section xml:id="custom-gestures">
<db:title>Custom Gestures</db:title>
<db:para>If you choose to represent a gesture by a custom <db:link xlink:href="qgesture.xml">QGesture</db:link> subclass, you will need to reimplement the <db:link xlink:href="qgesturerecognizer.xml#create">create</db:link>() function to construct instances of your gesture class instead of standard <db:link xlink:href="qgesture.xml">QGesture</db:link> instances. Alternatively, you may want to use standard <db:link xlink:href="qgesture.xml">QGesture</db:link> instances, but add additional dynamic properties to them to express specific details of the gesture you want to handle.</db:para>
</db:section>
<db:section xml:id="resetting-gestures">
<db:title>Resetting Gestures</db:title>
<db:para>If you use custom gesture objects that need to be reset or otherwise specially handled when a gesture is canceled, you need to reimplement the <db:link xlink:href="qgesturerecognizer.xml#reset">reset</db:link>() function to perform these special tasks.</db:para>
<db:para>Note that <db:link xlink:href="qgesture.xml">QGesture</db:link> objects are only created once for each combination of target object and gesture type, and they might be reused every time the user attempts to perform the same gesture type on the target object. As a result, it can be useful to reimplement the <db:link xlink:href="qgesturerecognizer.xml#reset">reset</db:link>() function to clean up after each previous attempt at recognizing a gesture.</db:para>
</db:section>
</db:section>
<db:section xml:id="using-a-new-gesture-recognizer">
<db:title>Using a New Gesture Recognizer</db:title>
<db:para>To use a gesture recognizer, construct an instance of your <db:link xlink:href="qgesturerecognizer.xml">QGestureRecognizer</db:link> subclass, and register it with the application with <db:link xlink:href="qgesturerecognizer.xml#registerRecognizer">QGestureRecognizer::registerRecognizer</db:link>(). A recognizer for a given type of gesture can be removed with <db:link xlink:href="qgesturerecognizer.xml#unregisterRecognizer">QGestureRecognizer::unregisterRecognizer</db:link>().</db:para>
</db:section>
<db:section xml:id="further-reading">
<db:title>Further Reading</db:title>
<db:para>The <db:link xlink:href="qtwidgets-gestures-imagegestures-example.xml">Image Gestures Example</db:link> shows how to enable gestures for a widget in a simple image viewer application.</db:para>
<db:section xml:id="gestures-in-qt-quick">
<db:title>Gestures in Qt Quick</db:title>
<db:para>Qt Quick does not have a generic global gesture recognizer; rather, individual components can respond to touch events in their own ways. For example the <db:link xlink:href="qml-qtquick-pincharea.xml">PinchArea</db:link> handles two-finger gestures, <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link> is for flicking content with a single finger, and <db:link xlink:href="qml-qtquick-multipointtoucharea.xml">MultiPointTouchArea</db:link> can handle an arbitrary number of touch points and allow the application developer to write custom gesture recognition code.</db:para>
</db:section>
</db:section>
</db:article>
