<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Calculator Builder Example</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>Creating a user interface from a <db:emphasis>Qt Designer</db:emphasis> form at run-time.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/calculatorbuilder-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We use the form created in the <db:link xlink:href="qtdesigner-calculatorform-example.xml">Calculator Form</db:link> example to show that the same user interface can be generated when the application is executed or defined when the application is built.</db:para>
<db:section xml:id="preparation">
<db:title>Preparation</db:title>
<db:para>The <db:link xlink:href="qtdesigner-calculatorform-example.xml">Calculator Form</db:link> example defines a user interface that we can use without modification. In this example, we use a <db:link xlink:href="resources.xml">resource file</db:link> to contain the <db:code>calculatorform.ui</db:code> file created in the previous example, but it could be stored on disk instead.</db:para>
<db:para>To generate a form at run time, we need to link the example against the <db:code>QtUiTools</db:code> module library. The project file we use contains all the necessary information to do this:</db:para>
<db:programlisting language="cpp">target_link_libraries(calculatorbuilder PUBLIC
    Qt::Core
    Qt::Gui
    Qt::UiTools
    Qt::Widgets
)
</db:programlisting>
<db:para>The UI file is loaded from a resource:</db:para>
<db:programlisting language="cpp">set(calculatorbuilder_resource_files
    &quot;calculatorform.ui&quot;
)
</db:programlisting>
<db:para>For <db:code>qmake</db:code>:</db:para>
<db:programlisting language="cpp">RESOURCES   = calculatorbuilder.qrc
SOURCES     = main.cpp
QT += widgets uitools
</db:programlisting>
<db:para>All the other necessary files are declared as usual.</db:para>
</db:section>
<db:section xml:id="loading-the-calculator-form">
<db:title>Loading the Calculator Form</db:title>
<db:para>We will need to use the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class that is provided by the <db:code>libQtUiTools</db:code> library, so we first ensure that we include the header file for the module:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtUiTools&amp;gt;
</db:programlisting>
<db:para>We create a static helper function that creates a top level widget and loads the user interface that we retrieve, via a <db:link xlink:href="qfile.xml">QFile</db:link> object, from the example's resources:</db:para>
<db:programlisting language="cpp">static QWidget *loadCalculatorForm(QWidget *parent = nullptr)
{
    QUiLoader loader;

    QFile file(u&quot;:/forms/calculatorform.ui&quot;_s);
    if (!file.open(QFile::ReadOnly))
        return nullptr;
    QWidget *formWidget = loader.load(&amp;amp;file, parent);
    file.close();
    if (formWidget == nullptr)
        return nullptr;
</db:programlisting>
<db:para>By including the user interface in the example's resources, we ensure that it will be present when the example is run. The <db:code>loader.load()</db:code> function takes the user interface description contained in the file and constructs the form widget as a child widget of the <db:code>CalculatorForm</db:code>.</db:para>
<db:para>We are interested in three widgets in the generated user interface: two spin boxes and a label. For convenience, we retrieve pointers to these widgets from the widget that was constructed by the <db:code>FormBuilder</db:code>, and we record them for later use. The <db:code>findChild()</db:code> template function allows us to query widgets in order to find named child widgets.</db:para>
<db:programlisting language="cpp">    auto *inputSpinBox1 = formWidget-&amp;gt;findChild&amp;lt;QSpinBox*&amp;gt;(u&quot;inputSpinBox1&quot;_s);
    auto *inputSpinBox2 = formWidget-&amp;gt;findChild&amp;lt;QSpinBox*&amp;gt;(u&quot;inputSpinBox2&quot;_s);
    auto *outputWidget = formWidget-&amp;gt;findChild&amp;lt;QLabel*&amp;gt;(u&quot;outputWidget&quot;_s);
</db:programlisting>
<db:para>The slot that modifies the output widget provided by the form is defined in a similar way to that in the <db:link xlink:href="qtdesigner-calculatorform-example.xml">Calculator Form</db:link> example, except that we use a lambda, capturing the widgets found:</db:para>
<db:programlisting language="cpp">    auto updateResult = [inputSpinBox1, inputSpinBox2, outputWidget]()
    {
        const int sum = inputSpinBox1-&amp;gt;value() + inputSpinBox2-&amp;gt;value();
        outputWidget-&amp;gt;setText(QString::number(sum));
    };
    QObject::connect(inputSpinBox1, &amp;amp;QSpinBox::valueChanged, formWidget, updateResult);
    QObject::connect(inputSpinBox2, &amp;amp;QSpinBox::valueChanged, formWidget, updateResult);
</db:programlisting>
<db:para>The form widget is added to a layout, and the window title is set:</db:para>
<db:programlisting language="cpp">auto *layout = new QVBoxLayout(&amp;amp;w);
layout-&amp;gt;addWidget(formWidget);
w.setWindowTitle(QCoreApplication::translate(&quot;CalculatorForm&quot;,
                                             &quot;Calculator Builder&quot;));
</db:programlisting>
<db:para>The advantage of this approach is that we can replace the form when the application is run, but we can still manipulate the widgets it contains as long as they are given appropriate names.</db:para>
<db:para>However, loading a form at runtime incurs a runtime cost compared to converting it to C++ code using the <db:link xlink:href="uic.xml">User Interface Compiler (uic)</db:link> tool.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qttools.git/tree/examples/designer/calculatorbuilder?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
