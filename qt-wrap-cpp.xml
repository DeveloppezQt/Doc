<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_wrap_cpp</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Creates .moc files from sources.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Creates .moc files from sources.</db:para>
<db:para>The command is defined in the Core component of the Qt6 package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
</db:programlisting>
<db:para>This command was introduced in Qt 5.0.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_wrap_cpp(&amp;lt;VAR&amp;gt; src_file1 [src_file2 ...]
            [TARGET target]
            [OPTIONS ...]
            [DEPENDS ...])
</db:programlisting>
<db:para>If <db:link xlink:href="cmake-qt5-and-qt6-compatibility.xml#versionless-commands">versionless commands</db:link> are disabled, use qt6_wrap_cpp() instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>Creates rules for calling the <db:link xlink:href="moc.xml">Meta-Object Compiler (moc)</db:link> on the given source files. For each input file, an output file is generated in the build directory. The paths of the generated files are added to &lt;VAR&gt;.</db:para>
<db:note>
<db:para>This is a low-level macro. See the <db:link xlink:href="https://cmake.org/cmake/help/latest/manual/cmake-qt.7.html#automoc">CMake AUTOMOC Documentation</db:link> for a more convenient way to let source files be processed with moc.</db:para>
</db:note>
</db:section>
<db:section xml:id="arguments">
<db:title>Arguments</db:title>
<db:para>You can set an explicit TARGET. This will make sure that the target properties INCLUDE_DIRECTORIES and COMPILE_DEFINITIONS are also used when scanning the source files with moc.</db:para>
<db:para>You can set additional OPTIONS that should be added to the moc calls. You can find possible options in the <db:link xlink:href="moc.xml">moc documentation</db:link>.</db:para>
<db:para>DEPENDS allows you to add additional dependencies for recreation of the generated files. This is useful when the sources have implicit dependencies, like code for a Qt plugin that includes a .json file using the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:programlisting language="cpp">set(SOURCES myapp.cpp main.cpp)
qt_wrap_cpp(SOURCES myapp.h)
qt_add_executable(myapp ${SOURCES})
</db:programlisting>
</db:section>
</db:article>
