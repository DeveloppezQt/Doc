<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_wrap_cpp</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Creates .moc files from sources.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Creates .moc files from sources.</db:para>
<db:para>The command is defined in the Core component of the Qt6 package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
</db:programlisting>
<db:para>This command was introduced in Qt 5.0.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:para>qt_wrap_cpp supports two signatures. The first signature was added in Qt 6.8 and has the following form:</db:para>
<db:programlisting language="cpp" role="bad">qt_wrap_cpp(&lt;TARGET&gt; src_file1 [src_file2 ...]
            [OPTIONS ...]
            [DEPENDS ...])
</db:programlisting>
<db:note>
<db:para>The signature above is recommended over the older signature.</db:para>
</db:note>
<db:programlisting language="cpp" role="bad">qt_wrap_cpp(&lt;VAR&gt; src_file1 [src_file2 ...]
            [TARGET target]
            [OPTIONS ...]
            [DEPENDS ...])
</db:programlisting>
<db:para>If <db:link xlink:href="">versionless commands</db:link> are disabled, use qt6_wrap_cpp() instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>Creates rules for calling the <db:link xlink:href="">Meta-Object Compiler (moc)</db:link> on the given source files. For each input file, an output file is generated in the build directory. The paths of the generated files are added to &lt;VAR&gt;.</db:para>
<db:note>
<db:para>This is a low-level macro. See the <db:link xlink:href="https://cmake.org/cmake/help/latest/manual/cmake-qt.7.html#automoc">CMake AUTOMOC Documentation</db:link> for a more convenient way to let source files be processed with moc.</db:para>
</db:note>
</db:section>
<db:section xml:id="arguments">
<db:title>Arguments</db:title>
<db:para>You can set an explicit TARGET. This will make sure that the target properties INCLUDE_DIRECTORIES and COMPILE_DEFINITIONS are also used when scanning the source files with moc.</db:para>
<db:para>Since Qt 6.8, when a source file is passed to qt_wrap_cpp instead of a header file to generate a .moc file for a target, the TARGET parameter is needed to set the correct include path for the generated .moc file in the source file. As generated .moc files are added to the target's sources by qt_wrap_cpp, they are not added to &lt;VAR&gt;.</db:para>
<db:para>You can set additional OPTIONS that should be added to the moc calls. You can find possible options in the <db:link xlink:href="">moc documentation</db:link>.</db:para>
<db:para>The OPTIONS can evaluate generator expressions when TARGET is set.</db:para>
<db:note>
<db:para>If the OPTIONS include both generator expressions and special characters, use variables to implement them. For example, use $&lt;ANGLE-R&gt;, $&lt;COMMA&gt; and $&lt;SEMICOLON&gt; instead of &gt;, , and :. Otherwise, the generator expression will not be evaluated correctly. OPTIONS are wrapped in generator expressions, so you must escape special characters in them.</db:para>
</db:note>
<db:para>DEPENDS allows you to add additional dependencies for recreation of the generated files. This is useful when the sources have implicit dependencies, like code for a Qt plugin that includes a .json file using the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>Since Qt 6.8:</db:para>
<db:programlisting language="cpp">qt_add_executable(myapp myapp.cpp main.cpp)
qt_wrap_cpp(myapp myapp.cpp)
</db:programlisting>
<db:para/>
<db:programlisting language="cpp">// myapp.cpp
#include &quot;myapp.h&quot;
#include &lt;QObject&gt;

class MyApp : public QObject {
    Q_OBJECT
public:
    MyApp() = default;
};

#include &quot;myapp.moc&quot;
</db:programlisting>
<db:para>In the above file, myapp.moc is included in myapp.cpp. To generate the myapp.moc file, the qt_wrap_cpp macro is used with the TARGET parameter. The .moc file and its path will be added to the target's sources and include directories by the qt_wrap_cpp macro.</db:para>
<db:para>The old version:</db:para>
<db:programlisting language="cpp">set(SOURCES myapp.cpp main.cpp)
qt_wrap_cpp(SOURCES myapp.h)
qt_add_executable(myapp ${SOURCES})
</db:programlisting>
<db:para>In the following example, the generator expressions passed to OPTIONS will be evaluated since TARGET is set. The argument is specified this way to avoid syntax errors in the generator expressions.</db:para>
<db:programlisting language="cpp">set(SOURCES myapp.cpp main.cpp)
qt_wrap_cpp(SOURCES myapp.h
            TARGET myapp
            OPTIONS
            &quot;$&lt;$&lt;CONFIG:Debug&gt;:-DMY_OPTION_FOR_DEBUG&gt;&quot;
            &quot;-DDEFINE_CMDLINE_SIGNAL=void cmdlineSignal(const QMap&lt;int, int&gt; &amp;i)&quot;
            &quot;$&lt;$&lt;CONFIG:Debug&gt;:-DDEFINE_CMDLINE_SIGNAL_IN_GENEX=void cmdlineSignal(const QMap&lt;int$&lt;COMMA&gt; int$&lt;ANGLE-R&gt; &amp;i)&gt;&quot;)
qt_add_executable(myapp ${SOURCES})
</db:programlisting>
<db:para>The following example uses <db:link xlink:href="https://cmake.org/cmake/help/latest/command/target_compile_definitions.html">target_compile_definitions</db:link> to set <db:link xlink:href="https://cmake.org/cmake/help/latest/prop_tgt/COMPILE_DEFINITIONS.html">COMPILE_DEFINITIONS</db:link> which will be added to OPTIONS.</db:para>
<db:programlisting language="cpp">set(SOURCES myapp.cpp main.cpp)
qt_wrap_cpp(SOURCES myapp.h
            TARGET myapp)
qt_add_executable(myapp ${SOURCES})
target_compile_definitions(myapp PRIVATE &quot;$&lt;$&lt;CONFIG:Debug&gt;:MY_OPTION_FOR_DEBUG&gt;&quot;
                                         &quot;DEFINE_CMDLINE_SIGNAL=void cmdlineSignal(const QMap&lt;int, int&gt; &amp;i)&quot;
                                         &quot;$&lt;$&lt;BOOL:TRUE&gt;:DEFINE_CMDLINE_SIGNAL_IN_GENEX=void cmdlineSignal(const QMap&lt;int$&lt;COMMA&gt; int$&lt;ANGLE-R&gt; &amp;i)&gt;&quot;)
</db:programlisting>
</db:section>
</db:article>
