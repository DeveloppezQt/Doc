<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Styling CircularGauge</db:title>
<db:productname>QtQuickControls1</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 1 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Tutorial for styling <db:link xlink:href="qml-qtquick-extras-circulargauge.xml">CircularGauge</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="styling-circulargauge-needle"/>
<db:section xml:id="the-needle-component">
<db:title>The Needle Component</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-controls-styles-circulargaugestyle.xml#needle-prop">needle</db:link> component is rotated around the gauge to represent the current value.</db:para>
<db:para>Starting from the default style, we'll add a very basic white needle:</db:para>
<db:programlisting language="qml">needle: Rectangle {
    y: outerRadius * 0.15
    implicitWidth: outerRadius * 0.03
    implicitHeight: outerRadius * 0.9
    antialiasing: true
    color: &quot;#e5e5e5&quot;
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/styling-circulargauge-needle-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>As mentioned in the documentation for <db:link xlink:href="qml-qtquick-controls-styles-circulargaugestyle.xml">CircularGaugeStyle</db:link>, <db:code>implicitWidth</db:code> and <db:code>implicitHeight</db:code> properties need to be set. This is so that the needle can be positioned properly. We always scale items by the <db:link xlink:href="qml-qtquick-controls-styles-circulargaugestyle.xml#outerRadius-prop">outerRadius</db:link> property of the style, ensuring the control resizes gracefully.</db:para>
<db:para>We offset the needle vertically so that its back sits beyond the knob.</db:para>
<db:anchor xml:id="styling-circulargauge-foreground"/>
</db:section>
<db:section xml:id="the-foreground-component">
<db:title>The Foreground Component</db:title>
<db:para>We've now changed the needle, but the default knob is still there; let's replace it. The <db:link xlink:href="qml-qtquick-controls-styles-circulargaugestyle.xml#foreground-prop">foreground</db:link> component defines the default knob, so we can specify our own by overriding it (note that we could also set it to <db:code>null</db:code> if we didn't want a foreground):</db:para>
<db:programlisting language="qml">foreground: Item {
    Rectangle {
        width: outerRadius * 0.2
        height: width
        radius: width / 2
        color: &quot;#e5e5e5&quot;
        anchors.centerIn: parent
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/styling-circulargauge-knob-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Firstly, we create a circle from the Rectangle item by setting the radius to be half the width (either width or height will work here; they are always equal in this case). We make it a child of the Item, because the foreground fills the gauge. We then center it within the Item.</db:para>
<db:para>We set the color of the knob to the same white that we used before.</db:para>
<db:anchor xml:id="styling-circulargauge-tickmarklabel"/>
</db:section>
<db:section xml:id="the-tickmark-label-component">
<db:title>The Tickmark Label Component</db:title>
<db:para>Suppose we want to caution the user if the value displayed by the gauge goes above or below a certain range. We could present this range to the user in several ways:</db:para>
<db:orderedlist numeration="upperalpha">
<db:listitem>
<db:para>Change the color of the tickmarks depending on <db:code>styleData.value</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para>Add an image to the background</db:para>
</db:listitem>
<db:listitem>
<db:para>Draw it with <db:link xlink:href="qml-qtquick-canvas.xml">Canvas</db:link></db:para>
</db:listitem>
</db:orderedlist>
<db:para>We'll choose options 1 and 3, as they are more flexible than using an image.</db:para>
<db:para>Firstly, let's change the color of the three highest tickmark labels:</db:para>
<db:programlisting language="qml">tickmarkLabel:  Text {
    font.pixelSize: Math.max(6, outerRadius * 0.1)
    text: styleData.value
    color: styleData.value &amp;gt;= 80 ? &quot;#e34c22&quot; : &quot;#e5e5e5&quot;
    antialiasing: true
}
</db:programlisting>
<db:mediaobject>
<db:alt>tickmarkLabel</db:alt>
<db:imageobject>
<db:imagedata fileref="images/styling-circulargauge-tickmarkLabel-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We also change the color of the rest of the labels to the same white that we used for the needle and knob.</db:para>
<db:anchor xml:id="styling-circulargauge-tickmark"/>
</db:section>
<db:section xml:id="the-tickmark-component">
<db:title>The Tickmark Component</db:title>
<db:para>Now let's do the same for the three highest tickmarks:</db:para>
<db:programlisting language="qml">tickmark: Rectangle {
    visible: styleData.value &amp;lt; 80 || styleData.value % 10 == 0
    implicitWidth: outerRadius * 0.02
    antialiasing: true
    implicitHeight: outerRadius * 0.06
    color: styleData.value &amp;gt;= 80 ? &quot;#e34c22&quot; : &quot;#e5e5e5&quot;
}
</db:programlisting>
<db:mediaobject>
<db:alt>tickmark</db:alt>
<db:imageobject>
<db:imagedata fileref="images/styling-circulargauge-tickmark-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:anchor xml:id="styling-circulargauge-minortickmark"/>
</db:section>
<db:section xml:id="the-minor-tickmark-component">
<db:title>The Minor Tickmark Component</db:title>
<db:para>For the minor tickmarks, we'll only show those which are not higher than <db:code>80</db:code>:</db:para>
<db:programlisting language="qml">minorTickmark: Rectangle {
    visible: styleData.value &amp;lt; 80
    implicitWidth: outerRadius * 0.01
    antialiasing: true
    implicitHeight: outerRadius * 0.03
    color: &quot;#e5e5e5&quot;
}
</db:programlisting>
<db:mediaobject>
<db:alt>minorTickmark</db:alt>
<db:imageobject>
<db:imagedata fileref="images/styling-circulargauge-minorTickmark-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This is because we'll draw something between that range in the next section.</db:para>
<db:anchor xml:id="styling-circulargauge-background"/>
</db:section>
<db:section xml:id="the-background-component">
<db:title>The Background Component</db:title>
<db:para>We'll display the range that indicates caution with an orange arc:</db:para>
<db:programlisting language="qml">function degreesToRadians(degrees) {
    return degrees * (Math.PI / 180);
}

background: Canvas {
    onPaint: {
        var ctx = getContext(&quot;2d&quot;);
        ctx.reset();

        ctx.beginPath();
        ctx.strokeStyle = &quot;#e34c22&quot;;
        ctx.lineWidth = outerRadius * 0.02;

        ctx.arc(outerRadius, outerRadius, outerRadius - ctx.lineWidth / 2,
            degreesToRadians(valueToAngle(80) - 90), degreesToRadians(valueToAngle(100) - 90));
        ctx.stroke();
    }
}
</db:programlisting>
<db:para>We define a function to convert degrees to radians, which are the units used by <db:link xlink:href="qml-qtquick-canvas.xml">Canvas</db:link>.</db:para>
<db:para>Next, we do the drawing of the range using Canvas. We draw an arc between <db:code>80</db:code> and <db:code>100</db:code>, using the <db:link xlink:href="qml-qtquick-controls-styles-circulargaugestyle.xml#valueToAngle-method">valueToAngle</db:link>() function provided by <db:link xlink:href="qml-qtquick-controls-styles-circulargaugestyle.xml">CircularGaugeStyle</db:link>. Note that we subtract <db:code>90</db:code> degrees before converting to radians, as our origin is north and Canvas' is east.</db:para>
<db:para>The finished product:</db:para>
<db:mediaobject>
<db:alt>background</db:alt>
<db:imageobject>
<db:imagedata fileref="images/styling-circulargauge-background-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The complete code for this example is as follows:</db:para>
<db:programlisting language="qml">import QtQuick 2.0
import QtQuick.Controls 1.4
import QtQuick.Controls.Styles 1.4
import QtQuick.Extras 1.4
import QtQuick.Extras.Private 1.0

Rectangle {
    width: 300
    height: 300
    color: &quot;#494d53&quot;

    CircularGauge {
        id: gauge
        anchors.centerIn: parent
        style: CircularGaugeStyle {
            id: style

            function degreesToRadians(degrees) {
                return degrees * (Math.PI / 180);
            }

            background: Canvas {
                onPaint: {
                    var ctx = getContext(&quot;2d&quot;);
                    ctx.reset();

                    ctx.beginPath();
                    ctx.strokeStyle = &quot;#e34c22&quot;;
                    ctx.lineWidth = outerRadius * 0.02;

                    ctx.arc(outerRadius, outerRadius, outerRadius - ctx.lineWidth / 2,
                        degreesToRadians(valueToAngle(80) - 90), degreesToRadians(valueToAngle(100) - 90));
                    ctx.stroke();
                }
            }

            tickmark: Rectangle {
                visible: styleData.value &amp;lt; 80 || styleData.value % 10 == 0
                implicitWidth: outerRadius * 0.02
                antialiasing: true
                implicitHeight: outerRadius * 0.06
                color: styleData.value &amp;gt;= 80 ? &quot;#e34c22&quot; : &quot;#e5e5e5&quot;
            }

            minorTickmark: Rectangle {
                visible: styleData.value &amp;lt; 80
                implicitWidth: outerRadius * 0.01
                antialiasing: true
                implicitHeight: outerRadius * 0.03
                color: &quot;#e5e5e5&quot;
            }

            tickmarkLabel:  Text {
                font.pixelSize: Math.max(6, outerRadius * 0.1)
                text: styleData.value
                color: styleData.value &amp;gt;= 80 ? &quot;#e34c22&quot; : &quot;#e5e5e5&quot;
                antialiasing: true
            }

            needle: Rectangle {
                y: outerRadius * 0.15
                implicitWidth: outerRadius * 0.03
                implicitHeight: outerRadius * 0.9
                antialiasing: true
                color: &quot;#e5e5e5&quot;
            }

            foreground: Item {
                Rectangle {
                    width: outerRadius * 0.2
                    height: width
                    radius: width / 2
                    color: &quot;#e5e5e5&quot;
                    anchors.centerIn: parent
                }
            }
        }
    }
}
</db:programlisting>
</db:section>
</db:article>
