<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSslCertificateExtension Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsslcertificateextension.xml">QSslCertificateExtension</db:link> class provides an API for accessing the extensions of an X509 certificate.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSslCertificateExtension</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSslCertificateExtension is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>ssl</db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsslcertificateextension.xml">QSslCertificateExtension</db:link> provides access to an extension stored in an X509 certificate. The information available depends on the type of extension being accessed.</db:para>
<db:para>All X509 certificate extensions have the following properties:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Property</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>name</db:para>
</db:td>
<db:td>
<db:para>The human readable name of the extension, eg. 'basicConstraints'.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>criticality</db:para>
</db:td>
<db:td>
<db:para>This is a boolean value indicating if the extension is critical to correctly interpreting the certificate.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>oid</db:para>
</db:td>
<db:td>
<db:para>The ASN.1 object identifier that specifies which extension this is.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>supported</db:para>
</db:td>
<db:td>
<db:para>If this is true the structure of the extension's value will not change between Qt versions.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>value</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> with a structure dependent on the type of extension.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Whilst this class provides access to any type of extension, only some are guaranteed to be returned in a format that will remain unchanged between releases. The <db:link xlink:href="qsslcertificateextension.xml#isSupported">isSupported</db:link>() method returns true for extensions where this is the case.</db:para>
<db:para>The extensions currently supported, and the structure of the value returned are as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Name</db:para>
</db:th>
<db:th>
<db:para>OID</db:para>
</db:th>
<db:th>
<db:para>Details</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>basicConstraints</db:para>
</db:td>
<db:td>
<db:para>2.5.29.19</db:para>
</db:td>
<db:td>
<db:para>Returned as a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>. The key 'ca' contains a boolean value, the optional key 'pathLenConstraint' contains an integer.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>authorityInfoAccess</db:para>
</db:td>
<db:td>
<db:para>1.3.6.1.5.5.7.1.1</db:para>
</db:td>
<db:td>
<db:para>Returned as a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>. There is a key for each access method, with the value being a URI.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>subjectKeyIdentifier</db:para>
</db:td>
<db:td>
<db:para>2.5.29.14</db:para>
</db:td>
<db:td>
<db:para>Returned as a <db:link xlink:href="qvariant.xml">QVariant</db:link> containing a <db:link xlink:href="qstring.xml">QString</db:link>. The string is the key identifier.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>authorityKeyIdentifier</db:para>
</db:td>
<db:td>
<db:para>2.5.29.35</db:para>
</db:td>
<db:td>
<db:para>Returned as a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>. The optional key 'keyid' contains the key identifier as a hex string stored in a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>. The optional key 'serial' contains the authority key serial number as a qlonglong. Currently there is no support for the general names field of this extension.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In addition to the supported extensions above, many other common extensions will be returned in a reasonably structured way. Extensions that the SSL backend has no support for at all will be returned as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>Further information about the types of extensions certificates can contain can be found in RFC 5280.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslcertificate.xml#extensions">QSslCertificate::extensions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSslCertificateExtension">
<db:title>QSslCertificateExtension::QSslCertificateExtension()</db:title>
<db:constructorsynopsis>
<db:methodname>QSslCertificateExtension</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslCertificateExtension()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsslcertificateextension.xml">QSslCertificateExtension</db:link>.</db:para>
</db:section>
<db:section xml:id="QSslCertificateExtension-1">
<db:title>QSslCertificateExtension::QSslCertificateExtension(const QSslCertificateExtension &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSslCertificateExtension</db:methodname>
<db:methodparam>
<db:type>const QSslCertificateExtension &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslCertificateExtension(const QSslCertificateExtension &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSslCertificateExtension">
<db:title>QSslCertificateExtension::~QSslCertificateExtension()</db:title>
<db:destructorsynopsis>
<db:methodname>~QSslCertificateExtension</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSslCertificateExtension()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the extension.</db:para>
</db:section>
<db:section xml:id="isCritical">
<db:title>bool QSslCertificateExtension::isCritical() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCritical</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCritical() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the criticality of the extension.</db:para>
</db:section>
<db:section xml:id="isSupported">
<db:title>bool QSslCertificateExtension::isSupported() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSupported</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSupported() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the true if this extension is supported. In this case, supported simply means that the structure of the <db:link xlink:href="qvariant.xml">QVariant</db:link> returned by the <db:link xlink:href="qsslcertificateextension.xml#value">value</db:link>() accessor will remain unchanged between versions. Unsupported extensions can be freely used, however there is no guarantee that the returned data will have the same structure between versions.</db:para>
</db:section>
<db:section xml:id="name">
<db:title>QString QSslCertificateExtension::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the extension. If no name is known for the extension then the OID will be returned.</db:para>
</db:section>
<db:section xml:id="oid">
<db:title>QString QSslCertificateExtension::oid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>oid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString oid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the ASN.1 OID of this extension.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>void QSslCertificateExtension::swap(QSslCertificateExtension &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QSslCertificateExtension &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QSslCertificateExtension &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this certificate extension instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>QVariant QSslCertificateExtension::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the extension. The structure of the value returned depends on the extension type.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QSslCertificateExtension &amp;QSslCertificateExtension::operator=(const QSslCertificateExtension &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSslCertificateExtension &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QSslCertificateExtension &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslCertificateExtension &amp; operator=(const QSslCertificateExtension &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this extension and returns a reference to this extension.</db:para>
</db:section>
</db:section>
</db:article>
