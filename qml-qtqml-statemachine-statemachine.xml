<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>StateMachine QML Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a hierarchical finite state machine.</db:para>
<db:para>This type was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml.StateMachine 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-statemachine-state.xml">State</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>StateMachine is part of <db:simplelist><db:member>statemachine-qmltypes</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml">StateMachine</db:link> is based on the concepts and notation of <db:link xlink:href="http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf">Statecharts</db:link>. <db:link xlink:href="qml-qtqml-statemachine-statemachine.xml">StateMachine</db:link> is part of <db:link xlink:href="qmlstatemachine.xml">The Declarative State Machine Framework</db:link>.</db:para>
<db:para>A state machine manages a set of states and transitions between those states; these states and transitions define a state graph. Once a state graph has been built, the state machine can execute it. <db:link xlink:href="qml-qtqml-statemachine-statemachine.xml">StateMachine</db:link>'s execution algorithm is based on the <db:link xlink:href="http://www.w3.org/TR/scxml/">State Chart XML (SCXML)</db:link> algorithm. The framework's <db:link xlink:href="qmlstatemachine.xml">overview</db:link> gives several state graphs and the code to build them.</db:para>
<db:para>Before the machine can be started, the <db:link xlink:href="qml-qtqml-statemachine-state.xml#initialState-prop">initialState</db:link> must be set. The initial state is the state that the machine enters when started. You can then set running property to true or <db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#start-method">start</db:link>() the state machine. The started signal is emitted when the initial state is entered.</db:para>
<db:para>The state machine processes events and takes transitions until a top-level final state is entered; the state machine then emits the finished() signal. You can also <db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#stop-method">stop</db:link>() the state machine explicitly (you can also set running property to false). The stopped signal is emitted in this case.</db:para>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para>The following snippet shows a state machine that will finish when a button is clicked:</db:para>
<db:programlisting language="qml">import QtQuick 2.0
import QtQml.StateMachine 1.0 as DSM

Rectangle {
    Button {
        anchors.fill: parent
        id: button
        text: &quot;Finish state&quot;
        DSM.StateMachine {
            id: stateMachine
            initialState: state
            running: true
            DSM.State {
                id: state
                DSM.SignalTransition {
                    targetState: finalState
                    signal: button.clicked
                }
            }
            DSM.FinalState {
                id: finalState
            }
            onFinished: Qt.quit()
        }
    }
}
</db:programlisting>
<db:para>If an error is encountered, the machine will look for an <db:link xlink:href="qml-qtqml-statemachine-state.xml#errorState-prop">errorState</db:link>, and if one is available, it will enter this state. After the error state is entered, the type of the error can be retrieved with error(). The execution of the state graph will not stop when the error state is entered. If no error state applies to the erroneous state, the machine will stop executing and an error message will be printed to the console.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-statemachine-qabstractstate.xml">QAbstractState</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-state.xml">State</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-signaltransition.xml">SignalTransition</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-timeouttransition.xml">TimeoutTransition</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-historystate.xml">HistoryState</db:link></db:member>
<db:member><db:link xlink:href="qmlstatemachine.xml">The Declarative State Machine Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="errorString-prop">
<db:title>[read-only] errorString : string</db:title>
<db:para>The error string of this state machine.</db:para>
</db:section>
<db:section xml:id="globalRestorePolicy-prop">
<db:title>globalRestorePolicy : enumeration</db:title>
<db:para>The restore policy for states of this state machine.</db:para>
<db:para>The default value of this property is <db:link xlink:href="qstate.xml">QState</db:link>.DontRestoreProperties.</db:para>
<db:para>This enum specifies the restore policy type. The restore policy takes effect when the machine enters a state which sets one or more properties. If the restore policy is set to <db:link xlink:href="qstate.xml">QState</db:link>.RestoreProperties, the state machine will save the original value of the property before the new value is set.</db:para>
<db:para>Later, when the machine either enters a state which does not set a value for the given property, the property will automatically be restored to its initial value.</db:para>
<db:para>Only one initial value will be saved for any given property. If a value for a property has already been saved by the state machine, it will not be overwritten until the property has been successfully restored.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qstate.xml">QState</db:link>.DontRestoreProperties The state machine should not save the initial values of properties and restore them later.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstate.xml">QState</db:link>.RestoreProperties The state machine should save the initial values of properties and restore them later.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="running-prop">
<db:title>running : bool</db:title>
<db:para>The running state of this state machine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#start-method">start</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#stop-method">stop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="started-signal">
<db:title>started()</db:title>
<db:para>This signal is emitted when the state machine has entered its initial state (<db:link xlink:href="qml-qtqml-statemachine-state.xml#initialState-prop">State::initialState</db:link>).</db:para>
<db:para>The corresponding handler is <db:code>onStarted</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onStarted</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#running-prop">running</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#start-method">start</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-state.xml#finished-signal">State::finished</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stopped-signal">
<db:title>stopped()</db:title>
<db:para>This signal is emitted when the state machine has stopped.</db:para>
<db:para>The corresponding handler is <db:code>onStopped</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onStopped</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#running-prop">running</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#stop-method">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-state.xml#finished-signal">State::finished</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="start-method">
<db:title>start()</db:title>
<db:para>Starts this state machine. The machine will reset its configuration and transition to the initial state. When a final top-level state (<db:link xlink:href="qml-qtqml-statemachine-finalstate.xml">FinalState</db:link>) is entered, the machine will emit the finished() signal.</db:para>
<db:note>
<db:para>A state machine will not run without a running event loop, such as the main application event loop started with <db:link xlink:href="qcoreapplication.xml#exec">QCoreApplication::exec</db:link>() or QApplication::exec().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#started-signal">started</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-state.xml#finished-signal">State::finished</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#stop-method">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-state.xml#initialState-prop">State::initialState</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#running-prop">running</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop-method">
<db:title>stop()</db:title>
<db:para>Stops this state machine. The state machine will stop processing events and then emit the stopped signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#stopped-signal">stopped</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#start-method">start</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml#running-prop">running</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
