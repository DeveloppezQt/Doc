<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt3DCore Namespace</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Contains classes that are the foundation for Qt 3D simulation framework, as well as classes that provide the ability to render using the Qt 3D framework.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Qt3DCore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3DCore)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3DCore)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3dcore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Qt3DCore is part of <db:simplelist><db:member>qt3d-namespaces</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="namespaces">
<db:title>Namespaces</db:title>
<db:section>
<db:title>namespace Qt3DCore::Quick</db:title>
</db:section>
</db:section>
<db:section xml:id="classes">
<db:title>Classes</db:title>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qabstractaspect.xml" xlink:role="class">QAbstractAspect</db:link></db:title>
<db:para><db:link xlink:href="qt3dcore-qabstractaspect.xml">QAbstractAspect</db:link> is the base class for aspects that provide a vertical slice of behavior.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qabstractfunctor.xml" xlink:role="class">QAbstractFunctor</db:link></db:title>
<db:para><db:link xlink:href="qt3dcore-qabstractfunctor.xml">QAbstractFunctor</db:link> is an abstract base class for all functors.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qabstractskeleton.xml" xlink:role="class">QAbstractSkeleton</db:link></db:title>
<db:para>A skeleton contains the joints for a skinned mesh.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qarmature.xml" xlink:role="class">QArmature</db:link></db:title>
<db:para>Used to calculate skinning transform matrices and set them on shaders.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qaspectengine.xml" xlink:role="class">QAspectEngine</db:link></db:title>
<db:para>Responsible for handling all the <db:link xlink:href="qt3dcore-qabstractaspect.xml">QAbstractAspect</db:link> subclasses that have been registered with the scene.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qaspectjob.xml" xlink:role="class">QAspectJob</db:link></db:title>
<db:para>The base class for jobs executed in an aspect.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qattribute.xml" xlink:role="class">QAttribute</db:link></db:title>
<db:para>Defines an attribute and how data should be read from a <db:link xlink:href="qt3dcore-qbuffer.xml">QBuffer</db:link>.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qbackendnode.xml" xlink:role="class">QBackendNode</db:link></db:title>
<db:para>The base class for all Qt3D backend nodes.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qbackendnodemapper.xml" xlink:role="class">QBackendNodeMapper</db:link></db:title>
<db:para>Creates and maps backend nodes to their respective frontend nodes.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qboundingvolume.xml" xlink:role="class">QBoundingVolume</db:link></db:title>
<db:para>can be used to override the bounding volume of an entity.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qbuffer.xml" xlink:role="class">QBuffer</db:link></db:title>
<db:para>Provides a data store for raw data to later be used as vertices or uniforms.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qcomponent.xml" xlink:role="class">QComponent</db:link></db:title>
<db:para>The base class of scene nodes that can be aggregated by <db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link> instances as a component.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qcoresettings.xml" xlink:role="class">QCoreSettings</db:link></db:title>
<db:para>The <db:link xlink:href="qt3dcore-qcoresettings.xml">QCoreSettings</db:link> class holds settings related to core data handling process.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qentity.xml" xlink:role="class">QEntity</db:link></db:title>
<db:para><db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link> is a <db:link xlink:href="qt3dcore-qnode.xml">Qt3DCore::QNode</db:link> subclass that can aggregate several <db:link xlink:href="qt3dcore-qcomponent.xml">Qt3DCore::QComponent</db:link> instances that will specify its behavior.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qgeometry.xml" xlink:role="class">QGeometry</db:link></db:title>
<db:para>Encapsulates geometry.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qgeometryview.xml" xlink:role="class">QGeometryView</db:link></db:title>
<db:para>Encapsulates geometry details.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qjoint.xml" xlink:role="class">QJoint</db:link></db:title>
<db:para>Used to transforms parts of skinned meshes.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qnode.xml" xlink:role="class">QNode</db:link></db:title>
<db:para><db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> is the base class of all Qt3D node classes used to build a Qt3D scene.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qnodeid.xml" xlink:role="class">QNodeId</db:link></db:title>
<db:para>Uniquely identifies a <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link>.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qskeleton.xml" xlink:role="class">QSkeleton</db:link></db:title>
<db:para>Holds the data for a skeleton to be used with skinned meshes.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qskeletonloader.xml" xlink:role="class">QSkeletonLoader</db:link></db:title>
<db:para>Used to load a skeleton of joints from file.</db:para>
</db:section>
<db:section>
<db:title>class <db:link xlink:href="qt3dcore-qtransform.xml" xlink:role="class">QTransform</db:link></db:title>
<db:para>Used to perform transforms on meshes.</db:para>
</db:section>
</db:section>
<db:section xml:id="type-documentation">
<db:title>Type Documentation</db:title>
<db:section xml:id="QAspectJobPtr-typedef">
<db:title>QAspectJobPtr</db:title>
<db:typedefsynopsis>
<db:typedefname>QAspectJobPtr</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A shared pointer for <db:link xlink:href="qt3dcore-qaspectjob.xml">QAspectJob</db:link>.</db:para>
</db:section>
<db:section xml:id="QBackendNodeMapperPtr-typedef">
<db:title>QBackendNodeMapperPtr</db:title>
<db:typedefsynopsis>
<db:typedefname>QBackendNodeMapperPtr</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A shared pointer for <db:link xlink:href="qt3dcore-qbackendnodemapper.xml">QBackendNodeMapper</db:link>.</db:para>
</db:section>
<db:section xml:id="QBufferPtr-typedef">
<db:title>QBufferPtr</db:title>
<db:typedefsynopsis>
<db:typedefname>QBufferPtr</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
</db:section>
<db:section xml:id="QComponentVector-typedef">
<db:title>[alias] QComponentVector</db:title>
<db:typedefsynopsis>
<db:typedefname>QComponentVector</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>List of <db:link xlink:href="qt3dcore-qcomponent.xml">QComponent</db:link> pointers.</db:para>
</db:section>
<db:section xml:id="QEntityPtr-typedef">
<db:title>QEntityPtr</db:title>
<db:typedefsynopsis>
<db:typedefname>QEntityPtr</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A shared pointer for <db:link xlink:href="qt3dcore-qentity.xml">QEntity</db:link>.</db:para>
</db:section>
<db:section xml:id="QNodeIdVector-typedef">
<db:title>[alias] QNodeIdVector</db:title>
<db:typedefsynopsis>
<db:typedefname>QNodeIdVector</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A vector of <db:link xlink:href="qt3dcore-qnodeid.xml">QNodeId</db:link>s.</db:para>
</db:section>
<db:section xml:id="QNodePtr-typedef">
<db:title>[alias] QNodePtr</db:title>
<db:typedefsynopsis>
<db:typedefname>QNodePtr</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A shared pointer for <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link>.</db:para>
</db:section>
<db:section xml:id="QNodeVector-typedef">
<db:title>[alias] QNodeVector</db:title>
<db:typedefsynopsis>
<db:typedefname>QNodeVector</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>List of <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> pointers.</db:para>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="functorTypeId">
<db:title>qintptr Qt3DCore::functorTypeId()</db:title>
<db:methodsynopsis>
<db:type>qintptr</db:type>
<db:methodname>functorTypeId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qintptr functorTypeId()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the type id of the functor.</db:para>
</db:section>
<db:section xml:id="qHash">
<db:title>[constexpr] size_t qHash(Qt3DCore::QNodeId <db:emphasis>id</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>size_t</db:type>
<db:methodname>qHash</db:methodname>
<db:methodparam>
<db:type>Qt3DCore::QNodeId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>size_t</db:type>
<db:parameter>seed</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">size_t qHash(Qt3DCore::QNodeId id, size_t seed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns hash of node with <db:code role="parameter">id</db:code> and optional <db:code role="parameter">seed</db:code>.</db:para>
</db:section>
<db:section xml:id="qIdForNode">
<db:title>Qt3DCore::QNodeId qIdForNode(Qt3DCore::QNode *<db:emphasis>node</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Qt3DCore::QNodeId</db:type>
<db:methodname>qIdForNode</db:methodname>
<db:methodparam>
<db:type>Qt3DCore::QNode *</db:type>
<db:parameter>node</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt3DCore::QNodeId qIdForNode(Qt3DCore::QNode *node)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns node id for <db:code role="parameter">node</db:code>.</db:para>
</db:section>
<db:section xml:id="qIdsForNodes">
<db:title>Qt3DCore::QNodeIdVector qIdsForNodes(const T &amp;<db:emphasis>nodes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Qt3DCore::QNodeIdVector</db:type>
<db:methodname>qIdsForNodes</db:methodname>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>nodes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt3DCore::QNodeIdVector qIdsForNodes(const T &amp;nodes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns vector of node ids for <db:code role="parameter">nodes</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDebug Qt3DCore::operator&lt;&lt;(QDebug <db:emphasis>d</db:emphasis>, Qt3DCore::QNodeId <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>d</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt3DCore::QNodeId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug d, Qt3DCore::QNodeId id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>&lt;&lt; with <db:code role="parameter">d</db:code> and <db:code role="parameter">id</db:code>. Returns <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
