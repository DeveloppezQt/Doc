<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDialog Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdialog.xml">QDialog</db:link> class is the base class of dialog windows.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDialog</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qcolordialog.xml" xlink:role="class">QColorDialog</db:link>, <db:link xlink:href="qerrormessage.xml" xlink:role="class">QErrorMessage</db:link>, <db:link xlink:href="qfiledialog.xml" xlink:role="class">QFileDialog</db:link>, <db:link xlink:href="qfontdialog.xml" xlink:role="class">QFontDialog</db:link>, <db:link xlink:href="qinputdialog.xml" xlink:role="class">QInputDialog</db:link>, <db:link xlink:href="qmessagebox.xml" xlink:role="class">QMessageBox</db:link>, <db:link xlink:href="qprogressdialog.xml" xlink:role="class">QProgressDialog</db:link>, and <db:link xlink:href="qwizard.xml" xlink:role="class">QWizard</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDialog is part of <db:simplelist><db:member>dialog-classes</db:member><db:member>abstractwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A dialog window is a top-level window mostly used for short-term tasks and brief communications with the user. QDialogs may be modal or modeless. QDialogs can provide a <db:link xlink:href="qdialog.xml#return-value-modal-dialogs">return value</db:link>, and they can have <db:link xlink:href="qdialog.xml#default-button">default buttons</db:link>. QDialogs can also have a <db:link xlink:href="qsizegrip.xml">QSizeGrip</db:link> in their lower-right corner, using <db:link xlink:href="qdialog.xml#sizeGripEnabled-prop">setSizeGripEnabled</db:link>().</db:para>
<db:para>Note that <db:link xlink:href="qdialog.xml">QDialog</db:link> (and any other widget that has type <db:code>Qt::Dialog</db:code>) uses the parent widget slightly differently from other classes in Qt. A dialog is always a top-level widget, but if it has a parent, its default location is centered on top of the parent's top-level widget (if it is not top-level itself). It will also share the parent's taskbar entry.</db:para>
<db:para>Use the overload of the <db:link xlink:href="qwidget.xml#setParent">QWidget::setParent</db:link>() function to change the ownership of a <db:link xlink:href="qdialog.xml">QDialog</db:link> widget. This function allows you to explicitly set the window flags of the reparented widget; using the overloaded function will clear the window flags specifying the window-system properties for the widget (in particular it will reset the <db:link xlink:href="qt.xml#WindowType-enum">Qt::Dialog</db:link> flag).</db:para>
<db:note>
<db:para>The parent relationship of the dialog does <db:emphasis>not</db:emphasis> imply that the dialog will always be stacked on top of the parent window. To ensure that the dialog is always on top, make the dialog modal. This also applies for child windows of the dialog itself. To ensure that child windows of the dialog stay on top of the dialog, make the child windows modal as well.</db:para>
</db:note>
<db:section xml:id="modal-dialogs">
<db:title>Modal Dialogs</db:title>
<db:para>A <db:emphasis role="bold">modal</db:emphasis> dialog is a dialog that blocks input to other visible windows in the same application. Dialogs that are used to request a file name from the user or that are used to set application preferences are usually modal. Dialogs can be <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link> (the default) or <db:link xlink:href="qt.xml#WindowModality-enum">window modal</db:link>.</db:para>
<db:para>When an application modal dialog is opened, the user must finish interacting with the dialog and close it before they can access any other window in the application. Window modal dialogs only block access to the window associated with the dialog, allowing the user to continue to use other windows in an application.</db:para>
<db:para>The most common way to display a modal dialog is to call its <db:link xlink:href="qdialog.xml#open">open</db:link>() function. Alternatively, you can call <db:link xlink:href="">setModal(true)</db:link> or <db:link xlink:href="qwidget.xml#windowModality-prop">setWindowModality</db:link>(), and then <db:link xlink:href="qwidget.xml#show">show</db:link>(). In both cases, once the dialog is displayed, the control is immediately returned to the caller. You must connect to the <db:link xlink:href="qdialog.xml#finished">finished</db:link>() signal to know when the dialog is closed and what its <db:link xlink:href="qdialog.xml#return-value-modal-dialogs">return value</db:link> is. Alternatively, you can connect to the <db:link xlink:href="qdialog.xml#accepted">accepted</db:link>() and <db:link xlink:href="qdialog.xml#rejected">rejected</db:link>() signals.</db:para>
<db:para>When implementing a custom dialog, to close the dialog and return an appropriate value, connect a default button, for example, an OK button, to the <db:link xlink:href="qdialog.xml#accept">accept</db:link>() slot, and a Cancel button to the <db:link xlink:href="qdialog.xml#reject">reject</db:link>() slot. Alternatively, you can call the <db:link xlink:href="qdialog.xml#done">done</db:link>() slot with <db:code>Accepted</db:code> or <db:code>Rejected</db:code>.</db:para>
<db:para>If you show the modal dialog to perform a long-running operation, it is recommended to perform the operation in a background worker thread, so that it does not interfere with the GUI thread.</db:para>
<db:warning>
<db:para>When using <db:link xlink:href="qdialog.xml#open">open</db:link>() or <db:link xlink:href="qwidget.xml#show">show</db:link>(), the modal dialog should not be created on the stack, so that it does not get destroyed as soon as the control returns to the caller.</db:para>
</db:warning>
<db:note>
<db:para>There is a way to show a modal dialog in a blocking mode by calling <db:link xlink:href="qdialog.xml#exec">exec</db:link>(). In this case, the control returns to the GUI thread only when the dialog is closed. However, such approach is discouraged, because it creates a nested event loop, which is not fully supported by some platforms.</db:para>
</db:note>
</db:section>
<db:section xml:id="modeless-dialogs">
<db:title>Modeless Dialogs</db:title>
<db:para>A <db:emphasis role="bold">modeless</db:emphasis> dialog is a dialog that operates independently of other windows in the same application. Find and replace dialogs in word-processors are often modeless to allow the user to interact with both the application's main window and with the dialog.</db:para>
<db:para>Modeless dialogs are displayed using <db:link xlink:href="qwidget.xml#show">show</db:link>(), which returns control to the caller immediately.</db:para>
<db:para>If you invoke the <db:link xlink:href="qwidget.xml#show">show</db:link>() function after hiding a dialog, the dialog will be displayed in its original position. This is because the window manager decides the position for windows that have not been explicitly placed by the programmer. To preserve the position of a dialog that has been moved by the user, save its position in your <db:link xlink:href="qwidget.xml#closeEvent">closeEvent</db:link>() handler and then move the dialog to that position, before showing it again.</db:para>
<db:anchor xml:id="default"/>
</db:section>
<db:section xml:id="default-button">
<db:title>Default Button</db:title>
<db:para>A dialog's <db:emphasis>default</db:emphasis> button is the button that's pressed when the user presses Enter (Return). This button is used to signify that the user accepts the dialog's settings and wants to close the dialog. Use <db:link xlink:href="qpushbutton.xml#default-prop">QPushButton::setDefault</db:link>(), <db:link xlink:href="qpushbutton.xml#default-prop">QPushButton::isDefault</db:link>() and <db:link xlink:href="qpushbutton.xml#autoDefault-prop">QPushButton::autoDefault</db:link>() to set and control the dialog's default button.</db:para>
<db:anchor xml:id="escapekey"/>
</db:section>
<db:section xml:id="escape-key">
<db:title>Escape Key</db:title>
<db:para>If the user presses the Esc key in a dialog, <db:link xlink:href="qdialog.xml#reject">QDialog::reject</db:link>() will be called. This will cause the window to close: The <db:link xlink:href="qcloseevent.xml">close event</db:link> cannot be <db:link xlink:href="qevent.xml#ignore">ignored</db:link>.</db:para>
</db:section>
<db:section xml:id="extensibility">
<db:title>Extensibility</db:title>
<db:para>Extensibility is the ability to show the dialog in two ways: a partial dialog that shows the most commonly used options, and a full dialog that shows all the options. Typically an extensible dialog will initially appear as a partial dialog, but with a <db:guilabel>More</db:guilabel> toggle button. If the user presses the <db:guilabel>More</db:guilabel> button down, the dialog is expanded.</db:para>
<db:anchor xml:id="return"/>
</db:section>
<db:section xml:id="return-value-modal-dialogs">
<db:title>Return Value (Modal Dialogs)</db:title>
<db:para>Modal dialogs are often used in situations where a return value is required, e.g. to indicate whether the user pressed <db:guilabel>OK</db:guilabel> or <db:guilabel>Cancel</db:guilabel>. A dialog can be closed by calling the <db:link xlink:href="qdialog.xml#accept">accept</db:link>() or the <db:link xlink:href="qdialog.xml#reject">reject</db:link>() slots, and <db:link xlink:href="qdialog.xml#exec">exec</db:link>() will return <db:code>Accepted</db:code> or <db:code>Rejected</db:code> as appropriate. The <db:link xlink:href="qdialog.xml#exec">exec</db:link>() call returns the result of the dialog. The result is also available from <db:link xlink:href="qdialog.xml#result">result</db:link>() if the dialog has not been destroyed.</db:para>
<db:para>In order to modify your dialog's close behavior, you can reimplement the functions <db:link xlink:href="qdialog.xml#accept">accept</db:link>(), <db:link xlink:href="qdialog.xml#reject">reject</db:link>() or <db:link xlink:href="qdialog.xml#done">done</db:link>(). The <db:link xlink:href="qwidget.xml#closeEvent">closeEvent</db:link>() function should only be reimplemented to preserve the dialog's position or to override the standard close or reject behavior.</db:para>
<db:anchor xml:id="examples"/>
</db:section>
<db:section xml:id="code-examples">
<db:title>Code Examples</db:title>
<db:para>A modal dialog:</db:para>
<db:programlisting language="cpp">void EditorWindow::countWords()
{
    WordCountDialog dialog(this);
    dialog.setWordCount(document().wordCount());
    dialog.exec();
}
</db:programlisting>
<db:para>A modeless dialog:</db:para>
<db:programlisting language="cpp">void EditorWindow::find()
{
    if (!findDialog) {
        findDialog = new FindDialog(this);
        connect(findDialog, &amp;FindDialog::findNext,
                this, &amp;EditorWindow::findNext);
    }

    findDialog-&gt;show();
    findDialog-&gt;raise();
    findDialog-&gt;activateWindow();
}
</db:programlisting>
<db:para>A dialog with an extension:</db:para>
<db:programlisting language="cpp">    mainLayout-&gt;setSizeConstraint(QLayout::SetFixedSize);

    findButton = new QPushButton(tr(&quot;&amp;Find&quot;));
    moreButton = new QPushButton(tr(&quot;&amp;More...&quot;));
    moreButton-&gt;setCheckable(true);

    extension = new ExtendedControls;
    mainLayout-&gt;addWidget(extension);
    extension-&gt;hide();

    connect(moreButton, &amp;QAbstractButton::toggled, extension, &amp;QWidget::setVisible);
</db:programlisting>
<db:para>By setting the <db:link xlink:href="qlayout.xml#sizeConstraint-prop">sizeConstraint</db:link> property of the dialog's layout to <db:link xlink:href="qlayout.xml#SizeConstraint-enum">SetFixedSize</db:link>, the dialog will not be resizable by the user, and will automatically shrink when the extension gets hidden.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialogbuttonbox.xml">QDialogButtonBox</db:link></db:member>
<db:member><db:link xlink:href="qtabwidget.xml">QTabWidget</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml">QWidget</db:link></db:member>
<db:member><db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-standarddialogs-example.xml">Standard Dialogs Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DialogCode-enum">
<db:title>enum QDialog::DialogCode</db:title>
<db:para>The value returned by a modal dialog.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdialog.xml">QDialog</db:link></db:emphasis>::Accepted</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdialog.xml">QDialog</db:link></db:emphasis>::Rejected</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="modal-prop">
<db:title>modal : bool</db:title>
<db:para>This property holds whether <db:link xlink:href="qwidget.xml#show">show</db:link>() should pop up the dialog as modal or modeless</db:para>
<db:para>By default, this property is <db:code>false</db:code> and <db:link xlink:href="qwidget.xml#show">show</db:link>() pops up the dialog as modeless. Setting this property to true is equivalent to setting <db:link xlink:href="qwidget.xml#windowModality-prop">QWidget::windowModality</db:link> to <db:link xlink:href="qt.xml#WindowModality-enum">Qt::ApplicationModal</db:link>.</db:para>
<db:para><db:link xlink:href="qdialog.xml#exec">exec</db:link>() ignores the value of this property and always pops up the dialog as modal.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qwidget.xml#modal-prop">isModal</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setModal</db:emphasis>(<db:type>bool</db:type> <db:emphasis>modal</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#windowModality-prop">QWidget::windowModality</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml#show">show</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#exec">exec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeGripEnabled-prop">
<db:title>sizeGripEnabled : bool</db:title>
<db:para>This property holds whether the size grip is enabled</db:para>
<db:para>A <db:link xlink:href="qsizegrip.xml">QSizeGrip</db:link> is placed in the bottom-right corner of the dialog when this property is enabled. By default, the size grip is disabled.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSizeGripEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSizeGripEnabled</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDialog">
<db:title>[explicit] QDialog::QDialog(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>f</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>Constructs a dialog with parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>A dialog is always a top-level widget, but if it has a parent, its default location is centered on top of the parent. It will also share the parent's taskbar entry.</db:para>
<db:para>The widget flags <db:code role="parameter">f</db:code> are passed on to the <db:link xlink:href="qwidget.xml">QWidget</db:link> constructor. If, for example, you don't want a What's This button in the title bar of the dialog, pass <db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowTitleHint</db:link> | <db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowSystemMenuHint</db:link> in <db:code role="parameter">f</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#windowFlags-prop">QWidget::setWindowFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QDialog">
<db:title>[virtual noexcept] QDialog::~QDialog()</db:title>
<db:para>Destroys the <db:link xlink:href="qdialog.xml">QDialog</db:link>, deleting all its children.</db:para>
</db:section>
<db:section xml:id="accept">
<db:title>[virtual] void QDialog::accept()</db:title>
<db:para>Hides the modal dialog and sets the result code to <db:code>Accepted</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml#reject">reject</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#done">done</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="accepted">
<db:title>void QDialog::accepted()</db:title>
<db:para>This signal is emitted when the dialog has been accepted either by the user or by calling <db:link xlink:href="qdialog.xml#accept">accept</db:link>() or <db:link xlink:href="qdialog.xml#done">done</db:link>() with the <db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::Accepted</db:link> argument.</db:para>
<db:para>Note that this signal is <db:emphasis>not</db:emphasis> emitted when hiding the dialog with <db:link xlink:href="qwidget.xml#hide">hide</db:link>() or <db:link xlink:href="qdialog.xml#setVisible">setVisible</db:link>(false). This includes deleting the dialog while it is visible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml#finished">finished</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#rejected">rejected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closeEvent">
<db:title>[override virtual protected] void QDialog::closeEvent(QCloseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#closeEvent" role="function">QWidget::closeEvent(QCloseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QDialog::contextMenuEvent(QContextMenuEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#contextMenuEvent" role="function">QWidget::contextMenuEvent(QContextMenuEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="done">
<db:title>[virtual] void QDialog::done(int <db:emphasis>r</db:emphasis>)</db:title>
<db:para>Closes the dialog and sets its result code to <db:code role="parameter">r</db:code>. The <db:link xlink:href="qdialog.xml#finished">finished</db:link>() signal will emit <db:code role="parameter">r</db:code>; if <db:code role="parameter">r</db:code> is <db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::Accepted</db:link> or <db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::Rejected</db:link>, the <db:link xlink:href="qdialog.xml#accepted">accepted</db:link>() or the <db:link xlink:href="qdialog.xml#rejected">rejected</db:link>() signals will also be emitted, respectively.</db:para>
<db:para>If this dialog is shown with <db:link xlink:href="qdialog.xml#exec">exec</db:link>(), done() also causes the local event loop to finish, and <db:link xlink:href="qdialog.xml#exec">exec</db:link>() to return <db:code role="parameter">r</db:code>.</db:para>
<db:para>As with <db:link xlink:href="qwidget.xml#close">QWidget::close</db:link>(), done() deletes the dialog if the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_DeleteOnClose</db:link> flag is set. If the dialog is the application's main widget, the application terminates. If the dialog is the last window closed, the <db:link xlink:href="qguiapplication.xml#lastWindowClosed">QGuiApplication::lastWindowClosed</db:link>() signal is emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml#accept">accept</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#reject">reject</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#activeWindow">QApplication::activeWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#quit">QCoreApplication::quit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual protected] bool QDialog::eventFilter(QObject *<db:emphasis>o</db:emphasis>, QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *watched, QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="exec">
<db:title>[virtual] int QDialog::exec()</db:title>
<db:para>Shows the dialog as a <db:link xlink:href="qdialog.xml#modal-dialogs">modal dialog</db:link>, blocking until the user closes it. The function returns a <db:link xlink:href="qdialog.xml#DialogCode-enum">DialogCode</db:link> result.</db:para>
<db:para>If the dialog is <db:link xlink:href="qt.xml#WindowModality-enum">application modal</db:link>, users cannot interact with any other window in the same application until they close the dialog. If the dialog is <db:link xlink:href="qt.xml#WindowModality-enum">window modal</db:link>, only interaction with the parent window is blocked while the dialog is open. By default, the dialog is application modal.</db:para>
<db:note>
<db:para>Avoid using this function; instead, use <db:code>open()</db:code>. Unlike exec(), <db:link xlink:href="qdialog.xml#open">open</db:link>() is asynchronous, and does not spin an additional event loop. This prevents a series of dangerous bugs from happening (e.g. deleting the dialog's parent while the dialog is open via exec()). When using <db:link xlink:href="qdialog.xml#open">open</db:link>() you can connect to the <db:link xlink:href="qdialog.xml#finished">finished</db:link>() signal of <db:link xlink:href="qdialog.xml">QDialog</db:link> to be notified when the dialog is closed.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#show">show</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#result">result</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#windowModality-prop">setWindowModality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="finished">
<db:title>void QDialog::finished(int <db:emphasis>result</db:emphasis>)</db:title>
<db:para>This signal is emitted when the dialog's <db:code role="parameter">result</db:code> code has been set, either by the user or by calling <db:link xlink:href="qdialog.xml#done">done</db:link>(), <db:link xlink:href="qdialog.xml#accept">accept</db:link>(), or <db:link xlink:href="qdialog.xml#reject">reject</db:link>().</db:para>
<db:para>Note that this signal is <db:emphasis>not</db:emphasis> emitted when hiding the dialog with <db:link xlink:href="qwidget.xml#hide">hide</db:link>() or <db:link xlink:href="qdialog.xml#setVisible">setVisible</db:link>(false). This includes deleting the dialog while it is visible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml#accepted">accepted</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#rejected">rejected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QDialog::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QDialog::minimumSizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#minimumSizeHint-prop" role="property">QWidget::minimumSizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="open">
<db:title>[virtual] void QDialog::open()</db:title>
<db:para>Shows the dialog as a <db:link xlink:href="qdialog.xml#modal-dialogs">window modal dialog</db:link>, returning immediately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml#exec">exec</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#show">show</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#result">result</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#windowModality-prop">setWindowModality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reject">
<db:title>[virtual] void QDialog::reject()</db:title>
<db:para>Hides the modal dialog and sets the result code to <db:code>Rejected</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml#accept">accept</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#done">done</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rejected">
<db:title>void QDialog::rejected()</db:title>
<db:para>This signal is emitted when the dialog has been rejected either by the user or by calling <db:link xlink:href="qdialog.xml#reject">reject</db:link>() or <db:link xlink:href="qdialog.xml#done">done</db:link>() with the <db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::Rejected</db:link> argument.</db:para>
<db:para>Note that this signal is <db:emphasis>not</db:emphasis> emitted when hiding the dialog with <db:link xlink:href="qwidget.xml#hide">hide</db:link>() or <db:link xlink:href="qdialog.xml#setVisible">setVisible</db:link>(false). This includes deleting the dialog while it is visible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml#finished">finished</db:link>()</db:member>
<db:member><db:link xlink:href="qdialog.xml#accepted">accepted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QDialog::resizeEvent(<db:emphasis>QResizeEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="result">
<db:title>int QDialog::result() const</db:title>
<db:para>In general returns the modal dialog's result code, <db:code>Accepted</db:code> or <db:code>Rejected</db:code>.</db:para>
<db:note>
<db:para>When called on a <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> instance, the returned value is a value of the <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::StandardButton</db:link> enum.</db:para>
</db:note>
<db:para>Do not call this function if the dialog was constructed with the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_DeleteOnClose</db:link> attribute.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml#setResult">setResult</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResult">
<db:title>void QDialog::setResult(int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Sets the modal dialog's result code to <db:code role="parameter">i</db:code>.</db:para>
<db:note>
<db:para>We recommend that you use one of the values defined by <db:link xlink:href="qdialog.xml#DialogCode-enum">QDialog::DialogCode</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml#result">result</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[override virtual] void QDialog::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#visible-prop" role="property">QWidget::visible</db:link>.</db:para>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QDialog::showEvent(QShowEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QDialog::sizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
