<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QInAppTransaction Class</db:title>
<db:productname>QtPurchasing</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Purchasing Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Contains information about a transaction in the external app store.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QInAppTransaction</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qinapptransaction.xml">QInAppTransaction</db:link> contains information about a transaction in the external app store and is usually provided as a result of calling <db:link xlink:href="qinappproduct.xml#purchase">QInAppProduct::purchase</db:link>(). When the purchase flow has been completed by the user (confirming the purchase, for instance by entering their password), the <db:link xlink:href="qinappstore.xml">QInAppStore</db:link> instance containing the product will emit a <db:link xlink:href="qinappstore.xml#transactionReady">QInAppStore::transactionReady</db:link>() signal with data about the transaction.</db:para>
<db:para>The <db:link xlink:href="qinapptransaction.xml#status-prop">status</db:link>() provides information on whether the transaction was successful or not. If it was successful, then the application should take appropriate action. When the necessary action has been performed, <db:link xlink:href="qinapptransaction.xml#finalize">finalize</db:link>() should be called. The <db:link xlink:href="qinapptransaction.xml#finalize">finalize</db:link>() function should be called regardless of the status of the transaction.</db:para>
<db:para>It is important that the application stores the purchase information before calling <db:link xlink:href="qinapptransaction.xml#finalize">finalize</db:link>(). If a transaction is not finalized (for example because the application was interrupted before it had a chance to save the information), then the transaction will be emitted again the next time the product is registered by <db:link xlink:href="qinappstore.xml#registerProduct">QInAppStore::registerProduct</db:link>().</db:para>
<db:para>Transactions can also be emitted after calling <db:link xlink:href="qinappstore.xml#restorePurchases">QInAppStore::restorePurchases</db:link>(), at which point a new transaction will be emitted for each previously purchased unlockable product with the status of <db:link xlink:href="qinapptransaction.xml#TransactionStatus-enum">PurchaseRestored</db:link>.</db:para>
<db:note>
<db:para>Since transactions may under certain circumstances be emitted for the same transaction several times, the application should always check if the transaction has been registered before. Do not expect each transaction to be unique.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FailureReason-enum">
<db:title>enum QInAppTransaction::FailureReason</db:title>
<db:para>This enum type specifies the reason for failure if a transaction has the <db:link xlink:href="qinapptransaction.xml#TransactionStatus-enum">PurchaseFailed</db:link> status.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinapptransaction.xml">QInAppTransaction</db:link></db:emphasis>::NoFailure</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The status of the transaction is not <db:link xlink:href="qinapptransaction.xml#TransactionStatus-enum">PurchaseFailed</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinapptransaction.xml">QInAppTransaction</db:link></db:emphasis>::CanceledByUser</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The transaction was manually canceled by the user.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinapptransaction.xml">QInAppTransaction</db:link></db:emphasis>::ErrorOccurred</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An error occurred, preventing the transaction from completing. See the <db:link xlink:href="qinapptransaction.xml#errorString-prop">errorString</db:link> property for more information on the precise error that occurred.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="TransactionStatus-enum">
<db:title>enum QInAppTransaction::TransactionStatus</db:title>
<db:para>This enum type is used to specify the status of the transaction.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinapptransaction.xml">QInAppTransaction</db:link></db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The transaction status has not been set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinapptransaction.xml">QInAppTransaction</db:link></db:emphasis>::PurchaseApproved</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The purchase was successfully completed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinapptransaction.xml">QInAppTransaction</db:link></db:emphasis>::PurchaseFailed</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The purchase was not completed for some reason. This could be because the user canceled the transaction, but it could also for example be caused by a missing network connection.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinapptransaction.xml">QInAppTransaction</db:link></db:emphasis>::PurchaseRestored</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The product has previously been purchased and the purchase has now been restored as a result of calling <db:link xlink:href="qinappstore.xml#restorePurchases">QInAppStore::restorePurchases</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="errorString-prop">
<db:title>[read-only] errorString : const QString</db:title>
<db:para>This property holds a string describing the error if the transaction failed due to an error. The contents of the error string is platform-specific.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">errorString</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinapptransaction.xml#failureReason-prop">failureReason</db:link></db:member>
<db:member><db:link xlink:href="qinapptransaction.xml#status-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="failureReason-prop">
<db:title>[read-only] failureReason : const FailureReason</db:title>
<db:para>This property holds the reason for the failure if the transaction's status is <db:link xlink:href="qinapptransaction.xml#TransactionStatus-enum">PurchaseFailed</db:link>. If the purchase was canceled by the user, the failure reason will be <db:link xlink:href="qinapptransaction.xml#FailureReason-enum">CanceledByUser</db:link>. If the purchase failed due to an error, it will be <db:link xlink:href="qinapptransaction.xml#FailureReason-enum">ErrorOccurred</db:link>. If the purchase did not fail, the failure reason will be <db:link xlink:href="qinapptransaction.xml#FailureReason-enum">NoFailure</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type><db:link xlink:href="qinapptransaction.xml#FailureReason-enum">QInAppTransaction::FailureReason</db:link></db:type> <db:emphasis role="bold">failureReason</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinapptransaction.xml#errorString-prop">errorString</db:link></db:member>
<db:member><db:link xlink:href="qinapptransaction.xml#status-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="orderId-prop">
<db:title>[read-only] orderId : const QString</db:title>
<db:para>This property holds a unique identifier for this transaction. This value may be an empty string if no transaction was registered (for example for canceled purchases).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">orderId</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="product-prop">
<db:title>[read-only] product : QInAppProduct * const</db:title>
<db:para>This property holds the product which is the object of this transaction.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qinappproduct.xml">QInAppProduct</db:link></db:type> *<db:emphasis role="bold">product</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : const TransactionStatus</db:title>
<db:para>This property holds the status of the transaction. If the purchase was successfully completed, the status will be <db:link xlink:href="qinapptransaction.xml#TransactionStatus-enum">PurchaseApproved</db:link>. If the purchase failed or was unsuccessful then the status will be <db:link xlink:href="qinapptransaction.xml#TransactionStatus-enum">PurchaseFailed</db:link>. If the transaction was restored as a result of calling <db:link xlink:href="qinappstore.xml#restorePurchases">QInAppStore::restorePurchases</db:link>() then the status will be <db:link xlink:href="qinapptransaction.xml#TransactionStatus-enum">PurchaseRestored</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qinapptransaction.xml#TransactionStatus-enum">QInAppTransaction::TransactionStatus</db:link></db:type> <db:emphasis role="bold">status</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="timestamp-prop">
<db:title>[read-only] timestamp : const QDateTime</db:title>
<db:para>This property holds the timestamp of the transaction. The timestamp can be invalid if there is no valid transaction, for example if the user canceled the purchase.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:type> <db:emphasis role="bold">timestamp</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinapptransaction.xml#orderId-prop">orderId</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="finalize">
<db:title>[pure virtual] void QInAppTransaction::finalize()</db:title>
<db:para>Call this when the application has finished performing all necessary reactions to the purchase. If the status is <db:link xlink:href="qinapptransaction.xml#TransactionStatus-enum">PurchaseApproved</db:link>, the application should store the information about the transaction in a safe way before finalizing it. All transactions should be finalized.</db:para>
</db:section>
<db:section xml:id="platformProperty">
<db:title>[virtual] QString QInAppTransaction::platformProperty(const QString &amp;<db:emphasis>propertyName</db:emphasis>) const</db:title>
<db:para>Returns the platform-specific property given by <db:code role="parameter">propertyName</db:code>.</db:para>
<db:para>The following properties are available on Google Play:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>AndroidSignature: The signature of the transaction, as given by the private key for the application.</db:para>
</db:listitem>
<db:listitem>
<db:para>AndroidPurchaseData: The purchase data returned by the Google Play store.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>These properties can be used to verify the purchase using the public key of your application. It is also possible to have the back-end verify the purchases by passing in the public key before registering products, using <db:link xlink:href="qinappstore.xml#setPlatformProperty">QInAppStore::setPlatformProperty</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
