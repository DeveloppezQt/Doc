<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPropertyAnimation Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> class animates Qt properties.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPropertyAnimation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qvariantanimation.xml" xlink:role="class">QVariantAnimation</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPropertyAnimation is part of <db:simplelist><db:member><db:link xlink:href="animation.xml">Animation Framework</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> interpolates over <db:link xlink:href="properties.xml">Qt properties</db:link>. As property values are stored in <db:link xlink:href="qvariant.xml">QVariant</db:link>s, the class inherits <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link>, and supports animation of the same <db:link xlink:href="qmetatype.xml#Type-enum">meta types</db:link> as its super class.</db:para>
<db:para>A class declaring properties must be a <db:link xlink:href="qobject.xml">QObject</db:link>. To make it possible to animate a property, it must provide a setter (so that <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> can set the property's value). Note that this makes it possible to animate many of Qt's widgets. Let's look at an example:</db:para>
<db:programlisting language="cpp">#include &lt;QApplication&gt;
#include &lt;QPushButton&gt;
#include &lt;QPropertyAnimation&gt;

class MyButtonWidget : public QWidget
{
public:
    MyButtonWidget(QWidget *parent = nullptr);
};

MyButtonWidget::MyButtonWidget(QWidget *parent) : QWidget(parent)
{
    QPushButton *button = new QPushButton(tr(&quot;Animated Button&quot;), this);
    QPropertyAnimation *anim = new QPropertyAnimation(button, &quot;pos&quot;, this);
    anim-&gt;setDuration(10000);
    anim-&gt;setStartValue(QPoint(0, 0));
    anim-&gt;setEndValue(QPoint(100, 250));
    anim-&gt;start();
}

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    MyButtonWidget buttonAnimWidget;
    buttonAnimWidget.resize(QSize(800, 600));
    buttonAnimWidget.show();
    return a.exec();
}
</db:programlisting>
<db:note>
<db:para>You can also control an animation's lifespan by choosing a <db:link xlink:href="qabstractanimation.xml#DeletionPolicy-enum">delete policy</db:link> while starting the animation.</db:para>
</db:note>
<db:para>The property name and the <db:link xlink:href="qobject.xml">QObject</db:link> instance of which property should be animated are passed to the constructor. You can then specify the start and end value of the property. The procedure is equal for properties in classes you have implemented yourselfâ€“just check with <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> that your <db:link xlink:href="qvariant.xml">QVariant</db:link> type is supported.</db:para>
<db:para>The <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> class description explains how to set up the animation in detail. Note, however, that if a start value is not set, the property will start at the value it had when the <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> instance was created.</db:para>
<db:para><db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> works like a charm on its own. For complex animations that, for instance, contain several objects, <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link> is provided. An animation group is an animation that can contain other animations, and that can manage when its animations are played. Look at <db:link xlink:href="qparallelanimationgroup.xml">QParallelAnimationGroup</db:link> for an example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link></db:member>
<db:member><db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link></db:member>
<db:member><db:link xlink:href="animation-overview.xml">The Animation Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="propertyName-prop">
<db:title>[bindable] propertyName : QByteArray</db:title>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the target property name for this animation</db:para>
<db:para>This property defines the target property name for this animation. The property name is required for the animation to operate.</db:para>
</db:section>
<db:section xml:id="targetObject-prop">
<db:title>[bindable] targetObject : QObject*</db:title>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the target <db:link xlink:href="qobject.xml">QObject</db:link> for this animation.</db:para>
<db:para>This property defines the target <db:link xlink:href="qobject.xml">QObject</db:link> for this animation.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPropertyAnimation">
<db:title>QPropertyAnimation::QPropertyAnimation(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Construct a <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> object. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="QPropertyAnimation-1">
<db:title>QPropertyAnimation::QPropertyAnimation(QObject *<db:emphasis>target</db:emphasis>, const QByteArray &amp;<db:emphasis>propertyName</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Construct a <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> object. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor. The animation changes the property <db:code role="parameter">propertyName</db:code> on <db:code role="parameter">target</db:code>. The default duration is 250ms.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpropertyanimation.xml#targetObject-prop">targetObject</db:link></db:member>
<db:member><db:link xlink:href="qpropertyanimation.xml#propertyName-prop">propertyName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QPropertyAnimation">
<db:title>[virtual noexcept] QPropertyAnimation::~QPropertyAnimation()</db:title>
<db:para>Destroys the <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link> instance.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QPropertyAnimation::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qvariantanimation.xml#event" role="function">QVariantAnimation::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="updateCurrentValue">
<db:title>[override virtual protected] void QPropertyAnimation::updateCurrentValue(const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qvariantanimation.xml#updateCurrentValue" role="function">QVariantAnimation::updateCurrentValue(const QVariant &amp;value)</db:link>.</db:para>
<db:para>This virtual function is called by <db:link xlink:href="qvariantanimation.xml">QVariantAnimation</db:link> whenever the current value changes. <db:code role="parameter">value</db:code> is the new, updated value. It updates the current value of the property on the target object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvariantanimation.xml#currentValue-prop">currentValue</db:link></db:member>
<db:member><db:link xlink:href="qabstractanimation.xml#currentTime-prop">currentTime</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateState">
<db:title>[override virtual protected] void QPropertyAnimation::updateState(QAbstractAnimation::State <db:emphasis>newState</db:emphasis>, QAbstractAnimation::State <db:emphasis>oldState</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qvariantanimation.xml#updateState" role="function">QVariantAnimation::updateState(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</db:link>.</db:para>
<db:para>If the startValue is not defined when the state of the animation changes from Stopped to Running, the current property value is used as the initial value for the animation.</db:para>
</db:section>
</db:section>
</db:article>
