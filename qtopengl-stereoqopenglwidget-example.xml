<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLWidget Stereoscopic Rendering Example</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to create a minimal <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link> based application with stereoscopic rendering support.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:note>
<db:para>Support for stereoscopic rendering has certain hardware requirements, such as, a graphics card with stereo support, 3D glasses and specific monitors.</db:para>
</db:note>
<db:note>
<db:para>This example renders two images to two separate buffers. When you view the images through 3D glasses, they give a 3D holographic effect.</db:para>
</db:note>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/stereoexample-leftbuffer.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The above image is what will be rendered to the left buffer.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/stereoexample-rightbuffer.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The above image is what will be rendered to the right buffer.</db:para>
<db:section xml:id="setting-the-correct-surface-flag">
<db:title>Setting the correct surface flag</db:title>
<db:para>To enable stereoscopic rendering you need to set the flag <db:link xlink:href="qsurfaceformat.xml#FormatOption-enum">QSurfaceFormat::StereoBuffers</db:link> globally. Just doing it on the widget is not enough because of how the flag is handled internally. The safest is to do it on QSurfaceFormat::SetDefaultFormat prior to starting the application.</db:para>
<db:programlisting language="cpp">QSurfaceFormat format;
format.setDepthBufferSize(24);
format.setStencilBufferSize(8);

// Enable stereoscopic rendering support
format.setStereo(true);

QSurfaceFormat::setDefaultFormat(format);
</db:programlisting>
</db:section>
<db:section xml:id="rendering-twice">
<db:title>Rendering twice</db:title>
<db:para>After <db:link xlink:href="qsurfaceformat.xml#FormatOption-enum">QSurfaceFormat::StereoBuffers</db:link> is set, then paintGL() will be called twice, once for each buffer. In paintGL() you can call currentTargetBuffer() to query which TargetBuffer is currently active.</db:para>
<db:para>In the following snippet we slightly translate the matrix to not render the vertices on top of each other. This is a simple example just too see that if the necessary support is there, at runtime you should see two objects, one on the left and one on the right.</db:para>
<db:programlisting language="cpp">// Slightly translate the model, so that there's a visible difference in each buffer.
QMatrix4x4 modelview;
if (currentTargetBuffer() == QOpenGLWidget::LeftBuffer)
    modelview.translate(-0.4f, 0.0f, 0.0f);
else if (currentTargetBuffer() == QOpenGLWidget::RightBuffer)
    modelview.translate(0.4f, 0.0f, 0.0f);
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/opengl/stereoqopenglwidget?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
