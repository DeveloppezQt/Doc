<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Creating Stacked Bar Charts</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to create a simple stacked bar chart.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:note>
<db:para>This is part of the <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> example.</db:para>
</db:note>
<db:para>The stacked bar chart shows the data in sets as bars stacked on top of each other. The stacking is done per category. The example shows how to create a simple stacked bar chart. Stacked bar chart shows the data in sets as bars that are stacked on top of each other. The stacking is done per category. Creating a stacked bar chart is just like creating a regular <db:link xlink:href="qtcharts-barchart-example.xml">bar chart</db:link>, except that for a stacked bar chart, we use the <db:link xlink:href="qstackedbarseries.xml">QStackedBarSeries</db:link> API instead of <db:link xlink:href="qbarseries.xml">QBarSeries</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_stackedbarchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The barsets are used in same way in all barcharts. To illustrate the difference between various barcharts, we use same data in all examples. Data, which the barchart visualizes, is defined by the <db:link xlink:href="qbarset.xml">QBarSet</db:link> instances. Here we create the sets and append data to them. The data is appended here with &lt;&lt; operator. Alternatively the append method could be used.</db:para>
<db:programlisting language="cpp">auto set0 = new QBarSet(&quot;Jane&quot;);
auto set1 = new QBarSet(&quot;John&quot;);
auto set2 = new QBarSet(&quot;Axel&quot;);
auto set3 = new QBarSet(&quot;Mary&quot;);
auto set4 = new QBarSet(&quot;Samantha&quot;);

*set0 &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; 2 &amp;lt;&amp;lt; 3 &amp;lt;&amp;lt; 4 &amp;lt;&amp;lt; 5 &amp;lt;&amp;lt; 6;
*set1 &amp;lt;&amp;lt; 5 &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; 4 &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; 7;
*set2 &amp;lt;&amp;lt; 3 &amp;lt;&amp;lt; 5 &amp;lt;&amp;lt; 8 &amp;lt;&amp;lt; 13 &amp;lt;&amp;lt; 8 &amp;lt;&amp;lt; 5;
*set3 &amp;lt;&amp;lt; 5 &amp;lt;&amp;lt; 6 &amp;lt;&amp;lt; 7 &amp;lt;&amp;lt; 3 &amp;lt;&amp;lt; 4 &amp;lt;&amp;lt; 5;
*set4 &amp;lt;&amp;lt; 9 &amp;lt;&amp;lt; 7 &amp;lt;&amp;lt; 5 &amp;lt;&amp;lt; 3 &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; 2;
</db:programlisting>
<db:para>We create the series and append the barsets to it. The series takes ownership of the barsets. The series groups the data from sets to categories. The first values of each set are grouped together in the first category, the second values in the second category etc.</db:para>
<db:programlisting language="cpp">auto series = new QStackedBarSeries;
series-&amp;gt;append(set0);
series-&amp;gt;append(set1);
series-&amp;gt;append(set2);
series-&amp;gt;append(set3);
series-&amp;gt;append(set4);
</db:programlisting>
<db:para>Here we create the chart object and add the series to it. We set the title for the chart with setTitle, and then turn on animations of the series by calling setAnimationOptions(<db:link xlink:href="qchart.xml#AnimationOption-enum">QChart::SeriesAnimations</db:link>).</db:para>
<db:programlisting language="cpp">auto chart = new QChart;
chart-&amp;gt;addSeries(series);
chart-&amp;gt;setTitle(&quot;Simple Stacked Bar Chart&quot;);
chart-&amp;gt;setAnimationOptions(QChart::SeriesAnimations);
</db:programlisting>
<db:para>To have the categories displayed on an axis, we need to create a <db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link> first. Here we create a category axis with a list of categories and add it to the chart aligned to bottom, acting as the x-axis. The chart takes ownership of the axis. For the y-axis we use a value axis, aligned to the left-hand side.</db:para>
<db:programlisting language="cpp">QStringList categories {&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;};
auto axisX = new QBarCategoryAxis;
axisX-&amp;gt;append(categories);
chart-&amp;gt;addAxis(axisX, Qt::AlignBottom);
series-&amp;gt;attachAxis(axisX);
auto axisY = new QValueAxis;
chart-&amp;gt;addAxis(axisY, Qt::AlignLeft);
series-&amp;gt;attachAxis(axisY);
</db:programlisting>
<db:para>We also want to show the legend. To do so, we get the legend pointer from the chart and set it to visible. We also place the legend to the bottom of the chart by setting its alignment to <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link>.</db:para>
<db:programlisting language="cpp">chart-&amp;gt;legend()-&amp;gt;setVisible(true);
chart-&amp;gt;legend()-&amp;gt;setAlignment(Qt::AlignBottom);
</db:programlisting>
<db:para>Finally, we add the chart onto a view.</db:para>
<db:programlisting language="cpp">createDefaultChartView(chart);
</db:programlisting>
<db:para>The chart is ready to be shown.</db:para>
</db:article>
