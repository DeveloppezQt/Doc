<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>StackedBarChart Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a simple stacked bar chart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The stacked bar chart shows the data in sets as bars stacked on top of each other. The stacking is done per category. The example shows how to create a simple stacked bar chart. Stacked bar chart shows the data in sets as bars that are stacked on top of each other. The stacking is done per category. Creating a stacked bar chart is just like creating a regular <db:link xlink:href="qtcharts-barchart-example.xml">bar chart</db:link>, except that for a stacked bar chart, we use the QStackedBarSeries API instead of QBarSeries.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_stackedbarchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The barsets are used in same way in all barcharts. To illustrate the difference between various barcharts, we use same data in all examples. Data, which the barchart visualizes, is defined by the QBarSet instances. Here we create the sets and append data to them. The data is appended here with &lt;&lt; operator. Alternatively the append method could be used.</db:para>
<db:programlisting language="cpp">    QBarSet *set0 = new QBarSet(&quot;Jane&quot;);
    QBarSet *set1 = new QBarSet(&quot;John&quot;);
    QBarSet *set2 = new QBarSet(&quot;Axel&quot;);
    QBarSet *set3 = new QBarSet(&quot;Mary&quot;);
    QBarSet *set4 = new QBarSet(&quot;Samantha&quot;);

    *set0 &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 &lt;&lt; 4 &lt;&lt; 5 &lt;&lt; 6;
    *set1 &lt;&lt; 5 &lt;&lt; 0 &lt;&lt; 0 &lt;&lt; 4 &lt;&lt; 0 &lt;&lt; 7;
    *set2 &lt;&lt; 3 &lt;&lt; 5 &lt;&lt; 8 &lt;&lt; 13 &lt;&lt; 8 &lt;&lt; 5;
    *set3 &lt;&lt; 5 &lt;&lt; 6 &lt;&lt; 7 &lt;&lt; 3 &lt;&lt; 4 &lt;&lt; 5;
    *set4 &lt;&lt; 9 &lt;&lt; 7 &lt;&lt; 5 &lt;&lt; 3 &lt;&lt; 1 &lt;&lt; 2;
</db:programlisting>
<db:para>We create the series and append the barsets to it. The series takes ownership of the barsets. The series groups the data from sets to categories. The first values of each set are grouped together in the first category, the second values in the second category etc.</db:para>
<db:programlisting language="cpp">    QStackedBarSeries *series = new QStackedBarSeries();
    series-&gt;append(set0);
    series-&gt;append(set1);
    series-&gt;append(set2);
    series-&gt;append(set3);
    series-&gt;append(set4);
</db:programlisting>
<db:para>Here we create the chart object and add the series to it. We set the title for the chart with setTitle, and then turn on animations of the series by calling setAnimationOptions(QChart::SeriesAnimations).</db:para>
<db:programlisting language="cpp">    QChart *chart = new QChart();
    chart-&gt;addSeries(series);
    chart-&gt;setTitle(&quot;Simple stackedbarchart example&quot;);
    chart-&gt;setAnimationOptions(QChart::SeriesAnimations);
</db:programlisting>
<db:para>To have categories displayed on the axis, we need to create a QBarCategoryAxis. Here we create a category axis with list of categories and set it to be the x-axis of the chart. The chart takes ownership of the axis. For the y-axis we use default axis, which is created and scaled to series data by calling createDefaultAxes of the chart. Note that the call for createDefaultAxes must be before we set the category axis. Otherwise the default axis will override the category axis.</db:para>
<db:programlisting language="cpp">    QStringList categories;
    categories &lt;&lt; &quot;Jan&quot; &lt;&lt; &quot;Feb&quot; &lt;&lt; &quot;Mar&quot; &lt;&lt; &quot;Apr&quot; &lt;&lt; &quot;May&quot; &lt;&lt; &quot;Jun&quot;;
    QBarCategoryAxis *axis = new QBarCategoryAxis();
    axis-&gt;append(categories);
    chart-&gt;createDefaultAxes();
    chart-&gt;setAxisX(axis, series);
</db:programlisting>
<db:para>We also want to show the legend. To do so, we get the legend pointer from the chart and set it to visible. We also place the legend to the bottom of the chart by setting its alignment to <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link>.</db:para>
<db:programlisting language="cpp">    chart-&gt;legend()-&gt;setVisible(true);
    chart-&gt;legend()-&gt;setAlignment(Qt::AlignBottom);
</db:programlisting>
<db:para>Finally, we add the chart onto a view. We also turn on the antialiasing for the chartView.</db:para>
<db:programlisting language="cpp">    QChartView *chartView = new QChartView(chart);
    chartView-&gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>The chart is ready to be shown. We set the chart to be the central widget of the window. We also set the size for the chart window and show it.</db:para>
<db:programlisting language="cpp">    QMainWindow window;
    window.setCentralWidget(chartView);
    window.resize(420, 300);
    window.show();
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="stackedbarchart/main.cpp">stackedbarchart/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="stackedbarchart/stackedbarchart.pro">stackedbarchart/stackedbarchart.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
