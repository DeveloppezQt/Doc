<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QInputMethod Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qinputmethod.xml">QInputMethod</db:link> class provides access to the active text input method.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QInputMethod</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qinputmethod.xml">QInputMethod</db:link> is used by the text editors for integrating to the platform text input methods and more commonly by application views for querying various text input method-related information like virtual keyboard visibility and keyboard dimensions.</db:para>
<db:para>Qt Quick also provides access to <db:link xlink:href="qinputmethod.xml">QInputMethod</db:link> in QML through <db:link xlink:href="">Qt global object</db:link> as <db:code>Qt.inputMethod</db:code> property.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Action-enum">
<db:title>enum QInputMethod::Action</db:title>
<db:enumsynopsis>
<db:enumname>Action</db:enumname>
<db:enumitem>
<db:enumidentifier>Click</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ContextMenu</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Indicates the kind of action performed by the user.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputmethod.xml">QInputMethod</db:link></db:emphasis>::Click</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A normal click/tap</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputmethod.xml">QInputMethod</db:link></db:emphasis>::ContextMenu</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A context menu click/tap (e.g. right-button or tap-and-hold)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml#invokeAction">invokeAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="anchorRectangle-prop">
<db:title>[read-only] anchorRectangle : const QRectF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRectF</db:type>
<db:varname>anchorRectangle</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">anchorRectangle</db:synopsisinfo>
<db:synopsisinfo role="notifier">anchorRectangleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Input item's anchor rectangle in window coordinates.</db:para>
<db:para>Anchor rectangle is often used by various text editing controls like text prediction popups for following the text selection.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> <db:emphasis role="bold">anchorRectangle</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">anchorRectangleChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="animating-prop">
<db:title>[read-only] animating : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>animating</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isAnimating</db:synopsisinfo>
<db:synopsisinfo role="notifier">animatingChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>True when the virtual keyboard is being opened or closed.</db:para>
<db:para>Animating is false when keyboard is fully open or closed. When <db:code>animating</db:code> is <db:code>true</db:code> and <db:code>visibility</db:code> is <db:code>true</db:code> keyboard is being opened. When <db:code>animating</db:code> is <db:code>true</db:code> and <db:code>visibility</db:code> is false keyboard is being closed.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isAnimating</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">animatingChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="cursorRectangle-prop">
<db:title>[read-only] cursorRectangle : const QRectF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRectF</db:type>
<db:varname>cursorRectangle</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cursorRectangle</db:synopsisinfo>
<db:synopsisinfo role="notifier">cursorRectangleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Input item's cursor rectangle in window coordinates.</db:para>
<db:para>Cursor rectangle is often used by various text editing controls like text prediction popups for following the text being typed.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> <db:emphasis role="bold">cursorRectangle</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">cursorRectangleChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="inputDirection-prop">
<db:title>[read-only] inputDirection : const Qt::LayoutDirection</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::LayoutDirection</db:type>
<db:varname>inputDirection</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">inputDirection</db:synopsisinfo>
<db:synopsisinfo role="notifier">inputDirectionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Current input direction.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LayoutDirection</db:link></db:type> <db:emphasis role="bold">inputDirection</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">inputDirectionChanged</db:emphasis>(<db:type><db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LayoutDirection</db:link></db:type> <db:emphasis>newDirection</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="inputItemClipRectangle-prop">
<db:title>[read-only] inputItemClipRectangle : const QRectF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRectF</db:type>
<db:varname>inputItemClipRectangle</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">inputItemClipRectangle</db:synopsisinfo>
<db:synopsisinfo role="notifier">inputItemClipRectangleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Input item's clipped rectangle in window coordinates.</db:para>
<db:para>The clipped input rectangle is often used by various input methods to determine how much screen real estate is available for the input method (e.g. Virtual Keyboard).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> <db:emphasis role="bold">inputItemClipRectangle</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">inputItemClipRectangleChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="keyboardRectangle-prop">
<db:title>[read-only] keyboardRectangle : const QRectF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRectF</db:type>
<db:varname>keyboardRectangle</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">keyboardRectangle</db:synopsisinfo>
<db:synopsisinfo role="notifier">keyboardRectangleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Virtual keyboard's geometry in window coordinates.</db:para>
<db:para>This might be an empty rectangle if it is not possible to know the geometry of the keyboard. This is the case for a floating keyboard on android.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> <db:emphasis role="bold">keyboardRectangle</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">keyboardRectangleChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="locale-prop">
<db:title>[read-only] locale : const QLocale</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QLocale</db:type>
<db:varname>locale</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">locale</db:synopsisinfo>
<db:synopsisinfo role="notifier">localeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Current input locale.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> <db:emphasis role="bold">locale</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">localeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="visible-prop">
<db:title>[read-only] visible : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>visible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isVisible</db:synopsisinfo>
<db:synopsisinfo role="notifier">visibleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Virtual keyboard's visibility on the screen</db:para>
<db:para>Input method visibility remains false for devices with no virtual keyboards.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isVisible</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">visibleChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml#show">show</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethod.xml#hide">hide</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="commit">
<db:title>void QInputMethod::commit()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>commit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void commit()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Commits the word user is currently composing to the editor. The function is mostly needed by the input methods with text prediction features and by the methods where the script used for typing characters is different from the script that actually gets appended to the editor. Any kind of action that interrupts the text composing needs to flush the composing state by calling the commit() function, for example when the cursor is moved elsewhere.</db:para>
</db:section>
<db:section xml:id="hide">
<db:title>void QInputMethod::hide()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hide</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hide()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Requests virtual keyboard to close.</db:para>
<db:para>Normally applications should not need to call this function, keyboard should automatically close when the text editor loses focus, for example when the parent view is closed.</db:para>
</db:section>
<db:section xml:id="inputItemRectangle">
<db:title>[since 5.1] QRectF QInputMethod::inputItemRectangle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>inputItemRectangle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF inputItemRectangle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the input item's geometry in input item coordinates.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml#setInputItemRectangle">setInputItemRectangle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputItemTransform">
<db:title>QTransform QInputMethod::inputItemTransform() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>inputItemTransform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform inputItemTransform() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the transformation from input item coordinates to the window coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml#setInputItemTransform">setInputItemTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invokeAction">
<db:title>void QInputMethod::invokeAction(QInputMethod::Action <db:emphasis>a</db:emphasis>, int <db:emphasis>cursorPosition</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>invokeAction</db:methodname>
<db:methodparam>
<db:type>QInputMethod::Action</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>cursorPosition</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void invokeAction(QInputMethod::Action a, int cursorPosition)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Called by the input item when the word currently being composed is tapped by the user, as indicated by the action <db:code role="parameter">a</db:code> and the given <db:code role="parameter">cursorPosition</db:code>. Input methods often use this information to offer more word suggestions to the user.</db:para>
</db:section>
<db:section xml:id="queryFocusObject">
<db:title>[static] QVariant QInputMethod::queryFocusObject(Qt::InputMethodQuery <db:emphasis>query</db:emphasis>, const QVariant &amp;<db:emphasis>argument</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>queryFocusObject</db:methodname>
<db:methodparam>
<db:type>Qt::InputMethodQuery</db:type>
<db:parameter>query</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>argument</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant queryFocusObject(Qt::InputMethodQuery query, const QVariant &amp;argument)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Send <db:code role="parameter">query</db:code> to the current focus object with parameters <db:code role="parameter">argument</db:code> and return the result.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>void QInputMethod::reset()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the input method state. For example, a text editor normally calls this method before inserting a text to make widget ready to accept a text.</db:para>
<db:para>Input method resets automatically when the focused editor changes.</db:para>
</db:section>
<db:section xml:id="setInputItemRectangle">
<db:title>[since 5.1] void QInputMethod::setInputItemRectangle(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInputItemRectangle</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInputItemRectangle(const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the input item's geometry to be <db:code role="parameter">rect</db:code>, in input item coordinates. This needs to be updated by the focused window like QQuickCanvas whenever item is moved inside the scene, or focus is changed.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml#inputItemRectangle">inputItemRectangle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setInputItemTransform">
<db:title>void QInputMethod::setInputItemTransform(const QTransform &amp;<db:emphasis>transform</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInputItemTransform</db:methodname>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>transform</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInputItemTransform(const QTransform &amp;transform)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the transformation from input item coordinates to window coordinates to be <db:code role="parameter">transform</db:code>. Item transform needs to be updated by the focused window like QQuickCanvas whenever item is moved inside the scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml#inputItemTransform">inputItemTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>void QInputMethod::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVisible</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVisible(bool visible)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Controls the keyboard visibility. Equivalent to calling <db:link xlink:href="qinputmethod.xml#show">show</db:link>() (if <db:code role="parameter">visible</db:code> is <db:code>true</db:code>) or <db:link xlink:href="qinputmethod.xml#hide">hide</db:link>() (if <db:code role="parameter">visible</db:code> is <db:code>false</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml#visible-prop">isVisible</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethod.xml#show">show</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethod.xml#hide">hide</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="show">
<db:title>void QInputMethod::show()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>show</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void show()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Requests virtual keyboard to open. If the platform doesn't provide virtual keyboard the visibility remains false.</db:para>
<db:para>Normally applications should not need to call this function, keyboard should automatically open when the text editor gains focus.</db:para>
</db:section>
<db:section xml:id="update">
<db:title>void QInputMethod::update(Qt::InputMethodQueries <db:emphasis>queries</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>update</db:methodname>
<db:methodparam>
<db:type>Qt::InputMethodQueries</db:type>
<db:parameter>queries</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void update(Qt::InputMethodQueries queries)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Called by the input item to inform the platform input methods when there has been state changes in editor's input method query attributes. When calling the function <db:code role="parameter">queries</db:code> parameter has to be used to tell what has changes, which input method can use to make queries for attributes it's interested with <db:link xlink:href="qinputmethodqueryevent.xml">QInputMethodQueryEvent</db:link>.</db:para>
<db:para>In particular calling update whenever the cursor position changes is important as that often causes other query attributes like surrounding text and text selection to change as well. The attributes that often change together with cursor position have been grouped in <db:link xlink:href="qt.xml#InputMethodQuery-enum">Qt::ImQueryInput</db:link> value for convenience.</db:para>
</db:section>
</db:section>
</db:article>
