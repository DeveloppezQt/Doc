<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QInputMethod Class</db:title>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qinputmethod.xml">QInputMethod</db:link> class provides access to the active text input method.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QInputMethod</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qinputmethod.xml">QInputMethod</db:link> is used by the text editors for integrating to the platform text input methods and more commonly by application views for querying various text input method-related information like virtual keyboard visibility and keyboard dimensions.</db:para>
<db:para>Qt Quick also provides access to <db:link xlink:href="qinputmethod.xml">QInputMethod</db:link> in QML through <db:link xlink:href="">Qt global object</db:link> as <db:code>Qt.inputMethod</db:code> property.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Action-enum">
<db:title>enum QInputMethod::Action</db:title>
<db:para>Indicates the kind of action performed by the user.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputmethod.xml">QInputMethod</db:link></db:emphasis>::Click</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A normal click/tap</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputmethod.xml">QInputMethod</db:link></db:emphasis>::ContextMenu</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A context menu click/tap (e.g. right-button or tap-and-hold)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml#invokeAction">invokeAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="commit">
<db:title>void QInputMethod::commit()</db:title>
<db:para>Commits the word user is currently composing to the editor. The function is mostly needed by the input methods with text prediction features and by the methods where the script used for typing characters is different from the script that actually gets appended to the editor. Any kind of action that interrupts the text composing needs to flush the composing state by calling the commit() function, for example when the cursor is moved elsewhere.</db:para>
</db:section>
<db:section xml:id="hide">
<db:title>void QInputMethod::hide()</db:title>
<db:para>Requests virtual keyboard to close.</db:para>
<db:para>Normally applications should not need to call this function, keyboard should automatically close when the text editor loses focus, for example when the parent view is closed.</db:para>
</db:section>
<db:section xml:id="inputItemTransform">
<db:title>QTransform QInputMethod::inputItemTransform() const</db:title>
<db:para>Returns the transformation from input item coordinates to the window coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml#setInputItemTransform">setInputItemTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invokeAction">
<db:title>void QInputMethod::invokeAction(QInputMethod::Action <db:emphasis>a</db:emphasis>, int <db:emphasis>cursorPosition</db:emphasis>)</db:title>
<db:para>Called by the input item when the word currently being composed is tapped by the user, as indicated by the action <db:code role="parameter">a</db:code> and the given <db:code role="parameter">cursorPosition</db:code>. Input methods often use this information to offer more word suggestions to the user.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>void QInputMethod::reset()</db:title>
<db:para>Resets the input method state. For example, a text editor normally calls this method before inserting a text to make widget ready to accept a text.</db:para>
<db:para>Input method resets automatically when the focused editor changes.</db:para>
</db:section>
<db:section xml:id="setInputItemTransform">
<db:title>void QInputMethod::setInputItemTransform(const QTransform &amp;<db:emphasis>transform</db:emphasis>)</db:title>
<db:para>Sets the transformation from input item coordinates to window coordinates to be <db:code role="parameter">transform</db:code>. Item transform needs to be updated by the focused window like QQuickCanvas whenever item is moved inside the scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml#inputItemTransform">inputItemTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>void QInputMethod::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:para>Controls the keyboard visibility. Equivalent to calling <db:link xlink:href="qinputmethod.xml#show">show</db:link>() (if <db:code role="parameter">visible</db:code> is <db:code>true</db:code>) or <db:link xlink:href="qinputmethod.xml#hide">hide</db:link>() (if <db:code role="parameter">visible</db:code> is <db:code>false</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml#show">show</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethod.xml#hide">hide</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="show">
<db:title>void QInputMethod::show()</db:title>
<db:para>Requests virtual keyboard to open. If the platform doesn't provide virtual keyboard the visibility remains false.</db:para>
<db:para>Normally applications should not need to call this function, keyboard should automatically open when the text editor gains focus.</db:para>
</db:section>
<db:section xml:id="update">
<db:title>void QInputMethod::update(Qt::InputMethodQueries <db:emphasis>queries</db:emphasis>)</db:title>
<db:para>Called by the input item to inform the platform input methods when there has been state changes in editor's input method query attributes. When calling the function <db:code role="parameter">queries</db:code> parameter has to be used to tell what has changes, which input method can use to make queries for attributes it's interested with <db:link xlink:href="qinputmethodqueryevent.xml">QInputMethodQueryEvent</db:link>.</db:para>
<db:para>In particular calling update whenever the cursor position changes is important as that often causes other query attributes like surrounding text and text selection to change as well. The attributes that often change together with cursor position have been grouped in <db:link xlink:href="qt.xml#InputMethodQuery-enum">Qt::ImQueryInput</db:link> value for convenience.</db:para>
</db:section>
</db:section>
</db:article>
