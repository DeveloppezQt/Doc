<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Image Elements</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a collection of QML examples relating to image types.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-imageelements-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Image Elements</db:emphasis> is a collection of small QML examples relating to image types. For more information, visit <db:link xlink:href="qtquick-usecase-visual.xml">Use Case - Visual Elements In QML</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="scaling-with-borderimage">
<db:title>Scaling with BorderImage</db:title>
<db:para><db:emphasis>BorderImage</db:emphasis> shows the various scaling modes of the <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link> type by setting its horizontalTileMode and verticalTileMode properties.</db:para>
</db:section>
<db:section xml:id="image-fill">
<db:title>Image Fill</db:title>
<db:para><db:emphasis>Image</db:emphasis> shows the various fill modes of the <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> type.</db:para>
</db:section>
<db:section xml:id="shadow-effects">
<db:title>Shadow Effects</db:title>
<db:para><db:emphasis>Shadows</db:emphasis> shows how to create a drop shadow effect for a rectangular item using a <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>:</db:para>
<db:programlisting language="qml">    BorderImage {
        anchors.fill: rectangle
        anchors { leftMargin: -6; topMargin: -6; rightMargin: -8; bottomMargin: -8 }
        border { left: 10; top: 10; right: 10; bottom: 10 }
        source: &quot;shadow.png&quot;
    }
</db:programlisting>
</db:section>
<db:section xml:id="sprite-animations-with-animatedsprite">
<db:title>Sprite Animations with AnimatedSprite</db:title>
<db:para><db:emphasis>AnimatedSprite</db:emphasis> shows how to display a simple animation using an <db:link xlink:href="qml-qtquick-animatedsprite.xml">AnimatedSprite</db:link> object:</db:para>
<db:programlisting language="qml">    AnimatedSprite {
        id: sprite
        anchors.centerIn: parent
        source: &quot;content/speaker.png&quot;
        frameCount: 60
        frameSync: true
        frameWidth: 170
        frameHeight: 170
        loops: 3
    }
</db:programlisting>
<db:para>The sprite animation will loop three times.</db:para>
</db:section>
<db:section xml:id="sprite-animations-with-spritesequence">
<db:title>Sprite Animations with SpriteSequence</db:title>
<db:para><db:emphasis>SpriteSequence</db:emphasis> demonstrates using a sprite sequence to draw an animated and interactive bear. The <db:link xlink:href="qml-qtquick-spritesequence.xml">SpriteSequence</db:link> object defines five different sprites. The bear is initially in a <db:emphasis>still</db:emphasis> state:</db:para>
<db:programlisting language="qml">        Sprite{
            name: &quot;still&quot;
            source: &quot;content/BearSheet.png&quot;
            frameCount: 1
            frameWidth: 256
            frameHeight: 256
            frameDuration: 100
            to: {&quot;still&quot;:1, &quot;blink&quot;:0.1, &quot;floating&quot;:0}
        }
</db:programlisting>
<db:para>When the scene is clicked, an animation sets the sprite sequence to the <db:emphasis>falling</db:emphasis> states and animates the bear's y property.</db:para>
<db:programlisting language="qml">    SequentialAnimation {
        id: anim
        ScriptAction { script: image.goalSprite = &quot;falling&quot;; }
        NumberAnimation { target: image; property: &quot;y&quot;; to: 480; duration: 12000; }
        ScriptAction { script: {image.goalSprite = &quot;&quot;; image.jumpTo(&quot;still&quot;);} }
        PropertyAction { target: image; property: &quot;y&quot;; value: 0 }
    }
</db:programlisting>
<db:para>At the end of the animation the bear is set back to its initial state.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/imageelements?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
