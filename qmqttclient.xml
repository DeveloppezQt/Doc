<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMqttClient Class</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmqttclient.xml">QMqttClient</db:link> class represents the central access communicating with an MQTT broker.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMqttClient</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += mqtt</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An MQTT client is a program or device that uses MQTT to create a network connection to an MQTT server, also called a <db:emphasis>broker</db:emphasis>. The connection request must contain a unique client identifier. Optionally, it can contain a Will Topic, Will Message, user name, and password.</db:para>
<db:para>Once a connection is created, a client can send messages that other clients might be interested in receiving, subscribe to request notifications on topics, unsubscribe to remove a request for notifications, and disconnect from the broker.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ClientError-enum">
<db:title>enum QMqttClient::ClientError</db:title>
<db:enumsynopsis>
<db:enumname>ClientError</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InvalidProtocolVersion</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IdRejected</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ServerUnavailable</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BadUsernameOrPassword</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotAuthorized</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TransportInvalid</db:enumidentifier>
<db:enumvalue>256</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ProtocolViolation</db:enumidentifier>
<db:enumvalue>257</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownError</db:enumidentifier>
<db:enumvalue>258</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Mqtt5SpecificError</db:enumidentifier>
<db:enumvalue>259</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type specifies the error state of a client.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::InvalidProtocolVersion</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The broker does not accept a connection using the specified protocol version.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::IdRejected</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The client ID is malformed. This might be related to its length.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::ServerUnavailable</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The network connection has been established, but the service is unavailable on the broker side.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::BadUsernameOrPassword</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The data in the username or password is malformed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::NotAuthorized</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The client is not authorized to connect.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::TransportInvalid</db:code></db:para>
</db:td>
<db:td><db:code>256</db:code></db:td>
<db:td>
<db:para>The underlying transport caused an error. For example, the connection might have been interrupted unexpectedly.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::ProtocolViolation</db:code></db:para>
</db:td>
<db:td><db:code>257</db:code></db:td>
<db:td>
<db:para>The client encountered a protocol violation, and therefore closed the connection.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>258</db:code></db:td>
<db:td>
<db:para>An unknown error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::Mqtt5SpecificError</db:code></db:para>
</db:td>
<db:td><db:code>259</db:code></db:td>
<db:td>
<db:para>The error is related to MQTT protocol level 5. A reason code might provide more details.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ClientState-enum">
<db:title>enum QMqttClient::ClientState</db:title>
<db:enumsynopsis>
<db:enumname>ClientState</db:enumname>
<db:enumitem>
<db:enumidentifier>Disconnected</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Connecting</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Connected</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type specifies the states a client can enter.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::Disconnected</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The client is disconnected from the broker.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::Connecting</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A connection request has been made, but the broker has not approved the connection yet.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::Connected</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The client is connected to the broker.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ProtocolVersion-enum">
<db:title>enum QMqttClient::ProtocolVersion</db:title>
<db:enumsynopsis>
<db:enumname>ProtocolVersion</db:enumname>
<db:enumitem>
<db:enumidentifier>MQTT_3_1</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MQTT_3_1_1</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MQTT_5_0</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies the protocol version of the MQTT standard to use during communication with a broker.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::MQTT_3_1</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>MQTT Standard 3.1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::MQTT_3_1_1</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>MQTT Standard 3.1.1, publicly referred to as version 4</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::MQTT_5_0</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>MQTT Standard 5.0</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="TransportType-enum">
<db:title>enum QMqttClient::TransportType</db:title>
<db:enumsynopsis>
<db:enumname>TransportType</db:enumname>
<db:enumitem>
<db:enumidentifier>IODevice</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AbstractSocket</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SecureSocket</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type specifies the connection method to be used to instantiate a connection to a broker.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::IODevice</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The transport uses a class based on a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::AbstractSocket</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The transport uses a class based on a <db:link xlink:href="qabstractsocket.xml">QAbstractSocket</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmqttclient.xml">QMqttClient</db:link></db:emphasis>::SecureSocket</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The transport uses a class based on a <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoKeepAlive-prop">
<db:title>[since 5.14] autoKeepAlive : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoKeepAlive</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoKeepAlive</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoKeepAlive</db:synopsisinfo>
<db:synopsisinfo role="notifier">autoKeepAliveChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the client will automatically manage keep alive messages to the server.</db:para>
<db:para>If this property is <db:code>true</db:code>, then the client will automatically send a ping message to the server at the <db:link xlink:href="qmqttclient.xml#keepAlive-prop">keepAlive</db:link> interval.</db:para>
<db:para>Otherwise, a user will have to manually invoke <db:link xlink:href="qmqttclient.xml#requestPing">requestPing</db:link> within the specified interval of the connection. If no ping has been sent within the interval, the server will disconnect.</db:para>
<db:para>The default of this property is <db:code>true</db:code>.</db:para>
<db:para>This property was introduced in Qt 5.14.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoKeepAlive</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoKeepAlive</db:emphasis>(<db:type>bool</db:type> <db:emphasis>autoKeepAlive</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">autoKeepAliveChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>autoKeepAlive</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttclient.xml#keepAlive-prop">keepAlive</db:link>()</db:member>
<db:member><db:link xlink:href="qmqttclient.xml#requestPing">requestPing</db:link>()</db:member>
<db:member><db:link xlink:href="qmqttclient.xml#serverConnectionProperties">serverConnectionProperties</db:link>()</db:member>
<db:member><db:link xlink:href="qmqttclient.xml#pingResponseReceived">pingResponseReceived</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cleanSession-prop">
<db:title>cleanSession : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>cleanSession</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cleanSession</db:synopsisinfo>
<db:synopsisinfo role="setter">setCleanSession</db:synopsisinfo>
<db:synopsisinfo role="notifier">cleanSessionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the state after connecting to a broker.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">cleanSession</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCleanSession</db:emphasis>(<db:type>bool</db:type> <db:emphasis>cleanSession</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">cleanSessionChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>cleanSession</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="clientId-prop">
<db:title>clientId : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>clientId</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">clientId</db:synopsisinfo>
<db:synopsisinfo role="setter">setClientId</db:synopsisinfo>
<db:synopsisinfo role="notifier">clientIdChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the client's identifier value.</db:para>
<db:para>Each client needs to have a unique ID to be able to connect to an MQTT broker. If no client ID is specified by the user, one will be generated automatically when a connection is established.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">clientId</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setClientId</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>clientId</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">clientIdChanged</db:emphasis>(<db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis>clientId</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="error-prop">
<db:title>error : ClientError</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ClientError</db:type>
<db:varname>error</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">error</db:synopsisinfo>
<db:synopsisinfo role="setter">setError</db:synopsisinfo>
<db:synopsisinfo role="notifier">errorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies the current error of the client.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmqttclient.xml#ClientError-enum">QMqttClient::ClientError</db:link></db:type> <db:emphasis role="bold">error</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setError</db:emphasis>(<db:type><db:link xlink:href="qmqttclient.xml#ClientError-enum">QMqttClient::ClientError</db:link></db:type> <db:emphasis>error</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">errorChanged</db:emphasis>(<db:type><db:link xlink:href="qmqttclient.xml#ClientError-enum">QMqttClient::ClientError</db:link></db:type> <db:emphasis>error</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="hostname-prop">
<db:title>hostname : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>hostname</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hostname</db:synopsisinfo>
<db:synopsisinfo role="setter">setHostname</db:synopsisinfo>
<db:synopsisinfo role="notifier">hostnameChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the hostname of the MQTT broker to connect to.</db:para>
<db:para>If no transport is specified via <db:link xlink:href="qmqttclient.xml#setTransport">setTransport</db:link>(), the client will instantiate a socket connection to the specified hostname itself.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">hostname</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHostname</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>hostname</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">hostnameChanged</db:emphasis>(<db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis>hostname</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="keepAlive-prop">
<db:title>keepAlive : quint16</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>quint16</db:type>
<db:varname>keepAlive</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">keepAlive</db:synopsisinfo>
<db:synopsisinfo role="setter">setKeepAlive</db:synopsisinfo>
<db:synopsisinfo role="notifier">keepAliveChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the interval at which regular ping messages are sent to the broker.</db:para>
<db:para>Once a connection to a broker is established, the client needs to send frequent updates to propagate it can still be reached. The interval between those updates is specified by this property.</db:para>
<db:para>The interval is specified in seconds.</db:para>
<db:para>If the broker does not respond within a grace period the connection will be closed.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#quint16-typedef">quint16</db:link></db:type> <db:emphasis role="bold">keepAlive</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setKeepAlive</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#quint16-typedef">quint16</db:link></db:type> <db:emphasis>keepAlive</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">keepAliveChanged</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#quint16-typedef">quint16</db:link></db:type> <db:emphasis>keepAlive</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttclient.xml#autoKeepAlive-prop">autoKeepAlive</db:link>()</db:member>
<db:member><db:link xlink:href="qmqttclient.xml#requestPing">requestPing</db:link>()</db:member>
<db:member><db:link xlink:href="qmqttclient.xml#pingResponseReceived">pingResponseReceived</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="password-prop">
<db:title>password : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>password</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">password</db:synopsisinfo>
<db:synopsisinfo role="setter">setPassword</db:synopsisinfo>
<db:synopsisinfo role="notifier">passwordChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the password for connecting to a broker.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">password</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPassword</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>password</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">passwordChanged</db:emphasis>(<db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis>password</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="port-prop">
<db:title>port : quint16</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>quint16</db:type>
<db:varname>port</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">port</db:synopsisinfo>
<db:synopsisinfo role="setter">setPort</db:synopsisinfo>
<db:synopsisinfo role="notifier">portChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the port to connect to the MQTT broker.</db:para>
<db:para>If no transport is specified via <db:link xlink:href="qmqttclient.xml#setTransport">setTransport</db:link>(), the client will instantiate a socket connection to a host with this port number.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#quint16-typedef">quint16</db:link></db:type> <db:emphasis role="bold">port</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPort</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#quint16-typedef">quint16</db:link></db:type> <db:emphasis>port</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">portChanged</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#quint16-typedef">quint16</db:link></db:type> <db:emphasis>port</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="protocolVersion-prop">
<db:title>protocolVersion : ProtocolVersion</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ProtocolVersion</db:type>
<db:varname>protocolVersion</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">protocolVersion</db:synopsisinfo>
<db:synopsisinfo role="setter">setProtocolVersion</db:synopsisinfo>
<db:synopsisinfo role="notifier">protocolVersionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the MQTT standard version to use for connections.</db:para>
<db:para>Specifies the version of the standard the client uses for connecting to a broker. Valid values are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>3: MQTT standard version 3.1.</db:para>
</db:listitem>
<db:listitem>
<db:para>4: MQTT standard version 3.1.1, often referred to MQTT 4.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">QMqttClient::ProtocolVersion</db:link></db:type> <db:emphasis role="bold">protocolVersion</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setProtocolVersion</db:emphasis>(<db:type><db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">QMqttClient::ProtocolVersion</db:link></db:type> <db:emphasis>protocolVersion</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">protocolVersionChanged</db:emphasis>(<db:type><db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">QMqttClient::ProtocolVersion</db:link></db:type> <db:emphasis>protocolVersion</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="state-prop">
<db:title>state : ClientState</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ClientState</db:type>
<db:varname>state</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">state</db:synopsisinfo>
<db:synopsisinfo role="setter">setState</db:synopsisinfo>
<db:synopsisinfo role="notifier">stateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current state of the client.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmqttclient.xml#ClientState-enum">QMqttClient::ClientState</db:link></db:type> <db:emphasis role="bold">state</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setState</db:emphasis>(<db:type><db:link xlink:href="qmqttclient.xml#ClientState-enum">QMqttClient::ClientState</db:link></db:type> <db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">stateChanged</db:emphasis>(<db:type><db:link xlink:href="qmqttclient.xml#ClientState-enum">QMqttClient::ClientState</db:link></db:type> <db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="username-prop">
<db:title>username : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>username</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">username</db:synopsisinfo>
<db:synopsisinfo role="setter">setUsername</db:synopsisinfo>
<db:synopsisinfo role="notifier">usernameChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the user name for connecting to a broker.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">username</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUsername</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>username</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">usernameChanged</db:emphasis>(<db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis>username</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="willMessage-prop">
<db:title>willMessage : QByteArray</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QByteArray</db:type>
<db:varname>willMessage</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">willMessage</db:synopsisinfo>
<db:synopsisinfo role="setter">setWillMessage</db:synopsisinfo>
<db:synopsisinfo role="notifier">willMessageChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the payload of a Will Message.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> <db:emphasis role="bold">willMessage</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWillMessage</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>willMessage</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">willMessageChanged</db:emphasis>(<db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> <db:emphasis>willMessage</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="willQoS-prop">
<db:title>willQoS : quint8</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>quint8</db:type>
<db:varname>willQoS</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">willQoS</db:synopsisinfo>
<db:synopsisinfo role="setter">setWillQoS</db:synopsisinfo>
<db:synopsisinfo role="notifier">willQoSChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the level of QoS for sending and storing the Will Message.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#quint8-typedef">quint8</db:link></db:type> <db:emphasis role="bold">willQoS</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWillQoS</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#quint8-typedef">quint8</db:link></db:type> <db:emphasis>willQoS</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">willQoSChanged</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#quint8-typedef">quint8</db:link></db:type> <db:emphasis>willQoS</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="willRetain-prop">
<db:title>willRetain : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>willRetain</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">willRetain</db:synopsisinfo>
<db:synopsisinfo role="setter">setWillRetain</db:synopsisinfo>
<db:synopsisinfo role="notifier">willRetainChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the Will Message should be retained on the broker for future subscribers to receive.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">willRetain</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWillRetain</db:emphasis>(<db:type>bool</db:type> <db:emphasis>willRetain</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">willRetainChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>willRetain</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="willTopic-prop">
<db:title>willTopic : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>willTopic</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">willTopic</db:synopsisinfo>
<db:synopsisinfo role="setter">setWillTopic</db:synopsisinfo>
<db:synopsisinfo role="notifier">willTopicChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the Will Topic.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">willTopic</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWillTopic</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>willTopic</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">willTopicChanged</db:emphasis>(<db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis>willTopic</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QMqttClient">
<db:title>[override virtual] QMqttClient::~QMqttClient()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QMqttClient</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMqttClient() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes a MQTT client. If the MQTT client was not already disconnected from the MQTT broker, it will be disconnected from automatically.</db:para>
</db:section>
<db:section xml:id="authenticate">
<db:title>[since 5.12] void QMqttClient::authenticate(const int &amp;<db:emphasis>prop</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>authenticate</db:methodname>
<db:methodparam>
<db:type>const int &amp;</db:type>
<db:parameter>prop</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void authenticate(const int &amp;prop)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends an authentication request to the broker. <db:code role="parameter">prop</db:code> specifies the required information to fulfill the authentication request.</db:para>
<db:para>This function should only be called after a <db:link xlink:href="qmqttclient.xml#authenticationRequested">QMqttClient::authenticationRequested</db:link> signal has been emitted.</db:para>
<db:note>
<db:para>Extended authentication is part of the MQTT 5.0 standard and can only be used when the client specifies <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">MQTT_5_0</db:link> as <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">ProtocolVersion</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttclient.xml#authenticationRequested">authenticationRequested</db:link>()</db:member>
<db:member><db:link xlink:href="qmqttclient.xml#authenticationFinished">authenticationFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="authenticationFinished">
<db:title>[since 5.12] void QMqttClient::authenticationFinished(const int &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>authenticationFinished</db:methodname>
<db:methodparam>
<db:type>const int &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void authenticationFinished(const int &amp;p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after extended authentication has finished. <db:code role="parameter">p</db:code> specifies available details on the authentication process.</db:para>
<db:para>After successful authentication <db:link xlink:href="qmqttclient.xml#connected">QMqttClient::connected</db:link> is emitted.</db:para>
<db:note>
<db:para>Extended authentication is part of the MQTT 5.0 standard and can only be used when the client specifies <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">MQTT_5_0</db:link> as <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">ProtocolVersion</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttclient.xml#authenticationRequested">authenticationRequested</db:link>()</db:member>
<db:member><db:link xlink:href="qmqttclient.xml#authenticate">authenticate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="authenticationRequested">
<db:title>[since 5.12] void QMqttClient::authenticationRequested(const int &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>authenticationRequested</db:methodname>
<db:methodparam>
<db:type>const int &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void authenticationRequested(const int &amp;p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after a client invoked <db:link xlink:href="qmqttclient.xml#connectToHost">QMqttClient::connectToHost</db:link> or <db:link xlink:href="qmqttclient.xml#connectToHostEncrypted">QMqttClient::connectToHostEncrypted</db:link> and before the connection is established. In extended authentication, a broker might request additional details which need to be provided by invoking <db:link xlink:href="qmqttclient.xml#authenticate">QMqttClient::authenticate</db:link>. <db:code role="parameter">p</db:code> specifies properties provided by the broker.</db:para>
<db:note>
<db:para>Extended authentication is part of the MQTT 5.0 standard and can only be used when the client specifies <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">MQTT_5_0</db:link> as <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">ProtocolVersion</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttclient.xml#authenticationFinished">authenticationFinished</db:link>()</db:member>
<db:member><db:link xlink:href="qmqttclient.xml#authenticate">authenticate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="brokerSessionRestored">
<db:title>void QMqttClient::brokerSessionRestored()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>brokerSessionRestored</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void brokerSessionRestored()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after a client has successfully connected to a broker with the <db:link xlink:href="qmqttclient.xml#cleanSession-prop">cleanSession</db:link> property set to <db:code>false</db:code>, and the broker has restored the session.</db:para>
<db:para>Sessions can be restored if a client has connected previously using the same <db:link xlink:href="qmqttclient.xml#clientId-prop">clientId</db:link>.</db:para>
</db:section>
<db:section xml:id="connectToHost">
<db:title>void QMqttClient::connectToHost()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>connectToHost</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void connectToHost()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initiates a connection to the MQTT broker.</db:para>
</db:section>
<db:section xml:id="connectToHostEncrypted">
<db:title>[since 5.14] void QMqttClient::connectToHostEncrypted(const QSslConfiguration &amp;<db:emphasis>conf</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>connectToHostEncrypted</db:methodname>
<db:methodparam>
<db:type>const QSslConfiguration &amp;</db:type>
<db:parameter>conf</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void connectToHostEncrypted(const QSslConfiguration &amp;conf)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initiates an encrypted connection to the MQTT broker.</db:para>
<db:para><db:code role="parameter">conf</db:code> specifies the SSL configuration to be used for the connection</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="connected">
<db:title>void QMqttClient::connected()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>connected</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void connected()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a connection has been established.</db:para>
</db:section>
<db:section xml:id="connectionProperties">
<db:title>[since 5.12] int QMqttClient::connectionProperties() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>connectionProperties</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int connectionProperties() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the connection properties the client requests to the broker.</db:para>
<db:note>
<db:para><db:link xlink:href="qmqttconnectionproperties.xml">QMqttConnectionProperties</db:link> can only be used when the client specifies <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">MQTT_5_0</db:link> as <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">ProtocolVersion</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="disconnectFromHost">
<db:title>void QMqttClient::disconnectFromHost()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>disconnectFromHost</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void disconnectFromHost()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disconnects from the MQTT broker.</db:para>
</db:section>
<db:section xml:id="disconnected">
<db:title>void QMqttClient::disconnected()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>disconnected</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void disconnected()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a connection has been closed. A connection may be closed when <db:link xlink:href="qmqttclient.xml#disconnectFromHost">disconnectFromHost</db:link>() is called or when the broker disconnects.</db:para>
</db:section>
<db:section xml:id="lastWillProperties">
<db:title>[since 5.12] int QMqttClient::lastWillProperties() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>lastWillProperties</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int lastWillProperties() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last will properties.</db:para>
<db:note>
<db:para><db:link xlink:href="qmqttlastwillproperties.xml">QMqttLastWillProperties</db:link> can only be used when the client specifies <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">MQTT_5_0</db:link> as <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">ProtocolVersion</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="messageReceived">
<db:title>void QMqttClient::messageReceived(const QByteArray &amp;<db:emphasis>message</db:emphasis>, const QMqttTopicName &amp;<db:emphasis>topic</db:emphasis> = QMqttTopicName())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>messageReceived</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMqttTopicName &amp;</db:type>
<db:parameter>topic</db:parameter>
<db:initializer>QMqttTopicName()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void messageReceived(const QByteArray &amp;message, const QMqttTopicName &amp;topic)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a new message has been received. The category of the message is specified by <db:code role="parameter">topic</db:code> with the content being <db:code role="parameter">message</db:code>.</db:para>
</db:section>
<db:section xml:id="messageSent">
<db:title>void QMqttClient::messageSent(qint32 <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>messageSent</db:methodname>
<db:methodparam>
<db:type>qint32</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void messageSent(qint32 id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Indicates that a message that was sent via the <db:link xlink:href="qmqttclient.xml#publish">publish</db:link>() function has been received by the broker. The <db:code role="parameter">id</db:code> is the same as returned by <db:code>publish()</db:code> to help tracking the status of the message.</db:para>
</db:section>
<db:section xml:id="pingResponseReceived">
<db:title>void QMqttClient::pingResponseReceived()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pingResponseReceived</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pingResponseReceived()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after the broker responds to a <db:link xlink:href="qmqttclient.xml#requestPing">requestPing</db:link>() call or a <db:link xlink:href="qmqttclient.xml#keepAlive-prop">keepAlive</db:link>() ping message, and the connection is still valid.</db:para>
</db:section>
<db:section xml:id="publish">
<db:title>qint32 QMqttClient::publish(const QMqttTopicName &amp;<db:emphasis>topic</db:emphasis>, const QByteArray &amp;<db:emphasis>message</db:emphasis> = QByteArray(), quint8 <db:emphasis>qos</db:emphasis> = 0, bool <db:emphasis>retain</db:emphasis> = false)</db:title>
<db:methodsynopsis>
<db:type>qint32</db:type>
<db:methodname>publish</db:methodname>
<db:methodparam>
<db:type>const QMqttTopicName &amp;</db:type>
<db:parameter>topic</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>message</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>quint8</db:type>
<db:parameter>qos</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>retain</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint32 publish(const QMqttTopicName &amp;topic, const QByteArray &amp;message, quint8 qos, bool retain)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Publishes a <db:code role="parameter">message</db:code> to the broker with the specified <db:code role="parameter">topic</db:code>. <db:code role="parameter">qos</db:code> specifies the QoS level required for transferring the message.</db:para>
<db:para>If <db:code role="parameter">retain</db:code> is set to <db:code>true</db:code>, the message will stay on the broker for other clients to connect and receive the message.</db:para>
<db:para>Returns an ID that is used internally to identify the message.</db:para>
</db:section>
<db:section xml:id="requestPing">
<db:title>bool QMqttClient::requestPing()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>requestPing</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool requestPing()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a ping message to the broker and expects a reply.</db:para>
<db:para>If the connection is active and <db:link xlink:href="qmqttclient.xml#autoKeepAlive-prop">autoKeepAlive</db:link> is <db:code>true</db:code>, then calling this function will fail as the client is responsible for managing this process.</db:para>
<db:para>Using <db:code>requestPing()</db:code> manually requires a call every time within the <db:link xlink:href="qmqttclient.xml#keepAlive-prop">keepAlive</db:link> interval as long as the connection is active.</db:para>
<db:para>To check whether the ping is successful, connect to the <db:link xlink:href="qmqttclient.xml#pingResponseReceived">pingResponseReceived</db:link>() signal.</db:para>
<db:para>Returns <db:code>true</db:code> if the ping request could be sent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttclient.xml#pingResponseReceived">pingResponseReceived</db:link>()</db:member>
<db:member><db:link xlink:href="qmqttclient.xml#autoKeepAlive-prop">autoKeepAlive</db:link>()</db:member>
<db:member><db:link xlink:href="qmqttclient.xml#keepAlive-prop">keepAlive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serverConnectionProperties">
<db:title>[since 5.12] int QMqttClient::serverConnectionProperties() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>serverConnectionProperties</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int serverConnectionProperties() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qmqttserverconnectionproperties.xml">QMqttServerConnectionProperties</db:link> the broker returned after a connection attempt.</db:para>
<db:para>This can be used to verify that client side connection properties set by QMqttClient::setConnectionProperties have been accepted by the broker. Also, in case of a failed connection attempt, it can be used for connection diagnostics.</db:para>
<db:note>
<db:para><db:link xlink:href="qmqttserverconnectionproperties.xml">QMqttServerConnectionProperties</db:link> can only be used when the client specifies <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">MQTT_5_0</db:link> as <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">ProtocolVersion</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttclient.xml#connectionProperties">connectionProperties</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransport">
<db:title>void QMqttClient::setTransport(QIODevice *<db:emphasis>device</db:emphasis>, QMqttClient::TransportType <db:emphasis>transport</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransport</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMqttClient::TransportType</db:type>
<db:parameter>transport</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransport(QIODevice *device, QMqttClient::TransportType transport)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the transport to <db:code role="parameter">device</db:code>. A transport can be either a socket type or derived from <db:link xlink:href="qiodevice.xml">QIODevice</db:link> and is specified by <db:code role="parameter">transport</db:code>.</db:para>
<db:note>
<db:para>The transport can only be exchanged if the MQTT client is in the <db:link xlink:href="qmqttclient.xml#ClientState-enum">Disconnected</db:link> state.</db:para>
</db:note>
<db:note>
<db:para>Setting a custom transport for a client does not pass over responsibility on connection management. The transport has to be opened for <db:link xlink:href="qiodevice.xml">QIODevice</db:link> based transports or connected for socket type transports before calling <db:link xlink:href="qmqttclient.xml#connectToHost">QMqttClient::connectToHost</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttclient.xml#transport">transport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transport">
<db:title>QIODevice *QMqttClient::transport() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>transport</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * transport() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the transport used for communication with the broker.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttclient.xml#setTransport">setTransport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
