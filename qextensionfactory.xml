<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QExtensionFactory Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> class allows you to create a factory that is able to make instances of custom extensions in Qt Designer.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QExtensionFactory</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Designer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Designer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qabstractextensionfactory.xml" xlink:role="class">QAbstractExtensionFactory</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In <db:emphasis>Qt Designer</db:emphasis> the extensions are not created until they are required. For that reason, when implementing a custom extension, you must also create a <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link>, i.e. a class that is able to make an instance of your extension, and register it using <db:emphasis>Qt Designer</db:emphasis>'s <db:link xlink:href="qextensionmanager.xml">extension manager</db:link>.</db:para>
<db:para>The <db:link xlink:href="qextensionmanager.xml">QExtensionManager</db:link> class provides extension management facilities for <db:emphasis>Qt Designer</db:emphasis>. When an extension is required, Qt Designer's <db:link xlink:href="qextensionmanager.xml">extension manager</db:link> will run through all its registered factories calling <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() for each until the first one that is able to create a requested extension for the selected object, is found. This factory will then make an instance of the extension.</db:para>
<db:para>There are four available types of extensions in <db:emphasis>Qt Designer</db:emphasis>: <db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link> , <db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link>, <db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link> and <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link>. Qt Designer's behavior is the same whether the requested extension is associated with a multi page container, a member sheet, a property sheet or a task menu.</db:para>
<db:para>You can either create a new <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> and reimplement the <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() function. For example:</db:para>
<db:programlisting language="cpp">        QObject *ANewExtensionFactory::createExtension(QObject *object,
                const QString &amp;amp;iid, QObject *parent) const
        {
            if (iid != Q_TYPEID(QDesignerContainerExtension))
                return nullptr;

            if (auto *widget = qobject_cast&amp;lt;MyCustomWidget*&amp;gt;(object))
                return new MyContainerExtension(widget, parent);

            return nullptr;
        }
</db:programlisting>
<db:para>Or you can use an existing factory, expanding the <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() function to make the factory able to create your extension as well. For example:</db:para>
<db:programlisting language="cpp">        QObject *AGeneralExtensionFactory::createExtension(QObject *object,
                const QString &amp;amp;iid, QObject *parent) const
        {
            auto *widget = qobject_cast&amp;lt;MyCustomWidget*&amp;gt;(object);
            if (!widget)
                return nullptr;

            if (iid == Q_TYPEID(QDesignerTaskMenuExtension))
                return new MyTaskMenuExtension(widget, parent);

            if (iid == Q_TYPEID(QDesignerContainerExtension))
                return new MyContainerExtension(widget, parent);

            return nullptr;
        }
</db:programlisting>
<db:para>For a complete example using the <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> class, see the <db:link xlink:href="qtdesigner-taskmenuextension-example.xml">Task Menu Extension example</db:link>. The example shows how to create a custom widget plugin for Qt Designer, and how to use the <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> class to add custom items to <db:emphasis>Qt Designer</db:emphasis>'s task menu.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qextensionmanager.xml">QExtensionManager</db:link></db:member>
<db:member><db:link xlink:href="qabstractextensionfactory.xml">QAbstractExtensionFactory</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QExtensionFactory">
<db:title>[explicit] QExtensionFactory::QExtensionFactory(QExtensionManager *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QExtensionFactory</db:methodname>
<db:methodparam>
<db:type>QExtensionManager *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QExtensionFactory(QExtensionManager *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an extension factory with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="createExtension">
<db:title>[virtual protected] QObject *QExtensionFactory::createExtension(QObject *<db:emphasis>object</db:emphasis>, const QString &amp;<db:emphasis>iid</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>createExtension</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>iid</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * createExtension(QObject *object, const QString &amp;iid, QObject *parent) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates an extension specified by <db:code role="parameter">iid</db:code> for the given <db:code role="parameter">object</db:code>. The extension object is created as a child of the specified <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qextensionfactory.xml#extension">extension</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extension">
<db:title>[override virtual] QObject *QExtensionFactory::extension(QObject *<db:emphasis>object</db:emphasis>, const QString &amp;<db:emphasis>iid</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>extension</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>iid</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * extension(QObject *object, const QString &amp;iid) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractextensionfactory.xml#extension" role="function">QAbstractExtensionFactory::extension(QObject *object, const QString &amp;iid) const</db:link>.</db:para>
<db:para>Returns the extension specified by <db:code role="parameter">iid</db:code> for the given <db:code role="parameter">object</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qextensionfactory.xml#createExtension">createExtension</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extensionManager">
<db:title>QExtensionManager *QExtensionFactory::extensionManager() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QExtensionManager *</db:type>
<db:methodname>extensionManager</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QExtensionManager * extensionManager() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the extension manager for the extension factory.</db:para>
</db:section>
</db:section>
</db:article>
