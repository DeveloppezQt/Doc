<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>EnginioReply Class</db:title>
<db:productname>QtEnginio</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Client library for Enginio</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="enginioreply.xml">EnginioReply</db:link> class contains the data from a request to the Enginio database.</db:para>
<db:para>This class was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>EnginioReply</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>EnginioReply is part of <db:simplelist><db:member>enginio-client</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The reply, when finished, contains information received from the server:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Data - object, which is a result from an earlier request, see the <db:link xlink:href="enginioreply.xml#data-prop">data</db:link> function</db:para>
</db:listitem>
<db:listitem>
<db:para>Network status - in case of a network problem, additional information can be accessed through: <db:link xlink:href="enginioreply.xml#errorType-prop">errorType</db:link>, <db:link xlink:href="enginioreply.xml#errorString-prop">errorString</db:link>, <db:link xlink:href="enginioreply.xml#networkError-prop">networkError</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Backend status - a finished request is always associated with a backend status code, which is just an HTTP code, and it can be queried through <db:link xlink:href="enginioreply.xml#backendStatus-prop">backendStatus</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The finished signal is emitted when the query is done.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="backendStatus-prop">
<db:title>[read-only] backendStatus : const int</db:title>
<db:para>Returns the backend return status for this reply.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">backendStatus</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="enginioreply.xml#data-prop">dataChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="enginio.xml#ErrorType-enum">Enginio::ErrorType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data-prop">
<db:title>[read-only] data : const QJsonObject</db:title>
<db:para>This property holds the data returned from the backend This property holds the JSON data returned by the server after a successful request.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qjsonobject.xml">QJsonObject</db:link></db:type> <db:emphasis role="bold">data</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">dataChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="errorString-prop">
<db:title>[read-only] errorString : const QString</db:title>
<db:para>This property holds the error for the request as human readable string. Check <db:link xlink:href="enginioreply.xml#isError">isError</db:link>() first to check if the reply is an error.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">errorString</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="enginioreply.xml#data-prop">dataChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="errorType-prop">
<db:title>[read-only] errorType : const ErrorType</db:title>
<db:para>Returns the type of the error</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">errorType</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="enginioreply.xml#data-prop">dataChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="enginio.xml#ErrorType-enum">Enginio::ErrorType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="networkError-prop">
<db:title>[read-only] networkError : const QNetworkReply::NetworkError</db:title>
<db:para>This property holds the network error for the request.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">networkError</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="enginioreply.xml#data-prop">dataChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.EnginioReply">
<db:title>[virtual noexcept] EnginioReply::~EnginioReply()</db:title>
<db:para>Destroys the <db:link xlink:href="enginioreply.xml">EnginioReply</db:link>.</db:para>
<db:para>The reply needs to be deleted after the finished signal is emitted.</db:para>
</db:section>
<db:section xml:id="finished">
<db:title>void EnginioReply::finished(EnginioReply *<db:emphasis>reply</db:emphasis>)</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="enginioreply.xml">EnginioReply</db:link> <db:code role="parameter">reply</db:code> is finished. After the network operation, use the <db:link xlink:href="enginioreply.xml#isError">isError</db:link>() function to check for potential problems and then use the <db:link xlink:href="enginioreply.xml#data-prop">data</db:link> property to access the returned data.</db:para>
</db:section>
<db:section xml:id="isError">
<db:title>bool EnginioReply::isError() const</db:title>
<db:para>Returns whether this reply was unsuccessful. Returns true if the reply did not succeed.</db:para>
</db:section>
<db:section xml:id="isFinished">
<db:title>bool EnginioReply::isFinished() const</db:title>
<db:para>Returns whether this reply was finished or not. Returns true if the reply was finished.</db:para>
</db:section>
<db:section xml:id="progress">
<db:title>void EnginioReply::progress(qint64 <db:emphasis>bytesSent</db:emphasis>, qint64 <db:emphasis>bytesTotal</db:emphasis>)</db:title>
<db:para>This signal is emitted for file operations, indicating the progress of up or downloads. The <db:code role="parameter">bytesSent</db:code> is the current progress relative to the total <db:code role="parameter">bytesTotal</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
