<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scene Graph - Metal Under QML</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to render directly with Metal under a Qt Quick scene.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/metalunderqml-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>The Metal Under QML example shows how an application can make use of the <db:link xlink:href="qquickwindow.xml#beforeRendering">QQuickWindow::beforeRendering</db:link>() and <db:link xlink:href="qquickwindow.xml#beforeRenderPassRecording">QQuickWindow::beforeRenderPassRecording</db:link>() signals to draw custom Metal content under a Qt Quick scene. This signal is emitted at the start of every frame, before the scene graph starts its rendering, thus any Metal draw calls that are made as a response to this signal, will stack under the Qt Quick items. There are two signals, because the custom Metal commands are recorded onto the same command buffer with the same render command encoder that the scene graph uses. beforeRendering() on its own is not sufficient for this because it gets emitted at the start of the frame, before having an <db:link xlink:href="https://developer.apple.com/documentation/metal/mtlrendercommandencoder">MTLRenderCommandEncoder</db:link> available. By also connecting to beforeRenderPassRecording(), the application can gain access to the necessary native objects.</db:para>
<db:para>As an alternative, applications that wish to render Metal content on top of the Qt Quick scene, can do so by connecting to the <db:link xlink:href="qquickwindow.xml#afterRendering">QQuickWindow::afterRendering</db:link>() and <db:link xlink:href="qquickwindow.xml#afterRenderPassRecording">QQuickWindow::afterRenderPassRecording</db:link>() signals.</db:para>
<db:para>In this example, we will also see how it is possible to have values that are exposed to QML which affect the Metal rendering. We animate the threshold value using a <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> in the QML file and this value is used by the Metal shader program that draws the squircles.</db:para>
<db:para>The example is equivalent in most ways to the <db:link xlink:href="qtquick-scenegraph-openglunderqml-example.xml">OpenGL Under QML</db:link>, <db:link xlink:href="qtquick-scenegraph-d3d11underqml-example.xml">Direct3D 11 Under QML</db:link>, and <db:link xlink:href="qtquick-scenegraph-vulkanunderqml-example.xml">Vulkan Under QML</db:link> examples, they all render the same custom content, just via different native APIs.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/scenegraph/metalunderqml?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
