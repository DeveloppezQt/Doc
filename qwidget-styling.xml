<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Styling</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Widgets Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt's built-in widgets use the <db:link xlink:href="qstyle.xml">QStyle</db:link> class to perform nearly all of their drawing. <db:link xlink:href="qstyle.xml">QStyle</db:link> is an abstract base class that encapsulates the look and feel of a GUI, and can be used to make the widgets look exactly like the equivalent native widgets or to give the widgets a custom look.</db:para>
<db:para>Qt provides a set of <db:link xlink:href="qstyle.xml">QStyle</db:link> subclasses that emulate the native look of the different platforms supported by Qt (QWindowsStyle, QMacStyle, etc.). These styles are built into the Qt GUI module, other styles can be made available using Qt's plugin mechanism.</db:para>
<db:para>Most functions for drawing style elements take four arguments:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>an enum value specifying which graphical element to draw</db:para>
</db:listitem>
<db:listitem>
<db:para>a <db:link xlink:href="qstyleoption.xml">QStyleOption</db:link> object specifying how and where to render that element</db:para>
</db:listitem>
<db:listitem>
<db:para>a <db:link xlink:href="qpainter.xml">QPainter</db:link> object that should be used to draw the element</db:para>
</db:listitem>
<db:listitem>
<db:para>a <db:link xlink:href="qwidget.xml">QWidget</db:link> object on which the drawing is performed (optional)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The style gets all the information it needs to render the graphical element from the <db:link xlink:href="qstyleoption.xml">QStyleOption</db:link> class. The widget is passed as the last argument in case the style needs it to perform special effects (such as animated default buttons on macOS), but it isn't mandatory. In fact, <db:link xlink:href="qstyle.xml">QStyle</db:link> can be used to draw on any paint device (not just widgets), in which case the widget argument is a zero pointer.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/paintsystem-stylepainter.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The paint system also provides the <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> class inheriting from <db:link xlink:href="qpainter.xml">QPainter</db:link>. <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> is a convenience class for drawing <db:link xlink:href="qstyle.xml">QStyle</db:link> elements inside a widget, and extends <db:link xlink:href="qpainter.xml">QPainter</db:link> with a set of high-level drawing functions implemented on top of <db:link xlink:href="qstyle.xml">QStyle</db:link>'s API. The advantage of using <db:link xlink:href="qstylepainter.xml">QStylePainter</db:link> is that the parameter lists get considerably shorter.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/paintsystem-icon.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">QIcon</db:emphasis></db:para>
<db:para>The <db:link xlink:href="qicon.xml">QIcon</db:link> class provides scalable icons in different modes and states.</db:para>
<db:para><db:link xlink:href="qicon.xml">QIcon</db:link> can generate pixmaps reflecting an icon's state, mode and size. These pixmaps are generated from the set of pixmaps made available to the icon, and are used by Qt widgets to show an icon representing a particular action.</db:para>
<db:para>The rendering of a <db:link xlink:href="qicon.xml">QIcon</db:link> object is handled by the <db:link xlink:href="qiconengine.xml">QIconEngine</db:link> class. Each icon has a corresponding icon engine that is responsible for drawing the icon with a requested size, mode and state.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For more information about widget styling and appearance, see the <db:link xlink:href="style-reference.xml">Styles and Style Aware Widgets</db:link>.</db:para>
</db:article>
