<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Hello GL2 Example</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Hello GL2 example demonstrates the basic use of the OpenGL-related classes provided with Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;glwidget.h&quot;
#include &quot;window.h&quot;
#include &quot;mainwindow.h&quot;
#include &lt;QSlider&gt;
#include &lt;QVBoxLayout&gt;
#include &lt;QHBoxLayout&gt;
#include &lt;QKeyEvent&gt;
#include &lt;QPushButton&gt;
#include &lt;QDesktopWidget&gt;
#include &lt;QApplication&gt;
#include &lt;QMessageBox&gt;

Window::Window(MainWindow *mw)
    : mainWindow(mw)
{
    glWidget = new GLWidget;

    xSlider = createSlider();
    ySlider = createSlider();
    zSlider = createSlider();

    connect(xSlider, &amp;QSlider::valueChanged, glWidget, &amp;GLWidget::setXRotation);
    connect(glWidget, &amp;GLWidget::xRotationChanged, xSlider, &amp;QSlider::setValue);
    connect(ySlider, &amp;QSlider::valueChanged, glWidget, &amp;GLWidget::setYRotation);
    connect(glWidget, &amp;GLWidget::yRotationChanged, ySlider, &amp;QSlider::setValue);
    connect(zSlider, &amp;QSlider::valueChanged, glWidget, &amp;GLWidget::setZRotation);
    connect(glWidget, &amp;GLWidget::zRotationChanged, zSlider, &amp;QSlider::setValue);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    QHBoxLayout *container = new QHBoxLayout;
    container-&gt;addWidget(glWidget);
    container-&gt;addWidget(xSlider);
    container-&gt;addWidget(ySlider);
    container-&gt;addWidget(zSlider);

    QWidget *w = new QWidget;
    w-&gt;setLayout(container);
    mainLayout-&gt;addWidget(w);
    dockBtn = new QPushButton(tr(&quot;Undock&quot;), this);
    connect(dockBtn, &amp;QPushButton::clicked, this, &amp;Window::dockUndock);
    mainLayout-&gt;addWidget(dockBtn);

    setLayout(mainLayout);

    xSlider-&gt;setValue(15 * 16);
    ySlider-&gt;setValue(345 * 16);
    zSlider-&gt;setValue(0 * 16);

    setWindowTitle(tr(&quot;Hello GL&quot;));
}

QSlider *Window::createSlider()
{
    QSlider *slider = new QSlider(Qt::Vertical);
    slider-&gt;setRange(0, 360 * 16);
    slider-&gt;setSingleStep(16);
    slider-&gt;setPageStep(15 * 16);
    slider-&gt;setTickInterval(15 * 16);
    slider-&gt;setTickPosition(QSlider::TicksRight);
    return slider;
}

void Window::keyPressEvent(QKeyEvent *e)
{
    if (e-&gt;key() == Qt::Key_Escape)
        close();
    else
        QWidget::keyPressEvent(e);
}

void Window::dockUndock()
{
    if (parent()) {
        setParent(0);
        setAttribute(Qt::WA_DeleteOnClose);
        move(QApplication::desktop()-&gt;width() / 2 - width() / 2,
             QApplication::desktop()-&gt;height() / 2 - height() / 2);
        dockBtn-&gt;setText(tr(&quot;Dock&quot;));
        show();
    } else {
        if (!mainWindow-&gt;centralWidget()) {
            if (mainWindow-&gt;isVisible()) {
                setAttribute(Qt::WA_DeleteOnClose, false);
                dockBtn-&gt;setText(tr(&quot;Undock&quot;));
                mainWindow-&gt;setCentralWidget(this);
            } else {
                QMessageBox::information(0, tr(&quot;Cannot dock&quot;), tr(&quot;Main window already closed&quot;));
            }
        } else {
            QMessageBox::information(0, tr(&quot;Cannot dock&quot;), tr(&quot;Main window already occupied&quot;));
        }
    }
}

</db:programlisting>
</db:article>
