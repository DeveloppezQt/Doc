<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>HPieModelMapper QML Type</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Horizontal model mapper for pie series.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtCharts 2.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qhpiemodelmapper.xml">QHPieModelMapper</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Model mappers enable using a data model derived from the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class as a data source for a chart. A horizontal model mapper is used to create a connection between a data model and <db:link xlink:href="qml-qtcharts-pieseries.xml">PieSeries</db:link>, so that each column in the data model defines a pie slice and each row maps to the label or the value of the pie slice.</db:para>
<db:para>Both model and pie series properties can be used to manipulate the data. The model mapper keeps the pie series and the data model in sync.</db:para>
<db:para>The following QML example creates a pie series with four slices (assuming the model has at least five columns). Each slice gets a label from row 1 and a value from row 2.</db:para>
<db:programlisting language="cpp">HPieModelMapper {
    series: pieSeries
    model: customModel
    labelsRow: 1
    valuesRow: 2
    firstColumn: 1
    columnCount: 4
}
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="columnCount-prop">
<db:title>columnCount : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>columnCount</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The number of columns of the model that are mapped as the data for the pie series. The default value is -1 (number limited by the number of columns in the model).</db:para>
</db:section>
<db:section xml:id="firstColumn-prop">
<db:title>firstColumn : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>firstColumn</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The column of the model that contains the first slice value. The default value is 0.</db:para>
</db:section>
<db:section xml:id="labelsRow-prop">
<db:title>labelsRow : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>labelsRow</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The row of the model that is kept in sync with the labels of the pie's slices. The default value is -1 (invalid mapping).</db:para>
</db:section>
<db:section xml:id="model-prop">
<db:title>model : SomeModel</db:title>
<db:fieldsynopsis>
<db:type>SomeModel</db:type>
<db:varname>model</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> based model that is used by the mapper. You need to implement the model and expose it to QML.</db:para>
<db:note>
<db:para>The model has to support adding and removing rows or columns and modifying the data in the cells.</db:para>
</db:note>
</db:section>
<db:section xml:id="series-prop">
<db:title>series : PieSeries</db:title>
<db:fieldsynopsis>
<db:type>PieSeries</db:type>
<db:varname>series</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The <db:link xlink:href="qml-qtcharts-pieseries.xml">PieSeries</db:link> object that is used by the mapper. If you define the mapper element as a child for a <db:link xlink:href="qml-qtcharts-pieseries.xml">PieSeries</db:link>, leave this property undefined. All the data in the series is discarded when it is set to the mapper. When a new series is specified, the old series is disconnected (but it preserves its data).</db:para>
</db:section>
<db:section xml:id="valuesRow-prop">
<db:title>valuesRow : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>valuesRow</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The row of the model that is kept in sync with the values of the pie's slices. The default value is -1 (invalid mapping).</db:para>
</db:section>
</db:section>
</db:article>
