<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAudioDeviceInfo Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link> class provides an interface to query audio devices and their functionality.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAudioDeviceInfo</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAudioDeviceInfo is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_audio</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link> lets you query for audio devices–such as sound cards and USB headsets–that are currently available on the system. The audio devices available are dependent on the platform or audio plugins installed.</db:para>
<db:para>A <db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link> is used by Qt to construct classes that communicate with the device–such as <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link>, and <db:link xlink:href="qaudiooutput.xml">QAudioOutput</db:link>.</db:para>
<db:para>You can also query each device for the formats it supports. A format in this context is a set consisting of a specific byte order, channel, codec, frequency, sample rate, and sample type. A format is represented by the <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> class.</db:para>
<db:para>The values supported by the device for each of these parameters can be fetched with <db:link xlink:href="qaudiodeviceinfo.xml#supportedByteOrders">supportedByteOrders</db:link>(), <db:link xlink:href="qaudiodeviceinfo.xml#supportedChannelCounts">supportedChannelCounts</db:link>(), <db:link xlink:href="qaudiodeviceinfo.xml#supportedCodecs">supportedCodecs</db:link>(), <db:link xlink:href="qaudiodeviceinfo.xml#supportedSampleRates">supportedSampleRates</db:link>(), <db:link xlink:href="qaudiodeviceinfo.xml#supportedSampleSizes">supportedSampleSizes</db:link>(), and <db:link xlink:href="qaudiodeviceinfo.xml#supportedSampleTypes">supportedSampleTypes</db:link>(). The combinations supported are dependent on the platform, audio plugins installed and the audio device capabilities. If you need a specific format, you can check if the device supports it with <db:link xlink:href="qaudiodeviceinfo.xml#isFormatSupported">isFormatSupported</db:link>(), or fetch a supported format that is as close as possible to the format with <db:link xlink:href="qaudiodeviceinfo.xml#nearestFormat">nearestFormat</db:link>(). For instance:</db:para>
<db:programlisting language="cpp">QAudioFormat format;
format.setSampleRate(44100);
// ... other format parameters
format.setSampleType(QAudioFormat::SignedInt);

QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());

if (!info.isFormatSupported(format))
    format = info.nearestFormat(format);
</db:programlisting>
<db:para>The static functions <db:link xlink:href="qaudiodeviceinfo.xml#defaultInputDevice">defaultInputDevice</db:link>(), <db:link xlink:href="qaudiodeviceinfo.xml#defaultOutputDevice">defaultOutputDevice</db:link>(), and <db:link xlink:href="qaudiodeviceinfo.xml#availableDevices">availableDevices</db:link>() let you get a list of all available devices. Devices are fetched according to the value of mode this is specified by the <db:link xlink:href="qaudio.xml">QAudio</db:link>::Mode enum. The <db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link> returned are only valid for the <db:link xlink:href="qaudio.xml">QAudio</db:link>::Mode.</db:para>
<db:para>For instance:</db:para>
<db:programlisting language="cpp">foreach (const QAudioDeviceInfo &amp;deviceInfo, QAudioDeviceInfo::availableDevices(QAudio::AudioOutput))
    qDebug() &lt;&lt; &quot;Device name: &quot; &lt;&lt; deviceInfo.deviceName();
</db:programlisting>
<db:para>In this code sample, we loop through all devices that are able to output sound, i.e., play an audio stream in a supported format. For each device we find, we simply print the <db:link xlink:href="qaudiodeviceinfo.xml#deviceName">deviceName</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiooutput.xml">QAudioOutput</db:link></db:member>
<db:member><db:link xlink:href="qaudioinput.xml">QAudioInput</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAudioDeviceInfo">
<db:title>QAudioDeviceInfo::QAudioDeviceInfo()</db:title>
<db:para>Constructs an empty <db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link> object.</db:para>
</db:section>
<db:section xml:id="QAudioDeviceInfo-1">
<db:title>QAudioDeviceInfo::QAudioDeviceInfo(const QAudioDeviceInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAudioDeviceInfo">
<db:title>[noexcept] QAudioDeviceInfo::~QAudioDeviceInfo()</db:title>
<db:para>Destroy this audio device info.</db:para>
</db:section>
<db:section xml:id="availableDevices">
<db:title>[static] QList&lt;QAudioDeviceInfo&gt; QAudioDeviceInfo::availableDevices(QAudio::Mode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Returns a list of audio devices that support <db:code role="parameter">mode</db:code>.</db:para>
</db:section>
<db:section xml:id="defaultInputDevice">
<db:title>[static] QAudioDeviceInfo QAudioDeviceInfo::defaultInputDevice()</db:title>
<db:para>Returns the information for the default input audio device. All platform and audio plugin implementations provide a default audio device to use.</db:para>
</db:section>
<db:section xml:id="defaultOutputDevice">
<db:title>[static] QAudioDeviceInfo QAudioDeviceInfo::defaultOutputDevice()</db:title>
<db:para>Returns the information for the default output audio device. All platform and audio plugin implementations provide a default audio device to use.</db:para>
</db:section>
<db:section xml:id="deviceName">
<db:title>QString QAudioDeviceInfo::deviceName() const</db:title>
<db:para>Returns the human readable name of the audio device.</db:para>
<db:para>Device names vary depending on the platform/audio plugin being used.</db:para>
<db:para>They are a unique string identifier for the audio device.</db:para>
<db:para>eg. default, Intel, U0x46d0x9a4</db:para>
</db:section>
<db:section xml:id="isFormatSupported">
<db:title>bool QAudioDeviceInfo::isFormatSupported(const QAudioFormat &amp;<db:emphasis>settings</db:emphasis>) const</db:title>
<db:para>Returns true if the supplied <db:code role="parameter">settings</db:code> are supported by the audio device described by this <db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link>.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QAudioDeviceInfo::isNull() const</db:title>
<db:para>Returns whether this <db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link> object holds a valid device definition.</db:para>
</db:section>
<db:section xml:id="nearestFormat">
<db:title>QAudioFormat QAudioDeviceInfo::nearestFormat(const QAudioFormat &amp;<db:emphasis>settings</db:emphasis>) const</db:title>
<db:para>Returns the closest <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> to the supplied <db:code role="parameter">settings</db:code> that the system supports.</db:para>
<db:para>These settings are provided by the platform/audio plugin being used.</db:para>
<db:para>They are also dependent on the <db:link xlink:href="qaudio.xml">QAudio</db:link>::Mode being used.</db:para>
</db:section>
<db:section xml:id="preferredFormat">
<db:title>QAudioFormat QAudioDeviceInfo::preferredFormat() const</db:title>
<db:para>Returns the default audio format settings for this device.</db:para>
<db:para>These settings are provided by the platform/audio plugin being used.</db:para>
<db:para>They are also dependent on the <db:link xlink:href="qaudio.xml">QAudio</db:link>::Mode being used.</db:para>
<db:para>A typical audio system would provide something like:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Input settings: 8000Hz mono 8 bit.</db:para>
</db:listitem>
<db:listitem>
<db:para>Output settings: 44100Hz stereo 16 bit little endian.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="supportedByteOrders">
<db:title>QList&lt;QAudioFormat::Endian&gt; QAudioDeviceInfo::supportedByteOrders() const</db:title>
<db:para>Returns a list of supported byte orders.</db:para>
</db:section>
<db:section xml:id="supportedChannelCounts">
<db:title>QList&lt;int&gt; QAudioDeviceInfo::supportedChannelCounts() const</db:title>
<db:para>Returns a list of supported channel counts.</db:para>
<db:para>This is typically 1 for mono sound, or 2 for stereo sound.</db:para>
</db:section>
<db:section xml:id="supportedCodecs">
<db:title>QStringList QAudioDeviceInfo::supportedCodecs() const</db:title>
<db:para>Returns a list of supported codecs.</db:para>
<db:para>All platform and plugin implementations should provide support for:</db:para>
<db:para>&quot;audio/pcm&quot; - Linear PCM</db:para>
<db:para>For writing plugins to support additional codecs refer to:</db:para>
<db:para>http://www.iana.org/assignments/media-types/audio/</db:para>
</db:section>
<db:section xml:id="supportedSampleRates">
<db:title>QList&lt;int&gt; QAudioDeviceInfo::supportedSampleRates() const</db:title>
<db:para>Returns a list of supported sample rates (in Hertz).</db:para>
</db:section>
<db:section xml:id="supportedSampleSizes">
<db:title>QList&lt;int&gt; QAudioDeviceInfo::supportedSampleSizes() const</db:title>
<db:para>Returns a list of supported sample sizes (in bits).</db:para>
<db:para>Typically this will include 8 and 16 bit sample sizes.</db:para>
</db:section>
<db:section xml:id="supportedSampleTypes">
<db:title>QList&lt;QAudioFormat::SampleType&gt; QAudioDeviceInfo::supportedSampleTypes() const</db:title>
<db:para>Returns a list of supported sample types.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QAudioDeviceInfo::operator!=(const QAudioDeviceInfo &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link> class represents a different audio device than <db:code role="parameter">other</db:code></db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QAudioDeviceInfo &amp;QAudioDeviceInfo::operator=(const QAudioDeviceInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Sets the <db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link> object to be equal to <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QAudioDeviceInfo::operator==(const QAudioDeviceInfo &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link> class represents the same audio device as <db:code role="parameter">other</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
