<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBluetoothDeviceDiscoveryAgent Class</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link> class discovers the Bluetooth devices nearby.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBluetoothDeviceDiscoveryAgent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += bluetooth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To discover the nearby Bluetooth devices:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>create an instance of <db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link>,</db:para>
</db:listitem>
<db:listitem>
<db:para>connect to either the <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#deviceDiscovered">deviceDiscovered</db:link>() or <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#finished">finished</db:link>() signals,</db:para>
</db:listitem>
<db:listitem>
<db:para>and call <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#start">start</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">void MyClass::startDeviceDiscovery()
{

    // Create a discovery agent and connect to its signals
    QBluetoothDeviceDiscoveryAgent *discoveryAgent = new QBluetoothDeviceDiscoveryAgent(this);
    connect(discoveryAgent, SIGNAL(deviceDiscovered(QBluetoothDeviceInfo)),
            this, SLOT(deviceDiscovered(QBluetoothDeviceInfo)));

    // Start a discovery
    discoveryAgent-&gt;start();

    //...
}

// In your local slot, read information about the found devices
void MyClass::deviceDiscovered(const QBluetoothDeviceInfo &amp;device)
{
    qDebug() &lt;&lt; &quot;Found new device:&quot; &lt;&lt; device.name() &lt;&lt; '(' &lt;&lt; device.address().toString() &lt;&lt; ')';
}
</db:programlisting>
<db:para>To retrieve results asynchronously, connect to the <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#deviceDiscovered">deviceDiscovered</db:link>() signal. To get a list of all discovered devices, call <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#discoveredDevices">discoveredDevices</db:link>() after the <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#finished">finished</db:link>() signal.</db:para>
<db:para>This class can be used to discover Classic and Low Energy Bluetooth devices. The individual device type can be determined via the <db:link xlink:href="qbluetoothdeviceinfo.xml#coreConfigurations">QBluetoothDeviceInfo::coreConfigurations</db:link>() attribute. In most cases the list returned by <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#discoveredDevices">discoveredDevices</db:link>() contains both types of devices. However not every platform can detect both types of devices. On platforms with this limitation (for example iOS only suports Low Energy discovery), the discovery process will limit the search to the type which is supported.</db:para>
<db:note>
<db:para>Since Android 6.0 the ability to detect devices requires ACCESS_COARSE_LOCATION.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QBluetoothDeviceDiscoveryAgent::Error</db:title>
<db:para>Indicates all possible error conditions found during Bluetooth device discovery.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::PoweredOffError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The Bluetooth adaptor is powered off, power it on before doing discovery.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::InputOutputError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Writing or reading from the device resulted in an error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::InvalidBluetoothAdapterError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The passed local adapter address does not match the physical adapter address of any local Bluetooth device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::UnsupportedPlatformError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Device discovery is not possible or implemented on the current platform. The error is set in response to a call to <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#start">start</db:link>(). An example for such cases are iOS versions below 5.0 which do not support Bluetooth device search at all. This value was introduced by Qt 5.5.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>100</db:code></db:td>
<db:td>
<db:para>An unknown error has occurred.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="InquiryType-enum">
<db:title>enum QBluetoothDeviceDiscoveryAgent::InquiryType</db:title>
<db:para>This enum describes the inquiry type used while discovering Bluetooth devices.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::GeneralUnlimitedInquiry</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A general unlimited inquiry. Discovers all visible Bluetooth devices in the local vicinity.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::LimitedInquiry</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A limited inquiry discovers devices that are in limited inquiry mode.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>LimitedInquiry is not supported on all platforms. If it is requested on a platform that does not support it, GeneralUnlimitedInquiry will be used instead. Setting LimitedInquiry is useful for multi-player Bluetooth-based games that needs faster communication between the devices. The phone scans for devices in LimitedInquiry and Service Discovery is done on one or two devices to speed up the service scan. After the game has connected to the device it intended to, the device returns to GeneralUnlimitedInquiry.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="inquiryType-prop">
<db:title>inquiryType : QBluetoothDeviceDiscoveryAgent::InquiryType</db:title>
<db:para>type of inquiry scan to be used while discovering devices</db:para>
<db:para>This property affects the type of inquiry scan which is performed while discovering devices.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#InquiryType-enum">GeneralUnlimitedInquiry</db:link>.</db:para>
<db:para>Not all platforms support <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#InquiryType-enum">LimitedInquiry</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#InquiryType-enum">QBluetoothDeviceDiscoveryAgent::InquiryType</db:link></db:type> <db:emphasis role="bold">inquiryType</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setInquiryType</db:emphasis>(<db:type><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#InquiryType-enum">QBluetoothDeviceDiscoveryAgent::InquiryType</db:link></db:type> <db:emphasis>type</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#InquiryType-enum">InquiryType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBluetoothDeviceDiscoveryAgent">
<db:title>[explicit] QBluetoothDeviceDiscoveryAgent::QBluetoothDeviceDiscoveryAgent(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new Bluetooth device discovery agent with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QBluetoothDeviceDiscoveryAgent-1">
<db:title>[explicit] QBluetoothDeviceDiscoveryAgent::QBluetoothDeviceDiscoveryAgent(const QBluetoothAddress &amp;<db:emphasis>deviceAdapter</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new Bluetooth device discovery agent with <db:code role="parameter">parent</db:code>.</db:para>
<db:para>It uses <db:code role="parameter">deviceAdapter</db:code> for the device search. If <db:code role="parameter">deviceAdapter</db:code> is default constructed the resulting <db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link> object will use the local default Bluetooth adapter.</db:para>
<db:para>If a <db:code role="parameter">deviceAdapter</db:code> is specified that is not a local adapter <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#error">error</db:link>() will be set to <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#Error-enum">InvalidBluetoothAdapterError</db:link>. Therefore it is recommended to test the error flag immediately after using this constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QBluetoothDeviceDiscoveryAgent">
<db:title>[virtual noexcept] QBluetoothDeviceDiscoveryAgent::~QBluetoothDeviceDiscoveryAgent()</db:title>
<db:para>Destructor for ~<db:link xlink:href="qbluetoothdevicediscoveryagent.xml#QBluetoothDeviceDiscoveryAgent">QBluetoothDeviceDiscoveryAgent</db:link>()</db:para>
</db:section>
<db:section xml:id="canceled">
<db:title>void QBluetoothDeviceDiscoveryAgent::canceled()</db:title>
<db:para>This signal is emitted when device discovery is aborted by a call to <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#stop">stop</db:link>().</db:para>
</db:section>
<db:section xml:id="deviceDiscovered">
<db:title>void QBluetoothDeviceDiscoveryAgent::deviceDiscovered(const QBluetoothDeviceInfo &amp;<db:emphasis>info</db:emphasis>)</db:title>
<db:para>This signal is emitted when the Bluetooth device described by <db:code role="parameter">info</db:code> is discovered.</db:para>
<db:para>The signal is emitted as soon as the most important device information has been collected. However, as long as the <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#finished">finished</db:link>() signal has not been emitted the information collection continues even for already discovered devices. This is particularly true for signal strength information (RSSI). If signal strength information is required it is advisable to retrieve the device information via <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#discoveredDevices">discoveredDevices</db:link>() once the discovery has finished. This will yield the most recent RSSI information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdeviceinfo.xml#rssi">QBluetoothDeviceInfo::rssi</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="discoveredDevices">
<db:title>QList&lt;QBluetoothDeviceInfo&gt; QBluetoothDeviceDiscoveryAgent::discoveredDevices() const</db:title>
<db:para>Returns a list of all discovered Bluetooth devices.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QBluetoothDeviceDiscoveryAgent::Error QBluetoothDeviceDiscoveryAgent::error() const</db:title>
<db:para>Returns the last error.</db:para>
</db:section>
<db:section xml:id="error-1">
<db:title>void QBluetoothDeviceDiscoveryAgent::error(QBluetoothDeviceDiscoveryAgent::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:para>This signal is emitted when an <db:code role="parameter">error</db:code> occurs during Bluetooth device discovery. The <db:code role="parameter">error</db:code> parameter describes the error that occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QBluetoothDeviceDiscoveryAgent::errorString() const</db:title>
<db:para>Returns a human-readable description of the last error.</db:para>
</db:section>
<db:section xml:id="finished">
<db:title>void QBluetoothDeviceDiscoveryAgent::finished()</db:title>
<db:para>This signal is emitted when Bluetooth device discovery completes. The signal is not going to be emitted if the device discovery finishes with an error.</db:para>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QBluetoothDeviceDiscoveryAgent::isActive() const</db:title>
<db:para>Returns true if the agent is currently discovering Bluetooth devices, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="start">
<db:title>void QBluetoothDeviceDiscoveryAgent::start()</db:title>
<db:para>Starts Bluetooth device discovery, if it is not already started.</db:para>
<db:para>The <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#deviceDiscovered">deviceDiscovered</db:link>() signal is emitted as each device is discovered. The <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#finished">finished</db:link>() signal is emitted once device discovery is complete.</db:para>
</db:section>
<db:section xml:id="stop">
<db:title>void QBluetoothDeviceDiscoveryAgent::stop()</db:title>
<db:para>Stops Bluetooth device discovery. The cancel() signal is emitted once the device discovery is canceled. <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#start">start</db:link>() maybe called before the cancel signal is received. Once <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#start">start</db:link>() has been called the cancel signal from the prior discovery will be discarded.</db:para>
</db:section>
</db:section>
</db:article>
