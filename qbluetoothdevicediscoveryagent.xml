<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBluetoothDeviceDiscoveryAgent Class</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link> class discovers the Bluetooth devices nearby.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBluetoothDeviceDiscoveryAgent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += bluetooth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To discover the nearby Bluetooth devices:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>create an instance of <db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link>,</db:para>
</db:listitem>
<db:listitem>
<db:para>connect to either the <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#deviceDiscovered">deviceDiscovered</db:link>() or <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#finished">finished</db:link>() signals,</db:para>
</db:listitem>
<db:listitem>
<db:para>and call <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#start">start</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">void MyClass::startDeviceDiscovery()
{

    // Create a discovery agent and connect to its signals
    QBluetoothDeviceDiscoveryAgent *discoveryAgent = new QBluetoothDeviceDiscoveryAgent(this);
    connect(discoveryAgent, SIGNAL(deviceDiscovered(QBluetoothDeviceInfo)),
            this, SLOT(deviceDiscovered(QBluetoothDeviceInfo)));

    // Start a discovery
    discoveryAgent-&amp;gt;start();

    //...
}

// In your local slot, read information about the found devices
void MyClass::deviceDiscovered(const QBluetoothDeviceInfo &amp;amp;device)
{
    qDebug() &amp;lt;&amp;lt; &quot;Found new device:&quot; &amp;lt;&amp;lt; device.name() &amp;lt;&amp;lt; '(' &amp;lt;&amp;lt; device.address().toString() &amp;lt;&amp;lt; ')';
}
</db:programlisting>
<db:para>To retrieve results asynchronously, connect to the <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#deviceDiscovered">deviceDiscovered</db:link>() signal. To get a list of all discovered devices, call <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#discoveredDevices">discoveredDevices</db:link>() after the <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#finished">finished</db:link>() signal.</db:para>
<db:para>This class can be used to discover Classic and Low Energy Bluetooth devices. The individual device type can be determined via the <db:link xlink:href="qbluetoothdeviceinfo.xml#coreConfigurations">QBluetoothDeviceInfo::coreConfigurations</db:link>() attribute. In most cases the list returned by <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#discoveredDevices">discoveredDevices</db:link>() contains both types of devices. However not every platform can detect both types of devices. On platforms with this limitation (for example iOS only suports Low Energy discovery), the discovery process will limit the search to the type which is supported.</db:para>
<db:note>
<db:para>Since Android 6.0 the ability to detect devices requires ACCESS_COARSE_LOCATION.</db:para>
</db:note>
<db:note>
<db:para>The Win32 backend currently does not support the Received Signal Strength Indicator (RSSI), as well as the Manufacturer Specific Data, or other data updates advertised by Bluetooth LE devices after discovery.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DiscoveryMethod-enum">
<db:title>enum QBluetoothDeviceDiscoveryAgent::DiscoveryMethod</db:title>
<db:bridgehead renderas="sect2">flags QBluetoothDeviceDiscoveryAgent::DiscoveryMethods</db:bridgehead>
<db:enumsynopsis>
<db:enumname>DiscoveryMethod</db:enumname>
<db:enumitem>
<db:enumidentifier>NoMethod</db:enumidentifier>
<db:enumvalue>0x0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ClassicMethod</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LowEnergyMethod</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QBluetoothDeviceDiscoveryAgent::DiscoveryMethods</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum descibes the type of discovery method employed by the <db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::NoMethod</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>The discovery is not possible. None of the available methods are supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::ClassicMethod</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>The discovery process searches for Bluetooth Classic (BaseRate) devices.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::LowEnergyMethod</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>The discovery process searches for Bluetooth Low Energy devices.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>DiscoveryMethods</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;DiscoveryMethod&gt;. </db:code>It stores an OR combination of <db:code>DiscoveryMethod</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#supportedDiscoveryMethods">supportedDiscoveryMethods</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Error-enum">
<db:title>enum QBluetoothDeviceDiscoveryAgent::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InputOutputError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PoweredOffError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InvalidBluetoothAdapterError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnsupportedPlatformError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnsupportedDiscoveryMethod</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LocationServiceTurnedOffError</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MissingPermissionsError</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownError</db:enumidentifier>
<db:enumvalue>100</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Indicates all possible error conditions found during Bluetooth device discovery.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::PoweredOffError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The Bluetooth adaptor is powered off, power it on before doing discovery.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::InputOutputError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Writing or reading from the device resulted in an error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::InvalidBluetoothAdapterError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The passed local adapter address does not match the physical adapter address of any local Bluetooth device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::UnsupportedPlatformError (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Device discovery is not possible or implemented on the current platform. The error is set in response to a call to <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#start">start</db:link>(). An example for such cases are iOS versions below 5.0 which do not support Bluetooth device search at all.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::UnsupportedDiscoveryMethod (since Qt 5.8)</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>One of the requested discovery methods is not supported by the current platform.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::LocationServiceTurnedOffError (since Qt 6.2)</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The location service is turned off. Usage of Bluetooth APIs is not possible when location service is turned off.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::MissingPermissionsError (since Qt 6.4)</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The operating system requests permissions which were not granted by the user.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>100</db:code></db:td>
<db:td>
<db:para>An unknown error has occurred.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBluetoothDeviceDiscoveryAgent">
<db:title>[explicit] QBluetoothDeviceDiscoveryAgent::QBluetoothDeviceDiscoveryAgent(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QBluetoothDeviceDiscoveryAgent</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothDeviceDiscoveryAgent(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new Bluetooth device discovery agent with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QBluetoothDeviceDiscoveryAgent-1">
<db:title>[explicit] QBluetoothDeviceDiscoveryAgent::QBluetoothDeviceDiscoveryAgent(const QBluetoothAddress &amp;<db:emphasis>deviceAdapter</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QBluetoothDeviceDiscoveryAgent</db:methodname>
<db:methodparam>
<db:type>const QBluetoothAddress &amp;</db:type>
<db:parameter>deviceAdapter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothDeviceDiscoveryAgent(const QBluetoothAddress &amp;deviceAdapter, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new Bluetooth device discovery agent with <db:code role="parameter">parent</db:code>.</db:para>
<db:para>It uses <db:code role="parameter">deviceAdapter</db:code> for the device search. If <db:code role="parameter">deviceAdapter</db:code> is default constructed the resulting <db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link> object will use the local default Bluetooth adapter.</db:para>
<db:para>If a <db:code role="parameter">deviceAdapter</db:code> is specified that is not a local adapter <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#error">error</db:link>() will be set to <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#Error-enum">InvalidBluetoothAdapterError</db:link>. Therefore it is recommended to test the error flag immediately after using this constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QBluetoothDeviceDiscoveryAgent">
<db:title>[virtual] QBluetoothDeviceDiscoveryAgent::~QBluetoothDeviceDiscoveryAgent()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QBluetoothDeviceDiscoveryAgent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QBluetoothDeviceDiscoveryAgent()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor for ~<db:link xlink:href="qbluetoothdevicediscoveryagent.xml#QBluetoothDeviceDiscoveryAgent">QBluetoothDeviceDiscoveryAgent</db:link>()</db:para>
</db:section>
<db:section xml:id="canceled">
<db:title>void QBluetoothDeviceDiscoveryAgent::canceled()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>canceled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void canceled()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when device discovery is aborted by a call to <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#stop">stop</db:link>().</db:para>
</db:section>
<db:section xml:id="deviceDiscovered">
<db:title>void QBluetoothDeviceDiscoveryAgent::deviceDiscovered(const QBluetoothDeviceInfo &amp;<db:emphasis>info</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deviceDiscovered</db:methodname>
<db:methodparam>
<db:type>const QBluetoothDeviceInfo &amp;</db:type>
<db:parameter>info</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deviceDiscovered(const QBluetoothDeviceInfo &amp;info)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the Bluetooth device described by <db:code role="parameter">info</db:code> is discovered.</db:para>
<db:para>The signal is emitted as soon as the most important device information has been collected. However, as long as the <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#finished">finished</db:link>() signal has not been emitted the information collection continues even for already discovered devices. This is particularly true for signal strength information (RSSI) and manufacturer data updates. If the use case requires continuous manufacturer data or RSSI updates it is advisable to retrieve the device information via <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#discoveredDevices">discoveredDevices</db:link>() once the discovery has finished or listen to the <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#deviceUpdated">deviceUpdated</db:link>() signal.</db:para>
<db:para>If <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#lowEnergyDiscoveryTimeout">lowEnergyDiscoveryTimeout</db:link>() is larger than 0 the signal is only ever emitted when at least one attribute of <db:code role="parameter">info</db:code> changes. This reflects the desire to receive updates as more precise information becomes available. The exception to this behavior is the case when <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#lowEnergyDiscoveryTimeout">lowEnergyDiscoveryTimeout</db:link> is set to <db:code>0</db:code>. A timeout of <db:code>0</db:code> expresses the desire to monitor the appearance and disappearance of Low Energy devices over time. Under this condition the deviceDiscovered() signal is emitted even if <db:code role="parameter">info</db:code> has not changed since the last signal emission.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdeviceinfo.xml#rssi">QBluetoothDeviceInfo::rssi</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#lowEnergyDiscoveryTimeout">lowEnergyDiscoveryTimeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deviceUpdated">
<db:title>void QBluetoothDeviceDiscoveryAgent::deviceUpdated(const QBluetoothDeviceInfo &amp;<db:emphasis>info</db:emphasis>, QBluetoothDeviceInfo::Fields <db:emphasis>updatedFields</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deviceUpdated</db:methodname>
<db:methodparam>
<db:type>const QBluetoothDeviceInfo &amp;</db:type>
<db:parameter>info</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBluetoothDeviceInfo::Fields</db:type>
<db:parameter>updatedFields</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deviceUpdated(const QBluetoothDeviceInfo &amp;info, QBluetoothDeviceInfo::Fields updatedFields)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the agent receives additional information about the Bluetooth device described by <db:code role="parameter">info</db:code>. The <db:code role="parameter">updatedFields</db:code> flags tell which information has been updated.</db:para>
<db:para>During discovery, some information can change dynamically, such as <db:link xlink:href="qbluetoothdeviceinfo.xml#rssi">signal strength</db:link> and <db:link xlink:href="qbluetoothdeviceinfo.xml#manufacturerData-1">manufacturerData</db:link>. This signal informs you that if your application is displaying this data, it can be updated, rather than waiting until the discovery has finished.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdeviceinfo.xml#rssi">QBluetoothDeviceInfo::rssi</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#lowEnergyDiscoveryTimeout">lowEnergyDiscoveryTimeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="discoveredDevices">
<db:title>QList&lt;QBluetoothDeviceInfo&gt; QBluetoothDeviceDiscoveryAgent::discoveredDevices() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QBluetoothDeviceInfo&gt;</db:type>
<db:methodname>discoveredDevices</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QBluetoothDeviceInfo&gt; discoveredDevices() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all discovered Bluetooth devices.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QBluetoothDeviceDiscoveryAgent::Error QBluetoothDeviceDiscoveryAgent::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBluetoothDeviceDiscoveryAgent::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothDeviceDiscoveryAgent::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last error.</db:para>
<db:para>Any possible previous errors are cleared upon restarting the discovery.</db:para>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>[since 6.2] void QBluetoothDeviceDiscoveryAgent::errorOccurred(QBluetoothDeviceDiscoveryAgent::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QBluetoothDeviceDiscoveryAgent::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QBluetoothDeviceDiscoveryAgent::Error error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an <db:code role="parameter">error</db:code> occurs during Bluetooth device discovery. The <db:code role="parameter">error</db:code> parameter describes the error that occurred.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QBluetoothDeviceDiscoveryAgent::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a human-readable description of the last error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#errorOccurred">errorOccurred</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="finished">
<db:title>void QBluetoothDeviceDiscoveryAgent::finished()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when Bluetooth device discovery completes. The signal is not going to be emitted if the device discovery finishes with an error.</db:para>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QBluetoothDeviceDiscoveryAgent::isActive() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isActive</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isActive() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the agent is currently discovering Bluetooth devices, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="lowEnergyDiscoveryTimeout">
<db:title>int QBluetoothDeviceDiscoveryAgent::lowEnergyDiscoveryTimeout() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>lowEnergyDiscoveryTimeout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int lowEnergyDiscoveryTimeout() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a timeout in milliseconds that is applied to the Bluetooth Low Energy device search. A value of <db:code>-1</db:code> implies that the platform does not support this property and the timeout for the device search cannot be adjusted. A return value of <db:code>0</db:code> implies a never-ending search which must be manually stopped via <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#stop">stop</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#setLowEnergyDiscoveryTimeout">setLowEnergyDiscoveryTimeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLowEnergyDiscoveryTimeout">
<db:title>void QBluetoothDeviceDiscoveryAgent::setLowEnergyDiscoveryTimeout(int <db:emphasis>timeout</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLowEnergyDiscoveryTimeout</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeout</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLowEnergyDiscoveryTimeout(int timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum search time for Bluetooth Low Energy device search to <db:code role="parameter">timeout</db:code> in milliseconds. If <db:code role="parameter">timeout</db:code> is <db:code>0</db:code> the discovery runs until <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#stop">stop</db:link>() is called.</db:para>
<db:para>This reflects the fact that the discovery process for Bluetooth Low Energy devices is mostly open ended. The platform continues to look for more devices until the search is manually stopped. The timeout ensures that the search is aborted after <db:code role="parameter">timeout</db:code> milliseconds. Of course, it is still possible to manually abort the discovery by calling <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#stop">stop</db:link>().</db:para>
<db:para>The new timeout value does not take effect until the device search is restarted. In addition the timeout does not affect the classic Bluetooth device search. Depending on the platform the classic search may add more time to the total discovery process beyond <db:code role="parameter">timeout</db:code>.</db:para>
<db:para>For a reliable Bluetooth Low Energy discovery, use at least 40000 milliseconds.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#lowEnergyDiscoveryTimeout">lowEnergyDiscoveryTimeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QBluetoothDeviceDiscoveryAgent::start()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void start()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts Bluetooth device discovery, if it is not already started.</db:para>
<db:para>The <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#deviceDiscovered">deviceDiscovered</db:link>() signal is emitted as each device is discovered. The <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#finished">finished</db:link>() signal is emitted once device discovery is complete. The discovery utilizes the maximum set of supported discovery methods on the platform.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothdevicediscoveryagent.xml#supportedDiscoveryMethods">supportedDiscoveryMethods</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start-1">
<db:title>void QBluetoothDeviceDiscoveryAgent::start(QBluetoothDeviceDiscoveryAgent::DiscoveryMethods <db:emphasis>methods</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:methodparam>
<db:type>QBluetoothDeviceDiscoveryAgent::DiscoveryMethods</db:type>
<db:parameter>methods</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void start(QBluetoothDeviceDiscoveryAgent::DiscoveryMethods methods)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts Bluetooth device discovery, if it is not already started and the provided <db:code role="parameter">methods</db:code> are supported. The discovery <db:code role="parameter">methods</db:code> limit the scope of the device search. For example, if the target service or device is a Bluetooth Low Energy device, this function could be used to limit the search to Bluetooth Low Energy devices and thereby reduces the discovery time significantly.</db:para>
<db:note>
<db:para><db:code role="parameter">methods</db:code> only determines the type of discovery and does not imply the filtering of the results. For example, the search may still contain classic bluetooth devices despite <db:code role="parameter">methods</db:code> being set to <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#DiscoveryMethod-enum">LowEnergyMethod</db:link> only. This may happen due to previously cached search results which may be incorporated into the search results.</db:para>
</db:note>
</db:section>
<db:section xml:id="stop">
<db:title>void QBluetoothDeviceDiscoveryAgent::stop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops Bluetooth device discovery. The cancel() signal is emitted once the device discovery is canceled. <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#start">start</db:link>() maybe called before the cancel signal is received. Once <db:link xlink:href="qbluetoothdevicediscoveryagent.xml#start">start</db:link>() has been called the cancel signal from the prior discovery will be discarded.</db:para>
</db:section>
<db:section xml:id="supportedDiscoveryMethods">
<db:title>[static] QBluetoothDeviceDiscoveryAgent::DiscoveryMethods QBluetoothDeviceDiscoveryAgent::supportedDiscoveryMethods()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QBluetoothDeviceDiscoveryAgent::DiscoveryMethods</db:type>
<db:methodname>supportedDiscoveryMethods</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothDeviceDiscoveryAgent::DiscoveryMethods supportedDiscoveryMethods()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns the discovery methods supported by the current platform. It can be used to limit the scope of the device discovery.</db:para>
</db:section>
</db:section>
</db:article>
