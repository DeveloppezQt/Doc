<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SelectionListModel QML Type</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt Virtual Keyboard | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>Provides a data model for the selection lists.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.VirtualKeyboard 2.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qvirtualkeyboardselectionlistmodel.xml">QVirtualKeyboardSelectionListModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>SelectionListModel is part of <db:simplelist><db:member>qtvirtualkeyboard-qml</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-virtualkeyboard-selectionlistmodel.xml">SelectionListModel</db:link> is a data model for word candidates provided by the input method.</db:para>
<db:para>An instance of a <db:link xlink:href="qml-qtquick-virtualkeyboard-selectionlistmodel.xml">SelectionListModel</db:link> cannot be created directly. Instead, the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml">InputEngine</db:link> manages the instances and provides access to the model by <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml#wordCandidateListModel-prop">InputEngine::wordCandidateListModel</db:link> property.</db:para>
<db:para>The model exposes the following data roles for the list delegate:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>display</db:code> Display text for item.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>wordCompletionLength</db:code> Word completion length for item.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>dictionaryType</db:code> Dictionary type of the word, see <db:link xlink:href="qvirtualkeyboardselectionlistmodel.xml#DictionaryType-enum">QVirtualKeyboardSelectionListModel::DictionaryType</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>canRemoveSuggestion</db:code> A boolean indicating if the word can be removed from the dictionary.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:link xlink:href="qml-qtquick-virtualkeyboard-selectionlistmodel.xml#activeItemChanged-signal">activeItemChanged</db:link> signal indicates which item is currently highlighted by the input method. The view should respond to this signal by highlighting the corresponding item in the list.</db:para>
<db:para>The user selection is handled by the <db:link xlink:href="qml-qtquick-virtualkeyboard-selectionlistmodel.xml#selectItem-method">selectItem</db:link>() method. The view should be invoke this method when the user selects an item from the list.</db:para>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="activeItemChanged-signal">
<db:title>void activeItemChanged(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted when the active item in the list changes. The UI should react to this signal by highlighting the item at <db:code role="parameter">index</db:code> in the list.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onActiveItemChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="itemSelected-signal">
<db:title>void itemSelected(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted when an item at <db:code role="parameter">index</db:code> is selected by the user.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onItemSelected</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="removeItem-method">
<db:title>void removeItem(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This method should be called when the user removes an item at position <db:code role="parameter">index</db:code> from the list. The removal is forwarded to the input method for further processing.</db:para>
</db:section>
<db:section xml:id="selectItem-method">
<db:title>void selectItem(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This method should be called when the user selects an item at position <db:code role="parameter">index</db:code> from the list. The selection is forwarded to the input method for further processing.</db:para>
</db:section>
</db:section>
</db:article>
