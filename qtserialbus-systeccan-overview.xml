<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using SystecCAN Plugin</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Overview of how to use the SystecCAN plugin.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The SystecCAN plugin encapsulates the low-level API to work with the <db:link xlink:href="http://www.systec-electronic.com/">SYS TEC</db:link> CAN adapters.</db:para>
<db:para>This plugin requires the SYS TEC CAN device drivers and the usbcan32.dll (usbcan64.dll for 64 bit builds).</db:para>
<db:section xml:id="creating-can-bus-devices">
<db:title>Creating CAN Bus Devices</db:title>
<db:para>At first it is necessary to check that <db:link xlink:href="qcanbus.xml">QCanBus</db:link> provides the desired plugin:</db:para>
<db:programlisting language="cpp">if (QCanBus::instance()-&amp;gt;plugins().contains(QStringLiteral(&quot;systeccan&quot;))) {
    // plugin available
}
</db:programlisting>
<db:para>Where <db:emphasis>systeccan</db:emphasis> is the plugin name.</db:para>
<db:para>Next, a connection to a specific interface can be established:</db:para>
<db:programlisting language="cpp">QString errorString;
QCanBusDevice *device = QCanBus::instance()-&amp;gt;createDevice(
    QStringLiteral(&quot;systeccan&quot;), QStringLiteral(&quot;can0.0&quot;), &amp;amp;errorString);
if (!device) {
    // Error handling goes here
    qDebug &amp;lt;&amp;lt; errorString;
} else {
    device-&amp;gt;connectDevice();
}
</db:programlisting>
<db:para>Where, <db:emphasis>can0.0</db:emphasis> is the active CAN interface name (interface 0, channel 0). The SystecCAN plugin supports 64 USB interfaces (so called modules) from <db:emphasis>can0.0</db:emphasis> to <db:emphasis>can63.1</db:emphasis>. Each module can have one or two channels, they can be accessed by the index canX.0 or canX.1. The <db:link xlink:href="qcanbus.xml#availableDevices">availableDevices</db:link>() method returns a list of currently available devices.</db:para>
<db:note>
<db:para>SYS TEC also provides 8 or 16 channel CAN interfaces. These units consist of an USB hub and multiple two-channel modules internally.</db:para>
</db:note>
<db:para>The device is now open for writing and reading CAN frames:</db:para>
<db:programlisting language="cpp">QCanBusFrame frame;
frame.setFrameId(8);
QByteArray payload(&quot;A36E&quot;);
frame.setPayload(payload);
device-&amp;gt;writeFrame(frame);
</db:programlisting>
<db:para>The reading can be done using the <db:link xlink:href="qcanbusdevice.xml#readFrame">readFrame</db:link>() method. The <db:link xlink:href="qcanbusdevice.xml#framesReceived">framesReceived</db:link>() signal is emitted when at least one new frame is available for reading:</db:para>
<db:programlisting language="cpp">QCanBusFrame frame = device-&amp;gt;readFrame();
</db:programlisting>
<db:para>SystecCAN supports the following configurations that can be controlled through <db:link xlink:href="qcanbusdevice.xml#setConfigurationParameter">setConfigurationParameter</db:link>():</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Configuration parameter key</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">QCanBusDevice::BitRateKey</db:link></db:para>
</db:td>
<db:td>
<db:para>Determines the bit rate of the CAN bus connection. The following bit rates are supported: 10000, 20000, 50000, 100000, 125000, 250000, 500000, 800000, and 1000000. Note that this configuration parameter can only be adjusted while the <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> is not connected.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">QCanBusDevice::ReceiveOwnKey</db:link></db:para>
</db:td>
<db:td>
<db:para>The reception of CAN frames on the same channel that was sending the CAN frame is disabled by default. If this option is enabled, the therefore received frames are marked with <db:link xlink:href="qcanbusframe.xml#hasLocalEcho">QCanBusFrame::hasLocalEcho</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>SystecCAN supports the following additional functions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qcanbusdevice.xml#resetController">QCanBusDevice::resetController</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcanbusdevice.xml#busStatus">QCanBusDevice::busStatus</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
