<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGroupBox Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> widget provides a group box frame with a title.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGroupBox</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGroupBox is part of <db:simplelist><db:member>organizers</db:member><db:member>geomanagement</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/windows-groupbox.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A group box provides a frame, a title on top, a keyboard shortcut, and displays various other widgets inside itself. The keyboard shortcut moves keyboard focus to one of the group box's child widgets.</db:para>
<db:para><db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> also lets you set the <db:link xlink:href="qgroupbox.xml#title-prop">title</db:link> (normally set in the constructor) and the title's <db:link xlink:href="stylesheet-reference.xml#alignment">alignment</db:link>. Group boxes can be <db:link xlink:href="qgroupbox.xml#checkable-prop">checkable</db:link>. Child widgets in checkable group boxes are enabled or disabled depending on whether or not the group box is <db:link xlink:href="qgroupbox.xml#checked-prop">checked</db:link>.</db:para>
<db:para>You can minimize the space consumption of a group box by enabling the <db:link xlink:href="qgroupbox.xml#flat-prop">flat</db:link> property. In most <db:link xlink:href="qstyle.xml">styles</db:link>, enabling this property results in the removal of the left, right and bottom edges of the frame.</db:para>
<db:para><db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> doesn't automatically lay out the child widgets (which are often <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>es or <db:link xlink:href="qradiobutton.xml">QRadioButton</db:link>s but can be any widgets). The following example shows how we can set up a <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> with a layout:</db:para>
<db:programlisting language="cpp">    QGroupBox *groupBox = new QGroupBox(tr(&quot;Exclusive Radio Buttons&quot;));

    QRadioButton *radio1 = new QRadioButton(tr(&quot;&amp;amp;Radio button 1&quot;));
    QRadioButton *radio2 = new QRadioButton(tr(&quot;R&amp;amp;adio button 2&quot;));
    QRadioButton *radio3 = new QRadioButton(tr(&quot;Ra&amp;amp;dio button 3&quot;));

    radio1-&amp;gt;setChecked(true);

    QVBoxLayout *vbox = new QVBoxLayout;
    vbox-&amp;gt;addWidget(radio1);
    vbox-&amp;gt;addWidget(radio2);
    vbox-&amp;gt;addWidget(radio3);
    vbox-&amp;gt;addStretch(1);
    groupBox-&amp;gt;setLayout(vbox);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-groupbox-example.xml">Group Box Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="alignment-prop">
<db:title>alignment : Qt::Alignment</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::Alignment</db:type>
<db:varname>alignment</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">alignment</db:synopsisinfo>
<db:synopsisinfo role="setter">setAlignment</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the alignment of the group box title.</db:para>
<db:para>Most styles place the title at the top of the frame. The horizontal alignment of the title can be specified using single values from the following list:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link> aligns the title text with the left-hand side of the group box.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignRight</db:link> aligns the title text with the right-hand side of the group box.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignHCenter</db:link> aligns the title text with the horizontal center of the group box.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default alignment is <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis role="bold">alignment</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAlignment</db:emphasis>(<db:type>int</db:type> <db:emphasis>alignment</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkable-prop">
<db:title>checkable : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>checkable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isCheckable</db:synopsisinfo>
<db:synopsisinfo role="setter">setCheckable</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the group box has a checkbox in its title</db:para>
<db:para>If this property is <db:code>true</db:code>, the group box displays its title using a checkbox in place of an ordinary label. If the checkbox is checked, the group box's children are enabled; otherwise, they are disabled and inaccessible.</db:para>
<db:para>By default, group boxes are not checkable.</db:para>
<db:para>If this property is enabled for a group box, it will also be initially checked to ensure that its contents are enabled.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isCheckable</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCheckable</db:emphasis>(<db:type>bool</db:type> <db:emphasis>checkable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgroupbox.xml#checked-prop">checked</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checked-prop">
<db:title>checked : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>checked</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isChecked</db:synopsisinfo>
<db:synopsisinfo role="setter">setChecked</db:synopsisinfo>
<db:synopsisinfo role="notifier">toggled</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the group box is checked</db:para>
<db:para>If the group box is checkable, it is displayed with a check box. If the check box is checked, the group box's children are enabled; otherwise, the children are disabled and are inaccessible to the user.</db:para>
<db:para>By default, checkable group boxes are also checked.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isChecked</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setChecked</db:emphasis>(<db:type>bool</db:type> <db:emphasis>checked</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgroupbox.xml#toggled">toggled</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>on</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgroupbox.xml#checkable-prop">checkable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flat-prop">
<db:title>flat : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>flat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isFlat</db:synopsisinfo>
<db:synopsisinfo role="setter">setFlat</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the group box is painted flat or has a frame</db:para>
<db:para>A group box usually consists of a surrounding frame with a title at the top. If this property is enabled, only the top part of the frame is drawn in most styles; otherwise, the whole frame is drawn.</db:para>
<db:para>By default, this property is disabled, i.e., group boxes are not flat unless explicitly specified.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> In some styles, flat and non-flat group boxes have similar representations and may not be as distinguishable as they are in other styles.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isFlat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFlat</db:emphasis>(<db:type>bool</db:type> <db:emphasis>flat</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgroupbox.xml#title-prop">title</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>title</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">title</db:synopsisinfo>
<db:synopsisinfo role="setter">setTitle</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the group box title text</db:para>
<db:para>The group box title text will have a keyboard shortcut if the title contains an ampersand ('&amp;') followed by a letter.</db:para>
<db:programlisting language="cpp">g-&amp;gt;setTitle(&quot;&amp;amp;User information&quot;);
</db:programlisting>
<db:para>In the example above, <db:guilabel>Alt+U</db:guilabel> moves the keyboard focus to the group box. See the <db:link xlink:href="qshortcut.xml#mnemonic">QShortcut</db:link> documentation for details (to display an actual ampersand, use '&amp;&amp;').</db:para>
<db:para>There is no default title text.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">title</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTitle</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>title</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="stylesheet-reference.xml#alignment">alignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGroupBox">
<db:title>[explicit] QGroupBox::QGroupBox(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGroupBox</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGroupBox(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a group box widget with the given <db:code role="parameter">parent</db:code> but with no title.</db:para>
</db:section>
<db:section xml:id="QGroupBox-1">
<db:title>[explicit] QGroupBox::QGroupBox(const QString &amp;<db:emphasis>title</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGroupBox</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGroupBox(const QString &amp;title, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a group box with the given <db:code role="parameter">title</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGroupBox">
<db:title>[virtual] QGroupBox::~QGroupBox()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGroupBox</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGroupBox()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the group box.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QGroupBox::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>changeEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changeEvent(QEvent *ev) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="childEvent">
<db:title>[override virtual protected] void QGroupBox::childEvent(QChildEvent *<db:emphasis>c</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>childEvent</db:methodname>
<db:methodparam>
<db:type>QChildEvent *</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void childEvent(QChildEvent *c) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#childEvent" role="function">QObject::childEvent(QChildEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="clicked">
<db:title>void QGroupBox::clicked(bool <db:emphasis>checked</db:emphasis> = false)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clicked</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>checked</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clicked(bool checked)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the check box is activated (i.e., pressed down then released while the mouse cursor is inside the button), or when the shortcut key is typed. Notably, this signal is <db:emphasis>not</db:emphasis> emitted if you call <db:link xlink:href="qgroupbox.xml#checked-prop">setChecked</db:link>().</db:para>
<db:para>If the check box is checked, <db:code role="parameter">checked</db:code> is true; it is false if the check box is unchecked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgroupbox.xml#checkable-prop">checkable</db:link></db:member>
<db:member><db:link xlink:href="qgroupbox.xml#toggled">toggled</db:link>()</db:member>
<db:member><db:link xlink:href="qgroupbox.xml#checked-prop">checked</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QGroupBox::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QGroupBox::focusInEvent(QFocusEvent *<db:emphasis>fe</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusInEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>fe</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusInEvent(QFocusEvent *fe) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[virtual protected] void QGroupBox::initStyleOption(QStyleOptionGroupBox *<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>initStyleOption</db:methodname>
<db:methodparam>
<db:type>QStyleOptionGroupBox *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initStyleOption(QStyleOptionGroupBox *option) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptiongroupbox.xml">QStyleOptionGroupBox</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QGroupBox::minimumSizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>minimumSizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize minimumSizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#minimumSizeHint-prop" role="property">QWidget::minimumSizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QGroupBox::mouseMoveEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QGroupBox::mousePressEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QGroupBox::mouseReleaseEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QGroupBox::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QGroupBox::resizeEvent(QResizeEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="toggled">
<db:title>void QGroupBox::toggled(bool <db:emphasis>on</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>toggled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">checked</db:synopsisinfo>
<db:synopsisinfo role="signature">void toggled(bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the group box is checkable, this signal is emitted when the check box is toggled. <db:code role="parameter">on</db:code> is true if the check box is checked; otherwise, it is false.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qgroupbox.xml#checked-prop">checked</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgroupbox.xml#checkable-prop">checkable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
