<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QGroupBox Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> widget provides a group box frame with a title.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGroupBox</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGroupBox is part of <db:simplelist><db:member>organizers</db:member><db:member>geomanagement</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A group box provides a frame, a title on top, a keyboard shortcut, and displays various other widgets inside itself. The keyboard shortcut moves keyboard focus to one of the group box's child widgets.</db:para>
<db:para><db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> also lets you set the title (normally set in the constructor) and the title's <db:link xlink:href="stylesheet-reference.xml#alignment">alignment</db:link>. Group boxes can be checkable. Child widgets in checkable group boxes are enabled or disabled depending on whether or not the group box is checked.</db:para>
<db:para>You can minimize the space consumption of a group box by enabling the flat property. In most <db:link xlink:href="qstyle.xml">styles</db:link>, enabling this property results in the removal of the left, right and bottom edges of the frame.</db:para>
<db:para><db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> doesn't automatically lay out the child widgets (which are often <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>es or <db:link xlink:href="qradiobutton.xml">QRadioButton</db:link>s but can be any widgets). The following example shows how we can set up a <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> with a layout:</db:para>
<db:programlisting language="cpp">    QGroupBox *groupBox = new QGroupBox(tr(&quot;Exclusive Radio Buttons&quot;));

    QRadioButton *radio1 = new QRadioButton(tr(&quot;&amp;Radio button 1&quot;));
    QRadioButton *radio2 = new QRadioButton(tr(&quot;R&amp;adio button 2&quot;));
    QRadioButton *radio3 = new QRadioButton(tr(&quot;Ra&amp;dio button 3&quot;));

    radio1-&gt;setChecked(true);

    QVBoxLayout *vbox = new QVBoxLayout;
    vbox-&gt;addWidget(radio1);
    vbox-&gt;addWidget(radio2);
    vbox-&gt;addWidget(radio3);
    vbox-&gt;addStretch(1);
    groupBox-&gt;setLayout(vbox);
</db:programlisting>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-groupbox.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Windows Vista style group box</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/macintosh-groupbox.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Macintosh style group box</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-groupbox.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Fusion style group box</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>A <db:link xlink:href="gallery-windowsvista.xml">Windows Vista style</db:link> group box.</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="gallery-macintosh.xml">Macintosh style</db:link> group box.</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="gallery-fusion.xml">Fusion style</db:link> group box.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-groupbox-example.xml">Group Box Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGroupBox">
<db:title>[explicit] QGroupBox::QGroupBox(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a group box widget with the given <db:code role="parameter">parent</db:code> but with no title.</db:para>
</db:section>
<db:section xml:id="QGroupBox-1">
<db:title>[explicit] QGroupBox::QGroupBox(const QString &amp;<db:emphasis>title</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a group box with the given <db:code role="parameter">title</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGroupBox">
<db:title>[virtual noexcept] QGroupBox::~QGroupBox()</db:title>
<db:para>Destroys the group box.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QGroupBox::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="childEvent">
<db:title>[override virtual protected] void QGroupBox::childEvent(QChildEvent *<db:emphasis>c</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#childEvent" role="function">QObject::childEvent(QChildEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="clicked">
<db:title>[since 4.2] void QGroupBox::clicked(bool <db:emphasis>checked</db:emphasis> = false)</db:title>
<db:para>This signal is emitted when the check box is activated (i.e., pressed down then released while the mouse cursor is inside the button), or when the shortcut key is typed. Notably, this signal is <db:emphasis>not</db:emphasis> emitted if you call setChecked().</db:para>
<db:para>If the check box is checked, <db:code role="parameter">checked</db:code> is true; it is false if the check box is unchecked.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>checkable</db:member>
<db:member><db:link xlink:href="qgroupbox.xml#toggled">toggled</db:link>()</db:member>
<db:member>checked</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QGroupBox::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QGroupBox::focusInEvent(QFocusEvent *<db:emphasis>fe</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[protected] void QGroupBox::initStyleOption(QStyleOptionGroupBox *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptiongroupbox.xml">QStyleOptionGroupBox</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QGroupBox::minimumSizeHint() const</db:title>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QGroupBox::mouseMoveEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QGroupBox::mousePressEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QGroupBox::mouseReleaseEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QGroupBox::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QGroupBox::resizeEvent(QResizeEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="toggled">
<db:title>void QGroupBox::toggled(bool <db:emphasis>on</db:emphasis>)</db:title>
<db:para>If the group box is checkable, this signal is emitted when the check box is toggled. <db:code role="parameter">on</db:code> is true if the check box is checked; otherwise, it is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>checkable</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
