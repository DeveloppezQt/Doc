<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Porting C++ Applications to Qt 6 using Clazy checks</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>We've implemented some checks and fixits within the Clazy framework to help you port your applications from Qt 5 to Qt 6. In their own words: &quot;Clazy is a compiler plugin which allows clang to understand Qt semantics&quot;. Get Clazy (<db:link xlink:href="https://invent.kde.org/sdk/clazy">https://invent.kde.org/sdk/clazy</db:link>) and read on to make porting to Qt 6 smoother.</db:para>
<db:para>Clazy checks can be run as a plugin during compilation or over a JSON compilation database using clazy-standalone. The fixes are applied later, using clang-apply-replacements.</db:para>
<db:section xml:id="clazy-checks-dedicated-to-qt-6-porting">
<db:title>Clazy checks dedicated to Qt 6 porting</db:title>
<db:para>The following checks are dedicated to ease the port from Qt 5 to Qt 6.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>qt6-deprecated-api-fixes</db:para>
</db:listitem>
<db:listitem>
<db:para>qt6-header-fixes</db:para>
</db:listitem>
<db:listitem>
<db:para>qt6-qhash-signature</db:para>
</db:listitem>
<db:listitem>
<db:para>qt6-fwd-fixes</db:para>
</db:listitem>
<db:listitem>
<db:para>missing-qobject-macro</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The checks have to be run against Qt 5. The fixed code is only going to compile against Qt 6. For this reason the above mentioned checks have to be run in one go. Clazy recommends running one test at a time to avoid conflict when applying fixes, but this is not an option when running those checks as a plugin.</db:para>
</db:section>
<db:section xml:id="how-to-apply-clazy-checks">
<db:title>How to apply Clazy checks</db:title>
<db:para>How to set up your project to run with Clazy and how to select and apply the checks is fully explained here: <db:link xlink:href="https://invent.kde.org/sdk/clazy#setting-up-your-project-to-build-with-clazy">https://invent.kde.org/sdk/clazy#setting-up-your-project-to-build-with-clazy</db:link>.</db:para>
<db:para>If you don't want to run the checks as a plugin but rather over a JSON compilation database, you need to use clazy-standalone. Please see <db:link xlink:href="https://invent.kde.org/sdk/clazy#clazy-standalone-and-json-database-support">https://invent.kde.org/sdk/clazy#clazy-standalone-and-json-database-support</db:link> for instructions.</db:para>
<db:para>In a nutshell, assuming you have an up to date Clazy version installed, what needs to be done to run the checks as a plugin is explained below.</db:para>
<db:para>Set up your project to run with Clazy.</db:para>
<db:section xml:id="if-using-qmake">
<db:title>If using qmake</db:title>
<db:para>Add the following lines to your qmake command, as appropriate for your OS:</db:para>
<db:programlisting language="cpp">-spec linux-clang QMAKE_CXX=&quot;clazy&quot;
-spec macx-clang QMAKE_CXX=&quot;clazy&quot;
</db:programlisting>
<db:para>For Windows with MSVC add QMAKE_CXX=&quot;clazy-cl.bat&quot;.</db:para>
<db:para>Run qmake.</db:para>
</db:section>
<db:section xml:id="if-using-cmake">
<db:title>If using CMake</db:title>
<db:para>Add: -DCMAKE_CXX_COMPILER=clazy to the cmake command.</db:para>
<db:para>Run cmake.</db:para>
<db:para>Select the checks:</db:para>
<db:programlisting language="cpp">export CLAZY_CHECKS=&quot;qt6-deprecated-api-fixes,qt6-header-fixes,
qt6-qhash-signature,qt6-qlatin1stringchar-to-u,qt6-fwd-fixes,missing-qobject-macro&quot;
</db:programlisting>
<db:para>Enable the fixits:</db:para>
<db:programlisting language="cpp">export CLAZY_EXPORT_FIXES=ON
</db:programlisting>
<db:para>Set the directories to be ignored by Clazy:</db:para>
<db:programlisting language="cpp">export CLAZY_IGNORE_DIRS=.*lib_dir.*
</db:programlisting>
<db:para>This will prevent Clazy checks from running on the libraries' files. This is necessary if the libraries' paths are included with -I and -F instead of -isystem and -framework. This is also necessary to avoid warnings from qt-header-fixes check, if the headers triggering the check are included in the included libraries' files.</db:para>
<db:para>Compile your code.</db:para>
<db:para>During compilation .yaml files are created next to the source files.</db:para>
<db:para>To apply the fixits, run:</db:para>
<db:programlisting language="cpp">clang-apply-replacements &amp;lt;path_to_yaml_files&amp;gt;
</db:programlisting>
<db:para>This will modify the source files, consider backing up your code.</db:para>
<db:para>If there are some conflicts between the fixits, you will be notified and no file will be changed.</db:para>
<db:para>Not all porting can be done with automatic fixits. Please look carefully at the warnings during compilation for the code that will have to be changed manually.</db:para>
</db:section>
</db:section>
<db:section xml:id="how-to-apply-clazy-checks-within-qt-creator">
<db:title>How to apply Clazy checks within Qt Creator</db:title>
<db:para>You can access Clazy checks within Qt Creator by selecting <db:guilabel>Tools</db:guilabel> &gt; <db:guilabel>Options</db:guilabel> &gt; <db:guilabel>Analyzer</db:guilabel> (or <db:guilabel>Qt Creator</db:guilabel> &gt; <db:guilabel>Preferences</db:guilabel> &gt; <db:guilabel>Analyzer</db:guilabel> on macOS).</db:para>
<db:para>You must create your own configuration and select the Clazy checks dedicated to porting that you can find under Level 2 and Manual Level sections in Qt Creator version 4.14.1, or later. You can use the <db:emphasis>qt6</db:emphasis> filter to locate most of the checks. Be careful to select only the checks present in the above given list.</db:para>
<db:mediaobject>
<db:alt>&quot;Filtering Qt 6 checks&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/qtcreator-clazy-checks-for-porting-to-qt6.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>We recommend that you deselect all other checks, except the porting checks, to make it easier to apply fixits and to avoid unnecessary conflicts.</db:para>
</db:note>
<db:para>To run the checks, select <db:guilabel>Analyze</db:guilabel> &gt; <db:guilabel>Clang-Tidy and Clazy</db:guilabel>.</db:para>
<db:para>For more information about configuring and running Clazy checks, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-clang-tools.html">Qt Creator: Using Clang Tools</db:link>.</db:para>
<db:section xml:id="a-word-of-caution">
<db:title>A word of caution</db:title>
<db:para>Within Qt Creator, conflicts between fixits are not being warned against. If there is more than one fixit on the same line, be careful when applying the fixits.</db:para>
<db:para>Once a fixit has been applied, running the checks again will fail, because the new code will only compile against Qt 6.</db:para>
</db:section>
</db:section>
</db:article>
