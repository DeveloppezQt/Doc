<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> class contains meta-information about Qt objects.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMetaObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMetaObject is part of <db:simplelist><db:member>objectmodel</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Qt <db:link xlink:href="metaobjects.xml#meta-object-system">Meta-Object System</db:link> in Qt is responsible for the signals and slots inter-object communication mechanism, runtime type information, and the Qt property system. A single <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> instance is created for each <db:link xlink:href="qobject.xml">QObject</db:link> subclass that is used in an application, and this instance stores all the meta-information for the <db:link xlink:href="qobject.xml">QObject</db:link> subclass. This object is available as <db:link xlink:href="qobject.xml#metaObject">QObject::metaObject</db:link>().</db:para>
<db:para>This class is not normally required for application programming, but it is useful if you write meta-applications, such as scripting engines or GUI builders.</db:para>
<db:para>The functions you are most likely to find useful are these:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#className">className</db:link>() returns the name of a class.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#superClass">superClass</db:link>() returns the superclass's meta-object.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#method">method</db:link>() and <db:link xlink:href="qmetaobject.xml#methodCount">methodCount</db:link>() provide information about a class's meta-methods (signals, slots and other <db:link xlink:href="qobject.xml#Q_INVOKABLE">invokable</db:link> member functions).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#enumerator">enumerator</db:link>() and <db:link xlink:href="qmetaobject.xml#enumeratorCount">enumeratorCount</db:link>() and provide information about a class's enumerators.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#propertyCount">propertyCount</db:link>() and <db:link xlink:href="qmetaobject.xml#property">property</db:link>() provide information about a class's properties.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#constructor">constructor</db:link>() and <db:link xlink:href="qmetaobject.xml#constructorCount">constructorCount</db:link>() provide information about a class's meta-constructors.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The index functions <db:link xlink:href="qmetaobject.xml#indexOfConstructor">indexOfConstructor</db:link>(), <db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>(), <db:link xlink:href="qmetaobject.xml#indexOfEnumerator">indexOfEnumerator</db:link>(), and <db:link xlink:href="qmetaobject.xml#indexOfProperty">indexOfProperty</db:link>() map names of constructors, member functions, enumerators, or properties to indexes in the meta-object. For example, Qt uses <db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>() internally when you connect a signal to a slot.</db:para>
<db:para>Classes can also have a list of <db:emphasis>name</db:emphasis>â€“<db:emphasis>value</db:emphasis> pairs of additional class information, stored in <db:link xlink:href="qmetaclassinfo.xml">QMetaClassInfo</db:link> objects. The number of pairs is returned by <db:link xlink:href="qmetaobject.xml#classInfoCount">classInfoCount</db:link>(), single pairs are returned by <db:link xlink:href="qmetaobject.xml#classInfo">classInfo</db:link>(), and you can search for pairs with <db:link xlink:href="qmetaobject.xml#indexOfClassInfo">indexOfClassInfo</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaclassinfo.xml">QMetaClassInfo</db:link></db:member>
<db:member><db:link xlink:href="qmetaenum.xml">QMetaEnum</db:link></db:member>
<db:member><db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link></db:member>
<db:member><db:link xlink:href="qmetaproperty.xml">QMetaProperty</db:link></db:member>
<db:member><db:link xlink:href="qmetatype.xml">QMetaType</db:link></db:member>
<db:member><db:link xlink:href="metaobjects.xml#meta-object-system">Meta-Object System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="checkConnectArgs">
<db:title>[static] bool QMetaObject::checkConnectArgs(const char *<db:emphasis>signal</db:emphasis>, const char *<db:emphasis>method</db:emphasis>)</db:title>
<db:para>Returns true if the <db:code role="parameter">signal</db:code> and <db:code role="parameter">method</db:code> arguments are compatible; otherwise returns false.</db:para>
<db:para>Both <db:code role="parameter">signal</db:code> and <db:code role="parameter">method</db:code> are expected to be normalized.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkConnectArgs-1">
<db:title>[static, since 5.0] bool QMetaObject::checkConnectArgs(const QMetaMethod &amp;<db:emphasis>signal</db:emphasis>, const QMetaMethod &amp;<db:emphasis>method</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if the <db:code role="parameter">signal</db:code> and <db:code role="parameter">method</db:code> arguments are compatible; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="classInfo">
<db:title>QMetaClassInfo QMetaObject::classInfo(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the meta-data for the item of class information with the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">class MyClass : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(&quot;author&quot;, &quot;Sabrina Schweinsteiger&quot;)
    Q_CLASSINFO(&quot;url&quot;, &quot;http://doc.moosesoft.co.uk/1.0/&quot;)

public:
    ...
};
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#classInfoCount">classInfoCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#classInfoOffset">classInfoOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfClassInfo">indexOfClassInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="classInfoCount">
<db:title>int QMetaObject::classInfoCount() const</db:title>
<db:para>Returns the number of items of class information in this class.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#classInfo">classInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#classInfoOffset">classInfoOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfClassInfo">indexOfClassInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="classInfoOffset">
<db:title>int QMetaObject::classInfoOffset() const</db:title>
<db:para>Returns the class information offset for this class; i.e. the index position of this class's first class information item.</db:para>
<db:para>If the class has no superclasses with class information, the offset is 0; otherwise the offset is the sum of all the class information items in the class's superclasses.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#classInfo">classInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#classInfoCount">classInfoCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfClassInfo">indexOfClassInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="className">
<db:title>const char *QMetaObject::className() const</db:title>
<db:para>Returns the class name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#superClass">superClass</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connectSlotsByName">
<db:title>[static] void QMetaObject::connectSlotsByName(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Searches recursively for all child objects of the given <db:code role="parameter">object</db:code>, and connects matching signals from them to slots of <db:code role="parameter">object</db:code> that follow the following form:</db:para>
<db:programlisting language="cpp">void on_&lt;object name&gt;_&lt;signal name&gt;(&lt;signal parameters&gt;);
</db:programlisting>
<db:para>Let's assume our object has a child object of type QPushButton with the <db:link xlink:href="">object name</db:link> button1. The slot to catch the button's clicked() signal would be:</db:para>
<db:programlisting language="cpp">void on_button1_clicked();
</db:programlisting>
<db:para>If <db:code role="parameter">object</db:code> itself has a properly set object name, its own signals are also connected to its respective slots.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QObject::setObjectName()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constructor">
<db:title>[since 4.5] QMetaMethod QMetaObject::constructor(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the meta-data for the constructor with the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#constructorCount">constructorCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#newInstance">newInstance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constructorCount">
<db:title>[since 4.5] int QMetaObject::constructorCount() const</db:title>
<db:para>Returns the number of constructors in this class.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#constructor">constructor</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfConstructor">indexOfConstructor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enumerator">
<db:title>QMetaEnum QMetaObject::enumerator(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the meta-data for the enumerator with the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#enumeratorCount">enumeratorCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#enumeratorOffset">enumeratorOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfEnumerator">indexOfEnumerator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enumeratorCount">
<db:title>int QMetaObject::enumeratorCount() const</db:title>
<db:para>Returns the number of enumerators in this class.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#enumerator">enumerator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#enumeratorOffset">enumeratorOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfEnumerator">indexOfEnumerator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enumeratorOffset">
<db:title>int QMetaObject::enumeratorOffset() const</db:title>
<db:para>Returns the enumerator offset for this class; i.e. the index position of this class's first enumerator.</db:para>
<db:para>If the class has no superclasses with enumerators, the offset is 0; otherwise the offset is the sum of all the enumerators in the class's superclasses.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#enumerator">enumerator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#enumeratorCount">enumeratorCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfEnumerator">indexOfEnumerator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfClassInfo">
<db:title>int QMetaObject::indexOfClassInfo(const char *<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Finds class information item <db:code role="parameter">name</db:code> and returns its index; otherwise returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#classInfo">classInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#classInfoCount">classInfoCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#classInfoOffset">classInfoOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfConstructor">
<db:title>[since 4.5] int QMetaObject::indexOfConstructor(const char *<db:emphasis>constructor</db:emphasis>) const</db:title>
<db:para>Finds <db:code role="parameter">constructor</db:code> and returns its index; otherwise returns -1.</db:para>
<db:para>Note that the <db:code role="parameter">constructor</db:code> has to be in normalized form, as returned by <db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#constructor">constructor</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#constructorCount">constructorCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfEnumerator">
<db:title>int QMetaObject::indexOfEnumerator(const char *<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Finds enumerator <db:code role="parameter">name</db:code> and returns its index; otherwise returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#enumerator">enumerator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#enumeratorCount">enumeratorCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#enumeratorOffset">enumeratorOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfMethod">
<db:title>int QMetaObject::indexOfMethod(const char *<db:emphasis>method</db:emphasis>) const</db:title>
<db:para>Finds <db:code role="parameter">method</db:code> and returns its index; otherwise returns -1.</db:para>
<db:para>Note that the <db:code role="parameter">method</db:code> has to be in normalized form, as returned by <db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#method">method</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodCount">methodCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodOffset">methodOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfProperty">
<db:title>int QMetaObject::indexOfProperty(const char *<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Finds property <db:code role="parameter">name</db:code> and returns its index; otherwise returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#propertyCount">propertyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#propertyOffset">propertyOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfSignal">
<db:title>int QMetaObject::indexOfSignal(const char *<db:emphasis>signal</db:emphasis>) const</db:title>
<db:para>Finds <db:code role="parameter">signal</db:code> and returns its index; otherwise returns -1.</db:para>
<db:para>This is the same as <db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>(), except that it will return -1 if the method exists but isn't a signal.</db:para>
<db:para>Note that the <db:code role="parameter">signal</db:code> has to be in normalized form, as returned by <db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#method">method</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodCount">methodCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodOffset">methodOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfSlot">
<db:title>int QMetaObject::indexOfSlot(const char *<db:emphasis>slot</db:emphasis>) const</db:title>
<db:para>Finds <db:code role="parameter">slot</db:code> and returns its index; otherwise returns -1.</db:para>
<db:para>This is the same as <db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>(), except that it will return -1 if the method exists but isn't a slot.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#method">method</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodCount">methodCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodOffset">methodOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invokeMethod">
<db:title>[static] bool QMetaObject::invokeMethod(QObject *<db:emphasis>obj</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis>, QGenericReturnArgument <db:emphasis>ret</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(0), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument())</db:title>
<db:para>Invokes the <db:code role="parameter">member</db:code> (a signal or a slot name) on the object <db:code role="parameter">obj</db:code>. Returns true if the member could be invoked. Returns false if there is no such member or the parameters did not match.</db:para>
<db:para>The invocation can be either synchronous or asynchronous, depending on <db:code role="parameter">type</db:code>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If <db:code role="parameter">type</db:code> is <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::DirectConnection</db:link>, the member will be invoked immediately.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">type</db:code> is <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::QueuedConnection</db:link>, a <db:link xlink:href="qevent.xml">QEvent</db:link> will be sent and the member is invoked as soon as the application enters the main event loop.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">type</db:code> is <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::BlockingQueuedConnection</db:link>, the method will be invoked in the same way as for <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::QueuedConnection</db:link>, except that the current thread will block until the event is delivered. Using this connection type to communicate between objects in the same thread will lead to deadlocks.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">type</db:code> is <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::AutoConnection</db:link>, the member is invoked synchronously if <db:code role="parameter">obj</db:code> lives in the same thread as the caller; otherwise it will invoke the member asynchronously.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The return value of the <db:code role="parameter">member</db:code> function call is placed in <db:code role="parameter">ret</db:code>. If the invocation is asynchronous, the return value cannot be evaluated. You can pass up to ten arguments (<db:code role="parameter">val0</db:code>, <db:code role="parameter">val1</db:code>, <db:code role="parameter">val2</db:code>, <db:code role="parameter">val3</db:code>, <db:code role="parameter">val4</db:code>, <db:code role="parameter">val5</db:code>, <db:code role="parameter">val6</db:code>, <db:code role="parameter">val7</db:code>, <db:code role="parameter">val8</db:code>, and <db:code role="parameter">val9</db:code>) to the <db:code role="parameter">member</db:code> function.</db:para>
<db:para><db:link xlink:href="qgenericargument.xml">QGenericArgument</db:link> and <db:link xlink:href="qgenericreturnargument.xml">QGenericReturnArgument</db:link> are internal helper classes. Because signals and slots can be dynamically invoked, you must enclose the arguments using the <db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>() and <db:link xlink:href="qmetaobject.xml#Q_RETURN_ARG">Q_RETURN_ARG</db:link>() macros. <db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>() takes a type name and a const reference of that type; <db:link xlink:href="qmetaobject.xml#Q_RETURN_ARG">Q_RETURN_ARG</db:link>() takes a type name and a non-const reference.</db:para>
<db:para>You only need to pass the name of the signal or slot to this function, not the entire signature. For example, to asynchronously invoke the <db:link xlink:href="qthread.xml#quit">quit</db:link>() slot on a <db:link xlink:href="qthread.xml">QThread</db:link>, use the following code:</db:para>
<db:programlisting language="cpp">QMetaObject::invokeMethod(thread, &quot;quit&quot;,
                          Qt::QueuedConnection);
</db:programlisting>
<db:para>With asynchronous method invocations, the parameters must be of types that are known to Qt's meta-object system, because Qt needs to copy the arguments to store them in an event behind the scenes. If you try to use a queued connection and get the error message</db:para>
<db:programlisting language="cpp">QMetaObject::invokeMethod: Unable to handle unregistered datatype 'MyType'
</db:programlisting>
<db:para>call qRegisterMetaType() to register the data type before you call invokeMethod().</db:para>
<db:para>To synchronously invoke the compute(QString, int, double) slot on some arbitrary object obj retrieve its return value:</db:para>
<db:programlisting language="cpp">QString retVal;
QMetaObject::invokeMethod(obj, &quot;compute&quot;, Qt::DirectConnection,
                          Q_RETURN_ARG(QString, retVal),
                          Q_ARG(QString, &quot;sqrt&quot;),
                          Q_ARG(int, 42),
                          Q_ARG(double, 9.7));
</db:programlisting>
<db:para>If the &quot;compute&quot; slot does not take exactly one <db:link xlink:href="qstring.xml">QString</db:link>, one int and one double in the specified order, the call will fail.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#Q_RETURN_ARG">Q_RETURN_ARG</db:link>()</db:member>
<db:member><db:link xlink:href="">qRegisterMetaType()</db:link></db:member>
<db:member><db:link xlink:href="">QMetaMethod::invoke()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invokeMethod-1">
<db:title>[static] bool QMetaObject::invokeMethod(QObject *<db:emphasis>obj</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(0), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument())</db:title>
<db:para>This function overloads <db:link xlink:href="qmetaobject.xml#invokeMethod">invokeMethod</db:link>().</db:para>
<db:para>This overload invokes the member using the connection type <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::AutoConnection</db:link> and ignores return values.</db:para>
</db:section>
<db:section xml:id="invokeMethod-2">
<db:title>[static] bool QMetaObject::invokeMethod(QObject *<db:emphasis>obj</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, QGenericReturnArgument <db:emphasis>ret</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(0), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument())</db:title>
<db:para>This function overloads <db:link xlink:href="qmetaobject.xml#invokeMethod">invokeMethod</db:link>().</db:para>
<db:para>This overload always invokes the member using the connection type <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::AutoConnection</db:link>.</db:para>
</db:section>
<db:section xml:id="invokeMethod-3">
<db:title>[static] bool QMetaObject::invokeMethod(QObject *<db:emphasis>obj</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(0), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument())</db:title>
<db:para>This function overloads <db:link xlink:href="qmetaobject.xml#invokeMethod">invokeMethod</db:link>().</db:para>
<db:para>This overload can be used if the return value of the member is of no interest.</db:para>
</db:section>
<db:section xml:id="method">
<db:title>QMetaMethod QMetaObject::method(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the meta-data for the method with the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#methodCount">methodCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodOffset">methodOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="methodCount">
<db:title>int QMetaObject::methodCount() const</db:title>
<db:para>Returns the number of methods in this class, including the number of methods provided by each base class. These include signals and slots as well as normal member functions.</db:para>
<db:para>Use code like the following to obtain a <db:link xlink:href="qstringlist.xml">QStringList</db:link> containing the methods specific to a given class:</db:para>
<db:programlisting language="cpp">const QMetaObject* metaObject = obj-&gt;metaObject();
QStringList methods;
for(int i = metaObject-&gt;methodOffset(); i &lt; metaObject-&gt;methodCount(); ++i)
    methods &lt;&lt; QString::fromLatin1(metaObject-&gt;method(i).methodSignature());
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#method">method</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodOffset">methodOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="methodOffset">
<db:title>int QMetaObject::methodOffset() const</db:title>
<db:para>Returns the method offset for this class; i.e. the index position of this class's first member function.</db:para>
<db:para>The offset is the sum of all the methods in the class's superclasses (which is always positive since <db:link xlink:href="qobject.xml">QObject</db:link> has the deleteLater() slot and a destroyed() signal).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#method">method</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodCount">methodCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="newInstance">
<db:title>[since 4.5] QObject *QMetaObject::newInstance(QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(0), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument()) const</db:title>
<db:para>Constructs a new instance of this class. You can pass up to ten arguments (<db:code role="parameter">val0</db:code>, <db:code role="parameter">val1</db:code>, <db:code role="parameter">val2</db:code>, <db:code role="parameter">val3</db:code>, <db:code role="parameter">val4</db:code>, <db:code role="parameter">val5</db:code>, <db:code role="parameter">val6</db:code>, <db:code role="parameter">val7</db:code>, <db:code role="parameter">val8</db:code>, and <db:code role="parameter">val9</db:code>) to the constructor. Returns the new object, or 0 if no suitable constructor is available.</db:para>
<db:para>Note that only constructors that are declared with the <db:link xlink:href="qobject.xml#Q_INVOKABLE">Q_INVOKABLE</db:link> modifier are made available through the meta-object system.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#constructor">constructor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalizedSignature">
<db:title>[static] QByteArray QMetaObject::normalizedSignature(const char *<db:emphasis>method</db:emphasis>)</db:title>
<db:para>Normalizes the signature of the given <db:code role="parameter">method</db:code>.</db:para>
<db:para>Qt uses normalized signatures to decide whether two given signals and slots are compatible. Normalization reduces whitespace to a minimum, moves 'const' to the front where appropriate, removes 'const' from value types and replaces const references with values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#checkConnectArgs">checkConnectArgs</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#normalizedType">normalizedType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalizedType">
<db:title>[static, since 4.2] QByteArray QMetaObject::normalizedType(const char *<db:emphasis>type</db:emphasis>)</db:title>
<db:para>Normalizes a <db:code role="parameter">type</db:code>.</db:para>
<db:para>See <db:link xlink:href="qmetaobject.xml#normalizedSignature">QMetaObject::normalizedSignature</db:link>() for a description on how Qt normalizes.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QByteArray normType = QMetaObject::normalizedType(&quot; int    const  *&quot;);
// normType is now &quot;const int*&quot;
</db:programlisting>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property">
<db:title>QMetaProperty QMetaObject::property(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the meta-data for the property with the given <db:code role="parameter">index</db:code>. If no such property exists, a null <db:link xlink:href="qmetaproperty.xml">QMetaProperty</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#propertyCount">propertyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#propertyOffset">propertyOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfProperty">indexOfProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyCount">
<db:title>int QMetaObject::propertyCount() const</db:title>
<db:para>Returns the number of properties in this class, including the number of properties provided by each base class.</db:para>
<db:para>Use code like the following to obtain a <db:link xlink:href="qstringlist.xml">QStringList</db:link> containing the properties specific to a given class:</db:para>
<db:programlisting language="cpp">const QMetaObject* metaObject = obj-&gt;metaObject();
QStringList properties;
for(int i = metaObject-&gt;propertyOffset(); i &lt; metaObject-&gt;propertyCount(); ++i)
    properties &lt;&lt; QString::fromLatin1(metaObject-&gt;property(i).name());
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#propertyOffset">propertyOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfProperty">indexOfProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyOffset">
<db:title>int QMetaObject::propertyOffset() const</db:title>
<db:para>Returns the property offset for this class; i.e. the index position of this class's first property.</db:para>
<db:para>The offset is the sum of all the properties in the class's superclasses (which is always positive since <db:link xlink:href="qobject.xml">QObject</db:link> has the name() property).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#propertyCount">propertyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfProperty">indexOfProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="superClass">
<db:title>const QMetaObject *QMetaObject::superClass() const</db:title>
<db:para>Returns the meta-object of the superclass, or 0 if there is no such object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#className">className</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="userProperty">
<db:title>[since 4.2] QMetaProperty QMetaObject::userProperty() const</db:title>
<db:para>Returns the property that has the USER flag set to true.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isUser">QMetaProperty::isUser</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_ARG">
<db:title>QGenericArgument Q_ARG(<db:emphasis>Type</db:emphasis>, const Type &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This macro takes a <db:code role="parameter">Type</db:code> and a <db:code role="parameter">value</db:code> of that type and returns a <db:link xlink:href="qgenericargument.xml">QGenericArgument</db:link> object that can be passed to <db:link xlink:href="qmetaobject.xml#invokeMethod">QMetaObject::invokeMethod</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#Q_RETURN_ARG">Q_RETURN_ARG</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_RETURN_ARG">
<db:title>QGenericReturnArgument Q_RETURN_ARG(<db:emphasis>Type</db:emphasis>, Type &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This macro takes a <db:code role="parameter">Type</db:code> and a non-const reference to a <db:code role="parameter">value</db:code> of that type and returns a <db:link xlink:href="qgenericreturnargument.xml">QGenericReturnArgument</db:link> object that can be passed to <db:link xlink:href="qmetaobject.xml#invokeMethod">QMetaObject::invokeMethod</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
