<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> class contains meta-information about Qt objects.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMetaObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMetaObject is part of <db:simplelist><db:member>objectmodel</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Qt <db:link xlink:href="metaobjects.xml">Meta-Object System</db:link> in Qt is responsible for the signals and slots inter-object communication mechanism, runtime type information, and the Qt property system. A single <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> instance is created for each <db:link xlink:href="qobject.xml">QObject</db:link> subclass that is used in an application, and this instance stores all the meta-information for the <db:link xlink:href="qobject.xml">QObject</db:link> subclass. This object is available as <db:link xlink:href="qobject.xml#metaObject">QObject::metaObject</db:link>().</db:para>
<db:para>This class is not normally required for application programming, but it is useful if you write meta-applications, such as scripting engines or GUI builders.</db:para>
<db:para>The functions you are most likely to find useful are these:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#className">className</db:link>() returns the name of a class.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#superClass">superClass</db:link>() returns the superclass's meta-object.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#method">method</db:link>() and <db:link xlink:href="qmetaobject.xml#methodCount">methodCount</db:link>() provide information about a class's meta-methods (signals, slots and other <db:link xlink:href="qobject.xml#Q_INVOKABLE">invokable</db:link> member functions).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#enumerator">enumerator</db:link>() and <db:link xlink:href="qmetaobject.xml#enumeratorCount">enumeratorCount</db:link>() and provide information about a class's enumerators.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#propertyCount">propertyCount</db:link>() and <db:link xlink:href="qmetaobject.xml#property">property</db:link>() provide information about a class's properties.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#constructor">constructor</db:link>() and <db:link xlink:href="qmetaobject.xml#constructorCount">constructorCount</db:link>() provide information about a class's meta-constructors.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The index functions <db:link xlink:href="qmetaobject.xml#indexOfConstructor">indexOfConstructor</db:link>(), <db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>(), <db:link xlink:href="qmetaobject.xml#indexOfEnumerator">indexOfEnumerator</db:link>(), and <db:link xlink:href="qmetaobject.xml#indexOfProperty">indexOfProperty</db:link>() map names of constructors, member functions, enumerators, or properties to indexes in the meta-object. For example, Qt uses <db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>() internally when you connect a signal to a slot.</db:para>
<db:para>Classes can also have a list of <db:emphasis>name</db:emphasis>â€“<db:emphasis>value</db:emphasis> pairs of additional class information, stored in <db:link xlink:href="qmetaclassinfo.xml">QMetaClassInfo</db:link> objects. The number of pairs is returned by <db:link xlink:href="qmetaobject.xml#classInfoCount">classInfoCount</db:link>(), single pairs are returned by <db:link xlink:href="qmetaobject.xml#classInfo">classInfo</db:link>(), and you can search for pairs with <db:link xlink:href="qmetaobject.xml#indexOfClassInfo">indexOfClassInfo</db:link>().</db:para>
<db:note>
<db:para>Operations that use the meta object system are generally thread- safe, as QMetaObjects are typically static read-only instances generated at compile time. However, if meta objects are dynamically modified by the application (for instance, when using <db:link xlink:href="qqmlpropertymap.xml">QQmlPropertyMap</db:link>), then the application has to explicitly synchronize access to the respective meta object.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaclassinfo.xml">QMetaClassInfo</db:link></db:member>
<db:member><db:link xlink:href="qmetaenum.xml">QMetaEnum</db:link></db:member>
<db:member><db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link></db:member>
<db:member><db:link xlink:href="qmetaproperty.xml">QMetaProperty</db:link></db:member>
<db:member><db:link xlink:href="qmetatype.xml">QMetaType</db:link></db:member>
<db:member><db:link xlink:href="metaobjects.xml">Meta-Object System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="invokeMethod-7">
<db:title>[static, since 6.5] bool QMetaObject::invokeMethod(QObject *<db:emphasis>obj</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, Args &amp;&amp;... <db:emphasis>args</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="invokeMethod-6">[static, since 6.5] bool QMetaObject::invokeMethod(QObject *<db:emphasis>obj</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, QMetaMethodReturnArgument <db:emphasis>ret</db:emphasis>, Args &amp;&amp;... <db:emphasis>args</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="invokeMethod-5">[static, since 6.5] bool QMetaObject::invokeMethod(QObject *<db:emphasis>obj</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis>, Args &amp;&amp;... <db:emphasis>args</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="invokeMethod">[static, since 6.5] bool QMetaObject::invokeMethod(QObject *<db:emphasis>obj</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis>, QMetaMethodReturnArgument <db:emphasis>ret</db:emphasis>, Args &amp;&amp;... <db:emphasis>args</db:emphasis>)</db:bridgehead>
<db:para>Invokes the <db:code role="parameter">member</db:code> (a signal or a slot name) on the object <db:code role="parameter">obj</db:code>. Returns <db:code>true</db:code> if the member could be invoked. Returns <db:code>false</db:code> if there is no such member or the parameters did not match.</db:para>
<db:para>For the overloads with a QMetaMethodReturnArgument parameter, the return value of the <db:code role="parameter">member</db:code> function call is placed in <db:code role="parameter">ret</db:code>. For the overloads without such a member, the return value of the called function (if any) will be discarded. QMetaMethodReturnArgument is an internal type you should not use directly. Instead, use the qReturnArg() function.</db:para>
<db:para>The overloads with a <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::ConnectionType</db:link> <db:code role="parameter">type</db:code> parameter allow explicitly selecting whether the invocation will be synchronous or not:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If <db:code role="parameter">type</db:code> is <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::DirectConnection</db:link>, the member will be invoked immediately in the current thread.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">type</db:code> is <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::QueuedConnection</db:link>, a <db:link xlink:href="qevent.xml">QEvent</db:link> will be sent and the member is invoked as soon as the application enters the event loop in the thread that the <db:code role="parameter">obj</db:code> was created in or was moved to.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">type</db:code> is <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::BlockingQueuedConnection</db:link>, the method will be invoked in the same way as for <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::QueuedConnection</db:link>, except that the current thread will block until the event is delivered. Using this connection type to communicate between objects in the same thread will lead to deadlocks.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">type</db:code> is <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::AutoConnection</db:link>, the member is invoked synchronously if <db:code role="parameter">obj</db:code> lives in the same thread as the caller; otherwise it will invoke the member asynchronously. This is the behavior of the overloads that do not have the <db:code role="parameter">type</db:code> parameter.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You only need to pass the name of the signal or slot to this function, not the entire signature. For example, to asynchronously invoke the <db:link xlink:href="qthread.xml#quit">quit</db:link>() slot on a <db:link xlink:href="qthread.xml">QThread</db:link>, use the following code:</db:para>
<db:programlisting language="cpp">QMetaObject::invokeMethod(thread, &quot;quit&quot;,
                          Qt::QueuedConnection);
</db:programlisting>
<db:para>With asynchronous method invocations, the parameters must be copyable types, because Qt needs to copy the arguments to store them in an event behind the scenes. Since Qt 6.5, this function automatically registers the types being used; however, as a side-effect, it is not possible to make calls using types that are only forward-declared. Additionally, it is not possible to make asynchronous calls that use references to non-const-qualified types as parameters either.</db:para>
<db:para>To synchronously invoke the <db:code>compute(QString, int, double)</db:code> slot on some arbitrary object <db:code>obj</db:code> retrieve its return value:</db:para>
<db:programlisting language="cpp">QString retVal;
QMetaObject::invokeMethod(obj, &quot;compute&quot;, Qt::DirectConnection,
                         qReturnArg(retVal),
                         QString(&quot;sqrt&quot;), 42, 9.7);
</db:programlisting>
<db:para>If the &quot;compute&quot; slot does not take exactly one <db:link xlink:href="qstring.xml">QString</db:link>, one <db:code>int</db:code>, and one <db:code>double</db:code> in the specified order, the call will fail. Note how it was necessary to be explicit about the type of the <db:link xlink:href="qstring.xml">QString</db:link>, as the character literal is not exactly the right type to match. If the method instead took a <db:link xlink:href="qstringview.xml">QStringView</db:link>, a <db:link xlink:href="qttypes.xml#qsizetype-typedef">qsizetype</db:link>, and a <db:code>float</db:code>, the call would need to be written as:</db:para>
<db:programlisting language="cpp">QString retVal;
QMetaObject::invokeMethod(obj, &quot;compute&quot;, Qt::DirectConnection,
                         qReturnArg(retVal),
                         QStringView(&quot;sqrt&quot;), qsizetype(42), 9.7f);
</db:programlisting>
<db:para>The same call can be executed using the <db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>() and <db:link xlink:href="qmetaobject.xml#Q_RETURN_ARG">Q_RETURN_ARG</db:link>() macros, as in:</db:para>
<db:programlisting language="cpp">QString retVal;
QMetaObject::invokeMethod(obj, &quot;compute&quot;, Qt::DirectConnection,
                          Q_RETURN_ARG(QString, retVal),
                          Q_ARG(QString, &quot;sqrt&quot;),
                          Q_ARG(int, 42),
                          Q_ARG(double, 9.7));
</db:programlisting>
<db:para>The macros are kept for compatibility with Qt 6.4 and earlier versions, and can be freely mixed with parameters that do not use the macro. They may be necessary in rare situations when calling a method that used a typedef to forward-declared type as a parameter or the return type.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#Q_RETURN_ARG">Q_RETURN_ARG</db:link>()</db:member>
<db:member><db:link xlink:href="qmetamethod.xml#invoke" role="deprecated">QMetaMethod::invoke</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invokeMethod-9">
<db:title>[static] bool QMetaObject::invokeMethod(QObject *<db:emphasis>context</db:emphasis>, Functor &amp;&amp;<db:emphasis>function</db:emphasis>, FunctorReturnType *<db:emphasis>ret</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="invokeMethod-8">[static] bool QMetaObject::invokeMethod(QObject *<db:emphasis>context</db:emphasis>, Functor &amp;&amp;<db:emphasis>function</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis> = Qt::AutoConnection, FunctorReturnType *<db:emphasis>ret</db:emphasis> = nullptr)</db:bridgehead>
<db:para>Invokes the <db:code role="parameter">function</db:code> in the event loop of <db:code role="parameter">context</db:code>. <db:code role="parameter">function</db:code> can be a functor or a pointer to a member function. Returns <db:code>true</db:code> if the function could be invoked. Returns <db:code>false</db:code> if there is no such function or the parameters did not match. The return value of the function call is placed in <db:code role="parameter">ret</db:code>.</db:para>
<db:para>If <db:code role="parameter">type</db:code> is set, then the function is invoked using that connection type. Otherwise, <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::AutoConnection</db:link> will be used.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="checkConnectArgs">
<db:title>[static] bool QMetaObject::checkConnectArgs(const char *<db:emphasis>signal</db:emphasis>, const char *<db:emphasis>method</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>checkConnectArgs</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool checkConnectArgs(const char *signal, const char *method)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">signal</db:code> and <db:code role="parameter">method</db:code> arguments are compatible; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Both <db:code role="parameter">signal</db:code> and <db:code role="parameter">method</db:code> are expected to be normalized.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkConnectArgs-1">
<db:title>[static] bool QMetaObject::checkConnectArgs(const QMetaMethod &amp;<db:emphasis>signal</db:emphasis>, const QMetaMethod &amp;<db:emphasis>method</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>checkConnectArgs</db:methodname>
<db:methodparam>
<db:type>const QMetaMethod &amp;</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMetaMethod &amp;</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool checkConnectArgs(const QMetaMethod &amp;signal, const QMetaMethod &amp;method)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">signal</db:code> and <db:code role="parameter">method</db:code> arguments are compatible; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="classInfo">
<db:title>QMetaClassInfo QMetaObject::classInfo(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMetaClassInfo</db:type>
<db:methodname>classInfo</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaClassInfo classInfo(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the meta-data for the item of class information with the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">class MyClass : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(&quot;author&quot;, &quot;Sabrina Schweinsteiger&quot;)
    Q_CLASSINFO(&quot;url&quot;, &quot;http://doc.moosesoft.co.uk/1.0/&quot;)

public:
    ...
};
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#classInfoCount">classInfoCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#classInfoOffset">classInfoOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfClassInfo">indexOfClassInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="classInfoCount">
<db:title>int QMetaObject::classInfoCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>classInfoCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int classInfoCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of items of class information in this class.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#classInfo">classInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#classInfoOffset">classInfoOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfClassInfo">indexOfClassInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="classInfoOffset">
<db:title>int QMetaObject::classInfoOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>classInfoOffset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int classInfoOffset() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the class information offset for this class; i.e. the index position of this class's first class information item.</db:para>
<db:para>If the class has no superclasses with class information, the offset is 0; otherwise the offset is the sum of all the class information items in the class's superclasses.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#classInfo">classInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#classInfoCount">classInfoCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfClassInfo">indexOfClassInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="className">
<db:title>const char *QMetaObject::className() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const char *</db:type>
<db:methodname>className</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const char * className() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the class name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#superClass">superClass</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connectSlotsByName">
<db:title>[static] void QMetaObject::connectSlotsByName(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>connectSlotsByName</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void connectSlotsByName(QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches recursively for all child objects of the given <db:code role="parameter">object</db:code>, and connects matching signals from them to slots of <db:code role="parameter">object</db:code> that follow the following form:</db:para>
<db:programlisting language="cpp">void on_&amp;lt;object name&amp;gt;_&amp;lt;signal name&amp;gt;(&amp;lt;signal parameters&amp;gt;);
</db:programlisting>
<db:para>Let's assume our object has a child object of type <db:code>QPushButton</db:code> with the <db:link xlink:href="qobject.xml#objectName-prop">object name</db:link> <db:code>button1</db:code>. The slot to catch the button's <db:code>clicked()</db:code> signal would be:</db:para>
<db:programlisting language="cpp">void on_button1_clicked();
</db:programlisting>
<db:para>If <db:code role="parameter">object</db:code> itself has a properly set object name, its own signals are also connected to its respective slots.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#setObjectName">QObject::setObjectName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constructor">
<db:title>QMetaMethod QMetaObject::constructor(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMetaMethod</db:type>
<db:methodname>constructor</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaMethod constructor(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the meta-data for the constructor with the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#constructorCount">constructorCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#newInstance" role="deprecated">newInstance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constructorCount">
<db:title>int QMetaObject::constructorCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>constructorCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int constructorCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of constructors in this class.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#constructor">constructor</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfConstructor">indexOfConstructor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enumerator">
<db:title>QMetaEnum QMetaObject::enumerator(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMetaEnum</db:type>
<db:methodname>enumerator</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaEnum enumerator(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the meta-data for the enumerator with the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#enumeratorCount">enumeratorCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#enumeratorOffset">enumeratorOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfEnumerator">indexOfEnumerator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enumeratorCount">
<db:title>int QMetaObject::enumeratorCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>enumeratorCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int enumeratorCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of enumerators in this class.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#enumerator">enumerator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#enumeratorOffset">enumeratorOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfEnumerator">indexOfEnumerator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enumeratorOffset">
<db:title>int QMetaObject::enumeratorOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>enumeratorOffset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int enumeratorOffset() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the enumerator offset for this class; i.e. the index position of this class's first enumerator.</db:para>
<db:para>If the class has no superclasses with enumerators, the offset is 0; otherwise the offset is the sum of all the enumerators in the class's superclasses.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#enumerator">enumerator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#enumeratorCount">enumeratorCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfEnumerator">indexOfEnumerator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfClassInfo">
<db:title>int QMetaObject::indexOfClassInfo(const char *<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOfClassInfo</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOfClassInfo(const char *name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds class information item <db:code role="parameter">name</db:code> and returns its index; otherwise returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#classInfo">classInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#classInfoCount">classInfoCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#classInfoOffset">classInfoOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfConstructor">
<db:title>int QMetaObject::indexOfConstructor(const char *<db:emphasis>constructor</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOfConstructor</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>constructor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOfConstructor(const char *constructor) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds <db:code role="parameter">constructor</db:code> and returns its index; otherwise returns -1.</db:para>
<db:para>Note that the <db:code role="parameter">constructor</db:code> has to be in normalized form, as returned by <db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#constructor">constructor</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#constructorCount">constructorCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfEnumerator">
<db:title>int QMetaObject::indexOfEnumerator(const char *<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOfEnumerator</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOfEnumerator(const char *name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds enumerator <db:code role="parameter">name</db:code> and returns its index; otherwise returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#enumerator">enumerator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#enumeratorCount">enumeratorCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#enumeratorOffset">enumeratorOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfMethod">
<db:title>int QMetaObject::indexOfMethod(const char *<db:emphasis>method</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOfMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOfMethod(const char *method) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds <db:code role="parameter">method</db:code> and returns its index; otherwise returns -1.</db:para>
<db:para>Note that the <db:code role="parameter">method</db:code> has to be in normalized form, as returned by <db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#method">method</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodCount">methodCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodOffset">methodOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfProperty">
<db:title>int QMetaObject::indexOfProperty(const char *<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOfProperty</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOfProperty(const char *name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds property <db:code role="parameter">name</db:code> and returns its index; otherwise returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#propertyCount">propertyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#propertyOffset">propertyOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfSignal">
<db:title>int QMetaObject::indexOfSignal(const char *<db:emphasis>signal</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOfSignal</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOfSignal(const char *signal) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds <db:code role="parameter">signal</db:code> and returns its index; otherwise returns -1.</db:para>
<db:para>This is the same as <db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>(), except that it will return -1 if the method exists but isn't a signal.</db:para>
<db:para>Note that the <db:code role="parameter">signal</db:code> has to be in normalized form, as returned by <db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#method">method</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodCount">methodCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodOffset">methodOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOfSlot">
<db:title>int QMetaObject::indexOfSlot(const char *<db:emphasis>slot</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOfSlot</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>slot</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOfSlot(const char *slot) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds <db:code role="parameter">slot</db:code> and returns its index; otherwise returns -1.</db:para>
<db:para>This is the same as <db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>(), except that it will return -1 if the method exists but isn't a slot.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#method">method</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodCount">methodCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodOffset">methodOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inherits">
<db:title>bool QMetaObject::inherits(const QMetaObject *<db:emphasis>metaObject</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>inherits</db:methodname>
<db:methodparam>
<db:type>const QMetaObject *</db:type>
<db:parameter>metaObject</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool inherits(const QMetaObject *metaObject) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the class described by this <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> inherits the type described by <db:code role="parameter">metaObject</db:code>; otherwise returns false.</db:para>
<db:para>A type is considered to inherit itself.</db:para>
</db:section>
<db:section xml:id="metaType">
<db:title>[since 6.2] QMetaType QMetaObject::metaType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMetaType</db:type>
<db:methodname>metaType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaType metaType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the metatype corresponding to this metaobject. If the metaobject originates from a namespace, an invalid metatype is returned.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="method">
<db:title>QMetaMethod QMetaObject::method(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMetaMethod</db:type>
<db:methodname>method</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaMethod method(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the meta-data for the method with the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#methodCount">methodCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodOffset">methodOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="methodCount">
<db:title>int QMetaObject::methodCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>methodCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int methodCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of methods in this class, including the number of methods provided by each base class. These include signals and slots as well as normal member functions.</db:para>
<db:para>Use code like the following to obtain a <db:link xlink:href="qstringlist.xml">QStringList</db:link> containing the methods specific to a given class:</db:para>
<db:programlisting language="cpp">const QMetaObject* metaObject = obj-&amp;gt;metaObject();
QStringList methods;
for(int i = metaObject-&amp;gt;methodOffset(); i &amp;lt; metaObject-&amp;gt;methodCount(); ++i)
    methods &amp;lt;&amp;lt; QString::fromLatin1(metaObject-&amp;gt;method(i).methodSignature());
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#method">method</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodOffset">methodOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="methodOffset">
<db:title>int QMetaObject::methodOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>methodOffset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int methodOffset() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the method offset for this class; i.e. the index position of this class's first member function.</db:para>
<db:para>The offset is the sum of all the methods in the class's superclasses (which is always positive since <db:link xlink:href="qobject.xml">QObject</db:link> has the deleteLater() slot and a destroyed() signal).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#method">method</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#methodCount">methodCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfMethod">indexOfMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="newInstance-1">
<db:title>[since 6.5] QObject *QMetaObject::newInstance(Args &amp;&amp;... <db:emphasis>arguments</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>newInstance</db:methodname>
<db:methodparam>
<db:type>Args &amp;&amp;...</db:type>
<db:parameter>arguments</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * newInstance(Args &amp;&amp;... arguments) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a new instance of this class and returns the new object, or <db:code>nullptr</db:code> if no suitable constructor is available. The types of the arguments <db:code role="parameter">arguments</db:code> will be used to find a matching constructor, and then forwarded to it the same way signal-slot connections do.</db:para>
<db:para>Note that only constructors that are declared with the <db:link xlink:href="qobject.xml#Q_INVOKABLE">Q_INVOKABLE</db:link> modifier are made available through the meta-object system.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#constructor">constructor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalizedSignature">
<db:title>[static] QByteArray QMetaObject::normalizedSignature(const char *<db:emphasis>method</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>normalizedSignature</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray normalizedSignature(const char *method)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Normalizes the signature of the given <db:code role="parameter">method</db:code>.</db:para>
<db:para>Qt uses normalized signatures to decide whether two given signals and slots are compatible. Normalization reduces whitespace to a minimum, moves 'const' to the front where appropriate, removes 'const' from value types and replaces const references with values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#checkConnectArgs">checkConnectArgs</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#normalizedType">normalizedType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalizedType">
<db:title>[static] QByteArray QMetaObject::normalizedType(const char *<db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>normalizedType</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray normalizedType(const char *type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Normalizes a <db:code role="parameter">type</db:code>.</db:para>
<db:para>See <db:link xlink:href="qmetaobject.xml#normalizedSignature">QMetaObject::normalizedSignature</db:link>() for a description on how Qt normalizes.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QByteArray normType = QMetaObject::normalizedType(&quot; int    const  *&quot;);
// normType is now &quot;const int*&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#normalizedSignature">normalizedSignature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property">
<db:title>QMetaProperty QMetaObject::property(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMetaProperty</db:type>
<db:methodname>property</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaProperty property(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the meta-data for the property with the given <db:code role="parameter">index</db:code>. If no such property exists, a null <db:link xlink:href="qmetaproperty.xml">QMetaProperty</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#propertyCount">propertyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#propertyOffset">propertyOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfProperty">indexOfProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyCount">
<db:title>int QMetaObject::propertyCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>propertyCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int propertyCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of properties in this class, including the number of properties provided by each base class.</db:para>
<db:para>Use code like the following to obtain a <db:link xlink:href="qstringlist.xml">QStringList</db:link> containing the properties specific to a given class:</db:para>
<db:programlisting language="cpp">const QMetaObject* metaObject = obj-&amp;gt;metaObject();
QStringList properties;
for(int i = metaObject-&amp;gt;propertyOffset(); i &amp;lt; metaObject-&amp;gt;propertyCount(); ++i)
    properties &amp;lt;&amp;lt; QString::fromLatin1(metaObject-&amp;gt;property(i).name());
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#propertyOffset">propertyOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfProperty">indexOfProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyOffset">
<db:title>int QMetaObject::propertyOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>propertyOffset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int propertyOffset() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the property offset for this class; i.e. the index position of this class's first property.</db:para>
<db:para>The offset is the sum of all the properties in the class's superclasses (which is always positive since <db:link xlink:href="qobject.xml">QObject</db:link> has the name() property).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#propertyCount">propertyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#indexOfProperty">indexOfProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="superClass">
<db:title>const QMetaObject *QMetaObject::superClass() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QMetaObject *</db:type>
<db:methodname>superClass</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QMetaObject * superClass() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the meta-object of the superclass, or <db:code>nullptr</db:code> if there is no such object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#className">className</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="userProperty">
<db:title>QMetaProperty QMetaObject::userProperty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMetaProperty</db:type>
<db:methodname>userProperty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaProperty userProperty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the property that has the <db:code>USER</db:code> flag set to true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isUser">QMetaProperty::isUser</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_ARG">
<db:title>QMetaMethodArgument Q_ARG(<db:emphasis>Type</db:emphasis>, const Type &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_ARG</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>Type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const Type &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaMethodArgument Q_ARG(Type, const Type &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro takes a <db:code role="parameter">Type</db:code> and a <db:code role="parameter">value</db:code> of that type and returns a QMetaMethodArgument, which can be passed to the template <db:link xlink:href="qmetaobject.xml#invokeMethod">QMetaObject::invokeMethod</db:link>() with the <db:code>Args &amp;&amp;...</db:code> arguments.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#Q_RETURN_ARG">Q_RETURN_ARG</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_RETURN_ARG">
<db:title>QMetaMethodReturnArgument Q_RETURN_ARG(<db:emphasis>Type</db:emphasis>, Type &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_RETURN_ARG</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>Type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Type &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaMethodReturnArgument Q_RETURN_ARG(Type, Type &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro takes a <db:code role="parameter">Type</db:code> and a non-const reference to a <db:code role="parameter">value</db:code> of that type and returns a QMetaMethodReturnArgument, which can be passed to the template <db:link xlink:href="qmetaobject.xml#invokeMethod">QMetaObject::invokeMethod</db:link>() with the <db:code>Args &amp;&amp;...</db:code> arguments.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QMetaObject</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="invokeMethod-1">
<db:title>[static] bool QMetaObject::invokeMethod(QObject *<db:emphasis>obj</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis>, QGenericReturnArgument <db:emphasis>ret</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(nullptr), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>invokeMethod</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>member</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ConnectionType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGenericReturnArgument</db:type>
<db:parameter>ret</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val0</db:parameter>
<db:initializer>QGenericArgument(nullptr)</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val1</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val2</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val3</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val4</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val5</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val6</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val7</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val8</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val9</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool invokeMethod(QObject *obj, const char *member, Qt::ConnectionType type, QGenericReturnArgument ret, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Please use the variadic overload of this function</db:para>
<db:para>Invokes the <db:code role="parameter">member</db:code> (a signal or a slot name) on the object <db:code role="parameter">obj</db:code>. Returns <db:code>true</db:code> if the member could be invoked. Returns <db:code>false</db:code> if there is no such member or the parameters did not match.</db:para>
<db:para>See the variadic <db:link xlink:href="qmetaobject.xml#invokeMethod">invokeMethod</db:link>() function for more information. This function should behave the same way as that one, with the following limitations:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The number of parameters is limited to 10.</db:para>
</db:listitem>
<db:listitem>
<db:para>Parameter names may need to be an exact string match.</db:para>
</db:listitem>
<db:listitem>
<db:para>Meta types are not automatically registered.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>With asynchronous method invocations, the parameters must be of types that are already known to Qt's meta-object system, because Qt needs to copy the arguments to store them in an event behind the scenes. If you try to use a queued connection and get the error message</db:para>
<db:programlisting language="cpp">QMetaObject::invokeMethod: Unable to handle unregistered datatype 'MyType'
</db:programlisting>
<db:para>call <db:link xlink:href="qmetatype.xml#qRegisterMetaType-3">qRegisterMetaType</db:link>() to register the data type before you call <db:link xlink:href="qmetaobject.xml#invokeMethod">invokeMethod</db:link>().</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#Q_RETURN_ARG">Q_RETURN_ARG</db:link>()</db:member>
<db:member><db:link xlink:href="qmetatype.xml#qRegisterMetaType-3">qRegisterMetaType</db:link>()</db:member>
<db:member><db:link xlink:href="qmetamethod.xml#invoke">QMetaMethod::invoke</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invokeMethod-2">
<db:title>[static] bool QMetaObject::invokeMethod(QObject *<db:emphasis>obj</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, QGenericReturnArgument <db:emphasis>ret</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(0), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>invokeMethod</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>member</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGenericReturnArgument</db:type>
<db:parameter>ret</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val0</db:parameter>
<db:initializer>QGenericArgument(0)</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val1</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val2</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val3</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val4</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val5</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val6</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val7</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val8</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val9</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool invokeMethod(QObject *obj, const char *member, QGenericReturnArgument ret, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Please use the variadic overload of this function.</db:para>
<db:para>This function overloads <db:link xlink:href="qmetaobject.xml#invokeMethod">invokeMethod</db:link>().</db:para>
<db:para>This overload always invokes the member using the connection type <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::AutoConnection</db:link>.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="invokeMethod-3">
<db:title>[static] bool QMetaObject::invokeMethod(QObject *<db:emphasis>obj</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(0), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>invokeMethod</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>member</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ConnectionType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val0</db:parameter>
<db:initializer>QGenericArgument(0)</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val1</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val2</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val3</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val4</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val5</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val6</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val7</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val8</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val9</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool invokeMethod(QObject *obj, const char *member, Qt::ConnectionType type, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Please use the variadic overload of this function.</db:para>
<db:para>This function overloads <db:link xlink:href="qmetaobject.xml#invokeMethod">invokeMethod</db:link>().</db:para>
<db:para>This overload can be used if the return value of the member is of no interest.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="invokeMethod-4">
<db:title>[static] bool QMetaObject::invokeMethod(QObject *<db:emphasis>obj</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(0), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>invokeMethod</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>member</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val0</db:parameter>
<db:initializer>QGenericArgument(0)</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val1</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val2</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val3</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val4</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val5</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val6</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val7</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val8</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val9</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool invokeMethod(QObject *obj, const char *member, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Please use the variadic overload of this function.</db:para>
<db:para>This function overloads <db:link xlink:href="qmetaobject.xml#invokeMethod">invokeMethod</db:link>().</db:para>
<db:para>This overload invokes the member using the connection type <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::AutoConnection</db:link> and ignores return values.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="newInstance">
<db:title>QObject *QMetaObject::newInstance(QGenericArgument <db:emphasis>val0</db:emphasis>, QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>newInstance</db:methodname>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val0</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val1</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val2</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val3</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val4</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val5</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val6</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val7</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val8</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QGenericArgument</db:type>
<db:parameter>val9</db:parameter>
<db:initializer>QGenericArgument()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * newInstance(QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Please use the variadic overload of this function</db:para>
<db:para>Constructs a new instance of this class. You can pass up to ten arguments (<db:code role="parameter">val0</db:code>, <db:code role="parameter">val1</db:code>, <db:code role="parameter">val2</db:code>, <db:code role="parameter">val3</db:code>, <db:code role="parameter">val4</db:code>, <db:code role="parameter">val5</db:code>, <db:code role="parameter">val6</db:code>, <db:code role="parameter">val7</db:code>, <db:code role="parameter">val8</db:code>, and <db:code role="parameter">val9</db:code>) to the constructor. Returns the new object, or <db:code>nullptr</db:code> if no suitable constructor is available.</db:para>
<db:para>Note that only constructors that are declared with the <db:link xlink:href="qobject.xml#Q_INVOKABLE">Q_INVOKABLE</db:link> modifier are made available through the meta-object system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#constructor">constructor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
