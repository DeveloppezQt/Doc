<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtMultimedia QML Type</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a global object with useful functions from Qt Multimedia.</db:para>
<db:para>This type was introduced in QtMultimedia 5.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtMultimedia 5.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtMultimedia 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QtMultimedia is part of <db:simplelist><db:member>multimedia_qml</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:code>QtMultimedia</db:code> object is a global object with utility functions and properties.</db:para>
<db:para>It is not instantiable; to use it, call the members of the global <db:code>QtMultimedia</db:code> object directly. For example:</db:para>
<db:programlisting language="qml">Camera {
    deviceId: QtMultimedia.defaultCamera.deviceId
}
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="availableCameras-prop">
<db:title>[read-only] availableCameras : list&lt;object&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;object&gt;</db:type>
<db:varname>availableCameras</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property provides information about the cameras available on the system.</db:para>
<db:para>Each object in the list has the following properties:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:code>deviceId</db:code></db:para>
</db:td>
<db:td>
<db:para>This read-only property holds the unique identifier of the camera.</db:para>
<db:para>You can choose which device to use with a <db:link xlink:href="qml-qtmultimedia-camera.xml">Camera</db:link> object by setting its <db:link xlink:href="qml-qtmultimedia-camera.xml#deviceId-prop">deviceId</db:link> property to this value.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>displayName</db:code></db:para>
</db:td>
<db:td>
<db:para>This read-only property holds the human-readable name of the camera. You can use this property to display the name of the camera in a user interface.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>position</db:code></db:para>
</db:td>
<db:td>
<db:para>This read-only property holds the physical position of the camera on the hardware system. Please see <db:link xlink:href="qml-qtmultimedia-camera.xml#position-prop">Camera.position</db:link> for more information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>orientation</db:code></db:para>
</db:td>
<db:td>
<db:para>This read-only property holds the physical orientation of the camera sensor. Please see <db:link xlink:href="qml-qtmultimedia-camera.xml#orientation-prop">Camera.orientation</db:link> for more information.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>This property is static; it is not updated when cameras are added or removed from the system, like USB cameras on a desktop platform.</db:para>
</db:note>
<db:para>The following example shows how to display a list of available cameras. The user can change the active camera by selecting one of the items in the list.</db:para>
<db:programlisting language="qml">Item {

    Camera {
        id: camera
    }

    VideoOutput {
        anchors.fill: parent
        source: camera
    }

    ListView {
        anchors.fill: parent

        model: QtMultimedia.availableCameras
        delegate: Text {
            text: modelData.displayName

            MouseArea {
                anchors.fill: parent
                onClicked: camera.deviceId = modelData.deviceId
            }
        }
    }
}

</db:programlisting>
</db:section>
<db:section xml:id="defaultCamera-prop">
<db:title>[read-only] defaultCamera : object</db:title>
<db:fieldsynopsis>
<db:type>object</db:type>
<db:varname>defaultCamera</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The <db:code>defaultCamera</db:code> object provides information about the default camera on the system.</db:para>
<db:para>Its properties are <db:code>deviceId</db:code>, <db:code>displayName</db:code>, <db:code>position</db:code> and <db:code>orientation</db:code>. See <db:link xlink:href="qml-qtmultimedia-qtmultimedia.xml#availableCameras-prop">availableCameras</db:link> for a description of each of them.</db:para>
<db:para>If there is no default camera, <db:code>defaultCamera.deviceId</db:code> will contain an empty string.</db:para>
<db:note>
<db:para>This property is static; it is not updated if the system's default camera changes after the application started.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="convertVolume-method">
<db:title>[since 5.8] real convertVolume(real <db:emphasis>volume</db:emphasis>, VolumeScale <db:emphasis>from</db:emphasis>, VolumeScale <db:emphasis>to</db:emphasis>)</db:title>
<db:para>Converts an audio <db:code role="parameter">volume</db:code> <db:code role="parameter">from</db:code> a volume scale <db:code role="parameter">to</db:code> another, and returns the result.</db:para>
<db:para>Depending on the context, different scales are used to represent audio volume. All Qt Multimedia classes that have an audio volume use a linear scale, the reason is that the loudness of a speaker is controlled by modulating its voltage on a linear scale. The human ear on the other hand, perceives loudness in a logarithmic way. Using a logarithmic scale for volume controls is therefore appropriate in most applications. The decibel scale is logarithmic by nature and is commonly used to define sound levels, it is usually used for UI volume controls in professional audio applications. The cubic scale is a computationally cheap approximation of a logarithmic scale, it provides more control over lower volume levels.</db:para>
<db:para>Valid values for <db:code role="parameter">from</db:code> and <db:code role="parameter">to</db:code> are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtmultimedia-module.xml">QtMultimedia</db:link>.LinearVolumeScale - Linear scale. <db:code>0.0</db:code> (0%) is silence and <db:code>1.0</db:code> (100%) is full volume. All Qt Multimedia types that have an audio volume use a linear scale.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtmultimedia-module.xml">QtMultimedia</db:link>.CubicVolumeScale - Cubic scale. <db:code>0.0</db:code> (0%) is silence and <db:code>1.0</db:code> (100%) is full volume.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtmultimedia-module.xml">QtMultimedia</db:link>.LogarithmicVolumeScale - Logarithmic scale. <db:code>0.0</db:code> (0%) is silence and <db:code>1.0</db:code> (100%) is full volume. UI volume controls should usually use a logarithmic scale.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtmultimedia-module.xml">QtMultimedia</db:link>.DecibelVolumeScale - Decibel (dB, amplitude) logarithmic scale. <db:code>-200</db:code> is silence and <db:code>0</db:code> is full volume.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The following example shows how the volume value from a UI volume control can be converted so that the perceived increase in loudness is the same when increasing the volume control from 0.2 to 0.3 as it is from 0.5 to 0.6:</db:para>
<db:programlisting language="cpp">Slider {
    id: volumeSlider

    property real volume: QtMultimedia.convertVolume(volumeSlider.value,
                                                     QtMultimedia.LogarithmicVolumeScale,
                                                     QtMultimedia.LinearVolumeScale)
}

MediaPlayer {
    volume: volumeSlider.volume
}
</db:programlisting>
<db:para>This method was introduced in Qt 5.8.</db:para>
</db:section>
</db:section>
</db:article>
