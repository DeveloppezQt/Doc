<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Developers</db:title>
<db:productname>QtLinguist</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Linguist Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="linguist-translating-multiple-languages.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Translating multiple languages simultaneously"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="linguist-ts-file-format.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="TS file format"/></db:extendedlink>
<db:abstract>
<db:para>Qt Linguist Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/front-coding.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Design your application so that it can be adapted to various languages and regions without engineering changes. For more information, see:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="internationalization.xml">Internationalization with Qt</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml">Writing Source Code for Translation</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="localization.xml">Localizing Applications</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You can use Qt Creator wizard templates to create Qt widget-based projects with translation support. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-project-creating.html">Qt Creator: Creating Projects</db:link>.</db:para>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>The following examples illustrate how to prepare Qt applications for translation:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtlinguist-hellotr-example.xml">Hello tr()</db:link> is a C++ application that demonstrates the creation of a <db:link xlink:href="qtranslator.xml">QTranslator</db:link> object. It also shows the simplest use of the <db:code>tr()</db:code> function to mark user-visible source text for translation.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtlinguist-arrowpad-example.xml">Arrow Pad</db:link> is a C++ application that demonstrates how to make the application load translations depending on the current locale. It also shows the use of the two-argument form of <db:code>tr()</db:code> which provides additional information to the translator.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtlinguist-trollprint-example.xml">Troll Print</db:link> is a C++ application that demonstrates how to distinguish identical source text in the same context. It also shows how minimize the translator's work when an application is upgraded.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-qml-i18n-example.xml">Qt Quick I18N</db:link> demonstrates how to internationalize Qt Quick applications.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The following video shows how to internationalize and localize a simple example application:</db:para>
<db:mediaobject>
<db:videoobject>
<?db video="iframe"?>
<db:videodata format="youtube" fileref="xNIz78IPBu0">
</db:videodata>
</db:videoobject>
<db:imageobject>
<db:imagedata fileref="images/xNIz78IPBu0.jpg">
</db:imagedata>
</db:imageobject>
</db:mediaobject>
</db:section>
</db:article>
