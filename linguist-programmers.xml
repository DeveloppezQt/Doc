<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Linguist Manual: Developers</db:title>
<db:productname>QtLinguist</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Linguist Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="linguist-translators.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt Linguist Manual: Translators"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="linguist-ts-file-format.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Qt Linguist Manual: TS File Format"/></db:extendedlink>
<db:abstract>
<db:para>Qt Linguist Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>{Qt Linguist Manual}{Contents}</db:para>
<db:para>Support for multiple languages is extremely simple in Qt applications, and adds little overhead to the developer's workload.</db:para>
<db:para>Qt minimizes the performance cost of using translations by translating the phrases for each window as they are created. In most applications the main window is created just once. Dialogs are often created once and then shown and hidden as required. Once the initial translation has taken place there is no further runtime overhead for the translated windows. Only those windows that are created, destroyed and subsequently created will have a translation performance cost.</db:para>
<db:para>Creating applications that can switch language at runtime is possible with Qt, but requires a certain amount of developer intervention and will of course incur some runtime performance cost.</db:para>
<db:section xml:id="specifying-translation-sources-in-qt-project-files">
<db:title>Specifying Translation Sources in Qt Project Files</db:title>
<db:para>To enable release managers to use lupdate and lrelease, specify a <db:code>.pro</db:code> Qt project file. There must be an entry in the <db:code>TRANSLATIONS</db:code> section of the project file for each language that is additional to the native language. A typical entry looks like this:</db:para>
<db:programlisting language="cpp">TRANSLATIONS = arrowpad_fr.ts \
               arrowpad_nl.ts
</db:programlisting>
<db:para>Using a locale within the translation file name is useful for determining which language to load at runtime. For more information, see <db:link xlink:href="qlocale.xml">QLocale</db:link>.</db:para>
<db:para>The <db:code>lupdate</db:code> tool extracts user interface strings from your application. It reads the application .pro file to identify which source files contain text to be translated. This means your source files must be listed in the <db:code>SOURCES</db:code> or <db:code>HEADERS</db:code> entry in the .pro file, or in resource files listed in the <db:code>RESOURCE</db:code> entry. If your files are not listed, the text in them will not be found.</db:para>
<db:para>An example of a complete <db:code>.pro</db:code> file with four translation source files:</db:para>
<db:programlisting language="cpp">HEADERS         = main-dlg.h \
                  options-dlg.h
SOURCES         = main-dlg.cpp \
                  options-dlg.cpp \
                  main.cpp
FORMS           = search-dlg.ui
TRANSLATIONS    = superapp_dk.ts \
                  superapp_fi.ts \
                  superapp_no.ts \
                  superapp_se.ts
</db:programlisting>
<db:para><db:code>lupdate</db:code> expects all source code to be encoded in UTF-8 by default. Files that feature a BOM (Byte Order Mark) can also be encoded in UTF-16 or UTF-32. Set the qmake variable <db:code>CODECFORSRC</db:code> to <db:code>UTF-16</db:code> to parse files without a BOM as UTF-16.</db:para>
<db:para>Some editors, such as Visual Studio, however use a different encoding by default. One way to avoid encoding issues is to limit any source code to ASCII, and use escape sequences for translatable strings with other characters, for example:</db:para>
<db:programlisting language="cpp">label-&amp;gt;setText(tr(&quot;F\374r \310lise&quot;));
</db:programlisting>
</db:section>
<db:section xml:id="internationalizing-applications">
<db:title>Internationalizing Applications</db:title>
<db:para>Design your application so that it can be adapted to various languages and regions without engineering changes. Qt tries to make internationalization as painless as possible for you. All input controls and text drawing methods in Qt offer built-in support for all supported languages. But you still need to keep the following things in mind when writing source code for your application:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Make your application look for and load the appropriate translation file.</db:para>
</db:listitem>
<db:listitem>
<db:para>Mark user-visible text and Ctrl keyboard accelerators as targets for translation.</db:para>
</db:listitem>
<db:listitem>
<db:para>Provide context for text to be translated.</db:para>
</db:listitem>
<db:listitem>
<db:para>Disambiguate identical texts.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use numbered arguments (%n) as placeholders for parameters that are replaced with text or numbers at run-time.</db:para>
</db:listitem>
<db:listitem>
<db:para>Internationalize numbers, dates, times, and currencies.</db:para>
</db:listitem>
<db:listitem>
<db:para>Mark data text strings outside functions translatable.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You can develop applications that use both C++ and QML sources in the same application and even have user interface strings in both sources. The tools create a single combined translation file and the strings are accessible from C++ and QML.</db:para>
<db:para>The classes that support internationalizing of Qt applications are described in <db:link xlink:href="internationalization.xml">Internationalization with Qt</db:link>. The process of making source code translatable is described in <db:link xlink:href="i18n-source-translation.xml">Writing Source Code for Translation</db:link> and in <db:link xlink:href="qtquick-internationalization.xml">Internationalization and Localization with Qt Quick</db:link>.</db:para>
<db:para>Each piece of text that requires translating requires context to help the translator identify where in the program the text appears. In the case of multiple identical texts that require different translations, the translator also requires some information to disambiguate the source texts. Marking text for translation will automatically cause the class name to be used as basic context information. In some cases the developer may be required to add additional information to help the translator.</db:para>
</db:section>
<db:section xml:id="deploying-translations">
<db:title>Deploying Translations</db:title>
<db:para>The <db:code>.qm</db:code> files required for the application should be placed in a location where the loader code using <db:link xlink:href="qtranslator.xml">QTranslator</db:link> can locate them. Typically, this is done by specifying a path relative to <db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>().</db:para>
<db:para>Usually, there are <db:code>.qm</db:code> files for the application, and, if a version of Qt is used that is not installed on the system, Qt's .qm files need to be deployed as well.</db:para>
<db:para>In Qt 4, there is one big, monolithic <db:code>.qm</db:code> file per locale. For example, the file <db:code>qt_de.qm</db:code> contains the German translation of all libraries.</db:para>
<db:para>In Qt 5, the <db:code>.qm</db:code> files were split up by module and there is a so-called meta catalog file which includes the <db:code>.qm</db:code> files of all modules. The name of the meta catalog file is identical to the name of Qt 4's monolithic <db:code>.qm</db:code> file so that existing loader code works as before provided all included <db:code>.qm</db:code> files are found.</db:para>
<db:para>However, it is not necessary to always deploy all of Qt 5's <db:code>.qm</db:code> files. We recommend concatenating the <db:code>.qm</db:code> files of the modules required to one file matching the meta catalog file name using the tool <db:code>lconvert</db:code> in the deploy step. For example, to create a German translation file for an application using the modules <db:link xlink:href="qtcore-index.xml">Qt Core</db:link>, <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link>, and <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link>, run:</db:para>
<db:programlisting language="cpp">lconvert -o installation_folder/qt_de.qm qtbase_de.qm qtdeclarative_de.qm
</db:programlisting>
</db:section>
<db:section xml:id="tutorials">
<db:title>Tutorials</db:title>
<db:para>The following tutorials illustrate how to prepare Qt applications for translation:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtlinguist-hellotr-example.xml">Hello tr()</db:link> is a C++ application that demonstrates the creation of a <db:link xlink:href="qtranslator.xml">QTranslator</db:link> object. It also shows the simplest use of the <db:code>tr()</db:code> function to mark user-visible source text for translation.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtlinguist-arrowpad-example.xml">Arrow Pad</db:link> is a C++ application that demonstrates how to make the application load the translation file applicable to the current locale. It also shows the use of the two-argument form of <db:code>tr()</db:code> which provides additional information to the translator.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtlinguist-trollprint-example.xml">Troll Print</db:link> is a C++ application that demonstrates how identical source texts can be distinguished even when they occur in the same context. This tutorial also discusses how the translation tools help minimize the translator's work when an application is upgraded.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-qml-i18n-example.xml">Internationalization</db:link> is a Qt Quick application that demonstrates how to internationalize Qt Quick applications.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
