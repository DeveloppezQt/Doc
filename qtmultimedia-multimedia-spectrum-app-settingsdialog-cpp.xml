<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Spectrum Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Analyzing a raw audio stream using the FFTReal library.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;settingsdialog.h&quot;
#include &amp;lt;QCheckBox&amp;gt;
#include &amp;lt;QComboBox&amp;gt;
#include &amp;lt;QDialogButtonBox&amp;gt;
#include &amp;lt;QLabel&amp;gt;
#include &amp;lt;QPushButton&amp;gt;
#include &amp;lt;QSlider&amp;gt;
#include &amp;lt;QSpinBox&amp;gt;
#include &amp;lt;QVBoxLayout&amp;gt;

SettingsDialog::SettingsDialog(
            const QList&amp;lt;QAudioDeviceInfo&amp;gt; &amp;amp;availableInputDevices,
            const QList&amp;lt;QAudioDeviceInfo&amp;gt; &amp;amp;availableOutputDevices,
            QWidget *parent)
    :   QDialog(parent)
    ,   m_windowFunction(DefaultWindowFunction)
    ,   m_inputDeviceComboBox(new QComboBox(this))
    ,   m_outputDeviceComboBox(new QComboBox(this))
    ,   m_windowFunctionComboBox(new QComboBox(this))
{
    QVBoxLayout *dialogLayout = new QVBoxLayout(this);

    // Populate combo boxes

    QAudioDeviceInfo device;
    foreach (device, availableInputDevices)
        m_inputDeviceComboBox-&amp;gt;addItem(device.deviceName(),
                                       QVariant::fromValue(device));
    foreach (device, availableOutputDevices)
        m_outputDeviceComboBox-&amp;gt;addItem(device.deviceName(),
                                       QVariant::fromValue(device));

    m_windowFunctionComboBox-&amp;gt;addItem(tr(&quot;None&quot;), QVariant::fromValue(int(NoWindow)));
    m_windowFunctionComboBox-&amp;gt;addItem(&quot;Hann&quot;, QVariant::fromValue(int(HannWindow)));
    m_windowFunctionComboBox-&amp;gt;setCurrentIndex(m_windowFunction);

    // Initialize default devices
    if (!availableInputDevices.empty())
        m_inputDevice = availableInputDevices.front();
    if (!availableOutputDevices.empty())
        m_outputDevice = availableOutputDevices.front();

    // Add widgets to layout

    QScopedPointer&amp;lt;QHBoxLayout&amp;gt; inputDeviceLayout(new QHBoxLayout);
    QLabel *inputDeviceLabel = new QLabel(tr(&quot;Input device&quot;), this);
    inputDeviceLayout-&amp;gt;addWidget(inputDeviceLabel);
    inputDeviceLayout-&amp;gt;addWidget(m_inputDeviceComboBox);
    dialogLayout-&amp;gt;addLayout(inputDeviceLayout.data());
    inputDeviceLayout.take(); // ownership transferred to dialogLayout

    QScopedPointer&amp;lt;QHBoxLayout&amp;gt; outputDeviceLayout(new QHBoxLayout);
    QLabel *outputDeviceLabel = new QLabel(tr(&quot;Output device&quot;), this);
    outputDeviceLayout-&amp;gt;addWidget(outputDeviceLabel);
    outputDeviceLayout-&amp;gt;addWidget(m_outputDeviceComboBox);
    dialogLayout-&amp;gt;addLayout(outputDeviceLayout.data());
    outputDeviceLayout.take(); // ownership transferred to dialogLayout

    QScopedPointer&amp;lt;QHBoxLayout&amp;gt; windowFunctionLayout(new QHBoxLayout);
    QLabel *windowFunctionLabel = new QLabel(tr(&quot;Window function&quot;), this);
    windowFunctionLayout-&amp;gt;addWidget(windowFunctionLabel);
    windowFunctionLayout-&amp;gt;addWidget(m_windowFunctionComboBox);
    dialogLayout-&amp;gt;addLayout(windowFunctionLayout.data());
    windowFunctionLayout.take(); // ownership transferred to dialogLayout

    // Connect
    connect(m_inputDeviceComboBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QComboBox::activated),
            this, &amp;amp;SettingsDialog::inputDeviceChanged);
    connect(m_outputDeviceComboBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QComboBox::activated),
            this, &amp;amp;SettingsDialog::outputDeviceChanged);
    connect(m_windowFunctionComboBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QComboBox::activated),
            this, &amp;amp;SettingsDialog::windowFunctionChanged);

    // Add standard buttons to layout
    QDialogButtonBox *buttonBox = new QDialogButtonBox(this);
    buttonBox-&amp;gt;setStandardButtons(QDialogButtonBox::Ok | QDialogButtonBox::Cancel);
    dialogLayout-&amp;gt;addWidget(buttonBox);

    // Connect standard buttons
    connect(buttonBox-&amp;gt;button(QDialogButtonBox::Ok), &amp;amp;QPushButton::clicked,
            this, &amp;amp;SettingsDialog::accept);
    connect(buttonBox-&amp;gt;button(QDialogButtonBox::Cancel), &amp;amp;QPushButton::clicked,
            this, &amp;amp;SettingsDialog::reject);

    setLayout(dialogLayout);
}

SettingsDialog::~SettingsDialog()
{

}

void SettingsDialog::windowFunctionChanged(int index)
{
    m_windowFunction = static_cast&amp;lt;WindowFunction&amp;gt;(
            m_windowFunctionComboBox-&amp;gt;itemData(index).value&amp;lt;int&amp;gt;());
}

void SettingsDialog::inputDeviceChanged(int index)
{
    m_inputDevice = m_inputDeviceComboBox-&amp;gt;itemData(index).value&amp;lt;QAudioDeviceInfo&amp;gt;();
}

void SettingsDialog::outputDeviceChanged(int index)
{
    m_outputDevice = m_outputDeviceComboBox-&amp;gt;itemData(index).value&amp;lt;QAudioDeviceInfo&amp;gt;();
}

</db:programlisting>
</db:article>
