<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlNodeModelIndex Class</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> class identifies a node in an XML node model subclassed from <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlNodeModelIndex</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xmlpatterns</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlNodeModelIndex is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> is an index into an <db:link xlink:href="qabstractxmlnodemodel.xml">XML node model</db:link>. It contains:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A pointer to an <db:link xlink:href="qabstractxmlnodemodel.xml">XML node model</db:link>, which is returned by <db:link xlink:href="qxmlnodemodelindex.xml#model">model</db:link>(), and</db:para>
</db:listitem>
<db:listitem>
<db:para>Some data, which is returned by <db:link xlink:href="qxmlnodemodelindex.xml#data">data</db:link>(), <db:link xlink:href="qxmlnodemodelindex.xml#internalPointer">internalPointer</db:link>(), and <db:link xlink:href="qxmlnodemodelindex.xml#additionalData">additionalData</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Because <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> is intentionally a simple class, it doesn't have member functions for accessing the properties of nodes. For example, it doesn't have functions for getting a node's name or its list of attributes or child nodes. If you find that you need to retrieve this kind of information from your query results, there are two ways to proceed.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Send the output of your XQuery to an <db:link xlink:href="qabstractxmlreceiver.xml">XML receiver</db:link>, or</db:para>
</db:listitem>
<db:listitem>
<db:para>Let your XQuery do all the work to produce the desired result.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The second case is explained by example. Suppose you want to populate a list widget with the values of certain attributes from a set of result elements. You could write an XQuery to return the set of elements, and then you would write the code to iterate over the result elements, get their attributes, and extract the desired string values. But the simpler way is to just augment your XQuery to finding the desired attribute values. Then all you have to do is evaluate the XQuery using the version of <db:link xlink:href="qxmlquery.xml#evaluateTo">QXmlQuery::evaluateTo</db:link>() that populates a <db:link xlink:href="qstringlist.xml">QStringList</db:link>, which you can send directly to your widget.</db:para>
<db:para><db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> doesn't impose any restrictions on the <db:code>data</db:code> value an <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> should contain. The meaning of the data left to the associated <db:link xlink:href="qabstractxmlnodemodel.xml">node model</db:link>. Because <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> depends on a particular subclass of <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> for its existence, the only way you can create an instance of <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> is by asking the node model to create one for you with <db:link xlink:href="qabstractxmlnodemodel.xml#createIndex">QAbstractXmlNodeModel::createIndex</db:link>(). Since that function is protected, it is usually a good idea to write a public function that creates a <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> from arguments that are appropriate for your particular node model.</db:para>
<db:para>A default constructed node index is said to be null, i.e., <db:link xlink:href="qxmlnodemodelindex.xml#isNull">isNull</db:link>() returns true.</db:para>
<db:para><db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> and <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> follow the same design pattern used for <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> and <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DocumentOrder-enum">
<db:title>enum QXmlNodeModelIndex::DocumentOrder</db:title>
<db:enumsynopsis>
<db:enumname>DocumentOrder</db:enumname>
<db:enumitem>
<db:enumidentifier>Precedes</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Is</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Follows</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Identifies the specific node comparison operator that should be used.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link></db:emphasis>::Precedes</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Signifies the <db:code>\&lt;\&lt;</db:code> operator. Test whether the first operand precedes the second in the document.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link></db:emphasis>::Follows</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Signifies the <db:code>\&gt;\&gt;</db:code> operator. Test whether the first operand follows the second in the document.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link></db:emphasis>::Is</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Signifies the <db:code>is</db:code> operator. Test whether two nodes have the same node identity.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="List-typedef">
<db:title>QXmlNodeModelIndex::List</db:title>
<db:typedefsynopsis>
<db:typedefname>List</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link>&gt;.</db:para>
</db:section>
<db:section xml:id="NodeKind-enum">
<db:title>enum QXmlNodeModelIndex::NodeKind</db:title>
<db:enumsynopsis>
<db:enumname>NodeKind</db:enumname>
<db:enumitem>
<db:enumidentifier>Attribute</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Comment</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Document</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Element</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Namespace</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ProcessingInstruction</db:enumidentifier>
<db:enumvalue>32</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Text</db:enumidentifier>
<db:enumvalue>64</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Identifies a kind of node.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link></db:emphasis>::Attribute</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Identifies an attribute node</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link></db:emphasis>::Text</db:code></db:para>
</db:td>
<db:td><db:code>64</db:code></db:td>
<db:td>
<db:para>Identifies a text node</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link></db:emphasis>::Comment</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Identifies a comment node</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link></db:emphasis>::Document</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Identifies a document node</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link></db:emphasis>::Element</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Identifies an element node</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link></db:emphasis>::Namespace</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Identifies a namespace node</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link></db:emphasis>::ProcessingInstruction</db:code></db:para>
</db:td>
<db:td><db:code>32</db:code></db:td>
<db:td>
<db:para>Identifies a processing instruction.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that the optional XML declaration at very beginning of the XML document is not a processing instruction</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractxmlnodemodel.xml#kind">QAbstractXmlNodeModel::kind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlNodeModelIndex">
<db:title>QXmlNodeModelIndex::QXmlNodeModelIndex()</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlNodeModelIndex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNodeModelIndex()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Default constructor. Creates an item that is <db:code>null</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlnodemodelindex.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QXmlNodeModelIndex-1">
<db:title>QXmlNodeModelIndex::QXmlNodeModelIndex(const QXmlNodeModelIndex &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlNodeModelIndex</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNodeModelIndex(const QXmlNodeModelIndex &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Standard copy constructor. Creates a <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> instance that is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="additionalData">
<db:title>qint64 QXmlNodeModelIndex::additionalData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>additionalData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 additionalData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the second data value. The node index holds two data values. <db:link xlink:href="qxmlnodemodelindex.xml#data">data</db:link>() returns the first one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlnodemodelindex.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>qint64 QXmlNodeModelIndex::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the first data value. The node index holds two data values. <db:link xlink:href="qxmlnodemodelindex.xml#additionalData">additionalData</db:link>() returns the second one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlnodemodelindex.xml#additionalData">additionalData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="internalPointer">
<db:title>void *QXmlNodeModelIndex::internalPointer() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>void *</db:type>
<db:methodname>internalPointer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void * internalPointer() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the first data value as a void* pointer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlnodemodelindex.xml#additionalData">additionalData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QXmlNodeModelIndex::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> is a default constructed value, otherwise false.</db:para>
<db:para>A null <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> doesn't represent any node and cannot be used in conjunction with <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link>.</db:para>
</db:section>
<db:section xml:id="model">
<db:title>const QAbstractXmlNodeModel *QXmlNodeModelIndex::model() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QAbstractXmlNodeModel *</db:type>
<db:methodname>model</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QAbstractXmlNodeModel * model() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> that this node index refers to. <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> does not own <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> and does not keep track of its lifetime, so this pointer will dangle if the <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> is deallocated first.</db:para>
<db:para>There is no setter for the node model because instances of <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> instances are only created with <db:link xlink:href="qabstractxmlnodemodel.xml#createIndex">QAbstractXmlNodeModel::createIndex</db:link>().</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QXmlNodeModelIndex::operator!=(const QXmlNodeModelIndex &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QXmlNodeModelIndex &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">other</db:code> is the same node as this.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QXmlNodeModelIndex::operator==(const QXmlNodeModelIndex &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QXmlNodeModelIndex &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this node is the same as <db:code role="parameter">other</db:code>. This operator does not compare values, children, or names of nodes. It compares node identities, i.e., whether two nodes are from the same document and are found at the exact same place.</db:para>
</db:section>
</db:section>
</db:article>
