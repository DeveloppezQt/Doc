<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Axis Range Dragging With Labels Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Implementing a custom input handler to support axis dragging.</db:para>
<db:para>This documentation was introduced in QtDataVisualization 1.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;axesinputhandler.h&quot;
#include &lt;QtCore/qmath.h&gt;

AxesInputHandler::AxesInputHandler(QAbstract3DGraph *graph, QObject *parent) :
    Q3DInputHandler(parent),
    m_mousePressed(false),
    m_state(StateNormal),
    m_axisX(0),
    m_axisZ(0),
    m_axisY(0),
    m_speedModifier(15.0f)
{
    // Connect to the item selection signal from graph
    connect(graph, &amp;QAbstract3DGraph::selectedElementChanged, this,
            &amp;AxesInputHandler::handleElementSelected);
}

void AxesInputHandler::mousePressEvent(QMouseEvent *event, const QPoint &amp;mousePos)
{
    Q3DInputHandler::mousePressEvent(event, mousePos);
    if (Qt::LeftButton == event-&gt;button())
        m_mousePressed = true;
}

void AxesInputHandler::mouseMoveEvent(QMouseEvent *event, const QPoint &amp;mousePos)
{
    // Check if we're trying to drag axis label
    if (m_mousePressed &amp;&amp; m_state != StateNormal) {
        setPreviousInputPos(inputPosition());
        setInputPosition(mousePos);
        handleAxisDragging();
    } else {
        Q3DInputHandler::mouseMoveEvent(event, mousePos);
    }
}

void AxesInputHandler::mouseReleaseEvent(QMouseEvent *event, const QPoint &amp;mousePos)
{
    Q3DInputHandler::mouseReleaseEvent(event, mousePos);
    m_mousePressed = false;
    m_state = StateNormal;
}

void AxesInputHandler::handleElementSelected(QAbstract3DGraph::ElementType type)
{
    switch (type) {
    case QAbstract3DGraph::ElementAxisXLabel:
        m_state = StateDraggingX;
        break;
    case QAbstract3DGraph::ElementAxisYLabel:
        m_state = StateDraggingY;
        break;
    case QAbstract3DGraph::ElementAxisZLabel:
        m_state = StateDraggingZ;
        break;
    default:
        m_state = StateNormal;
        break;
    }
}

void AxesInputHandler::handleAxisDragging()
{
    float distance = 0.0f;

    // Get scene orientation from active camera
    float xRotation = scene()-&gt;activeCamera()-&gt;xRotation();
    float yRotation = scene()-&gt;activeCamera()-&gt;yRotation();

    // Calculate directional drag multipliers based on rotation
    float xMulX = qCos(qDegreesToRadians(xRotation));
    float xMulY = qSin(qDegreesToRadians(xRotation));
    float zMulX = qSin(qDegreesToRadians(xRotation));
    float zMulY = qCos(qDegreesToRadians(xRotation));

    // Get the drag amount
    QPoint move = inputPosition() - previousInputPos();

    // Flip the effect of y movement if we're viewing from below
    float yMove = (yRotation &lt; 0) ? -move.y() : move.y();

    // Adjust axes
    switch (m_state) {
    case StateDraggingX:
        distance = (move.x() * xMulX - yMove * xMulY) / m_speedModifier;
        m_axisX-&gt;setRange(m_axisX-&gt;min() - distance, m_axisX-&gt;max() - distance);
        break;
    case StateDraggingZ:
        distance = (move.x() * zMulX + yMove * zMulY) / m_speedModifier;
        m_axisZ-&gt;setRange(m_axisZ-&gt;min() + distance, m_axisZ-&gt;max() + distance);
        break;
    case StateDraggingY:
        distance = move.y() / m_speedModifier; // No need to use adjusted y move here
        m_axisY-&gt;setRange(m_axisY-&gt;min() + distance, m_axisY-&gt;max() + distance);
        break;
    default:
        break;
    }
}

</db:programlisting>
</db:article>
