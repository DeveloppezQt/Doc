<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt SCXML Calculator QML Example</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Scxml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt Quick application that implements the Calculator example presented in the SCXML Specification.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/calculator-qml.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Calculator</db:emphasis> uses Qt SCXML to implement the <db:link xlink:href="http://www.w3.org/TR/scxml/#N11630">Calculator Example</db:link> presented in the SCXML Specification.</db:para>
<db:para>The state machine is specified in the <db:emphasis>statemachine.scxml</db:emphasis> file and compiled into the <db:code>CalculatorStateMachine</db:code> class. The user interface is created using Qt Quick.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="compiling-the-state-machine">
<db:title>Compiling the State Machine</db:title>
<db:para>We link against the Qt SCXML module by adding the following line to the <db:emphasis>.pro</db:emphasis> file:</db:para>
<db:programlisting language="cpp">QT += widgets scxml
</db:programlisting>
<db:para>We then specify the state machine to compile:</db:para>
<db:programlisting language="cpp">STATECHARTS = ../calculator-common/statemachine.scxml
</db:programlisting>
<db:para>The Qt SCXML Compiler, <db:code>qscxmlc</db:code>, is run automatically to generate <db:emphasis>statemachine.h</db:emphasis> and <db:emphasis>statemachine.cpp</db:emphasis>, and to add them to the <db:code>HEADERS</db:code> and <db:code>SOURCES</db:code> variables for compilation.</db:para>
</db:section>
<db:section xml:id="instantiating-the-state-machine">
<db:title>Instantiating the State Machine</db:title>
<db:para>We make the generated <db:code>CalculatorStateMachine</db:code> class available to QML by registering it as a QML type in the <db:emphasis>calculator-qml.cpp</db:emphasis> file:</db:para>
<db:programlisting language="cpp">#include &quot;statemachine.h&quot;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    qmlRegisterType&amp;lt;CalculatorStateMachine&amp;gt;(&quot;CalculatorStateMachine&quot;, 1, 0,
                                            &quot;CalculatorStateMachine&quot;);

    QQmlApplicationEngine engine;
    engine.load(QUrl(QStringLiteral(&quot;qrc:/calculator-qml.qml&quot;)));
    if (engine.rootObjects().isEmpty())
        return -1;

    return app.exec();
}
</db:programlisting>
<db:para>To use the CalculatorStateMachine type in a QML file, we import it:</db:para>
<db:programlisting language="cpp">import CalculatorStateMachine 1.0
</db:programlisting>
<db:para>We instantiate a CalculatorStateMachine and listen to the <db:code>updateDisplay</db:code> event. When it occurs, we change the text on the calculator display:</db:para>
<db:programlisting language="cpp">    CalculatorStateMachine {
        id: statemachine
        running: true
        EventConnection {
            events: [&quot;updateDisplay&quot;]
            onOccurred: resultText.text = event.data.display
        }
    }
</db:programlisting>
<db:para>When users press the calculator buttons, the buttons submit events to the state machine:</db:para>
<db:programlisting language="cpp">        Button {
            id: resultButton
            x: 3 * width
            y: parent.height / 5
            textHeight: y - 2
            fontHeight: 0.4
            width: parent.width / 4
            height: y * 4
            color: pressed ? &quot;#e0b91c&quot; : &quot;#face20&quot;
            text: &quot;=&quot;
            onClicked: statemachine.submitEvent(&quot;EQUALS&quot;)
        }
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="calculator-qml/Button.qml">calculator-qml/Button.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calculator-qml/calculator-qml.cpp">calculator-qml/calculator-qml.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calculator-qml/calculator-qml.pro">calculator-qml/calculator-qml.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calculator-qml/calculator-qml.qml">calculator-qml/calculator-qml.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="calculator-qml/calculator-qml.qrc">calculator-qml/calculator-qml.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
