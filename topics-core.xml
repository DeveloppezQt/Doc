<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Core Internals</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt's core topics.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt contains a rich set of fundamental enablers, mainly from the <db:link xlink:href="qtcore-index.xml">Qt Core</db:link> module. Qt uses these enablers to provide higher-level UI and application development components. The following topics explain the most important enablers and show how to use them to implement specialized functionality not already provided by Qt.</db:para>
<db:section xml:id="objects-properties-and-events">
<db:title>Objects, Properties, and Events</db:title>
<db:para>The <db:link xlink:href="qobject.xml">QObject</db:link> class forms the foundation of Qt's object model and is the parent class of many Qt classes. The object model introduces many mechanisms such as a meta-object system which allows run-time introspection, manipulation, and invocation of properties and methods in the object. It also serves as the basis for Qt's event system, which is a low-level way of communicating between <db:link xlink:href="qobject.xml">QObject</db:link>-based objects. Another high-level form of communication is provided in Qt's signals and slots mechanism.</db:para>
<db:para>In addition, <db:link xlink:href="qobject.xml">QObject</db:link> provides a simple timing mechanism with <db:link xlink:href="qobject.xml#startTimer">QObject::startTimer</db:link>(). Alternatively, the <db:link xlink:href="qtimer.xml">QTimer</db:link> class provides a high-level interface for timers.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="object.xml">Object Model</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="metaobjects.xml">The Meta-Object System</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="properties.xml">The Property System</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="eventsandfilters.xml">The Event System</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="signalsandslots.xml">Signals &amp; Slots</db:link></db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="signalsandslots-syntaxes.xml">Differences between String-Based and Functor-Based Connections</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="timers.xml">Timers</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="container-classes">
<db:title>Container Classes</db:title>
<db:para>A <db:emphasis>container</db:emphasis> is a data structure whose instances are collections of other objects. Some examples of containers are: dynamic arrays, queues, linked lists, and associative arrays. Qt provides a set of general purpose, template-based container classes for structuring data in memory.</db:para>
<db:para>See the full list of <db:link xlink:href="containers.xml#the-container-classes">Container Classes</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="internationalization">
<db:title>Internationalization</db:title>
<db:para>Qt uses Unicode for the encoding of displayable text strings. Unicode provides support for all commonly used writing systems in the world and is ideal for cross-platform development. Applications can also be written to support any number of different languages with one code base using Qt's powerful internationalization system.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="unicode.xml">Unicode in Qt</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="internationalization.xml">Internationalization with Qt</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="inter-process-communication">
<db:title>Inter-Process Communication</db:title>
<db:para>Qt provides several classes to support communication between processes. You can also launch and manage external processes using the <db:link xlink:href="qprocess.xml">QProcess</db:link> class.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="ipc.xml">Inter-Process Communication in Qt</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="threading">
<db:title>Threading</db:title>
<db:para>Qt provides functionality to manage threads and parallelized code in a safe and platform-independent way.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="thread-basics.xml">Threading Basics</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="threads.xml">Thread Support in Qt</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="platform-support">
<db:title>Platform Support</db:title>
<db:para>Qt allows you to write platform-independent code, where the same code base can be compiled for and deployed on different platforms without any changes. In cases where you need to use platform-specific features and integrate with system libraries, Qt also provides solutions for this.</db:para>
<db:para>Qt integrates with the windowing system on the target platform using Qt Platform Abstraction (QPA). QPA is an abstraction of a windowing system which makes porting Qt to new platforms simple and quick. One such system is the Wayland protocol. Qt can be used together with Wayland as a light-weight windowing system on embedded hardware to support a multi-process graphical user interface.</db:para>
<db:para>The Qt Platform Abstraction uses Qt's plugin system. This plugin system provides APIs to extend Qt in specific areas (such as adding support for new image formats, database drivers, and so on) and also for writing your own extensible Qt applications which support third-party plugins.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qpa.xml">Qt Platform Abstraction</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="atomic-operations.xml">Implementing Atomic Operations</db:link> - for new architectures</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtendian.xml">Endian Conversion Functions</db:link> - functions for handling endianness from the QtEndian header</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
