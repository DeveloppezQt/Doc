<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Right to Left</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a collection of QML Right to Left examples.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.0

Rectangle {
    id: root
    color: &quot;white&quot;
    //width: containerColumn.width
    //height: containerColumn.height + containerColumn.anchors.topMargin
    width: 320
    height: 480

    property bool mirror: false
    property int pxSz: 18
    property variant horizontalAlignment: undefined

    property variant editorType: [&quot;Plain Text&quot;, &quot;Styled Text&quot;, &quot;Plain Rich Text&quot;, &quot;Italic Rich Text&quot;, &quot;Plain TextEdit&quot;, &quot;Italic TextEdit&quot;, &quot;TextInput&quot;]
    property variant text: [&quot;&quot;, &quot; &quot;, &quot;Hello world!&quot;, &quot;مرحبا العالم!&quot;, &quot;Hello world! Hello!\nHello world! Hello!&quot;, &quot;مرحبا العالم! مرحبا! مرحبا العالم! مرحبا!&quot; ,&quot;مرحبا العالم! مرحبا! مرحبا Hello world!\nالعالم! مرحبا!&quot;]
    property variant description: [&quot;empty text&quot;, &quot;white-space-only text&quot;, &quot;left-to-right text&quot;, &quot;right-to-left text&quot;, &quot;multi-line left-to-right text&quot;, &quot;multi-line right-to-left text&quot;, &quot;multi-line bidi text&quot;]
    property variant textComponents: [plainTextComponent, styledTextComponent, richTextComponent, italicRichTextComponent, plainTextEdit, italicTextEdit, textInput]

    function shortText(horizontalAlignment) {

        // all the different QML editors have
        // the same alignment values
        switch (horizontalAlignment) {
        case Text.AlignLeft:
            return &quot;L&quot;;
        case Text.AlignRight:
            return &quot;R&quot;;
        case Text.AlignHCenter:
            return &quot;C&quot;;
        case Text.AlignJustify:
            return &quot;J&quot;;
        default:
            return &quot;Error&quot;;
        }
    }
    Column {
        id: containerColumn
        spacing: 10
        width: editorTypeRow.width
        anchors { top: parent.top; topMargin: 5 }
        ListView {
            width: 320
            height: 320
            id: editorTypeRow
            model: editorType.length
            orientation: ListView.Horizontal
            cacheBuffer: 1000//Load the really expensive ones async if possible
            delegate: Item {
                width: editorColumn.width
                height: editorColumn.height
                Column {
                    id: editorColumn
                    spacing: 5
                    width: textColumn.width+10
                    Text {
                        text: root.editorType[index]
                        font.pixelSize: 16
                        anchors.horizontalCenter: parent.horizontalCenter
                    }
                    Column {
                        id: textColumn
                        spacing: 5
                        anchors.horizontalCenter: parent.horizontalCenter
                        Repeater {
                            model: textComponents.length
                            delegate: textComponents[index]
                        }
                    }
                }
            }
        }
        Column {
            spacing: 2
            width: parent.width
            Rectangle {
                // button
                height: 50; width: parent.width
                color: mouseArea.pressed ? &quot;black&quot; : &quot;lightgray&quot;
                Column {
                    anchors.centerIn: parent
                    Text {
                        text: root.mirror ? &quot;Mirrored&quot; : &quot;Not mirrored&quot;
                        color: &quot;white&quot;
                        font.pixelSize: 16
                        anchors.horizontalCenter: parent.horizontalCenter
                    }
                    Text {
                        text: &quot;(click here to toggle)&quot;
                        color: &quot;white&quot;
                        font.pixelSize: 10
                        font.italic: true
                        anchors.horizontalCenter: parent.horizontalCenter
                    }
                }
                MouseArea {
                    id: mouseArea
                    property int index: 0
                    anchors.fill: parent
                    onClicked: root.mirror = !root.mirror
                }
            }
            Rectangle {
                // button
                height: 50; width: parent.width
                color: mouseArea2.pressed ? &quot;black&quot; : &quot;gray&quot;
                Column {
                    anchors.centerIn: parent
                    Text {
                        text: {
                            if (root.horizontalAlignment == undefined)
                                return &quot;Implict alignment&quot;;
                            switch (root.horizontalAlignment) {
                            case Text.AlignLeft:
                                return &quot;Left alignment&quot;;
                            case Text.AlignRight:
                                return &quot;Right alignment&quot;;
                            case Text.AlignHCenter:
                                return &quot;Center alignment&quot;;
                            case Text.AlignJustify:
                                return &quot;Justify alignment&quot;;
                            }
                        }
                        color: &quot;white&quot;
                        font.pixelSize: 16
                        anchors.horizontalCenter: parent.horizontalCenter
                    }
                    Text {
                        text: &quot;(click here to toggle)&quot;
                        color: &quot;white&quot;
                        font.pixelSize: 10
                        font.italic: true
                        anchors.horizontalCenter: parent.horizontalCenter
                    }
                }
                MouseArea {
                    id: mouseArea2
                    property int index: 0
                    anchors.fill: parent
                    onClicked: {
                        if (index &lt; 0) {
                            root.horizontalAlignment = undefined;
                        } else {
                            root.horizontalAlignment = Math.pow(2, index);
                        }
                        index = (index + 2) % 5 - 1;
                    }
                }
            }
        }
    }

    Component {
        id: plainTextComponent
        Text {
            width: 180
            text: root.text[index]
            font.pixelSize: pxSz
            wrapMode: Text.WordWrap
            horizontalAlignment: root.horizontalAlignment
            LayoutMirroring.enabled: root.mirror
            textFormat: Text.RichText
            Rectangle {
                z: -1
                color: Qt.rgba(0.8, 0.2, 0.2, 0.3)
                anchors.fill: parent
            }
            Text {
                text: root.description[index]
                color: Qt.rgba(1,1,1,1.0)
                anchors.centerIn: parent
                font.pixelSize: pxSz - 2
                Rectangle {
                    z: -1
                    color: Qt.rgba(0.3, 0, 0, 0.3)
                    anchors { fill: parent; margins: -3 }
                }
            }
            Text {
                color: &quot;white&quot;
                text: shortText(parent.horizontalAlignment)
                anchors { top: parent.top; right: parent.right; margins: 2 }
            }
        }
    }

    Component {
        id: styledTextComponent
        Text {
            width: 180
            text: root.text[index]
            font.pixelSize: pxSz
            wrapMode: Text.WordWrap
            horizontalAlignment: root.horizontalAlignment
            LayoutMirroring.enabled: root.mirror
            textFormat: Text.RichText
            style: Text.Sunken
            styleColor: &quot;white&quot;
            Rectangle {
                z: -1
                color: Qt.rgba(0.8, 0.2, 0.2, 0.3)
                anchors.fill: parent
            }
            Text {
                text: root.description[index]
                color: Qt.rgba(1,1,1,1.0)
                anchors.centerIn: parent
                font.pixelSize: pxSz - 2
                Rectangle {
                    z: -1
                    color: Qt.rgba(0.3, 0, 0, 0.3)
                    anchors { fill: parent; margins: -3 }
                }
            }
            Text {
                color: &quot;white&quot;
                text: shortText(parent.horizontalAlignment)
                anchors { top: parent.top; right: parent.right; margins: 2 }
            }
        }
    }

    Component {
        id: richTextComponent
        Text {
            width: 180
            text: root.text[index]
            font.pixelSize: pxSz
            wrapMode: Text.WordWrap
            horizontalAlignment: root.horizontalAlignment
            LayoutMirroring.enabled: root.mirror
            textFormat: Text.RichText
            Rectangle {
                z: -1
                color: Qt.rgba(0.8, 0.2, 0.2, 0.3)
                anchors.fill: parent
            }
            Text {
                text: root.description[index]
                color: Qt.rgba(1,1,1,1.0)
                anchors.centerIn: parent
                font.pixelSize: pxSz - 2
                Rectangle {
                    z: -1
                    color: Qt.rgba(0.3, 0, 0, 0.3)
                    anchors { fill: parent; margins: -3 }
                }
            }
            Text {
                color: &quot;white&quot;
                text: shortText(parent.horizontalAlignment)
                anchors { top: parent.top; right: parent.right; margins: 2 }
            }
        }
    }

    Component {
        id: italicRichTextComponent
        Text {
            width: 180
            text: &quot;&lt;i&gt;&quot; + root.text[index] + &quot;&lt;/i&gt;&quot;
            font.pixelSize: pxSz
            wrapMode: Text.WordWrap
            horizontalAlignment: root.horizontalAlignment
            LayoutMirroring.enabled: root.mirror
            textFormat: Text.RichText
            property variant backgroundColor: Qt.rgba(0.8, 0.2, 0.2, 0.3)
            Rectangle {
                z: -1
                color: parent.backgroundColor
                anchors.fill: parent
            }
            Text {
                text: root.description[index]
                color: Qt.rgba(1,1,1,1.0)
                anchors.centerIn: parent
                font.pixelSize: pxSz - 2
                Rectangle {
                    z: -1
                    color: Qt.rgba(0.3, 0, 0, 0.3)
                    anchors { fill: parent; margins: -3 }
                }
            }
            Text {
                color: &quot;white&quot;
                text: shortText(parent.horizontalAlignment)
                anchors { top: parent.top; right: parent.right; margins: 2 }
            }
        }
    }

    Component {
        id: plainTextEdit
        TextEdit {
            width: 180
            text: root.text[index]
            font.pixelSize: pxSz
            cursorVisible: true
            wrapMode: TextEdit.WordWrap
            horizontalAlignment: root.horizontalAlignment
            LayoutMirroring.enabled: root.mirror
            Rectangle {
                z: -1
                color: Qt.rgba(0.5, 0.5, 0.2, 0.3)
                anchors.fill: parent
            }
            Text {
                text: root.description[index]
                color: Qt.rgba(1,1,1,1.0)
                anchors.centerIn: parent
                font.pixelSize: pxSz - 2
                Rectangle {
                    z: -1
                    color: Qt.rgba(0.3, 0, 0, 0.3)
                    anchors { fill: parent; margins: -3 }
                }
            }
            Text {
                color: &quot;white&quot;
                text: shortText(parent.horizontalAlignment)
                anchors { top: parent.top; right: parent.right; margins: 2 }
            }
        }
    }

    Component {
        id: italicTextEdit
        TextEdit {
            width: 180
            text: &quot;&lt;i&gt;&quot; + root.text[index] + &quot;&lt;i&gt;&quot;
            font.pixelSize: pxSz
            cursorVisible: true
            wrapMode: TextEdit.WordWrap
            textFormat: TextEdit.RichText
            horizontalAlignment: root.horizontalAlignment
            LayoutMirroring.enabled: root.mirror
            Rectangle {
                z: -1
                color: Qt.rgba(0.5, 0.5, 0.2, 0.3)
                anchors.fill: parent
            }
            Text {
                text: root.description[index]
                color: Qt.rgba(1,1,1,1.0)
                anchors.centerIn: parent
                font.pixelSize: pxSz - 2
                Rectangle {
                    z: -1
                    color: Qt.rgba(0.3, 0, 0, 0.3)
                    anchors { fill: parent; margins: -3 }
                }
            }
            Text {
                color: &quot;white&quot;
                text: shortText(parent.horizontalAlignment)
                anchors { top: parent.top; right: parent.right; margins: 2 }
            }
        }
    }

    Component {
        id: textInput
        Item {
            width: 180
            height: textInput.text.length &gt; 20 ? 3*textInput.height : textInput.height
            TextInput {
                id: textInput
                width: 180
                text: root.text[index]
                font.pixelSize: pxSz
                cursorVisible: true
                horizontalAlignment: root.horizontalAlignment
                LayoutMirroring.enabled: root.mirror
                Rectangle {
                    z: -1
                    color: Qt.rgba(0.6, 0.4, 0.2, 0.3)
                    anchors.fill: parent
                }
                Text {
                    text: root.description[index]
                    color: Qt.rgba(1,1,1,1.0)
                    anchors.centerIn: parent
                    font.pixelSize: pxSz - 2
                    Rectangle {
                        z: -1
                        color: Qt.rgba(0.3, 0, 0, 0.3)
                        anchors { fill: parent; margins: -3 }
                    }
                }
                Text {
                    color: &quot;white&quot;
                    text: shortText(parent.horizontalAlignment)
                    anchors { top: parent.top; right: parent.right; margins: 2 }
                }
            }
        }
    }
}

</db:programlisting>
</db:article>
