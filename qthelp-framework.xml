<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The Qt Help Framework</db:title>
<db:productname>QtHelp</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Help Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Integrating Documentation in Applications.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>The Qt help system includes tools for generating and viewing Qt help files. In addition it provides classes for accessing help contents programatically to be able to integrate online help into Qt applications.</db:para>
<db:para>The actual help data, meaning the table of contents, index keywords or HTML documents, is contained in Qt compressed help files. So, one such a help file represents usually one manual or documentation set. Since most products are more comprehensive and consist of a number of tools, one manual is rarely enough. Instead, more manuals which should be accessible at the same time, exist. Ideally, it should also be possible to reference certain points of interest of one manual to another. Therefore, the Qt help system operates on help collection files which include any number of compressed help files.</db:para>
<db:para>However, having collection files to merge many documentation sets may lead to some problems. For example, one index keyword may be defined in different documentations. So, when only seeing it in the index and activating it, you cannot be sure that the expected documentation will be shown. Therefore, the Qt help system offers the possibiltiy to filter the help contents after certain attributes. This requires however, that the attributes have been assigned to the help contents before the generation of the compressed help file.</db:para>
<db:para>As already mentioned, the Qt compressed help file contains all data, so there is no need any longer to ship all single HTML files. Instead, only the compressed help file and optionally the collection file has to be distributed. The collection file is optional since any existing collection file, e.g. from an older release could be used.</db:para>
<db:para>So, in general, there are four files interacting with the help system, two used for generating Qt help and two meant for distribution:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Name</db:para>
</db:th>
<db:th>
<db:para>Extension</db:para>
</db:th>
<db:th>
<db:para>Brief Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qthelpproject.xml">Qt Help Project</db:link></db:para>
</db:td>
<db:td>
<db:para>.qhp</db:para>
</db:td>
<db:td>
<db:para>The input file for the help generator consisting of the table of contents, indices and references to the actual documentation files (*.html); it also defines a unique namespace for the documentation.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Qt Compressed Help</db:para>
</db:td>
<db:td>
<db:para>.qch</db:para>
</db:td>
<db:td>
<db:para>The output file of the help generator. This binary file contains all information specified in the help project file along with all compressed documentation files.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qthelp-framework.xml#creating-a-qt-help-collection">Qt Help Collection Project</db:link></db:para>
</db:td>
<db:td>
<db:para>.qhcp</db:para>
</db:td>
<db:td>
<db:para>The input file for the help collection generator. It contains references to compressed help files which should be included in the collection; it also may contain other information for customizing Qt Assistant.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Qt Help Collection</db:para>
</db:td>
<db:td>
<db:para>.qhc</db:para>
</db:td>
<db:td>
<db:para>The output of the help collection generator. This is the file <db:link xlink:href="qhelpengine.xml">QHelpEngine</db:link> operates on. It contains references to any number of compressed help files as well as additional information, such as custom filters.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="generating-qt-help">
<db:title>Generating Qt Help</db:title>
<db:para>Building help files for the Qt help system assumes that the HTML documentation files already exist.</db:para>
<db:para>Once the HTML documents are in place, a <db:link xlink:href="qthelpproject.xml">Qt Help Project</db:link> file, with an extension of <db:code>.qhp</db:code>, has to be created. After specifying all relevant information in this file, it needs to be compiled by calling:</db:para>
<db:programlisting language="cpp">qhelpgenerator doc.qhp -o doc.qch
</db:programlisting>
<db:para>The file 'doc.qch' contains then all HTML files in compressed form along with the table of contents and index keywords. To test if the generated file is correct, open Qt Assistant and install the file via the Settings|Documentation page.</db:para>
<db:para>For the standard Qt source build, the .qhp file is generated and placed in the same directory as the HTML pages.</db:para>
<db:anchor xml:id="qt-help-collection-project"/>
<db:section xml:id="creating-a-qt-help-collection">
<db:title>Creating a Qt Help Collection</db:title>
<db:para>The first step is to create a Qt Help Collection Project file. Since a Qt help collection stores primarily references to compressed help files, the project 'mycollection.qhcp' file looks unsurprisingly simple:</db:para>
<db:programlisting language="cpp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;QHelpCollectionProject version=&quot;1.0&quot;&gt;
    &lt;docFiles&gt;
        &lt;register&gt;
            &lt;file&gt;doc.qch&lt;/file&gt;
        &lt;/register&gt;
    &lt;/docFiles&gt;
&lt;/QHelpCollectionProject&gt;
</db:programlisting>
<db:para>For actually creating the collection file call:</db:para>
<db:programlisting language="cpp">qcollectiongenerator mycollection.qhcp -o mycollection.qhc
</db:programlisting>
<db:para>Instead of running two tools, one for generating the compressed help and one for generating the collection file, it is also possible to just run the qcollectiongenerator tool with a slightly modified project file instructing the generator to create the compressed help first.</db:para>
<db:programlisting language="cpp">...
&lt;docFiles&gt;
    &lt;generate&gt;
        &lt;file&gt;
            &lt;input&gt;doc.qhp&lt;/input&gt;
            &lt;output&gt;doc.qch&lt;/output&gt;
        &lt;/file&gt;
    &lt;/generate&gt;
    &lt;register&gt;
        &lt;file&gt;doc.qch&lt;/file&gt;
    &lt;/register&gt;
&lt;/docFiles&gt;
...
</db:programlisting>
<db:para>Of course, it is possible to specify more than one file in the 'generate' or 'register' section, so any number of compressed help files can be generated and registered in one go.</db:para>
</db:section>
</db:section>
<db:section xml:id="using-qt-help">
<db:title>Using Qt Help</db:title>
<db:para>Accessing the help contents can be done in two ways: Using Qt Assistant as documentation browser or using the <db:link xlink:href="qhelpengine.xml">QHelpEngine</db:link> API for embedding the help contents directly in an application.</db:para>
<db:section xml:id="using-qt-assistant">
<db:title>Using Qt Assistant</db:title>
<db:para><db:emphasis>Qt Assistant</db:emphasis> operates on a collection file which can be specified before start up. If no collection file is given, a default one will be created and used. In either case, it is possible to register any Qt compressed help file and access the help contents.</db:para>
<db:para>When using Qt Assistant as the help browser for an application, it would be desirable that it can be customized to fit better to the application and doesn't look like an independent, standalone help browser. To achieve this, several additional properties can be set in an Qt help collection file, to change e.g. the title or application icon of Qt Assistant. For more information,see the <db:link xlink:href="qtassistant-index.xml">Qt Assistant Manual</db:link>.</db:para>
</db:section>
<db:section xml:id="using-qhelpengine-api">
<db:title>Using QHelpEngine API</db:title>
<db:para>Instead of showing the help in an external application like the Qt Assistant, it is also possible to embed the online help in the application. The contents can then be retrieved via the <db:link xlink:href="qhelpengine.xml">QHelpEngine</db:link> class and can be displayed in nearly any form. Showing it in a <db:link xlink:href="qtextbrowser.xml">QTextBrowser</db:link> is probably the most common way, but embedding it in What's This help is also perfectly possible.</db:para>
<db:para>Retrieving help data from the file engine does not involve a lot of code. The first step is to create an instance of the help engine. Then we ask the engine for the links assigned to the identifier, in this case &quot;MyDialog::ChangeButton&quot;. If a link was found, meaning at least one help document exists to this topic, we get the actual help contents by calling fileData() and display the document to the user.</db:para>
<db:programlisting language="cpp">QHelpEngineCore helpEngine(&quot;mycollection.qhc&quot;);
...

// get all file references for the identifier
QMap&lt;QString, QUrl&gt; links =
    helpEngine.linksForIdentifier(QLatin1String(&quot;MyDialog::ChangeButton&quot;));

// If help is available for this keyword, get the help data
// of the first file reference.
if (links.count()) {
    QByteArray helpData = helpEngine-&gt;fileData(links.constBegin().value());
    // show the documentation to the user
    if (!helpData.isEmpty())
        displayHelp(helpData);
}
</db:programlisting>
<db:para>For further information on how to use the API, have a look at the <db:link xlink:href="qhelpengine.xml">QHelpEngine</db:link> class reference.</db:para>
</db:section>
</db:section>
</db:article>
