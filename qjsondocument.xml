<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QJsonDocument Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> class provides a way to read and write JSON documents.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QJsonDocument</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QJsonDocument is part of <db:simplelist><db:member><db:link xlink:href="json.xml">JSON Support in Qt</db:link></db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> is a class that wraps a complete JSON document and can read and write this document both from a UTF-8 encoded text based representation as well as Qt's own binary format.</db:para>
<db:para>A JSON document can be converted from its text-based representation to a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> using <db:link xlink:href="qjsondocument.xml#fromJson">QJsonDocument::fromJson</db:link>(). <db:link xlink:href="qjsondocument.xml#toJson">toJson</db:link>() converts it back to text. The parser is very fast and efficient and converts the JSON to the binary representation used by Qt.</db:para>
<db:para>Validity of the parsed document can be queried with !<db:link xlink:href="qjsondocument.xml#isNull">isNull</db:link>()</db:para>
<db:para>A document can be queried as to whether it contains an array or an object using <db:link xlink:href="qjsondocument.xml#isArray">isArray</db:link>() and <db:link xlink:href="qjsondocument.xml#isObject">isObject</db:link>(). The array or object contained in the document can be retrieved using <db:link xlink:href="qjsondocument.xml#array">array</db:link>() or <db:link xlink:href="qjsondocument.xml#object">object</db:link>() and then read or manipulated.</db:para>
<db:para>A document can also be created from a stored binary representation using <db:link xlink:href="qjsondocument.xml#fromBinaryData">fromBinaryData</db:link>() or <db:link xlink:href="qjsondocument.xml#fromRawData">fromRawData</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="json.xml">JSON Support in Qt</db:link></db:member>
<db:member><db:link xlink:href="qtcore-serialization-savegame-example.xml">JSON Save Game Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DataValidation-enum">
<db:title>enum QJsonDocument::DataValidation</db:title>
<db:enumsynopsis>
<db:enumname>DataValidation</db:enumname>
<db:enumitem>
<db:enumidentifier>Validate</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BypassValidation</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This value is used to tell <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> whether to validate the binary data when converting to a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> using <db:link xlink:href="qjsondocument.xml#fromBinaryData">fromBinaryData</db:link>() or <db:link xlink:href="qjsondocument.xml#fromRawData">fromRawData</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link></db:emphasis>::Validate</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Validate the data before using it. This is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link></db:emphasis>::BypassValidation</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Bypasses data validation. Only use if you received the data from a trusted place and know it's valid, as using of invalid data can crash the application.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="JsonFormat-enum">
<db:title>[since 5.1] enum QJsonDocument::JsonFormat</db:title>
<db:enumsynopsis>
<db:enumname>JsonFormat</db:enumname>
<db:enumitem>
<db:enumidentifier>Indented</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Compact</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This value defines the format of the JSON byte array produced when converting to a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> using <db:link xlink:href="qjsondocument.xml#toJson">toJson</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link></db:emphasis>::Indented</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Defines human readable output as follows:</db:para>
<db:programlisting language="cpp">    {
        &quot;Array&quot;: [
            true,
            999,
            &quot;string&quot;
        ],
        &quot;Key&quot;: &quot;Value&quot;,
        &quot;null&quot;: null
    }
</db:programlisting>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link></db:emphasis>::Compact</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Defines a compact output as follows:</db:para>
<db:programlisting language="cpp">    {&quot;Array&quot;:[true,999,&quot;string&quot;],&quot;Key&quot;:&quot;Value&quot;,&quot;null&quot;:null}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.1.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QJsonDocument">
<db:title>QJsonDocument::QJsonDocument()</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonDocument</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty and invalid document.</db:para>
</db:section>
<db:section xml:id="QJsonDocument-1">
<db:title>[explicit] QJsonDocument::QJsonDocument(const QJsonObject &amp;<db:emphasis>object</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonDocument</db:methodname>
<db:methodparam>
<db:type>const QJsonObject &amp;</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument(const QJsonObject &amp;object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> from <db:code role="parameter">object</db:code>.</db:para>
</db:section>
<db:section xml:id="QJsonDocument-2">
<db:title>[explicit] QJsonDocument::QJsonDocument(const QJsonArray &amp;<db:emphasis>array</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonDocument</db:methodname>
<db:methodparam>
<db:type>const QJsonArray &amp;</db:type>
<db:parameter>array</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument(const QJsonArray &amp;array)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> from <db:code role="parameter">array</db:code>.</db:para>
</db:section>
<db:section xml:id="QJsonDocument-3">
<db:title>QJsonDocument::QJsonDocument(const QJsonDocument &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonDocument</db:methodname>
<db:methodparam>
<db:type>const QJsonDocument &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument(const QJsonDocument &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a copy of the <db:code role="parameter">other</db:code> document.</db:para>
</db:section>
<db:section xml:id="QJsonDocument-4">
<db:title>[since 5.10] QJsonDocument::QJsonDocument(QJsonDocument &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonDocument</db:methodname>
<db:methodparam>
<db:type>QJsonDocument &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument(QJsonDocument &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> from <db:code role="parameter">other</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="dtor.QJsonDocument">
<db:title>QJsonDocument::~QJsonDocument()</db:title>
<db:destructorsynopsis>
<db:methodname>~QJsonDocument</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QJsonDocument()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes the document.</db:para>
<db:para>Binary data set with <db:link xlink:href="qjsondocument.xml#fromRawData">fromRawData</db:link> is not freed.</db:para>
</db:section>
<db:section xml:id="array">
<db:title>QJsonArray QJsonDocument::array() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJsonArray</db:type>
<db:methodname>array</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonArray array() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link> contained in the document.</db:para>
<db:para>Returns an empty array if the document contains an object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#isArray">isArray</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#object">object</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#setArray">setArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromBinaryData">
<db:title>[static] QJsonDocument QJsonDocument::fromBinaryData(const QByteArray &amp;<db:emphasis>data</db:emphasis>, QJsonDocument::DataValidation <db:emphasis>validation</db:emphasis> = Validate)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJsonDocument</db:type>
<db:methodname>fromBinaryData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QJsonDocument::DataValidation</db:type>
<db:parameter>validation</db:parameter>
<db:initializer>Validate</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument fromBinaryData(const QByteArray &amp;data, QJsonDocument::DataValidation validation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> from <db:code role="parameter">data</db:code>.</db:para>
<db:para><db:code role="parameter">validation</db:code> decides whether the data is checked for validity before being used. By default the data is validated. If the <db:code role="parameter">data</db:code> is not valid, the method returns a null document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#toBinaryData">toBinaryData</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#fromRawData">fromRawData</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#DataValidation-enum">DataValidation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromJson">
<db:title>[static] QJsonDocument QJsonDocument::fromJson(const QByteArray &amp;<db:emphasis>json</db:emphasis>, QJsonParseError *<db:emphasis>error</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJsonDocument</db:type>
<db:methodname>fromJson</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>json</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QJsonParseError *</db:type>
<db:parameter>error</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument fromJson(const QByteArray &amp;json, QJsonParseError *error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Parses <db:code role="parameter">json</db:code> as a UTF-8 encoded JSON document, and creates a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> from it.</db:para>
<db:para>Returns a valid (non-null) <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> if the parsing succeeds. If it fails, the returned document will be null, and the optional <db:code role="parameter">error</db:code> variable will contain further details about the error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#toJson">toJson</db:link>()</db:member>
<db:member><db:link xlink:href="qjsonparseerror.xml">QJsonParseError</db:link></db:member>
<db:member><db:link xlink:href="qjsondocument.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromRawData">
<db:title>[static] QJsonDocument QJsonDocument::fromRawData(const char *<db:emphasis>data</db:emphasis>, int <db:emphasis>size</db:emphasis>, QJsonDocument::DataValidation <db:emphasis>validation</db:emphasis> = Validate)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJsonDocument</db:type>
<db:methodname>fromRawData</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QJsonDocument::DataValidation</db:type>
<db:parameter>validation</db:parameter>
<db:initializer>Validate</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument fromRawData(const char *data, int size, QJsonDocument::DataValidation validation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> that uses the first <db:code role="parameter">size</db:code> bytes from <db:code role="parameter">data</db:code>. It assumes <db:code role="parameter">data</db:code> contains a binary encoded JSON document. The created document does not take ownership of <db:code role="parameter">data</db:code> and the caller has to guarantee that <db:code role="parameter">data</db:code> will not be deleted or modified as long as any <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link>, <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link> or <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link> still references the data.</db:para>
<db:para><db:code role="parameter">data</db:code> has to be aligned to a 4 byte boundary.</db:para>
<db:para><db:code role="parameter">validation</db:code> decides whether the data is checked for validity before being used. By default the data is validated. If the <db:code role="parameter">data</db:code> is not valid, the method returns a null document.</db:para>
<db:para>Returns a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> representing the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#rawData">rawData</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#fromBinaryData">fromBinaryData</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#DataValidation-enum">DataValidation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromVariant">
<db:title>[static] QJsonDocument QJsonDocument::fromVariant(const QVariant &amp;<db:emphasis>variant</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJsonDocument</db:type>
<db:methodname>fromVariant</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>variant</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument fromVariant(const QVariant &amp;variant)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> from the <db:link xlink:href="qvariant.xml">QVariant</db:link> <db:code role="parameter">variant</db:code>.</db:para>
<db:para>If the <db:code role="parameter">variant</db:code> contains any other type than a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>, <db:link xlink:href="qvariant.xml#QVariantHash-typedef">QVariantHash</db:link>, <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> or <db:link xlink:href="qstringlist.xml">QStringList</db:link>, the returned document is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#toVariant">toVariant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isArray">
<db:title>bool QJsonDocument::isArray() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isArray</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isArray() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the document contains an array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#array">array</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#isObject">isObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QJsonDocument::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the document doesn't contain any data.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QJsonDocument::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>returns true if this document is null.</db:para>
<db:para>Null documents are documents created through the default constructor.</db:para>
<db:para>Documents created from UTF-8 encoded text or the binary format are validated during parsing. If validation fails, the returned document will also be null.</db:para>
</db:section>
<db:section xml:id="isObject">
<db:title>bool QJsonDocument::isObject() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isObject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the document contains an object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#object">object</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#isArray">isArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="object">
<db:title>QJsonObject QJsonDocument::object() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJsonObject</db:type>
<db:methodname>object</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonObject object() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link> contained in the document.</db:para>
<db:para>Returns an empty object if the document contains an array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#isObject">isObject</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#array">array</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#setObject">setObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rawData">
<db:title>const char *QJsonDocument::rawData(int *<db:emphasis>size</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const char *</db:type>
<db:methodname>rawData</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const char * rawData(int *size) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the raw binary representation of the data <db:code role="parameter">size</db:code> will contain the size of the returned data.</db:para>
<db:para>This method is useful to e.g. stream the JSON document in it's binary form to a file.</db:para>
</db:section>
<db:section xml:id="setArray">
<db:title>void QJsonDocument::setArray(const QJsonArray &amp;<db:emphasis>array</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setArray</db:methodname>
<db:methodparam>
<db:type>const QJsonArray &amp;</db:type>
<db:parameter>array</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setArray(const QJsonArray &amp;array)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">array</db:code> as the main object of this document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#setObject">setObject</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#array">array</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setObject">
<db:title>void QJsonDocument::setObject(const QJsonObject &amp;<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setObject</db:methodname>
<db:methodparam>
<db:type>const QJsonObject &amp;</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setObject(const QJsonObject &amp;object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">object</db:code> as the main object of this document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#setArray">setArray</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#object">object</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.10] void QJsonDocument::swap(QJsonDocument &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QJsonDocument &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QJsonDocument &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the document <db:code role="parameter">other</db:code> with this. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="toBinaryData">
<db:title>QByteArray QJsonDocument::toBinaryData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toBinaryData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toBinaryData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a binary representation of the document.</db:para>
<db:para>The binary representation is also the native format used internally in Qt, and is very efficient and fast to convert to and from.</db:para>
<db:para>The binary format can be stored on disk and interchanged with other applications or computers. <db:link xlink:href="qjsondocument.xml#fromBinaryData">fromBinaryData</db:link>() can be used to convert it back into a JSON document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#fromBinaryData">fromBinaryData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toJson">
<db:title>QByteArray QJsonDocument::toJson() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toJson</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toJson() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> to an indented, UTF-8 encoded JSON document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#fromJson">fromJson</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toJson-1">
<db:title>[since 5.1] QByteArray QJsonDocument::toJson(QJsonDocument::JsonFormat <db:emphasis>format</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toJson</db:methodname>
<db:methodparam>
<db:type>QJsonDocument::JsonFormat</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toJson(QJsonDocument::JsonFormat format) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> to a UTF-8 encoded JSON document in the provided <db:code role="parameter">format</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#fromJson">fromJson</db:link>()</db:member>
<db:member><db:link xlink:href="qjsondocument.xml#JsonFormat-enum">JsonFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toVariant">
<db:title>QVariant QJsonDocument::toVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>toVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant toVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qvariant.xml">QVariant</db:link> representing the Json document.</db:para>
<db:para>The returned variant will be a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> if the document is a <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link> and a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> if the document is a <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsondocument.xml#fromVariant">fromVariant</db:link>()</db:member>
<db:member><db:link xlink:href="qjsonvalue.xml#toVariant">QJsonValue::toVariant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QJsonDocument::operator!=(const QJsonDocument &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QJsonDocument &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QJsonDocument &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>returns true if <db:code role="parameter">other</db:code> is not equal to this document</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QJsonDocument &amp;QJsonDocument::operator=(const QJsonDocument &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QJsonDocument &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QJsonDocument &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument &amp; operator=(const QJsonDocument &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the <db:code role="parameter">other</db:code> document to this <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link>. Returns a reference to this object.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[since 5.10] QJsonDocument &amp;QJsonDocument::operator=(QJsonDocument &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QJsonDocument &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QJsonDocument &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument &amp; operator=(QJsonDocument &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this document.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QJsonDocument::operator==(const QJsonDocument &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QJsonDocument &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QJsonDocument &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:code role="parameter">other</db:code> document is equal to this document.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>[since 5.10] const QJsonValue QJsonDocument::operator[](const QString &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QJsonValue</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QJsonValue operator[](const QString &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> representing the value for the key <db:code role="parameter">key</db:code>.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qjsondocument.xml#object">object</db:link>().value(key).</db:para>
<db:para>The returned <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> is <db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Undefined</db:link> if the key does not exist, or if <db:link xlink:href="qjsondocument.xml#isObject">isObject</db:link>() is false.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link></db:member>
<db:member><db:link xlink:href="qjsonvalue.xml#isUndefined">QJsonValue::isUndefined</db:link>()</db:member>
<db:member><db:link xlink:href="qjsonobject.xml">QJsonObject</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d-1">
<db:title>[since 5.10] const QJsonValue QJsonDocument::operator[](QLatin1String <db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QJsonValue</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QJsonValue operator[](QLatin1String key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d-2">
<db:title>[since 5.10] const QJsonValue QJsonDocument::operator[](int <db:emphasis>i</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QJsonValue</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">const QJsonValue operator[](int i) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> representing the value for index <db:code role="parameter">i</db:code>.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qjsondocument.xml#array">array</db:link>().at(i).</db:para>
<db:para>The returned <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> is <db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Undefined</db:link>, if <db:code role="parameter">i</db:code> is out of bounds, or if <db:link xlink:href="qjsondocument.xml#isArray">isArray</db:link>() is false.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link></db:member>
<db:member><db:link xlink:href="qjsonvalue.xml#isUndefined">QJsonValue::isUndefined</db:link>()</db:member>
<db:member><db:link xlink:href="qjsonarray.xml">QJsonArray</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
