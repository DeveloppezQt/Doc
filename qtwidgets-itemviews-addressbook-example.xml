<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Address Book Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The address book example shows how to use proxy models to display different views onto data from a single model.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:alt>Screenshot of the Address Book example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/addressbook-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example provides an address book that allows contacts to be grouped alphabetically into 9 groups: ABC, DEF, GHI, ... , VW, ..., XYZ. This is achieved by using multiple views on the same model, each of which is filtered using an instance of the <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> class.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>The address book contains 5 classes: <db:code>MainWindow</db:code>, <db:code>AddressWidget</db:code>, <db:code>TableModel</db:code>, <db:code>NewAddressTab</db:code> and <db:code>AddDialog</db:code>. The <db:code>MainWindow</db:code> class uses <db:code>AddressWidget</db:code> as its central widget and provides <db:guilabel>File</db:guilabel> and <db:guilabel>Tools</db:guilabel> menus.</db:para>
<db:mediaobject>
<db:alt>Diagram for Address Book Example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/addressbook-classes.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:code>AddressWidget</db:code> class is a <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> subclass that is used to manipulate the 10 tabs displayed in the example: the 9 alphabet group tabs and an instance of <db:code>NewAddressTab</db:code>. The <db:code>NewAddressTab</db:code> class is a subclass of <db:link xlink:href="qwidget.xml">QWidget</db:link> that is only used whenever the address book is empty, prompting the user to add some contacts. <db:code>AddressWidget</db:code> also interacts with an instance of <db:code>TableModel</db:code> to add, edit and remove entries to the address book.</db:para>
<db:para><db:code>TableModel</db:code> is a subclass of <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link> that provides the standard model/view API to access data. It also holds a <db:link xlink:href="qlist.xml">QList</db:link> of <db:link xlink:href="qpair.xml">QPair</db:link>s corresponding to the contacts added. However, this data is not all visible in a single tab. Instead, <db:link xlink:href="qtableview.xml">QTableView</db:link> is used to provide 9 different views of the same data, according to the alphabet groups.</db:para>
<db:para><db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> is the class responsible for filtering the contacts for each group of contacts. Each proxy model uses a <db:link xlink:href="qregexp.xml">QRegExp</db:link> to filter out contacts that do not belong in the corresponding alphabetical group. The <db:code>AddDialog</db:code> class is used to obtain information from the user for the address book. This <db:link xlink:href="qdialog.xml">QDialog</db:link> subclass is instantiated by <db:code>NewAddressTab</db:code> to add contacts, and by <db:code>AddressWidget</db:code> to add and edit contacts.</db:para>
<db:para>We begin by looking at the <db:code>TableModel</db:code> implementation.</db:para>
</db:section>
<db:section xml:id="tablemodel-class-definition">
<db:title>TableModel Class Definition</db:title>
<db:para>The <db:code>TableModel</db:code> class provides standard API to access data in its <db:link xlink:href="qlist.xml">QList</db:link> of <db:link xlink:href="qpair.xml">QPair</db:link>s by subclassing <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link>. The basic functions that must be implemented in order to do so are: <db:code>rowCount()</db:code>, <db:code>columnCount()</db:code>, <db:code>data()</db:code>, <db:code>headerData()</db:code>. For TableModel to be editable, it has to provide implementations <db:code>insertRows()</db:code>, <db:code>removeRows()</db:code>, <db:code>setData()</db:code> and <db:code>flags()</db:code> functions.</db:para>
<db:programlisting language="cpp">class TableModel : public QAbstractTableModel
{
    Q_OBJECT

public:
    TableModel(QObject *parent = 0);
    TableModel(QList&lt;QPair&lt;QString, QString&gt; &gt; listofPairs, QObject *parent = 0);

    int rowCount(const QModelIndex &amp;parent) const;
    int columnCount(const QModelIndex &amp;parent) const;
    QVariant data(const QModelIndex &amp;index, int role) const;
    QVariant headerData(int section, Qt::Orientation orientation, int role) const;
    Qt::ItemFlags flags(const QModelIndex &amp;index) const;
    bool setData(const QModelIndex &amp;index, const QVariant &amp;value, int role = Qt::EditRole);
    bool insertRows(int position, int rows, const QModelIndex &amp;index = QModelIndex());
    bool removeRows(int position, int rows, const QModelIndex &amp;index = QModelIndex());
    QList&lt;QPair&lt;QString, QString&gt; &gt; getList();

private:
    QList&lt;QPair&lt;QString, QString&gt; &gt; listOfPairs;
};
</db:programlisting>
<db:para>Two constructors are used, a default constructor which uses <db:code>TableModel</db:code>'s own <db:code>QList&lt;QPair&lt;QString, QString&gt;&gt;</db:code> and one that takes <db:code>QList&lt;QPair&lt;QString, QString&gt;</db:code> as an argument, for convenience.</db:para>
</db:section>
<db:section xml:id="tablemodel-class-implementation">
<db:title>TableModel Class Implementation</db:title>
<db:para>We implement the two constructors as defined in the header file. The second constructor initializes the list of pairs in the model, with the parameter value.</db:para>
<db:programlisting language="cpp">TableModel::TableModel(QObject *parent)
    : QAbstractTableModel(parent)
{
}

TableModel::TableModel(QList&lt;QPair&lt;QString, QString&gt; &gt; pairs, QObject *parent)
    : QAbstractTableModel(parent)
{
    listOfPairs = pairs;
}
</db:programlisting>
<db:para>The <db:code>rowCount()</db:code> and <db:code>columnCount()</db:code> functions return the dimensions of the model. Whereas, <db:code>rowCount()</db:code>'s value will vary depending on the number of contacts added to the address book, <db:code>columnCount()</db:code>'s value is always 2 because we only need space for the <db:emphasis role="bold">Name</db:emphasis> and <db:emphasis role="bold">Address</db:emphasis> columns.</db:para>
<db:note>
<db:para>The <db:code>Q_UNUSED()</db:code> macro prevents the compiler from generating warnings regarding unused parameters.</db:para>
</db:note>
<db:programlisting language="cpp">int TableModel::rowCount(const QModelIndex &amp;parent) const
{
    Q_UNUSED(parent);
    return listOfPairs.size();
}

int TableModel::columnCount(const QModelIndex &amp;parent) const
{
    Q_UNUSED(parent);
    return 2;
}
</db:programlisting>
<db:para>The <db:code>data()</db:code> function returns either a <db:emphasis role="bold">Name</db:emphasis> or <db:emphasis role="bold">Address</db:emphasis>, based on the contents of the model index supplied. The row number stored in the model index is used to reference an item in the list of pairs. Selection is handled by the <db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link>, which will be explained with <db:code>AddressWidget</db:code>.</db:para>
<db:programlisting language="cpp">QVariant TableModel::data(const QModelIndex &amp;index, int role) const
{
    if (!index.isValid())
        return QVariant();

    if (index.row() &gt;= listOfPairs.size() || index.row() &lt; 0)
        return QVariant();

    if (role == Qt::DisplayRole) {
        QPair&lt;QString, QString&gt; pair = listOfPairs.at(index.row());

        if (index.column() == 0)
            return pair.first;
        else if (index.column() == 1)
            return pair.second;
    }
    return QVariant();
}
</db:programlisting>
<db:para>The <db:code>headerData()</db:code> function displays the table's header, <db:emphasis role="bold">Name</db:emphasis> and <db:emphasis role="bold">Address</db:emphasis>. If you require numbered entries for your address book, you can use a vertical header which we have hidden in this example (see the <db:code>AddressWidget</db:code> implementation).</db:para>
<db:programlisting language="cpp">QVariant TableModel::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (role != Qt::DisplayRole)
        return QVariant();

    if (orientation == Qt::Horizontal) {
        switch (section) {
            case 0:
                return tr(&quot;Name&quot;);

            case 1:
                return tr(&quot;Address&quot;);

            default:
                return QVariant();
        }
    }
    return QVariant();
}
</db:programlisting>
<db:para>The <db:code>insertRows()</db:code> function is called before new data is added, otherwise the data will not be displayed. The <db:code>beginInsertRows()</db:code> and <db:code>endInsertRows()</db:code> functions are called to ensure all connected views are aware of the changes.</db:para>
<db:programlisting language="cpp">bool TableModel::insertRows(int position, int rows, const QModelIndex &amp;index)
{
    Q_UNUSED(index);
    beginInsertRows(QModelIndex(), position, position + rows - 1);

    for (int row = 0; row &lt; rows; ++row) {
        QPair&lt;QString, QString&gt; pair(&quot; &quot;, &quot; &quot;);
        listOfPairs.insert(position, pair);
    }

    endInsertRows();
    return true;
}
</db:programlisting>
<db:para>The <db:code>removeRows()</db:code> function is called to remove data. Again, <db:link xlink:href="qabstractitemmodel.xml#beginRemoveRows">beginRemoveRows</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#endRemoveRows">endRemoveRows</db:link>() are called to ensure all connected views are aware of the changes.</db:para>
<db:programlisting language="cpp">bool TableModel::removeRows(int position, int rows, const QModelIndex &amp;index)
{
    Q_UNUSED(index);
    beginRemoveRows(QModelIndex(), position, position + rows - 1);

    for (int row = 0; row &lt; rows; ++row) {
        listOfPairs.removeAt(position);
    }

    endRemoveRows();
    return true;
}
</db:programlisting>
<db:para>The <db:code>setData()</db:code> function is the function that inserts data into the table, item by item and not row by row. This means that to fill a row in the address book, <db:code>setData()</db:code> must be called twice, as each row has 2 columns. It is important to emit the <db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>() signal as it tells all connected views to update their displays.</db:para>
<db:programlisting language="cpp">bool TableModel::setData(const QModelIndex &amp;index, const QVariant &amp;value, int role)
{
    if (index.isValid() &amp;&amp; role == Qt::EditRole) {
        int row = index.row();

        QPair&lt;QString, QString&gt; p = listOfPairs.value(row);

        if (index.column() == 0)
            p.first = value.toString();
        else if (index.column() == 1)
            p.second = value.toString();
        else
            return false;

        listOfPairs.replace(row, p);
        emit(dataChanged(index, index));

        return true;
    }

    return false;
}
</db:programlisting>
<db:para>The <db:code>flags()</db:code> function returns the item flags for the given index.</db:para>
<db:programlisting language="cpp">Qt::ItemFlags TableModel::flags(const QModelIndex &amp;index) const
{
    if (!index.isValid())
        return Qt::ItemIsEnabled;

    return QAbstractTableModel::flags(index) | Qt::ItemIsEditable;
}
</db:programlisting>
<db:para>We set the <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsEditable</db:link> flag because we want to allow the <db:code>TableModel</db:code> to be edited. Although for this example we don't use the editing features of the <db:link xlink:href="qtableview.xml">QTableView</db:link> object, we enable them here so that we can reuse the model in other programs.</db:para>
<db:para>The last function in <db:code>TableModel</db:code>, <db:code>getList()</db:code> returns the <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qpair.xml">QPair</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qstring.xml">QString</db:link>&gt;&gt; object that holds all the contacts in the address book. We use this function later to obtain the list of contacts to check for existing entries, write the contacts to a file and read them back. Further explanation is given with <db:code>AddressWidget</db:code>.</db:para>
<db:programlisting language="cpp">QList&lt; QPair&lt;QString, QString&gt; &gt; TableModel::getList()
{
    return listOfPairs;
}
</db:programlisting>
</db:section>
<db:section xml:id="addresswidget-class-definition">
<db:title>AddressWidget Class Definition</db:title>
<db:para>The <db:code>AddressWidget</db:code> class is technically the main class involved in this example as it provides functions to add, edit and remove contacts, to save the contacts to a file and to load them from a file.</db:para>
<db:programlisting language="cpp">class AddressWidget : public QTabWidget
{
    Q_OBJECT

public:
    AddressWidget(QWidget *parent = 0);
    void readFromFile(const QString &amp;fileName);
    void writeToFile(const QString &amp;fileName);

public slots:
    void addEntry();
    void addEntry(QString name, QString address);
    void editEntry();
    void removeEntry();

signals:
    void selectionChanged (const QItemSelection &amp;selected);

private:
    void setupTabs();

    TableModel *table;
    NewAddressTab *newAddressTab;
    QSortFilterProxyModel *proxyModel;
};
</db:programlisting>
<db:para><db:code>AddressWidget</db:code> extends <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> in order to hold 10 tabs (<db:code>NewAddressTab</db:code> and the 9 alphabet group tabs) and also manipulates <db:code>table</db:code>, the <db:code>TableModel</db:code> object, <db:code>proxyModel</db:code>, the <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> object that we use to filter the entries, and <db:code>tableView</db:code>, the <db:link xlink:href="qtableview.xml">QTableView</db:link> object.</db:para>
</db:section>
<db:section xml:id="addresswidget-class-implementation">
<db:title>AddressWidget Class Implementation</db:title>
<db:para>The <db:code>AddressWidget</db:code> constructor accepts a parent widget and instantiates <db:code>NewAddressTab</db:code>, <db:code>TableModel</db:code> and <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link>. The <db:code>NewAddressTab</db:code> object, which is used to indicate that the address book is empty, is added and the rest of the 9 tabs are set up with <db:code>setupTabs()</db:code>.</db:para>
<db:programlisting language="cpp">AddressWidget::AddressWidget(QWidget *parent)
    : QTabWidget(parent)
{
    table = new TableModel(this);
    newAddressTab = new NewAddressTab(this);
    connect(newAddressTab, SIGNAL(sendDetails(QString, QString)),
        this, SLOT(addEntry(QString, QString)));

    addTab(newAddressTab, &quot;Address Book&quot;);

    setupTabs();
}
</db:programlisting>
<db:para>The <db:code>setupTabs()</db:code> function is used to set up the 9 alphabet group tabs, table views and proxy models in <db:code>AddressWidget</db:code>. Each proxy model in turn is set to filter contact names according to the relevant alphabet group using a <db:link xlink:href="qt.xml#CaseSensitivity-enum">case-insensitive</db:link> <db:link xlink:href="qregexp.xml">QRegExp</db:link> object. The table views are also sorted in ascending order using the corresponding proxy model's <db:link xlink:href="qsortfilterproxymodel.xml#sort">sort</db:link>() function.</db:para>
<db:para>Each table view's selectionMode is set to <db:link xlink:href="qabstractitemview.xml#SelectionMode-enum">QAbstractItemView::SingleSelection</db:link> and selectionBehavior is set to <db:link xlink:href="qabstractitemview.xml#SelectionBehavior-enum">QAbstractItemView::SelectRows</db:link>, allowing the user to select all the items in one row at the same time. Each <db:link xlink:href="qtableview.xml">QTableView</db:link> object is automatically given a <db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link> that keeps track of the selected indexes.</db:para>
<db:programlisting language="cpp">void AddressWidget::setupTabs()
{
    QStringList groups;
    groups &lt;&lt; &quot;ABC&quot; &lt;&lt; &quot;DEF&quot; &lt;&lt; &quot;GHI&quot; &lt;&lt; &quot;JKL&quot; &lt;&lt; &quot;MNO&quot; &lt;&lt; &quot;PQR&quot; &lt;&lt; &quot;STU&quot; &lt;&lt; &quot;VW&quot; &lt;&lt; &quot;XYZ&quot;;

    for (int i = 0; i &lt; groups.size(); ++i) {
        QString str = groups.at(i);
        QString regExp = QString(&quot;^[%1].*&quot;).arg(str);

        proxyModel = new QSortFilterProxyModel(this);
        proxyModel-&gt;setSourceModel(table);
        proxyModel-&gt;setFilterRegExp(QRegExp(regExp, Qt::CaseInsensitive));
        proxyModel-&gt;setFilterKeyColumn(0);

        QTableView *tableView = new QTableView;
        tableView-&gt;setModel(proxyModel);

        tableView-&gt;setSelectionBehavior(QAbstractItemView::SelectRows);
        tableView-&gt;horizontalHeader()-&gt;setStretchLastSection(true);
        tableView-&gt;verticalHeader()-&gt;hide();
        tableView-&gt;setEditTriggers(QAbstractItemView::NoEditTriggers);
        tableView-&gt;setSelectionMode(QAbstractItemView::SingleSelection);

        tableView-&gt;setSortingEnabled(true);

        connect(tableView-&gt;selectionModel(),
            SIGNAL(selectionChanged(QItemSelection,QItemSelection)),
            this, SIGNAL(selectionChanged(QItemSelection)));

        addTab(tableView, str);
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link> class provides a <db:link xlink:href="qitemselectionmodel.xml#selectionChanged">selectionChanged</db:link> signal that is connected to <db:code>AddressWidget</db:code>'s <db:code>selectionChanged()</db:code> signal. This signal to signal connection is necessary to enable the <db:guilabel>Edit Entry...</db:guilabel> and <db:guilabel>Remove Entry</db:guilabel> actions in <db:code>MainWindow</db:code>'s Tools menu. This connection is further explained in <db:code>MainWindow</db:code>'s implementation.</db:para>
<db:para>Each table view in the address book is added as a tab to the <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> with the relevant label, obtained from the <db:link xlink:href="qstringlist.xml">QStringList</db:link> of groups.</db:para>
<db:mediaobject>
<db:alt>Signals and Slots Connections</db:alt>
<db:imageobject>
<db:imagedata fileref="images/addressbook-signals.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We provide 2 <db:code>addEntry()</db:code> functions: 1 which is intended to be used to accept user input, and the other which performs the actual task of adding new entries to the address book. We divide the responsibility of adding entries into two parts to allow <db:code>newAddressTab</db:code> to insert data without having to popup a dialog.</db:para>
<db:para>The first <db:code>addEntry()</db:code> function is a slot connected to the <db:code>MainWindow</db:code>'s <db:guilabel>Add Entry...</db:guilabel> action. This function creates an <db:code>AddDialog</db:code> object and then calls the second <db:code>addEntry()</db:code> function to actually add the contact to <db:code>table</db:code>.</db:para>
<db:programlisting language="cpp">void AddressWidget::addEntry()
{
    AddDialog aDialog;

    if (aDialog.exec()) {
        QString name = aDialog.nameText-&gt;text();
        QString address = aDialog.addressText-&gt;toPlainText();

        addEntry(name, address);
    }
}
</db:programlisting>
<db:para>Basic validation is done in the second <db:code>addEntry()</db:code> function to prevent duplicate entries in the address book. As mentioned with <db:code>TableModel</db:code>, this is part of the reason why we require the getter method <db:code>getList()</db:code>.</db:para>
<db:programlisting language="cpp">void AddressWidget::addEntry(QString name, QString address)
{
    QList&lt;QPair&lt;QString, QString&gt; &gt;list = table-&gt;getList();
    QPair&lt;QString, QString&gt; pair(name, address);

    if (!list.contains(pair)) {
        table-&gt;insertRows(0, 1, QModelIndex());

        QModelIndex index = table-&gt;index(0, 0, QModelIndex());
        table-&gt;setData(index, name, Qt::EditRole);
        index = table-&gt;index(0, 1, QModelIndex());
        table-&gt;setData(index, address, Qt::EditRole);
        removeTab(indexOf(newAddressTab));
    } else {
        QMessageBox::information(this, tr(&quot;Duplicate Name&quot;),
            tr(&quot;The name \&quot;%1\&quot; already exists.&quot;).arg(name));
    }
}
</db:programlisting>
<db:para>If the model does not already contain an entry with the same name, we call <db:code>setData()</db:code> to insert the name and address into the first and second columns. Otherwise, we display a <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> to inform the user.</db:para>
<db:note>
<db:para>The <db:code>newAddressTab</db:code> is removed once a contact is added as the address book is no longer empty.</db:para>
</db:note>
<db:para>Editing an entry is a way to update the contact's address only, as the example does not allow the user to change the name of an existing contact.</db:para>
<db:para>Firstly, we obtain the active tab's <db:link xlink:href="qtableview.xml">QTableView</db:link> object using <db:link xlink:href="qtabwidget.xml#currentWidget">QTabWidget::currentWidget</db:link>(). Then we extract the <db:code>selectionModel</db:code> from the <db:code>tableView</db:code> to obtain the selected indexes.</db:para>
<db:programlisting language="cpp">void AddressWidget::editEntry()
{
    QTableView *temp = static_cast&lt;QTableView*&gt;(currentWidget());
    QSortFilterProxyModel *proxy = static_cast&lt;QSortFilterProxyModel*&gt;(temp-&gt;model());
    QItemSelectionModel *selectionModel = temp-&gt;selectionModel();

    QModelIndexList indexes = selectionModel-&gt;selectedRows();
    QString name;
    QString address;
    int row = -1;

    foreach (QModelIndex index, indexes) {
        row = proxy-&gt;mapToSource(index).row();
        QModelIndex nameIndex = table-&gt;index(row, 0, QModelIndex());
        QVariant varName = table-&gt;data(nameIndex, Qt::DisplayRole);
        name = varName.toString();

        QModelIndex addressIndex = table-&gt;index(row, 1, QModelIndex());
        QVariant varAddr = table-&gt;data(addressIndex, Qt::DisplayRole);
        address = varAddr.toString();
    }
</db:programlisting>
<db:para>Next we extract data from the row the user intends to edit. This data is displayed in an instance of <db:code>AddDialog</db:code> with a different window title. The <db:code>table</db:code> is only updated if changes have been made to data in <db:code>aDialog</db:code>.</db:para>
<db:programlisting language="cpp">    AddDialog aDialog;
    aDialog.setWindowTitle(tr(&quot;Edit a Contact&quot;));

    aDialog.nameText-&gt;setReadOnly(true);
    aDialog.nameText-&gt;setText(name);
    aDialog.addressText-&gt;setText(address);

    if (aDialog.exec()) {
        QString newAddress = aDialog.addressText-&gt;toPlainText();
        if (newAddress != address) {
            QModelIndex index = table-&gt;index(row, 1, QModelIndex());
            table-&gt;setData(index, newAddress, Qt::EditRole);
        }
    }
}
</db:programlisting>
<db:mediaobject>
<db:alt>Screenshot of Dialog to Edit a Contact</db:alt>
<db:imageobject>
<db:imagedata fileref="images/addressbook-editdialog.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Entries are removed using the <db:code>removeEntry()</db:code> function. The selected row is removed by accessing it through the <db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link> object, <db:code>selectionModel</db:code>. The <db:code>newAddressTab</db:code> is re-added to the <db:code>AddressWidget</db:code> only if the user removes all the contacts in the address book.</db:para>
<db:programlisting language="cpp">void AddressWidget::removeEntry()
{
    QTableView *temp = static_cast&lt;QTableView*&gt;(currentWidget());
    QSortFilterProxyModel *proxy = static_cast&lt;QSortFilterProxyModel*&gt;(temp-&gt;model());
    QItemSelectionModel *selectionModel = temp-&gt;selectionModel();

    QModelIndexList indexes = selectionModel-&gt;selectedRows();

    foreach (QModelIndex index, indexes) {
        int row = proxy-&gt;mapToSource(index).row();
        table-&gt;removeRows(row, 1, QModelIndex());
    }

    if (table-&gt;rowCount(QModelIndex()) == 0) {
        insertTab(0, newAddressTab, &quot;Address Book&quot;);
    }
}
</db:programlisting>
<db:para>The <db:code>writeToFile()</db:code> function is used to save a file containing all the contacts in the address book. The file is saved in a custom <db:code>.dat</db:code> format. The contents of the <db:link xlink:href="qlist.xml">QList</db:link> of <db:link xlink:href="qpair.xml">QPair</db:link>s are written to <db:code>file</db:code> using <db:link xlink:href="qdatastream.xml">QDataStream</db:link>. If the file cannot be opened, a <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> is displayed with the related error message.</db:para>
<db:programlisting language="cpp">void AddressWidget::writeToFile(const QString &amp;fileName)
{
    QFile file(fileName);

    if (!file.open(QIODevice::WriteOnly)) {
        QMessageBox::information(this, tr(&quot;Unable to open file&quot;), file.errorString());
        return;
    }

    QList&lt;QPair&lt;QString, QString&gt; &gt; pairs = table-&gt;getList();
    QDataStream out(&amp;file);
    out &lt;&lt; pairs;
}
</db:programlisting>
<db:para>The <db:code>readFromFile()</db:code> function loads a file containing all the contacts in the address book, previously saved using <db:code>writeToFile()</db:code>. <db:link xlink:href="qdatastream.xml">QDataStream</db:link> is used to read the contents of a <db:code>.dat</db:code> file into a list of pairs and each of these is added using <db:code>addEntry()</db:code>.</db:para>
<db:programlisting language="cpp">void AddressWidget::readFromFile(const QString &amp;fileName)
{
    QFile file(fileName);

    if (!file.open(QIODevice::ReadOnly)) {
        QMessageBox::information(this, tr(&quot;Unable to open file&quot;),
            file.errorString());
        return;
    }

    QList&lt;QPair&lt;QString, QString&gt; &gt; pairs = table-&gt;getList();
    QDataStream in(&amp;file);
    in &gt;&gt; pairs;

    if (pairs.isEmpty()) {
        QMessageBox::information(this, tr(&quot;No contacts in file&quot;),
                                 tr(&quot;The file you are attempting to open contains no contacts.&quot;));
    } else {
        for (int i=0; i&lt;pairs.size(); ++i) {
            QPair&lt;QString, QString&gt; p = pairs.at(i);
            addEntry(p.first, p.second);
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="newaddresstab-class-definition">
<db:title>NewAddressTab Class Definition</db:title>
<db:para>The <db:code>NewAddressTab</db:code> class provides an informative tab telling the user that the address book is empty. It appears and disappears according to the contents of the address book, as mentioned in <db:code>AddressWidget</db:code>'s implementation.</db:para>
<db:mediaobject>
<db:alt>Screenshot of NewAddressTab</db:alt>
<db:imageobject>
<db:imagedata fileref="images/addressbook-newaddresstab.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:code>NewAddressTab</db:code> class extends <db:link xlink:href="qwidget.xml">QWidget</db:link> and contains a <db:link xlink:href="qlabel.xml">QLabel</db:link> and <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>.</db:para>
<db:programlisting language="cpp">class NewAddressTab : public QWidget
{
    Q_OBJECT

public:
    NewAddressTab(QWidget *parent = 0);

public slots:
    void addEntry();

signals:
    void sendDetails(QString name, QString address);

private:
    QLabel *descriptionLabel;
    QPushButton *addButton;
    QVBoxLayout *mainLayout;

};
</db:programlisting>
</db:section>
<db:section xml:id="newaddresstab-class-implementation">
<db:title>NewAddressTab Class Implementation</db:title>
<db:para>The constructor instantiates the <db:code>addButton</db:code>, <db:code>descriptionLabel</db:code> and connects the <db:code>addButton</db:code>'s signal to the <db:code>addEntry()</db:code> slot.</db:para>
<db:programlisting language="cpp">NewAddressTab::NewAddressTab(QWidget *parent)
{
    Q_UNUSED(parent);

    descriptionLabel = new QLabel(tr(&quot;There are currently no contacts in your address book. &quot;
                                      &quot;\nClick Add to add new contacts.&quot;));

    addButton = new QPushButton(tr(&quot;Add&quot;));

    connect(addButton, SIGNAL(clicked()), this, SLOT(addEntry()));

    mainLayout = new QVBoxLayout;
    mainLayout-&gt;addWidget(descriptionLabel);
    mainLayout-&gt;addWidget(addButton, 0, Qt::AlignCenter);

    setLayout(mainLayout);
}
</db:programlisting>
<db:para>The <db:code>addEntry()</db:code> function is similar to <db:code>AddressWidget</db:code>'s <db:code>addEntry()</db:code> in the sense that both functions instantiate an <db:code>AddDialog</db:code> object. Data from the dialog is extracted and sent to <db:code>AddressWidget</db:code>'s <db:code>addEntry()</db:code> slot by emitting the <db:code>sendDetails()</db:code> signal.</db:para>
<db:programlisting language="cpp">void NewAddressTab::addEntry()
{
    AddDialog aDialog;

    if (aDialog.exec()) {
        QString name = aDialog.nameText-&gt;text();
        QString address = aDialog.addressText-&gt;toPlainText();

        emit sendDetails(name, address);
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/signals-n-slots-aw-nat.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="adddialog-class-definition">
<db:title>AddDialog Class Definition</db:title>
<db:para>The <db:code>AddDialog</db:code> class extends <db:link xlink:href="qdialog.xml">QDialog</db:link> and provides the user with a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> and a <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> to input data into the address book.</db:para>
<db:programlisting language="cpp">class AddDialog : public QDialog
{
    Q_OBJECT

public:
    AddDialog(QWidget *parent = 0);
    QLineEdit *nameText;
    QTextEdit *addressText;

private:
    QLabel *nameLabel;
    QLabel *addressLabel;
    QPushButton *okButton;
    QPushButton *cancelButton;
};
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/addressbook-adddialog.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="adddialog-class-implementation">
<db:title>AddDialog Class Implementation</db:title>
<db:para>The <db:code>AddDialog</db:code>'s constructor sets up the user interface, creating the necessary widgets and placing them into layouts.</db:para>
<db:programlisting language="cpp">AddDialog::AddDialog(QWidget *parent)
    : QDialog(parent)
{
    nameLabel = new QLabel(&quot;Name&quot;);
    addressLabel = new QLabel(&quot;Address&quot;);
    okButton = new QPushButton(&quot;OK&quot;);
    cancelButton = new QPushButton(&quot;Cancel&quot;);

    nameText = new QLineEdit;
    addressText = new QTextEdit;

    QGridLayout *gLayout = new QGridLayout;
    gLayout-&gt;setColumnStretch(1, 2);
    gLayout-&gt;addWidget(nameLabel, 0, 0);
    gLayout-&gt;addWidget(nameText, 0, 1);

    gLayout-&gt;addWidget(addressLabel, 1, 0, Qt::AlignLeft|Qt::AlignTop);
    gLayout-&gt;addWidget(addressText, 1, 1, Qt::AlignLeft);

    QHBoxLayout *buttonLayout = new QHBoxLayout;
    buttonLayout-&gt;addWidget(okButton);
    buttonLayout-&gt;addWidget(cancelButton);

    gLayout-&gt;addLayout(buttonLayout, 2, 1, Qt::AlignRight);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&gt;addLayout(gLayout);
    setLayout(mainLayout);

    connect(okButton, SIGNAL(clicked()), this, SLOT(accept()));
    connect(cancelButton, SIGNAL(clicked()), this, SLOT(reject()));

    setWindowTitle(tr(&quot;Add a Contact&quot;));
}
</db:programlisting>
<db:para>To give the dialog the desired behavior, we connect the <db:guilabel>OK</db:guilabel> and <db:guilabel>Cancel</db:guilabel> buttons to the dialog's <db:link xlink:href="qdialog.xml#accept">accept</db:link>() and <db:link xlink:href="qdialog.xml#reject">reject</db:link>() slots. Since the dialog only acts as a container for name and address information, we do not need to implement any other functions for it.</db:para>
</db:section>
<db:section xml:id="mainwindow-class-definition">
<db:title>MainWindow Class Definition</db:title>
<db:para>The <db:code>MainWindow</db:code> class extends <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> and implements the menus and actions necessary to manipulate the address book.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/addressbook-filemenu.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/addressbook-toolsmenu.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow();

private slots:
    void updateActions(const QItemSelection &amp;selection);
    void openFile();
    void saveFile();

private:
    void createMenus();

    AddressWidget *addressWidget;
    QMenu *fileMenu;
    QMenu *toolMenu;
    QAction *openAct;
    QAction *saveAct;
    QAction *exitAct;
    QAction *addAct;
    QAction *editAct;
    QAction *removeAct;
};
</db:programlisting>
<db:para>The <db:code>MainWindow</db:code> class uses an <db:code>AddressWidget</db:code> as its central widget and provides the File menu with <db:guilabel>Open</db:guilabel>, <db:guilabel>Close</db:guilabel> and <db:guilabel>Exit</db:guilabel> actions, as well as the <db:guilabel>Tools</db:guilabel> menu with <db:guilabel>Add Entry...</db:guilabel>, <db:guilabel>Edit Entry...</db:guilabel> and <db:guilabel>Remove Entry</db:guilabel> actions.</db:para>
</db:section>
<db:section xml:id="mainwindow-class-implementation">
<db:title>MainWindow Class Implementation</db:title>
<db:para>The constructor for <db:code>MainWindow</db:code> instantiates AddressWidget, sets it as its central widget and calls the <db:code>createMenus()</db:code> function.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow()
{
    addressWidget = new AddressWidget;
    setCentralWidget(addressWidget);
    createMenus();
    setWindowTitle(tr(&quot;Address Book&quot;));
}
</db:programlisting>
<db:para>The <db:code>createMenus()</db:code> function sets up the <db:guilabel>File</db:guilabel> and <db:guilabel>Tools</db:guilabel> menus, connecting the actions to their respective slots. Both the <db:guilabel>Edit Entry...</db:guilabel> and <db:guilabel>Remove Entry</db:guilabel> actions are disabled by default as such actions cannot be carried out on an empty address book. They are only enabled when one or more contacts are added.</db:para>
<db:programlisting language="cpp">void MainWindow::createMenus()
{
    fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));

    openAct = new QAction(tr(&quot;&amp;Open...&quot;), this);
    fileMenu-&gt;addAction(openAct);
    connect(openAct, SIGNAL(triggered()), this, SLOT(openFile()));
    ...

    editAct = new QAction(tr(&quot;&amp;Edit Entry...&quot;), this);
    editAct-&gt;setEnabled(false);
    toolMenu-&gt;addAction(editAct);
    connect(editAct, SIGNAL(triggered()), addressWidget, SLOT(editEntry()));

    toolMenu-&gt;addSeparator();

    removeAct = new QAction(tr(&quot;&amp;Remove Entry&quot;), this);
    removeAct-&gt;setEnabled(false);
    toolMenu-&gt;addAction(removeAct);
    connect(removeAct, SIGNAL(triggered()), addressWidget, SLOT(removeEntry()));

    connect(addressWidget, SIGNAL(selectionChanged(QItemSelection)),
        this, SLOT(updateActions(QItemSelection)));
}
</db:programlisting>
<db:para>Apart from connecting all the actions' signals to their respective slots, we also connect <db:code>AddressWidget</db:code>'s <db:code>selectionChanged()</db:code> signal to its <db:code>updateActions()</db:code> slot.</db:para>
<db:para>The <db:code>openFile()</db:code> function allows the user to choose a file with the <db:link xlink:href="qfiledialog.xml#getOpenFileName">open file dialog</db:link>. The chosen file has to be a custom <db:code>.dat</db:code> file that contains address book contacts. This function is a slot connected to <db:code>openAct</db:code> in the <db:guilabel>File</db:guilabel> menu.</db:para>
<db:programlisting language="cpp">void MainWindow::openFile()
{
    QString fileName = QFileDialog::getOpenFileName(this);
    if (!fileName.isEmpty())
        addressWidget-&gt;readFromFile(fileName);
}
</db:programlisting>
<db:para>The <db:code>saveFile()</db:code> function allows the user to save a file with the <db:link xlink:href="qfiledialog.xml#getSaveFileName">save file dialog</db:link>. This function is a slot connected to <db:code>saveAct</db:code> in the <db:guilabel>File</db:guilabel> menu.</db:para>
<db:programlisting language="cpp">void MainWindow::saveFile()
{
    QString fileName = QFileDialog::getSaveFileName(this);
    if (!fileName.isEmpty())
        addressWidget-&gt;writeToFile(fileName);
}
</db:programlisting>
<db:para>The <db:code>updateActions()</db:code> function enables and disables <db:guilabel>Edit Entry...</db:guilabel> and <db:guilabel>Remove Entry</db:guilabel> depending on the contents of the address book. If the address book is empty, these actions are disabled; otherwise, they are enabled. This function is a slot is connected to the <db:code>AddressWidget</db:code>'s <db:code>selectionChanged()</db:code> signal.</db:para>
<db:programlisting language="cpp">void MainWindow::updateActions(const QItemSelection &amp;selection)
{
    QModelIndexList indexes = selection.indexes();

    if (!indexes.isEmpty()) {
        removeAct-&gt;setEnabled(true);
        editAct-&gt;setEnabled(true);
    } else {
        removeAct-&gt;setEnabled(false);
        editAct-&gt;setEnabled(false);
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="main-function">
<db:title>main() Function</db:title>
<db:para>The main function for the address book instantiates <db:link xlink:href="qapplication.xml">QApplication</db:link> and opens a <db:code>MainWindow</db:code> before running the event loop.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    MainWindow mw;
    mw.show();
    return app.exec();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="itemviews/addressbook/adddialog.cpp">itemviews/addressbook/adddialog.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/addressbook/adddialog.h">itemviews/addressbook/adddialog.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/addressbook/addressbook.pro">itemviews/addressbook/addressbook.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/addressbook/addresswidget.cpp">itemviews/addressbook/addresswidget.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/addressbook/addresswidget.h">itemviews/addressbook/addresswidget.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/addressbook/main.cpp">itemviews/addressbook/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/addressbook/mainwindow.cpp">itemviews/addressbook/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/addressbook/mainwindow.h">itemviews/addressbook/mainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/addressbook/newaddresstab.cpp">itemviews/addressbook/newaddresstab.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/addressbook/newaddresstab.h">itemviews/addressbook/newaddresstab.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/addressbook/tablemodel.cpp">itemviews/addressbook/tablemodel.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/addressbook/tablemodel.h">itemviews/addressbook/tablemodel.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
