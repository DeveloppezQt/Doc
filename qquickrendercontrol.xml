<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickRenderControl Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> class provides a mechanism for rendering the Qt Quick scenegraph onto an offscreen render target in a fully application-controlled manner.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickRenderControl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> and <db:link xlink:href="qquickview.xml">QQuickView</db:link> and their associated internal render loops render the Qt Quick scene onto a native window. In some cases, for example when integrating with 3rd party OpenGL, Vulkan, Metal, or Direct 3D renderers, it can be useful to get the scene into a texture that can then be used in arbitrary ways by the external rendering engine. Such a mechanism is also essential when integrating with a VR framework. <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> makes this possible in a hardware accelerated manner, unlike the performance-wise limited alternative of using <db:link xlink:href="qquickwindow.xml#grabWindow">QQuickWindow::grabWindow</db:link>()</db:para>
<db:para>When using a <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link>, the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> must not be <db:link xlink:href="qwindow.xml#show">shown</db:link> (it will not be visible on-screen) and there will not be an underlying native window for it. Instead, the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> instance is associated with the render control object, using the overload of the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> constructor, and a texture or image object specified via <db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>(). The <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> object is still essential, because it represents the Qt Quick scene and provides the bulk of the scene management and event delivery mechanisms. It does not however act as a real on-screen window from the windowing system's perspective.</db:para>
<db:para>Management of the graphics devices, contexts, image and texture objects is up to the application. The device or context that will be used by Qt Quick must be created before calling <db:link xlink:href="qquickrendercontrol.xml#initialize">initialize</db:link>(). The creation of the texture object can be deferred, see below. Qt 5.4 introduces the ability for <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> to adopt existing native contexts. Together with <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> this makes it possible to create a <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> that shares with an external rendering engine's existing context. This new <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> can then be used to render the Qt Quick scene into a texture that is accessible by the other engine's context too. For Vulkan, Metal, and Direct 3D there are no Qt-provided wrappers for device objects, so existing ones can be passed as-is via <db:link xlink:href="qquickwindow.xml#setGraphicsDevice">QQuickWindow::setGraphicsDevice</db:link>().</db:para>
<db:para>Loading and instantiation of the QML components happen by using a <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link>. Once the root object is created, it will need to be parented to the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>'s contentItem().</db:para>
<db:para>Applications will usually have to connect to 4 important signals:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qquickwindow.xml#sceneGraphInitialized">QQuickWindow::sceneGraphInitialized</db:link>() Emitted at some point after calling <db:link xlink:href="qquickrendercontrol.xml#initialize">QQuickRenderControl::initialize</db:link>(). Upon this signal, the application is expected to create its framebuffer object and associate it with the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qquickwindow.xml#sceneGraphInvalidated">QQuickWindow::sceneGraphInvalidated</db:link>() When the scenegraph resources are released, the framebuffer object can be destroyed too.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qquickrendercontrol.xml#renderRequested">QQuickRenderControl::renderRequested</db:link>() Indicates that the scene has to be rendered by calling <db:link xlink:href="qquickrendercontrol.xml#render">render</db:link>(). After making the context current, applications are expected to call <db:link xlink:href="qquickrendercontrol.xml#render">render</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qquickrendercontrol.xml#sceneChanged">QQuickRenderControl::sceneChanged</db:link>() Indicates that the scene has changed meaning that, before rendering, polishing and synchronizing is also necessary.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To send events, for example mouse or keyboard events, to the scene, use <db:link xlink:href="qcoreapplication.xml#sendEvent">QCoreApplication::sendEvent</db:link>() with the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> instance as the receiver.</db:para>
<db:para>For key events it may be also necessary to set the focus manually on the desired item. In practice this involves calling <db:link xlink:href="qquickitem.xml#forceActiveFocus">forceActiveFocus</db:link>() on the desired item, for example the scene's root item, once it is associated with the scene (the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>).</db:para>
<db:note>
<db:para>In general <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> is supported in combination with all Qt Quick backends. However, some functionality, in particular grab(), may not be available in all cases.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickRenderControl">
<db:title>[explicit] QQuickRenderControl::QQuickRenderControl(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickRenderControl</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickRenderControl(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> object, with parent object <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickRenderControl">
<db:title>[override virtual] QQuickRenderControl::~QQuickRenderControl()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQuickRenderControl</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQuickRenderControl() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the instance. Releases all scenegraph resources.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendercontrol.xml#invalidate">invalidate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginFrame">
<db:title>[since 6.0] void QQuickRenderControl::beginFrame()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>beginFrame</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginFrame()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Specifies the start of a graphics frame. Calls to <db:link xlink:href="qquickrendercontrol.xml#sync">sync</db:link>() or <db:link xlink:href="qquickrendercontrol.xml#render">render</db:link>() must be enclosed by calls to beginFrame() and <db:link xlink:href="qquickrendercontrol.xml#endFrame">endFrame</db:link>().</db:para>
<db:para>Unlike the earlier OpenGL-only world of Qt 5, rendering with other graphics APIs requires more well-defined points of starting and ending a frame. When manually driving the rendering loop via <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link>, it now falls to the user of <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> to specify these points.</db:para>
<db:para>A typical update step, including initialization of rendering into an existing texture, could look like the following. The example snippet assumes Direct3D 11 but the same concepts apply other graphics APIs as well.</db:para>
<db:programlisting language="cpp">if (!m_quickInitialized) {
    m_quickWindow-&amp;gt;setGraphicsDevice(QQuickGraphicsDevice::fromDeviceAndContext(m_engine-&amp;gt;device(), m_engine-&amp;gt;context()));

    if (!m_renderControl-&amp;gt;initialize())
        qWarning(&quot;Failed to initialize redirected Qt Quick rendering&quot;);

    m_quickWindow-&amp;gt;setRenderTarget(QQuickRenderTarget::fromNativeTexture({ quint64(m_res.texture), 0 },
                                                                         QSize(QML_WIDTH, QML_HEIGHT),
                                                                         SAMPLE_COUNT));

    m_quickInitialized = true;
}

m_renderControl-&amp;gt;polishItems();

m_renderControl-&amp;gt;beginFrame();
m_renderControl-&amp;gt;sync();
m_renderControl-&amp;gt;render();
m_renderControl-&amp;gt;endFrame(); // Qt Quick's rendering commands are submitted to the device context here
</db:programlisting>
<db:note>
<db:para>This function does not need to be, and must not be, called when using the <db:code>software</db:code> adaptation of Qt Quick.</db:para>
</db:note>
<db:note>
<db:para>Internally beginFrame() and <db:link xlink:href="qquickrendercontrol.xml#endFrame">endFrame</db:link>() invoke <db:link xlink:href="qrhi.xml#beginOffscreenFrame">beginOffscreenFrame</db:link>() and <db:link xlink:href="qrhi.xml#endOffscreenFrame">endOffscreenFrame</db:link>(), respectively. This implies that there must not be a frame (neither offscreen, nor swapchain-based) being recorded on the <db:link xlink:href="qrhi.xml">QRhi</db:link> when this function is called.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendercontrol.xml#endFrame">endFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml#initialize">initialize</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml#sync">sync</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml#render">render</db:link>()</db:member>
<db:member><db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link></db:member>
<db:member><db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="commandBuffer">
<db:title>[since 6.6] QRhiCommandBuffer *QQuickRenderControl::commandBuffer() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRhiCommandBuffer *</db:type>
<db:methodname>commandBuffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRhiCommandBuffer * commandBuffer() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current command buffer.</db:para>
<db:para>Once <db:link xlink:href="qquickrendercontrol.xml#beginFrame">beginFrame</db:link>() is called, a <db:link xlink:href="qrhicommandbuffer.xml">QRhiCommandBuffer</db:link> is set up automatically. That is the command buffer Qt Quick scenegraph uses, but in some cases applications may also want to query it, for example to issue resource updates (for example, a texture readback).</db:para>
<db:para>The returned command buffer reference should only be used between <db:link xlink:href="qquickrendercontrol.xml#beginFrame">beginFrame</db:link>() and <db:link xlink:href="qquickrendercontrol.xml#endFrame">endFrame</db:link>(). There are specific exceptions, for example calling <db:link xlink:href="qrhicommandbuffer.xml#lastCompletedGpuTime">lastCompletedGpuTime</db:link>() on the command buffer right after <db:link xlink:href="qquickrendercontrol.xml#endFrame">endFrame</db:link>(), but before the next <db:link xlink:href="qquickrendercontrol.xml#beginFrame">beginFrame</db:link>(), is valid.</db:para>
<db:note>
<db:para>This function is not applicable and returns null when using the <db:code>software</db:code> adaptation of Qt Quick.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendercontrol.xml#rhi">rhi</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml#beginFrame">beginFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml#endFrame">endFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endFrame">
<db:title>[since 6.0] void QQuickRenderControl::endFrame()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endFrame</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endFrame()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Specifies the end of a graphics frame. Calls to <db:link xlink:href="qquickrendercontrol.xml#sync">sync</db:link>() or <db:link xlink:href="qquickrendercontrol.xml#render">render</db:link>() must be enclosed by calls to <db:link xlink:href="qquickrendercontrol.xml#beginFrame">beginFrame</db:link>() and endFrame().</db:para>
<db:para>When this function is called, any graphics commands enqueued by the scenegraph are submitted to the context or command queue, whichever is applicable.</db:para>
<db:note>
<db:para>This function does not need to be, and must not be, called when using the <db:code>software</db:code> adaptation of Qt Quick.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendercontrol.xml#beginFrame">beginFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml#initialize">initialize</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml#sync">sync</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml#render">render</db:link>()</db:member>
<db:member><db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link></db:member>
<db:member><db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initialize">
<db:title>[since 6.0] bool QQuickRenderControl::initialize()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>initialize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool initialize()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes the scene graph resources. When using a graphics API, such as Vulkan, Metal, OpenGL, or Direct3D, for Qt Quick rendering, <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> will set up an appropriate rendering engine when this function is called. This rendering infrastructure exists as long as the <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> exists.</db:para>
<db:para>To control what graphics API Qt Quick uses, call <db:link xlink:href="qquickwindow.xml#setGraphicsApi">QQuickWindow::setGraphicsApi</db:link>() with one of the <db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link>:GraphicsApi constants. That must be done before calling this function.</db:para>
<db:para>To prevent the scenegraph from creating its own device and context objects, specify an appropriate <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link>, wrapping existing graphics objects, by calling <db:link xlink:href="qquickwindow.xml#setGraphicsDevice">QQuickWindow::setGraphicsDevice</db:link>().</db:para>
<db:para>To configure which device extensions to enable (for example, for Vulkan), call <db:link xlink:href="qquickwindow.xml#setGraphicsConfiguration">QQuickWindow::setGraphicsConfiguration</db:link>() before this function.</db:para>
<db:note>
<db:para>When using Vulkan, <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> does not create a <db:link xlink:href="qvulkaninstance.xml">QVulkanInstance</db:link> automatically. Rather, it is the application's responsibility to create a suitable <db:link xlink:href="qvulkaninstance.xml">QVulkanInstance</db:link> and <db:link xlink:href="qwindow.xml#setVulkanInstance">associate it</db:link> with the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>. Before initializing the <db:link xlink:href="qvulkaninstance.xml">QVulkanInstance</db:link>, it is strongly encouraged to query the list of Qt Quick's desired instance extensions by calling the static function <db:link xlink:href="qquickgraphicsconfiguration.xml#preferredInstanceExtensions">QQuickGraphicsConfiguration::preferredInstanceExtensions</db:link>() and to pass the returned list to <db:link xlink:href="qvulkaninstance.xml#setExtensions">QVulkanInstance::setExtensions</db:link>().</db:para>
</db:note>
<db:para>Returns <db:code>true</db:code> on success, <db:code>false</db:code> otherwise.</db:para>
<db:note>
<db:para>This function does not need to be, and must not be, called when using the <db:code>software</db:code> adaptation of Qt Quick.</db:para>
</db:note>
<db:para>With the default Qt Quick adaptation this function creates a new <db:link xlink:href="qrhi.xml">QRhi</db:link> object, similarly to what would happen with an on-screen <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> when <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> was not used. To make this new <db:link xlink:href="qrhi.xml">QRhi</db:link> object adopt some existing device or context resource (e.g. use an existing <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> instead of creating a new one), use <db:link xlink:href="qquickwindow.xml#setGraphicsDevice">QQuickWindow::setGraphicsDevice</db:link>() as mentioned above. When the application wants to make the Qt Quick rendering use an already existing <db:link xlink:href="qrhi.xml">QRhi</db:link> object, that is possible as well via <db:link xlink:href="qquickgraphicsdevice.xml#fromRhi">QQuickGraphicsDevice::fromRhi</db:link>(). When such a <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link>, referencing an already existing <db:link xlink:href="qrhi.xml">QRhi</db:link>, is set, there will be no new, dedicated <db:link xlink:href="qrhi.xml">QRhi</db:link> object created in initialize().</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link></db:member>
<db:member><db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link></db:member>
<db:member><db:link xlink:href="qquickgraphicsconfiguration.xml#preferredInstanceExtensions">QQuickGraphicsConfiguration::preferredInstanceExtensions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invalidate">
<db:title>void QQuickRenderControl::invalidate()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>invalidate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void invalidate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stop rendering and release resources.</db:para>
<db:para>This is the equivalent of the cleanup operations that happen with a real <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> when the window becomes hidden.</db:para>
<db:para>This function is called from the destructor. Therefore there will typically be no need to call it directly.</db:para>
<db:para>Once invalidate() has been called, it is possible to reuse the <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> instance by calling <db:link xlink:href="qquickrendercontrol.xml#initialize">initialize</db:link>() again.</db:para>
<db:note>
<db:para>This function does not take QQuickWindow::persistentSceneGraph() or QQuickWindow::persistentGraphics() into account. This means that context-specific resources are always released.</db:para>
</db:note>
</db:section>
<db:section xml:id="polishItems">
<db:title>void QQuickRenderControl::polishItems()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>polishItems</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void polishItems()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function should be called as late as possible before <db:link xlink:href="qquickrendercontrol.xml#sync">sync</db:link>(). In a threaded scenario, rendering can happen in parallel with this function.</db:para>
</db:section>
<db:section xml:id="prepareThread">
<db:title>void QQuickRenderControl::prepareThread(QThread *<db:emphasis>targetThread</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>prepareThread</db:methodname>
<db:methodparam>
<db:type>QThread *</db:type>
<db:parameter>targetThread</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void prepareThread(QThread *targetThread)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Prepares rendering the Qt Quick scene outside the GUI thread.</db:para>
<db:para><db:code role="parameter">targetThread</db:code> specifies the thread on which synchronization and rendering will happen. There is no need to call this function in a single threaded scenario.</db:para>
</db:section>
<db:section xml:id="render">
<db:title>void QQuickRenderControl::render()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>render</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void render()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renders the scenegraph using the current context.</db:para>
</db:section>
<db:section xml:id="renderRequested">
<db:title>void QQuickRenderControl::renderRequested()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>renderRequested</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void renderRequested()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the scene graph needs to be rendered. It is not necessary to call <db:link xlink:href="qquickrendercontrol.xml#sync">sync</db:link>().</db:para>
<db:note>
<db:para>Avoid triggering rendering directly when this signal is emitted. Instead, prefer deferring it by using a timer for example. This will lead to better performance.</db:para>
</db:note>
</db:section>
<db:section xml:id="renderWindow">
<db:title>[virtual] QWindow *QQuickRenderControl::renderWindow(QPoint *<db:emphasis>offset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QWindow *</db:type>
<db:methodname>renderWindow</db:methodname>
<db:methodparam>
<db:type>QPoint *</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWindow * renderWindow(QPoint *offset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplemented in subclasses to return the real window this render control is rendering into.</db:para>
<db:para>If <db:code role="parameter">offset</db:code> is non-null, it is set to the offset of the control inside the window.</db:para>
<db:note>
<db:para>While not mandatory, reimplementing this function becomes essential for supporting multiple screens with different device pixel ratios and properly positioning popup windows opened from QML. Therefore providing it in subclasses is highly recommended.</db:para>
</db:note>
</db:section>
<db:section xml:id="renderWindowFor">
<db:title>[static] QWindow *QQuickRenderControl::renderWindowFor(QQuickWindow *<db:emphasis>win</db:emphasis>, QPoint *<db:emphasis>offset</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWindow *</db:type>
<db:methodname>renderWindowFor</db:methodname>
<db:methodparam>
<db:type>QQuickWindow *</db:type>
<db:parameter>win</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPoint *</db:type>
<db:parameter>offset</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWindow * renderWindowFor(QQuickWindow *win, QPoint *offset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the real window that <db:code role="parameter">win</db:code> is being rendered to, if any.</db:para>
<db:para>If <db:code role="parameter">offset</db:code> is non-null, it is set to the offset of the rendering inside its window.</db:para>
</db:section>
<db:section xml:id="rhi">
<db:title>[since 6.6] QRhi *QQuickRenderControl::rhi() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRhi *</db:type>
<db:methodname>rhi</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRhi * rhi() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qrhi.xml">QRhi</db:link> this <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> is associated with.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qrhi.xml">QRhi</db:link> exists only when <db:link xlink:href="qquickrendercontrol.xml#initialize">initialize</db:link>() has successfully completed. Before that the return value is null.</db:para>
</db:note>
<db:note>
<db:para>This function is not applicable and returns null when using the <db:code>software</db:code> adaptation of Qt Quick.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendercontrol.xml#commandBuffer">commandBuffer</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml#beginFrame">beginFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml#endFrame">endFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="samples">
<db:title>[since 6.0] int QQuickRenderControl::samples() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>samples</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int samples() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current sample count. 1 or 0 means no multisampling.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendercontrol.xml#setSamples">setSamples</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sceneChanged">
<db:title>void QQuickRenderControl::sceneChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sceneChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sceneChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the scene graph is updated, meaning that <db:link xlink:href="qquickrendercontrol.xml#polishItems">polishItems</db:link>() and <db:link xlink:href="qquickrendercontrol.xml#sync">sync</db:link>() needs to be called. If <db:link xlink:href="qquickrendercontrol.xml#sync">sync</db:link>() returns true, then <db:link xlink:href="qquickrendercontrol.xml#render">render</db:link>() needs to be called.</db:para>
<db:note>
<db:para>Avoid triggering polishing, synchronization and rendering directly when this signal is emitted. Instead, prefer deferring it by using a timer for example. This will lead to better performance.</db:para>
</db:note>
</db:section>
<db:section xml:id="setSamples">
<db:title>[since 6.0] void QQuickRenderControl::setSamples(int <db:emphasis>sampleCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSamples</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sampleCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSamples(int sampleCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the number of samples to use for multisampling. When <db:code role="parameter">sampleCount</db:code> is 0 or 1, multisampling is disabled.</db:para>
<db:note>
<db:para>This function is always used in combination with a multisample render target, which means <db:code role="parameter">sampleCount</db:code> must match the sample count passed to QQuickRenderTarget::fromNativeTexture(), which in turn must match the sample count of the native texture.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendercontrol.xml#samples">samples</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml#initialize">initialize</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sync">
<db:title>bool QQuickRenderControl::sync()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>sync</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool sync()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is used to synchronize the QML scene with the rendering scene graph.</db:para>
<db:para>If a dedicated render thread is used, the GUI thread should be blocked for the duration of this call.</db:para>
<db:para>Returns <db:emphasis>true</db:emphasis> if the synchronization changed the scene graph.</db:para>
</db:section>
<db:section xml:id="window">
<db:title>[since 6.0] QQuickWindow *QQuickRenderControl::window() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQuickWindow *</db:type>
<db:methodname>window</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickWindow * window() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> this <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> is associated with.</db:para>
<db:note>
<db:para>A <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> gets associated with a <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> when constructing the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>. The return value from this function is null before that point.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
</db:section>
</db:article>
