<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Android - Building from Source</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-getting-started.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Getting Started with Qt for Android"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-building-user-projects.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Qt for Android - Building User Projects"/></db:extendedlink>
<db:abstract>
<db:para>How to configure and build Qt for Android directly from source.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This page describes the process of configuring and building <db:link xlink:href="android.xml">Qt for Android</db:link>. To download and install a pre-built Qt for Android, follow the instructions on the <db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link> page.</db:para>
<db:section xml:id="prerequisites">
<db:title>Prerequisites</db:title>
<db:para>To build Qt for Android from source please ensure all requirements from <db:link xlink:href="android-getting-started.xml">Getting Started with Qt for Android</db:link> are met before continuing.</db:para>
<db:section xml:id="windows">
<db:title>Windows</db:title>
<db:para>Building Qt for Android on Windows also requires the following software:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>MinGW 11.2 toolchain</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Qt for Android does not support building from source with Microsoft Visual C++ (MSVC).</db:para>
</db:note>
<db:para>Install the requirements, and set the PATH to include the newly installed binaries:</db:para>
<db:programlisting language="cpp" role="bad">set MINGW_ROOT=&amp;lt;MINGW_ROOT_PATH&amp;gt;\bin
set PATH=%MINGW_ROOT%;%PATH%
</db:programlisting>
<db:para>To verify the installation, run:</db:para>
<db:programlisting language="cpp" role="bad">where mingw32-make.exe
</db:programlisting>
<db:para>The command should list mingw32-make.exe under the path <db:emphasis>&lt;MINGW_ROOT&gt;</db:emphasis> first.</db:para>
</db:section>
</db:section>
<db:section xml:id="getting-the-sources">
<db:title>Getting the Sources</db:title>
<db:para>You can download the Qt sources from the <db:link xlink:href="https://www.qt.io/download">Qt Downloads</db:link> page, or follow the wiki guide for <db:link xlink:href="https://wiki.qt.io/Building_Qt_5_from_Git#Getting_the_source_code">Getting the source code</db:link>.</db:para>
</db:section>
<db:section xml:id="configuring">
<db:title>Configuring</db:title>
<db:para>Qt 6 allows building Qt for Android from source code using CMake. Qt 6 keeps the same configure script from Qt 5. The main difference is that Qt for Android is dependent on a host Qt build, which means to build Qt for Android, you need to build Qt for the desktop platform used as a host (for example Linux, macOS, or Windows).</db:para>
<db:para>To configure Qt for Android, create a shadow build directory to keep the source directory clean:</db:para>
<db:programlisting language="cpp" role="bad">mkdir &amp;lt;path_to_build_dir&amp;gt;/build-qt
cd &amp;lt;path_to_build_dir&amp;gt;/build-qt
</db:programlisting>
<db:para>And then run the configure script:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;path_to_qt_source&amp;gt;/configure -platform android-clang -prefix &amp;lt;/path/to/install&amp;gt; -android-ndk $ANDROID_NDK_ROOT -android-sdk $ANDROID_SDK_ROOT -qt-host-path &amp;lt;path_to_host_qt_installation&amp;gt;
</db:programlisting>
<db:note>
<db:para>configure always uses the <db:emphasis role="bold">Ninja</db:emphasis> generator and build tool if a ninja executable is available. Ninja is cross-platform, feature-rich, performant, and recommended on all platforms. The use of other generators might work but is not officially supported.</db:para>
</db:note>
<db:section xml:id="architectures">
<db:title>Architectures</db:title>
<db:para>Qt for Android supports the following ABIs:</db:para>
<db:para>The following configurations are supported in this Qt release:</db:para>
<db:informaltable style="generic" width="80%">
<db:thead>
<db:tr>
<db:th>
<db:para>Distribution</db:para>
</db:th>
<db:th>
<db:para>Architecture</db:para>
</db:th>
<db:th>
<db:para>Compiler</db:para>
</db:th>
<db:th>
<db:para>Notes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Android 8.0 to Android 13 (API level 26 to API 33)</db:para>
</db:td>
<db:td>
<db:para>armeabi-v7a, x86, arm64-v8, and x86_64</db:para>
</db:td>
<db:td>
<db:para>Clang 14.0.6 (NDK r25b) as provided by Google</db:para>
</db:td>
<db:td>
<db:para>For JDK versions see <db:link xlink:href="android-getting-started.xml#java-development-kit-jdk">Java Development Kit (JDK)</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>It's recommended that Qt user apps use the same NDK r25b version used for building these official Qt for Android libraries. An NDK version more recent than r23b is required if building a project results in an error of missing the symbols for __emutls_get_address.</db:para>
</db:note>
<db:para>To choose the ABI to build for, use the <db:emphasis>-android-abis</db:emphasis> feature of the configure script.</db:para>
<db:note>
<db:para>6.5 does not yet support being built for multiple ABIs at the same time.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="advanced-configure-arguments">
<db:title>Advanced Configure Arguments</db:title>
<db:para>Qt for Android contains Java code which is compiled into *.jar files with <db:emphasis>javac</db:emphasis>. To set the <db:emphasis>javac</db:emphasis> version for source and target, use <db:emphasis>-android-javac-source</db:emphasis> and <db:emphasis>-android-javac-target</db:emphasis> respectively:</db:para>
<db:programlisting language="cpp" role="bad">-android-javac-source 8 -android-javac-target 8
</db:programlisting>
<db:para>To build Qt as a developer build instead of a prefix build, use the following instead of -prefix argument:</db:para>
<db:programlisting language="cpp" role="bad">-developer-build
</db:programlisting>
<db:para><db:link xlink:href="configure-options.xml">Qt Configure Options</db:link> contains more information about the configure options.</db:para>
</db:section>
<db:section xml:id="building">
<db:title>Building</db:title>
<db:para>To build the configured Qt code, run the following command:</db:para>
<db:programlisting language="cpp" role="bad">cmake --build . --parallel
</db:programlisting>
</db:section>
<db:section xml:id="installing">
<db:title>Installing</db:title>
<db:para>Now, to install Qt, run the following command:</db:para>
<db:programlisting language="cpp" role="bad">cmake --install .
</db:programlisting>
<db:para>On Unix based OSes you should prefix the install command with the sudo command.</db:para>
<db:para>If you haven't provided the --prefix &lt;install-dir&gt; configure option, the installation is placed under /usr/local/Qt-&lt;version&gt;.</db:para>
</db:section>
</db:article>
