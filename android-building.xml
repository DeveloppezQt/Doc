<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Android - Building from Source</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to configure and build Qt for Android directly from source.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt for Android has some requirements that you are recommended to know before going through this guide. Accomplish the tasks in <db:link xlink:href="android-getting-started.xml">Getting Started with Qt for Android</db:link> first.</db:para>
<db:para>You can download the Qt 5 sources from the <db:link xlink:href="http://qt.io/download">Downloads</db:link> page.</db:para>
<db:section xml:id="building-on-linux">
<db:title>Building on Linux</db:title>
<db:section xml:id="prepare-the-build-environment">
<db:title>Prepare the Build Environment</db:title>
<db:para>First, install the Android SDK in one of two ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="android-building.xml#using-the-package-manager">Using the package manager</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="android-building.xml#using-manual-installation">Using a manual installation</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="using-the-package-manager">
<db:title>Using the Package Manager</db:title>
<db:para>For any Debian-based Linux, use the following command:</db:para>
<db:programlisting language="cpp" role="bad">sudo apt install build-essential android-sdk openjdk-11-jdk
</db:programlisting>
<db:para>It is recommended to install the Android NDK using sdkmanager, with the following commands:</db:para>
<db:programlisting language="cpp" role="bad">sdkmanager --verbose --licenses
sdkmanager --update
sdkmanager &quot;platforms;android-28&quot; &quot;ndk-bundle&quot; &quot;build-tools;28.0.3&quot; &quot;platform-tools&quot;
</db:programlisting>
<db:note>
<db:para>If you are using the old SDK Tools packages &quot;tools&quot;, OpenJDK 1.8 is needed. It is also recommended to install the latest SDK Tools &quot;cmdline-tools&quot; package and switch to it.</db:para>
</db:note>
</db:section>
<db:section xml:id="using-manual-installation">
<db:title>Using Manual Installation</db:title>
<db:para>You can use <db:link xlink:href="https://developer.android.com/studio/index.html">Android Studio</db:link> to download and installl the Android SDK packages required for developing applications for Android. For more information, see <db:link xlink:href="https://developer.android.com/studio/intro/update#sdk-manager">Android Studio documentation</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="installing-the-license-file">
<db:title>Installing the License File</db:title>
<db:para>If you use Qt with a commercial license, the Qt tools look for a local license file. If you are using a binary installer or the commercial Qt Creator, your licenses are automatically fetched and stored in your local user profile ($XDG_DATA_HOME/Qt/qtlicenses.ini file).</db:para>
<db:para>If you do not use any binary installer or Qt Creator, you can download the respective license file from your <db:link xlink:href="https://account.qt.io/">Qt Account</db:link> Web portal and save it to your user profile as $HOME/.qt-license. If you prefer a different location or file name, you need to set the QT_LICENSE_FILE environment variable to the respective file path.</db:para>
</db:section>
<db:section xml:id="unpacking-the-archive">
<db:title>Unpacking the Archive</db:title>
<db:para>Unpack the archive if you have not done so already. For example, if you have the qt-everywhere-opensource-src-%VERSION%.tar.gz package, type the following commands at a command line prompt:</db:para>
<db:programlisting language="cpp">cd /tmp
gunzip qt-everywhere-opensource-src-%VERSION%.tar.gz        # uncompress the archive
tar xvf qt-everywhere-opensource-src-%VERSION%.tar          # unpack it
</db:programlisting>
<db:para>This creates the directory /tmp/qt-everywhere-opensource-src-%VERSION% containing the files from the archive. We only support the GNU version of the tar archiving utility. Note that on some systems it is called gtar.</db:para>
</db:section>
<db:section xml:id="configuring-and-building">
<db:title>Configuring and Building</db:title>
<db:para>Set the following environment variables, and add them to your PATH; preferably at the end of ~/.profile:</db:para>
<db:programlisting language="cpp" role="bad">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$PATH:$JAVA_HOME/bin
</db:programlisting>
<db:para>To configure Qt for Android, run the following:</db:para>
<db:programlisting language="cpp" role="bad">cd /tmp/qt-everywhere-opensource-src-%VERSION%
./configure -xplatform android-clang --disable-rpath -nomake tests -nomake examples -android-ndk &amp;lt;path/to/sdk&amp;gt;/ndk-bundle/ -android-sdk &amp;lt;path/to/sdk&amp;gt; -no-warnings-are-errors
</db:programlisting>
<db:para>The <db:link xlink:href="configure-options.xml">Configure Options</db:link> page contains more information about the configure options.</db:para>
<db:para>You may provide the -android-abis parameter to limit the Android ABIs being built, with either of: <db:emphasis>armeabi-v7a</db:emphasis>, <db:emphasis>arm64-v8a</db:emphasis>, <db:emphasis>x86</db:emphasis>, or <db:emphasis>x86_64</db:emphasis>:</db:para>
<db:programlisting language="cpp" role="bad">-android-abis armeabi-v7a,arm64-v8a
</db:programlisting>
<db:para>If the parameter is not specified, Qt is built for all supported ABIs.</db:para>
<db:para>To build the configured Qt code, run the following command:</db:para>
<db:programlisting language="cpp" role="bad">make -j$(nproc)
</db:programlisting>
<db:note>
<db:para><db:emphasis>nproc</db:emphasis> is optional. It represents the number of parallel jobs your system can do.</db:para>
</db:note>
<db:para>Then install the built Qt for Android:</db:para>
<db:programlisting language="cpp" role="bad">make install
</db:programlisting>
<db:para>If you haven't provided the --prefix &lt;install-dir&gt; configure option, the installation is placed under /usr/local/Qt-&lt;version&gt;. In Debian/Ubuntu, you should prefix the make command with the sudo command.</db:para>
</db:section>
</db:section>
<db:section xml:id="building-on-windows">
<db:title>Building on Windows</db:title>
<db:para>First, you can use <db:link xlink:href="https://developer.android.com/studio/index.html">Android Studio</db:link> to download and install the Android SDK packages required for developing applications for Android. For more information, see <db:link xlink:href="https://developer.android.com/studio/intro/update#sdk-manager">Android Studio documentation</db:link>.</db:para>
<db:section xml:id="preparing-the-build-environment">
<db:title>Preparing the Build Environment</db:title>
<db:para>Install the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://strawberryperl.com">Perl</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>A JDK 1.8 package such as <db:link xlink:href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">JDK</db:link> or <db:link xlink:href="http://openjdk.java.net">OpenJDK</db:link> or <db:link xlink:href="https://adoptopenjdk.net/">AdoptOpenJDK</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">MinGW 7.3</db:emphasis> toolchain</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Then set the respective environment variables, replacing them with the appropriate values:</db:para>
<db:programlisting language="cpp" role="bad">set &quot;JDK_ROOT=&amp;lt;JDK_ROOT_PATH&amp;gt;\bin\&quot;
set &quot;MINGW_ROOT=&amp;lt;MINGW_ROOT_PATH&amp;gt;&quot;
set &quot;PERL_ROOT=&amp;lt;PERL_ROOT_PATH&amp;gt;&quot;
</db:programlisting>
<db:para>Open the cmd.exe window and verify that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>where gcc.exe lists <db:emphasis>&lt;MINGW_ROOT&gt;.exe</db:emphasis> first before <db:emphasis>&lt;PERL_ROOT&gt;.exe</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>where mingw32-make.exe lists <db:emphasis>&lt;MINGW_ROOT32&gt;-make.exe</db:emphasis> first.</db:para>
</db:listitem>
<db:listitem>
<db:para>where javac.exe lists <db:emphasis>&lt;JDK_ROOT&gt;</db:emphasis> first.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Currently, it is not possible to use Microsoft's compilers to build the Windows host tools for Qt Android.</db:para>
</db:note>
</db:section>
<db:section xml:id="setting-a-commercial-license">
<db:title>Setting a Commercial License</db:title>
<db:para>If you have a commercially licensed Qt, install your license file. If you're using a binary installer or the commercial Qt Creator, your licenses are automatically fetched and stored in your local user profile %USERPROFILE%\AppData\Roaming\Qt\qtlicenses.ini. Alternatively, you can download the respective license file from your Qt Account web portal and save it to your user profile as %USERPROFILE%\.qt-license. If you prefer a different location or file name, you need to set the QT_LICENSE_FILE environment variable to the respective file path.</db:para>
</db:section>
<db:section xml:id="building-the-sources">
<db:title>Building the Sources</db:title>
<db:para>Next, unpack the archive. Uncompress the files into the directory in which you want Qt installed, for example: C:\Qt\%VERSION%. This install path must not contain any spaces or Windows-specific file system characters.</db:para>
<db:para>Run the following command to configure Qt:</db:para>
<db:programlisting language="cpp" role="bad">cd &amp;lt;decompressed_source_code_folder&amp;gt;
configure.bat -prefix &amp;lt;path to install Qt to&amp;gt; -platform win32-g++ -opengl es2 -xplatform android-clang -android-sdk &amp;lt;ANDROID_SDK_PATH&amp;gt; -android-ndk &amp;lt;ANDROID_SDK_PATH&amp;gt;\ndk-bundle\ -nomake tests -nomake examples
</db:programlisting>
<db:para>The <db:link xlink:href="configure-options.xml">Configure Options</db:link> page contains more information about the configure options.</db:para>
<db:para>To build the configured Qt for Android code, run the following:</db:para>
<db:programlisting language="cpp" role="bad">mingw32-make.exe -j&amp;lt;N&amp;gt;
</db:programlisting>
<db:note>
<db:para><db:emphasis>&lt;N&gt;</db:emphasis> is optional. It represents the number of parallel jobs your system can do.</db:para>
</db:note>
<db:para>Now, to install Qt, run the following command:</db:para>
<db:programlisting language="cpp" role="bad">mingw32-make.exe install
</db:programlisting>
</db:section>
</db:section>
</db:article>
