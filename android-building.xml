<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Android - Building from Source</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-getting-started.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Getting Started with Qt for Android"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="porting-to-android.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Porting to Android"/></db:extendedlink>
<db:abstract>
<db:para>How to configure and build Qt for Android directly from source.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt for Android has some requirements that you are recommended to know before going through this guide. Accomplish the tasks in <db:link xlink:href="android-getting-started.xml">Getting Started with Qt for Android</db:link> first.</db:para>
<db:para>You can download the Qt sources from the <db:link xlink:href="https://www.qt.io/download">Qt Downloads</db:link> page, or follow the wiki guide for <db:link xlink:href="https://wiki.qt.io/Building_Qt_5_from_Git#Getting_the_source_code">Getting the source code</db:link>.</db:para>
<db:section xml:id="building-on-linux">
<db:title>Building on Linux</db:title>
<db:section xml:id="prepare-the-build-environment">
<db:title>Prepare the Build Environment</db:title>
<db:para>First, install the Android SDK in one of two ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="android-building.xml#using-manual-installation">Using Manual Installation</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="android-building.xml#using-qt-creator">Using Qt Creator</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="android-building.xml#using-android-studio">Using Android Studio</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Then, you need the following tools:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A JDK package such as <db:link xlink:href="https://adoptopenjdk.net/?variant=openjdk8&amp;jvmVariant=hotspot">AdoptOpenJDK</db:link>, <db:link xlink:href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">JDK</db:link>, or <db:link xlink:href="http://openjdk.java.net">OpenJDK</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>CMake</db:para>
</db:listitem>
<db:listitem>
<db:para>Ninja</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="using-manual-installation">
<db:title>Using Manual Installation</db:title>
<db:para>For more information, see <db:link xlink:href="android-getting-started.xml">Getting Started with Qt for Android</db:link>.</db:para>
</db:section>
<db:section xml:id="using-qt-creator">
<db:title>Using Qt Creator</db:title>
<db:para>For more information, see <db:link xlink:href="http://doc.qt.io/qtcreator/creator-developing-android.html">Connecting Android Devices</db:link>.</db:para>
</db:section>
<db:section xml:id="using-android-studio">
<db:title>Using Android Studio</db:title>
<db:para>You can use <db:link xlink:href="https://developer.android.com/studio#downloads">Android Studio</db:link> to download and installl the Android SDK packages required for developing applications for Android. For more information, see <db:link xlink:href="https://developer.android.com/studio/intro/update#sdk-manager">Android Studio documentation</db:link>.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="building-qt-for-android">
<db:title>Building Qt for Android</db:title>
<db:para>Qt 6 allows building Qt for Android from source code using CMake. Qt 6 keeps the same configure script from Qt 5. The main difference is that Qt for Android is dependent on a host Qt build, which means to build Qt for Android, you need to build Qt for the desktop platform used as a host (for example Linux, macOS, or Windows).</db:para>
<db:para>With the configure script, the same arguments can be used as before. For more information, see <db:link xlink:href="build-sources.xml">Building Qt Sources</db:link>.</db:para>
<db:para>Qt for Android supports the following ABIs <db:emphasis>armeabi-v7a</db:emphasis>, <db:emphasis>arm64-v8a</db:emphasis>, <db:emphasis>x86</db:emphasis>, and <db:emphasis>x86_64</db:emphasis>.</db:para>
<db:note>
<db:para>Qt 6.0 does not support multi-abi feature, for that reason setting the <db:emphasis>-android-abis</db:emphasis> is mandatory.</db:para>
</db:note>
</db:section>
<db:section xml:id="building-on-linux">
<db:title>Building on Linux</db:title>
<db:para>To build Qt for Android under a Linux environment, follow the steps below:</db:para>
<db:section xml:id="unpacking-the-archive">
<db:title>Unpacking the Archive</db:title>
<db:para>If you have downloaded the source code archive from <db:link xlink:href="https://www.qt.io/download">Qt Downloads</db:link>, then unpack the archive if you have not done so already. For example, if you have the qt-everywhere-src-%VERSION%.tar.xz package, type the following commands at a command line prompt:</db:para>
<db:programlisting language="cpp">cd /tmp
gunzip qt-everywhere-opensource-src-%VERSION%.tar.gz        # uncompress the archive
tar xvf qt-everywhere-opensource-src-%VERSION%.tar          # unpack it
</db:programlisting>
<db:para>This creates the directory /tmp/qt-everywhere-src-%VERSION% containing the files from the archive. We only support the GNU version of the tar archiving utility. Note that on some systems it is called gtar.</db:para>
<db:para>Otherwise if you cloned the source code from Git, the source will be under <db:emphasis>qt5</db:emphasis> folder.</db:para>
</db:section>
<db:section xml:id="configuring-and-building-on-linux">
<db:title>Configuring and Building on Linux</db:title>
<db:para>Set the following environment variables, and add them to your PATH; preferably at the end of ~/.profile:</db:para>
<db:programlisting language="cpp" role="bad">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export CMAKE_ROOT=~/Qt/Tools/CMake/bin
export NINJA_ROOT=~/Qt/Tools/Ninja
export PATH=$JAVA_HOME/bin:$CMAKE_ROOT:$NINJA_ROOT:$PATH
</db:programlisting>
<db:note>
<db:para>JDK 11 or earlier must be used to properly build Qt for Android.</db:para>
</db:note>
<db:note>
<db:para>We use <db:link xlink:href="http://openjdk.java.net">OpenJDK</db:link> here, but you can also use other JDK alternatives such as <db:link xlink:href="https://adoptopenjdk.net/?variant=openjdk8&amp;jvmVariant=hotspot">AdoptOpenJDK</db:link>.</db:para>
</db:note>
<db:para>To configure Qt for Android, create a shadow build directory to keep the source directory clean:</db:para>
<db:programlisting language="cpp" role="bad">mkdir &amp;lt;path_to_build_dir&amp;gt;/build-qt
cd &amp;lt;path_to_build_dir&amp;gt;/build-qt

&amp;lt;path_to_qt_source&amp;gt;/configure -xplatform android-clang -prefix &amp;lt;/path/to/install&amp;gt; -android-ndk &amp;lt;path/to/sdk&amp;gt;/ndk/&amp;lt;ndk_version&amp;gt; -android-sdk &amp;lt;path/to/sdk&amp;gt; -qt-host-path &amp;lt;path_to_host_qt_installation&amp;gt; -android-abis arm64-v8a
</db:programlisting>
<db:para><db:link xlink:href="configure-options.xml">Qt Configure Options</db:link> contains more information about the configure options.</db:para>
<db:para>You can customize your build configuration in a more advanced manner. For more information, see <db:link xlink:href="android-building.xml#advanced-build-arguments">Advanced Build Arguments</db:link>.</db:para>
<db:note>
<db:para>For more information about building Qt 6 with CMake, see <db:link xlink:href="qtconcurrent-index.xml#building-with-cmake">Building with CMake</db:link>.</db:para>
</db:note>
<db:para>To build the configured Qt code, run the following command:</db:para>
<db:programlisting language="cpp" role="bad">cmake --build . --parallel
</db:programlisting>
<db:para>Also, the following is possible instead:</db:para>
<db:programlisting language="cpp" role="bad">ninja -j$(nproc)
</db:programlisting>
<db:note>
<db:para><db:emphasis>nproc</db:emphasis> is optional. It represents the number of parallel jobs your system can do.</db:para>
</db:note>
<db:para>Now, to install Qt, run the following command:</db:para>
<db:programlisting language="cpp" role="bad">cmake --install .
</db:programlisting>
<db:para>If you haven't provided the --prefix &lt;install-dir&gt; configure option, the installation is placed under /usr/local/Qt-&lt;version&gt;. In Debian/Ubuntu, you should prefix the make command with the sudo command.</db:para>
</db:section>
</db:section>
<db:section xml:id="building-on-windows">
<db:title>Building on Windows</db:title>
<db:para>To build Qt for Android under a Windows environment, follow the steps below:</db:para>
<db:section xml:id="preparing-the-build-environment">
<db:title>Preparing the Build Environment</db:title>
<db:para>In addition to the requirements from Prepare the Build Environment, you need the following on Windows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">MinGW 7.3</db:emphasis> toolchain</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://strawberryperl.com">Perl</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Then set the respective environment variables from the <db:guilabel>Environment Variables</db:guilabel> system UI, or from the build command line prompt. For the default Command prompt:</db:para>
<db:programlisting language="cpp" role="bad">set JDK_ROOT=&amp;lt;JDK_ROOT_PATH&amp;gt;\bin
set MINGW_ROOT=&amp;lt;MINGW_ROOT_PATH&amp;gt;\bin
set PERL_ROOT=&amp;lt;PERL_ROOT_PATH&amp;gt;\bin
set CMAKE_ROOT=C:\Qt\Tools\CMake\bin
set NINJA_ROOT=C:\Qt\Tools\Ninja\
set PATH=%MINGW_ROOT%;%CMAKE_ROOT%;%NINJA_ROOT%;%PERL_ROOT%;%JDK_ROOT%;%PATH%
</db:programlisting>
<db:para>Then, in the command line prompt, verify that:</db:para>
<db:programlisting language="cpp" role="bad">where gcc.exe
</db:programlisting>
<db:para>The command should list gcc.exe under the path <db:emphasis>&lt;MINGW_ROOT&gt;</db:emphasis> first.</db:para>
<db:programlisting language="cpp" role="bad">where mingw32-make.exe
</db:programlisting>
<db:para>The command should list mingw32-make.exe under the path <db:emphasis>&lt;MINGW_ROOT&gt;</db:emphasis> first.</db:para>
<db:programlisting language="cpp" role="bad">where javac.exe
</db:programlisting>
<db:para>The command should list javac.exe under the path <db:emphasis>&lt;JDK_ROOT&gt;</db:emphasis> first.</db:para>
<db:note>
<db:para>JDK 11 or earlier must be used to properly build Qt for Android.</db:para>
</db:note>
<db:note>
<db:para>Qt for Android does not support building with Microsoft Visual C++ (MSVC), we only support building with MinGW.</db:para>
</db:note>
</db:section>
<db:section xml:id="configuring-and-building-on-windows">
<db:title>Configuring and Building on Windows</db:title>
<db:para>If you have downloaded the source code archive from <db:link xlink:href="https://www.qt.io/download">Qt Downloads</db:link>, unpack the archive. Uncompress the files into a temporary folder, for example, C:\Qt\Build\Src_%VERSION%. This path must not contain any spaces or Windows-specific file system characters.</db:para>
<db:para>Run the following command to configure Qt:</db:para>
<db:programlisting language="cpp" role="bad">mkdir C:\Qt\Build\build-qt
cd C:\Qt\Build\build-qt

..\Src_%VERSION%\configure.bat -platform win32-g++ -xplatform android-clang -prefix &amp;lt;\path\to\install&amp;gt; -android-sdk &amp;lt;ANDROID_SDK_PATH&amp;gt; -android-ndk &amp;lt;ANDROID_SDK_PATH&amp;gt;\ndk\&amp;lt;ndk_version&amp;gt; -android-ndk-host windows-x86_64 -qt-host-path &amp;lt;path_to_host_qt_installation&amp;gt; -android-abis arm64-v8a
</db:programlisting>
<db:para><db:link xlink:href="configure-options.xml">Qt Configure Options</db:link> contains more information about the configure options.</db:para>
<db:para>You can customize your build configuration in a more advanced manner. For more information, see <db:link xlink:href="android-building.xml#advanced-build-arguments">Advanced Build Arguments</db:link>.</db:para>
<db:note>
<db:para>For more information about building Qt 6 with CMake, see <db:link xlink:href="qtconcurrent-index.xml#building-with-cmake">Building with CMake</db:link>.</db:para>
</db:note>
<db:para>To build the configured Qt for Android code, run the following:</db:para>
<db:programlisting language="cpp" role="bad">cmake --build . --parallel
</db:programlisting>
<db:para>Also, the following is possible instead:</db:para>
<db:programlisting language="cpp" role="bad">ninja -j&amp;lt;N&amp;gt;
</db:programlisting>
<db:note>
<db:para><db:emphasis>&lt;N&gt;</db:emphasis> is optional. It represents the number of parallel jobs your system can do.</db:para>
</db:note>
<db:para>Now, to install Qt, run the following command:</db:para>
<db:programlisting language="cpp" role="bad">cmake --install .
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="advanced-build-arguments">
<db:title>Advanced Build Arguments</db:title>
<db:para>Qt for Android contains Java code which is compiled into *.jar files with <db:emphasis>javac</db:emphasis>. To set the <db:emphasis>javac</db:emphasis> version for source and target, use <db:emphasis>-android-javac-source</db:emphasis> and <db:emphasis>-android-javac-target</db:emphasis> respectively:</db:para>
<db:programlisting language="cpp" role="bad">-android-javac-source 8 -android-javac-target 8
</db:programlisting>
<db:para>To debug Qt with a developer build instead of a prefix build, use the following instead of -prefix argument:</db:para>
<db:programlisting language="cpp" role="bad">-developer-build
</db:programlisting>
<db:para>A developer build is meant to be used directly from the build directory.</db:para>
<db:note>
<db:para>A developer build takes more storage than a prefix build.</db:para>
</db:note>
<db:section xml:id="building-separate-modules">
<db:title>Building Separate Modules</db:title>
<db:para>It is possible to build specific Qt modules only. There are two options:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Use the configured <db:emphasis>qt5</db:emphasis> build with the following command:</db:para>
<db:programlisting language="cpp">ninja -j$(nproc) module-qtbase
</db:programlisting>
<db:para>The to install those modules, use:</db:para>
<db:programlisting language="cpp">ninja -j$(nproc) module-qtbase-install_subtargets
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Configure and build <db:emphasis>qtbase</db:emphasis> only, then use the resulting <db:emphasis>qt-configure-module</db:emphasis> to configure any other module. The only difference is that the configure script in <db:emphasis>qtbase</db:emphasis> directory has to be used:</db:para>
<db:programlisting language="cpp" role="bad">mkdir &amp;lt;path_to_build_dir&amp;gt;/build-qt/qtbase
cd &amp;lt;path_to_build_dir&amp;gt;/build-qt/qtbase
&amp;lt;path_to_qt_source&amp;gt;/qtbase/configure [...]
</db:programlisting>
<db:para>Then to configure qtdeclarative for example:</db:para>
<db:programlisting language="cpp" role="bad">mkdir &amp;lt;build_directory&amp;gt;/build-qtdeclarative
cd &amp;lt;build_directory&amp;gt;/build-qtdeclarative
&amp;lt;qt_for_android_install_path&amp;gt;/bin/qt-configure-module &amp;lt;qt_source_path&amp;gt;/qtdeclarative
cmake --build . --parallel
cmake --install .
</db:programlisting>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="building-user-projects">
<db:title>Building User Projects</db:title>
<db:para>To build CMake projects with the resulting Qt installation, use qt-cmake wrapper. For Android the following has to be be provided:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;qt_for_android_install_path&amp;gt;/bin/qt-cmake -DANDROID_SDK_ROOT=&amp;lt;android_sdk_path&amp;gt; -DANDROID_NDK_ROOT=&amp;lt;android_ndk_path&amp;gt; -S &amp;lt;source_dir&amp;gt; -B &amp;lt;build_dir&amp;gt;
</db:programlisting>
<db:para>Additionally, you can still use qmake to build user projects as before in Qt 5.</db:para>
</db:section>
</db:article>
