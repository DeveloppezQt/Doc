<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Android - Building from Source</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to configure and build Qt for Android.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>You can download the Qt 5 sources from the <db:link xlink:href="http://qt.io/download">Downloads</db:link> page. For more information, visit the <db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link> page.</db:para>
<db:para>Qt for Android has some requirements that are described in more detail in <db:link xlink:href="android-getting-started.xml">Getting Started with Qt for Android</db:link>.</db:para>
<db:section xml:id="installing-the-android-sdk-and-ndk-on-linux">
<db:title>Installing the Android SDK and NDK on Linux</db:title>
<db:para>On Linux, you can install the Android SDK and NDK in one of two ways:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para><db:link xlink:href="android-building.xml#scripted-installation">via scripted installation for Linux</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="android-building.xml#manual-installation">via manual installation</db:link></db:para>
</db:listitem>
</db:orderedlist>
<db:section xml:id="scripted-installation">
<db:title>Scripted Installation</db:title>
<db:para>For any Debian-based Linux, use the following command:</db:para>
<db:programlisting language="cpp">apt install build-essential android-sdk
</db:programlisting>
<db:para>If you require openjdk, add default-jdk-headless to the command above.</db:para>
<db:para>It's recommended to install the NDK using sdkmanager, with the following commands:</db:para>
<db:programlisting language="cpp">sdkmanager --verbose --licenses
sdkmanager --update
sdkmanager &quot;platforms;android-28&quot; &quot;ndk-bundle&quot; &quot;build-tools;28.0.3&quot; &quot;platform-tools&quot; &quot;tools&quot;
</db:programlisting>
</db:section>
<db:section xml:id="manual-installation">
<db:title>Manual Installation</db:title>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Download Android Studio from <db:link xlink:href="https://developer.android.com/studio/index.html">https://developer.android.com/studio/index.html</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Open Android Studio and run the SDK Manager tool from <db:guilabel>Tools &gt; Android &gt; SDK Manager</db:guilabel>. If this toolbar isn't visible, you can enable it from the <db:guilabel>View</db:guilabel> menu: select <db:guilabel>Toolbar</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Download the Android NDK from <db:link xlink:href="https://developer.android.com/tools/sdk/ndk/index.html">https://developer.android.com/tools/sdk/ndk/index.html</db:link>.</db:para>
<db:note>
<db:para>As of Qt 5.12, Android NDK r18 is required and gcc toolchains are no longer supported.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Ensure that the NDK supports the API level you're targeting. To verify, check your <db:emphasis>path_to_NDK/platforms</db:emphasis> directory.</db:para>
<db:note>
<db:para>As of Qt 5.13, any API level &gt;= 21 is sufficient.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Install a JDK with a version of 1.6 or newer from <db:link xlink:href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">https://www.oracle.com/technetwork/java/javase/downloads/index.html</db:link>. Alternatively, you can use OpenJDK.</db:para>
<db:programlisting language="cpp">apt-get install openjdk-8-jdk
</db:programlisting>
</db:listitem>
</db:orderedlist>
</db:section>
<db:section xml:id="building-qt">
<db:title>Building Qt</db:title>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>If you have a commercially licensed Qt, install your license file. If you're using a binary installer or the commercial Qt Creator, your licenses are automatically fetched and stored in your local user profile: $XDG_DATA_HOME/Qt/qtlicenses.ini. Alternatively, you can download the respective license file from your Qt Account Web portal and save it to your user profile as $HOME/.qt-license. If you prefer a different location or file name, you need to set the QT_LICENSE_FILE environment variable to the respective file path.</db:para>
</db:listitem>
<db:listitem>
<db:para>Next, unpack the archive. If you have the qt-everywhere-opensource-src-%VERSION%.tar.gz package, type the following commands at a command line prompt:</db:para>
<db:programlisting language="cpp">cd /tmp
gunzip qt-everywhere-opensource-src-%VERSION%.tar.gz    # uncompress the archive
tar xvf qt-everywhere-opensource-src-%VERSION%.tar      # unpack it
</db:programlisting>
<db:para>This creates the /tmp/qt-everywhere-opensource-src-%VERSION% directory containing the files from the archive. We only support the GNU version of the tar archiving utility; also known as gtar on some systems.</db:para>
</db:listitem>
<db:listitem>
<db:para>Configure the JAVA_HOME environment variable. You need to set it and add it to your PATH; preferably at the end of ~/.profile:</db:para>
<db:programlisting language="cpp">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$PATH:$JAVA_HOME/bin
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Next, configure Qt with the following command:</db:para>
<db:programlisting language="cpp">./configure -xplatform android-clang --disable-rpath -nomake tests -nomake examples
-android-ndk &amp;lt;path/to/ndk&amp;gt; -android-sdk &amp;lt;path/to/sdk&amp;gt; -no-warnings-are-errors
</db:programlisting>
<db:para>You also need to provide the -android-arch parameter which is necessary to specify the Android architecture, such as armeabi-v71 (default), arm64-v8a, x86, or x86_64:</db:para>
<db:programlisting language="cpp">-android-arch armeabi-v71
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>To build the parts of Qt you have now configured run the following command. <db:emphasis>nproc</db:emphasis> is optional, representing the number of parallel jobs your system can do.</db:para>
<db:programlisting language="cpp">make -j$(nproc)
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>To install the parts of Qt you have built, run:</db:para>
<db:programlisting language="cpp">make install
</db:programlisting>
<db:para>If you haven't used the --prefix &lt;install-dir&gt; configure option, the installation is placed under /usr/local/Qt-&lt;version&gt;. In Debian/Ubuntu, you should prefix the make command with the sudo command.</db:para>
</db:listitem>
</db:orderedlist>
</db:section>
</db:section>
<db:section xml:id="installing-the-android-sdk-and-ndk-on-windows">
<db:title>Installing the Android SDK and NDK on Windows</db:title>
<db:note>
<db:para>Currently, it is not possible to use Microsoft's compilers to build the Windows host tools for Qt Android.</db:para>
</db:note>
<db:section xml:id="step-1-setting-up-the-development-environment">
<db:title>Step 1: Setting up the Development Environment</db:title>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Install the latest Perl from <db:link xlink:href="http://strawberryperl.com">http://strawberryperl.com</db:link>. Then, select a destination folder, also known as PERL_ROOT.</db:para>
</db:listitem>
<db:listitem>
<db:para>Set up the MinGW toolchain by downloading a pre-built Qt package for MinGW, and then add it to your PATH, for example: C:\dev\Qt\Tools\mingw730_64\bin.</db:para>
</db:listitem>
<db:listitem>
<db:para>Install the latest JDK from <db:link xlink:href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">https://www.oracle.com/technetwork/java/javase/downloads/index.html</db:link>. Then, add the <db:emphasis>&lt;JDK_ROOT&gt;</db:emphasis> to PATH.</db:para>
</db:listitem>
<db:listitem>
<db:para>Install the Android NDK, r18b, from <db:link xlink:href="https://developer.android.com/tools/sdk/ndk/index.html">https://developer.android.com/tools/sdk/ndk/index.html</db:link>. Extract it to <db:emphasis>&lt;ANDROID_NDK_PATH&gt;</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Install the latest Android SDK (tools only) from <db:link xlink:href="http://developer.android.com/sdk/index.html">http://developer.android.com/sdk/index.html</db:link>. Run the Android SDK Manager and install the latest version of &quot;SDK Platform&quot;, &quot;Google APIs&quot;, and &quot;build-tools&quot; in <db:emphasis>&lt;ANDROID_SDK_PATH&gt;</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Open the cmd.exe window and verify that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>where gcc.exe lists <db:emphasis>&lt;MINGW_ROOT&gt;.exe</db:emphasis> first before <db:emphasis>&lt;PERL_ROOT&gt;.exe</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>where mingw32-make.exe lists <db:emphasis>&lt;MINGW_ROOT32&gt;-make.exe</db:emphasis> first.</db:para>
</db:listitem>
<db:listitem>
<db:para>where javac.exe lists <db:emphasis>&lt;JDK_ROOT&gt;</db:emphasis> first.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Add the following environment variables:</db:para>
<db:programlisting language="cpp">set &quot;ANDROID_API_VERSION=android-28&quot;
set &quot;ANDROID_SDK_ROOT=&amp;lt;ANDROID_SDK_PATH&amp;gt;&quot;
set &quot;ANDROID_TARGET_ARCH=armeabi-v7a&quot;
set &quot;ANDROID_BUILD_TOOLS_REVISION=21.1.2&quot;
set &quot;ANDROID_NDK_PATH=&amp;lt;ANDROID_NDK_PATH&amp;gt;&quot;
set &quot;ANDROID_TOOLCHAIN_VERSION=4.9&quot;
\encode
Depending on which NDK you have downloaded, add its path:
\code
set &quot;ANDROID_NDK_HOST=windows-x86_64&quot;
\encdode
or
\code
set &quot;ANDROID_NDK_HOST=windows&quot;
</db:programlisting>
</db:listitem>
</db:orderedlist>
</db:section>
<db:section xml:id="building-qt">
<db:title>Building Qt</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>If you have a commercially licensed Qt, install your license file. If you're using a binary installer or the commercial Qt Creator, your licenses are automatically fetched and stored in your local user profile: %USERPROFILE%\AppData\Roaming\Qt\qtlicenses.ini. Alternatively, you can download the respective license file from your Qt Account Web portal and save it to your user profile as %USERPROFILE%\.qt-license. If you prefer a different location or file name, you need to set the QT_LICENSE_FILE environment variable to the respective file path.</db:para>
</db:listitem>
<db:listitem>
<db:para>Next, unpack the archive. Uncompress the files into the directory in which you want Qt installed, for example: C:\Qt\%VERSION%. This install path must not contain any spaces or Windows-specific file system characters.</db:para>
</db:listitem>
<db:listitem>
<db:para>Run the following command. <db:emphasis>&lt;N&gt;</db:emphasis> is optional, representing the number of parallel jobs your system can do.</db:para>
<db:programlisting language="cpp">configure.bat -prefix &amp;lt;path to install Qt to&amp;gt; -platform win32-g++ -opengl es2 -xplatform
android-g++ -android-ndk ANDROID_NDK_PATH -android-sdk ANDROID_SDK_ROOT -nomake tests
-nomake examples mingw32-make.exe -j&amp;lt;N&amp;gt;
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>To build the previously configured parts of Qt, run the following command:</db:para>
<db:programlisting language="cpp">mingw32-make.exe -j&amp;lt;N&amp;gt;
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Now, to install Qt, run the following command:</db:para>
<db:programlisting language="cpp">mingw32-make.exe install
</db:programlisting>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:article>
