<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Android - Building from Source</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-how-it-works.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="How Qt for Android Works"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-building-projects-from-commandline.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Building Qt for Android Projects from Command Line"/></db:extendedlink>
<db:abstract>
<db:para>How to configure and build Qt for Android directly from source.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This page describes the process of configuring and building <db:link xlink:href="android.xml">Qt for Android</db:link>. To download and install a pre-built Qt for Android, follow the instructions on the <db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link> page.</db:para>
<db:section xml:id="prerequisites">
<db:title>Prerequisites</db:title>
<db:para>To build Qt for Android from source please ensure all requirements from <db:link xlink:href="android-getting-started.xml">Getting Started with Qt for Android</db:link> are met before continuing.</db:para>
<db:section xml:id="windows">
<db:title>Windows</db:title>
<db:para>Building Qt for Android on Windows also requires the following software:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>MinGW 11.2 toolchain</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Qt for Android does not support building from source with Microsoft Visual C++ (MSVC).</db:para>
</db:note>
<db:para>Install the prerequisites and append their binary paths to the system PATH:</db:para>
<db:programlisting language="cpp" role="bad">set MINGW_ROOT=&amp;lt;MINGW_ROOT_PATH&amp;gt;\bin
set PATH=%MINGW_ROOT%;%PATH%
</db:programlisting>
<db:para>To verify the installation, run:</db:para>
<db:programlisting language="cpp" role="bad">where mingw32-make.exe
</db:programlisting>
<db:para>The command should list mingw32-make.exe under the path <db:emphasis>&lt;MINGW_ROOT&gt;</db:emphasis> first.</db:para>
</db:section>
</db:section>
<db:section xml:id="getting-the-sources">
<db:title>Getting the Sources</db:title>
<db:para>You can download the Qt sources from the <db:link xlink:href="https://www.qt.io/download">Qt Downloads</db:link> page, or follow the wiki guide for <db:link xlink:href="https://wiki.qt.io/Building_Qt_5_from_Git#Getting_the_source_code">Getting the source code</db:link>.</db:para>
</db:section>
<db:section xml:id="configuring">
<db:title>Configuring</db:title>
<db:para>With Qt 6, you can build Qt for Android from source code using CMake. Qt 6 for Android requires a host Qt build, which means to build Qt for Android, you need to build Qt for the desktop platform used as a host (that is, Linux, macOS, or Windows).</db:para>
<db:para>To configure and do a minimalistic host build to be used with Qt for Android build, use the following command:</db:para>
<db:programlisting language="cpp" role="bad">mkdir ~/dev/build-host
cd ~/dev/build-host
./configure -developer-build -nomake tests -nomake examples
cmake --build . --target host_tools
</db:programlisting>
<db:para>That will configure a developer build for your host and only build the necessary dependencies used for the Android build. For more information on doing a full and more customizable build for your host, see {Building Qt Sources}.</db:para>
<db:para>To configure Qt for Android, create a shadow build directory to keep the source directory clean:</db:para>
<db:programlisting language="cpp" role="bad">mkdir -p ~/dev/build-qt-android
cd ~/dev/build-qt-android
</db:programlisting>
<db:para>Qt for Android supports the following device architectures (ABIs): arm64-v8a, x86_64, x86, and armeabi-v7a</db:para>
<db:para>And then run the configure script:</db:para>
<db:programlisting language="cpp" role="bad">./configure -prefix &amp;lt;install_path&amp;gt; -qt-host-path &amp;lt;qt_host_install_path&amp;gt; \
    -android-abis &amp;lt;abi&amp;gt; -android-sdk ~/Android/Sdk -android-ndk ~/Android/Sdk/ndk/26.1.10909125
</db:programlisting>
<db:para>The Android SDK is commonly installed by Qt Creator or Android Studio in the following locations:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Linux: ~/Android/Sdk/</db:para>
</db:listitem>
<db:listitem>
<db:para>macOS: ~/Library/Android/sdk/</db:para>
</db:listitem>
<db:listitem>
<db:para>Windows: C:\Users\&lt;USER&gt;\AppData\Local\Android\Sdk\</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>configure always uses the <db:emphasis role="bold">Ninja</db:emphasis> generator and build tool if a ninja executable is available. Ninja is cross-platform, feature-rich, performant, and recommended on all platforms. The use of other generators might work but is not officially supported.</db:para>
</db:note>
</db:section>
<db:section xml:id="advanced-configure-arguments">
<db:title>Advanced Configure Arguments</db:title>
<db:para>Qt for Android contains Java code which is compiled into <db:emphasis>*.jar</db:emphasis> files with the <db:emphasis>javac</db:emphasis> compiler. To set the <db:emphasis>javac</db:emphasis> version for source and target, use <db:emphasis>-android-javac-source</db:emphasis> and <db:emphasis>-android-javac-target</db:emphasis> respectively:</db:para>
<db:programlisting language="cpp" role="bad">-android-javac-source 8 -android-javac-target 8
</db:programlisting>
<db:para>To build Qt as a developer build instead of a prefix build, use the following instead of the -prefix argument:</db:para>
<db:programlisting language="cpp" role="bad">-developer-build
</db:programlisting>
<db:note>
<db:para>When using this configure argument, it's not required to install your Qt build, Qt for Android can be used directly from within the build directory.</db:para>
</db:note>
<db:para><db:link xlink:href="configure-options.xml">Qt Configure Options</db:link> contains more information about the configure options.</db:para>
</db:section>
<db:section xml:id="building">
<db:title>Building</db:title>
<db:para>To build Qt, run the following command:</db:para>
<db:programlisting language="cpp" role="bad">cmake --build . --parallel
</db:programlisting>
</db:section>
<db:section xml:id="installing">
<db:title>Installing</db:title>
<db:para>For prefix builds, to install Qt, run the following command:</db:para>
<db:programlisting language="cpp" role="bad">cmake --install .
</db:programlisting>
<db:para>On Unix, if you haven't provided the -prefix &lt;install_path&gt; configure option, the installation is placed under /usr/local/Qt-&lt;version&gt;, in that case, you would need to use sudo with the install command.</db:para>
</db:section>
</db:article>
