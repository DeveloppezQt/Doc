<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Window QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Creates a new top-level window.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Window 2.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-applicationwindow.xml" xlink:role="">ApplicationWindow</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In C++:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Window is part of <db:simplelist><db:member>qtquick-visual</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Window object creates a new top-level window for a Qt Quick scene. It automatically sets up the window for use with QtQuick 2.x graphical types.</db:para>
<db:para>To use this type, you will need to import the module with the following line:</db:para>
<db:programlisting language="cpp">import QtQuick.Window 2.2
</db:programlisting>
<db:para>Omitting this import will allow you to have a QML environment without access to window system features.</db:para>
<db:para>A Window can be declared inside an Item or inside another Window; in that case the inner Window will automatically become &quot;transient for&quot; the outer Window: that is, most platforms will show it centered upon the outer window by default, and there may be other platform-dependent behaviors, depending also on the <db:link xlink:href="qml-qtquick-window-window.xml#flags-prop">flags</db:link>. If the nested window is intended to be a dialog in your application, you should also set <db:link xlink:href="qml-qtquick-window-window.xml#flags-prop">flags</db:link> to Qt.Dialog, because some window managers will not provide the centering behavior without that flag. You can also declare multiple windows inside a top-level <db:link xlink:href="qml-qtqml-qtobject.xml">QtObject</db:link>, in which case the windows will have no transient relationship.</db:para>
<db:para>Alternatively you can set or bind <db:link xlink:href="qml-qtquick-window-window.xml#x-prop">x</db:link> and <db:link xlink:href="qml-qtquick-window-window.xml#y-prop">y</db:link> to position the Window explicitly on the screen.</db:para>
<db:para>When the user attempts to close a window, the <db:link xlink:href="qml-qtquick-window-window.xml#closing-signal">closing</db:link> signal will be emitted. You can force the window to stay open (for example to prompt the user to save changes) by writing an onClosing handler and setting close.accepted = false.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="height-prop">
<db:title>height : int</db:title>
<db:bridgehead renderas="sect2">width : int</db:bridgehead><db:bridgehead renderas="sect2">x : int</db:bridgehead><db:bridgehead renderas="sect2">y : int</db:bridgehead><db:para>Defines the window's position and size.</db:para>
<db:para>The (x,y) position is relative to the <db:link xlink:href="qml-qtquick-window-screen.xml">Screen</db:link> if there is only one, or to the virtual desktop (arrangement of multiple screens).</db:para>
<db:programlisting language="qml">Window { x: 100; y: 100; width: 100; height: 100 }
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/screen-and-window-dimensions.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="minimumHeight-prop">
<db:title>[since 5.1] minimumHeight : int</db:title>
<db:bridgehead renderas="sect2">[since 5.1] minimumWidth : int</db:bridgehead><db:para>Defines the window's minimum size.</db:para>
<db:para>This is a hint to the window manager to prevent resizing below the specified width and height.</db:para>
<db:para>This QML property was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="maximumHeight-prop">
<db:title>[since 5.1] maximumHeight : int</db:title>
<db:bridgehead renderas="sect2">[since 5.1] maximumWidth : int</db:bridgehead><db:para>Defines the window's maximum size.</db:para>
<db:para>This is a hint to the window manager to prevent resizing above the specified width and height.</db:para>
<db:para>This QML property was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="active-prop">
<db:title>[read-only, since 5.1] active : bool</db:title>
<db:para>The active status of the window.</db:para>
<db:para>This property was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">requestActivate()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activeFocusItem-prop">
<db:title>[read-only, since 5.1] activeFocusItem : Item</db:title>
<db:para>The item which currently has active focus or null if there is no item with active focus.</db:para>
<db:para>This property was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="color-prop">
<db:title>color : color</db:title>
<db:para>The background color for the window.</db:para>
<db:para>Setting this property is more efficient than using a separate Rectangle.</db:para>
</db:section>
<db:section xml:id="contentItem-prop">
<db:title>[read-only] contentItem : Item</db:title>
<db:para>The invisible root item of the scene.</db:para>
</db:section>
<db:section xml:id="contentOrientation-prop">
<db:title>[since 5.1] contentOrientation : Qt::ScreenOrientation</db:title>
<db:para>This is a hint to the window manager in case it needs to display additional content like popups, dialogs, status bars, or similar in relation to the window.</db:para>
<db:para>The recommended orientation is <db:link xlink:href="qml-qtquick-window-screen.xml#orientation-attached-prop">Screen.orientation</db:link>, but an application doesn't have to support all possible orientations, and thus can opt to ignore the current screen orientation.</db:para>
<db:para>The difference between the window and the content orientation determines how much to rotate the content by.</db:para>
<db:para>The default value is <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PrimaryOrientation</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-window-screen.xml">Screen</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data-prop">
<db:title>data : list&lt;Object&gt;</db:title>
<db:para>The data property allows you to freely mix visual children, resources and other Windows in a Window.</db:para>
<db:para>If you assign another Window to the data list, the nested window will become &quot;transient for&quot; the outer Window.</db:para>
<db:para>If you assign an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> to the data list, it becomes a child of the Window's <db:link xlink:href="qml-qtquick-window-window.xml#contentItem-prop">contentItem</db:link>, so that it appears inside the window. The item's parent will be the window's <db:link xlink:href="qml-qtquick-window-window.xml#contentItem-prop">contentItem</db:link>, which is the root of the Item ownership tree within that Window.</db:para>
<db:para>If you assign any other object type, it is added as a resource.</db:para>
<db:para>It should not generally be necessary to refer to the data property, as it is the default property for Window and thus all child items are automatically assigned to this property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#transientParent">QWindow::transientParent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags-prop">
<db:title>flags : Qt::WindowFlags</db:title>
<db:para>The window flags of the window.</db:para>
<db:para>The window flags control the window's appearance in the windowing system, whether it's a dialog, popup, or a regular window, and whether it should have a title bar, etc.</db:para>
<db:para>The flags which you read from this property might differ from the ones that you set if the requested flags could not be fulfilled.</db:para>
</db:section>
<db:section xml:id="modality-prop">
<db:title>modality : Qt::WindowModality</db:title>
<db:para>The modality of the window.</db:para>
<db:para>A modal window prevents other windows from receiving input events. Possible values are Qt.NonModal (the default), Qt.WindowModal, and Qt.ApplicationModal.</db:para>
</db:section>
<db:section xml:id="opacity-prop">
<db:title>[since 5.1] opacity : real</db:title>
<db:para>The opacity of the window.</db:para>
<db:para>If the windowing system supports window opacity, this can be used to fade the window in and out, or to make it semitransparent.</db:para>
<db:para>A value of 1.0 or above is treated as fully opaque, whereas a value of 0.0 or below is treated as fully transparent. Values inbetween represent varying levels of translucency between the two extremes.</db:para>
<db:para>The default value is 1.0.</db:para>
<db:para>This property was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : string</db:title>
<db:para>The window's title in the windowing system.</db:para>
<db:para>The window title might appear in the title area of the window decorations, depending on the windowing system and the window flags. It might also be used by the windowing system to identify the window in other contexts, such as in the task switcher.</db:para>
</db:section>
<db:section xml:id="visibility-prop">
<db:title>[since 5.1] visibility : QWindow::Visibility</db:title>
<db:para>The screen-occupation state of the window.</db:para>
<db:para>Visibility is whether the window should appear in the windowing system as normal, minimized, maximized, fullscreen or hidden.</db:para>
<db:para>To set the visibility to <db:link xlink:href="qwindow.xml#Visibility-enum">AutomaticVisibility</db:link> means to give the window a default visible state, which might be <db:link xlink:href="qwindow.xml#Visibility-enum">FullScreen</db:link> or <db:link xlink:href="qwindow.xml#Visibility-enum">Windowed</db:link> depending on the platform. However when reading the visibility property you will always get the actual state, never AutomaticVisibility.</db:para>
<db:para>When a window is not visible its visibility is Hidden, and setting visibility to <db:link xlink:href="qwindow.xml#Visibility-enum">Hidden</db:link> is the same as setting <db:link xlink:href="qml-qtquick-window-window.xml#visible-prop">visible</db:link> to false.</db:para>
<db:para>This property was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-window-window.xml#visible-prop">visible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visible-prop">
<db:title>visible : bool</db:title>
<db:para>Whether the window is visible on the screen.</db:para>
<db:para>Setting visible to false is the same as setting <db:link xlink:href="qml-qtquick-window-window.xml#visibility-attached-prop">visibility</db:link> to <db:link xlink:href="qwindow.xml#Visibility-enum">Hidden</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-window-window.xml#visibility-attached-prop">visibility</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="attached-property-documentation">
<db:title>Attached Property Documentation</db:title>
<db:section xml:id="height-attached-prop">
<db:title>[since 5.5] Window.height : int</db:title>
<db:bridgehead renderas="sect2">[since 5.5] Window.width : int</db:bridgehead><db:para>These attached properties hold the size of the item's window. The Window attached property can be attached to any Item.</db:para>
<db:para>This QML property was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="active-attached-prop">
<db:title>[read-only, since 5.4] Window.active : bool</db:title>
<db:para>This attached property tells whether the window is active. The Window attached property can be attached to any Item.</db:para>
<db:para>Here is an example which changes a label to show the active state of the window in which it is shown:</db:para>
<db:programlisting language="qml">import QtQuick 2.4
import QtQuick.Window 2.2

Text {
    text: Window.active ? &quot;active&quot; : &quot;inactive&quot;
}
</db:programlisting>
<db:para>This property was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="activeFocusItem-attached-prop">
<db:title>[read-only, since 5.4] Window.activeFocusItem : Item</db:title>
<db:para>This attached property holds the item which currently has active focus or null if there is no item with active focus. The Window attached property can be attached to any Item.</db:para>
<db:para>This property was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="contentItem-attached-prop">
<db:title>[read-only, since 5.4] Window.contentItem : Item</db:title>
<db:para>This attached property holds the invisible root item of the scene or null if the item is not in a window. The Window attached property can be attached to any Item.</db:para>
<db:para>This property was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="visibility-attached-prop">
<db:title>[since 5.4] Window.visibility : QWindow::Visibility</db:title>
<db:para>This attached property holds whether the window is currently shown in the windowing system as normal, minimized, maximized, fullscreen or hidden. The Window attached property can be attached to any Item. If the item is not shown in any window, the value will be <db:link xlink:href="qwindow.xml#Visibility-enum">Hidden</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-window-window.xml#visible-prop">visible</db:link></db:member>
<db:member>visibility</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="closing-signal">
<db:title>[since 5.1] closing(CloseEvent <db:emphasis>close</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user tries to close the window.</db:para>
<db:para>This signal includes a <db:code role="parameter">close</db:code> parameter. The close.accepted property is true by default so that the window is allowed to close; but you can implement an onClosing handler and set close.accepted = false if you need to do something else before the window can be closed.</db:para>
<db:para>The corresponding handler is onClosing.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onClosing</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in Qt 5.1.</db:para>
</db:section>
</db:section>
</db:article>
