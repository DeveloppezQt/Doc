<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Sub-Attaq</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows Qt's ability to combine <db:link xlink:href="animation-overview.xml">the animation framework</db:link> and <db:link xlink:href="statemachine-api.xml">the state machine framework</db:link> to create a game.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtCore module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/

//Own
#include &quot;graphicsscene.h&quot;
#include &quot;states.h&quot;
#include &quot;boat.h&quot;
#include &quot;submarine.h&quot;
#include &quot;torpedo.h&quot;
#include &quot;bomb.h&quot;
#include &quot;pixmapitem.h&quot;
#include &quot;animationmanager.h&quot;
#include &quot;qanimationstate.h&quot;
#include &quot;progressitem.h&quot;
#include &quot;textinformationitem.h&quot;

//Qt
#include &lt;QtCore/QPropertyAnimation&gt;
#include &lt;QtCore/QSequentialAnimationGroup&gt;
#include &lt;QtCore/QParallelAnimationGroup&gt;
#include &lt;QtCore/QStateMachine&gt;
#include &lt;QtCore/QFinalState&gt;
#include &lt;QtCore/QPauseAnimation&gt;
#include &lt;QtWidgets/QAction&gt;
#include &lt;QtCore/QDir&gt;
#include &lt;QtWidgets/QApplication&gt;
#include &lt;QtWidgets/QMessageBox&gt;
#include &lt;QtWidgets/QGraphicsView&gt;
#include &lt;QtWidgets/QGraphicsSceneMouseEvent&gt;
#include &lt;QtCore/QXmlStreamReader&gt;

GraphicsScene::GraphicsScene(int x, int y, int width, int height, Mode mode)
    : QGraphicsScene(x , y, width, height), mode(mode), boat(new Boat)
{
    PixmapItem *backgroundItem = new PixmapItem(QString(&quot;background&quot;),mode);
    backgroundItem-&gt;setZValue(1);
    backgroundItem-&gt;setPos(0,0);
    addItem(backgroundItem);

    PixmapItem *surfaceItem = new PixmapItem(QString(&quot;surface&quot;),mode);
    surfaceItem-&gt;setZValue(3);
    surfaceItem-&gt;setPos(0,sealLevel() - surfaceItem-&gt;boundingRect().height()/2);
    addItem(surfaceItem);

    //The item that display score and level
    progressItem = new ProgressItem(backgroundItem);

    textInformationItem = new TextInformationItem(backgroundItem);
    textInformationItem-&gt;hide();
    //We create the boat
    addItem(boat);
    boat-&gt;setPos(this-&gt;width()/2, sealLevel() - boat-&gt;size().height());
    boat-&gt;hide();

    //parse the xml that contain all data of the game
    QXmlStreamReader reader;
    QFile file(&quot;:data.xml&quot;);
    file.open(QIODevice::ReadOnly);
    reader.setDevice(&amp;file);
    LevelDescription currentLevel;
    while (!reader.atEnd()) {
         reader.readNext();
         if (reader.tokenType() == QXmlStreamReader::StartElement) {
             if (reader.name() == &quot;submarine&quot;) {
                 SubmarineDescription desc;
                 desc.name = reader.attributes().value(&quot;name&quot;).toString();
                 desc.points = reader.attributes().value(&quot;points&quot;).toString().toInt();
                 desc.type = reader.attributes().value(&quot;type&quot;).toString().toInt();
                 submarinesData.append(desc);
             } else if (reader.name() == &quot;level&quot;) {
                 currentLevel.id = reader.attributes().value(&quot;id&quot;).toString().toInt();
                 currentLevel.name = reader.attributes().value(&quot;name&quot;).toString();
             } else if (reader.name() == &quot;subinstance&quot;) {
                 currentLevel.submarines.append(qMakePair(reader.attributes().value(&quot;type&quot;).toString().toInt(), reader.attributes().value(&quot;nb&quot;).toString().toInt()));
             }
         } else if (reader.tokenType() == QXmlStreamReader::EndElement) {
            if (reader.name() == &quot;level&quot;) {
                levelsData.insert(currentLevel.id, currentLevel);
                currentLevel.submarines.clear();
            }
         }
   }
}

qreal GraphicsScene::sealLevel() const
{
    return (mode == Big) ? 220 : 160;
}

void GraphicsScene::setupScene(QAction *newAction, QAction *quitAction)
{
    static const int nLetters = 10;
    static struct {
        char const *pix;
        qreal initX, initY;
        qreal destX, destY;
    } logoData[nLetters] = {
        {&quot;s&quot;,   -1000, -1000, 300, 150 },
        {&quot;u&quot;,    -800, -1000, 350, 150 },
        {&quot;b&quot;,    -600, -1000, 400, 120 },
        {&quot;dash&quot;, -400, -1000, 460, 150 },
        {&quot;a&quot;,    1000,  2000, 350, 250 },
        {&quot;t&quot;,     800,  2000, 400, 250 },
        {&quot;t2&quot;,    600,  2000, 430, 250 },
        {&quot;a2&quot;,    400,  2000, 465, 250 },
        {&quot;q&quot;,     200,  2000, 510, 250 },
        {&quot;excl&quot;,    0,  2000, 570, 220 } };

    QSequentialAnimationGroup * lettersGroupMoving = new QSequentialAnimationGroup(this);
    QParallelAnimationGroup * lettersGroupFading = new QParallelAnimationGroup(this);

    for (int i = 0; i &lt; nLetters; ++i) {
        PixmapItem *logo = new PixmapItem(QLatin1String(&quot;:/logo-&quot;) + logoData[i].pix, this);
        logo-&gt;setPos(logoData[i].initX, logoData[i].initY);
        logo-&gt;setZValue(i + 3);
        //creation of the animations for moving letters
        QPropertyAnimation *moveAnim = new QPropertyAnimation(logo, &quot;pos&quot;, lettersGroupMoving);
        moveAnim-&gt;setEndValue(QPointF(logoData[i].destX, logoData[i].destY));
        moveAnim-&gt;setDuration(200);
        moveAnim-&gt;setEasingCurve(QEasingCurve::OutElastic);
        lettersGroupMoving-&gt;addPause(50);
        //creation of the animations for fading out the letters
        QPropertyAnimation *fadeAnim = new QPropertyAnimation(logo, &quot;opacity&quot;, lettersGroupFading);
        fadeAnim-&gt;setDuration(800);
        fadeAnim-&gt;setEndValue(0);
        fadeAnim-&gt;setEasingCurve(QEasingCurve::OutQuad);
    }

    QStateMachine *machine = new QStateMachine(this);

    //This state is when the player is playing
    PlayState *gameState = new PlayState(this, machine);

    //Final state
    QFinalState *final = new QFinalState(machine);

    //Animation when the player enter in the game
    QAnimationState *lettersMovingState = new QAnimationState(machine);
    lettersMovingState-&gt;setAnimation(lettersGroupMoving);

    //Animation when the welcome screen disappear
    QAnimationState *lettersFadingState = new QAnimationState(machine);
    lettersFadingState-&gt;setAnimation(lettersGroupFading);

    //if new game then we fade out the welcome screen and start playing
    lettersMovingState-&gt;addTransition(newAction, SIGNAL(triggered()), lettersFadingState);
    lettersFadingState-&gt;addTransition(lettersFadingState, SIGNAL(animationFinished()), gameState);

    //New Game is triggered then player start playing
    gameState-&gt;addTransition(newAction, SIGNAL(triggered()), gameState);

    //Wanna quit, then connect to CTRL+Q
    gameState-&gt;addTransition(quitAction, SIGNAL(triggered()), final);
    lettersMovingState-&gt;addTransition(quitAction, SIGNAL(triggered()), final);

    //Welcome screen is the initial state
    machine-&gt;setInitialState(lettersMovingState);

    machine-&gt;start();

    //We reach the final state, then we quit
    connect(machine, SIGNAL(finished()), qApp, SLOT(quit()));
}

void GraphicsScene::addItem(Bomb *bomb)
{
    bombs.insert(bomb);
    connect(bomb,SIGNAL(bombExecutionFinished()),this, SLOT(onBombExecutionFinished()));
    QGraphicsScene::addItem(bomb);
}

void GraphicsScene::addItem(Torpedo *torpedo)
{
    torpedos.insert(torpedo);
    connect(torpedo,SIGNAL(torpedoExecutionFinished()),this, SLOT(onTorpedoExecutionFinished()));
    QGraphicsScene::addItem(torpedo);
}

void GraphicsScene::addItem(SubMarine *submarine)
{
    submarines.insert(submarine);
    connect(submarine,SIGNAL(subMarineExecutionFinished()),this, SLOT(onSubMarineExecutionFinished()));
    QGraphicsScene::addItem(submarine);
}

void GraphicsScene::addItem(QGraphicsItem *item)
{
    QGraphicsScene::addItem(item);
}

void GraphicsScene::onBombExecutionFinished()
{
    Bomb *bomb = qobject_cast&lt;Bomb *&gt;(sender());
    bombs.remove(bomb);
    bomb-&gt;deleteLater();
    if (boat)
        boat-&gt;setBombsLaunched(boat-&gt;bombsLaunched() - 1);
}

void GraphicsScene::onTorpedoExecutionFinished()
{
    Torpedo *torpedo = qobject_cast&lt;Torpedo *&gt;(sender());
    torpedos.remove(torpedo);
    torpedo-&gt;deleteLater();
}

void GraphicsScene::onSubMarineExecutionFinished()
{
    SubMarine *submarine = qobject_cast&lt;SubMarine *&gt;(sender());
    submarines.remove(submarine);
    if (submarines.count() == 0)
        emit allSubMarineDestroyed(submarine-&gt;points());
    else
        emit subMarineDestroyed(submarine-&gt;points());
    submarine-&gt;deleteLater();
}

void GraphicsScene::clearScene()
{
    foreach (SubMarine *sub, submarines) {
        sub-&gt;destroy();
        sub-&gt;deleteLater();
    }

    foreach (Torpedo *torpedo, torpedos) {
        torpedo-&gt;destroy();
        torpedo-&gt;deleteLater();
    }

    foreach (Bomb *bomb, bombs) {
        bomb-&gt;destroy();
        bomb-&gt;deleteLater();
    }

    submarines.clear();
    bombs.clear();
    torpedos.clear();

    AnimationManager::self()-&gt;unregisterAllAnimations();

    boat-&gt;stop();
    boat-&gt;hide();
    boat-&gt;setEnabled(true);
}

</db:programlisting>
</db:article>
