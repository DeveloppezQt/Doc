<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Physics Shapes and Bodies</db:title>
<db:productname>QtQuick3DPhysics</db:productname>
<db:edition>Qt Quick 3D Physics | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Physics Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of Qt Quick 3D Physics objects and their physical shapes.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The objects in the simulation are represented by any of the following four types of bodies: <db:link xlink:href="qml-qtquick3d-physics-staticrigidbody.xml">StaticRigidBody</db:link>, <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link>, <db:link xlink:href="qml-qtquick3d-physics-charactercontroller.xml">CharacterController</db:link> and <db:link xlink:href="qml-qtquick3d-physics-triggerbody.xml">TriggerBody</db:link>. The physical shape of a body is represented by subtypes of <db:link xlink:href="qml-qtquick3d-physics-collisionshape.xml">CollisionShape</db:link>.</db:para>
<db:section xml:id="shapes">
<db:title>Shapes</db:title>
<db:para>A collision shape is used to define the physical shape and extent of an object for the purposes of the physics simulation. The collision shape will typically be simpler than the object's visual appearance.</db:para>
<db:para>There are some predefined shapes built into the engine: <db:link xlink:href="qml-qtquick3d-physics-boxshape.xml">BoxShape</db:link>, <db:link xlink:href="qml-qtquick3d-physics-capsuleshape.xml">CapsuleShape</db:link>, <db:link xlink:href="qml-qtquick3d-physics-sphereshape.xml">SphereShape</db:link>, and <db:link xlink:href="qml-qtquick3d-physics-planeshape.xml">PlaneShape</db:link>. Handling of these shapes is optimized, so simulation using them will typically perform better.</db:para>
<db:para>In addition, there are custom shapes that are defined by data: <db:link xlink:href="qml-qtquick3d-physics-convexmeshshape.xml">ConvexMeshShape</db:link>, <db:link xlink:href="qml-qtquick3d-physics-heightfieldshape.xml">HeightFieldShape</db:link>, and <db:link xlink:href="qml-qtquick3d-physics-trianglemeshshape.xml">TriangleMeshShape</db:link>. These allow more flexibility at the expense of performance.</db:para>
</db:section>
<db:section xml:id="bodies">
<db:title>Bodies</db:title>
<db:para>A <db:link xlink:href="qml-qtquick3d-physics-physicsbody.xml">body</db:link> represents a physical object in the simulation. These bodies interact and collide with each other. The two main types are <db:emphasis>static bodies</db:emphasis> (<db:link xlink:href="qml-qtquick3d-physics-staticrigidbody.xml">StaticRigidBody</db:link>) and <db:emphasis>dynamic bodies</db:emphasis> (<db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link>). The physical shape of a body is specified by a list of shapes. The effective shape is the <db:emphasis>union</db:emphasis> of these shapes. The relative position of the shapes is fixed: the bodies are <db:emphasis>rigid</db:emphasis>.</db:para>
<db:section xml:id="dynamic-body">
<db:title>Dynamic body</db:title>
<db:para>Dynamic bodies are able to move. The <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link> property determines how it moves. When <db:code>isKinematic</db:code> is <db:code>true</db:code>, the body is positioned explicitly by modifying the <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicPosition-prop">kinematicPosition</db:link> and <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicRotation-prop">kinematicRotation</db:link> properties. When <db:code>isKinematic</db:code> is <db:code>false</db:code>, the object is controlled by the simulation: it will fall under gravity, and bounce off other objects.</db:para>
<db:para>When isKinematic is <db:code>true</db:code>, all shapes are allowed. However, non-kinematic bodies are more restricted: only <db:emphasis>convex</db:emphasis> shapes can be used. These are the pre-defined shapes <db:link xlink:href="qml-qtquick3d-physics-boxshape.xml">BoxShape</db:link>, <db:link xlink:href="qml-qtquick3d-physics-capsuleshape.xml">CapsuleShape</db:link>, and <db:link xlink:href="qml-qtquick3d-physics-sphereshape.xml">SphereShape</db:link>; and the custom shape <db:link xlink:href="qml-qtquick3d-physics-convexmeshshape.xml">ConvexMeshShape</db:link>. This does not mean that it is impossible to have a non-convex physical geometry: several convex shapes can be combined for a single body. The <db:link xlink:href="qtquick3dphysics-compoundshapes-example.xml">Compound Shapes Example</db:link> shows how to form ring-shaped bodies based on convex shapes.</db:para>
</db:section>
<db:section xml:id="static-body">
<db:title>Static body</db:title>
<db:para>Static bodies do not move. They represent the environment in which the other bodies move. Note that it is technically possible to move a static body, but the physical simulation will behave unexpectedly. In particular, a dynamic body that has entered a resting position on a static body will not be awoken if the static body moves. This means the dynamic body will remain in the same position even if the static body is moved.</db:para>
</db:section>
<db:section xml:id="character-controller">
<db:title>Character controller</db:title>
<db:para>The <db:link xlink:href="qml-qtquick3d-physics-charactercontroller.xml">CharacterController</db:link> type is a special case. It represents a character that moves through the environment. One typical use case is a first-person view where the <db:link xlink:href="qml-qtquick3d-camera.xml">camera</db:link> is a child of the character controller, and its movement is controlled by keyboard/mouse or gamepad.</db:para>
</db:section>
<db:section xml:id="trigger-body">
<db:title>Trigger body</db:title>
<db:para>There is also the <db:link xlink:href="qml-qtquick3d-physics-triggerbody.xml">TriggerBody</db:link> type which is another special case. As opposed to the other bodies it is not a physical body, meaning it does not interact in collision with other bodies. As the name suggests it is only used to trigger actions when another body enters or leaves its volume as defined by its collision shapes. If another body has <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#sendTriggerReports-prop">sendTriggerReports</db:link> set to <db:code>true</db:code> and its collision volume enters a <db:link xlink:href="qml-qtquick3d-physics-triggerbody.xml">TriggerBody</db:link> the <db:link xlink:href="qml-qtquick3d-physics-triggerbody.xml#bodyEntered-signal">bodyEntered</db:link> signal is emitted.</db:para>
<db:para>The following table shows a summary of the different types of bodies, how they interact and can be used:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Body</db:para>
</db:th>
<db:th>
<db:para>Interaction</db:para>
</db:th>
<db:th>
<db:para>Allowed shapes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick3d-physics-staticrigidbody.xml">StaticRigidBody</db:link></db:para>
</db:td>
<db:td>
<db:para>Does not move</db:para>
</db:td>
<db:td>
<db:para>All shapes</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link> with <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link> <db:code>true</db:code></db:para>
</db:td>
<db:td>
<db:para>Positioned programatically. Influences dynamic bodies. Stopped by nothing.</db:para>
</db:td>
<db:td>
<db:para>All shapes</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link> with <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link> <db:code>false</db:code></db:para>
</db:td>
<db:td>
<db:para>Fully controlled by simulation</db:para>
</db:td>
<db:td>
<db:para>Limited shapes</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick3d-physics-charactercontroller.xml">CharacterController</db:link></db:para>
</db:td>
<db:td>
<db:para>Moved programatically. Influences dynamic bodies. Stopped by static bodies.</db:para>
</db:td>
<db:td>
<db:para>Only a single <db:link xlink:href="qml-qtquick3d-physics-capsuleshape.xml">CapsuleShape</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick3d-physics-triggerbody.xml">TriggerBody</db:link></db:para>
</db:td>
<db:td>
<db:para>None</db:para>
</db:td>
<db:td>
<db:para>All shapes</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="physics-materials">
<db:title>Physics Materials</db:title>
<db:para>The <db:link xlink:href="qml-qtquick3d-physics-physicsmaterial.xml">PhysicsMaterial</db:link> type specifies how an object behaves when it collides with another. The <db:link xlink:href="qml-qtquick3d-physics-physicsmaterial.xml#dynamicFriction-prop">dynamicFriction</db:link> and <db:link xlink:href="qml-qtquick3d-physics-physicsmaterial.xml#staticFriction-prop">staticFriction</db:link> properties determine how slippery the object is, and <db:link xlink:href="qml-qtquick3d-physics-physicsmaterial.xml#restitution-prop">restitution</db:link> determines how bouncy it is.</db:para>
</db:section>
</db:article>
