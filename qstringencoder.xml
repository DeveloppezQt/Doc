<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStringEncoder Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link> class provides a state-based encoder for text.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStringEncoder</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qstringconverter.xml" xlink:role="class">QStringConverter</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStringEncoder is part of <db:simplelist><db:member>i18n</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A text encoder converts text from Qt's internal representation into an encoded text format using a specific encoding.</db:para>
<db:para>Converting a string from Unicode to the local encoding can be achieved using the following code:</db:para>
<db:programlisting language="cpp">QString string = &quot;...&quot;;
auto fromUtf16 = QStringEncoder(QStringEncoder::Utf8);
QByteArray encodedString = fromUtf16(string);
</db:programlisting>
<db:para>The encoder remembers any state that is required between calls, so converting data received in chunks, for example, when receiving it over a network, is just as easy, by calling the encoder whenever new data is available:</db:para>
<db:programlisting language="cpp">auto fromUtf16 = QStringEncoder(QStringEncoder::Utf8);

QByteArray encoded;
while (new_data_available()) {
    QString chunk = get_new_data();
    encoded += fromUtf16(chunk);
}
</db:programlisting>
<db:para>The <db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link> object maintains state between chunks and therefore works correctly even if a UTF-16 surrogate character is split between chunks.</db:para>
<db:para><db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link> objects can't be copied because of their internal state, but can be moved.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:member>
<db:member><db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="encode-1">
<db:title>DecodedData&lt;QStringView&gt; QStringEncoder::encode(QStringView <db:emphasis>in</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-28-29-1">DecodedData&lt;QStringView&gt; QStringEncoder::operator()(QStringView <db:emphasis>in</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="encode">DecodedData&lt;const QString &amp;&gt; QStringEncoder::encode(const QString &amp;<db:emphasis>in</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-28-29">DecodedData&lt;const QString &amp;&gt; QStringEncoder::operator()(const QString &amp;<db:emphasis>in</db:emphasis>)</db:bridgehead>
<db:para>Converts <db:code role="parameter">in</db:code> and returns a struct that is implicitly convertible to <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:programlisting language="cpp">QString string = &quot;...&quot;;
auto fromUtf16 = QStringEncoder(QStringEncoder::Utf8);
auto data = fromUtf16(string); // data's type is QStringEncoder::DecodedData&amp;lt;const QString &amp;amp;&amp;gt;
QByteArray encodedString = fromUtf16(string); // Implicit conversion to QByteArray

// Here you have to cast &quot;data&quot; to QByteArray
auto func = [&amp;amp;]() { return !fromUtf16.hasError() ? QByteArray(data) : &quot;foo&quot;_ba; }
</db:programlisting>
</db:section>
<db:section xml:id="QStringEncoder-1">
<db:title>[constexpr] QStringEncoder::QStringEncoder()</db:title>
<db:constructorsynopsis>
<db:methodname>QStringEncoder</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringEncoder()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Default constructs an encoder. The default encoder is not valid, and can't be used for converting text.</db:para>
</db:section>
<db:section xml:id="QStringEncoder-2">
<db:title>[explicit constexpr] QStringEncoder::QStringEncoder(QStringConverter::Encoding <db:emphasis>encoding</db:emphasis>, QStringConverter::Flags <db:emphasis>flags</db:emphasis> = Flag::Default)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringEncoder</db:methodname>
<db:methodparam>
<db:type>QStringConverter::Encoding</db:type>
<db:parameter>encoding</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringConverter::Flags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Flag::Default</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringEncoder(QStringConverter::Encoding encoding, QStringConverter::Flags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an encoder object using <db:code role="parameter">encoding</db:code> and <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="QStringEncoder-3">
<db:title>[explicit] QStringEncoder::QStringEncoder(const char *<db:emphasis>name</db:emphasis>, QStringConverter::Flags <db:emphasis>flags</db:emphasis> = Flag::Default)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringEncoder</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringConverter::Flags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Flag::Default</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringEncoder(const char *name, QStringConverter::Flags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an encoder object using <db:code role="parameter">name</db:code> and <db:code role="parameter">flags</db:code>. If <db:code role="parameter">name</db:code> is not the name of a known encoding an invalid converter will get created.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringconverter.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="appendToBuffer">
<db:title>char *QStringEncoder::appendToBuffer(char *<db:emphasis>out</db:emphasis>, QStringView <db:emphasis>in</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>char *</db:type>
<db:methodname>appendToBuffer</db:methodname>
<db:methodparam>
<db:type>char *</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">char * appendToBuffer(char *out, QStringView in)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Encodes <db:code role="parameter">in</db:code> and writes the encoded result into the buffer starting at <db:code role="parameter">out</db:code>. Returns a pointer to the end of the data written.</db:para>
<db:note>
<db:para><db:code role="parameter">out</db:code> must be large enough to be able to hold all the decoded data. Use <db:link xlink:href="qstringencoder.xml#requiredSpace">requiredSpace</db:link>() to determine the maximum size requirement to be able to encode <db:code role="parameter">in</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringencoder.xml#requiredSpace">requiredSpace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requiredSpace">
<db:title>qsizetype QStringEncoder::requiredSpace(qsizetype <db:emphasis>inputLength</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>requiredSpace</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>inputLength</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype requiredSpace(qsizetype inputLength) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum amount of characters required to be able to process <db:code role="parameter">inputLength</db:code> decoded data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringencoder.xml#appendToBuffer">appendToBuffer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
