<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Simple CoAP Client</db:title>
<db:productname>QtCoap</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt CoAP Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Creating an application that communicates with a CoAP server.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2019 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#include &quot;optiondialog.h&quot;
#include &quot;ui_optiondialog.h&quot;

OptionDialog::OptionDialog(const QList&amp;lt;QCoapOption&amp;gt; &amp;amp;options, QWidget *parent) :
    QDialog(parent),
    ui(new Ui::OptionDialog),
    m_options(options)
{
    ui-&amp;gt;setupUi(this);
    connect(ui-&amp;gt;tableWidget, &amp;amp;QTableWidget::itemSelectionChanged, this, [this]() {
        const auto selection = ui-&amp;gt;tableWidget-&amp;gt;selectedItems();
        ui-&amp;gt;removeButton-&amp;gt;setEnabled(!selection.isEmpty());
    });

    fillOptions();
    applyOptionValues();

    auto header = ui-&amp;gt;tableWidget-&amp;gt;horizontalHeader();
    header-&amp;gt;setSectionResizeMode(QHeaderView::Stretch);
}

OptionDialog::~OptionDialog()
{
    delete ui;
}

QList&amp;lt;QCoapOption&amp;gt; OptionDialog::options() const
{
    return m_options;
}

void OptionDialog::on_addButton_clicked()
{
    const auto option =
            ui-&amp;gt;optionComboBox-&amp;gt;currentData(Qt::UserRole).value&amp;lt;QCoapOption::OptionName&amp;gt;();
    m_options.push_back(QCoapOption(option, ui-&amp;gt;optionValueEdit-&amp;gt;text()));

    addTableRow(ui-&amp;gt;optionComboBox-&amp;gt;currentText(), ui-&amp;gt;optionValueEdit-&amp;gt;text());
}

void OptionDialog::on_removeButton_clicked()
{
    const auto idx = ui-&amp;gt;tableWidget-&amp;gt;currentRow();
    if (idx &amp;gt;= 0 &amp;amp;&amp;amp; idx &amp;lt; ui-&amp;gt;tableWidget-&amp;gt;rowCount()) {
        ui-&amp;gt;tableWidget-&amp;gt;removeRow(idx);
        m_options.removeAt(idx);
    }
}

void OptionDialog::on_clearButton_clicked()
{
    m_options.clear();
    ui-&amp;gt;tableWidget-&amp;gt;setRowCount(0);
}

void OptionDialog::fillOptions()
{
    ui-&amp;gt;tableWidget-&amp;gt;setHorizontalHeaderLabels({tr(&quot;Name&quot;), tr(&quot;Value&quot;)});
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;None&quot;), QCoapOption::Invalid);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Block1&quot;), QCoapOption::Block1);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Block2&quot;), QCoapOption::Block2);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Content-Format&quot;), QCoapOption::ContentFormat);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;If-Match&quot;), QCoapOption::IfMatch);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;If-None-Match&quot;), QCoapOption::IfNoneMatch);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Location-Path&quot;), QCoapOption::LocationPath);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Location-Query&quot;), QCoapOption::LocationQuery);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Max-Age&quot;), QCoapOption::MaxAge);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Observe&quot;), QCoapOption::Observe);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Proxy-Scheme&quot;), QCoapOption::ProxyScheme);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Proxy-Uri&quot;), QCoapOption::ProxyUri);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Size1&quot;), QCoapOption::Size1);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Size2&quot;), QCoapOption::Size2);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Uri-Host&quot;), QCoapOption::UriHost);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Uri-Path&quot;), QCoapOption::UriPath);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Uri-Port&quot;), QCoapOption::UriPort);
    ui-&amp;gt;optionComboBox-&amp;gt;addItem(tr(&quot;Uri-Query&quot;), QCoapOption::UriQuery);
}

void OptionDialog::applyOptionValues()
{
    for (const auto &amp;amp;option : std::as_const(m_options)) {
        const int optionIndex = ui-&amp;gt;optionComboBox-&amp;gt;findData(option.name());
        if (optionIndex != -1)
            addTableRow(ui-&amp;gt;optionComboBox-&amp;gt;itemText(optionIndex), option.stringValue());
    }
}

void OptionDialog::addTableRow(const QString &amp;amp;name, const QString &amp;amp;value)
{
    const auto rowCount = ui-&amp;gt;tableWidget-&amp;gt;rowCount();
    ui-&amp;gt;tableWidget-&amp;gt;insertRow(rowCount);

    QTableWidgetItem *optionItem = new QTableWidgetItem(name);
    optionItem-&amp;gt;setFlags(optionItem-&amp;gt;flags() ^ Qt::ItemIsEditable);
    ui-&amp;gt;tableWidget-&amp;gt;setItem(rowCount, 0, optionItem);

    QTableWidgetItem *valueItem = new QTableWidgetItem(value);
    valueItem-&amp;gt;setFlags(valueItem-&amp;gt;flags() ^ Qt::ItemIsEditable);
    ui-&amp;gt;tableWidget-&amp;gt;setItem(rowCount, 1, valueItem);
}

</db:programlisting>
</db:article>
