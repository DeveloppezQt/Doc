<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>BarModelMapper Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to use <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> derived model as the data for the bar series.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_barmodelmapper.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="using-data-models-with-bar-charts">
<db:title>Using Data Models with Bar Charts</db:title>
<db:para>Let's start by creating an instance of CustomTableModel class. The CustomTableModel class is derived from <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link>, and it was created for the purpose of this example. The constructor of this class populates the model's internal data store with the data required for our chart example.</db:para>
<db:programlisting language="cpp">m_model = new CustomTableModel;
</db:programlisting>
<db:para>We now have a model with data that we would like to display both on the chart and in a <db:link xlink:href="qtableview.xml">QTableView</db:link>. First, we create <db:link xlink:href="qtableview.xml">QTableView</db:link> and tell it to use the model as a data source. To have the data presented nicely, the minimum width of the table view is set and its headers resize mode changed to stretch.</db:para>
<db:programlisting language="cpp">// create table view and add model to it
QTableView *tableView = new QTableView;
tableView-&amp;gt;setModel(m_model);
tableView-&amp;gt;setMinimumWidth(300);
tableView-&amp;gt;horizontalHeader()-&amp;gt;setSectionResizeMode(QHeaderView::Stretch);
tableView-&amp;gt;verticalHeader()-&amp;gt;setSectionResizeMode(QHeaderView::Stretch);
m_model-&amp;gt;setParent(tableView);
</db:programlisting>
<db:para>Now we need a <db:link xlink:href="qchart.xml">QChart</db:link> instance to display the same data on the chart. We also enable animations. It makes it easier to see how a modification to the model's data affects the chart.</db:para>
<db:programlisting language="cpp">QChart *chart = new QChart;
chart-&amp;gt;setAnimationOptions(QChart::AllAnimations);
</db:programlisting>
<db:para>The first line of the code below creates new bar series. Variables firstRow and rowCount are used to define a custom model mapping. Custom mapping allows to take only part of the data from the model. In this case data from 5 rows starting with the row with the index 3. The following three lines create an instance of the <db:link xlink:href="qvbarmodelmapper.xml">QVBarModelMapper</db:link> class and specify that the data for the bar sets should be taken from the model's columns with indexes from 1 to 4 (inclusive). To create a connection between the series and the model we set both of those objects to <db:link xlink:href="qvbarmodelmapper.xml">QVBarModelMapper</db:link>.</db:para>
<db:para>Finally the series is added to the chart.</db:para>
<db:programlisting language="cpp">QBarSeries *series = new QBarSeries;

int first = 3;
int count = 5;
QVBarModelMapper *mapper = new QVBarModelMapper(this);
mapper-&amp;gt;setFirstBarSetColumn(1);
mapper-&amp;gt;setLastBarSetColumn(4);
mapper-&amp;gt;setFirstRow(first);
mapper-&amp;gt;setRowCount(count);
mapper-&amp;gt;setSeries(series);
mapper-&amp;gt;setModel(m_model);
chart-&amp;gt;addSeries(series);
</db:programlisting>
<db:para>To show in <db:link xlink:href="qtableview.xml">QTableView</db:link> which data corresponds with which bar set, this example uses table coloring. When series is added to the chart, it is assigned a color based on the currently selected theme. Code below extracts that color from the series and uses it to create colored <db:link xlink:href="qtableview.xml">QTableView</db:link>. Coloring of the view is not a part of the <db:link xlink:href="qchart.xml">QChart</db:link> functionality.</db:para>
<db:programlisting language="cpp">// for storing color hex from the series
QString seriesColorHex = &quot;#000000&quot;;

// get the color of the series and use it for showing the mapped area
QList&amp;lt;QBarSet *&amp;gt; barsets = series-&amp;gt;barSets();
for (int i = 0; i &amp;lt; barsets.count(); i++) {
    seriesColorHex = &quot;#&quot; + QString::number(barsets.at(i)-&amp;gt;brush().color().rgb(), 16).right(6).toUpper();
    m_model-&amp;gt;addMapping(seriesColorHex, QRect(1 + i, first, 1, barsets.at(i)-&amp;gt;count()));
}
</db:programlisting>
<db:para>We would like to have categories placed on the chart's axis that describe what the data means. Next snippet shows how to do that.</db:para>
<db:programlisting language="cpp">QStringList categories;
categories &amp;lt;&amp;lt; &quot;April&quot; &amp;lt;&amp;lt; &quot;May&quot; &amp;lt;&amp;lt; &quot;June&quot; &amp;lt;&amp;lt; &quot;July&quot; &amp;lt;&amp;lt; &quot;August&quot;;
QBarCategoryAxis *axisX = new QBarCategoryAxis();
axisX-&amp;gt;append(categories);
chart-&amp;gt;addAxis(axisX, Qt::AlignBottom);
series-&amp;gt;attachAxis(axisX);
QValueAxis *axisY = new QValueAxis();
chart-&amp;gt;addAxis(axisY, Qt::AlignLeft);
series-&amp;gt;attachAxis(axisY);
</db:programlisting>
<db:para>To avoid setting up the <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> we use the <db:link xlink:href="qchartview.xml">QChartView</db:link> class that does it for us. The <db:link xlink:href="qchart.xml">QChart</db:link> object pointer is used as a parameter of the <db:link xlink:href="qchartview.xml">QChartView</db:link> constructor. To make the render look nicer Antialiasing is turned on and the minimum size of the chartView widget is set.</db:para>
<db:programlisting language="cpp">QChartView *chartView = new QChartView(chart);
chartView-&amp;gt;setRenderHint(QPainter::Antialiasing);
chartView-&amp;gt;setMinimumSize(640, 480);
</db:programlisting>
<db:para>Finally, we place both widgets in a layout and use the layout as the application layout.</db:para>
<db:programlisting language="cpp">// create main layout
QGridLayout *mainLayout = new QGridLayout;
mainLayout-&amp;gt;addWidget(tableView, 1, 0);
mainLayout-&amp;gt;addWidget(chartView, 1, 1);
mainLayout-&amp;gt;setColumnStretch(1, 1);
mainLayout-&amp;gt;setColumnStretch(0, 0);
setLayout(mainLayout);
</db:programlisting>
<db:para>The application is ready. Try modifying the data in the table view and see how it affects the chart.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/barmodelmapper?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
