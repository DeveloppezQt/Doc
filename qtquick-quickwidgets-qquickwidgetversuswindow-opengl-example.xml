<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickWidget - QQuickView Comparison Example</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the benefits of <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> over a <db:link xlink:href="qquickview.xml">QQuickView</db:link> embedded as a native window.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qquickwidgetversuswindow-opengl-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>The example allows showing the same Qt Quick scene within the same <db:link xlink:href="qwidget.xml">QWidget</db:link>-based user interface using two different approaches: one is using a <db:link xlink:href="qquickview.xml">QQuickView</db:link> and using it as a child window and <db:link xlink:href="qwidget.xml#createWindowContainer">QWidget::createWindowContainer</db:link>(). The other is using <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> which acts as a true <db:link xlink:href="qwidget.xml">QWidget</db:link> and supports, among others, better clipping and stacking, as is expected from a true <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
<db:para>The Qt Quick scene also uses direct OpenGL rendering, proving that with <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> the rendering still happens using the accelerated 3D API. The implication of this is that the example is tied to OpenGL and will not work with other graphics APIs (Vulkan, Metal, Direct 3D).</db:para>
<db:para>Clicking on the Show Overlay checkbox demonstrates a widget stacking case that is not rendering as expected when embedding a native window, while <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> makes it render as expected.</db:para>
<db:para>Multisample antialiasing can also be exercised. When enabling it via the corresponding checkbox, <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> will internally render into a multisample renderbuffer, which is then resolved into a regular, non-multisample 2D texture after each render pass, thus enabling multisampling for the Qt Quick content without affecting the rest of the <db:link xlink:href="qwidget.xml">QWidget</db:link> UI. With <db:link xlink:href="qquickview.xml">QQuickView</db:link> the native window will request multisampling for its corresponding window surface, bringing similar results, if supported by the platform.</db:para>
<db:para>The Qt Quick scene is interactive: typing into the text field is possible regardless of which embedding technology is used. <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> takes care of forwarding input events to the underlying Qt Quick scene automatically.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/quickwidgets/qquickwidgetversuswindow_opengl?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
