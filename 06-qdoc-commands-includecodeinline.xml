<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Including Code Inline</db:title>
<db:productname>QDoc</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="05-qdoc-commands-documentstructure.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Document Structure"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="07-0-qdoc-commands-includingexternalcode.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Including External Code"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>QDoc Manual</db:para>
<db:para>The following commands are used to render source code without formatting. The source code begins on a new line, rendered in the code.</db:para>
<db:note>
<db:para>Although most of these commands are for rendering C++ code, the <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#snippet-command">\snippet</db:link> and <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#codeline-command">\codeline</db:link> commands are preferred over the others. These commands allow equivalent code snippets for other Qt language bindings to be substituted for the C++ snippets in the documentation.</db:para>
</db:note>
<db:anchor xml:id="code-command"/>
<db:section xml:id="code">
<db:title>\code</db:title>
<db:para>The \code and \endcode commands enclose a snippet of source code.</db:para>
<db:note>
<db:para>The <db:link xlink:href="04-qdoc-commands-textmarkup.xml#c-command">\c</db:link> command can be used for short code fragments within a sentence. The \code command is for longer code snippets. It renders the code verbatim in a separate paragraph in a html &lt;pre&gt; element, and parses the enclosed snippet, creating links to any known types in the code.</db:para>
</db:note>
<db:para>For documenting command-line instructions, shell scripts, or any content that is not in a Qt language recognized by QDoc, use <db:link xlink:href="06-qdoc-commands-includecodeinline.xml#badcode-command">\badcode</db:link> instead.</db:para>
<db:para>When processing any of the \code, <db:link xlink:href="06-qdoc-commands-includecodeinline.xml#newcode-command">\newcode</db:link> or <db:link xlink:href="06-qdoc-commands-includecodeinline.xml#oldcode-command">\oldcode</db:link> commands, QDoc removes all indentation that is common for the verbatim code blocks within a /*! ... */ comment before it adds the standard indentation.</db:para>
<db:note>
<db:para>This doesn't apply to externally quoted code using the <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#quotefromfile-command">\quotefromfile</db:link> or <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#quotefile-command">\quotefile</db:link> command.</db:para>
</db:note>
<db:programlisting language="cpp">/ *!
    \code
        #include &amp;lt;QApplication&amp;gt;
        #include &amp;lt;QPushButton&amp;gt;

        int main(int argc, char *argv[])
        {
            ...
        }
    \ endcode
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QPushButton&amp;gt;

int main(int argc, char *argv[])
{
    ...
}
</db:programlisting>
<db:para>Other QDoc commands are disabled within \code... \endcode, and the special character '\' is accepted and rendered like the rest of the code, unless it is followed by a digit and parameters were passed to \code.</db:para>
<db:section xml:id="code-snippet-parameters">
<db:title>Code snippet parameters</db:title>
<db:para>Since QDoc version 5.12, \code command accepts also optional parameters. Parameters are useful for injecting simple strings into the code snippet. To inject a string to a specific location in the snippet, add a backslash followed by a digit (1..8). The digits correspond with the order of the argument list, where arguments are separated by spaces.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">/ *!
\code * hello
/\1 \2 \1/
\ endcode
* /
</db:programlisting>
<db:para>For the above snippet, QDoc renders the word <db:emphasis>hello</db:emphasis> enclosed in a C-style comment.</db:para>
</db:section>
<db:section xml:id="including-code-from-external-files">
<db:title>Including code from external files</db:title>
<db:para>To include code snippets from an external file, use the <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#snippet-command">\snippet</db:link> and <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#codeline-command">\codeline</db:link> commands.</db:para>
<db:para>See also <db:link xlink:href="04-qdoc-commands-textmarkup.xml#c-command">\c</db:link>, <db:link xlink:href="06-qdoc-commands-includecodeinline.xml#badcode-command">\badcode</db:link>, <db:link xlink:href="07-0-qdoc-commands-includingexternalcode.xml#quotefromfile-command">\quotefromfile</db:link>, <db:link xlink:href="06-qdoc-commands-includecodeinline.xml#newcode-command">\newcode</db:link>, and <db:link xlink:href="06-qdoc-commands-includecodeinline.xml#oldcode-command">\oldcode</db:link>.</db:para>
<db:anchor xml:id="badcode-command"/>
</db:section>
</db:section>
<db:section xml:id="badcode">
<db:title>\badcode</db:title>
<db:para>Similar to <db:link xlink:href="06-qdoc-commands-includecodeinline.xml#code-command">\code</db:link>, \badcode and \endcode commands enclose content that is rendered verbatim in a separate paragraph, but no parsing or automatic link creation is performed. Instead, the content is treated as plain text.</db:para>
<db:para>Substitute \code with this command when documenting command-line instructions, shell scripts or any other content that is not in a Qt language, but should still be styled similarly to a \code paragraph.</db:para>
<db:para>Like \code, \badcode accepts also optional parameters.</db:para>
<db:anchor xml:id="newcode-command"/>
</db:section>
<db:section xml:id="newcode">
<db:title>\newcode</db:title>
<db:para>The \newcode, \oldcode, and \endcode commands enable you to show how to port a snippet of code to a new version of an API.</db:para>
<db:para>The \newcode command and its companion the \oldcode command are a convenience combination of the <db:link xlink:href="06-qdoc-commands-includecodeinline.xml#code-command">\code</db:link> commands: this combination provides a text relating the two code snippets to each other.</db:para>
<db:para>The \newcode command requires a preceding \oldcode statement.</db:para>
<db:para>Like the <db:link xlink:href="06-qdoc-commands-includecodeinline.xml#code-command">\code</db:link> command, the \newcode command renders its code on a new line in the documentation using a monospace font and the standard indentation.</db:para>
<db:programlisting language="cpp">/ *!
    \oldcode
        if (printer-&amp;gt;setup(parent))
            ...
    \newcode
        QPrintDialog dialog(printer, parent);
            if (dialog.exec())
                ...
    \ endcode
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>oldcode</db:code></db:emphasis>if (printer-&gt;setup(parent)) ... <db:emphasis role="bold">&lt;Unknown command&gt;<db:code>newcode</db:code></db:emphasis> <db:link xlink:href="qprintdialog.xml">QPrintDialog</db:link> dialog(printer, parent); if (dialog.exec()) ...</db:para>
</db:blockquote>
<db:para>Other QDoc commands are disabled within \oldcode ... \endcode, and the '\' character doesn't need to be escaped.</db:para>
<db:anchor xml:id="oldcode-command"/>
</db:section>
<db:section xml:id="oldcode">
<db:title>\oldcode</db:title>
<db:para>The \oldcode command requires a corresponding \newcode statement; otherwise QDoc fails to parse the command and emits a warning.</db:para>
<db:para>See also <db:link xlink:href="06-qdoc-commands-includecodeinline.xml#newcode-command">\newcode</db:link>.</db:para>
<db:anchor xml:id="qml-command"/>
</db:section>
<db:section xml:id="qml">
<db:title>\qml</db:title>
<db:para>The \qml and \endqml commands enclose a snippet of QML source code.</db:para>
<db:programlisting language="cpp">/ *!
    \qml
        import QtQuick 2.0

        Row {
            Rectangle {
                width: 100; height: 100
                color: &quot;blue&quot;
                transform: Translate { y: 20 }
            }
            Rectangle {
                width: 100; height: 100
                color: &quot;red&quot;
                transform: Translate { y: -20 }
            }
        }
    \endqml
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Row {
    Rectangle {
        width: 100; height: 100
        color: &quot;blue&quot;
        transform: Translate { y: 20 }
    }
    Rectangle {
        width: 100; height: 100
        color: &quot;red&quot;
        transform: Translate { y: -20 }
    }
}
</db:programlisting>
<db:para>Like the <db:link xlink:href="06-qdoc-commands-includecodeinline.xml#code-command">\code</db:link> command, \qml accepts optional parameters.</db:para>
</db:section>
</db:article>
