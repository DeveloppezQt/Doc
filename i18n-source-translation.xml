<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Writing Source Code for Translation</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="internationalization.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Internationalization with Qt"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="localization.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Localizing Applications"/></db:extendedlink>
<db:abstract>
<db:para>Writing source code that enables the localization of applications.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Write QML and Qt C++ source code in a way that enables you to localize applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#mark-strings-for-translation">Mark Strings for Translation</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#use-parameters-instead-of-concatenating-strings">Use Parameters Instead of Concatenating Strings</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#handle-plural-forms">Handle Plural Forms</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#use-regional-number-settings">Use Regional Number Settings</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#internationalize-date-time-and-currency">Internationalize Date, Time, and Currency</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#mark-translatable-data-text-strings">Mark Translatable Data Text Strings</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#add-comments-for-translators">Add Comments for Translators</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#disambiguate-identical-text">Disambiguate Identical Text</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#make-keyboard-shortcuts-translatable">Make Keyboard Shortcuts Translatable</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#use-locale-to-extend-localization-features">Use Locale to Extend Localization Features</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#enable-translation">Enable Translation</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#prepare-for-dynamic-language-changes">Prepare for Dynamic Language Changes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When developing C++ applications, see also <db:link xlink:href="i18n-source-translation.xml#additional-considerations-for-c-code">Additional Considerations for C++ Code</db:link>.</db:para>
<db:section xml:id="mark-strings-for-translation">
<db:title>Mark Strings for Translation</db:title>
<db:para>Most of the text that must be translated in an application consists of either single words or short phrases. These typically appear as window titles, menu items, tooltips, and labels to buttons, check boxes, and radio buttons.</db:para>
<db:para>Qt minimizes the performance cost of using translations by translating the phrases for each window as they are created. In most applications, the main window is created just once. Dialogs are often created once and then shown and hidden as required. Once the initial translation has taken place, there is no further runtime overhead for the translated windows. Only those windows that are created, destroyed and subsequently created will have a translation performance cost.</db:para>
<db:para>You can create applications that switch language at runtime, but it requires an effort and comes with a runtime performance cost.</db:para>
<db:para>Use translation functions to mark user-visible UI text for translation in QML and C++ code. Qt indexes each translatable string by the <db:emphasis>translation context</db:emphasis> it is associated with. The same phrase may occur in more than one context without conflict. If a phrase occurs more than once in a particular context, it is translated only once and the translation is applied to every occurrence within the context.</db:para>
<db:section xml:id="qml-use-qstr">
<db:title>QML: Use qsTr()</db:title>
<db:para>In QML, you can use the following functions to mark user-visible strings for translation in .qml files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#qsTr-method">qsTr</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#qsTranslate-method">qsTranslate</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qt.xml#qsTrId-method">qsTrId</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Usually, you use the qsTr() function:</db:para>
<db:programlisting language="cpp">Text {
    id: txt1
    text: qsTr(&quot;Back&quot;)
}
</db:programlisting>
<db:para>This code makes <db:emphasis>Back</db:emphasis> a key entry in the translation source (TS) files. At runtime, the translation system looks up the keyword <db:emphasis>Back</db:emphasis> and then gets the corresponding translation value for the current system locale. The result is returned to the text property and the UI shows the appropriate translation of <db:emphasis>Back</db:emphasis> for the current locale. If no translation is found, qsTr() returns the original string.</db:para>
<db:para>The translation context can be set for a given file with:</db:para>
<db:programlisting language="cpp">pragma Translator: ChosenContext
</db:programlisting>
<db:para>or</db:para>
<db:programlisting language="cpp">pragma Translator: &quot;Chosen::Context&quot;
</db:programlisting>
<db:para>The context set via qsTranslate() takes precedent over the context set via pragma Translator. In QML, by default, the translation context is the file name.</db:para>
</db:section>
<db:section xml:id="c-use-tr">
<db:title>C++: Use tr()</db:title>
<db:para>In C++, use the <db:link xlink:href="qobject.xml#tr">tr</db:link>() function to mark text as translatable and to display translated text. The translation context is the name of the <db:link xlink:href="qobject.xml">QObject</db:link> subclass the string is used in. To define translation context for new <db:link xlink:href="qobject.xml">QObject</db:link>-based classes, use the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro in each new class definition.</db:para>
<db:para>When tr() is called, it looks up the translatable string using a <db:link xlink:href="qtranslator.xml">QTranslator</db:link> object, which you must install on the application object, as described in <db:link xlink:href="i18n-source-translation.xml#enable-translation">Enable Translation</db:link>.</db:para>
<db:para>For example, assuming the LoginWidget is a subclass of <db:link xlink:href="qwidget.xml">QWidget</db:link>:</db:para>
<db:programlisting language="cpp">LoginWidget::LoginWidget()
{
    QLabel *label = new QLabel(tr(&quot;Password:&quot;));
    ...
}
</db:programlisting>
<db:para>This accounts for 99% of the user-visible strings you're likely to write. For information about marking string literals translatable, see <db:link xlink:href="i18n-source-translation.xml#mark-translatable-data-text-strings">Mark Translatable Data Text Strings</db:link>.</db:para>
<db:para>If the quoted text is not in a member function of a <db:link xlink:href="qobject.xml">QObject</db:link> subclass, use either the tr() function of an appropriate class, or the <db:link xlink:href="qcoreapplication.xml#translate">QCoreApplication::translate</db:link>() function directly:</db:para>
<db:programlisting language="cpp">void some_global_function(LoginWidget *logwid)
{
    QLabel *label = new QLabel(
                LoginWidget::tr(&quot;Password:&quot;), logwid);
}

void same_global_function(LoginWidget *logwid)
{
    QLabel *label = new QLabel(
                QCoreApplication::translate(&quot;LoginWidget&quot;, &quot;Password:&quot;), logwid);
}
</db:programlisting>
<db:note>
<db:para>If you disable the const char * to <db:link xlink:href="qstring.xml">QString</db:link> automatic conversion by compiling your application with the macro QT_NO_CAST_FROM_ASCII defined, you will most likely catch any strings you are missing. See <db:link xlink:href="qstring.xml#fromUtf8">QString::fromUtf8</db:link>() and <db:link xlink:href="qstring.xml#fromLatin1">QString::fromLatin1</db:link>() for more information.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="use-parameters-instead-of-concatenating-strings">
<db:title>Use Parameters Instead of Concatenating Strings</db:title>
<db:para>Different languages arrange words differently in phrases, clauses, and sentences, so do not create strings by concatenating words and data. Instead, use % to insert parameters into strings.</db:para>
<db:para>For example, in the string After processing file %1, file %2 is next in line, %1 and %2 are numbered parameters. At runtime, %1 and %2 are replaced with the first and second file names, respectively. The same numbered parameters must appear in the translation, but not necessarily in the same order. A German translation of the string might reverse the phrases. For example, Datei %2 wird bearbeitet, wenn Datei %1 fertig ist. Both numbered parameters appear in the translation, but in the reverse order.</db:para>
<db:section xml:id="qml-use-arg">
<db:title>QML: Use .arg()</db:title>
<db:para>The following QML snippet has a string with two number parameters %1 and %2. These parameters are inserted with the .arg() functions.</db:para>
<db:programlisting language="cpp">Text {
    text: qsTr(&quot;File %1 of %2&quot;).arg(counter).arg(total)
}
</db:programlisting>
<db:para>%1 refers to the first parameter and %2 refers to the second parameter, so this code produces output like: <db:emphasis>File 2 of 3</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="c-use-qstring-arg">
<db:title>C++: Use QString::arg()</db:title>
<db:para>In C++, use the <db:link xlink:href="qstring.xml#arg">QString::arg</db:link>() functions to substitute parameters:</db:para>
<db:programlisting language="cpp">void FileCopier::showProgress(int done, int total,
                              const QString &amp;amp;currentFile)
{
    label.setText(tr(&quot;%1 of %2 files copied.\nCopying: %3&quot;)
                  .arg(done)
                  .arg(total)
                  .arg(currentFile));
}
</db:programlisting>
<db:para>This code produces output like: <db:emphasis>5 of 10 files copied. Copying: somefile.txt</db:emphasis>.</db:para>
</db:section>
</db:section>
<db:section xml:id="handle-plural-forms">
<db:title>Handle Plural Forms</db:title>
<db:para>You can pass an additional integer parameter (<db:emphasis>n</db:emphasis>) to the translation functions and use a special notation for plural forms (%n) in each translatable string.</db:para>
<db:para>Depending on the value of <db:emphasis>n</db:emphasis>, the translation function returns a different translation, with the correct grammatical number for the target language. Also, any occurrence of %n is replaced with <db:emphasis>n</db:emphasis>'s value.</db:para>
<db:para>For example, the English and French translations of the string %n message(s) saved require different plural forms.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:emphasis>n</db:emphasis></db:para>
</db:th>
<db:th>
<db:para>No Translation</db:para>
</db:th>
<db:th>
<db:para>French</db:para>
</db:th>
<db:th>
<db:para>English</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>&quot;0 message(s) saved&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;0 message sauvegardé&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;0 message<db:emphasis role="bold">s</db:emphasis> saved&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>&quot;1 message(s) saved&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;1 message sauvegardé&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;1 message saved&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>&quot;2 message(s) saved&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;2 message<db:emphasis role="bold">s</db:emphasis> sauvegardé<db:emphasis role="bold">s</db:emphasis>&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;2 message<db:emphasis role="bold">s</db:emphasis> saved&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>37</db:para>
</db:td>
<db:td>
<db:para>&quot;37 message(s) saved&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;37 message<db:emphasis role="bold">s</db:emphasis> sauvegardé<db:emphasis role="bold">s</db:emphasis>&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;37 message<db:emphasis role="bold">s</db:emphasis> saved&quot;</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This idiom also works with target languages that have several plural forms, such as a <db:emphasis>dual</db:emphasis> form. In addition, the idiom handles the <db:emphasis>n</db:emphasis> == 0 case correctly for languages such as French that require the singular.</db:para>
<db:para>For a summary of the rules that <db:emphasis>Qt Linguist</db:emphasis> and lrelease use to translate strings that contain plural forms, see <db:link xlink:href="i18n-plural-rules.xml">Translation Rules for Plural Forms</db:link>.</db:para>
<db:para>To handle plural forms in the native language, load a TS file for this language, too. Use the lupdate tool -pluralonly command line option, to create TS files that contain only entries with plural forms.</db:para>
<db:para>Alternatively, you can use the lconvert tool's -pluralonly command line option to remove all non-plural forms from an existing TS file.</db:para>
<db:section xml:id="qml-example">
<db:title>QML Example</db:title>
<db:para>The following QML code snippet translates the source text into the correct plural form and replaces %n with the value of total:</db:para>
<db:programlisting language="cpp">Text {
    text: qsTr(&quot;%n message(s) saved&quot;, &quot;&quot;, total)
}
</db:programlisting>
</db:section>
<db:section xml:id="c-example">
<db:title>C++ Example</db:title>
<db:para>The following C++ code snippet replaces %n with the value that the count() function returns:</db:para>
<db:programlisting language="cpp">int n = messages.count();
showMessage(tr(&quot;%n message(s) saved&quot;, &quot;&quot;, n));
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="use-regional-number-settings">
<db:title>Use Regional Number Settings</db:title>
<db:para>If you include the %L modifier when you specify a parameter, the number is localized according to the current regional settings. The conversion uses the default locale if you set it or the system-wide locale, otherwise.</db:para>
<db:section xml:id="qml-use-l">
<db:title>QML: Use %L</db:title>
<db:para>For example, in the following QML snippet, %L1 formats the first parameter according to the number formatting conventions of the currently selected locale (geographical region):</db:para>
<db:programlisting language="cpp">Text {
    text: qsTr(&quot;%L1&quot;).arg(total)
}
</db:programlisting>
<db:para>If total is the number <db:emphasis>4321.56</db:emphasis>, with English regional settings (locale) the output is <db:emphasis>4,321.56</db:emphasis>, whereas with German regional settings it is <db:emphasis>4.321,56</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="c-use-ln">
<db:title>C++: Use %Ln</db:title>
<db:para>In C++, you can use %Ln to produce a localized representation of n. Use <db:link xlink:href="qlocale.xml#setDefault">QLocale::setDefault</db:link>() to set the default locale.</db:para>
</db:section>
</db:section>
<db:section xml:id="internationalize-date-time-and-currency">
<db:title>Internationalize Date, Time, and Currency</db:title>
<db:para>Present date, time, and currency using the locally preferred formats.</db:para>
<db:section xml:id="qml-use-qtqml-functions">
<db:title>QML: Use QtQml Functions</db:title>
<db:para>QML does not have special in-string modifiers for formatting dates and times. Instead, you need to query the current locale (geographical region) and use the methods of <db:link xlink:href="qml-qtqml-date.xml">Date</db:link> to format the string.</db:para>
<db:para>Qt.locale() returns a <db:link xlink:href="qml-qtqml-locale.xml">Locale</db:link> object which contains information about the locale. In particular, the <db:link xlink:href="qml-qtqml-locale.xml#name-prop">Locale.name</db:link> property contains the language and country of the current locale. You can use the value as is or parse it to determine the appropriate content for the current locale.</db:para>
<db:para>The following snippet gets the current date and time with Date(), then converts that to a string for the current locale. Then it inserts the date string into the %1 parameter for the appropriate translation.</db:para>
<db:programlisting language="cpp">Text {
    text: qsTr(&quot;Date %1&quot;).arg(Date().toLocaleString(Qt.locale()))
}
</db:programlisting>
<db:para>To localize currency numbers, use the <db:link xlink:href="qml-qtqml-number.xml">Number</db:link> type. It has similar functions as the Date type for converting numbers into localized currency strings.</db:para>
</db:section>
<db:section xml:id="c-use-qlocale-class">
<db:title>C++: Use QLocale Class</db:title>
<db:para>In C++, use <db:link xlink:href="qlocale.xml#timeFormat">QLocale::timeFormat</db:link>() or <db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>(<db:link xlink:href="qtime.xml">QTime</db:link>) or toString(QDate):</db:para>
<db:programlisting language="cpp">QLabel *label = new QLabel(this);
label-&amp;gt;setText(tr(&quot;Date %1&quot;).arg(QLocale().toString(QDate::currentDate()));
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="mark-translatable-data-text-strings">
<db:title>Mark Translatable Data Text Strings</db:title>
<db:para>Use _NoOp functions (in QML) and _NOOP macros (in C++) to mark translatable string literals for extraction by the lupdate tool.</db:para>
<db:section xml:id="qml-use-noop-functions">
<db:title>QML: Use _NoOp Functions</db:title>
<db:para>In QML, use the following functions to mark translatable string literals:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="">qsTrNoOp()</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">qsTranslateNoOp()</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">qsTrIdNoOp()</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the user changes the system language without a reboot, depending on the system, the strings in arrays and list models and other data structures might not be refreshed automatically. To force the texts to be refreshed when they are displayed in the UI, you need to declare the strings with the qsTrNoOp() function. Then, when you populate the objects for display, you need to explicitly retrieve the translation for each text.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">ListModel {
    id: myListModel

    ListElement {
        //: Capital city of Finland
        name: qsTrNoOp(&quot;Helsinki&quot;)
    }
}

...

Text {
    text: qsTr(myListModel.get(0).name)
    // Get the translation of the name property in element 0
}
</db:programlisting>
</db:section>
<db:section xml:id="c-use-noop-macros">
<db:title>C++: Use _NOOP Macros</db:title>
<db:para>For translatable text completely outside a function, use the <db:link xlink:href="qttranslation-proxy.xml#QT_TR_NOOP">QT_TR_NOOP</db:link>() and <db:link xlink:href="qttranslation-proxy.xml#QT_TRANSLATE_NOOP">QT_TRANSLATE_NOOP</db:link>() macros that expand to just the text without the context.</db:para>
<db:para>An example of QT_TR_NOOP():</db:para>
<db:programlisting language="cpp">QString FriendlyConversation::greeting(int type)
{
    static const char *greeting_strings[] = {
        QT_TR_NOOP(&quot;Hello&quot;),
        QT_TR_NOOP(&quot;Goodbye&quot;)
    };
    return tr(greeting_strings[type]);
}
</db:programlisting>
<db:para>An example of QT_TRANSLATE_NOOP():</db:para>
<db:programlisting language="cpp">static const char *greeting_strings[] = {
    QT_TRANSLATE_NOOP(&quot;FriendlyConversation&quot;, &quot;Hello&quot;),
    QT_TRANSLATE_NOOP(&quot;FriendlyConversation&quot;, &quot;Goodbye&quot;)
};

QString FriendlyConversation::greeting(int type)
{
    return tr(greeting_strings[type]);
}

QString global_greeting(int type)
{
    return QCoreApplication::translate(&quot;FriendlyConversation&quot;,
                                       greeting_strings[type]);
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="add-comments-for-translators">
<db:title>Add Comments for Translators</db:title>
<db:para>You can add comments in the source code before a string you mark as translatable to clarify its purpose. The comments are included in the TS files that you deliver to the translator.</db:para>
<db:note>
<db:para>The TS files are XML files with the source texts and a place for the translated text. The updated TS files are converted into binary translation files and included as part of the final application.</db:para>
</db:note>
<db:section xml:id="qml-use-and">
<db:title>QML: Use //: and //~</db:title>
<db:para>In the following code snippet, the text on the //: line is the main comment for the translator.</db:para>
<db:para>The text on the //~ line is optional extra information. The first word of the text is used as an additional identifier in the XML element in the TS file so make sure the first word is not part of the sentence. For example, the comment <db:emphasis>Context Not related to back-stepping</db:emphasis> is converted to &lt;extra-Context&gt;Not related to back-stepping in the TS file.</db:para>
<db:programlisting language="cpp">Text {
    id: txt1;
    // This UI string is only used here
    //: The back of the object, not the front
    //~ Context Not related to back-stepping
    text: qsTr(&quot;Back&quot;);
}
</db:programlisting>
</db:section>
<db:section xml:id="c-use-comment-characters">
<db:title>C++: Use Comment Characters</db:title>
<db:para>To add comments in C++, annotate the tr() calls in your code with comments of the form //: or by marking the beginning and end of the comment.</db:para>
<db:para>In the following examples, the comments are associated with the strings passed to tr() in the context of each call:</db:para>
<db:programlisting language="cpp">//: This name refers to a host name.
hostNameLabel-&amp;gt;setText(tr(&quot;Name:&quot;));

/*: This text refers to a C++ code example. */
QString example = tr(&quot;Example&quot;);
</db:programlisting>
<db:para>To add optional comments, use:</db:para>
<db:programlisting language="cpp">//~ &amp;lt;field name&amp;gt; &amp;lt;field contents&amp;gt;
</db:programlisting>
<db:para>The field name should consist of a domain prefix (possibly the conventional file extension of the file format the field is inspired by), a hyphen, and the actual field name in underscore-delimited notation. For storage in TS files, the field name together with the prefix extra- will form an XML element name. The field contents will be XML-escaped, but otherwise appear verbatim as the element's contents. You can add any number of unique fields to each message.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">//: This is a comment for the translator.
//= qtn_foo_bar
//~ loc-layout_id foo_dialog
//~ loc-blank False
//~ magic-stuff This might mean something magic.
QString text = MyMagicClass::tr(&quot;Sim sala bim.&quot;);
</db:programlisting>
<db:para>In C++, you use an equals sign to add a unique identifier:</db:para>
<db:programlisting language="cpp">//= &amp;lt;id&amp;gt;
</db:programlisting>
<db:para>You can use the keyword <db:emphasis>TRANSLATOR</db:emphasis> for translator comments. Metadata appearing right in front of the TRANSLATOR keyword applies to the whole TS file.</db:para>
</db:section>
</db:section>
<db:section xml:id="disambiguate-identical-text">
<db:title>Disambiguate Identical Text</db:title>
<db:para>The translation system consolidates the UI text strings into unique items to avoid having to translate the same text multiple times. However, a text might look identical to another text but have a different meaning. For example, in English, <db:emphasis>back</db:emphasis> means both a step backward and the part of an object opposite to the front. You need to tell the translation system about these two separate meanings, so the translator can create two separate translations.</db:para>
<db:section xml:id="qml-add-a-disambiguator-to-qstr">
<db:title>QML: Add a Disambiguator to qsTr()</db:title>
<db:para>In QML, add a disambiguating string as the second parameter of the qsTr() function.</db:para>
<db:para>In the following code snippet, the ID not front differentiates this <db:emphasis>Back</db:emphasis> text from the backstepping <db:emphasis>Back</db:emphasis> text:</db:para>
<db:programlisting language="cpp">Text {
    id: txt1
    // This UI string is used only here
    //: The back of the object, not the front
    //~ Context Not related to back-stepping
    text: qsTr(&quot;Back&quot;, &quot;not front&quot;)
}
</db:programlisting>
</db:section>
<db:section xml:id="c-add-a-disambiguator-to-tr">
<db:title>C++: Add a Disambiguator to tr()</db:title>
<db:para>In C++, pass a disambiguating string in the call to <db:link xlink:href="qobject.xml#tr">tr</db:link>().</db:para>
<db:para>In the following code snippet, the ID recipient differentiates the name of the recipient from that of the sender:</db:para>
<db:programlisting language="cpp">MyWindow::MyWindow()
{
    QLabel *senderLabel = new QLabel(tr(&quot;Name:&quot;));
    QLabel *recipientLabel = new QLabel(tr(&quot;Name:&quot;, &quot;recipient&quot;));
    ...
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="make-keyboard-shortcuts-translatable">
<db:title>Make Keyboard Shortcuts Translatable</db:title>
<db:para>In its most common form, a keyboard shortcut describes a combination of keys that you press to perform some action. For <db:link xlink:href="qkeysequence.xml#standard-shortcuts">standard shortcuts</db:link>, use a standard key to request the platform-specific key sequence associated with each shortcut.</db:para>
<db:para>For custom shortcuts, use human-readable strings, such as <db:emphasis role="bold">Ctrl+Q</db:emphasis> or <db:emphasis role="bold">Alt+F</db:emphasis>. You can translate them into the appropriate shortcuts for the speakers of different languages.</db:para>
<db:para>If you hard-code keyboard shortcuts in your application, translators cannot override them.</db:para>
<db:para>When you use keyboard shortcuts in menu item and button text, a <db:emphasis>mnemonic</db:emphasis> character (marked by underlining) indicates that pressing <db:emphasis role="bold">Alt</db:emphasis> or <db:emphasis role="bold">Ctrl</db:emphasis> with the underlined character performs the same action as clicking the menu item or pressing the button.</db:para>
<db:para>For example, applications often use <db:emphasis>F</db:emphasis> as the mnemonic character in the <db:guilabel>File</db:guilabel> menu, so you can either click the menu item or press <db:emphasis role="bold">Alt+F</db:emphasis> to open the menu. To define the mnemonic character in the translatable string (&quot;File&quot;), prefix it with an ampersand: &quot;&amp;File&quot;. The translation for the string should also have an ampersand in it, preferably in front of the same character.</db:para>
<db:section xml:id="qml-example">
<db:title>QML Example</db:title>
<db:para>In QML:</db:para>
<db:programlisting language="cpp" role="bad">Menu {
    id: fileMenu
    title: qsTr(&quot;&amp;amp;File&quot;)

    MenuItem {
        objectName: &quot;quitMenuItem&quot;
        text: qsTr(&quot;E&amp;amp;xit&quot;)
        onTriggered: Qt.quit()
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="c-use-the-qkeysequence-class">
<db:title>C++: Use the QKeySequence Class</db:title>
<db:para>In C++, use <db:link xlink:href="qaction.xml">QAction</db:link> and <db:link xlink:href="qkeysequence.xml">QKeySequence</db:link> objects to specify the keyboard shortcuts that trigger actions:</db:para>
<db:programlisting language="cpp">exitAct = new QAction(tr(&quot;E&amp;amp;xit&quot;), this);
exitAct-&amp;gt;setShortcuts(QKeySequence::Quit);
</db:programlisting>
<db:para>The translations of keyboard shortcuts are associated with the <db:link xlink:href="qshortcut.xml">QShortcut</db:link> context.</db:para>
</db:section>
</db:section>
<db:section xml:id="use-locale-to-extend-localization-features">
<db:title>Use Locale to Extend Localization Features</db:title>
<db:para>You might find different graphics or audio more suitable for different geographical regions.</db:para>
<db:para>Generally, try to avoid localizing images. Create icons that are globally appropriate, rather than relying on local puns or stretched metaphors. However, you might have to reverse images of left and right pointing arrows for Arabic and Hebrew locales.</db:para>
<db:para>Locale is one of the default file selectors, so you can use file selection to display different images that you deliver as resources depending on the system locale.</db:para>
<db:para>The QML and C++ code examples in the following sections assume that you deliver the following files in the application resources and use language and country codes as the subfolder names:</db:para>
<db:programlisting language="cpp" role="bad">images
├── language-icon.png
├── +en_GB
│   └── language-icon.png
└── +fi_FI
    └── language-icon.png
</db:programlisting>
<db:section xml:id="qml-set-image-source">
<db:title>QML: Set Image Source</db:title>
<db:para>The following QML code snippet shows how to select an icon source image according to the current locale:</db:para>
<db:programlisting language="cpp">icon.source: &quot;qrc:/images/language-icon.png&quot;
</db:programlisting>
</db:section>
<db:section xml:id="c-use-qfileselector">
<db:title>C++: Use QFileSelector</db:title>
<db:para>The following C++ code snippet uses <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> to pick a language icon from the images folder according to the system locale:</db:para>
<db:programlisting language="cpp">const QFileSelector selector;
const QIcon languageIcon(selector.select(&quot;:/images/language-icon.png&quot;));
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="enable-translation">
<db:title>Enable Translation</db:title>
<db:para>TS file names must contain ISO language and country codes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>language</db:emphasis> is an <db:link xlink:href="https://www.iso.org/iso-639-language-codes.html">ISO-639</db:link> language code in lowercase.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>country</db:emphasis> is an <db:link xlink:href="https://www.iso.org/iso-3166-country-codes.html">ISO-3166</db:link> two-letter country code in uppercase.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, qml_de.ts sets the target language to German, and qml_de_CH.ts sets the target language to German and the target country to Switzerland. The lrelease tool generates QM files called qml_de.qm and qml_de_CH.qm that the application loads depending on the system locale.</db:para>
<db:section xml:id="qml-use-qqmlapplicationengine">
<db:title>QML: Use QQmlApplicationEngine</db:title>
<db:para>In QML, use <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> to automatically load translation files from a subdirectory called i18n in the directory that contains the main QML file. The translation file names must have the prefix qml_. For example, qml_en_US.qm.</db:para>
<db:para>Applications reload translations when the <db:link xlink:href="qjsengine.xml#uiLanguage-prop">QJSEngine::uiLanguage</db:link> or <db:link xlink:href="qml-qtqml-qt.xml#uiLanguage-prop">Qt.uiLanguage</db:link> property value changes.</db:para>
</db:section>
<db:section xml:id="c-use-qtranslator">
<db:title>C++: Use QTranslator</db:title>
<db:para>In C++, the TS file names must contain the application name. For example, app_de_DE.ts.</db:para>
<db:para>Typically, your Qt C++ application's main() function will look like this:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    QTranslator myappTranslator;
    if (myappTranslator.load(QLocale::system(), u&quot;myapp&quot;_s, u&quot;_&quot;_s, u&quot;:/i18n&quot;_s))
        app.installTranslator(&amp;amp;myappTranslator);

    return app.exec();
}
</db:programlisting>
<db:para>For a translation-aware application, you create a <db:link xlink:href="qtranslator.xml">QTranslator</db:link> object, <db:link xlink:href="qtranslator.xml#load">load</db:link> a translation according to the user's UI display locale at runtime, and install the translator object into the application.</db:para>
</db:section>
</db:section>
<db:section xml:id="prepare-for-dynamic-language-changes">
<db:title>Prepare for Dynamic Language Changes</db:title>
<db:para>Both Qt Widgets and Qt Quick use <db:link xlink:href="eventsandfilters.xml">Qt's event system</db:link> to inform classes about translation changes.</db:para>
<db:para><db:link xlink:href="qevent.xml#Type-enum">LanguageChange</db:link> events are posted when you use the <db:link xlink:href="qcoreapplication.xml#installTranslator">QCoreApplication::installTranslator</db:link>() function to install a new translation. Other application components can also force widgets or QML types derived from the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> type to update themselves by posting LanguageChange events to them.</db:para>
<db:para>By default, LanguageChange events are propagated to all top-level windows, and from there they're propagated through the entire tree of widgets or QML types derived from Item.</db:para>
<db:section xml:id="qt-widgets-override-changeevent">
<db:title>Qt Widgets: Override changeEvent</db:title>
<db:para>The default event handler for <db:link xlink:href="qwidget.xml">QWidget</db:link> subclasses responds to the <db:link xlink:href="qevent.xml#Type-enum">QEvent::LanguageChange</db:link> event and calls the changeEvent() function when necessary.</db:para>
<db:para>To make Qt widgets aware of changes to the installed <db:link xlink:href="qtranslator.xml">QTranslator</db:link> objects, reimplement the widget's <db:link xlink:href="qwidget.xml#changeEvent">changeEvent</db:link>() function to check whether the event is a <db:link xlink:href="qevent.xml#Type-enum">LanguageChange</db:link> event and update the text displayed by widgets using the <db:link xlink:href="qobject.xml#tr">tr</db:link>() function. For example:</db:para>
<db:programlisting language="cpp">void MyWidget::changeEvent(QEvent *event)
{
    if (event-&amp;gt;type() == QEvent::LanguageChange) {
        titleLabel-&amp;gt;setText(tr(&quot;Document Title&quot;));
        ...
        okPushButton-&amp;gt;setText(tr(&quot;&amp;amp;OK&quot;));
    } else
        QWidget::changeEvent(event);
}
</db:programlisting>
<db:para>When using <db:emphasis>Qt Designer</db:emphasis> UI files (.ui) and uic, you can read the new translation files and call ui.retranslateUi(this) directly:</db:para>
<db:programlisting language="cpp">void MyWidget::changeEvent(QEvent *event)
{
    if (event-&amp;gt;type() == QEvent::LanguageChange) {
        ui.retranslateUi(this);
    } else
        QWidget::changeEvent(event);
}
</db:programlisting>
<db:para>To pass on other change events, call the default implementation of the function.</db:para>
<db:para>The list of installed translators might change in response to a <db:link xlink:href="qevent.xml#Type-enum">LocaleChange</db:link> event, or the application might provide a UI that allows the user to change the current application language.</db:para>
</db:section>
<db:section xml:id="qml-override-event-for-types-derived-from-item">
<db:title>QML: Override event for Types Derived from Item</db:title>
<db:para>For plain QML applications without any custom C++ registered types, <db:link xlink:href="i18n-source-translation.xml#qml-use-qqmlapplicationengine">using QQmlApplicationEngine</db:link> is enough to trigger an update of all translation bindings.</db:para>
<db:para>However, if you registered a type derived from <db:link xlink:href="qquickitem.xml">QQuickItem</db:link>, and one of its properties exposes translated text (or is otherwise language dependent), override its <db:link xlink:href="qobject.xml#event">event method</db:link> and emit the property's change signal in it (or call <db:link xlink:href="qobjectbindableproperty.xml#notify">notify</db:link> in case of bindable properties). For example:</db:para>
<db:programlisting language="cpp">class MyItem : public QQuickItem
{
    Q_OJBECT
    QML_ELEMENT

    Q_PROPERTY(QString greeting READ greeting NOTIFY greetingChanged)

public signals:
    void greetingChanged();
public:
    QString greeting() const
    {
        return tr(&quot;Hello World!&quot;);
    }

    bool event(QEvent *ev) override
    {
        if (ev-&amp;gt;type() == QEvent::LanguageChange)
            emit greetingChanged();
        return QQuickItem::event(ev);
    }
};
</db:programlisting>
<db:para>This ensures that any binding in QML in which the property is used is reevaluated and takes the language change into account.</db:para>
</db:section>
<db:section xml:id="generic-qobject-derived-classes-use-event-filters">
<db:title>Generic QObject-derived Classes: Use Event Filters</db:title>
<db:para>Some classes are neither derived from <db:link xlink:href="qwidget.xml">QWidget</db:link> nor from <db:link xlink:href="qquickitem.xml">QQuickItem</db:link>, but might still need to handle language change events. In that case, install <db:link xlink:href="eventsandfilters.xml#event-filters">an event filter</db:link> on <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>.</db:para>
<db:programlisting language="cpp">class CustomObject : public QObject
{
    Q_OBJECT

public:
    QList&amp;lt;QQuickItem *&amp;gt; managedItems;

    CustomObject(QOject *parent = nullptr) : QObject(parent)
    {
        QCoreApplication::instance()-&amp;gt;installEventFilter(this);
    }

    bool eventFilter(QObject *obj, QEvent *ev) override
    {
        if (obj == QCoreApplication::instance() &amp;amp;&amp;amp; ev-&amp;gt;type() == QEvent::LanguageChange) {
            for (auto item : std::as_const(managedItems))
                QCoreApplication::sendEvent(item, ev);
            // do any further work on reaction, e.g. emit changed signals
        }
        return false;
    }
};
</db:programlisting>
<db:para>This might be necessary when translated strings are provided by the class that later get displayed in a user interface (for example, a custom <db:link xlink:href="qabstractitemmodel.xml">item model</db:link>), or when the class acts as a container of Widgets or Quick Items, and is therefore responsible for forwarding the event to them.</db:para>
</db:section>
</db:section>
<db:section xml:id="additional-considerations-for-c-code">
<db:title>Additional Considerations for C++ Code</db:title>
<db:para>The following sections contain more information about using the Qt C++ classes and functions in translatable applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#use-qstring-for-all-user-visible-text">Use QString for All User-Visible Text</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#define-a-translation-context">Define a Translation Context</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#translate-non-qt-classes">Translate Non-Qt Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="i18n-source-translation.xml#translate-text-that-is-outside-of-a-qobject-subclass">Translate Text That is Outside of a QObject Subclass</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="use-qstring-for-all-user-visible-text">
<db:title>Use QString for All User-Visible Text</db:title>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> uses the <db:link xlink:href="unicode.xml">Unicode</db:link> encoding internally, and therefore you can use familiar text processing operations to transparently process all languages in the world. Also, since all Qt functions that present text to the user take a <db:link xlink:href="qstring.xml">QString</db:link> object as a parameter, there is no char * to <db:link xlink:href="qstring.xml">QString</db:link> conversion overhead.</db:para>
</db:section>
<db:section xml:id="define-a-translation-context">
<db:title>Define a Translation Context</db:title>
<db:para>The translation context for <db:link xlink:href="qobject.xml">QObject</db:link> and each <db:link xlink:href="qobject.xml">QObject</db:link> subclass is the class name itself. If you subclass <db:link xlink:href="qobject.xml">QObject</db:link>, use the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro in the class definition to override the translation context. The macro sets the context to the name of the subclass.</db:para>
<db:para>For example, the following class definition includes the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro, implementing a new tr() function that uses the MainWindow context:</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow();
    ...
</db:programlisting>
<db:para>If you do not use <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> in a class definition, the context is inherited from the base class. For example, since all <db:link xlink:href="qobject.xml">QObject</db:link>-based classes in Qt provide a context, a new <db:link xlink:href="qwidget.xml">QWidget</db:link> subclass defined without a <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro uses the QWidget context if you invoke its tr() function.</db:para>
</db:section>
<db:section xml:id="translate-non-qt-classes">
<db:title>Translate Non-Qt Classes</db:title>
<db:para>You must provide extra information for lupdate about strings in classes that do not inherit <db:link xlink:href="qobject.xml">QObject</db:link> or use the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro. To add translation support to a non-Qt class, you can use the <db:link xlink:href="qcoreapplication.xml#Q_DECLARE_TR_FUNCTIONS">Q_DECLARE_TR_FUNCTIONS</db:link>() macro. For example:</db:para>
<db:programlisting language="cpp">class MyClass
{
    Q_DECLARE_TR_FUNCTIONS(MyClass)

public:
    MyClass();
    ...
};
</db:programlisting>
<db:para>This provides the class with <db:link xlink:href="qobject.xml#tr">tr</db:link>() functions that you can use to translate strings associated with the class, and enables lupdate to find translatable strings in the source code.</db:para>
<db:para>Alternatively, you can call the <db:link xlink:href="qcoreapplication.xml#translate">QCoreApplication::translate</db:link>() function with a specific context that lupdate and Qt Linguist recognize.</db:para>
</db:section>
<db:section xml:id="translate-text-that-is-outside-of-a-qobject-subclass">
<db:title>Translate Text That is Outside of a QObject Subclass</db:title>
<db:para>If the quoted text is not in a member function of a <db:link xlink:href="qobject.xml">QObject</db:link> subclass, use either the tr() function of an appropriate class or the <db:link xlink:href="qcoreapplication.xml#translate">QCoreApplication::translate</db:link>() function directly:</db:para>
<db:programlisting language="cpp">void some_global_function(LoginWidget *logwid)
{
    QLabel *label = new QLabel(
            LoginWidget::tr(&quot;Password:&quot;), logwid);
}

void same_global_function(LoginWidget *logwid)
{
    QLabel *label = new QLabel(
            QCoreApplication::translate(&quot;LoginWidget&quot;, &quot;Password:&quot;),
            logwid);
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
