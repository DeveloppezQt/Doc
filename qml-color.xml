<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>color QML Value Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>an ARGB color value. <db:anchor xml:id="colorbasictypedocs"/>
 The <db:code>color</db:code> type refers to an ARGB color value. It can be specified in a number of ways:.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>By a <db:link xlink:href="http://www.w3.org/TR/SVG/types.html#ColorKeywords">SVG color name</db:link>, such as &quot;red&quot;, &quot;green&quot; or &quot;lightsteelblue&quot;.</db:para>
</db:listitem>
<db:listitem>
<db:para>By a hexadecimal triplet or quad in the form <db:code>&quot;#RRGGBB&quot;</db:code> and <db:code>&quot;#AARRGGBB&quot;</db:code> respectively. For example, the color red corresponds to a triplet of <db:code>&quot;#FF0000&quot;</db:code> and a slightly transparent blue to a quad of <db:code>&quot;#800000FF&quot;</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Using the <db:link xlink:href="qml-qtqml-qt.xml#rgba-method">Qt.rgba</db:link>(), <db:link xlink:href="qml-qtqml-qt.xml#hsla-method">Qt.hsla</db:link>(), <db:link xlink:href="qml-qtqml-qt.xml#darker-method">Qt.darker</db:link>(), <db:link xlink:href="qml-qtqml-qt.xml#lighter-method">Qt.lighter</db:link>() or <db:link xlink:href="qml-qtqml-qt.xml#tint-method">Qt.tint</db:link>() functions.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Example:</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-colors.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:programlisting language="qml">Rectangle {
    color: &quot;steelblue&quot;
    width: 40; height: 40
}
Rectangle {
    color: &quot;transparent&quot;
    y: 40; width: 40; height: 40
}
Rectangle {
    color: &quot;#FF0000&quot;
    y: 80; width: 40; height: 40
}
Rectangle {
    color: &quot;#800000FF&quot;
    y: 120; width: 40; height: 40
}
Rectangle {
    color: &quot;#00000000&quot;    // ARGB fully transparent
    y: 160
    width: 40; height: 40
}
</db:programlisting>
<db:para>Additionally, a color type has <db:code>r</db:code>, <db:code>g</db:code>, <db:code>b</db:code> and <db:code>a</db:code> properties that refer to the red, green, blue and alpha values of the color, respectively:</db:para>
<db:programlisting language="qml">Text {
    color: &quot;red&quot;

    // prints &quot;1 0 0 1&quot;
    Component.onCompleted: console.log(color.r, color.g, color.b, color.a)
}
</db:programlisting>
<db:para>To test color values for equality, use the <db:link xlink:href="qml-qtqml-qt.xml#colorEqual-method">Qt.colorEqual</db:link>() function. This allows colors to be accurately compared whether they are in property form or in any of the acceptable string specification forms.</db:para>
<db:para>When integrating with C++, note that any <db:link xlink:href="qcolor.xml">QColor</db:link> value <db:link xlink:href="qtqml-cppintegration-data.xml">passed into QML from C++</db:link> is automatically converted into a <db:code>color</db:code> value, and vice-versa.</db:para>
<db:para>This basic type is provided by the <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> import.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-typesystem-basictypes.xml">QML Basic Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
