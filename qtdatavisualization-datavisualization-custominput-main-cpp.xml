<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Custom Input Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Implementing custom input handler in a widget application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;scatterdatamodifier.h&quot;

#include &amp;lt;QtWidgets/QApplication&amp;gt;
#include &amp;lt;QtWidgets/QWidget&amp;gt;
#include &amp;lt;QtWidgets/QHBoxLayout&amp;gt;
#include &amp;lt;QtWidgets/QVBoxLayout&amp;gt;
#include &amp;lt;QtWidgets/QPushButton&amp;gt;
#include &amp;lt;QtWidgets/QCheckBox&amp;gt;
#include &amp;lt;QtWidgets/QComboBox&amp;gt;
#include &amp;lt;QtWidgets/QLabel&amp;gt;
#include &amp;lt;QtWidgets/QMessageBox&amp;gt;
#include &amp;lt;QtGui/QScreen&amp;gt;
#include &amp;lt;QtGui/QFontDatabase&amp;gt;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);
    Q3DScatter *graph = new Q3DScatter();
    QWidget *container = QWidget::createWindowContainer(graph);

    if (!graph-&amp;gt;hasContext()) {
        QMessageBox msgBox;
        msgBox.setText(&quot;Couldn't initialize the OpenGL context.&quot;);
        msgBox.exec();
        return -1;
    }

    QSize screenSize = graph-&amp;gt;screen()-&amp;gt;size();
    container-&amp;gt;setMinimumSize(QSize(screenSize.width() / 2, screenSize.height() / 1.5));
    container-&amp;gt;setMaximumSize(screenSize);
    container-&amp;gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    container-&amp;gt;setFocusPolicy(Qt::StrongFocus);

    QWidget *widget = new QWidget;
    QHBoxLayout *hLayout = new QHBoxLayout(widget);
    QVBoxLayout *vLayout = new QVBoxLayout();
    hLayout-&amp;gt;addWidget(container, 1);
    hLayout-&amp;gt;addLayout(vLayout);

    widget-&amp;gt;setWindowTitle(QStringLiteral(&quot;Custom Input Handling&quot;));

    QPushButton *cameraButton = new QPushButton(widget);
    cameraButton-&amp;gt;setText(QStringLiteral(&quot;Toggle Camera Animation&quot;));

    QComboBox *shadowQuality = new QComboBox(widget);
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;None&quot;));
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;Low&quot;));
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;Medium&quot;));
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;High&quot;));
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;Low Soft&quot;));
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;Medium Soft&quot;));
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;High Soft&quot;));
    shadowQuality-&amp;gt;setCurrentIndex(2);

    vLayout-&amp;gt;addWidget(cameraButton, 0, Qt::AlignTop);
    vLayout-&amp;gt;addWidget(new QLabel(QStringLiteral(&quot;Adjust shadow quality&quot;)), 0, Qt::AlignTop);
    vLayout-&amp;gt;addWidget(shadowQuality, 1, Qt::AlignTop);

    ScatterDataModifier *modifier = new ScatterDataModifier(graph);

    QObject::connect(cameraButton, &amp;amp;QPushButton::clicked, modifier,
                     &amp;amp;ScatterDataModifier::toggleCameraAnimation);

    QObject::connect(shadowQuality, SIGNAL(currentIndexChanged(int)), modifier,
                     SLOT(changeShadowQuality(int)));

    QObject::connect(modifier, &amp;amp;ScatterDataModifier::shadowQualityChanged, shadowQuality,
                     &amp;amp;QComboBox::setCurrentIndex);

    widget-&amp;gt;show();
    modifier-&amp;gt;start();
    return app.exec();
}

</db:programlisting>
</db:article>
