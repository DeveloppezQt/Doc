<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBufferDataGenerator Class</db:title>
<db:subtitle>Qt3DRender::QBufferDataGenerator</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a mechanism to generate buffer data from a job.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBufferDataGenerator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qabstractfunctor.xml" xlink:role="class">Qt3DRender::QAbstractFunctor</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qt3drender-qbufferdatagenerator.xml">Qt3DRender::QBufferDataGenerator</db:link> should be subclassed to provide a way to fill the data of a <db:link xlink:href="qt3drender-qbuffer.xml">Qt3DRender::QBuffer</db:link>. Such functors are executed at runtime in a Qt 3D job (likely in parallel with many other jobs). When providing a functor you must implement the <db:link xlink:href="qt3drender-qbufferdatagenerator.xml#operator-28-29">operator</db:link>() which will be called to generate the actual data. You must make sure that you have stored copies of anything you might need for it to execute properly. You should also implement the operator==. It will be used to compare with other functors and based on that allow the renderer to decide if a new functor should be executed or not.</db:para>
<db:note>
<db:para>functors are useful when you can build data from a few set of attributes (e.g: building a sphere from a radius property). If you already have access to the buffer data, using Qt3DRender::QBuffer::setData() is likely more efficient.</db:para>
</db:note>
<db:programlisting language="cpp">QByteArray createSphereMeshVertexData(float radius, int rings, int slices)
{
    ...
}

class SphereVertexDataFunctor : public QBufferDataGenerator
{
public:
    SphereVertexDataFunctor(int rings, int slices, float radius)
        : m_rings(rings)
        , m_slices(slices)
        , m_radius(radius)
    {}

    QByteArray operator ()() Q_DECL_OVERRIDE
    {
        return createSphereMeshVertexData(m_radius, m_rings, m_slices);
    }

    bool operator ==(const QBufferDataGenerator &amp;other) const Q_DECL_OVERRIDE
    {
        const SphereVertexDataFunctor *otherFunctor = functor_cast&lt;SphereVertexDataFunctor&gt;(&amp;other);
        if (otherFunctor != nullptr)
            return (otherFunctor-&gt;m_rings == m_rings &amp;&amp;
                    otherFunctor-&gt;m_slices == m_slices &amp;&amp;
                    otherFunctor-&gt;m_radius == m_radius);
        return false;
    }

    QT3D_FUNCTOR(SphereVertexDataFunctor)

private:
    int m_rings;
    int m_slices;
    float m_radius;
};

</db:programlisting>
<db:para>The <db:link xlink:href="qt3drender-qabstractfunctor.xml#QT3D_FUNCTOR">QT3D_FUNCTOR</db:link> macro should be added when subclassing. This allows you to use functor_cast in your comparison operator to make sure that the other functor is of the same type as the one your are trying to compare against.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="operator-28-29">
<db:title>[pure virtual] QByteArray QBufferDataGenerator::operator()()</db:title>
<db:para>Should be implemented to return the buffer data as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> when called.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[pure virtual] bool QBufferDataGenerator::operator==(const Qt3DRender::QBufferDataGenerator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Should be reimplemented to return true when two generators are identical, false otherwise.</db:para>
<db:note>
<db:para>The renderer uses this comparison to decide whether data for a buffer needs to be reuploaded or not when the functor on a <db:link xlink:href="qt3drender-qbuffer.xml">Qt3DRender::QBuffer</db:link> changes.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
