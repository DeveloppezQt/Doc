<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Changes to Qt Network</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Migrate Qt Network to Qt 6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 6 is a result of the conscious effort to make the framework more efficient and easy to use.</db:para>
<db:para>We try to maintain binary and source compatibility for all the public APIs in each release. But some changes were inevitable in an effort to make Qt a better framework.</db:para>
<db:para>In this topic we summarize those changes in Qt Network, and provide guidance to handle them.</db:para>
<db:section xml:id="api-changes">
<db:title>API changes</db:title>
<db:section xml:id="ambiguous-name-overloads">
<db:title>Ambiguous name overloads</db:title>
<db:para>Several ambiguous overloaded functions are removed. The error() signal is replaced by errorOccurred() in <db:link xlink:href="qabstractsocket.xml">QAbstractSocket</db:link> and its heirs (<db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link>, <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link>, <db:link xlink:href="qlocalsocket.xml">QLocalSocket</db:link>, and <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link>), and in <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. Code such as:</db:para>
<db:programlisting language="cpp">connect(socket, qOverload&lt;QAbstractSocket::SocketError&gt;(&amp;QAbstractSocket::error),
        this, &amp;SomeClass::errorSlot);
</db:programlisting>
<db:para>must therefore be changed to:</db:para>
<db:programlisting language="cpp">connect(socket, &amp;QAbstractSocket::errorOccurred, this, &amp;SomeClass::errorSlot);
</db:programlisting>
<db:para>In <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link>, the function that returns a list of errors encountered during the TLS handshake:</db:para>
<db:programlisting language="cpp">QList&lt;QSslError&gt; sslErrors() const;
</db:programlisting>
<db:para>is renamed to sslHandshakeErrors():</db:para>
<db:programlisting language="cpp">const auto tlsErrors = socket.sslHandshakeErrors();
</db:programlisting>
</db:section>
<db:section xml:id="bearer-management-is-removed">
<db:title>Bearer management is removed</db:title>
<db:para>The classes QNetworkConfiguration and QNetworkConfigurationManager are removed in Qt 6. Consequently, the following member functions of <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> are also removed:</db:para>
<db:programlisting language="cpp">void setConfiguration(const QNetworkConfiguration &amp;config);
QNetworkConfiguration configuration() const;
QNetworkConfiguration activeConfiguration() const;
void setNetworkAccessible(NetworkAccessibility accessible);
NetworkAccessibility networkAccessible() const;
void networkSessionConnected();
</db:programlisting>
<db:para><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link>, initially introduced in Qt 6.1, aims to replace some aspects of the bearer management API. It works by providing a unified API which subscribes to changes to the network as notified by the operating system.</db:para>
<db:para><db:link xlink:href="qnetworkinformation.xml#reachability-prop">QNetworkInformation::reachability</db:link>(), introduced in Qt 6.1, replaces the QNetworkAccessManager::networkAccessible() function, while adding more detailed information about the reachability of the network. See its documentation for more details.</db:para>
<db:para>In Qt 6.2 <db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link> gained the ability to detect captive portals.</db:para>
<db:para>In Qt 6.3 <db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link> gained <db:link xlink:href="qnetworkinformation.xml#transportMedium-prop">QNetworkInformation::transportMedium</db:link>() and <db:link xlink:href="qnetworkinformation.xml#isMetered-prop">QNetworkInformation::isMetered</db:link>().</db:para>
</db:section>
<db:section xml:id="deleted-enumerators">
<db:title>Deleted enumerators</db:title>
<db:para>Several enumerators are removed in <db:link xlink:href="qtnetwork-module.xml">QtNetwork</db:link>. This includes constants for no longer supported protocols and functionality:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QSsl::SslV2;</db:para>
</db:listitem>
<db:listitem>
<db:para>QSsl::SslV3;</db:para>
</db:listitem>
<db:listitem>
<db:para>QSsl::TlsV1SslV3;</db:para>
</db:listitem>
<db:listitem>
<db:para>QNetworkRequest::SpdyAllowedAttribute;</db:para>
</db:listitem>
<db:listitem>
<db:para>QNetworkRequest::SpdyWasUsedAttribute;</db:para>
</db:listitem>
<db:listitem>
<db:para>QNetworkAccessManager::UnknownAccessibility;</db:para>
</db:listitem>
<db:listitem>
<db:para>QNetworkAccessManager::NotAccessible;</db:para>
</db:listitem>
<db:listitem>
<db:para>QNetworkAccessManager::Accessible</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>and enumerators whose names did not follow proper naming conventions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QSsl::TlsV1 (<db:link xlink:href="qssl.xml#SslProtocol-enum">QSsl::TlsV1_0</db:link> is the proper name);</db:para>
</db:listitem>
<db:listitem>
<db:para>QNetworkRequest::HTTP2AllowedAttribute (use <db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::Http2AllowedAttribute</db:link>);</db:para>
</db:listitem>
<db:listitem>
<db:para>QNetworkRequest::HTTP2WasUsedAttribute (use <db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::Http2WasUsedAttribute</db:link>).</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>QNetworkRequest::FollowRedirectsAttribute is removed in Qt 6, see <db:link xlink:href="network-changes-qt6.xml#redirect-policies">the section about redirects handling</db:link> below.</db:para>
</db:section>
<db:section xml:id="configuring-qsslsocket">
<db:title>Configuring QSslSocket</db:title>
<db:para>The following deprecated functions are removed in Qt 6:</db:para>
<db:programlisting language="cpp">QList&lt;QSslCipher&gt; ciphers() const;
void setCiphers(const QList&lt;QSslCipher&gt; &amp;ciphers);
void setCiphers(const QString &amp;ciphers);
static void setDefaultCiphers(const QList&lt;QSslCipher&gt; &amp;ciphers);
static QList&lt;QSslCipher&gt; defaultCiphers();
static QList&lt;QSslCipher&gt; supportedCiphers();
QList&lt;QSslCipher&gt; ciphers() const;
void setCiphers(const QList&lt;QSslCipher&gt; &amp;ciphers);
void setCiphers(const QString &amp;ciphers);
static void setDefaultCiphers(const QList&lt;QSslCipher&gt; &amp;ciphers);
static QList&lt;QSslCipher&gt; defaultCiphers();
static QList&lt;QSslCipher&gt; supportedCiphers();
bool addCaCertificates(const QString &amp;path, QSsl::EncodingFormat format = QSsl::Pem,
                       QRegExp::PatternSyntax syntax = QRegExp::FixedString);
void addCaCertificate(const QSslCertificate &amp;certificate);
void addCaCertificates(const QList&lt;QSslCertificate&gt; &amp;certificates);
void setCaCertificates(const QList&lt;QSslCertificate&gt; &amp;certificates);
QList&lt;QSslCertificate&gt; caCertificates() const;
static bool addDefaultCaCertificates(const QString &amp;path, QSsl::EncodingFormat format = QSsl::Pem,
                                     QRegExp::PatternSyntax syntax = QRegExp::FixedString);
static void addDefaultCaCertificate(const QSslCertificate &amp;certificate);
static void addDefaultCaCertificates(const QList&lt;QSslCertificate&gt; &amp;certificates);
static void setDefaultCaCertificates(const QList&lt;QSslCertificate&gt; &amp;certificates);
static QList&lt;QSslCertificate&gt; defaultCaCertificates();
static QList&lt;QSslCertificate&gt; systemCaCertificates();
</db:programlisting>
<db:para>Use <db:link xlink:href="qsslconfiguration.xml">QSslConfiguration</db:link> and its member functions to set these parameters, e.g.:</db:para>
<db:programlisting language="cpp">auto sslConfiguration = QSslConfiguration::defaultConfiguration();
sslConfiguration.setCiphers(&quot;ECDHE-ECDSA-AES256-SHA384&quot;);
// Set other parameters here ...
socket.setSslConfiguration(sslConfiguration);
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="changes-in-qnetworkaccessmanager-s-default-behavior">
<db:title>Changes in QNetworkAccessManager's default behavior</db:title>
<db:section xml:id="redirect-policies">
<db:title>Redirect policies</db:title>
<db:para>In Qt 6, the default redirect policy has changed from manual to <db:link xlink:href="qnetworkrequest.xml#RedirectPolicy-enum">QNetworkRequest::NoLessSafeRedirectPolicy</db:link>. If your application relies on manual redirect handling (it connects its slot to the <db:link xlink:href="qnetworkreply.xml#redirected">QNetworkReply::redirected</db:link> signal), you have to explicitly set this policy when creating a request:</db:para>
<db:programlisting language="cpp">request.setAttribute(QNetworkRequest::RedirectPolicyAttribute, QNetworkRequest::ManualRedirectPolicy);
</db:programlisting>
</db:section>
<db:section xml:id="http-2-is-enabled-by-default">
<db:title>HTTP/2 is enabled by default</db:title>
<db:para>In Qt 6 <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> enables HTTP/2 protocol by default. Depending on the scheme (&quot;https&quot; or &quot;http&quot;), <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> will use the Application Layer Protocol Negotiation TLS extension or &quot;protocol upgrade&quot; HTTP header to negotiate HTTP/2. If HTTP/2 cannot be negotiated, the access manager will fall back to using HTTP/1.1. If your application can only use HTTP/1.1, you have to disable HTTP/2 manually on a new request:</db:para>
<db:programlisting language="cpp">request.setAttribute(QNetworkRequest::Http2AllowedAttribute, false);
</db:programlisting>
</db:section>
<db:section xml:id="qnetworkaccessmanager-now-guards-against-archive-bombs">
<db:title>QNetworkAccessManager now guards against archive bombs</db:title>
<db:para>Starting with Qt 6.2 <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> will guard against compressed files that decompress to files which are much larger than their compressed form by erroring out the reply if the decompression ratio exceeds a certain threshold. This check is only applied to files larger than a certain size, which can be customized (or disabled by passing -1) by calling <db:link xlink:href="qnetworkrequest.xml#setDecompressedSafetyCheckThreshold">QNetworkRequest::setDecompressedSafetyCheckThreshold</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
