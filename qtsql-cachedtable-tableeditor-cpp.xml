<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Cached Table Example</db:title>
<db:productname>QtSql</db:productname>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Cached Table example shows how a table view can be used to access a database, caching any changes to the data until the user explicitly submits them using a push button.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;
#include &lt;QtSql&gt;

#include &quot;tableeditor.h&quot;

TableEditor::TableEditor(const QString &amp;tableName, QWidget *parent)
    : QWidget(parent)
{
    model = new QSqlTableModel(this);
    model-&gt;setTable(tableName);
    model-&gt;setEditStrategy(QSqlTableModel::OnManualSubmit);
    model-&gt;select();

    model-&gt;setHeaderData(0, Qt::Horizontal, tr(&quot;ID&quot;));
    model-&gt;setHeaderData(1, Qt::Horizontal, tr(&quot;First name&quot;));
    model-&gt;setHeaderData(2, Qt::Horizontal, tr(&quot;Last name&quot;));

    QTableView *view = new QTableView;
    view-&gt;setModel(model);
    view-&gt;resizeColumnsToContents();

    submitButton = new QPushButton(tr(&quot;Submit&quot;));
    submitButton-&gt;setDefault(true);
    revertButton = new QPushButton(tr(&quot;&amp;Revert&quot;));
    quitButton = new QPushButton(tr(&quot;Quit&quot;));

    buttonBox = new QDialogButtonBox(Qt::Vertical);
    buttonBox-&gt;addButton(submitButton, QDialogButtonBox::ActionRole);
    buttonBox-&gt;addButton(revertButton, QDialogButtonBox::ActionRole);
    buttonBox-&gt;addButton(quitButton, QDialogButtonBox::RejectRole);

    connect(submitButton, SIGNAL(clicked()), this, SLOT(submit()));
    connect(revertButton, SIGNAL(clicked()), model, SLOT(revertAll()));
    connect(quitButton, SIGNAL(clicked()), this, SLOT(close()));

    QHBoxLayout *mainLayout = new QHBoxLayout;
    mainLayout-&gt;addWidget(view);
    mainLayout-&gt;addWidget(buttonBox);
    setLayout(mainLayout);

    setWindowTitle(tr(&quot;Cached Table&quot;));
}

void TableEditor::submit()
{
    model-&gt;database().transaction();
    if (model-&gt;submitAll()) {
        model-&gt;database().commit();
    } else {
        model-&gt;database().rollback();
        QMessageBox::warning(this, tr(&quot;Cached Table&quot;),
                             tr(&quot;The database reported an error: %1&quot;)
                             .arg(model-&gt;lastError().text()));
    }
}

</db:programlisting>
</db:article>
