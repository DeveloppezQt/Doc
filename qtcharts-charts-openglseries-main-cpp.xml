<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>OpenGL Accelerated Series Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to enable OpenGL acceleration for <db:link xlink:href="qlineseries.xml">QLineSeries</db:link> and <db:link xlink:href="qscatterseries.xml">QScatterSeries</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;datasource.h&quot;
#include &amp;lt;QtWidgets/QApplication&amp;gt;
#include &amp;lt;QtWidgets/QMainWindow&amp;gt;
#include &amp;lt;QtCharts/QChartView&amp;gt;
#include &amp;lt;QtCharts/QLineSeries&amp;gt;
#include &amp;lt;QtCharts/QScatterSeries&amp;gt;
#include &amp;lt;QtCharts/QValueAxis&amp;gt;
#include &amp;lt;QtCharts/QLogValueAxis&amp;gt;
#include &amp;lt;QtWidgets/QLabel&amp;gt;

// Uncomment to use logarithmic axes instead of regular value axes
//#define USE_LOG_AXIS

// Uncomment to use regular series instead of OpenGL accelerated series
//#define DONT_USE_GL_SERIES

// Uncomment to add a simple regular series (thick line) and a matching OpenGL series (thinner line)
// to verify the series have same visible geometry.
//#define ADD_SIMPLE_SERIES

QT_CHARTS_USE_NAMESPACE

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    QStringList colors;
    colors &amp;lt;&amp;lt; &quot;red&quot; &amp;lt;&amp;lt; &quot;blue&quot; &amp;lt;&amp;lt; &quot;green&quot; &amp;lt;&amp;lt; &quot;black&quot;;

    QChart *chart = new QChart();
    chart-&amp;gt;legend()-&amp;gt;hide();

#ifdef USE_LOG_AXIS
    QLogValueAxis *axisX = new QLogValueAxis;
    QLogValueAxis *axisY = new QLogValueAxis;
#else
    QValueAxis *axisX = new QValueAxis;
    QValueAxis *axisY = new QValueAxis;
#endif

    chart-&amp;gt;addAxis(axisX, Qt::AlignBottom);
    chart-&amp;gt;addAxis(axisY, Qt::AlignLeft);

    const int seriesCount = 10;
#ifdef DONT_USE_GL_SERIES
    const int pointCount = 100;
    chart-&amp;gt;setTitle(&quot;Unaccelerated Series&quot;);
#else
    const int pointCount = 10000;
    chart-&amp;gt;setTitle(&quot;OpenGL Accelerated Series&quot;);
#endif

    QList&amp;lt;QXYSeries *&amp;gt; seriesList;
    for (int i = 0; i &amp;lt; seriesCount; i++) {
        QXYSeries *series = 0;
        int colorIndex = i % colors.size();
        if (i % 2) {
            series = new QScatterSeries;
            QScatterSeries *scatter = static_cast&amp;lt;QScatterSeries *&amp;gt;(series);
            scatter-&amp;gt;setColor(QColor(colors.at(colorIndex)));
            scatter-&amp;gt;setMarkerSize(qreal(colorIndex + 2) / 2.0);
            // Scatter pen doesn't have affect in OpenGL drawing, but if you disable OpenGL drawing
            // this makes the marker border visible and gives comparable marker size to OpenGL
            // scatter points.
            scatter-&amp;gt;setPen(QPen(&quot;black&quot;));
        } else {
            series = new QLineSeries;
            series-&amp;gt;setPen(QPen(QBrush(QColor(colors.at(colorIndex))),
                                qreal(colorIndex + 2) / 2.0));
        }
        seriesList.append(series);
#ifdef DONT_USE_GL_SERIES
        series-&amp;gt;setUseOpenGL(false);
#else
        series-&amp;gt;setUseOpenGL(true);
#endif
        chart-&amp;gt;addSeries(series);
        series-&amp;gt;attachAxis(axisX);
        series-&amp;gt;attachAxis(axisY);
    }

    if (axisX-&amp;gt;type() == QAbstractAxis::AxisTypeLogValue)
        axisX-&amp;gt;setRange(0.1, 20.0);
    else
        axisX-&amp;gt;setRange(0, 20.0);

    if (axisY-&amp;gt;type() == QAbstractAxis::AxisTypeLogValue)
        axisY-&amp;gt;setRange(0.1, 10.0);
    else
        axisY-&amp;gt;setRange(0, 10.0);

#ifdef ADD_SIMPLE_SERIES
    QLineSeries *simpleRasterSeries = new QLineSeries;
    *simpleRasterSeries &amp;lt;&amp;lt; QPointF(0.001, 0.001)
                 &amp;lt;&amp;lt; QPointF(2.5, 8.0)
                 &amp;lt;&amp;lt; QPointF(5.0, 4.0)
                 &amp;lt;&amp;lt; QPointF(7.5, 9.0)
                 &amp;lt;&amp;lt; QPointF(10.0, 0.001)
                 &amp;lt;&amp;lt; QPointF(12.5, 2.0)
                 &amp;lt;&amp;lt; QPointF(15.0, 1.0)
                 &amp;lt;&amp;lt; QPointF(17.5, 6.0)
                 &amp;lt;&amp;lt; QPointF(20.0, 10.0);
    simpleRasterSeries-&amp;gt;setUseOpenGL(false);
    simpleRasterSeries-&amp;gt;setPen(QPen(QBrush(&quot;magenta&quot;), 8));
    chart-&amp;gt;addSeries(simpleRasterSeries);
    simpleRasterSeries-&amp;gt;attachAxis(axisX);
    simpleRasterSeries-&amp;gt;attachAxis(axisY);

    QLineSeries *simpleGLSeries = new QLineSeries;
    simpleGLSeries-&amp;gt;setUseOpenGL(true);
    simpleGLSeries-&amp;gt;setPen(QPen(QBrush(&quot;black&quot;), 2));
    simpleGLSeries-&amp;gt;replace(simpleRasterSeries-&amp;gt;points());
    chart-&amp;gt;addSeries(simpleGLSeries);
    simpleGLSeries-&amp;gt;attachAxis(axisX);
    simpleGLSeries-&amp;gt;attachAxis(axisY);
#endif

    QChartView *chartView = new QChartView(chart);

    QMainWindow window;
    window.setCentralWidget(chartView);
    window.resize(600, 400);
    window.show();

    DataSource dataSource;
    dataSource.generateData(seriesCount, 10, pointCount);

    QLabel *fpsLabel = new QLabel(&amp;amp;window);
    QLabel *countLabel = new QLabel(&amp;amp;window);
    QString countText = QStringLiteral(&quot;Total point count: %1&quot;);
    countLabel-&amp;gt;setText(countText.arg(pointCount * seriesCount));
    countLabel-&amp;gt;adjustSize();
    fpsLabel-&amp;gt;move(10, 2);
    fpsLabel-&amp;gt;adjustSize();
    fpsLabel-&amp;gt;raise();
    fpsLabel-&amp;gt;show();
    countLabel-&amp;gt;move(10, fpsLabel-&amp;gt;height());
    fpsLabel-&amp;gt;raise();
    countLabel-&amp;gt;show();

    // We can get more than one changed event per frame, so do async update.
    // This also allows the application to be responsive.
    QObject::connect(chart-&amp;gt;scene(), &amp;amp;QGraphicsScene::changed,
                     &amp;amp;dataSource, &amp;amp;DataSource::handleSceneChanged);

    dataSource.startUpdates(seriesList, fpsLabel);

    return a.exec();
}

</db:programlisting>
</db:article>
