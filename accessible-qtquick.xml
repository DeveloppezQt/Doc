<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Accessibility for Qt Quick Applications</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="accessible-qwidget.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Accessibility for QWidget Applications"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="accessible.xml" xlink:type="arc" xlink:arcrole="start" xlink:title="Accessibility"/></db:extendedlink>
<db:abstract>
<db:para>How to make your applications accessible to those with disabilities.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>This page explains how to add accessibility metadata to Qt Quick applications. Qt Quick applications and many of its QML types already have built-in accessibility features. For example, the <db:link xlink:href="qtquickcontrols-buttons.xml">Button Controls</db:link> have keyboard accessibility, which makes it possible to tab between the controls and activate them using the Return or Enter key. So, by using existing controls, you are already off to a good start in making your Qt Quick application accessible. In some cases, however, you may need to clarify the job of a QML item.</db:para>
<db:para>Similar to making <db:link xlink:href="https://developer.mozilla.org/en-US/docs/Web/Accessibility">web applications accessible</db:link>, you assign properties to UI elements, in this case, to QML items. These properties expose metadata to accessibility tools, which, together with carefully chosen high-contrast color themes and other visual cues, aid the user in interacting with your Qt Quick application.</db:para>
<db:para>In general, accessibility tools are interested in three different categories of metadata:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>Properties</db:emphasis>: The accessibility client reads metadata about accessible objects. In some cases, the accessibility client can also modify these properties, such as text in a line edit.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>Actions</db:emphasis>: The accessibility client invokes actions, such as pressing a button.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>Relationships and Navigation</db:emphasis>: The accessibility client traverses from one accessible object to another, using the relationships between objects.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For Qt Quick applications, the most important type to be aware of is the <db:link xlink:href="qml-qtquick-accessible.xml">Accessible</db:link> QML type, which adds accessibility metadata to QML items.</db:para>
</db:section>
<db:section xml:id="adding-accessibility-metadata-to-qml-items">
<db:title>Adding Accessibility Metadata to QML Items</db:title>
<db:para>To add accessibility metadata to QML items, either to existing types provided by Qt or to custom types defined in C++, use the <db:link xlink:href="qml-qtquick-accessible.xml">Accessible</db:link> QML type. The most important properties of the <db:link xlink:href="qml-qtquick-accessible.xml">Accessible</db:link> QML type are <db:link xlink:href="qml-qtquick-accessible.xml#name-prop">name</db:link>, <db:link xlink:href="qml-qtquick-accessible.xml#description-prop">description</db:link>, and <db:link xlink:href="qml-qtquick-accessible.xml#role-prop">role</db:link>.</db:para>
<db:para>Here's an example of adding accessibility metadata to a Text type, which, in this case, represents a mathematical equation:</db:para>
<db:programlisting language="qml">Text {
    id: myMathEquation
    text: &quot;y = 8x - 9&quot;
    font.family: &quot;Helvetica&quot;

    Accessibility.role: Accessible.Equation
    Accessibility.name: myMathEquation.text
    Accessibility.description: qsTr(&quot;Linear equation&quot;)
    Accessible.onPressAction: {
        // Highlight the x variable
        ...
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-accessible.xml#role-prop">role</db:link> is set to Equation to indicate what the Text type represents. <db:link xlink:href="qml-qtquick-accessible.xml#name-prop">name</db:link> is the most important property, which is bound to the text of the button. To provide extra information about a QML item, use the <db:link xlink:href="qml-qtquick-accessible.xml#description-prop">description</db:link> property. The signal handler <db:link xlink:href="qml-qtquick-accessible.xml#pressAction-signal">Accessible.pressAction</db:link>, which can be invoked by accessibility tools to trigger the button, needs to have the same effect as tapping or clicking the text.</db:para>
<db:para>Whereas textual content is inherently accessible, multimedia content is not. So it's important to provide necessary accessibility metadata to multimedia content such as images, videos, and audio. Here's an example of providing accessibility metadata to an image, which represents a pie chart:</db:para>
<db:programlisting language="qml">Image {
    source: &quot;pie-chart-683.png&quot;
    Accessibility.role: Accessible.Chart
    Accessibility.name: qsTr(&quot;Pie chart&quot;)
    Accessibility.description: qsTr(&quot;Pie chart that shows the distribution
    of sales from three store locations: Durban representing 60 percent,
    Johannesburg 20 percent, and Cape Town 20 percent&quot;)
    Accessible.onPressAction: {
        // Expand the image
        ...
    }
}
</db:programlisting>
<db:para>For more information, see <db:link xlink:href="qml-qtquick-accessible.xml">Accessible</db:link> for the list of properties you can add to QML items.</db:para>
</db:section>
<db:section xml:id="related-classes-and-interfaces">
<db:title>Related Classes and Interfaces</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qaccessible.xml">QAccessible</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaccessibleinterface.xml">QAccessibleInterface</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
