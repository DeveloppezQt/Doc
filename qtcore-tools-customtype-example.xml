<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Custom Type Example</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Custom Type example shows how to integrate a custom type into Qt's meta-object system.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Contents:</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>Qt provides a range of standard value types that are used to provide rich and meaningful APIs. These types are integrated with the meta-object system, enabling them to be stored in <db:link xlink:href="qvariant.xml">QVariant</db:link> objects, written out in debugging information and sent between components in signal-slot communication.</db:para>
<db:para>Custom types can also be integrated with the meta-object system as long as they are written to conform to some simple guidelines. In this example, we introduce a simple Message class, we describe how we make it work with <db:link xlink:href="qvariant.xml">QVariant</db:link>, and we show how it can be extended to generate a printable representation of itself for use in debugging output.</db:para>
</db:section>
<db:section xml:id="the-message-class-definition">
<db:title>The Message Class Definition</db:title>
<db:para>The Message class is a simple value class that contains two pieces of information (a <db:link xlink:href="qstring.xml">QString</db:link> and a <db:link xlink:href="qstringlist.xml">QStringList</db:link>), each of which can be read using trivial getter functions:</db:para>
<db:programlisting language="cpp">class Message
{
public:
    Message() = default;
    ~Message() = default;
    Message(const Message &amp;amp;) = default;
    Message &amp;amp;operator=(const Message &amp;amp;) = default;

    Message(const QString &amp;amp;body, const QStringList &amp;amp;headers);

    QStringView body() const;
    QStringList headers() const;

private:
    QString m_body;
    QStringList m_headers;
};
</db:programlisting>
<db:para>The default constructor, copy constructor and destructor are all required, and must be public, if the type is to be integrated into the meta-object system. Other than this, we are free to implement whatever we need to make the type do what we want, so we also include a constructor that lets us set the type's data members.</db:para>
<db:para>To enable the type to be used with <db:link xlink:href="qvariant.xml">QVariant</db:link>, we declare it using the <db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>() macro:</db:para>
<db:programlisting language="cpp">Q_DECLARE_METATYPE(Message);
</db:programlisting>
<db:para>We do not need to write any additional code to accompany this macro.</db:para>
<db:para>To allow us to see a readable description of each Message object when it is sent to the debug output stream, we define a streaming operator:</db:para>
<db:programlisting language="cpp">QDebug operator&amp;lt;&amp;lt;(QDebug dbg, const Message &amp;amp;message);
</db:programlisting>
<db:para>This facility is useful if you need to insert tracing statements in your code for debugging purposes.</db:para>
</db:section>
<db:section xml:id="the-message-class-implementation">
<db:title>The Message Class Implementation</db:title>
<db:para>The streaming operator is implemented in the following way:</db:para>
<db:programlisting language="cpp">QDebug operator&amp;lt;&amp;lt;(QDebug dbg, const Message &amp;amp;message)
{
    QDebugStateSaver saver(dbg);
    QList&amp;lt;QStringView&amp;gt; pieces = message.body().split(u&quot;\r\n&quot;, Qt::SkipEmptyParts);
    if (pieces.isEmpty())
        dbg.nospace() &amp;lt;&amp;lt; &quot;Message()&quot;;
    else if (pieces.size() == 1)
        dbg.nospace() &amp;lt;&amp;lt; &quot;Message(&quot; &amp;lt;&amp;lt; pieces.first() &amp;lt;&amp;lt; &quot;)&quot;;
    else
        dbg.nospace() &amp;lt;&amp;lt; &quot;Message(&quot; &amp;lt;&amp;lt; pieces.first() &amp;lt;&amp;lt; &quot; ...)&quot;;
    return dbg;
}
</db:programlisting>
<db:para>Here, we want to represent each value depending on how many lines are stored in the message body. We stream text to the <db:link xlink:href="qdebug.xml">QDebug</db:link> object passed to the operator and return the <db:link xlink:href="qdebug.xml">QDebug</db:link> object obtained from its maybeSpace() member function; this is described in more detail in the <db:link xlink:href="custom-types.xml#making-the-type-printable">Creating Custom Qt Types</db:link> document.</db:para>
<db:para>We include the code for the getter functions for completeness:</db:para>
<db:programlisting language="cpp">QStringView Message::body() const
{
    return m_body;
}

QStringList Message::headers() const
{
    return m_headers;
}
</db:programlisting>
<db:para>With the type fully defined, implemented, and integrated with the meta-object system, we can now use it.</db:para>
</db:section>
<db:section xml:id="using-the-message">
<db:title>Using the Message</db:title>
<db:para>In the example's main() function, we show how a Message object can be printed to the console by sending it to the debug stream:</db:para>
<db:programlisting language="cpp">    Message message(body, headers);
    qDebug() &amp;lt;&amp;lt; &quot;Original:&quot; &amp;lt;&amp;lt; message;
</db:programlisting>
<db:para>You can use the type with <db:link xlink:href="qvariant.xml">QVariant</db:link> in exactly the same way as you would use standard Qt value types. Here's how to store a value using the <db:link xlink:href="qvariant.xml#setValue">QVariant::setValue</db:link>() function:</db:para>
<db:programlisting language="cpp">    QVariant stored;
    stored.setValue(message);
</db:programlisting>
<db:para>Alternatively, the <db:link xlink:href="qvariant.xml#fromValue">QVariant::fromValue</db:link>() function can be used if you are using a compiler without support for member template functions.</db:para>
<db:para>The value can be retrieved using the <db:link xlink:href="qvariant.xml#value">QVariant::value</db:link>() member template function:</db:para>
<db:programlisting language="cpp">    Message retrieved = qvariant_cast&amp;lt;Message&amp;gt;(stored);
    qDebug() &amp;lt;&amp;lt; &quot;Retrieved:&quot; &amp;lt;&amp;lt; retrieved;
    retrieved = qvariant_cast&amp;lt;Message&amp;gt;(stored);
    qDebug() &amp;lt;&amp;lt; &quot;Retrieved:&quot; &amp;lt;&amp;lt; retrieved;
</db:programlisting>
</db:section>
<db:section xml:id="further-reading">
<db:title>Further Reading</db:title>
<db:para>The custom Message type can also be used with direct signal-slot connections.</db:para>
<db:para>To register a custom type for use with queued signals and slots, such as those used in cross-thread communication, see the <db:link xlink:href="qtcore-threads-queuedcustomtype-example.xml">Queued Custom Type Example</db:link>.</db:para>
<db:para>More information on using custom types with Qt can be found in the <db:link xlink:href="custom-types.xml">Creating Custom Qt Types</db:link> document.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/corelib/tools/customtype?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
