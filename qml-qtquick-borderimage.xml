<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>BorderImage QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Paints a border based on an image.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.13</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>BorderImage is part of <db:simplelist><db:member>qtquick-visual</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link> type is used to create borders out of images by scaling or tiling parts of each image.</db:para>
<db:para>A <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link> breaks a source image, specified using the <db:link xlink:href="qml-qtquick-borderimage.xml#source-prop">source</db:link> property, into 9 regions, as shown below:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-scalegrid.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>When the image is scaled, regions of the source image are scaled or tiled to create the displayed border image in the following way:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The corners (regions 1, 3, 7, and 9) are not scaled at all.</db:para>
</db:listitem>
<db:listitem>
<db:para>Regions 2 and 8 are scaled according to <db:link xlink:href="qml-qtquick-borderimage.xml#horizontalTileMode-prop">horizontalTileMode</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Regions 4 and 6 are scaled according to <db:link xlink:href="qml-qtquick-borderimage.xml#verticalTileMode-prop">verticalTileMode</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The middle (region 5) is scaled according to both <db:link xlink:href="qml-qtquick-borderimage.xml#horizontalTileMode-prop">horizontalTileMode</db:link> and <db:link xlink:href="qml-qtquick-borderimage.xml#verticalTileMode-prop">verticalTileMode</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The regions of the image are defined using the <db:link xlink:href="qml-qtquick-borderimage.xml#border-prop">border</db:link> property group, which describes the distance from each edge of the source image to use as a border.</db:para>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para>The following examples show the effects of the different modes on an image. Guide lines are overlaid onto the image to show the different regions of the image as described above.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-borderimage-normal-image.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>An unscaled image is displayed using an Image. The <db:link xlink:href="qml-qtquick-borderimage.xml#border-prop">border</db:link> property is used to determine the parts of the image that will lie inside the unscaled corner areas and the parts that will be stretched horizontally and vertically.</db:para>
<db:programlisting language="qml">Image {
    source: &quot;pics/borderframe.png&quot;
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-borderimage-scaled.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link> is used to display the image, and it is given a size that is larger than the original image. Since the <db:link xlink:href="qml-qtquick-borderimage.xml#horizontalTileMode-prop">horizontalTileMode</db:link> property is set to <db:link xlink:href="qml-qtquick-borderimage.xml#horizontalTileMode-prop">BorderImage.Stretch</db:link>, the parts of image in regions 2 and 8 are stretched horizontally. Since the <db:link xlink:href="qml-qtquick-borderimage.xml#verticalTileMode-prop">verticalTileMode</db:link> property is set to <db:link xlink:href="qml-qtquick-borderimage.xml#verticalTileMode-prop">BorderImage.Stretch</db:link>, the parts of image in regions 4 and 6 are stretched vertically.</db:para>
<db:programlisting language="qml">BorderImage {
    width: 180; height: 180
    border { left: 30; top: 30; right: 30; bottom: 30 }
    horizontalTileMode: BorderImage.Stretch
    verticalTileMode: BorderImage.Stretch
    source: &quot;pics/borderframe.png&quot;
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-borderimage-tiled.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Again, a large <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link> is used to display the image. With the <db:link xlink:href="qml-qtquick-borderimage.xml#horizontalTileMode-prop">horizontalTileMode</db:link> property set to <db:link xlink:href="qml-qtquick-borderimage.xml#horizontalTileMode-prop">BorderImage.Repeat</db:link>, the parts of image in regions 2 and 8 are tiled so that they fill the space at the top and bottom of the item. Similarly, the <db:link xlink:href="qml-qtquick-borderimage.xml#verticalTileMode-prop">verticalTileMode</db:link> property is set to <db:link xlink:href="qml-qtquick-borderimage.xml#verticalTileMode-prop">BorderImage.Repeat</db:link>, the parts of image in regions 4 and 6 are tiled so that they fill the space at the left and right of the item.</db:para>
<db:programlisting language="qml">BorderImage {
    width: 180; height: 180
    border { left: 30; top: 30; right: 30; bottom: 30 }
    horizontalTileMode: BorderImage.Repeat
    verticalTileMode: BorderImage.Repeat
    source: &quot;pics/borderframe.png&quot;
}
</db:programlisting>
<db:para>In some situations, the width of regions 2 and 8 may not be an exact multiple of the width of the corresponding regions in the source image. Similarly, the height of regions 4 and 6 may not be an exact multiple of the height of the corresponding regions. It can be useful to use <db:link xlink:href="qml-qtquick-borderimage.xml#horizontalTileMode-prop">BorderImage.Round</db:link> instead of <db:link xlink:href="qml-qtquick-borderimage.xml#horizontalTileMode-prop">BorderImage.Repeat</db:link> in cases like these.</db:para>
<db:para>The Border Image example in <db:link xlink:href="qtquick-imageelements-example.xml">Qt Quick Examples - Image Elements</db:link> shows how a <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link> can be used to simulate a shadow effect on a rectangular item.</db:para>
</db:section>
<db:section xml:id="image-loading">
<db:title>Image Loading</db:title>
<db:para>The source image may not be loaded instantaneously, depending on its original location. Loading progress can be monitored with the <db:link xlink:href="qml-qtquick-borderimage.xml#progress-prop">progress</db:link> property.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-image.xml">Image</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-animatedimage.xml">AnimatedImage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="horizontalTileMode-prop">
<db:title>horizontalTileMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>horizontalTileMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">verticalTileMode : enumeration</db:bridgehead><db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>verticalTileMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property describes how to repeat or stretch the middle parts of the border image.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>.Stretch - Scales the image to fit to the available area.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>.Repeat - Tile the image until there is no more space. May crop the last image.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>.Round - Like Repeat, but scales the images down to ensure that the last image is not cropped.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default tile mode for each property is <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>.Stretch.</db:para>
</db:section>
<db:section xml:id="asynchronous-prop">
<db:title>asynchronous : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>asynchronous</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies that images on the local filesystem should be loaded asynchronously in a separate thread. The default value is false, causing the user interface thread to block while the image is loaded. Setting <db:code role="parameter">asynchronous</db:code> to true is useful where maintaining a responsive user interface is more desirable than having images immediately visible.</db:para>
<db:para>Note that this property is only valid for images read from the local filesystem. Images loaded via a network resource (e.g. HTTP) are always loaded asynchronously.</db:para>
</db:section>
<db:section xml:id="border-prop">
<db:title>border group</db:title>
<db:bridgehead renderas="sect2" xml:id="border.bottom-prop">border.bottom : int</db:bridgehead>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>border.bottom</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="border.left-prop">border.left : int</db:bridgehead>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>border.left</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="border.right-prop">border.right : int</db:bridgehead>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>border.right</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="border.top-prop">border.top : int</db:bridgehead>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>border.top</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The 4 border lines (2 horizontal and 2 vertical) break the image into 9 sections, as shown below:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-scalegrid.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Each border line (left, right, top, and bottom) specifies an offset in pixels from the respective edge of the source image. By default, each border line has a value of 0.</db:para>
<db:para>For example, the following definition sets the bottom line 10 pixels up from the bottom of the image:</db:para>
<db:programlisting language="qml">BorderImage {
    border.bottom: 10
    // ...
}
</db:programlisting>
<db:para>The border lines can also be specified using a <db:link xlink:href="qml-qtquick-borderimage.xml#source-prop">.sci file</db:link>.</db:para>
</db:section>
<db:section xml:id="cache-prop">
<db:title>cache : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>cache</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies whether the image should be cached. The default value is true. Setting <db:code role="parameter">cache</db:code> to false is useful when dealing with large images, to make sure that they aren't cached at the expense of small 'ui element' images.</db:para>
</db:section>
<db:section xml:id="mirror-prop">
<db:title>mirror : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>mirror</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the image should be horizontally inverted (effectively displaying a mirrored image).</db:para>
<db:para>The default value is false.</db:para>
</db:section>
<db:section xml:id="progress-prop">
<db:title>progress : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>progress</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the progress of image loading, from 0.0 (nothing loaded) to 1.0 (finished).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-borderimage.xml#status-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="smooth-prop">
<db:title>smooth : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>smooth</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the image is smoothly filtered when scaled or transformed. Smooth filtering gives better visual quality, but it may be slower on some hardware. If the image is displayed at its natural size, this property has no visual or performance effect.</db:para>
<db:para>By default, this property is set to true.</db:para>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>source</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URL that refers to the source image.</db:para>
<db:para><db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link> can handle any image format supported by Qt, loaded from any URL scheme supported by Qt.</db:para>
<db:para>This property can also be used to refer to .sci files, which are written in a QML-specific, text-based format that specifies the borders, the image file and the tile rules for a given border image.</db:para>
<db:para>The following .sci file sets the borders to 10 on each side for the image <db:code>picture.png</db:code>:</db:para>
<db:programlisting language="cpp">border.left: 10
border.top: 10
border.bottom: 10
border.right: 10
source: &quot;picture.png&quot;
</db:programlisting>
<db:para>The URL may be absolute, or relative to the URL of the component.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QQuickImageProvider</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceSize-prop">
<db:title>sourceSize : QSize</db:title>
<db:fieldsynopsis>
<db:type>QSize</db:type>
<db:varname>sourceSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the actual width and height of the loaded image.</db:para>
<db:para>In <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>, this property is read-only.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">Image::sourceSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status-prop">
<db:title>status : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>status</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property describes the status of image loading. It can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>.Null - no image has been set</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>.Ready - the image has been loaded</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>.Loading - the image is currently being loaded</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>.Error - an error occurred while loading the image</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-borderimage.xml#progress-prop">progress</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
