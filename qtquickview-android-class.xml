<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick View Android Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Allows you to add QML content to your Android app as a View.</db:para>
<db:para>This documentation was introduced in Qt 6.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The QtQuickView class lets you easily add QML content to your Android app as a <db:link xlink:href="https://developer.android.com/reference/android/view/View">View</db:link>.</db:para>
<db:anchor xml:id="qtquickview"/>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Class:</db:para>
</db:td>
<db:td>
<db:para>QtQuickView</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Package Name:</db:para>
</db:td>
<db:td>
<db:para>org.qtproject.qt.android</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Extends:</db:para>
</db:td>
<db:td>
<db:para>org.qtproject.qt.android.QtView</db:para>
<db:para>– org.qtproject.qt.android.QtLayout</db:para>
<db:para>–– android.view.ViewGroup</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="detailed-description">
<db:title>Detailed description</db:title>
<db:para>The QtQuickView class lets you easily add QML content to your Android app as a <db:link xlink:href="https://developer.android.com/reference/android/view/View">View</db:link>. QtQuickView instantiates a <db:link xlink:href="qquickview.xml">QQuickView</db:link> with a given QML component source (a local or network file) and embeds it to itself. You can add it to your Android app's layout as with any other View. QtQuickView is a good choice when you want to extend your non-Qt Android app with QML content but do not want to make the entire app using the Qt framework. It brings the power of Qt Quick into your Android app, making it possible to use various Qt Quick APIs in Android apps.</db:para>
<db:note>
<db:para>Although we try to keep QtQuickView as thread-safe as possible, that can't be guaranteed since it follows the same considerations as <db:link xlink:href="https://developer.android.com/reference/android/view/View">View</db:link>. See {Android: Event Handling and Threading} {Event Handling and Threading}.</db:para>
</db:note>
<db:para>A typical use of the class:</db:para>
<db:programlisting language="cpp">import org.qtproject.qt.qml.target.Main;
...

private Main m_mainQmlContent;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    ...
    m_mainQmlContent = new Main();
    QtQuickView qmlView = new QtQuickView(this);

    layout.addView(qmlView, params);

    qmlView.loadContent(m_mainQmlContent);
    ...
}
</db:programlisting>
<db:section xml:id="changes-needed-in-main-cpp-compared-to-a-qt-for-android-application">
<db:title>Changes needed in main.cpp compared to a Qt for Android application</db:title>
<db:para>QtQuickView will handle creating the app's window and loading any QML content. The main function of the QML project you are embedding into your Android project shouldn't do either. Creating the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> and <db:link xlink:href="qguiapplication.xml#exec">starting the event loop</db:link> is enough. Below is the minimum required main.cpp for your QML project.</db:para>
<db:programlisting language="cpp">#include &lt;QGuiApplication&gt;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);
    return app.exec();
}
</db:programlisting>
<db:para>For a more detailed example, see <db:link xlink:href="qml-in-android-studio-projects-example.xml">Qt Quick for Android Studio Projects</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="known-issues">
<db:title>Known issues</db:title>
<db:para>Here are the known issues with this API. They may be resolved and removed in a patch release.</db:para>
<db:section xml:id="activity-recreation-leads-to-an-application-crash">
<db:title>Activity recreation leads to an application crash</db:title>
<db:warning>
<db:para>Activity recreation may lead to a crash. This is due to resources not being released properly.</db:para>
</db:warning>
<db:para>Orientation and other configuration changes will recreate the Activity.</db:para>
<db:para>See <db:link xlink:href="https://bugreports.qt.io/browse/QTBUG-123711">QTBUG-123711</db:link> for more information.</db:para>
<db:para>See <db:link xlink:href="qml-in-android-studio-projects-example.xml">Qt Quick for Android Studio Projects</db:link> for an example of how to handle rotation manually inside an application without recreating the Activity.</db:para>
</db:section>
</db:section>
<db:section xml:id="qtquickview-in-an-android-service">
<db:title>QtQuickView in an Android Service</db:title>
<db:para>It is also possible to add a QtQuickView from a Service context by using the Android WindowManager interface:</db:para>
<db:programlisting language="cpp">import org.qtproject.qt.qml.target.Main;
...
private Main m_mainQmlContent;
@Override
public void onCreate() {
    m_windowManager = getSystemService(WindowManager.class);

    m_mainQmlContent = new Main();
    QtQuickView qmlView = new QtQuickView(this)

    WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams(
            640, 320,
            WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,
            WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS,
            PixelFormat.TRANSLUCENT);

    m_windowManager.addView(m_qtView, layoutParams);

    qmlView.loadContent(m_mainQmlContent);
}
</db:programlisting>
<db:para>To clean up the QtQuickView and Qt libraries, the onDestroy() lifecycle function can be used:</db:para>
<db:programlisting language="cpp">@Override
public void onDestroy() {
    super.onDestroy();
    m_windowManager.removeView(m_qtView);
    m_qtView = null;
}
</db:programlisting>
<db:note>
<db:para>Adding a QtQuickView from a Service context requires your application to have the <db:link xlink:href="https://developer.android.com/reference/android/Manifest.permission#SYSTEM_ALERT_WINDOW">SYSTEM_ALERT_WINDOW</db:link> permission, and to be signed with the platform key.</db:para>
</db:note>
<db:note>
<db:para>QML views embedded within a Service context do not support keyboard input or accessibility features.</db:para>
</db:note>
</db:section>
<db:section xml:id="multiple-qtquickviews-in-an-activity">
<db:title>Multiple QtQuickViews in an Activity</db:title>
<db:para>Instantiating multiple QtQuickViews at once is also possible:</db:para>
<db:programlisting language="cpp" role="bad">import org.qtproject.qt.qml.target.Main;
import org.qtproject.qt.qml.target.Second;
...

private Main m_mainQmlContent;
private Second m_secondQmlContent;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    ...

    m_mainQmlContent = new Main();
    m_secondQmlContent = new Second();

    QtQuickView qmlView = new QtQuickView(this);
    QtQuickView secondQmlView = new QtQuickView(this);

    layout.addView(qmlView, params);
    layout.addView(secondQmlView, secondParams);

    qmlView.loadContent(m_mainQmlContent);
    secondQmlView.loadContent(m_secondQmlContent);
    ...
}
</db:programlisting>
</db:section>
<db:section xml:id="constructors">
<db:title>Constructors</db:title>
<db:section xml:id="public-qtquickview-context-parent-string-qmluri-string-appname">
<db:title>public QtQuickView(Context parent, String qmlUri, String appName)</db:title>
<db:para>Creates a QtQuickView to load and render a QML component. Instantiating a QtQuickView will load the Qt libraries, including the app library specified by <db:emphasis>appName</db:emphasis>. Then, it creates a <db:link xlink:href="qquickview.xml">QQuickView</db:link> that loads the QML source specified by <db:emphasis>qmlUri</db:emphasis>.</db:para>
<db:section xml:id="parameters">
<db:title>Parameters</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">context</db:emphasis>: the parent Context.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">qmlUri</db:emphasis>: the URI of the main QML file.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">appName</db:emphasis>: the name of the Qt app library to load and start. This corresponds to the target name set in the Qt app's CMakeLists.txt.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="throws">
<db:title>Throws</db:title>
<db:para>Throws a <db:link xlink:href="https://developer.android.com/reference/java/security/InvalidParameterException">InvalidParameterException</db:link> if a parameter is invalid.</db:para>
</db:section>
</db:section>
<db:section xml:id="public-qtquickview-context-context-string-qmluri-string-appname-string-qmlimportpaths">
<db:title>public QtQuickView(Context context, String qmlUri, String appName, String[] qmlImportPaths)</db:title>
<db:para>Creates a QtQuickView to load and view a QML component. Instantiating a QtQuickView will load the Qt libraries, including the app library specified by <db:emphasis>appName</db:emphasis>. Then, it creates a <db:link xlink:href="qquickview.xml">QQuickView</db:link> that loads the QML source specified by <db:emphasis>qmlUri</db:emphasis>. This overload accepts an array of strings <db:emphasis>qmlImportPaths</db:emphasis> in the case where the QML application should load QML modules from custom paths.</db:para>
<db:section xml:id="constructors-public-qtquickview-context-context-string-qmluri-string-appname-string-qmlimportpaths-parameters-11">
<db:title>Parameters</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">context</db:emphasis>: the parent Context.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">qmlUri</db:emphasis>: the URI of the main QML file.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">appName</db:emphasis>: the name of the Qt app library to load and start. This corresponds to the target name set in the Qt app's CMakeLists.txt.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">qmlImportPaths</db:emphasis>: an array of strings for additional import paths to be passed to.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="constructors-public-qtquickview-context-context-string-qmluri-string-appname-string-qmlimportpaths-throws-12">
<db:title>Throws</db:title>
<db:para>Throws a <db:link xlink:href="https://developer.android.com/reference/java/security/InvalidParameterException">InvalidParameterException</db:link> if a parameter is invalid.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="interfaces">
<db:title>Interfaces</db:title>
<db:section xml:id="public-interface-signallistener-t">
<db:title>public interface SignalListener&lt;T&gt;</db:title>
<db:anchor xml:id="signallistener"/>
<db:para>Invoked on the Android UI thread when the signal has been emitted.</db:para>
<db:section xml:id="interfaces-public-interface-signallistener-t-parameters-15">
<db:title>Parameters</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">signalName</db:emphasis>: literal signal name</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">value</db:emphasis>: the value delivered by the signal or null if the signal is without a parameter.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="public-interface-statuschangelistener">
<db:title>public interface StatusChangeListener</db:title>
<db:anchor xml:id="statuschangelistener"/>
<db:para>Invoked on the Android UI thread when the QML component status has changed.</db:para>
<db:section xml:id="interfaces-public-interface-statuschangelistener-parameters-17">
<db:title>Parameters</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">status</db:emphasis>: The current status.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:section>
<db:section xml:id="fields">
<db:title>Fields</db:title>
<db:section xml:id="status-values">
<db:title>Status values</db:title>
<db:anchor xml:id="status-values"/>
<db:para>The status can be <db:emphasis>NULL</db:emphasis>, <db:emphasis>READY</db:emphasis>, <db:emphasis>LOADING</db:emphasis> or <db:emphasis>ERROR</db:emphasis>. For more information, see <db:link xlink:href="qquickview.xml#Status-enum">QQuickView::Status</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="methods">
<db:title>Methods</db:title>
<db:section xml:id="public-void-setproperty-string-propertyname-object-value">
<db:title>public void setProperty(String propertyName, Object value)</db:title>
<db:anchor xml:id="setproperty"/>
<db:para>Sets the value of an existing property on the QML root object. The supported types are Integer, Double, Float, Boolean, and String. These types get converted to their corresponding QML types int, double/float, bool, and string. This function does not add properties to the QML root object if they do not exist.</db:para>
<db:section xml:id="methods-public-void-setproperty-string-propertyname-object-value-parameters-22">
<db:title>Parameters</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">propertyName</db:emphasis>: the name of the existing root object property to set its value</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">value</db:emphasis>: the value of the property</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="public-t-extends-object-t-getproperty-string-propertyname">
<db:title>public &lt;T extends Object&gt; T getProperty(String propertyName)</db:title>
<db:anchor xml:id="getproperty"/>
<db:para>Gets the value of an existing property of the QML root object. The supported return types are <db:emphasis>Integer</db:emphasis>, <db:emphasis>Double</db:emphasis>, <db:emphasis>Float</db:emphasis>, <db:emphasis>Boolean</db:emphasis>, and <db:emphasis>String</db:emphasis>. These types get converted from their corresponding QML types int, double/float, bool, and string.</db:para>
<db:section xml:id="methods-public-t-extends-object-t-getproperty-string-propertyname-parameters-24">
<db:title>Parameters</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">propertyName</db:emphasis>: the name of the existing root object property.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="returns">
<db:title>Returns</db:title>
<db:para>If the property does not exist or the status of the QML component is anything other than <db:link xlink:href="qtquickview-android-class.xml#status-values">STATUS_READY</db:link>, this function will return null.</db:para>
</db:section>
<db:section xml:id="methods-public-t-extends-object-t-getproperty-string-propertyname-throws-26">
<db:title>Throws</db:title>
<db:para>Throws a <db:link xlink:href="https://developer.android.com/reference/java/lang/ClassCastException">ClassCastException</db:link> if type casting fails.</db:para>
</db:section>
</db:section>
<db:section xml:id="public-t-int-addsignallistener-string-signalname-class-t-argtype-signallistener-t-listener">
<db:title>public &lt;T&gt; int addSignalListener(String signalName, Class&lt;T&gt; argType, SignalListener&lt;T&gt; listener)</db:title>
<db:anchor xml:id="addsignallistener"/>
<db:para>Associates a <db:link xlink:href="qtquickview-android-class.xml#signallistener">SignalListener</db:link> with a signal of the QML root object.</db:para>
<db:section xml:id="methods-public-t-int-addsignallistener-string-signalname-class-t-argtype-signallistener-t-listener-parameters-28">
<db:title>Parameters</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">signalName</db:emphasis>: the name of the root object signal.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">argType</db:emphasis>: the Class type of the signal argument.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">listener</db:emphasis>: an instance of the SignalListener interface.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="methods-public-t-int-addsignallistener-string-signalname-class-t-argtype-signallistener-t-listener-returns-29">
<db:title>Returns</db:title>
<db:para>A Connection ID between signal and listener or the existing connection ID if there is an existing connection between the same signal and listener. Returns a negative value if the signal does not exist on the QML root object.</db:para>
</db:section>
</db:section>
<db:section xml:id="public-boolean-removesignallistener-int-signallistenerid">
<db:title>public boolean removeSignalListener(int signalListenerId)</db:title>
<db:para>Stops a <db:link xlink:href="qtquickview-android-class.xml#signallistener">SignalListener</db:link> with a given id obtained from <db:link xlink:href="qtquickview-android-class.xml#addsignallistener">addSignalListener()</db:link> call, from listening to a signal.</db:para>
<db:section xml:id="methods-public-boolean-removesignallistener-int-signallistenerid-parameters-31">
<db:title>Parameters</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">signalListenerId</db:emphasis>: the connection ID.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="methods-public-boolean-removesignallistener-int-signallistenerid-returns-32">
<db:title>Returns</db:title>
<db:para><db:emphasis>True</db:emphasis> if the connection ID is valid and has been successfully removed, otherwise returns false.</db:para>
</db:section>
</db:section>
<db:section xml:id="public-int-getstatus">
<db:title>public int getStatus()</db:title>
<db:anchor xml:id="getstatus"/>
<db:para>Gets the <db:link xlink:href="qtquickview-android-class.xml#status-values">status</db:link> of the QML component.</db:para>
<db:section xml:id="methods-public-int-getstatus-returns-34">
<db:title>Returns</db:title>
<db:para><db:emphasis>STATUS_READY</db:emphasis> when the QML is ready. Invoking methods that operate on the QML root object, such as <db:link xlink:href="qtquickview-android-class.xml#setproperty">setProperty()</db:link>, <db:link xlink:href="qtquickview-android-class.xml#getproperty">getProperty()</db:link>, and <db:link xlink:href="qtquickview-android-class.xml#addsignallistener">addSignalListener()</db:link>, would succeed <db:emphasis role="bold">only</db:emphasis> if the current status is STATUS_READY. It can also return other <db:link xlink:href="qtquickview-android-class.xml#status-values">status</db:link> values representing the status of the underlying <db:link xlink:href="qquickview.xml">QQuickView</db:link> instance.</db:para>
</db:section>
</db:section>
<db:section xml:id="public-void-setstatuschangelistener-statuschangelistener-listener">
<db:title>public void setStatusChangeListener(StatusChangeListener listener)</db:title>
<db:para>Sets a <db:link xlink:href="qtquickview-android-class.xml#statuschangelistener">StatusChangeListener</db:link> to listen to status changes.</db:para>
<db:section xml:id="methods-public-void-setstatuschangelistener-statuschangelistener-listener-parameters-36">
<db:title>Parameters</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">listener</db:emphasis>: an instance of a <db:link xlink:href="qtquickview-android-class.xml#statuschangelistener">StatusChangeListener</db:link> interface.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:section>
</db:article>
