<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Group Box Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Group Box example shows how to use the different kinds of group boxes in Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;window.h&quot;

Window::Window(QWidget *parent)
    : QWidget(parent)
{
    QGridLayout *grid = new QGridLayout;
    grid-&gt;addWidget(createFirstExclusiveGroup(), 0, 0);
    grid-&gt;addWidget(createSecondExclusiveGroup(), 1, 0);
    grid-&gt;addWidget(createNonExclusiveGroup(), 0, 1);
    grid-&gt;addWidget(createPushButtonGroup(), 1, 1);
    setLayout(grid);

    setWindowTitle(tr(&quot;Group Boxes&quot;));
    resize(480, 320);
}

QGroupBox *Window::createFirstExclusiveGroup()
{
    QGroupBox *groupBox = new QGroupBox(tr(&quot;Exclusive Radio Buttons&quot;));

    QRadioButton *radio1 = new QRadioButton(tr(&quot;&amp;Radio button 1&quot;));
    QRadioButton *radio2 = new QRadioButton(tr(&quot;R&amp;adio button 2&quot;));
    QRadioButton *radio3 = new QRadioButton(tr(&quot;Ra&amp;dio button 3&quot;));

    radio1-&gt;setChecked(true);

    QVBoxLayout *vbox = new QVBoxLayout;
    vbox-&gt;addWidget(radio1);
    vbox-&gt;addWidget(radio2);
    vbox-&gt;addWidget(radio3);
    vbox-&gt;addStretch(1);
    groupBox-&gt;setLayout(vbox);

    return groupBox;
}

QGroupBox *Window::createSecondExclusiveGroup()
{
    QGroupBox *groupBox = new QGroupBox(tr(&quot;E&amp;xclusive Radio Buttons&quot;));
    groupBox-&gt;setCheckable(true);
    groupBox-&gt;setChecked(false);

    QRadioButton *radio1 = new QRadioButton(tr(&quot;Rad&amp;io button 1&quot;));
    QRadioButton *radio2 = new QRadioButton(tr(&quot;Radi&amp;o button 2&quot;));
    QRadioButton *radio3 = new QRadioButton(tr(&quot;Radio &amp;button 3&quot;));
    radio1-&gt;setChecked(true);
    QCheckBox *checkBox = new QCheckBox(tr(&quot;Ind&amp;ependent checkbox&quot;));
    checkBox-&gt;setChecked(true);

    QVBoxLayout *vbox = new QVBoxLayout;
    vbox-&gt;addWidget(radio1);
    vbox-&gt;addWidget(radio2);
    vbox-&gt;addWidget(radio3);
    vbox-&gt;addWidget(checkBox);
    vbox-&gt;addStretch(1);
    groupBox-&gt;setLayout(vbox);

    return groupBox;
}

QGroupBox *Window::createNonExclusiveGroup()
{
    QGroupBox *groupBox = new QGroupBox(tr(&quot;Non-Exclusive Checkboxes&quot;));
    groupBox-&gt;setFlat(true);

    QCheckBox *checkBox1 = new QCheckBox(tr(&quot;&amp;Checkbox 1&quot;));
    QCheckBox *checkBox2 = new QCheckBox(tr(&quot;C&amp;heckbox 2&quot;));
    checkBox2-&gt;setChecked(true);
    QCheckBox *tristateBox = new QCheckBox(tr(&quot;Tri-&amp;state button&quot;));
    tristateBox-&gt;setTristate(true);
    tristateBox-&gt;setCheckState(Qt::PartiallyChecked);

    QVBoxLayout *vbox = new QVBoxLayout;
    vbox-&gt;addWidget(checkBox1);
    vbox-&gt;addWidget(checkBox2);
    vbox-&gt;addWidget(tristateBox);
    vbox-&gt;addStretch(1);
    groupBox-&gt;setLayout(vbox);

    return groupBox;
}

QGroupBox *Window::createPushButtonGroup()
{
    QGroupBox *groupBox = new QGroupBox(tr(&quot;&amp;Push Buttons&quot;));
    groupBox-&gt;setCheckable(true);
    groupBox-&gt;setChecked(true);

    QPushButton *pushButton = new QPushButton(tr(&quot;&amp;Normal Button&quot;));
    QPushButton *toggleButton = new QPushButton(tr(&quot;&amp;Toggle Button&quot;));
    toggleButton-&gt;setCheckable(true);
    toggleButton-&gt;setChecked(true);
    QPushButton *flatButton = new QPushButton(tr(&quot;&amp;Flat Button&quot;));
    flatButton-&gt;setFlat(true);

    QPushButton *popupButton = new QPushButton(tr(&quot;Pop&amp;up Button&quot;));
    QMenu *menu = new QMenu(this);
    menu-&gt;addAction(tr(&quot;&amp;First Item&quot;));
    menu-&gt;addAction(tr(&quot;&amp;Second Item&quot;));
    menu-&gt;addAction(tr(&quot;&amp;Third Item&quot;));
    menu-&gt;addAction(tr(&quot;F&amp;ourth Item&quot;));
    popupButton-&gt;setMenu(menu);

    QAction *newAction = menu-&gt;addAction(tr(&quot;Submenu&quot;));
    QMenu *subMenu = new QMenu(tr(&quot;Popup Submenu&quot;));
    subMenu-&gt;addAction(tr(&quot;Item 1&quot;));
    subMenu-&gt;addAction(tr(&quot;Item 2&quot;));
    subMenu-&gt;addAction(tr(&quot;Item 3&quot;));
    newAction-&gt;setMenu(subMenu);

    QVBoxLayout *vbox = new QVBoxLayout;
    vbox-&gt;addWidget(pushButton);
    vbox-&gt;addWidget(toggleButton);
    vbox-&gt;addWidget(flatButton);
    vbox-&gt;addWidget(popupButton);
    vbox-&gt;addStretch(1);
    groupBox-&gt;setLayout(vbox);

    return groupBox;
}

</db:programlisting>
</db:article>
