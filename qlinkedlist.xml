<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLinkedList Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QLinkedList</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> class is a template class that provides linked lists.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLinkedList</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QLinkedList is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>&lt;T&gt; is one of Qt's generic <db:link xlink:href="containers.xml">container classes</db:link>. It stores a list of values and provides iterator-based access as well as <db:link xlink:href="containers.xml#constant-time">constant time</db:link> insertions and removals.</db:para>
<db:para><db:link xlink:href="qlist.xml">QList</db:link>&lt;T&gt;, <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>&lt;T&gt;, and <db:link xlink:href="qvector.xml">QVector</db:link>&lt;T&gt; provide similar functionality. Here's an overview:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>For most purposes, <db:link xlink:href="qlist.xml">QList</db:link> is the right class to use. Its index-based API is more convenient than <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>'s iterator-based API, and it is usually faster than <db:link xlink:href="qvector.xml">QVector</db:link> because of the way it stores its items in memory (see <db:link xlink:href="containers.xml#algorithmic-complexity">Algorithmic Complexity</db:link> for details). It also expands to less code in your executable.</db:para>
</db:listitem>
<db:listitem>
<db:para>If you need a real linked list, with guarantees of <db:link xlink:href="containers.xml#constant-time">constant time</db:link> insertions in the middle of the list and iterators to items rather than indexes, use <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>If you want the items to occupy adjacent memory positions, use <db:link xlink:href="qvector.xml">QVector</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Here's an example of a <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> that stores integers and a <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> that stores <db:link xlink:href="qtime.xml">QTime</db:link> values:</db:para>
<db:programlisting language="cpp">QLinkedList&lt;int&gt; integerList;
QLinkedList&lt;QTime&gt; timeList;
</db:programlisting>
<db:para><db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> stores a list of items. The default constructor creates an empty list. To insert items into the list, you can use operator&lt;&lt;():</db:para>
<db:programlisting language="cpp">QLinkedList&lt;QString&gt; list;
list &lt;&lt; &quot;one&quot; &lt;&lt; &quot;two&quot; &lt;&lt; &quot;three&quot;;
// list: [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]
</db:programlisting>
<db:para>If you want to get the first or last item in a linked list, use first() or last(). If you want to remove an item from either end of the list, use removeFirst() or removeLast(). If you want to remove all occurrences of a given value in the list, use removeAll().</db:para>
<db:para>A common requirement is to remove the first or last item in the list and do something with it. For this, <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> provides takeFirst() and takeLast(). Here's a loop that removes the items from a list one at a time and calls delete on them:</db:para>
<db:programlisting language="cpp">QLinkedList&lt;QWidget *&gt; list;
...
while (!list.isEmpty())
    delete list.takeFirst();
</db:programlisting>
<db:para><db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>'s value type must be an <db:link xlink:href="containers.xml#assignable-data-type">assignable data type</db:link>. This covers most data types that are commonly used, but the compiler won't let you, for example, store a <db:link xlink:href="qwidget.xml">QWidget</db:link> as a value; instead, store a <db:link xlink:href="qwidget.xml">QWidget</db:link> *. A few functions have additional requirements; for example, <db:link xlink:href="qml-geoshape.xml#contains">contains()</db:link> and removeAll() expect the value type to support operator==(). These requirements are documented on a per-function basis.</db:para>
<db:para>If you want to insert, modify, or remove items in the middle of the list, you must use an iterator. <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> provides both <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link> (<db:link xlink:href="qlinkedlistiterator.xml">QLinkedListIterator</db:link> and <db:link xlink:href="qmutablelinkedlistiterator.xml">QMutableLinkedListIterator</db:link>) and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> (<db:link xlink:href="qlinkedlist-const-iterator.xml">QLinkedList::const_iterator</db:link> and <db:link xlink:href="qlinkedlist-iterator.xml">QLinkedList::iterator</db:link>). See the documentation for these classes for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlistiterator.xml">QLinkedListIterator</db:link></db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml">QMutableLinkedListIterator</db:link></db:member>
<db:member><db:link xlink:href="qlist.xml">QList</db:link></db:member>
<db:member><db:link xlink:href="qvector.xml">QVector</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ConstIterator-typedef">
<db:title>QLinkedList::ConstIterator</db:title>
<db:para>Qt-style synonym for <db:link xlink:href="qlinkedlist-const-iterator.xml">QLinkedList::const_iterator</db:link>.</db:para>
</db:section>
<db:section xml:id="Iterator-typedef">
<db:title>QLinkedList::Iterator</db:title>
<db:para>Qt-style synonym for <db:link xlink:href="qlinkedlist-iterator.xml">QLinkedList::iterator</db:link>.</db:para>
</db:section>
<db:section xml:id="const_pointer-typedef">
<db:title>QLinkedList::const_pointer</db:title>
<db:para>Typedef for const T *. Provided for STL compatibility.</db:para>
</db:section>
<db:section xml:id="const_reference-typedef">
<db:title>QLinkedList::const_reference</db:title>
<db:para>Typedef for const T &amp;. Provided for STL compatibility.</db:para>
</db:section>
<db:section xml:id="const_reverse_iterator-typedef">
<db:title>[since 5.6] QLinkedList::const_reverse_iterator</db:title>
<db:para>The QLinkedList::const_reverse_iterator typedef provides an STL-style const reverse iterator for <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>.</db:para>
<db:para>It is simply a typedef for std::reverse_iterator&lt;QLinkedList::const_iterator&gt;.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:para>This typedef was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QLinkedList::rbegin()</db:link></db:member>
<db:member><db:link xlink:href="">QLinkedList::rend()</db:link></db:member>
<db:member><db:link xlink:href="qlinkedlist.xml#reverse_iterator-typedef">QLinkedList::reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml">QLinkedList::const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="difference_type-typedef">
<db:title>QLinkedList::difference_type</db:title>
<db:para>Typedef for ptrdiff_t. Provided for STL compatibility.</db:para>
</db:section>
<db:section xml:id="pointer-typedef">
<db:title>QLinkedList::pointer</db:title>
<db:para>Typedef for T *. Provided for STL compatibility.</db:para>
</db:section>
<db:section xml:id="reference-typedef">
<db:title>QLinkedList::reference</db:title>
<db:para>Typedef for T &amp;. Provided for STL compatibility.</db:para>
</db:section>
<db:section xml:id="reverse_iterator-typedef">
<db:title>[since 5.6] QLinkedList::reverse_iterator</db:title>
<db:para>The QLinkedList::reverse_iterator typedef provides an STL-style non-const reverse iterator for <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>.</db:para>
<db:para>It is simply a typedef for std::reverse_iterator&lt;QLinkedList::iterator&gt;.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:para>This typedef was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QLinkedList::rbegin()</db:link></db:member>
<db:member><db:link xlink:href="">QLinkedList::rend()</db:link></db:member>
<db:member><db:link xlink:href="qlinkedlist.xml#const_reverse_iterator-typedef">QLinkedList::const_reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qlinkedlist-iterator.xml">QLinkedList::iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size_type-typedef">
<db:title>QLinkedList::size_type</db:title>
<db:para>Typedef for int. Provided for STL compatibility.</db:para>
</db:section>
<db:section xml:id="value_type-typedef">
<db:title>QLinkedList::value_type</db:title>
<db:para>Typedef for T. Provided for STL compatibility.</db:para>
</db:section>
</db:section>
</db:article>
