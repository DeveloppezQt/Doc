<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Sensors - C++ Sensor Gestures Example</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The sensor gesture example demonstrates the steps for creating a C++ application that uses sensor gestures and the included shake sensor.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensorgesturecpp.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>QSensorGestures class defines one predefined signal, <db:code>void detected(const QString &amp;)</db:code></db:para>
<db:para>As well, Sensor Gesture Recognizers may implement any number of their own custom signals.</db:para>
<db:para>Our shake recognizer defines one custom signal, <db:code>void shake()</db:code>, as well as the predefined detected signal.</db:para>
<db:section xml:id="sensorgestures-class-implementation">
<db:title>SensorGestures Class Implementation</db:title>
<db:para>In order to know about custom signals that may be available, we need to ask the <db:link xlink:href="qsensorgesturemanager.xml">QSensorGestureManager</db:link> about them,</db:para>
<db:para>Using the QSensorGesture::gestureIds() function, the manager will return a <db:link xlink:href="qstringlist.xml">QStringList</db:link> of known and valid gesture Ids.</db:para>
<db:programlisting language="cpp">QSensorGestureManager manager;

Q_FOREACH (const QString &amp;amp;gesture, manager.gestureIds()) {

    QTreeWidgetItem *gestureId = new QTreeWidgetItem(ui-&amp;gt;treeWidget);
    QStringList recognizerSignals =  manager.recognizerSignals(gesture);
    gestureId-&amp;gt;setText(0,gesture);

    for (int i = 0; i &amp;lt; recognizerSignals.count(); i++) {
        QTreeWidgetItem *oneSignal = new QTreeWidgetItem(gestureId);
        oneSignal-&amp;gt;setText(0,recognizerSignals.at(i));
    }
    ui-&amp;gt;treeWidget-&amp;gt;insertTopLevelItem(0,gestureId);
}
</db:programlisting>
<db:para>We can then use this to create a <db:link xlink:href="qsensorgesture.xml">QSensorGesture</db:link> object that we can use to connect signals to, and start the detection process. A <db:link xlink:href="qsensorgesture.xml">QSensorGesture</db:link> object will take a list of one or more recognizer ids in it's constructor.</db:para>
<db:programlisting language="cpp">QSensorGestureManager manager;
QSensorGesture *thisGesture = new QSensorGesture(QStringList() &amp;lt;&amp;lt; currentRecognizer, this);

if (currentRecognizer.contains(&quot;QtSensors.shake&quot;)) {
    connect(thisGesture,SIGNAL(shake()),
            this,SLOT(onShake()));
}

connect(thisGesture,SIGNAL(detected(QString)),
        this,SLOT(detectedShake(QString)));
thisGesture-&amp;gt;startDetection();
</db:programlisting>
<db:para>and later stop the detection process.</db:para>
<db:programlisting language="cpp">    recognizerMap[currentRecognizer]-&amp;gt;stopDetection();

    if (currentRecognizer == &quot;QtSensors.shake&quot;) {
        disconnect(recognizerMap[currentRecognizer],SIGNAL(shake()),
                   this,SLOT(onShake()));
    }
    disconnect(recognizerMap[currentRecognizer],SIGNAL(detected(QString)),
               this,SLOT(detectedShake(QString)));
</db:programlisting>
<db:para>The <db:link xlink:href="qsensorgesture.xml">QSensorGesture</db:link> object will contain all the signals of the valid requested recognizers found on the system.</db:para>
<db:para>You can discover which of the requested recognizer ID's that were not found by using <db:link xlink:href="qsensorgesture.xml#invalidIds">QSensorGesture::invalidIds</db:link>();</db:para>
<db:para>By using <db:link xlink:href="qsensorgesture.xml#gestureSignals">QSensorGesture::gestureSignals</db:link>(), you can get a <db:link xlink:href="qstringlist.xml">QStringList</db:link> of usable signals.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="sensorgestures/main.cpp">sensorgestures/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="sensorgestures/mainwindow.cpp">sensorgestures/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="sensorgestures/mainwindow.h">sensorgestures/mainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="sensorgestures/mainwindow.ui">sensorgestures/mainwindow.ui</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="sensorgestures/sensorgestures.pro">sensorgestures/sensorgestures.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
