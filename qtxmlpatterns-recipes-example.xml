<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Recipes Example</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using Qt XML Patterns to query XML data loaded from a file.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Recipes example shows how to use Qt XML Patterns to query XML data loaded from a file.</db:para>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>In this case, the XML data represents a cookbook, <db:code>cookbook.xml</db:code>, which contains <db:code>&lt;cookbook&gt;</db:code> as its document element, which in turn contains a sequence of <db:code>&lt;recipe&gt;</db:code> elements. This XML data is searched using queries stored in XQuery files (<db:code>*.xq</db:code>).</db:para>
<db:section xml:id="the-user-interface">
<db:title>The User Interface</db:title>
<db:para>The UI for this example was created using <db:link xlink:href="qtdesigner-manual.xml">Qt Designer</db:link>:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/recipes-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The UI consists of three <db:link xlink:href="qgroupbox.xml">group boxes</db:link> arranged vertically. The top one contains a <db:link xlink:href="qtextedit.xml">text viewer</db:link> that displays the XML text from the cookbook file. The middle group box contains a <db:link xlink:href="qcombobox.xml">combo box</db:link> for choosing the <db:link xlink:href="xquery-introduction.xml">XQuery</db:link> to run and a <db:link xlink:href="qtextedit.xml">text viewer</db:link> for displaying the text of the selected XQuery. The <db:code>.xq</db:code> files in the file list above are shown in the combo box menu. Choosing an XQuery loads, parses, and runs the selected XQuery. The query result is shown in the bottom group box's <db:link xlink:href="qtextedit.xml">text viewer</db:link>.</db:para>
</db:section>
<db:section xml:id="running-your-own-xqueries">
<db:title>Running your own XQueries</db:title>
<db:para>You can write your own XQuery files and run them in the example program. The file <db:code>xmlpatterns/recipes/recipes.qrc</db:code> is the <db:link xlink:href="resources.xml">resource file</db:link> for this example. It is used in <db:code>main.cpp</db:code> (<db:code>Q_INIT_RESOURCE(recipes);</db:code>). It lists the XQuery files (<db:code>.xq</db:code>) that can be selected in the combobox.</db:para>
<db:programlisting language="cpp">&lt;!DOCTYPE RCC&gt;&lt;RCC version=&quot;1.0&quot;&gt;
&lt;qresource&gt;
    &lt;file&gt;files/cookbook.xml&lt;/file&gt;
    &lt;file&gt;files/allRecipes.xq&lt;/file&gt;
    &lt;file&gt;files/liquidIngredientsInSoup.xq&lt;/file&gt;
    &lt;file&gt;files/mushroomSoup.xq&lt;/file&gt;
    &lt;file&gt;files/preparationLessThan30.xq&lt;/file&gt;
    &lt;file&gt;files/preparationTimes.xq&lt;/file&gt;
&lt;/qresource&gt;
&lt;/RCC&gt;

</db:programlisting>
<db:para>To add your own queries to the example's combobox, store your <db:code>.xq</db:code> files in the <db:code>examples/xmlpatterns/recipes/files</db:code> directory and add them to <db:code>recipes.qrc</db:code> as shown above.</db:para>
</db:section>
</db:section>
<db:section xml:id="code-walk-through">
<db:title>Code Walk-Through</db:title>
<db:para>The example's main() function creates the standard instance of <db:link xlink:href="qapplication.xml">QApplication</db:link>. Then it creates an instance of the UI class, shows it, and starts the Qt event loop:</db:para>
<db:programlisting language="cpp">int main(int argc, char* argv[])
{
    Q_INIT_RESOURCE(recipes);
    QApplication app(argc, argv);
    QueryMainWindow* const queryWindow = new QueryMainWindow;
    queryWindow-&gt;show();
    return app.exec();
}
</db:programlisting>
<db:section xml:id="the-ui-class-querymainwindow">
<db:title>The UI Class: QueryMainWindow</db:title>
<db:para>The example's UI is a conventional Qt GUI application inheriting <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> and the class generated by <db:link xlink:href="qtdesigner-manual.xml">Qt Designer</db:link>:</db:para>
<db:programlisting language="cpp">class QueryMainWindow : public QMainWindow,
                        private Ui::QueryWidget
{
    Q_OBJECT

public:
    QueryMainWindow();

public slots:
    void displayQuery(int index);

private:
    QComboBox* ui_defaultQueries;

    void evaluate(const QString &amp;str);
    void loadInputFile();
};
</db:programlisting>
<db:para>The constructor finds the window's <db:link xlink:href="qcombobox.xml">combo box</db:link> child widget and connects its <db:link xlink:href="qcombobox.xml#currentIndexChanged">currentIndexChanged</db:link>() signal to the window's <db:code>displayQuery()</db:code> slot. It then calls <db:code>loadInputFile()</db:code> to load <db:code>cookbook.xml</db:code> and display its contents in the top group box's <db:link xlink:href="qtextedit.xml">text viewer</db:link> . Finally, it finds the XQuery files (<db:code>.xq</db:code>) and adds each one to the <db:link xlink:href="qcombobox.xml">combo box</db:link> menu.</db:para>
<db:programlisting language="cpp">QueryMainWindow::QueryMainWindow() : ui_defaultQueries(0)
{
    setupUi(this);

    new XmlSyntaxHighlighter(findChild&lt;QTextEdit*&gt;(&quot;inputTextEdit&quot;)-&gt;document());
    new XmlSyntaxHighlighter(findChild&lt;QTextEdit*&gt;(&quot;outputTextEdit&quot;)-&gt;document());

    ui_defaultQueries = findChild&lt;QComboBox*&gt;(&quot;defaultQueries&quot;);
    QMetaObject::connectSlotsByName(this);
    connect(ui_defaultQueries, SIGNAL(currentIndexChanged(int)), SLOT(displayQuery(int)));

    loadInputFile();
    const QStringList queries(QDir(&quot;:/files/&quot;, &quot;*.xq&quot;).entryList());
    int len = queries.count();
    for(int i = 0; i &lt; len; ++i)
        ui_defaultQueries-&gt;addItem(queries.at(i));
    if (len &gt; 0)
        displayQuery(0);
}
</db:programlisting>
<db:para>The work is done in the <db:link xlink:href="qtxmlpatterns-recipes-example.xml#displayquery-slot">displayQuery()</db:link> slot and the <db:link xlink:href="qtxmlpatterns-recipes-example.xml#evaluate-function">evaluate()</db:link> function it calls. <db:link xlink:href="qtxmlpatterns-recipes-example.xml#displayquery-slot">displayQuery()</db:link> loads and displays the selected query file and passes the XQuery text to <db:link xlink:href="qtxmlpatterns-recipes-example.xml#evaluate-function">evaluate()</db:link>.</db:para>
<db:anchor xml:id="displayquery-slot"/>
<db:programlisting language="cpp">void QueryMainWindow::displayQuery(int index)
{
    QFile queryFile(QString(&quot;:files/&quot;) + ui_defaultQueries-&gt;itemText(index));
    queryFile.open(QIODevice::ReadOnly);
    const QString query(QString::fromLatin1(queryFile.readAll()));
    findChild&lt;QTextEdit*&gt;(&quot;queryTextEdit&quot;)-&gt;setPlainText(query);

    evaluate(query);
}
</db:programlisting>
<db:para><db:link xlink:href="qtxmlpatterns-recipes-example.xml#evaluate-function">evaluate()</db:link> demonstrates the standard Qt XML Patterns usage pattern. First, an instance of <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link> is created (<db:code>query</db:code>). The <db:code>query's</db:code> <db:link xlink:href="qxmlquery.xml#bindVariable">bindVariable</db:link>() function is then called to bind the <db:code>cookbook.xml</db:code> file to the XQuery variable <db:code>inputDocument</db:code>. <db:emphasis>After</db:emphasis> the variable is bound, <db:link xlink:href="qxmlquery.xml#setQuery">setQuery</db:link>() is called to pass the XQuery text to the <db:code>query</db:code>.</db:para>
<db:note>
<db:para><db:link xlink:href="qxmlquery.xml#setQuery">setQuery</db:link>() must be called <db:emphasis>after</db:emphasis> <db:link xlink:href="qxmlquery.xml#bindVariable">bindVariable</db:link>().</db:para>
</db:note>
<db:para>Passing the XQuery to <db:link xlink:href="qxmlquery.xml#setQuery">setQuery</db:link>() causes Qt XML Patterns to parse the XQuery. <db:link xlink:href="qxmlquery.xml#isValid">QXmlQuery::isValid</db:link>() is called to ensure that the XQuery was correctly parsed.</db:para>
<db:anchor xml:id="evaluate-function"/>
<db:programlisting language="cpp">void QueryMainWindow::evaluate(const QString &amp;str)
{
    QFile sourceDocument;
    sourceDocument.setFileName(&quot;:/files/cookbook.xml&quot;);
    sourceDocument.open(QIODevice::ReadOnly);

    QByteArray outArray;
    QBuffer buffer(&amp;outArray);
    buffer.open(QIODevice::ReadWrite);

    QXmlQuery query;
    query.bindVariable(&quot;inputDocument&quot;, &amp;sourceDocument);
    query.setQuery(str);
    if (!query.isValid())
        return;

    QXmlFormatter formatter(query, &amp;buffer);
    if (!query.evaluateTo(&amp;formatter))
        return;

    buffer.close();
    findChild&lt;QTextEdit*&gt;(&quot;outputTextEdit&quot;)-&gt;setPlainText(QString::fromUtf8(outArray.constData()));

}
</db:programlisting>
<db:para>If the XQuery is valid, an instance of <db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link> is created to format the query result as XML into a <db:link xlink:href="qbuffer.xml">QBuffer</db:link>. To evaluate the XQuery, an overload of <db:link xlink:href="qxmlquery.xml#evaluateTo">evaluateTo</db:link>() is called that takes a <db:link xlink:href="qabstractxmlreceiver.xml">QAbstractXmlReceiver</db:link> for its output (<db:link xlink:href="qxmlformatter.xml">QXmlFormatter</db:link> inherits <db:link xlink:href="qabstractxmlreceiver.xml">QAbstractXmlReceiver</db:link>). Finally, the formatted XML result is displayed in the UI's bottom text view.</db:para>
<db:note>
<db:para>Each XQuery <db:code>.xq</db:code> file must declare the <db:code>$inputDocument</db:code> variable to represent the <db:code>cookbook.xml</db:code> document:</db:para>
</db:note>
<db:programlisting language="cpp" role="bad">(: All ingredients for Mushroom Soup. :)
declare variable $inputDocument external;

doc($inputDocument)/cookbook/recipe[@xml:id = &quot;MushroomSoup&quot;]/ingredient/
&lt;p&gt;{@name, @quantity}&lt;/p&gt;
</db:programlisting>
<db:note>
<db:para>If you add add your own query.xq files, you must declare the <db:code>$inputDocument</db:code> and use it as shown above.</db:para>
</db:note>
</db:section>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="recipes/files/allRecipes.xq">recipes/files/allRecipes.xq</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="recipes/files/cookbook.xml">recipes/files/cookbook.xml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="recipes/files/liquidIngredientsInSoup.xq">recipes/files/liquidIngredientsInSoup.xq</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="recipes/files/mushroomSoup.xq">recipes/files/mushroomSoup.xq</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="recipes/files/preparationLessThan30.xq">recipes/files/preparationLessThan30.xq</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="recipes/files/preparationTimes.xq">recipes/files/preparationTimes.xq</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="recipes/forms/querywidget.ui">recipes/forms/querywidget.ui</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="recipes/forms/querywidget_mobiles.ui">recipes/forms/querywidget_mobiles.ui</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="recipes/main.cpp">recipes/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="recipes/querymainwindow.cpp">recipes/querymainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="recipes/querymainwindow.h">recipes/querymainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="recipes/recipes.pro">recipes/recipes.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="recipes/recipes.qrc">recipes/recipes.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
