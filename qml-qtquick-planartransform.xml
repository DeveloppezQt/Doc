<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PlanarTransform QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides utility functions for matrix4x4 when used for 2D transforms.</db:para>
<db:para>This type was introduced in Qt 6.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.8</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The PlanarTransform is a global object with utility functions.</db:para>
<db:para>It is not instantiable; to use it, call the members of the global PlanarTransform object directly. For example:</db:para>
<db:programlisting language="qml">Item {
    transform: Matrix4x4 { matrix: PlanarTransform.fromAffineMatrix(1, 0, 0.36, 1, -36, 0) }
}
</db:programlisting>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="fromAffineMatrix-method">
<db:title>matrix4x4 fromAffineMatrix(real <db:emphasis>scaleX</db:emphasis>, real <db:emphasis>shearY</db:emphasis>, real <db:emphasis>shearX</db:emphasis>, real <db:emphasis>scaleY</db:emphasis>, real <db:emphasis>translateX</db:emphasis>, real <db:emphasis>translateY</db:emphasis>)</db:title>
<db:para>Returns a matrix4x4 for an affine (non-projecting) 2D transform with the specified values.</db:para>
<db:para>This method and its argument order correspond to SVG's matrix() function and the six-argument <db:link xlink:href="qtransform.xml">QTransform</db:link> constructor. The result is this 4x4 matrix:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:code role="parameter">scaleX</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">shearX</db:code></db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">translateX</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code role="parameter">shearY</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">scaleY</db:code></db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">translateY</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="fromRotate-method">
<db:title>matrix4x4 fromRotate(real <db:emphasis>angle</db:emphasis>, real <db:emphasis>originX</db:emphasis>, real <db:emphasis>originY</db:emphasis>)</db:title>
<db:para>Returns a matrix4x4 for a 2D transform that rotates by <db:code role="parameter">angle</db:code> degrees around the point (<db:code role="parameter">originX</db:code>, <db:code role="parameter">originY</db:code>).</db:para>
<db:para><db:code role="parameter">originX</db:code> and <db:code role="parameter">originY</db:code> are optional and default to (0, 0).</db:para>
</db:section>
<db:section xml:id="fromScale-method">
<db:title>matrix4x4 fromScale(real <db:emphasis>scaleX</db:emphasis>, real <db:emphasis>scaleY</db:emphasis>, real <db:emphasis>originX</db:emphasis>, real <db:emphasis>originY</db:emphasis>)</db:title>
<db:para>Returns a matrix4x4 for a 2D transform that scales by <db:code role="parameter">scaleX</db:code> horizontally and <db:code role="parameter">scaleY</db:code> vertically, centered at the point (<db:code role="parameter">originX</db:code>, <db:code role="parameter">originY</db:code>).</db:para>
<db:para><db:code role="parameter">originX</db:code> and <db:code role="parameter">originY</db:code> are optional and default to (0, 0).</db:para>
</db:section>
<db:section xml:id="fromShear-method">
<db:title>matrix4x4 fromShear(float <db:emphasis>shearX</db:emphasis>, float <db:emphasis>shearY</db:emphasis>, float <db:emphasis>originX</db:emphasis>, float <db:emphasis>originY</db:emphasis>)</db:title>
<db:para>Returns a matrix4x4 for a 2D transform that shears by <db:code role="parameter">shearX</db:code> horizontally and <db:code role="parameter">shearY</db:code> vertically, centered at the point (<db:code role="parameter">originX</db:code>, <db:code role="parameter">originY</db:code>).</db:para>
<db:para><db:code role="parameter">originX</db:code> and <db:code role="parameter">originY</db:code> are optional and default to (0, 0).</db:para>
</db:section>
<db:section xml:id="fromTranslate-method">
<db:title>matrix4x4 fromTranslate(real <db:emphasis>translateX</db:emphasis>, real <db:emphasis>translateY</db:emphasis>)</db:title>
<db:para>Returns a matrix4x4 for a 2D transform that translates by <db:code role="parameter">translateX</db:code> horizontally and <db:code role="parameter">translateY</db:code> vertically.</db:para>
</db:section>
<db:section xml:id="identity-method">
<db:title>matrix4x4 identity()</db:title>
<db:para>Returns a matrix4x4 for the identity transform.</db:para>
<db:para>This is equivalent to <db:link xlink:href="qml-qtqml-qt.xml#matrix4x4-method">Qt::matrix4x4</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
