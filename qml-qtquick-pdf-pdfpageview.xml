<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PdfPageView QML Type</db:title>
<db:productname>QtPdf</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Pdf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A PDF viewer component to show one page a time.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Pdf</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Rectangle</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml">PdfPageView</db:link> provides a PDF viewer component that shows one whole page at a time, without scrolling. It supports selecting text and copying it to the clipboard, zooming in and out, clicking an internal link to jump to another section in the document, rotating the view, and searching for text.</db:para>
<db:para>The implementation is a QML assembly of smaller building blocks that are available separately. In case you want to make changes in your own version of this component, you can copy the QML, which is installed into the <db:code>QtQuick/Pdf/qml</db:code> module directory, and modify it as needed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfscrollablepageview.xml">PdfScrollablePageView</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfmultipageview.xml">PdfMultiPageView</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfstyle.xml">PdfStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="backEnabled-prop">
<db:title>[read-only] backEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>backEnabled</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property indicates if it is possible to go back in the navigation history to a previous-viewed page.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpagenavigator.xml#backAvailable-prop">PdfPageNavigator::backAvailable</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#back-method">back</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentPage-prop">
<db:title>[read-only] currentPage : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>currentPage</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the zero-based page number of the page visible in the scrollable view. If there is no current page, it holds -1.</db:para>
<db:para>This property is read-only, and is typically used in a binding (or <db:code>onCurrentPageChanged</db:code> script) to update the part of the user interface that shows the current page number, such as a <db:link xlink:href="qml-qtquick-controls-spinbox.xml">SpinBox</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpagenavigator.xml#currentPage-prop">PdfPageNavigator::currentPage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="document-prop">
<db:title>[required] document : PdfDocument</db:title>
<db:fieldsynopsis>
<db:type>PdfDocument</db:type>
<db:varname>document</db:varname>
<db:modifier>writable</db:modifier>
<db:modifier>required</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>A <db:link xlink:href="qml-qtquick-pdf-pdfdocument.xml">PdfDocument</db:link> object with a valid <db:code>source</db:code> URL is required:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Pdf

PdfMultiPageView {
    document: PdfDocument { source: &quot;my.pdf&quot; }
}
</db:programlisting>
</db:section>
<db:section xml:id="forwardEnabled-prop">
<db:title>[read-only] forwardEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>forwardEnabled</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property indicates if it is possible to go to next location in the navigation history.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpagenavigator.xml#forwardAvailable-prop">PdfPageNavigator::forwardAvailable</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#forward-method">forward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderScale-prop">
<db:title>renderScale : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>renderScale</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the ratio of pixels to points. The default is <db:code>1</db:code>, meaning one point (1/72 of an inch) equals 1 logical pixel.</db:para>
</db:section>
<db:section xml:id="searchModel-prop">
<db:title>searchModel : PdfSearchModel</db:title>
<db:fieldsynopsis>
<db:type>PdfSearchModel</db:type>
<db:varname>searchModel</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a <db:link xlink:href="qml-qtquick-pdf-pdfsearchmodel.xml">PdfSearchModel</db:link> containing the list of search results for a given <db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#searchString-prop">searchString</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfsearchmodel.xml">PdfSearchModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="searchString-prop">
<db:title>searchString : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>searchString</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the search string that the user may choose to search for. It is typically used in a binding to the <db:code>text</db:code> property of a <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#searchModel-prop">searchModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedText-prop">
<db:title>selectedText : PdfDocument</db:title>
<db:fieldsynopsis>
<db:type>PdfDocument</db:type>
<db:varname>selectedText</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The selected text.</db:para>
</db:section>
<db:section xml:id="sourceSize-prop">
<db:title>sourceSize : size</db:title>
<db:fieldsynopsis>
<db:type>size</db:type>
<db:varname>sourceSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the scaled width and height of the full-frame image.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">Image.sourceSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status-prop">
<db:title>status : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>status</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the <db:link xlink:href="qml-qtquick-image.xml#status-prop">rendering status</db:link> of the <db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#currentPage-prop">current page</db:link>.</db:para>
</db:section>
<db:section xml:id="zoomEnabled-prop">
<db:title>zoomEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>zoomEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the user can use the pinch gesture or Control + mouse wheel to zoom. The default is <db:code>true</db:code>.</db:para>
<db:para>When the user zooms the page, the size of <db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml">PdfPageView</db:link> changes.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="back-method">
<db:title>void back()</db:title>
<db:para>Scrolls the view back to the previous page that the user visited most recently; or does nothing if there is no previous location on the navigation stack.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpagenavigator.xml#back-method">PdfPageNavigator::back</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#currentPage-prop">currentPage</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#backEnabled-prop">backEnabled</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copySelectionToClipboard-method">
<db:title>void copySelectionToClipboard()</db:title>
<db:para>Copies the selected text (if any) to the <db:link xlink:href="qclipboard.xml#Mode-enum">system clipboard</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#selectAll-method">selectAll</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="forward-method">
<db:title>void forward()</db:title>
<db:para>Scrolls the view to the page that the user was viewing when the <db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#back-method">back</db:link>() method was called; or does nothing if there is no &quot;next&quot; location on the navigation stack.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpagenavigator.xml#forward-method">PdfPageNavigator::forward</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#currentPage-prop">currentPage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="goToLocation-method">
<db:title>void goToLocation(int <db:emphasis>page</db:emphasis>, point <db:emphasis>location</db:emphasis>, real <db:emphasis>zoom</db:emphasis>)</db:title>
<db:para>Scrolls the view to the <db:code role="parameter">location</db:code> on the <db:code role="parameter">page</db:code>, if possible, and sets the <db:code role="parameter">zoom</db:code> level.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpagenavigator.xml#jump-method">PdfPageNavigator::jump</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#currentPage-prop">currentPage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="goToPage-method">
<db:title>void goToPage(int <db:emphasis>page</db:emphasis>)</db:title>
<db:para>Changes the view to the <db:code role="parameter">page</db:code>, if possible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpagenavigator.xml#jump-method">PdfPageNavigator::jump</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#currentPage-prop">currentPage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetScale-method">
<db:title>void resetScale()</db:title>
<db:para>Sets <db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#renderScale-prop">renderScale</db:link> back to its default value of <db:code>1</db:code>.</db:para>
</db:section>
<db:section xml:id="scaleToPage-method">
<db:title>void scaleToPage(real <db:emphasis>width</db:emphasis>, real <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#renderScale-prop">renderScale</db:link> such that the whole first page will fit into a viewport with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>. The resulting <db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#renderScale-prop">renderScale</db:link> depends on page rotation: the page will fit into the viewport at a larger size if it is first rotated to have a matching aspect ratio.</db:para>
</db:section>
<db:section xml:id="scaleToWidth-method">
<db:title>void scaleToWidth(real <db:emphasis>width</db:emphasis>, real <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#renderScale-prop">renderScale</db:link> such that the width of the first page will fit into a viewport with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>. If the page is not rotated, it will be scaled so that its width fits <db:code role="parameter">width</db:code>. If it is rotated +/- 90 degrees, it will be scaled so that its width fits <db:code role="parameter">height</db:code>.</db:para>
</db:section>
<db:section xml:id="searchBack-method">
<db:title>void searchBack()</db:title>
<db:para>Decrements the <db:link xlink:href="qml-qtquick-pdf-pdfsearchmodel.xml#currentResult-prop">searchModel's current result</db:link> so that the view will jump to the previous search result.</db:para>
</db:section>
<db:section xml:id="searchForward-method">
<db:title>void searchForward()</db:title>
<db:para>Increments the <db:link xlink:href="qml-qtquick-pdf-pdfsearchmodel.xml#currentResult-prop">searchModel's current result</db:link> so that the view will jump to the next search result.</db:para>
</db:section>
<db:section xml:id="selectAll-method">
<db:title>void selectAll()</db:title>
<db:para>Selects all the text on the <db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#currentPage-prop">current page</db:link>, and makes it available as the system <db:link xlink:href="qclipboard.xml#Mode-enum">selection</db:link> on systems that support that feature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pdf-pdfpageview.xml#copySelectionToClipboard-method">copySelectionToClipboard</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
