<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scatter Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using <db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link> in a widget application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;scatterdatamodifier.h&quot;

#include &amp;lt;QtWidgets/QApplication&amp;gt;
#include &amp;lt;QtWidgets/QWidget&amp;gt;
#include &amp;lt;QtWidgets/QHBoxLayout&amp;gt;
#include &amp;lt;QtWidgets/QVBoxLayout&amp;gt;
#include &amp;lt;QtWidgets/QPushButton&amp;gt;
#include &amp;lt;QtWidgets/QCheckBox&amp;gt;
#include &amp;lt;QtWidgets/QComboBox&amp;gt;
#include &amp;lt;QtWidgets/QFontComboBox&amp;gt;
#include &amp;lt;QtWidgets/QLabel&amp;gt;
#include &amp;lt;QtWidgets/QMessageBox&amp;gt;
#include &amp;lt;QtGui/QScreen&amp;gt;
#include &amp;lt;QtGui/QFontDatabase&amp;gt;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);
    Q3DScatter *graph = new Q3DScatter();
    QWidget *container = QWidget::createWindowContainer(graph);

    if (!graph-&amp;gt;hasContext()) {
        QMessageBox msgBox;
        msgBox.setText(&quot;Couldn't initialize the OpenGL context.&quot;);
        msgBox.exec();
        return -1;
    }

    QSize screenSize = graph-&amp;gt;screen()-&amp;gt;size();
    container-&amp;gt;setMinimumSize(QSize(screenSize.width() / 2, screenSize.height() / 1.5));
    container-&amp;gt;setMaximumSize(screenSize);
    container-&amp;gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    container-&amp;gt;setFocusPolicy(Qt::StrongFocus);

    QWidget *widget = new QWidget;
    QHBoxLayout *hLayout = new QHBoxLayout(widget);
    QVBoxLayout *vLayout = new QVBoxLayout();
    hLayout-&amp;gt;addWidget(container, 1);
    hLayout-&amp;gt;addLayout(vLayout);

    widget-&amp;gt;setWindowTitle(QStringLiteral(&quot;A Cosine Wave&quot;));

    QComboBox *themeList = new QComboBox(widget);
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Qt&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Primary Colors&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Digia&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Stone Moss&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Army Blue&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Retro&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Ebony&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Isabelle&quot;));
    themeList-&amp;gt;setCurrentIndex(6);

    QPushButton *labelButton = new QPushButton(widget);
    labelButton-&amp;gt;setText(QStringLiteral(&quot;Change label style&quot;));

    QCheckBox *smoothCheckBox = new QCheckBox(widget);
    smoothCheckBox-&amp;gt;setText(QStringLiteral(&quot;Smooth dots&quot;));
    smoothCheckBox-&amp;gt;setChecked(true);

    QComboBox *itemStyleList = new QComboBox(widget);
    itemStyleList-&amp;gt;addItem(QStringLiteral(&quot;Sphere&quot;), int(QAbstract3DSeries::MeshSphere));
    itemStyleList-&amp;gt;addItem(QStringLiteral(&quot;Cube&quot;), int(QAbstract3DSeries::MeshCube));
    itemStyleList-&amp;gt;addItem(QStringLiteral(&quot;Minimal&quot;), int(QAbstract3DSeries::MeshMinimal));
    itemStyleList-&amp;gt;addItem(QStringLiteral(&quot;Point&quot;), int(QAbstract3DSeries::MeshPoint));
    itemStyleList-&amp;gt;setCurrentIndex(0);

    QPushButton *cameraButton = new QPushButton(widget);
    cameraButton-&amp;gt;setText(QStringLiteral(&quot;Change camera preset&quot;));

    QPushButton *itemCountButton = new QPushButton(widget);
    itemCountButton-&amp;gt;setText(QStringLiteral(&quot;Toggle item count&quot;));

    QCheckBox *backgroundCheckBox = new QCheckBox(widget);
    backgroundCheckBox-&amp;gt;setText(QStringLiteral(&quot;Show background&quot;));
    backgroundCheckBox-&amp;gt;setChecked(true);

    QCheckBox *gridCheckBox = new QCheckBox(widget);
    gridCheckBox-&amp;gt;setText(QStringLiteral(&quot;Show grid&quot;));
    gridCheckBox-&amp;gt;setChecked(true);

    QComboBox *shadowQuality = new QComboBox(widget);
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;None&quot;));
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;Low&quot;));
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;Medium&quot;));
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;High&quot;));
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;Low Soft&quot;));
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;Medium Soft&quot;));
    shadowQuality-&amp;gt;addItem(QStringLiteral(&quot;High Soft&quot;));
    shadowQuality-&amp;gt;setCurrentIndex(4);

    QFontComboBox *fontList = new QFontComboBox(widget);
    fontList-&amp;gt;setCurrentFont(QFont(&quot;Arial&quot;));

    vLayout-&amp;gt;addWidget(labelButton, 0, Qt::AlignTop);
    vLayout-&amp;gt;addWidget(cameraButton, 0, Qt::AlignTop);
    vLayout-&amp;gt;addWidget(itemCountButton, 0, Qt::AlignTop);
    vLayout-&amp;gt;addWidget(backgroundCheckBox);
    vLayout-&amp;gt;addWidget(gridCheckBox);
    vLayout-&amp;gt;addWidget(smoothCheckBox, 0, Qt::AlignTop);
    vLayout-&amp;gt;addWidget(new QLabel(QStringLiteral(&quot;Change dot style&quot;)));
    vLayout-&amp;gt;addWidget(itemStyleList);
    vLayout-&amp;gt;addWidget(new QLabel(QStringLiteral(&quot;Change theme&quot;)));
    vLayout-&amp;gt;addWidget(themeList);
    vLayout-&amp;gt;addWidget(new QLabel(QStringLiteral(&quot;Adjust shadow quality&quot;)));
    vLayout-&amp;gt;addWidget(shadowQuality);
    vLayout-&amp;gt;addWidget(new QLabel(QStringLiteral(&quot;Change font&quot;)));
    vLayout-&amp;gt;addWidget(fontList, 1, Qt::AlignTop);

    ScatterDataModifier *modifier = new ScatterDataModifier(graph);

    QObject::connect(cameraButton, &amp;amp;QPushButton::clicked, modifier,
                     &amp;amp;ScatterDataModifier::changePresetCamera);
    QObject::connect(labelButton, &amp;amp;QPushButton::clicked, modifier,
                     &amp;amp;ScatterDataModifier::changeLabelStyle);
    QObject::connect(itemCountButton, &amp;amp;QPushButton::clicked, modifier,
                     &amp;amp;ScatterDataModifier::toggleItemCount);

    QObject::connect(backgroundCheckBox, &amp;amp;QCheckBox::stateChanged, modifier,
                     &amp;amp;ScatterDataModifier::setBackgroundEnabled);
    QObject::connect(gridCheckBox, &amp;amp;QCheckBox::stateChanged, modifier,
                     &amp;amp;ScatterDataModifier::setGridEnabled);
    QObject::connect(smoothCheckBox, &amp;amp;QCheckBox::stateChanged, modifier,
                     &amp;amp;ScatterDataModifier::setSmoothDots);

    QObject::connect(modifier, &amp;amp;ScatterDataModifier::backgroundEnabledChanged,
                     backgroundCheckBox, &amp;amp;QCheckBox::setChecked);
    QObject::connect(modifier, &amp;amp;ScatterDataModifier::gridEnabledChanged,
                     gridCheckBox, &amp;amp;QCheckBox::setChecked);
    QObject::connect(itemStyleList, SIGNAL(currentIndexChanged(int)), modifier,
                     SLOT(changeStyle(int)));

    QObject::connect(themeList, SIGNAL(currentIndexChanged(int)), modifier,
                     SLOT(changeTheme(int)));

    QObject::connect(shadowQuality, SIGNAL(currentIndexChanged(int)), modifier,
                     SLOT(changeShadowQuality(int)));

    QObject::connect(modifier, &amp;amp;ScatterDataModifier::shadowQualityChanged, shadowQuality,
                     &amp;amp;QComboBox::setCurrentIndex);
    QObject::connect(graph, &amp;amp;Q3DScatter::shadowQualityChanged, modifier,
                     &amp;amp;ScatterDataModifier::shadowQualityUpdatedByVisual);

    QObject::connect(fontList, &amp;amp;QFontComboBox::currentFontChanged, modifier,
                     &amp;amp;ScatterDataModifier::changeFont);

    QObject::connect(modifier, &amp;amp;ScatterDataModifier::fontChanged, fontList,
                     &amp;amp;QFontComboBox::setCurrentFont);

    widget-&amp;gt;show();
    return app.exec();
}

</db:programlisting>
</db:article>
