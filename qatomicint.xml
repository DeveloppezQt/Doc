<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QAtomicInt Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> class provides platform-independent atomic operations on integers.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAtomicInt</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAtomicInt is part of <db:simplelist><db:member>thread</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>For atomic operations on pointers, see the <db:link xlink:href="qatomicpointer.xml">QAtomicPointer</db:link> class.</db:para>
<db:para>An <db:emphasis>atomic</db:emphasis> operation is a complex operation that completes without interruption. The <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> class provides atomic reference counting, test-and-set, fetch-and-store, and fetch-and-add for integers.</db:para>
<db:section xml:id="the-atomic-api">
<db:title>The Atomic API</db:title>
<db:section xml:id="reference-counting">
<db:title>Reference counting</db:title>
<db:para>The <db:link xlink:href="qatomicint.xml#ref">ref</db:link>() and <db:link xlink:href="qatomicint.xml#deref">deref</db:link>() functions provide an efficient reference counting API. The return value of these functions are used to indicate when the last reference has been released. These functions allow you to implement your own implicitly shared classes.</db:para>
<db:programlisting language="cpp">MySharedType &amp;MySharedType::operator=(const MySharedType &amp;other)
{
    (void) other.data-&gt;atomicInt.ref();
    if (!data-&gt;atomicInt.deref()) {
        // The last reference has been released
        delete d;
    }
    d = other.d;
    return *this;
}
</db:programlisting>
</db:section>
<db:section xml:id="memory-ordering">
<db:title>Memory ordering</db:title>
<db:para><db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> provides several implementations of the atomic test-and-set, fetch-and-store, and fetch-and-add functions. Each implementation defines a memory ordering semantic that describes how memory accesses surrounding the atomic instruction are executed by the processor. Since many modern architectures allow out-of-order execution and memory ordering, using the correct semantic is necessary to ensure that your application functions properly on all processors.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Relaxed - memory ordering is unspecified, leaving the compiler and processor to freely reorder memory accesses.</db:para>
</db:listitem>
<db:listitem>
<db:para>Acquire - memory access following the atomic operation (in program order) may not be re-ordered before the atomic operation.</db:para>
</db:listitem>
<db:listitem>
<db:para>Release - memory access before the atomic operation (in program order) may not be re-ordered after the atomic operation.</db:para>
</db:listitem>
<db:listitem>
<db:para>Ordered - the same Acquire and Release semantics combined.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="test-and-set">
<db:title>Test-and-set</db:title>
<db:para>If the current value of the <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> is an expected value, the test-and-set functions assign a new value to the <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and return true. If values are <db:code role="parameter">not</db:code> the same, these functions do nothing and return false. This operation equates to the following code:</db:para>
<db:programlisting language="cpp">if (currentValue == expectedValue) {
    currentValue = newValue;
    return true;
}
return false;
</db:programlisting>
<db:para>There are 4 test-and-set functions: <db:link xlink:href="qatomicint.xml#testAndSetRelaxed">testAndSetRelaxed</db:link>(), <db:link xlink:href="qatomicint.xml#testAndSetAcquire">testAndSetAcquire</db:link>(), <db:link xlink:href="qatomicint.xml#testAndSetRelease">testAndSetRelease</db:link>(), and <db:link xlink:href="qatomicint.xml#testAndSetOrdered">testAndSetOrdered</db:link>(). See above for an explanation of the different memory ordering semantics.</db:para>
</db:section>
<db:section xml:id="fetch-and-store">
<db:title>Fetch-and-store</db:title>
<db:para>The atomic fetch-and-store functions read the current value of the <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and then assign a new value, returning the original value. This operation equates to the following code:</db:para>
<db:programlisting language="cpp">int originalValue = currentValue;
currentValue = newValue;
return originalValue;
</db:programlisting>
<db:para>There are 4 fetch-and-store functions: <db:link xlink:href="qatomicint.xml#fetchAndStoreRelaxed">fetchAndStoreRelaxed</db:link>(), <db:link xlink:href="qatomicint.xml#fetchAndStoreAcquire">fetchAndStoreAcquire</db:link>(), <db:link xlink:href="qatomicint.xml#fetchAndStoreRelease">fetchAndStoreRelease</db:link>(), and <db:link xlink:href="qatomicint.xml#fetchAndStoreOrdered">fetchAndStoreOrdered</db:link>(). See above for an explanation of the different memory ordering semantics.</db:para>
</db:section>
<db:section xml:id="fetch-and-add">
<db:title>Fetch-and-add</db:title>
<db:para>The atomic fetch-and-add functions read the current value of the <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and then add the given value to the current value, returning the original value. This operation equates to the following code:</db:para>
<db:programlisting language="cpp">int originalValue = currentValue;
currentValue += valueToAdd;
return originalValue;
</db:programlisting>
<db:para>There are 4 fetch-and-add functions: <db:link xlink:href="qatomicint.xml#fetchAndAddRelaxed">fetchAndAddRelaxed</db:link>(), <db:link xlink:href="qatomicint.xml#fetchAndAddAcquire">fetchAndAddAcquire</db:link>(), <db:link xlink:href="qatomicint.xml#fetchAndAddRelease">fetchAndAddRelease</db:link>(), and <db:link xlink:href="qatomicint.xml#fetchAndAddOrdered">fetchAndAddOrdered</db:link>(). See above for an explanation of the different memory ordering semantics.</db:para>
</db:section>
</db:section>
<db:section xml:id="feature-tests-for-the-atomic-api">
<db:title>Feature Tests for the Atomic API</db:title>
<db:para>Providing a platform-independent atomic API that works on all processors is challenging. The API provided by <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> is guaranteed to work atomically on all processors. However, since not all processors implement support for every operation provided by <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link>, it is necessary to expose information about the processor.</db:para>
<db:para>You can check at compile time which features are supported on your hardware using various macros. These will tell you if your hardware always, sometimes, or does not support a particular operation. The macros have the form Q_ATOMIC_INT_<db:emphasis>OPERATION</db:emphasis>_IS_<db:emphasis>HOW</db:emphasis>_NATIVE. <db:emphasis>OPERATION</db:emphasis> is one of <db:link xlink:href="qatomicint.xml#reference-counting">REFERENCE_COUNTING</db:link>, <db:link xlink:href="qatomicpointer.xml#test-and-set">TEST_AND_SET</db:link>, <db:link xlink:href="qatomicpointer.xml#fetch-and-store">FETCH_AND_STORE</db:link>, or <db:link xlink:href="qatomicpointer.xml#fetch-and-add">FETCH_AND_ADD</db:link>, and <db:emphasis>HOW</db:emphasis> is one of ALWAYS, SOMETIMES, or NOT. There will always be exactly one defined macro per operation. For example, if <db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE">Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE</db:link> is defined, neither <db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE">Q_ATOMIC_INT_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE</db:link> nor <db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE">Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE</db:link> will be defined.</db:para>
<db:para>An operation that completes in constant time is said to be wait-free. Such operations are not implemented using locks or loops of any kind. For atomic operations that are always supported, and that are wait-free, Qt defines the Q_ATOMIC_INT_<db:emphasis>OPERATION</db:emphasis>_IS_WAIT_FREE in addition to the Q_ATOMIC_INT_<db:emphasis>OPERATION</db:emphasis>_IS_ALWAYS_NATIVE.</db:para>
<db:para>In cases where an atomic operation is only supported in newer generations of the processor, <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> also provides a way to check at runtime what your hardware supports with the <db:link xlink:href="qatomicint.xml#isReferenceCountingNative">isReferenceCountingNative</db:link>(), <db:link xlink:href="qatomicint.xml#isTestAndSetNative">isTestAndSetNative</db:link>(), <db:link xlink:href="qatomicint.xml#isFetchAndStoreNative">isFetchAndStoreNative</db:link>(), and <db:link xlink:href="qatomicint.xml#isFetchAndAddNative">isFetchAndAddNative</db:link>() functions. Wait-free implementations can be detected using the <db:link xlink:href="qatomicint.xml#isReferenceCountingWaitFree">isReferenceCountingWaitFree</db:link>(), <db:link xlink:href="qatomicint.xml#isTestAndSetWaitFree">isTestAndSetWaitFree</db:link>(), <db:link xlink:href="qatomicint.xml#isFetchAndStoreWaitFree">isFetchAndStoreWaitFree</db:link>(), and <db:link xlink:href="qatomicint.xml#isFetchAndAddWaitFree">isFetchAndAddWaitFree</db:link>() functions.</db:para>
<db:para>Below is a complete list of all feature macros for <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE">Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE">Q_ATOMIC_INT_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE">Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_REFERENCE_COUNTING_IS_WAIT_FREE">Q_ATOMIC_INT_REFERENCE_COUNTING_IS_WAIT_FREE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE">Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_TEST_AND_SET_IS_SOMETIMES_NATIVE">Q_ATOMIC_INT_TEST_AND_SET_IS_SOMETIMES_NATIVE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE">Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE">Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE">Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_FETCH_AND_STORE_IS_SOMETIMES_NATIVE">Q_ATOMIC_INT_FETCH_AND_STORE_IS_SOMETIMES_NATIVE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_FETCH_AND_STORE_IS_NOT_NATIVE">Q_ATOMIC_INT_FETCH_AND_STORE_IS_NOT_NATIVE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE">Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE">Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_FETCH_AND_ADD_IS_SOMETIMES_NATIVE">Q_ATOMIC_INT_FETCH_AND_ADD_IS_SOMETIMES_NATIVE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE">Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_FETCH_AND_ADD_IS_WAIT_FREE">Q_ATOMIC_INT_FETCH_AND_ADD_IS_WAIT_FREE</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qatomicpointer.xml">QAtomicPointer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAtomicInt-1">
<db:title>[noexcept] QAtomicInt::QAtomicInt(int <db:emphasis>value</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> with the given <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="QAtomicInt">
<db:title>[noexcept] QAtomicInt::QAtomicInt(const QAtomicInt &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="deref">
<db:title>bool QAtomicInt::deref()</db:title>
<db:para>Atomically decrements the value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link>. Returns true if the new value is non-zero, false otherwise.</db:para>
<db:para>This function uses <db:emphasis>ordered</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, which ensures that memory access before and after the atomic operation (in program order) may not be re-ordered.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qatomicint.xml#ref">ref</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fetchAndAddAcquire">
<db:title>int QAtomicInt::fetchAndAddAcquire(int <db:emphasis>valueToAdd</db:emphasis>)</db:title>
<db:para>Atomic fetch-and-add.</db:para>
<db:para>Reads the current value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and then adds <db:code role="parameter">valueToAdd</db:code> to the current value, returning the original value.</db:para>
<db:para>This function uses <db:emphasis>acquire</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, which ensures that memory access following the atomic operation (in program order) may not be re-ordered before the atomic operation.</db:para>
</db:section>
<db:section xml:id="fetchAndAddOrdered">
<db:title>int QAtomicInt::fetchAndAddOrdered(int <db:emphasis>valueToAdd</db:emphasis>)</db:title>
<db:para>Atomic fetch-and-add.</db:para>
<db:para>Reads the current value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and then adds <db:code role="parameter">valueToAdd</db:code> to the current value, returning the original value.</db:para>
<db:para>This function uses <db:emphasis>ordered</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, which ensures that memory access before and after the atomic operation (in program order) may not be re-ordered.</db:para>
</db:section>
<db:section xml:id="fetchAndAddRelaxed">
<db:title>int QAtomicInt::fetchAndAddRelaxed(int <db:emphasis>valueToAdd</db:emphasis>)</db:title>
<db:para>Atomic fetch-and-add.</db:para>
<db:para>Reads the current value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and then adds <db:code role="parameter">valueToAdd</db:code> to the current value, returning the original value.</db:para>
<db:para>This function uses <db:emphasis>relaxed</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, leaving the compiler and processor to freely reorder memory accesses.</db:para>
</db:section>
<db:section xml:id="fetchAndAddRelease">
<db:title>int QAtomicInt::fetchAndAddRelease(int <db:emphasis>valueToAdd</db:emphasis>)</db:title>
<db:para>Atomic fetch-and-add.</db:para>
<db:para>Reads the current value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and then adds <db:code role="parameter">valueToAdd</db:code> to the current value, returning the original value.</db:para>
<db:para>This function uses <db:emphasis>release</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, which ensures that memory access before the atomic operation (in program order) may not be re-ordered after the atomic operation.</db:para>
</db:section>
<db:section xml:id="fetchAndStoreAcquire">
<db:title>int QAtomicInt::fetchAndStoreAcquire(int <db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>Atomic fetch-and-store.</db:para>
<db:para>Reads the current value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and then assigns it the <db:code role="parameter">newValue</db:code>, returning the original value.</db:para>
<db:para>This function uses <db:emphasis>acquire</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, which ensures that memory access following the atomic operation (in program order) may not be re-ordered before the atomic operation.</db:para>
</db:section>
<db:section xml:id="fetchAndStoreOrdered">
<db:title>int QAtomicInt::fetchAndStoreOrdered(int <db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>Atomic fetch-and-store.</db:para>
<db:para>Reads the current value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and then assigns it the <db:code role="parameter">newValue</db:code>, returning the original value.</db:para>
<db:para>This function uses <db:emphasis>ordered</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, which ensures that memory access before and after the atomic operation (in program order) may not be re-ordered.</db:para>
</db:section>
<db:section xml:id="fetchAndStoreRelaxed">
<db:title>int QAtomicInt::fetchAndStoreRelaxed(int <db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>Atomic fetch-and-store.</db:para>
<db:para>Reads the current value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and then assigns it the <db:code role="parameter">newValue</db:code>, returning the original value.</db:para>
<db:para>This function uses <db:emphasis>relaxed</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, leaving the compiler and processor to freely reorder memory accesses.</db:para>
</db:section>
<db:section xml:id="fetchAndStoreRelease">
<db:title>int QAtomicInt::fetchAndStoreRelease(int <db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>Atomic fetch-and-store.</db:para>
<db:para>Reads the current value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and then assigns it the <db:code role="parameter">newValue</db:code>, returning the original value.</db:para>
<db:para>This function uses <db:emphasis>release</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, which ensures that memory access before the atomic operation (in program order) may not be re-ordered after the atomic operation.</db:para>
</db:section>
<db:section xml:id="isFetchAndAddNative">
<db:title>[static] bool QAtomicInt::isFetchAndAddNative()</db:title>
<db:para>Returns true if fetch-and-add is implemented using atomic processor instructions, false otherwise.</db:para>
</db:section>
<db:section xml:id="isFetchAndAddWaitFree">
<db:title>[static] bool QAtomicInt::isFetchAndAddWaitFree()</db:title>
<db:para>Returns true if atomic fetch-and-add is wait-free, false otherwise.</db:para>
</db:section>
<db:section xml:id="isFetchAndStoreNative">
<db:title>[static] bool QAtomicInt::isFetchAndStoreNative()</db:title>
<db:para>Returns true if fetch-and-store is implemented using atomic processor instructions, false otherwise.</db:para>
</db:section>
<db:section xml:id="isFetchAndStoreWaitFree">
<db:title>[static] bool QAtomicInt::isFetchAndStoreWaitFree()</db:title>
<db:para>Returns true if atomic fetch-and-store is wait-free, false otherwise.</db:para>
</db:section>
<db:section xml:id="isReferenceCountingNative">
<db:title>[static] bool QAtomicInt::isReferenceCountingNative()</db:title>
<db:para>Returns true if reference counting is implemented using atomic processor instructions, false otherwise.</db:para>
</db:section>
<db:section xml:id="isReferenceCountingWaitFree">
<db:title>[static] bool QAtomicInt::isReferenceCountingWaitFree()</db:title>
<db:para>Returns true if atomic reference counting is wait-free, false otherwise.</db:para>
</db:section>
<db:section xml:id="isTestAndSetNative">
<db:title>[static] bool QAtomicInt::isTestAndSetNative()</db:title>
<db:para>Returns true if test-and-set is implemented using atomic processor instructions, false otherwise.</db:para>
</db:section>
<db:section xml:id="isTestAndSetWaitFree">
<db:title>[static] bool QAtomicInt::isTestAndSetWaitFree()</db:title>
<db:para>Returns true if atomic test-and-set is wait-free, false otherwise.</db:para>
</db:section>
<db:section xml:id="load">
<db:title>int QAtomicInt::load() const</db:title>
<db:para>Atomically loads the value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> using relaxed memory ordering. The value is not modified in any way, but note that there's no guarantee that it remains so.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qatomicint.xml#store">store</db:link>()</db:member>
<db:member><db:link xlink:href="qatomicint.xml#loadAcquire">loadAcquire</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadAcquire">
<db:title>int QAtomicInt::loadAcquire() const</db:title>
<db:para>Atomically loads the value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> using the &quot;Acquire&quot; memory ordering. The value is not modified in any way, but note that there's no guarantee that it remains so.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qatomicint.xml#store">store</db:link>()</db:member>
<db:member><db:link xlink:href="qatomicint.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ref">
<db:title>bool QAtomicInt::ref()</db:title>
<db:para>Atomically increments the value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link>. Returns true if the new value is non-zero, false otherwise.</db:para>
<db:para>This function uses <db:emphasis>ordered</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, which ensures that memory access before and after the atomic operation (in program order) may not be re-ordered.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qatomicint.xml#deref">deref</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="store">
<db:title>void QAtomicInt::store(int <db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>Atomically stores the <db:code role="parameter">newValue</db:code> value into this atomic type, using relaxed memory ordering.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qatomicint.xml#storeRelease">storeRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qatomicint.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="storeRelease">
<db:title>void QAtomicInt::storeRelease(int <db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>Atomically stores the <db:code role="parameter">newValue</db:code> value into this atomic type, using the &quot;Release&quot; memory ordering.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qatomicint.xml#store">store</db:link>()</db:member>
<db:member><db:link xlink:href="qatomicint.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="testAndSetAcquire">
<db:title>bool QAtomicInt::testAndSetAcquire(int <db:emphasis>expectedValue</db:emphasis>, int <db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>Atomic test-and-set.</db:para>
<db:para>If the current value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> is the <db:code role="parameter">expectedValue</db:code>, the test-and-set functions assign the <db:code role="parameter">newValue</db:code> to this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and return true. If the values are <db:emphasis>not</db:emphasis> the same, this function does nothing and returns false.</db:para>
<db:para>This function uses <db:emphasis>acquire</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, which ensures that memory access following the atomic operation (in program order) may not be re-ordered before the atomic operation.</db:para>
</db:section>
<db:section xml:id="testAndSetOrdered">
<db:title>bool QAtomicInt::testAndSetOrdered(int <db:emphasis>expectedValue</db:emphasis>, int <db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>Atomic test-and-set.</db:para>
<db:para>If the current value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> is the <db:code role="parameter">expectedValue</db:code>, the test-and-set functions assign the <db:code role="parameter">newValue</db:code> to this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and return true. If the values are <db:emphasis>not</db:emphasis> the same, this function does nothing and returns false.</db:para>
<db:para>This function uses <db:emphasis>ordered</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, which ensures that memory access before and after the atomic operation (in program order) may not be re-ordered.</db:para>
</db:section>
<db:section xml:id="testAndSetRelaxed">
<db:title>bool QAtomicInt::testAndSetRelaxed(int <db:emphasis>expectedValue</db:emphasis>, int <db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>Atomic test-and-set.</db:para>
<db:para>If the current value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> is the <db:code role="parameter">expectedValue</db:code>, the test-and-set functions assign the <db:code role="parameter">newValue</db:code> to this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and return true. If the values are <db:emphasis>not</db:emphasis> the same, this function does nothing and returns false.</db:para>
<db:para>This function uses <db:emphasis>relaxed</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, leaving the compiler and processor to freely reorder memory accesses.</db:para>
</db:section>
<db:section xml:id="testAndSetRelease">
<db:title>bool QAtomicInt::testAndSetRelease(int <db:emphasis>expectedValue</db:emphasis>, int <db:emphasis>newValue</db:emphasis>)</db:title>
<db:para>Atomic test-and-set.</db:para>
<db:para>If the current value of this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> is the <db:code role="parameter">expectedValue</db:code>, the test-and-set functions assign the <db:code role="parameter">newValue</db:code> to this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and return true. If the values are <db:emphasis>not</db:emphasis> the same, this function does nothing and returns false.</db:para>
<db:para>This function uses <db:emphasis>release</db:emphasis> <db:link xlink:href="qatomicint.xml#memory-ordering">memory ordering</db:link> semantics, which ensures that memory access before the atomic operation (in program order) may not be re-ordered after the atomic operation.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QAtomicInt &amp;QAtomicInt::operator=(const QAtomicInt &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and returns a reference to this <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE">
<db:title>Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE</db:title>
<db:para>This macro is defined if and only if your processor supports atomic fetch-and-add on integers.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE">
<db:title>Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE</db:title>
<db:para>This macro is defined when the hardware does not support atomic fetch-and-add on integers.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_FETCH_AND_ADD_IS_SOMETIMES_NATIVE">
<db:title>Q_ATOMIC_INT_FETCH_AND_ADD_IS_SOMETIMES_NATIVE</db:title>
<db:para>This macro is defined when only certain generations of the processor support atomic fetch-and-add on integers. Use the <db:link xlink:href="qatomicint.xml#isFetchAndAddNative">QAtomicInt::isFetchAndAddNative</db:link>() function to check what your processor supports.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_FETCH_AND_ADD_IS_WAIT_FREE">
<db:title>Q_ATOMIC_INT_FETCH_AND_ADD_IS_WAIT_FREE</db:title>
<db:para>This macro is defined together with <db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE">Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE</db:link> to indicate that the atomic fetch-and-add on integers is wait-free.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE">
<db:title>Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE</db:title>
<db:para>This macro is defined if and only if your processor supports atomic fetch-and-store on integers.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_FETCH_AND_STORE_IS_NOT_NATIVE">
<db:title>Q_ATOMIC_INT_FETCH_AND_STORE_IS_NOT_NATIVE</db:title>
<db:para>This macro is defined when the hardware does not support atomic fetch-and-store on integers.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_FETCH_AND_STORE_IS_SOMETIMES_NATIVE">
<db:title>Q_ATOMIC_INT_FETCH_AND_STORE_IS_SOMETIMES_NATIVE</db:title>
<db:para>This macro is defined when only certain generations of the processor support atomic fetch-and-store on integers. Use the <db:link xlink:href="qatomicint.xml#isFetchAndStoreNative">QAtomicInt::isFetchAndStoreNative</db:link>() function to check what your processor supports.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE">
<db:title>Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE</db:title>
<db:para>This macro is defined together with <db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE">Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE</db:link> to indicate that the atomic fetch-and-store on integers is wait-free.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE">
<db:title>Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE</db:title>
<db:para>This macro is defined if and only if all generations of your processor support atomic reference counting.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE">
<db:title>Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE</db:title>
<db:para>This macro is defined when the hardware does not support atomic reference counting.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE">
<db:title>Q_ATOMIC_INT_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE</db:title>
<db:para>This macro is defined when only certain generations of the processor support atomic reference counting. Use the <db:link xlink:href="qatomicint.xml#isReferenceCountingNative">QAtomicInt::isReferenceCountingNative</db:link>() function to check what your processor supports.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_REFERENCE_COUNTING_IS_WAIT_FREE">
<db:title>Q_ATOMIC_INT_REFERENCE_COUNTING_IS_WAIT_FREE</db:title>
<db:para>This macro is defined together with <db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE">Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE</db:link> to indicate that the reference counting is wait-free.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE">
<db:title>Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE</db:title>
<db:para>This macro is defined if and only if your processor supports atomic test-and-set on integers.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE">
<db:title>Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE</db:title>
<db:para>This macro is defined when the hardware does not support atomic test-and-set on integers.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_TEST_AND_SET_IS_SOMETIMES_NATIVE">
<db:title>Q_ATOMIC_INT_TEST_AND_SET_IS_SOMETIMES_NATIVE</db:title>
<db:para>This macro is defined when only certain generations of the processor support atomic test-and-set on integers. Use the <db:link xlink:href="qatomicint.xml#isTestAndSetNative">QAtomicInt::isTestAndSetNative</db:link>() function to check what your processor supports.</db:para>
</db:section>
<db:section xml:id="Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE">
<db:title>Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE</db:title>
<db:para>This macro is defined together with <db:link xlink:href="qatomicint.xml#Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE">Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE</db:link> to indicate that the atomic test-and-set on integers is wait-free.</db:para>
</db:section>
</db:section>
</db:article>
