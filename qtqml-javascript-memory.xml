<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Memory Management in the JavaScript Engine</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes how the JavaScript Engine manages memory.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>This document describes the <db:emphasis>dynamic</db:emphasis> memory management of the JavaScript Engine in QML. It is a rather technical, in depth description. You only need to read this if you care about the exact characteristics of JavaScript memory management in QML. In particular, it can be helpful if you're trying to optimize your application for maximum performance.</db:para>
<db:note>
<db:para>By compiling your QML code to C++ using the <db:link xlink:href="qtqml-qtquick-compiler-tech.xml">Qt Quick Compiler</db:link> you can avoid much of the JavaScript heap usage. The generated C++ code uses the familiar C++ stack and heap for storing objects and values. The <db:link xlink:href="qtqml-javascript-hostenvironment.xml">JavaScript Host Environment</db:link>, however, always uses some JavaScript-managed memory, no matter if you use it or not. If you use features that cannot be compiled to C++, the engine will fall back to interpretation or JIT compilation and use JavaScript objects stored on the JavaScript heap, though.</db:para>
</db:note>
</db:section>
<db:section xml:id="basic-principles">
<db:title>Basic Principles</db:title>
<db:para>The JavaScript engine in QML has a dedicated memory manager that requests address space in units of multiple pages from the operating system. Objects, strings, and other managed values created in JavaScript are then placed in this address space, using the JavaScript engine's own allocation scheme. The JavaScript engine does not use the C library's malloc() and free(), nor the default implementations of C++'s new and delete to allocate memory for JavaScript objects.</db:para>
<db:para>Requests for address space are generally done with mmap() on Unix-like systems and with VirtualAlloc() on windows. There are several platform-specific implementations of those primitives. Address space reserved this way is not immediately committed to physical memory. Rather, the operating system notices when a page of memory is actually accessed and only then commits it. Therefore, the address space is practically free and having a lot of it gives the JavaScript memory manager the leverage it needs to place objects in an efficient way on the JavaScript heap. Furthermore, there are platform-specific techniques to tell the operating system that a chunk of address space, though still reserved, does not have to be mapped into physical memory for the time being. The operating system can then decommit the memory as needed and use it for other tasks. Crucially, most operating systems do not guarantee immediate action on such a decommit request. They will only decommit the memory when it is actually needed for something else. On Unix-like systems we generally use madvise() for this. Windows has specific flags to VirtualFree() to do the equivalent.</db:para>
<db:note>
<db:para>There are memory profiling tools that do not understand this mechanism and over-report JavaScript memory usage.</db:para>
</db:note>
<db:para>All values stored on the JavaScript heap are subject to garbage collection. None of the values are immediately &quot;deleted&quot; when they go out of scope or are otherwise &quot;dropped&quot;. Only the garbage collector may remove values from the JavaScript heap and return memory (see <db:link xlink:href="qtqml-javascript-memory.xml#garbage-collection">Garbage Collection</db:link> below for how this works).</db:para>
</db:section>
<db:section xml:id="qobject-based-types">
<db:title>QObject-based Types</db:title>
<db:para><db:link xlink:href="qobject.xml">QObject</db:link>-based types, and in particular everything you can phrase as a QML element, are allocated on the C++ heap. Only a small wrapper around the pointer is placed on the JavaScript heap when a <db:link xlink:href="qobject.xml">QObject</db:link> is accessed from JavaScript. Such a wrapper, however, can own the <db:link xlink:href="qobject.xml">QObject</db:link> it points to. See <db:link xlink:href="qjsengine.xml#ObjectOwnership-enum">QJSEngine::ObjectOwnership</db:link>. If the wrapper owns the object, it will be deleted when the wrapper is garbage-collected. You can then also manually trigger the deletion by calling the destroy() method on it. destroy() internally calls <db:link xlink:href="qobject.xml#deleteLater">QObject::deleteLater</db:link>(). It will therefore not immediately delete the object, but wait for the next event loop iteration.</db:para>
<db:para>QML-declared <db:emphasis>properties</db:emphasis> of objects are stored on the JavaScript heap. They live as long as the object they belong to lives. Afterwards they are removed the next time the garbage collector runs.</db:para>
</db:section>
<db:section xml:id="object-allocation">
<db:title>Object Allocation</db:title>
<db:para>In JavaScript, any structured type is an object. This includes function objects, arrays, regular expressions, date objects and much more. QML has a number of internal object types, such as the above mentioned <db:link xlink:href="qobject.xml">QObject</db:link> wrapper. Whenever an object is created, the memory manager locates some storage for it on the JavaScript heap.</db:para>
<db:para>JavaScript strings are also managed values, but their string data is not allocated on the JavaScript heap. Similar to <db:link xlink:href="qobject.xml">QObject</db:link> wrappers, the heap objects for strings are just thin wrappers around a pointer to string data.</db:para>
<db:para>When allocating memory for an object, the size of the object is first rounded up to 32 byte alignment. Each 32 byte piece of address space is called a &quot;slot&quot;. For objects smaller than a &quot;huge size&quot; threshold, the memory manager performs a series of attempts to place the object in memory:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The memory manager keeps linked lists of previously freed pieces of heap, called &quot;bins&quot;. Each bin holds pieces of heap with a fixed per-bin size in slots. If the bin for the right size is not empty, it picks the first entry and places the object there.</db:para>
</db:listitem>
<db:listitem>
<db:para>The memory that hasn't been used yet is managed via a bumper allocator. A bumper pointer points to the byte beyond the occupied address space. If there is still enough unused address space, the bumper is increased accordingly, and the object is placed in unused space.</db:para>
</db:listitem>
<db:listitem>
<db:para>A separate bin is kept for previously freed pieces of heap of varying sizes larger than the specific sizes mentioned above. The memory manager traverses this list and tries to find a piece it can split to accommodate the new object.</db:para>
</db:listitem>
<db:listitem>
<db:para>The memory manager searches the lists of specifically sized bins larger than the object to be allocated and tries to split one of those.</db:para>
</db:listitem>
<db:listitem>
<db:para>Finally, if none of the above works, the memory manager reserves more address space and allocates the object using the bumper allocator.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Huge objects are handled by their own allocator. For each of those one or more separate memory pages are obtained from the OS and managed separately.</db:para>
<db:para>Additionally, each new chunk of address space the memory manager obtains from the OS gets a header that holds a number of flags for each slot:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>object</db:emphasis>: The first slot occupied by an object is flagged with this bit.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>extends</db:emphasis>: Any further slots occupied by an object are flagged with this bit.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>mark</db:emphasis>: When the garbage collector runs, it sets this bit if the object is still in use.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="internal-classes">
<db:title>Internal Classes</db:title>
<db:para>In order to minimize the required storage for metadata on what members an object holds, the JavaScript engine assigns an &quot;internal class&quot; to each object. Other JavaScript engines call this &quot;hidden class&quot; or &quot;shape&quot;. Internal classes are deduplicated and kept in a tree. If a property is added to an object, the children of the current internal class are checked to see if the same object layout has occurred before. If so, we can use the resulting internal class right away. Otherwise we have to create a new one.</db:para>
<db:para>Internal classes are stored in their own section of the JavaScript heap that otherwise works the same way as the general object allocation described above. This is because internal classes have to be kept alive while the objects using them are collected. Internal classes are then collected in a separate pass.</db:para>
<db:para>The actual property attributes stored in internal classes are <db:emphasis>not</db:emphasis> kept on the JavaScript heap, though, but rather managed using new and delete.</db:para>
</db:section>
<db:section xml:id="garbage-collection">
<db:title>Garbage Collection</db:title>
<db:para>The garbage collector used in the JavaScript engine is a non-moving, Mark and Sweep design. Since Qt 6.8, it runs incrementally by default (unless <db:link xlink:href="qtqml-javascript-finetuning.xml#qv4-gc-timelimit">QV4_GC_TIMELIMIT</db:link> is set to 0). In the <db:emphasis>mark</db:emphasis> phase we traverse all the known places where live references to objects can be found. In particular:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>JavaScript globals</db:para>
</db:listitem>
<db:listitem>
<db:para>Undeletable parts of QML and JavaScript compilation units</db:para>
</db:listitem>
<db:listitem>
<db:para>The JavaScript stack</db:para>
</db:listitem>
<db:listitem>
<db:para>The persistent value storage. This is where <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> and similar classes keep references to JavaScript objects.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For any object found in those places the mark bits are set recursively for anything it references.</db:para>
<db:para>In the <db:emphasis>sweep</db:emphasis> phase the garbage collector then traverses the whole heap and frees any objects not marked before. The resulting released memory is sorted into the bins to be used for further allocations. If a chunk of address space is completely empty, it is decommitted, but the address space is retained (see <db:link xlink:href="qtqml-javascript-memory.xml#basic-principles">Basic Principles</db:link> above). If the memory usage grows again, the same address space is re-used.</db:para>
<db:para>The garbage collector is triggered either manually by calling the <db:link xlink:href="qml-qtqml-qt.xml#gc-method">gc</db:link>() function or by a heuristic that takes the following aspects into account:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The amount of memory managed by object on the JavaScript heap, but not directly allocated on the JavaScript heap, such as strings and internal class member data. A dynamic threshold is maintained for those. If it is surpassed, the garbage collector runs and the threshold is increased. If the amount of managed external memory falls far below the threshold, the threshold is decreased.</db:para>
</db:listitem>
<db:listitem>
<db:para>The total address space reserved. The internal memory allocation on the JavaScript heap is only considered after at least some address space has been reserved.</db:para>
</db:listitem>
<db:listitem>
<db:para>The additional address space reservation since the last garbage collector run. If the amount of address space is more than double the amount of used memory after the last garbage collector run, we run the garbage collector again.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="analyzing-memory-usage">
<db:title>Analyzing Memory Usage</db:title>
<db:para>In order to observe the development of both the address space and the number of objects allocated in it, it is best to use a specialized tool. The <db:link xlink:href="https://doc.qt.io/qtcreator/creator-qml-performance-monitor.html">QML Profiler</db:link> provides a visualization that helps here. More generic tools cannot see what the JavaScript memory manager does within the address space it reserves and may not even notice that part of the address space is not committed to physical memory.</db:para>
<db:para>Another way to debug memory usage are the <db:link xlink:href="qloggingcategory.xml">logging categories</db:link> <db:emphasis>qt.qml.gc.statistics</db:emphasis> and <db:emphasis>qt.qml.gc.allocatorStats</db:emphasis>. If you enable the <db:emphasis>Debug</db:emphasis> level for qt.qml.gc.statistics, the garbage collector will print some information every time it runs:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>How much total address space is reserved</db:para>
</db:listitem>
<db:listitem>
<db:para>How much memory was in use before and after the garbage collection</db:para>
</db:listitem>
<db:listitem>
<db:para>How many objects of various sizes were allocated so far</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:emphasis>Debug</db:emphasis> level for qt.qml.gc.allocatorStats prints more detailed statistics that also include how the garbage collector was triggered, timings for the mark and sweep phases and a detailed breakdown of memory usage by bytes and chunks of address space.</db:para>
</db:section>
</db:article>
