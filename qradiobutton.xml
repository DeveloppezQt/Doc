<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QRadioButton Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qradiobutton.xml">QRadioButton</db:link> widget provides a radio button with a text label.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRadioButton</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractbutton.xml" xlink:role="class">QAbstractButton</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRadioButton is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qradiobutton.xml">QRadioButton</db:link> is an option button that can be switched on (checked) or off (unchecked). Radio buttons typically present the user with a &quot;one of many&quot; choice. In a group of radio buttons, only one radio button at a time can be checked; if the user selects another button, the previously selected button is switched off.</db:para>
<db:para>Radio buttons are autoExclusive by default. If auto-exclusive is enabled, radio buttons that belong to the same parent widget behave as if they were part of the same exclusive button group. If you need multiple exclusive button groups for radio buttons that belong to the same parent widget, put them into a <db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link>.</db:para>
<db:para>Whenever a button is switched on or off, it emits the <db:link xlink:href="qabstractbutton.xml#toggled">toggled</db:link>() signal. Connect to this signal if you want to trigger an action each time the button changes state. Use isChecked() to see if a particular button is selected.</db:para>
<db:para>Just like <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>, a radio button displays text, and optionally a small icon. The icon is set with setIcon(). The text can be set in the constructor or with setText(). A shortcut key can be specified by preceding the preferred character with an ampersand in the text. For example:</db:para>
<db:programlisting language="cpp">QRadioButton *button = new QRadioButton(&quot;Search from the &amp;cursor&quot;, this);
</db:programlisting>
<db:para>In this example the shortcut is <db:emphasis>Alt+c</db:emphasis>. See the <db:link xlink:href="qshortcut.xml#mnemonic">QShortcut</db:link> documentation for details. To display an actual ampersand, use '&amp;&amp;'.</db:para>
<db:para>Important inherited members: text(), setText(), text(), setDown(), isDown(), autoRepeat(), <db:link xlink:href="qabstractbutton.xml#group">group</db:link>(), setAutoRepeat(), <db:link xlink:href="qabstractbutton.xml#toggle">toggle</db:link>(), <db:link xlink:href="qabstractbutton.xml#pressed">pressed</db:link>(), <db:link xlink:href="qabstractbutton.xml#released">released</db:link>(), <db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>(), and <db:link xlink:href="qabstractbutton.xml#toggled">toggled</db:link>().</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-radiobutton.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Fusion radio button</db:para>
</db:td>
<db:td>
<db:para>A radio button shown in the <db:link xlink:href="gallery-fusion.xml">Fusion widget style</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-radiobutton.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Windows Vista radio button</db:para>
</db:td>
<db:td>
<db:para>A radio button shown in the <db:link xlink:href="gallery-windowsvista.xml">Windows Vista widget style</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/macintosh-radiobutton.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Macintosh radio button</db:para>
</db:td>
<db:td>
<db:para>A radio button shown in the <db:link xlink:href="gallery-macintosh.xml">Macintosh widget style</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpushbutton.xml">QPushButton</db:link></db:member>
<db:member><db:link xlink:href="qtoolbutton.xml">QToolButton</db:link></db:member>
<db:member><db:link xlink:href="qcheckbox.xml">QCheckBox</db:link></db:member>
<db:member><db:link xlink:href="guibooks.xml#fowler">GUI Design Handbook: Radio Button</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-groupbox-example.xml">Group Box Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRadioButton">
<db:title>[explicit] QRadioButton::QRadioButton(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a radio button with the given <db:code role="parameter">parent</db:code>, but with no text or pixmap.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> argument is passed on to the <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="QRadioButton-1">
<db:title>[explicit] QRadioButton::QRadioButton(const QString &amp;<db:emphasis>text</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a radio button with the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">text</db:code> string.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> argument is passed on to the <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QRadioButton">
<db:title>[virtual noexcept] QRadioButton::~QRadioButton()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QRadioButton::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#event" role="function">QAbstractButton::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="hitButton">
<db:title>[override virtual protected] bool QRadioButton::hitButton(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#hitButton" role="function">QAbstractButton::hitButton(const QPoint &amp;pos) const</db:link>.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[protected] void QRadioButton::initStyleOption(QStyleOptionButton *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qradiobutton.xml">QRadioButton</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionbutton.xml">QStyleOptionButton</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QRadioButton::minimumSizeHint() const</db:title>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QRadioButton::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#mouseMoveEvent" role="function">QAbstractButton::mouseMoveEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QRadioButton::paintEvent(<db:emphasis>QPaintEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractbutton.xml#paintEvent" role="function">QAbstractButton::paintEvent(QPaintEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QRadioButton::sizeHint() const</db:title>
</db:section>
</db:section>
</db:article>
