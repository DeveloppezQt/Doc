<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Windows - Specific Issues</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A description of issues with Qt that are specific to Windows.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This page contains information about <db:link xlink:href="windows-support.xml">Qt for Windows</db:link>.</db:para>
<db:section xml:id="windows-xp">
<db:title>Windows XP</db:title>
<db:section xml:id="targeting-xp-with-visual-studio-2012-and-later">
<db:title>Targeting XP with Visual Studio 2012 and later</db:title>
<db:para>Visual Studio 2012 and later do not support building for Windows XP out of the box. However, support for targeting XP was added in an <db:link xlink:href="http://blogs.msdn.com/b/vcblog/archive/2012/10/08/windows-xp-targeting-with-c-in-visual-studio-2012.aspx">update of Visual Studio 2012</db:link>. This works also with Visual Studio 2013.</db:para>
<db:para>You need to compile Qt from sources. Set up an environment on the command line, for example</db:para>
<db:programlisting language="cpp">&quot;C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat&quot;
set PATH=C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin;%PATH%
set INCLUDE=C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Include;%INCLUDE%
set LIB=C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Include;%LIB%
set CL=/D_USING_V110_SDK71_
</db:programlisting>
<db:para>Then run configure with the -target xp argument:</db:para>
<db:programlisting language="cpp">configure -target xp &lt;other arguments&gt;
nmake
</db:programlisting>
<db:note>
<db:para>The configure option -qtlibinfix cannot take a version number as an argument. For example: -qtlibinfix 5.6.0 should be specified as -qtlibinfix QtCore5.6.dll.</db:para>
</db:note>
<db:para>Also compile your own application in the above environment if compiling on the command line. If you use Visual Studio, set the v110_xp toolset in the project's property pages.</db:para>
</db:section>
<db:section xml:id="installation-location">
<db:title>Installation location</db:title>
<db:para>Installing Qt into a directory with spaces, for example, <db:emphasis>C:\Program Files</db:emphasis>, may cause linker errors like the following:</db:para>
<db:programlisting language="cpp">c:\program.obj not found
</db:programlisting>
<db:para>Install Qt into a sub-directory without spaces to avoid this problem.</db:para>
</db:section>
</db:section>
<db:section xml:id="possible-gl-conflict">
<db:title>Possible GL conflict</db:title>
<db:para>There is a known issue when running Microsoft NetMeeting, Lotus SameTime, and other applications that require screen grabbing while direct rendering is enabled. Other GL-applications may not work as expected, unless direct rendering is disabled.</db:para>
</db:section>
<db:section xml:id="gcc-mingw-builds">
<db:title>GCC (MinGW-builds)</db:title>
<db:para>The minimum version of MinGW-builds supported is GCC 4.7.2. <db:link xlink:href="http://sourceforge.net/projects/mingwbuilds/files/host-windows/releases/4.7.2/32-bit/threads-posix/sjlj/x32-4.7.2-release-posix-sjlj-rev8.7z">MinGW-builds GCC 4.7.2 32 bit, rev 8</db:link> and later should be able to build Qt.</db:para>
<db:para>For more information about the MinGW builds, visit the <db:emphasis>Reference Configuration</db:emphasis> section of the <db:link xlink:href="supported-platforms.xml#reference-configurations">supported platforms</db:link> page.</db:para>
</db:section>
<db:section xml:id="intel-c-compiler-windows-altix">
<db:title>Intel C++ Compiler (Windows, Altix)</db:title>
<db:para>Qt has been tested successfully with:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Windows - Intel(R) C++ Compiler for 32-bit applications, Version 9.1.040.</db:para>
</db:listitem>
<db:listitem>
<db:para>Altix - Intel(R) C++ Itanium(R) Compiler for Itanium(R)-based applications Version 8.1 Build 20050406 Package ID: l_cc_pc_8.1.030</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="visual-studio">
<db:title>Visual Studio</db:title>
<db:para>The Visual C++ Linker doesn't understand filenames with spaces (for example, <db:emphasis>C:\Program files\Qt\</db:emphasis>) so you will have to move it to another place, or explicitly set the path yourself.</db:para>
<db:programlisting language="cpp">QTDIR=C:\Progra~1\Qt
</db:programlisting>
<db:para>If you are experiencing strange problems with using special flags that modify the alignment of structure and union members (such as /Zp2) then you will need to recompile Qt with the flags set for the application as well.</db:para>
<db:para>Visual Studio 2010 should be updated to Service Pack 1. Otherwise, a problem when compiling Qt for 64-bit in release mode may occur (visit <db:link xlink:href="http://support.microsoft.com/kb/2280741">http://support.microsoft.com/kb/2280741</db:link>).</db:para>
<db:para>Consult the <db:link xlink:href="windows-requirements.xml">Qt for Windows - Requirements</db:link> page for specific versions of the Windows SDK.</db:para>
</db:section>
<db:section xml:id="fullscreen-opengl-based-windows">
<db:title>Fullscreen OpenGL Based Windows</db:title>
<db:para>When a window is using an OpenGL based surface and is appearing in full screen mode, problems can occur with other top-level windows which are part of the application. Due to limitations of the Windows DWM, compositing is not handled correctly for OpenGL based windows when going into full screen mode. As a result, other top-level windows are not placed on top of the full screen window when they are made visible. For example, menus may not appear correctly, or dialogs fail to show up.</db:para>
<db:para>A window can use an OpenGL based surface either explicitly when <db:link xlink:href="qwindow.xml#setSurfaceType">setSurfaceType</db:link>() is called, or when something that requires OpenGL is used inside the window, causing the whole window to be OpenGL based. For example, <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link> or <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> can trigger this. However, if the surface is contained in a <db:link xlink:href="qwindow.xml">QWindow</db:link> which is hosted with <db:link xlink:href="qwidget.xml#createWindowContainer">createWindowContainer</db:link>(), or the obsoleted QGLWidget is used and it does cover the entire full screen window, then this problem does not occur.</db:para>
<db:para>To solve this problem, a QWindowsWindowFunction can be used to enable a native Windows flag which will set WS_BORDER when showing in full screen mode. This can be utilized as follows:</db:para>
<db:programlisting language="cpp">QWindowsWindowFunctions::setHasBorderInFullScreen(tlwWindow-&gt;windowHandle(), true);
</db:programlisting>
<db:para>This will give the full screen window a 1-pixel border, thus enabling the other top level windows to appear on top.</db:para>
</db:section>
</db:article>
