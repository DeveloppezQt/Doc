<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Wiggly</db:title>
<db:productname>QtQuickEffectMaker</db:productname>
<db:edition>Qt Quick Effect Maker 6.5.3</db:edition>
<db:titleabbrev>Qt Quick Effect Maker Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qqem-porting-shadertoy.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Porting Shadertoy effects to Qt Quick Effect Maker"/></db:extendedlink>
<db:abstract>
<db:para>Demonstrates how to use an effect created with the Qt Quick Effect Maker (QQEM).</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Wiggly</db:emphasis> demonstrates how to use a shader effect, created with the Qt Quick Effect Maker (QQEM), in your Qt Quick application. A simple Qt Quick user interface allows changing the wiggly text and the wave size, as well as applying the electric cloud effect.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/wiggly-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="application-basics">
<db:title>Application basics</db:title>
<db:para>Most of the example is contained and set up in the <db:emphasis>main.qml</db:emphasis> file. First, create an item which is used as the source for the effect.</db:para>
<db:programlisting language="qml">Rectangle {
    id: sourceItem
    anchors.centerIn: parent
    width: textItem.width + 60 * mainWindow.px
    height: textItem.height + 30 * mainWindow.px
    color: &quot;#d0d0d0d0&quot;
    border.color: &quot;#d0ffffff&quot;
    border.width: 4 * mainWindow.px
    radius: 20 * mainWindow.px
    layer.enabled: true
    layer.smooth: true
    visible: false
    Text {
        id: textItem
        anchors.centerIn: parent
        text: wigglyTextField.text
        font.family: font1.font.family
        font.pixelSize: Math.min(200 * mainWindow.px, 0.8 * mainWindow.width / text.length)
    }
}
</db:programlisting>
<db:para>The item is a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> with a <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> element inside. The size of the rectangle depends on the number of characters in the text to make it fit nicely into the application window. The important lines here are <db:emphasis>layer.enabled: true</db:emphasis> that creates the offscreen texture for the effect and <db:emphasis>visible: false</db:emphasis> that hides this element as the effect will replace its content. If the item is visible, it looks like this without the wiggly effect:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/wiggly-sourceitem.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Next, create the settings toolbar used for controlling the effect.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/wiggly-settings.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">TextField {
    id: wigglyTextField
    anchors.verticalCenter: parent.verticalCenter
    width: mainWindow.width * 0.3
    text: &quot;Wiggly&quot;
}
Slider {
    id: wigglyAmountYSlider
    anchors.verticalCenter: parent.verticalCenter
    width: mainWindow.width * 0.15
    from: 0
    to: 100
    value: 40
}
Slider {
    id: wigglyAmountXSlider
    anchors.verticalCenter: parent.verticalCenter
    width: mainWindow.width * 0.15
    from: 0
    to: 100
    value: 20
}
Switch {
    id: electricSwitch
    anchors.verticalCenter: parent.verticalCenter
}
</db:programlisting>
<db:para>These components use the <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link>, stacked inside a <db:link xlink:href="qml-qtquick-row.xml">Row</db:link> element. The first one is a <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>, which you can use to change the wiggly text. Then there are separate <db:link xlink:href="qml-qtquick-controls-slider.xml">Slider</db:link> elements, to control the wave size in X and Y coordinates. The last control is a <db:link xlink:href="qml-qtquick-controls-switch.xml">Switch</db:link>, to enable the electric clouds effect.</db:para>
<db:programlisting language="qml">WigglyEffect {
    id: wigglyEffect
    source: sourceItem
    anchors.fill: sourceItem
    timeRunning: true
    wigglyAmountX: wigglyAmountXSlider.value
    wigglyAmountY: wigglyAmountYSlider.value
    electricCloudColor.a: electricSwitch.checked ? 1.0 : 0.0
    wigglyShadows: 0.5
}
</db:programlisting>
<db:para>This WigglyEffect is applied to the <db:code>sourceItem</db:code> defined earlier. Code sets <db:code>timeRunning</db:code> to true to animate the effect. Finally, it connects some shader effect properties to the controlling components.</db:para>
<db:para>You can also look at the <db:code>WigglyEffect.qml</db:code> file for details of the effect. But that file is created by the QQEM tool, so you should not usually modify it manually. Instead, use the Qt Quick Effect Maker as instructed in the next section.</db:para>
</db:section>
<db:section xml:id="modifying-the-effect-in-qqem">
<db:title>Modifying the effect in QQEM</db:title>
<db:para>As mentioned above, the <db:emphasis>WigglyEffect</db:emphasis> has been created using the Qt Quick Effect Maker. For more information about QQEM installation, see the <db:link xlink:href="qqem-installing.xml">Installing Qt Quick Effect Maker</db:link> documentation.</db:para>
<db:para>To modify the effects:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Open the effect project file (qep) in the QQEM tool.</db:para>
</db:listitem>
<db:listitem>
<db:para>Modify the effect nodes, properties or the shader code and see the live preview.</db:para>
</db:listitem>
<db:listitem>
<db:para>When ready, export the modified effect into your application.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>When the <db:code>WigglyEffect/WigglyEffect.qep</db:code> project is opened in QQEM, you should see something like this:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/wiggly-qqem.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>On the left side, you can see the <db:guilabel>Node view</db:guilabel> with different nodes of this effect. The top-right view is <db:guilabel>Property view</db:guilabel>, with properties (API) of the effect. The bottom-right corner shows <db:guilabel>Live view</db:guilabel> of the effect, with the currently selected preview source item. To see the live preview with the actual content, add the image of the <db:code>sourceItem</db:code> to the sources list in <db:guilabel>Edit</db:guilabel> &gt; <db:guilabel>Preferences</db:guilabel> and select it from the preview toolbar popup list.</db:para>
<db:para>To modify the shader code for the wiggly effect, double-click the <db:emphasis>Wiggly</db:emphasis> node or select it and switch from <db:guilabel>DESIGN</db:guilabel> mode to <db:guilabel>CODE</db:guilabel> mode. Then select the <db:guilabel>VERT</db:guilabel> tab to see the vertex shader, where most of the effect code is:</db:para>
<db:programlisting language="cpp" role="bad">@mesh 63, 1
out vec3 wigglyColor;

float rainbowColor(float phase) {
    return abs(sin(texCoord.x * 2.0 + iTime + phase));
}

@main
{
    float wave = sin(vertCoord.x * 0.01 + iTime * 3.0);
    vertCoord.x += wigglyAmountX * wave;
    vertCoord.y += wigglyAmountY * wave;
    const float tau = 6.28318530718;
    wigglyColor.r = rainbowColor(0.0);
    wigglyColor.g = rainbowColor(1.0/3.0 * tau);
    wigglyColor.b = rainbowColor(2.0/3.0 * tau);
    float shadowAmount = (wigglyAmountX + wigglyAmountY) * wave;
    wigglyColor.rgb += shadowAmount * wigglyShadows * 0.01;
}
</db:programlisting>
<db:para>The first line sets up the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> mesh grid size. This is needed, as by default there are vertices only in the corners and the wiggly effect requires more moving vertices. Then, set the vertex shader to output <db:code>wigglyColor</db:code> variable, which will be later used in the fragment shader for applying some shadow. Next, introduce a function called <db:code>rainbowColor</db:code>, which returns the color of a single channel at the phase.</db:para>
<db:para>Inside the main method, code first sets the <db:code>vertCoord</db:code> to move the vertex positions in a sin wave. The next lines set the red, green, and blue channels of the wiggly rainbow. The last two lines then apply some shadowing following the wave.</db:para>
<db:para>Next, select the <db:guilabel>FRAG</db:guilabel> tab to see the fragment shader code:</db:para>
<db:programlisting language="cpp" role="bad">@main
{
    fragColor.rgb *= wigglyColor * fragColor.a;
}
</db:programlisting>
<db:para>The fragment shader is very simple and only multiplies the current source color with the <db:code>wigglyColor</db:code> received from the vertex shader.</db:para>
<db:para>More of the processing could have been done on the fragment shader side, but having the code on the vertex shader generally is more performant due to the number of vertices being notably lower than the number of fragments (pixels). Some tools, like the <db:link xlink:href="http://www.shadertoy.com">Shadertoy</db:link>, only allow writing a fragment shader. But as Qt Quick and QQEM also support custom vertex shaders, you should try to take advantage of them.</db:para>
<db:para>When you modify these shaders, the output of the <db:guilabel>Live view</db:guilabel> changes instantly. To get the modified shader into use in the example application, select <db:guilabel>File</db:guilabel> &gt; <db:guilabel>Export</db:guilabel> from the menu.</db:para>
<db:para>You can now play more with the QQEM features. For example, add new nodes, change or add new properties, utilize these properties in the shader code, and so on. Here is an example of what the effect looks like with <db:code>LedScreen</db:code> node added to the beginning of the node graph:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/wiggly-ledscreen.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="wiggly/CMakeLists.txt">wiggly/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wiggly/WigglyEffect/WigglyEffect.qml">wiggly/WigglyEffect/WigglyEffect.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wiggly/main.cpp">wiggly/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wiggly/main.qml">wiggly/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wiggly/qml.qrc">wiggly/qml.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wiggly/wiggly.pro">wiggly/wiggly.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
