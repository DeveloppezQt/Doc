<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Completer Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Completer example shows how to provide string-completion facilities for an input widget based on data provided by a model.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;
#include &quot;fsmodel.h&quot;
#include &quot;mainwindow.h&quot;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), completer(0), lineEdit(0)
{
    createMenu();

    QWidget *centralWidget = new QWidget;

    QLabel *modelLabel = new QLabel;
    modelLabel-&gt;setText(tr(&quot;Model&quot;));

    modelCombo = new QComboBox;
    modelCombo-&gt;addItem(tr(&quot;QFileSytemModel&quot;));
    modelCombo-&gt;addItem(tr(&quot;QFileSytemModel that shows full path&quot;));
    modelCombo-&gt;addItem(tr(&quot;Country list&quot;));
    modelCombo-&gt;addItem(tr(&quot;Word list&quot;));
    modelCombo-&gt;setCurrentIndex(0);

    QLabel *modeLabel = new QLabel;
    modeLabel-&gt;setText(tr(&quot;Completion Mode&quot;));
    modeCombo = new QComboBox;
    modeCombo-&gt;addItem(tr(&quot;Inline&quot;));
    modeCombo-&gt;addItem(tr(&quot;Filtered Popup&quot;));
    modeCombo-&gt;addItem(tr(&quot;Unfiltered Popup&quot;));
    modeCombo-&gt;setCurrentIndex(1);

    QLabel *caseLabel = new QLabel;
    caseLabel-&gt;setText(tr(&quot;Case Sensitivity&quot;));
    caseCombo = new QComboBox;
    caseCombo-&gt;addItem(tr(&quot;Case Insensitive&quot;));
    caseCombo-&gt;addItem(tr(&quot;Case Sensitive&quot;));
    caseCombo-&gt;setCurrentIndex(0);

    QLabel *maxVisibleLabel = new QLabel;
    maxVisibleLabel-&gt;setText(tr(&quot;Max Visible Items&quot;));
    maxVisibleSpinBox = new QSpinBox;
    maxVisibleSpinBox-&gt;setRange(3,25);
    maxVisibleSpinBox-&gt;setValue(10);

    wrapCheckBox = new QCheckBox;
    wrapCheckBox-&gt;setText(tr(&quot;Wrap around completions&quot;));
    wrapCheckBox-&gt;setChecked(true);

    contentsLabel = new QLabel;
    contentsLabel-&gt;setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);

    connect(modelCombo, SIGNAL(activated(int)), this, SLOT(changeModel()));
    connect(modeCombo, SIGNAL(activated(int)), this, SLOT(changeMode(int)));
    connect(caseCombo, SIGNAL(activated(int)), this, SLOT(changeCase(int)));
    connect(maxVisibleSpinBox, SIGNAL(valueChanged(int)), this, SLOT(changeMaxVisible(int)));

    lineEdit = new QLineEdit;

    QGridLayout *layout = new QGridLayout;
    layout-&gt;addWidget(modelLabel, 0, 0); layout-&gt;addWidget(modelCombo, 0, 1);
    layout-&gt;addWidget(modeLabel, 1, 0);  layout-&gt;addWidget(modeCombo, 1, 1);
    layout-&gt;addWidget(caseLabel, 2, 0);  layout-&gt;addWidget(caseCombo, 2, 1);
    layout-&gt;addWidget(maxVisibleLabel, 3, 0); layout-&gt;addWidget(maxVisibleSpinBox, 3, 1);
    layout-&gt;addWidget(wrapCheckBox, 4, 0);
    layout-&gt;addWidget(contentsLabel, 5, 0, 1, 2);
    layout-&gt;addWidget(lineEdit, 6, 0, 1, 2);
    centralWidget-&gt;setLayout(layout);
    setCentralWidget(centralWidget);

    changeModel();

    setWindowTitle(tr(&quot;Completer&quot;));
    lineEdit-&gt;setFocus();
}

void MainWindow::createMenu()
{
    QAction *exitAction = new QAction(tr(&quot;Exit&quot;), this);
    QAction *aboutAct = new QAction(tr(&quot;About&quot;), this);
    QAction *aboutQtAct = new QAction(tr(&quot;About Qt&quot;), this);

    connect(exitAction, SIGNAL(triggered()), qApp, SLOT(quit()));
    connect(aboutAct, SIGNAL(triggered()), this, SLOT(about()));
    connect(aboutQtAct, SIGNAL(triggered()), qApp, SLOT(aboutQt()));

    QMenu* fileMenu = menuBar()-&gt;addMenu(tr(&quot;File&quot;));
    fileMenu-&gt;addAction(exitAction);

    QMenu* helpMenu = menuBar()-&gt;addMenu(tr(&quot;About&quot;));
    helpMenu-&gt;addAction(aboutAct);
    helpMenu-&gt;addAction(aboutQtAct);
}

QAbstractItemModel *MainWindow::modelFromFile(const QString&amp; fileName)
{
    QFile file(fileName);
    if (!file.open(QFile::ReadOnly))
        return new QStringListModel(completer);

#ifndef QT_NO_CURSOR
    QApplication::setOverrideCursor(QCursor(Qt::WaitCursor));
#endif
    QStringList words;

    while (!file.atEnd()) {
        QByteArray line = file.readLine();
        if (!line.isEmpty())
            words &lt;&lt; line.trimmed();
    }

#ifndef QT_NO_CURSOR
    QApplication::restoreOverrideCursor();
#endif

    if (!fileName.contains(QLatin1String(&quot;countries.txt&quot;)))
        return new QStringListModel(words, completer);

    // The last two chars of the countries.txt file indicate the country
    // symbol. We put that in column 2 of a standard item model
    QStandardItemModel *m = new QStandardItemModel(words.count(), 2, completer);
    for (int i = 0; i &lt; words.count(); ++i) {
        QModelIndex countryIdx = m-&gt;index(i, 0);
        QModelIndex symbolIdx = m-&gt;index(i, 1);
        QString country = words[i].mid(0, words[i].length() - 2).trimmed();
        QString symbol = words[i].right(2);
        m-&gt;setData(countryIdx, country);
        m-&gt;setData(symbolIdx, symbol);
    }

    return m;
}

void MainWindow::changeMode(int index)
{
    QCompleter::CompletionMode mode;
    if (index == 0)
        mode = QCompleter::InlineCompletion;
    else if (index == 1)
        mode = QCompleter::PopupCompletion;
    else
        mode = QCompleter::UnfilteredPopupCompletion;

    completer-&gt;setCompletionMode(mode);
}

void MainWindow::changeCase(int cs)
{
    completer-&gt;setCaseSensitivity(cs ? Qt::CaseSensitive : Qt::CaseInsensitive);
}

void MainWindow::changeModel()
{
    delete completer;
    completer = new QCompleter(this);
    completer-&gt;setMaxVisibleItems(maxVisibleSpinBox-&gt;value());

    switch (modelCombo-&gt;currentIndex()) {
    default:
    case 0:
        { // Unsorted QFileSystemModel
            QFileSystemModel *fsModel = new QFileSystemModel(completer);
            fsModel-&gt;setRootPath(&quot;&quot;);
            completer-&gt;setModel(fsModel);
            contentsLabel-&gt;setText(tr(&quot;Enter file path&quot;));
        }
        break;
    case 1:
        {   // FileSystemModel that shows full paths
            FileSystemModel *fsModel = new FileSystemModel(completer);
            completer-&gt;setModel(fsModel);
            fsModel-&gt;setRootPath(&quot;&quot;);
            contentsLabel-&gt;setText(tr(&quot;Enter file path&quot;));
        }
        break;
    case 2:
        { // Country List
            completer-&gt;setModel(modelFromFile(&quot;:/resources/countries.txt&quot;));
            QTreeView *treeView = new QTreeView;
            completer-&gt;setPopup(treeView);
            treeView-&gt;setRootIsDecorated(false);
            treeView-&gt;header()-&gt;hide();
            treeView-&gt;header()-&gt;setStretchLastSection(false);
            treeView-&gt;header()-&gt;setSectionResizeMode(0, QHeaderView::Stretch);
            treeView-&gt;header()-&gt;setSectionResizeMode(1, QHeaderView::ResizeToContents);
            contentsLabel-&gt;setText(tr(&quot;Enter name of your country&quot;));
        }
        break;
    case 3:
        { // Word list
            completer-&gt;setModel(modelFromFile(&quot;:/resources/wordlist.txt&quot;));
            completer-&gt;setModelSorting(QCompleter::CaseInsensitivelySortedModel);
            contentsLabel-&gt;setText(tr(&quot;Enter a word&quot;));
        }
        break;
    }

    changeMode(modeCombo-&gt;currentIndex());
    changeCase(caseCombo-&gt;currentIndex());
    completer-&gt;setWrapAround(wrapCheckBox-&gt;isChecked());
    lineEdit-&gt;setCompleter(completer);
    connect(wrapCheckBox, SIGNAL(clicked(bool)), completer, SLOT(setWrapAround(bool)));
}

void MainWindow::changeMaxVisible(int max)
{
    completer-&gt;setMaxVisibleItems(max);
}

void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About&quot;), tr(&quot;This example demonstrates the &quot;
        &quot;different features of the QCompleter class.&quot;));
}

</db:programlisting>
</db:article>
