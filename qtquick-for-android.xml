<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick for Android</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview on using QML in native Android projects.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="qt-quick-for-android-overview">
<db:title>Qt Quick for Android overview</db:title>
<db:para>The basis of this approach is to offer Qt QML APIs in an embedded way so that the app will remain a relatively typical Android app. This approach offers a more standard Android-centered approach at the cost of leveraging the cross-platform nature of a Qt application. It's best suited for adding desirable Qt features to an existing Android application.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Android creates the Qt content and controls it.</db:para>
</db:listitem>
<db:listitem>
<db:para>Android Studio with the <db:link xlink:href="">Qt Tools for Android Studio</db:link> plugin is used for development.</db:para>
</db:listitem>
<db:listitem>
<db:para>For Qt content, Qt Creator or Qt Design Studio are used.</db:para>
</db:listitem>
<db:listitem>
<db:para>Main languages are Java and Kotlin, with QML used for specific parts such as 3D content.</db:para>
</db:listitem>
<db:listitem>
<db:para>You can use any Android APIs you want, but you can use JNI if you want more control over communication between your Java code and QML. See <db:link xlink:href="qjniobject.xml">QJniObject</db:link> and <db:link xlink:href="qjnienvironment.xml">QJniEnvironment</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="how-this-differs-from-qt-for-android">
<db:title>How this differs from Qt for Android</db:title>
<db:para>The most prominent difference between these approaches is the project structure. Qt for Android applications are CMake projects that can be built for Android or other platforms, while a Qt Quick for Android Project is an Android project that includes QML content and can only be built for Android.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquick-for-android-comparisson.drawio.svg"/>
</db:imageobject>
</db:mediaobject>
<db:para>The main objective of the Qt for Android approach is to let Qt handle most of the work of the architecture and boilerplate code of the app and let you focus on the content. It offers a complete and reliable cross-platform approach.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt creates and controls the Android app.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, <db:link xlink:href="qtquick-tools-and-utilities.xml#qt-design-studio">Qt Design Studio</db:link>, or Visual Studio can be used.</db:para>
</db:listitem>
<db:listitem>
<db:para>Main languages are C++ and QML.</db:para>
</db:listitem>
<db:listitem>
<db:para>Android specifics are more hidden; Qt handles these internally.</db:para>
</db:listitem>
<db:listitem>
<db:para>To use Android APIs not yet available as Qt APIs, you must use JNI. See <db:link xlink:href="qjniobject.xml">QJniObject</db:link> and <db:link xlink:href="qjnienvironment.xml">QJniEnvironment</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>See <db:link xlink:href="">How Qt for Android Works</db:link> for further details on Qt for Android's architecture.</db:para>
</db:section>
</db:section>
<db:section xml:id="how-qt-quick-for-android-works">
<db:title>How Qt Quick for Android works</db:title>
<db:para>Qt Quick for Android offers you <db:link xlink:href="qtquick-android-classes.xml">Android APIs</db:link> that enable you to insert QML content as an <db:link xlink:href="https://developer.android.com/reference/android/view/View">Android View</db:link> in your project.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquick-for-android-architecture.drawio.svg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="apis">
<db:title>APIs</db:title>
<db:anchor xml:id="android-classes"/>
<db:para>These are the public Java and Kotlin APIs that you will use in an Android app to embed QML.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickview-android-class.xml">Qt Quick View Android Class</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">QtAbstractItemModel Android Class</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">QtAbstractListModel Android Class</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">interface QtQmlStatusChangeListener</db:link> (which uses the QtQmlStatus enum)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">QtModelIndex Android Class</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>See the <db:link xlink:href="cmake-variable-qt-android-generate-java-qml-components.xml">QT_ANDROID_GENERATE_JAVA_QTQUICKVIEW_CONTENTS</db:link> CMake variable for further information on Java code generation of QML components.</db:para>
</db:note>
</db:section>
<db:section xml:id="api-examples">
<db:title>API examples</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-in-android-studio-projects-example.xml">Qt Quick for Android Studio Projects</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtabstractlistmoder-kotlin-example.xml">Exposing QtAbstractListModel to QML</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtabstractitemmodel-in-android-studio-projects-example.xml">Using QtAbstractItemModel in Android Studio Projects</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="running-qt-quick-for-android-examples">
<db:title>Running Qt Quick for Android examples</db:title>
<db:para>The Qt Quick for Android API examples are provided as Android Studio projects. The project folders are found in your Qt install location.</db:para>
<db:para>For example, under the default Windows install path, they are found here:</db:para>
<db:programlisting language="cpp" role="bad">C:\Qt\Examples\Qt-/1\platforms\android
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="tooling">
<db:title>Tooling</db:title>
<db:para>The <db:link xlink:href="">Qt Gradle Plugin</db:link> and <db:link xlink:href="">Qt Tools for Android Studio</db:link> plugin are provided by Qt for easy development. You can use the Gradle Plugin independently from an IDE as part of your build toolchain. Qt Tools for Android Studio uses the plugin to build your projects in Android Studio.</db:para>
</db:section>
</db:article>
