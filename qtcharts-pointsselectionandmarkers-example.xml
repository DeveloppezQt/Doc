<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Light Markers Points Selection Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows a usage of light markers and points selection for the series.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_pointsselectionandmarkers1.png"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_pointsselectionandmarkers2.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="light-markers-feature">
<db:title>Light Markers Feature</db:title>
<db:para>We start with creating a series, filling it with the data, and setting up selection funcionality. It's important not to set points visibility to <db:code>true</db:code>, because light markers functionality is an independent feature and setting both would result in undesired behavior.</db:para>
<db:programlisting language="cpp">constexpr qreal marker_size = 20.;

QSplineSeries *series = new QSplineSeries();
series-&amp;gt;append({QPointF(0., 0.),
                QPointF(0.5, 2.27),
                QPointF(1.5, 2.2),
                QPointF(3.3, 1.7),
                QPointF(4.23, 3.1),
                QPointF(5.3, 2.3),
                QPointF(6.47, 4.1)
               });
series-&amp;gt;setMarkerSize(marker_size);
series-&amp;gt;setLightMarker(Utilities::redRectangle(marker_size));
series-&amp;gt;setSelectedLightMarker(Utilities::blueTriangle(marker_size));
QObject::connect(series, &amp;amp;QXYSeries::clicked, series, [&amp;amp;](const QPointF &amp;amp;point) {
   int index = series-&amp;gt;points().indexOf(point);
   if (index != -1)
       series-&amp;gt;toggleSelection({index});
});
</db:programlisting>
<db:para>Then we create the <db:code>QChart</db:code>, the <db:code>QChartview</db:code> and the control widget with its layout to arrange customization elements.</db:para>
<db:programlisting language="cpp">QChart *chart = new QChart();
chart-&amp;gt;addSeries(series);
chart-&amp;gt;createDefaultAxes();
chart-&amp;gt;legend()-&amp;gt;setVisible(false);

QChartView *chartView = new QChartView(chart);
chartView-&amp;gt;setRenderHint(QPainter::Antialiasing);

QWidget *controlWidget = new QWidget(&amp;amp;mainWindow);
QGridLayout *controlLayout = new QGridLayout(controlWidget);
</db:programlisting>
<db:para>The next step is creating elements of customization.</db:para>
<db:programlisting language="cpp">QComboBox *charPointCombobox = new QComboBox();
QComboBox *charPointSelectedCombobox = new QComboBox();
QComboBox *lineColorCombobox = new QComboBox();
QCheckBox *showUnselectedPointsCheckbox = new QCheckBox();
</db:programlisting>
<db:para>We create the label for the marker selection combobox and add fill the combobox with the items. Also, we provide functionality to the combobox. Considering the implementation of the light markers functionality, we need to make sure if displaying of unselected points is checked. Switching the visibility of the light marker off is achieved by setting it to <db:code>&quot;empty&quot;</db:code> <db:code>QImage</db:code>. If the user unchecks the displaying of unselected points and changes the light marker image, unselected points have to remain invisible. If checking isn't performed, new <db:code>QImage</db:code> will be set for light marker and unselected points will be visible even though it has been switched off.</db:para>
<db:programlisting language="cpp">QLabel *charPoint = new QLabel(QCoreApplication::tr(&quot;Char point: &quot;));
charPointCombobox-&amp;gt;addItems({QCoreApplication::tr(&quot;Red rectangle&quot;),
                             QCoreApplication::tr(&quot;Green triangle&quot;),
                             QCoreApplication::tr(&quot;Orange circle&quot;)
                            });
QObject::connect(charPointCombobox, &amp;amp;QComboBox::currentIndexChanged, series, [&amp;amp;](const int index) {
    if (showUnselectedPointsCheckbox-&amp;gt;isChecked())
        series-&amp;gt;setLightMarker(Utilities::getPointRepresentation(Utilities::PointType(index), marker_size));
});
</db:programlisting>
<db:para>Almost the same procedure applies to the selected point light marker and line color. The only difference is that there's no need to check visibility of unselected points as it doesn't affect the functionality.</db:para>
<db:programlisting language="cpp">QLabel *charPointSelected = new QLabel(QCoreApplication::tr(&quot;Char point selected: &quot;));
charPointSelectedCombobox-&amp;gt;addItems({QCoreApplication::tr(&quot;Blue triangle&quot;),
                                     QCoreApplication::tr(&quot;Yellow rectangle&quot;),
                                     QCoreApplication::tr(&quot;Lavender circle&quot;)
                                    });
QObject::connect(charPointSelectedCombobox, &amp;amp;QComboBox::currentIndexChanged, series, [&amp;amp;](const int index) {
    series-&amp;gt;setSelectedLightMarker(Utilities::getSelectedPointRepresentation(Utilities::SelectedPointType(index), marker_size));
});

QLabel *lineColorLabel = new QLabel(QCoreApplication::tr(&quot;Line color: &quot;));
lineColorCombobox-&amp;gt;addItems({QCoreApplication::tr(&quot;Blue&quot;),
                             QCoreApplication::tr(&quot;Black&quot;),
                             QCoreApplication::tr(&quot;Mint&quot;)
                            });
QObject::connect(lineColorCombobox, &amp;amp;QComboBox::currentIndexChanged, series, [&amp;amp;](const int index) {
    series-&amp;gt;setColor(Utilities::makeLineColor(Utilities::LineColor(index)));
});
</db:programlisting>
<db:para>A small difference comes with changing visibility of unselected points. As it was mentioned before, making light markers invisible is achieved by setting them to &quot;empty&quot; <db:code>QImage</db:code>. That is why, depending on checkbox state, selected point light marker is set to &quot;empty&quot; <db:code>QImage</db:code> or to the light marker extracted from the current index of the corresponding combobox.</db:para>
<db:programlisting language="cpp">QLabel *showUnselectedPointsLabel = new QLabel(QCoreApplication::tr(&quot;Display unselected points: &quot;));
showUnselectedPointsCheckbox-&amp;gt;setChecked(true);
QObject::connect(showUnselectedPointsCheckbox, &amp;amp;QCheckBox::stateChanged, series, [&amp;amp;](const int state) {
    if (state) {
        series-&amp;gt;setLightMarker(Utilities::getPointRepresentation(Utilities::PointType(charPointCombobox-&amp;gt;currentIndex()), marker_size));
    } else {
        series-&amp;gt;setLightMarker(QImage());
    }
});
</db:programlisting>
<db:para>The final part is to arrange the elements, add all the widgets to the main widget, and set the main window size.</db:para>
<db:programlisting language="cpp">controlLayout-&amp;gt;addWidget(charPoint, 0, 0);
controlLayout-&amp;gt;addWidget(charPointCombobox, 0, 1);

controlLayout-&amp;gt;addWidget(charPointSelected, 1, 0);
controlLayout-&amp;gt;addWidget(charPointSelectedCombobox, 1, 1);

controlLayout-&amp;gt;addWidget(lineColorLabel, 2, 0);
controlLayout-&amp;gt;addWidget(lineColorCombobox, 2, 1);

controlLayout-&amp;gt;addWidget(showUnselectedPointsLabel, 3, 0);
controlLayout-&amp;gt;addWidget(showUnselectedPointsCheckbox, 3, 1, 1, 2);

QWidget *mainWidget = new QWidget(&amp;amp;mainWindow);
QHBoxLayout *mainLayout = new QHBoxLayout(mainWidget);
mainLayout-&amp;gt;addWidget(chartView);
mainLayout-&amp;gt;addWidget(controlWidget);

mainWindow.setCentralWidget(mainWidget);
mainWindow.resize(1080, 720);
mainWindow.show();
return a.exec();
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/pointsselectionandmarkers?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
