<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLWindow Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> class is a convenience subclass of <db:link xlink:href="qwindow.xml">QWindow</db:link> to perform OpenGL painting.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLWindow</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpaintdevicewindow.xml" xlink:role="class">QPaintDeviceWindow</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> is an enhanced <db:link xlink:href="qwindow.xml">QWindow</db:link> that allows easily creating windows that perform OpenGL rendering using an API that is compatible with <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link> and is similar to the legacy QGLWidget. Unlike <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>, <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> has no dependency on the widgets module and offers better performance.</db:para>
<db:para>A typical application will subclass <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> and reimplement the following virtual functions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qopenglwindow.xml#initializeGL">initializeGL</db:link>() to perform OpenGL resource initialization</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qopenglwindow.xml#resizeGL">resizeGL</db:link>() to set up the transformation matrices and other window size dependent resources</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>() to issue OpenGL commands or draw using <db:link xlink:href="qpainter.xml">QPainter</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To schedule a repaint, call the <db:link xlink:href="qpaintdevicewindow.xml#update-2">update</db:link>() function. Note that this will not immediately result in a call to <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>(). Calling <db:link xlink:href="qpaintdevicewindow.xml#update-2">update</db:link>() multiple times in a row will not change the behavior in any way.</db:para>
<db:para>This is a slot so it can be connected to a <db:link xlink:href="qtimer.xml#timeout">QTimer::timeout</db:link>() signal to perform animation. Note however that in the modern OpenGL world it is a much better choice to rely on synchronization to the vertical refresh rate of the display. See <db:link xlink:href="qsurfaceformat.xml#setSwapInterval">setSwapInterval</db:link>() on a description of the swap interval. With a swap interval of <db:code>1</db:code>, which is the case on most systems by default, the <db:link xlink:href="qopenglcontext.xml#swapBuffers">swapBuffers</db:link>() call, that is executed internally by <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> after each repaint, will block and wait for vsync. This means that whenever the swap is done, an update can be scheduled again by calling <db:link xlink:href="qpaintdevicewindow.xml#update-2">update</db:link>(), without relying on timers.</db:para>
<db:para>To request a specific configuration for the context, use <db:link xlink:href="qwindow.xml#setFormat">setFormat</db:link>() like for any other <db:link xlink:href="qwindow.xml">QWindow</db:link>. This allows, among others, requesting a given OpenGL version and profile, or enabling depth and stencil buffers.</db:para>
<db:para>Unlike <db:link xlink:href="qwindow.xml">QWindow</db:link>, <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> allows opening a painter on itself and perform <db:link xlink:href="qpainter.xml">QPainter</db:link>-based drawing.</db:para>
<db:para><db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> supports multiple update behaviors. The default, <db:code>NoPartialUpdate</db:code> is equivalent to a regular, OpenGL-based <db:link xlink:href="qwindow.xml">QWindow</db:link> or the legacy QGLWidget. In contrast, <db:code>PartialUpdateBlit</db:code> and <db:code>PartialUpdateBlend</db:code> are more in line with <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>'s way of working, where there is always an extra, dedicated framebuffer object present. These modes allow, by sacrificing some performance, redrawing only a smaller area on each paint and having the rest of the content preserved from of the previous frame. This is useful for applications than render incrementally using <db:link xlink:href="qpainter.xml">QPainter</db:link>, because this way they do not have to redraw the entire window content on each <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>() call.</db:para>
<db:para>Similarly to <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>, <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> supports the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_ShareOpenGLContexts</db:link> attribute. When enabled, the OpenGL contexts of all <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> instances will share with each other. This allows accessing each other's shareable OpenGL resources.</db:para>
<db:para>For more information on graphics in Qt, see <db:link xlink:href="graphicsview.xml">Graphics</db:link>.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="UpdateBehavior-enum">
<db:title>enum QOpenGLWindow::UpdateBehavior</db:title>
<db:enumsynopsis>
<db:enumname>UpdateBehavior</db:enumname>
<db:enumitem>
<db:enumidentifier>NoPartialUpdate</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PartialUpdateBlit</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PartialUpdateBlend</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the update strategy of the <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link></db:emphasis>::NoPartialUpdate</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Indicates that the entire window surface will redrawn on each update and so no additional framebuffers are needed. This is the setting used in most cases and is equivalent to how drawing directly via <db:link xlink:href="qwindow.xml">QWindow</db:link> would function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link></db:emphasis>::PartialUpdateBlit</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Indicates that the drawing performed in <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>() does not cover the entire window. In this case an extra framebuffer object is created under the hood, and rendering performed in <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>() will target this framebuffer. This framebuffer is then blitted onto the window surface's default framebuffer after each paint. This allows having <db:link xlink:href="qpainter.xml">QPainter</db:link>-based drawing code in <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>() which only repaints a smaller area at a time, because, unlike NoPartialUpdate, the previous content is preserved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link></db:emphasis>::PartialUpdateBlend</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Similar to PartialUpdateBlit, but instead of using framebuffer blits, the contents of the extra framebuffer is rendered by drawing a textured quad with blending enabled. This, unlike PartialUpdateBlit, allows alpha blended content and works even when the glBlitFramebuffer is not available. Performance-wise this setting is likely to be somewhat slower than PartialUpdateBlit.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLWindow">
<db:title>[explicit] QOpenGLWindow::QOpenGLWindow(QOpenGLWindow::UpdateBehavior <db:emphasis>updateBehavior</db:emphasis> = NoPartialUpdate, QWindow *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOpenGLWindow</db:methodname>
<db:methodparam>
<db:type>QOpenGLWindow::UpdateBehavior</db:type>
<db:parameter>updateBehavior</db:parameter>
<db:initializer>NoPartialUpdate</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLWindow(QOpenGLWindow::UpdateBehavior updateBehavior, QWindow *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> with the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">updateBehavior</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglwindow.xml#UpdateBehavior-enum">QOpenGLWindow::UpdateBehavior</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QOpenGLWindow-1">
<db:title>[explicit] QOpenGLWindow::QOpenGLWindow(QOpenGLContext *<db:emphasis>shareContext</db:emphasis>, QOpenGLWindow::UpdateBehavior <db:emphasis>updateBehavior</db:emphasis> = NoPartialUpdate, QWindow *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOpenGLWindow</db:methodname>
<db:methodparam>
<db:type>QOpenGLContext *</db:type>
<db:parameter>shareContext</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLWindow::UpdateBehavior</db:type>
<db:parameter>updateBehavior</db:parameter>
<db:initializer>NoPartialUpdate</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLWindow(QOpenGLContext *shareContext, QOpenGLWindow::UpdateBehavior updateBehavior, QWindow *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> with the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">updateBehavior</db:code>. The <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link>'s context will share with <db:code role="parameter">shareContext</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglwindow.xml#UpdateBehavior-enum">QOpenGLWindow::UpdateBehavior</db:link></db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#shareContext">shareContext</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QOpenGLWindow">
<db:title>[virtual, since 5.5] QOpenGLWindow::~QOpenGLWindow()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QOpenGLWindow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QOpenGLWindow()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> instance, freeing its resources.</db:para>
<db:para>The OpenGLWindow's context is made current in the destructor, allowing for safe destruction of any child object that may need to release OpenGL resources belonging to the context provided by this window.</db:para>
<db:warning>
<db:para>if you have objects wrapping OpenGL resources (such as <db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link>, <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link>, etc.) as members of a <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> subclass, you may need to add a call to <db:link xlink:href="qopenglwindow.xml#makeCurrent">makeCurrent</db:link>() in that subclass' destructor as well. Due to the rules of C++ object destruction, those objects will be destroyed <db:emphasis>before</db:emphasis> calling this function (but after that the destructor of the subclass has run), therefore making the OpenGL context current in this function happens too late for their safe disposal.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglwindow.xml#makeCurrent">makeCurrent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="context">
<db:title>QOpenGLContext *QOpenGLWindow::context() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLContext *</db:type>
<db:methodname>context</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLContext * context() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns The <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> used by this window or <db:code>0</db:code> if not yet initialized.</db:para>
</db:section>
<db:section xml:id="defaultFramebufferObject">
<db:title>GLuint QOpenGLWindow::defaultFramebufferObject() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLuint</db:type>
<db:methodname>defaultFramebufferObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint defaultFramebufferObject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The framebuffer object handle used by this window.</db:para>
<db:para>When the update behavior is set to <db:code>NoPartialUpdate</db:code>, there is no separate framebuffer object. In this case the returned value is the ID of the default framebuffer.</db:para>
<db:para>Otherwise the value of the ID of the framebuffer object or <db:code>0</db:code> if not yet initialized.</db:para>
</db:section>
<db:section xml:id="doneCurrent">
<db:title>void QOpenGLWindow::doneCurrent()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>doneCurrent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void doneCurrent()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the context.</db:para>
<db:para>It is not necessary to call this function in most cases, since the widget will make sure the context is bound and released properly when invoking <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglwindow.xml#makeCurrent">makeCurrent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameSwapped">
<db:title>void QOpenGLWindow::frameSwapped()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>frameSwapped</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void frameSwapped()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after the potentially blocking <db:link xlink:href="qopenglcontext.xml#swapBuffers">buffer swap</db:link> has been done. Applications that wish to continuously repaint synchronized to the vertical refresh, should issue an <db:link xlink:href="qpaintdevicewindow.xml#update-2">update</db:link>() upon this signal. This allows for a much smoother experience compared to the traditional usage of timers.</db:para>
</db:section>
<db:section xml:id="grabFramebuffer">
<db:title>QImage QOpenGLWindow::grabFramebuffer()</db:title>
<db:methodsynopsis>
<db:type>QImage</db:type>
<db:methodname>grabFramebuffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage grabFramebuffer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of the framebuffer.</db:para>
<db:note>
<db:para>This is a potentially expensive operation because it relies on glReadPixels() to read back the pixels. This may be slow and can stall the GPU pipeline.</db:para>
</db:note>
<db:note>
<db:para>When used together with update behavior <db:code>NoPartialUpdate</db:code>, the returned image may not contain the desired content when called after the front and back buffers have been swapped (unless preserved swap is enabled in the underlying windowing system interface). In this mode the function reads from the back buffer and the contents of that may not match the content on the screen (the front buffer). In this case the only place where this function can safely be used is <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>() or <db:link xlink:href="qopenglwindow.xml#paintOverGL">paintOverGL</db:link>().</db:para>
</db:note>
</db:section>
<db:section xml:id="initializeGL">
<db:title>[virtual protected] void QOpenGLWindow::initializeGL()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>initializeGL</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initializeGL()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called once before the first call to <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>() or <db:link xlink:href="qopenglwindow.xml#resizeGL">resizeGL</db:link>(). Reimplement it in a subclass.</db:para>
<db:para>This function should set up any required OpenGL resources and state.</db:para>
<db:para>There is no need to call <db:link xlink:href="qopenglwindow.xml#makeCurrent">makeCurrent</db:link>() because this has already been done when this function is called. Note however that the framebuffer, in case partial update mode is used, is not yet available at this stage, so avoid issuing draw calls from here. Defer such calls to <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#resizeGL">resizeGL</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QOpenGLWindow::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the window's OpenGL resources, like the context, have been successfully initialized. Note that the return value is always <db:code>false</db:code> until the window becomes exposed (shown).</db:para>
</db:section>
<db:section xml:id="makeCurrent">
<db:title>void QOpenGLWindow::makeCurrent()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>makeCurrent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void makeCurrent()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Prepares for rendering OpenGL content for this window by making the corresponding context current and binding the framebuffer object, if there is one, in that context context.</db:para>
<db:para>It is not necessary to call this function in most cases, because it is called automatically before invoking <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>(). It is provided nonetheless to support advanced, multi-threaded scenarios where a thread different than the GUI or main thread may want to update the surface or framebuffer contents. See <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> for more information on threading related issues.</db:para>
<db:para>This function is suitable for calling also when the underlying platform window is already destroyed. This means that it is safe to call this function from a <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> subclass' destructor. If there is no native window anymore, an offscreen surface is used instead. This ensures that OpenGL resource cleanup operations in the destructor will always work, as long as this function is called first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link></db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#context">context</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#doneCurrent">doneCurrent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QOpenGLWindow::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintdevicewindow.xml#paintEvent" role="function">QPaintDeviceWindow::paintEvent(QPaintEvent *event)</db:link>.</db:para>
<db:para>Paint <db:code role="parameter">event</db:code> handler. Calls <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintGL">
<db:title>[virtual protected] void QOpenGLWindow::paintGL()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintGL</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintGL()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called whenever the window contents needs to be painted. Reimplement it in a subclass.</db:para>
<db:para>There is no need to call <db:link xlink:href="qopenglwindow.xml#makeCurrent">makeCurrent</db:link>() because this has already been done when this function is called.</db:para>
<db:para>Before invoking this function, the context and the framebuffer, if there is one, are bound, and the viewport is set up by a call to glViewport(). No other state is set and no clearing or drawing is performed by the framework.</db:para>
<db:note>
<db:para>When using a partial update behavior, like <db:code>PartialUpdateBlend</db:code>, the output of the previous paintGL() call is preserved and, after the additional drawing perfomed in the current invocation of the function, the content is blitted or blended over the content drawn directly to the window in <db:link xlink:href="qopenglwindow.xml#paintUnderGL">paintUnderGL</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglwindow.xml#initializeGL">initializeGL</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#resizeGL">resizeGL</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#paintUnderGL">paintUnderGL</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#paintOverGL">paintOverGL</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#UpdateBehavior-enum">UpdateBehavior</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintOverGL">
<db:title>[virtual protected] void QOpenGLWindow::paintOverGL()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintOverGL</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintOverGL()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called after each invocation of <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>().</db:para>
<db:para>When the update mode is set to <db:link xlink:href="qopenglwindow.xml#UpdateBehavior-enum">NoPartialUpdate</db:link>, there is no difference between this function and <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>(), performing rendering in either of them leads to the same result.</db:para>
<db:para>Like <db:link xlink:href="qopenglwindow.xml#paintUnderGL">paintUnderGL</db:link>(), rendering in this function targets the default framebuffer of the window, regardless of the update behavior. It gets called after <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>() has returned and the blit (<db:link xlink:href="qopenglwindow.xml#UpdateBehavior-enum">PartialUpdateBlit</db:link>) or quad drawing (<db:link xlink:href="qopenglwindow.xml#UpdateBehavior-enum">PartialUpdateBlend</db:link>) has been done.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#paintUnderGL">paintUnderGL</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#UpdateBehavior-enum">UpdateBehavior</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintUnderGL">
<db:title>[virtual protected] void QOpenGLWindow::paintUnderGL()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintUnderGL</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintUnderGL()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The virtual function is called before each invocation of <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>().</db:para>
<db:para>When the update mode is set to <db:code>NoPartialUpdate</db:code>, there is no difference between this function and <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>(), performing rendering in either of them leads to the same result.</db:para>
<db:para>The difference becomes significant when using <db:code>PartialUpdateBlend</db:code>, where an extra framebuffer object is used. There, <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>() targets this additional framebuffer object, which preserves its contents, while paintUnderGL() and <db:link xlink:href="qopenglwindow.xml#paintOverGL">paintOverGL</db:link>() target the default framebuffer, i.e. directly the window surface, the contents of which is lost after each displayed frame.</db:para>
<db:note>
<db:para>Avoid relying on this function when the update behavior is <db:code>PartialUpdateBlit</db:code>. This mode involves blitting the extra framebuffer used by <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>() onto the default framebuffer after each invocation of <db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>(), thus overwriting all drawing generated in this function.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#paintOverGL">paintOverGL</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#UpdateBehavior-enum">UpdateBehavior</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QOpenGLWindow::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwindow.xml#resizeEvent" role="function">QWindow::resizeEvent(QResizeEvent *ev)</db:link>.</db:para>
<db:para>Resize <db:code role="parameter">event</db:code> handler. Calls <db:link xlink:href="qopenglwindow.xml#resizeGL">resizeGL</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglwindow.xml#resizeGL">resizeGL</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeGL">
<db:title>[virtual protected] void QOpenGLWindow::resizeGL(int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeGL</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeGL(int w, int h)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called whenever the widget has been resized. Reimplement it in a subclass. The new size is passed in <db:code role="parameter">w</db:code> and <db:code role="parameter">h</db:code>.</db:para>
<db:note>
<db:para>This is merely a convenience function in order to provide an API that is compatible with <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>. Unlike with <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>, derived classes are free to choose to override <db:link xlink:href="qopenglwindow.xml#resizeEvent">resizeEvent</db:link>() instead of this function.</db:para>
</db:note>
<db:note>
<db:para>Avoid issuing OpenGL commands from this function as there may not be a context current when it is invoked. If it cannot be avoided, call <db:link xlink:href="qopenglwindow.xml#makeCurrent">makeCurrent</db:link>().</db:para>
</db:note>
<db:note>
<db:para>Scheduling updates from here is not necessary. The windowing systems will send expose events that trigger an update automatically.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglwindow.xml#initializeGL">initializeGL</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglwindow.xml#paintGL">paintGL</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shareContext">
<db:title>QOpenGLContext *QOpenGLWindow::shareContext() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLContext *</db:type>
<db:methodname>shareContext</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLContext * shareContext() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns The <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> requested to be shared with this window's <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>.</db:para>
</db:section>
<db:section xml:id="updateBehavior">
<db:title>QOpenGLWindow::UpdateBehavior QOpenGLWindow::updateBehavior() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLWindow::UpdateBehavior</db:type>
<db:methodname>updateBehavior</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLWindow::UpdateBehavior updateBehavior() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the update behavior for this <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
