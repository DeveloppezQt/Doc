<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Controls - Touch Gallery</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates UI controls for a touch interface.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-example-touch.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Touch Gallery</db:emphasis> demonstrates how to implement a UI suitable for touch input using the following <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-button.xml">Button</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-progressbar.xml">ProgressBar</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-slider.xml">Slider</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-switch.xml">Switch</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-tab.xml">Tab</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-tabview.xml">TabView</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The appearance of the controls is customized by using <db:link xlink:href="qtquickcontrolsstyles-index.xml">Qt Quick Controls Styles</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-the-main-page">
<db:title>Creating the Main Page</db:title>
<db:para>In the main.qml file, we use a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type within the <db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link> type to create the main page of the application:</db:para>
<db:programlisting language="cpp">ApplicationWindow {
    visible: true
    width: 800
    height: 1280

    Rectangle {
        color: &quot;#212126&quot;
        anchors.fill: parent
    }

</db:programlisting>
<db:para>To use the Qt Quick Controls, we must import them:</db:para>
<db:programlisting language="cpp">import QtQuick.Controls 1.2
</db:programlisting>
<db:para>The <db:code>toolBar</db:code> property of the application window holds a <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link> type that we use to create a separator between the application name and a list of additional pages:</db:para>
<db:programlisting language="cpp">    toolBar: BorderImage {
        border.bottom: 8
        source: &quot;images/toolbar.png&quot;
        width: parent.width
        height: 100

</db:programlisting>
<db:para>We use an <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> type in a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type to create a back button. We use the <db:code>onClicked</db:code> signal handler to call the <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> <db:code>pop()</db:code> function that pops off the page when users tap the button:</db:para>
<db:programlisting language="cpp">        Rectangle {
            id: backButton
            width: opacity ? 60 : 0
            anchors.left: parent.left
            anchors.leftMargin: 20
            opacity: stackView.depth &gt; 1 ? 1 : 0
            anchors.verticalCenter: parent.verticalCenter
            antialiasing: true
            height: 60
            radius: 4
            color: backmouse.pressed ? &quot;#222&quot; : &quot;transparent&quot;
            Behavior on opacity { NumberAnimation{} }
            Image {
                anchors.verticalCenter: parent.verticalCenter
                source: &quot;images/navigation_previous_item.png&quot;
            }
            MouseArea {
                id: backmouse
                anchors.fill: parent
                anchors.margins: -10
                onClicked: stackView.pop()
            }
        }

</db:programlisting>
<db:para>We use the <db:code>opacity</db:code> property to hide the back button on the main page.</db:para>
<db:para>We use a <db:link xlink:href="whatsnew50.xml#text">Text</db:link> type to display the application name:</db:para>
<db:programlisting language="cpp">        Text {
            font.pixelSize: 42
            Behavior on x { NumberAnimation{ easing.type: Easing.OutCubic} }
            x: backButton.x + backButton.width + 20
            anchors.verticalCenter: parent.verticalCenter
            color: &quot;white&quot;
            text: &quot;Widget Gallery&quot;
        }
</db:programlisting>
<db:para>The <db:code>x</db:code> position of the <db:link xlink:href="whatsnew50.xml#text">Text</db:link> type is bound to the position and width of the back button, and animated using a <db:link xlink:href="qml-qtquick-behavior.xml">Behavior</db:link>.</db:para>
<db:para>We use a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> type that contains <db:link xlink:href="qml-qtqml-models-listelement.xml">ListElement</db:link> definitions to define titles and source files for the other pages in the application:</db:para>
<db:programlisting language="cpp">    ListModel {
        id: pageModel
        ListElement {
            title: &quot;Buttons&quot;
            page: &quot;content/ButtonPage.qml&quot;
        }
        ListElement {
            title: &quot;Sliders&quot;
            page: &quot;content/SliderPage.qml&quot;
        }
        ListElement {
            title: &quot;ProgressBar&quot;
            page: &quot;content/ProgressBarPage.qml&quot;
        }
        ListElement {
            title: &quot;Tabs&quot;
            page: &quot;content/TabBarPage.qml&quot;
        }
        ListElement {
            title: &quot;TextInput&quot;
            page: &quot;content/TextInputPage.qml&quot;
        }
        ListElement {
            title: &quot;List&quot;
            page: &quot;content/ListPage.qml&quot;
        }
    }

</db:programlisting>
</db:section>
<db:section xml:id="navigating-in-the-application">
<db:title>Navigating in the Application</db:title>
<db:para>We implement a stack-based navigation model to link the application pages together. Items are pushed onto the stack as users navigate deeper into the application, and popped off again when they return to the main page.</db:para>
<db:para>In main.qml, we add a <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> type as a child of the application window:</db:para>
<db:programlisting language="cpp">    StackView {
        id: stackView
        anchors.fill: parent
        // Implements back key navigation
        focus: true
        Keys.onReleased: if (event.key === Qt.Key_Back &amp;&amp; stackView.depth &gt; 1) {
                             stackView.pop();
                             event.accepted = true;
                         }

</db:programlisting>
<db:para>The stack is used by invoking its navigation methods. To load the first item in the stack view, we assign it to <db:code>initialItem</db:code>:</db:para>
<db:programlisting language="cpp">        initialItem: Item {
            width: parent.width
            height: parent.height
            ListView {
                model: pageModel
                anchors.fill: parent
                delegate: AndroidDelegate {
                    text: title
                    onClicked: stackView.push(Qt.resolvedUrl(page))
                }
            }
        }
    }

}

</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> type to display a list of the items provided by <db:code>pageModel</db:code>. The <db:code>AndroidDelegate</db:code> custom type defines each item instantiated by the view.</db:para>
</db:section>
<db:section xml:id="creating-push-buttons-and-switches">
<db:title>Creating Push Buttons and Switches</db:title>
<db:para>In ButtonPage.qml we use the <db:link xlink:href="qml-qtquick-controls-button.xml">Button</db:link> type to create two buttons that change color when users tap them and one that pops off the page and returns the user to the main page:</db:para>
<db:programlisting language="cpp">        Button {
            text: &quot;Press me&quot;
            style: touchStyle
        }

        Button {
            style: touchStyle
            text: &quot;Press me too&quot;
        }

        Button {
            anchors.margins: 20
            style: touchStyle
            text: &quot;Don't press me&quot;
            onClicked: if (stackView) stackView.pop()
        }

</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qtquick-controls-switch.xml">Switch</db:link> type to create two switches that users can turn on and off. They are placed within a <db:link xlink:href="qml-qtquick-row.xml">Row</db:link> type to lay them out horizontally:</db:para>
<db:programlisting language="cpp">        Row {
            spacing: 20
            Switch {
                style: switchStyle
            }
            Switch {
                style: switchStyle
            }
        }

</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-controls-styles-buttonstyle.xml">ButtonStyle</db:link> type creates a custom appearance for the buttons:</db:para>
<db:programlisting language="cpp">    Component {
        id: touchStyle
        ButtonStyle {
            panel: Item {
                implicitHeight: 50
                implicitWidth: 320
                BorderImage {
                    anchors.fill: parent
                    antialiasing: true
                    border.bottom: 8
                    border.top: 8
                    border.left: 8
                    border.right: 8
                    anchors.margins: control.pressed ? -4 : 0
                    source: control.pressed ? &quot;../images/button_pressed.png&quot; : &quot;../images/button_default.png&quot;
                    Text {
                        text: control.text
                        anchors.centerIn: parent
                        color: &quot;white&quot;
                        font.pixelSize: 23
                        renderType: Text.NativeRendering
                    }
</db:programlisting>
<db:para>To use Qt Quick Controls Styles, we must import them:</db:para>
<db:programlisting language="cpp">import QtQuick.Controls.Styles 1.1
</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-controls-styles-switchstyle.xml">SwitchStyle</db:link> type creates a custom appearance for the switches:</db:para>
<db:programlisting language="cpp">    Component {
        id: switchStyle
        SwitchStyle {

            groove: Rectangle {
                implicitHeight: 50
                implicitWidth: 152
                Rectangle {
                    anchors.top: parent.top
                    anchors.left: parent.left
                    anchors.bottom: parent.bottom
                    width: parent.width/2 - 2
                    height: 20
                    anchors.margins: 2
                    color: control.checked ? &quot;#468bb7&quot; : &quot;#222&quot;
                    Behavior on color {ColorAnimation {}}
                    Text {
                        font.pixelSize: 23
                        color: &quot;white&quot;
                        anchors.centerIn: parent
                        text: &quot;ON&quot;
                    }
                }
                Item {
                    width: parent.width/2
                    height: parent.height
                    anchors.right: parent.right
                    Text {
                        font.pixelSize: 23
                        color: &quot;white&quot;
                        anchors.centerIn: parent
                        text: &quot;OFF&quot;
                    }
                }
                color: &quot;#222&quot;
                border.color: &quot;#444&quot;
                border.width: 2
            }
            handle: Rectangle {
                width: parent.parent.width/2
                height: control.height
                color: &quot;#444&quot;
                border.color: &quot;#555&quot;
                border.width: 2
            }
        }
    }
}

</db:programlisting>
<db:para>The <db:code>groove</db:code> property holds the background groove of the switch and the <db:code>handle</db:code> property defines the switch handle.</db:para>
</db:section>
<db:section xml:id="creating-sliders">
<db:title>Creating Sliders</db:title>
<db:para>In SliderPage.qml, we use a <db:link xlink:href="qml-qtquick-controls-slider.xml">Slider</db:link> type to create three horizontal sliders that are placed within a <db:link xlink:href="qml-qtquick-column.xml">Column</db:link> type to lay them out in a column:</db:para>
<db:programlisting language="cpp">    Column {
        spacing: 12
        anchors.centerIn: parent

        Slider {
            anchors.margins: 20
            style: touchStyle
            value: 0
        }
        Slider {
            anchors.margins: 20
            style: touchStyle
            value: 0.5
        }
        Slider {
            anchors.margins: 20
            style: touchStyle
            value: 1.0
        }

    }

</db:programlisting>
<db:para>The <db:code>value</db:code> property holds the initial handle position on the slider.</db:para>
<db:para>A <db:link xlink:href="qml-qtquick-controls-styles-sliderstyle.xml">SliderStyle</db:link> type creates a custom appearance for the sliders:</db:para>
<db:programlisting language="cpp">    Component {
        id: touchStyle
        SliderStyle {
            handle: Rectangle {
                width: 30
                height: 30
                radius: height
                antialiasing: true
                color: Qt.lighter(&quot;#468bb7&quot;, 1.2)
            }

            groove: Item {
                implicitHeight: 50
                implicitWidth: 400
                Rectangle {
                    height: 8
                    width: parent.width
                    anchors.verticalCenter: parent.verticalCenter
                    color: &quot;#444&quot;
                    opacity: 0.8
                    Rectangle {
                        antialiasing: true
                        radius: 1
                        color: &quot;#468bb7&quot;
                        height: parent.height
                        width: parent.width * control.value / control.maximumValue
                    }
                }
            }
        }
    }
}

</db:programlisting>
<db:para>The <db:code>handle</db:code> property defines the slider handle and the <db:code>groove</db:code> property holds the background groove of the slider.</db:para>
</db:section>
<db:section xml:id="indicating-progress">
<db:title>Indicating Progress</db:title>
<db:para>In <db:link xlink:href="qml-qtquick-controls-progressbar.xml">ProgressBar</db:link>.qml, we use a <db:link xlink:href="qml-qtquick-controls-progressbar.xml">ProgressBar</db:link> type to create three progress bars:</db:para>
<db:programlisting language="cpp">    Column {
        spacing: 40
        anchors.centerIn: parent

        ProgressBar {
            anchors.margins: 20
            style: touchStyle
            width: 400
            value: progress
        }

        ProgressBar {
            anchors.margins: 20
            style: touchStyle
            width: 400
            value: 1 - progress
        }

        ProgressBar {
            anchors.margins: 20
            style: touchStyle
            value: 1
            width: 400
        }

</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> type with a <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> type to run two number animations in a sequence. We apply the animations on the <db:code>progress</db:code> custom property to animate the current value on the progress bars:</db:para>
<db:programlisting language="cpp">    property real progress: 0
    SequentialAnimation on progress {
        loops: Animation.Infinite
        running: true
        NumberAnimation {
            from: 0
            to: 1
            duration: 3000
        }
        NumberAnimation {
            from: 1
            to: 0
            duration: 3000
        }
</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-controls-styles-progressbarstyle.xml">ProgressBarStyle</db:link> type creates a custom appearance for the progress bars:</db:para>
<db:programlisting language="cpp">    Component {
        id: touchStyle
        ProgressBarStyle {
            panel: Rectangle {
                implicitHeight: 15
                implicitWidth: 400
                color: &quot;#444&quot;
                opacity: 0.8
                Rectangle {
                    antialiasing: true
                    radius: 1
                    color: &quot;#468bb7&quot;
                    height: parent.height
                    width: parent.width * control.value / control.maximumValue
                }
            }
        }
    }
}

</db:programlisting>
</db:section>
<db:section xml:id="creating-tabs">
<db:title>Creating Tabs</db:title>
<db:para>In TabBarPage.qml, we use a <db:link xlink:href="qml-qtquick-controls-tabview.xml">TabView</db:link> type with a <db:link xlink:href="qml-qtquick-controls-tab.xml">Tab</db:link> type to provide a tab-based navigation model for our application. We use tabs to display the ButtonPage, SliderPage, and ProgressBarPage on separate tab pages:</db:para>
<db:programlisting language="cpp">    TabView {
        anchors.fill: parent
        style: touchStyle
        Tab {
            title: &quot;Buttons&quot;
            ButtonPage{ visible: true }
        }
        Tab {
            title: &quot;Sliders&quot;
            SliderPage{ visible: true }
        }
        Tab {
            title: &quot;Progress&quot;
            ProgressBarPage{ visible: true }
        }
</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-controls-styles-tabviewstyle.xml">TabViewStyle</db:link> type creates a custom appearance for the tabs:</db:para>
<db:programlisting language="cpp">    Component {
        id: touchStyle
        TabViewStyle {
            tabsAlignment: Qt.AlignVCenter
            tabOverlap: 0
            frame: Item { }
            tab: Item {
                implicitWidth: control.width/control.count
                implicitHeight: 50
                BorderImage {
                    anchors.fill: parent
                    border.bottom: 8
                    border.top: 8
                    source: styleData.selected ? &quot;../images/tab_selected.png&quot;:&quot;../images/tabs_standard.png&quot;
                    Text {
                        anchors.centerIn: parent
                        color: &quot;white&quot;
                        text: styleData.title.toUpperCase()
                        font.pixelSize: 16
                    }
                    Rectangle {
                        visible: index &gt; 0
                        anchors.top: parent.top
                        anchors.bottom: parent.bottom
                        anchors.margins: 10
                        width:1
                        color: &quot;#3a3a3a&quot;
                    }
                }
            }
        }
    }
}

</db:programlisting>
</db:section>
<db:section xml:id="creating-text-input-fields">
<db:title>Creating Text Input Fields</db:title>
<db:para>In the TextInputPage.qml, we use a <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> type to create an input field and a read-only text field:</db:para>
<db:programlisting language="cpp">    Column {
        spacing: 40
        anchors.centerIn: parent

        TextField {
            anchors.margins: 20
            text: &quot;Text input&quot;
            style: touchStyle
        }

        TextField {
            anchors.margins: 20
            text: &quot;Readonly Text input&quot;
            style: touchStyle
            readOnly: true
        }
    }
</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-controls-styles-textfieldstyle.xml">TextFieldStyle</db:link> creates a custom appearance for the text fields:</db:para>
<db:programlisting language="cpp">    Component {
        id: touchStyle

        TextFieldStyle {
            textColor: &quot;white&quot;
            font.pixelSize: 28
            background: Item {
                implicitHeight: 50
                implicitWidth: 320
                BorderImage {
                    source: &quot;../images/textinput.png&quot;
                    border.left: 8
                    border.right: 8
                    anchors.bottom: parent.bottom
                    anchors.left: parent.left
                    anchors.right: parent.right
                }
            }
        }
    }
}

</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link> type with an image to create borders for the fields.</db:para>
</db:section>
<db:section xml:id="creating-scrolling-lists">
<db:title>Creating Scrolling Lists</db:title>
<db:para>In ListPage.qml, we use a <db:link xlink:href="qml-qtquick-controls-scrollview.xml">ScrollView</db:link> type to provide a scrolling page with a vertical scoll bar:</db:para>
<db:programlisting language="cpp">ScrollView {
    width: parent.width
    height: parent.height

    flickableItem.interactive: true

</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> type to display a list of 100 items by specifying an <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#integers-as-models">integer</db:link> as the value of the <db:code>model</db:code> property. We reuse the <db:code>AndroidDelegate</db:code> custom type here to define each item instantiated by the view. The <db:code>text</db:code> property adds the string <db:code>Item #</db:code> to each list item:</db:para>
<db:programlisting language="cpp">    ListView {
        anchors.fill: parent
        model: 100
        delegate: AndroidDelegate {
            text: &quot;Item #&quot; + modelData
        }
    }

</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-controls-styles-scrollviewstyle.xml">ScrollViewStyle</db:link> type creates a custom appearance for the scroll view:</db:para>
<db:programlisting language="cpp">    style: ScrollViewStyle {
        transientScrollBars: true
        handle: Item {
            implicitWidth: 14
            implicitHeight: 26
            Rectangle {
                color: &quot;#424246&quot;
                anchors.fill: parent
                anchors.topMargin: 6
                anchors.leftMargin: 4
                anchors.rightMargin: 4
                anchors.bottomMargin: 6
            }
        }
        scrollBarBackground: Item {
            implicitWidth: 14
            implicitHeight: 26
        }
    }
}

</db:programlisting>
<db:para>The <db:code>transientScrollBars</db:code> property is set to <db:code>true</db:code> to make the scroll bars appear when the content is scrolled and disappear when they are no longer needed.</db:para>
<db:para>The <db:code>handle</db:code> property controls the appearance of the scroll bar handle and the <db:code>scrollBarBackground</db:code> property that of the background.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="touch/content/AndroidDelegate.qml">touch/content/AndroidDelegate.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/content/ButtonPage.qml">touch/content/ButtonPage.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/content/ListPage.qml">touch/content/ListPage.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/content/ProgressBarPage.qml">touch/content/ProgressBarPage.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/content/SliderPage.qml">touch/content/SliderPage.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/content/TabBarPage.qml">touch/content/TabBarPage.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/content/TextInputPage.qml">touch/content/TextInputPage.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/main.qml">touch/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/resources.qrc">touch/resources.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/src/main.cpp">touch/src/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/touch.pro">touch/touch.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/touch.qmlproject">touch/touch.qmlproject</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="touch/images/button_default.png">touch/images/button_default.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/images/button_pressed.png">touch/images/button_pressed.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/images/navigation_next_item.png">touch/images/navigation_next_item.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/images/navigation_previous_item.png">touch/images/navigation_previous_item.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/images/tab_selected.png">touch/images/tab_selected.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/images/tabs_standard.png">touch/images/tabs_standard.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/images/textinput.png">touch/images/textinput.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="touch/images/toolbar.png">touch/images/toolbar.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
