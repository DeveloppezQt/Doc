<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsAnchorLayout Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicsanchorlayout.xml">QGraphicsAnchorLayout</db:link> class provides a layout where one can anchor widgets together in Graphics View.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsAnchorLayout</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicslayout.xml" xlink:role="class">QGraphicsLayout</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsAnchorLayout is part of <db:simplelist><db:member>appearance</db:member><db:member>geomanagement</db:member><db:member>graphicsview-api</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The anchor layout allows developers to specify how widgets should be placed relative to each other, and to the layout itself. The specification is made by adding anchors to the layout by calling <db:link xlink:href="qgraphicsanchorlayout.xml#addAnchor">addAnchor</db:link>(), <db:link xlink:href="qgraphicsanchorlayout.xml#addAnchors">addAnchors</db:link>() or <db:link xlink:href="qgraphicsanchorlayout.xml#addCornerAnchors">addCornerAnchors</db:link>().</db:para>
<db:para>Existing anchors in the layout can be accessed with the <db:link xlink:href="qgraphicsanchorlayout.xml#anchor">anchor</db:link>() function. Items that are anchored are automatically added to the layout, and if items are removed, all their anchors will be automatically removed.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/simpleanchorlayout-example.png"/>
</db:imageobject>
</db:inlinemediaobject> Using an anchor layout to align simple colored widgets.</db:para>
<db:para>Anchors are always set up between edges of an item, where the &quot;center&quot; is also considered to be an edge. Consider the following example:</db:para>
<db:programlisting language="cpp">layout-&gt;addAnchor(b, Qt::AnchorLeft, a, Qt::AnchorRight);
layout-&gt;addAnchor(b, Qt::AnchorTop, a, Qt::AnchorBottom);
</db:programlisting>
<db:para>Here, the right edge of item a is anchored to the left edge of item b and the bottom edge of item a is anchored to the top edge of item b, with the result that item b will be placed diagonally to the right and below item b.</db:para>
<db:para>The <db:link xlink:href="qgraphicsanchorlayout.xml#addCornerAnchors">addCornerAnchors</db:link>() function provides a simpler way of anchoring the corners of two widgets than the two individual calls to <db:link xlink:href="qgraphicsanchorlayout.xml#addAnchor">addAnchor</db:link>() shown in the code above. Here, we see how a widget can be anchored to the top-left corner of the enclosing layout:</db:para>
<db:programlisting language="cpp">layout-&gt;addCornerAnchors(a, Qt::TopLeftCorner, layout, Qt::TopLeftCorner);
</db:programlisting>
<db:para>In cases where anchors are used to match the widths or heights of widgets, it is convenient to use the <db:link xlink:href="qgraphicsanchorlayout.xml#addAnchors">addAnchors</db:link>() function. As with the other functions for specifying anchors, it can also be used to anchor a widget to a layout.</db:para>
<db:section xml:id="size-hints-and-size-policies-in-an-anchor-layout">
<db:title>Size Hints and Size Policies in an Anchor Layout</db:title>
<db:para><db:link xlink:href="qgraphicsanchorlayout.xml">QGraphicsAnchorLayout</db:link> respects each item's size hints and size policies. Note that there are some properties of <db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link> that are <db:link xlink:href="qgraphicsanchorlayout.xml#known-issues">not respected</db:link>.</db:para>
</db:section>
<db:section xml:id="spacing-within-an-anchor-layout">
<db:title>Spacing within an Anchor Layout</db:title>
<db:para>The layout may distribute some space between the items. If the spacing has not been explicitly specified, the actual amount of space will usually be 0.</db:para>
<db:para>However, if the first edge is the <db:emphasis>opposite</db:emphasis> of the second edge (e.g., the right edge of the first widget is anchored to the left edge of the second widget), the size of the anchor will be queried from the style through a pixel metric: <db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutHorizontalSpacing</db:link> for horizontal anchors and <db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LayoutVerticalSpacing</db:link> for vertical anchors.</db:para>
<db:para>If the spacing is negative, the items will overlap to some extent.</db:para>
</db:section>
<db:section xml:id="known-issues">
<db:title>Known Issues</db:title>
<db:para>There are some features that <db:link xlink:href="qgraphicsanchorlayout.xml">QGraphicsAnchorLayout</db:link> currently does not support. This might change in the future, so avoid using these features if you want to avoid any future regressions in behaviour:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Stretch factors are not respected.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsizepolicy.xml#PolicyFlag-enum">QSizePolicy::ExpandFlag</db:link> is not respected.</db:para>
</db:listitem>
<db:listitem>
<db:para>Height for width is not respected.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml">QGraphicsLinearLayout</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsgridlayout.xml">QGraphicsGridLayout</db:link></db:member>
<db:member><db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsAnchorLayout">
<db:title>QGraphicsAnchorLayout::QGraphicsAnchorLayout(QGraphicsLayoutItem *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicsanchorlayout.xml">QGraphicsAnchorLayout</db:link> instance. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QGraphicsAnchorLayout">
<db:title>[virtual noexcept] QGraphicsAnchorLayout::~QGraphicsAnchorLayout()</db:title>
<db:para>Destroys the <db:link xlink:href="qgraphicsanchorlayout.xml">QGraphicsAnchorLayout</db:link> object.</db:para>
</db:section>
<db:section xml:id="addAnchor">
<db:title>QGraphicsAnchor *QGraphicsAnchorLayout::addAnchor(QGraphicsLayoutItem *<db:emphasis>firstItem</db:emphasis>, Qt::AnchorPoint <db:emphasis>firstEdge</db:emphasis>, QGraphicsLayoutItem *<db:emphasis>secondItem</db:emphasis>, Qt::AnchorPoint <db:emphasis>secondEdge</db:emphasis>)</db:title>
<db:para>Creates an anchor between the edge <db:code role="parameter">firstEdge</db:code> of item <db:code role="parameter">firstItem</db:code> and the edge <db:code role="parameter">secondEdge</db:code> of item <db:code role="parameter">secondItem</db:code>. The spacing of the anchor is picked up from the style. Anchors between a layout edge and an item edge will have a size of 0. If there is already an anchor between the edges, the new anchor will replace the old one.</db:para>
<db:para><db:code role="parameter">firstItem</db:code> and <db:code role="parameter">secondItem</db:code> are automatically added to the layout if they are not part of the layout. This means that <db:link xlink:href="qgraphicsanchorlayout.xml#count">count</db:link>() can increase by up to 2.</db:para>
<db:para>The spacing an anchor will get depends on the type of anchor. For instance, anchors from the Right edge of one item to the Left edge of another (or vice versa) will use the default horizontal spacing. The same behaviour applies to Bottom to Top anchors, (but they will use the default vertical spacing). For all other anchor combinations, the spacing will be 0. All anchoring functions will follow this rule.</db:para>
<db:para>The spacing can also be set manually by using <db:link xlink:href="qgraphicsanchor.xml#spacing-prop">QGraphicsAnchor::setSpacing</db:link>() method.</db:para>
<db:para>Calling this function where <db:code role="parameter">firstItem</db:code> or <db:code role="parameter">secondItem</db:code> are ancestors of the layout have undefined behaviour.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#addAnchors">addAnchors</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#addCornerAnchors">addCornerAnchors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addAnchors">
<db:title>void QGraphicsAnchorLayout::addAnchors(QGraphicsLayoutItem *<db:emphasis>firstItem</db:emphasis>, QGraphicsLayoutItem *<db:emphasis>secondItem</db:emphasis>, Qt::Orientations <db:emphasis>orientations</db:emphasis> = Qt::Horizontal | Qt::Vertical)</db:title>
<db:para>Anchors two or four edges of <db:code role="parameter">firstItem</db:code> with the corresponding edges of <db:code role="parameter">secondItem</db:code>, so that <db:code role="parameter">firstItem</db:code> has the same size as <db:code role="parameter">secondItem</db:code> in the dimensions specified by <db:code role="parameter">orientations</db:code>.</db:para>
<db:para>For example, the following example anchors the left and right edges of two items to match their widths:</db:para>
<db:programlisting language="cpp">layout-&gt;addAnchor(b, Qt::AnchorLeft, c, Qt::AnchorLeft);
layout-&gt;addAnchor(b, Qt::AnchorRight, c, Qt::AnchorRight);
</db:programlisting>
<db:para>This can also be achieved using the following line of code:</db:para>
<db:programlisting language="cpp">layout-&gt;addAnchors(b, c, Qt::Horizontal);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#addAnchor">addAnchor</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#addCornerAnchors">addCornerAnchors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addCornerAnchors">
<db:title>void QGraphicsAnchorLayout::addCornerAnchors(QGraphicsLayoutItem *<db:emphasis>firstItem</db:emphasis>, Qt::Corner <db:emphasis>firstCorner</db:emphasis>, QGraphicsLayoutItem *<db:emphasis>secondItem</db:emphasis>, Qt::Corner <db:emphasis>secondCorner</db:emphasis>)</db:title>
<db:para>Creates two anchors between <db:code role="parameter">firstItem</db:code> and <db:code role="parameter">secondItem</db:code> specified by the corners, <db:code role="parameter">firstCorner</db:code> and <db:code role="parameter">secondCorner</db:code>, where one is for the horizontal edge and another one for the vertical edge.</db:para>
<db:para>This is a convenience function, since anchoring corners can be expressed as anchoring two edges. For instance:</db:para>
<db:programlisting language="cpp">layout-&gt;addAnchor(a, Qt::AnchorTop, layout, Qt::AnchorTop);
layout-&gt;addAnchor(a, Qt::AnchorLeft, layout, Qt::AnchorLeft);
</db:programlisting>
<db:para>This can also be achieved with the following line of code:</db:para>
<db:programlisting language="cpp">layout-&gt;addCornerAnchors(a, Qt::TopLeftCorner, layout, Qt::TopLeftCorner);
</db:programlisting>
<db:para>If there is already an anchor between the edge pairs, it will be replaced by the anchors that this function specifies.</db:para>
<db:para><db:code role="parameter">firstItem</db:code> and <db:code role="parameter">secondItem</db:code> are automatically added to the layout if they are not part of the layout. This means that <db:link xlink:href="qgraphicsanchorlayout.xml#count">count</db:link>() can increase by up to 2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#addAnchor">addAnchor</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#addAnchors">addAnchors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="anchor">
<db:title>QGraphicsAnchor *QGraphicsAnchorLayout::anchor(QGraphicsLayoutItem *<db:emphasis>firstItem</db:emphasis>, Qt::AnchorPoint <db:emphasis>firstEdge</db:emphasis>, QGraphicsLayoutItem *<db:emphasis>secondItem</db:emphasis>, Qt::AnchorPoint <db:emphasis>secondEdge</db:emphasis>)</db:title>
<db:para>Returns the anchor between the anchor points defined by <db:code role="parameter">firstItem</db:code> and <db:code role="parameter">firstEdge</db:code> and <db:code role="parameter">secondItem</db:code> and <db:code role="parameter">secondEdge</db:code>. If there is no such anchor, the function will return 0.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>[override virtual] int QGraphicsAnchorLayout::count() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayout.xml#count" role="function">QGraphicsLayout::count() const</db:link>.</db:para>
</db:section>
<db:section xml:id="horizontalSpacing">
<db:title>qreal QGraphicsAnchorLayout::horizontalSpacing() const</db:title>
<db:para>Returns the default horizontal spacing for the anchor layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#verticalSpacing">verticalSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#setHorizontalSpacing">setHorizontalSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invalidate">
<db:title>[override virtual] void QGraphicsAnchorLayout::invalidate()</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayout.xml#invalidate" role="function">QGraphicsLayout::invalidate()</db:link>.</db:para>
</db:section>
<db:section xml:id="itemAt">
<db:title>[override virtual] QGraphicsLayoutItem *QGraphicsAnchorLayout::itemAt(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayout.xml#itemAt" role="function">QGraphicsLayout::itemAt(int i) const</db:link>.</db:para>
</db:section>
<db:section xml:id="removeAt">
<db:title>[override virtual] void QGraphicsAnchorLayout::removeAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayout.xml#removeAt" role="function">QGraphicsLayout::removeAt(int index)</db:link>.</db:para>
<db:para>Removes the layout item at <db:code role="parameter">index</db:code> without destroying it. Ownership of the item is transferred to the caller.</db:para>
<db:para>Removing an item will also remove any of the anchors associated with it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry">
<db:title>[override virtual] void QGraphicsAnchorLayout::setGeometry(const QRectF &amp;<db:emphasis>geom</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayoutitem.xml#setGeometry" role="function">QGraphicsLayoutItem::setGeometry(const QRectF &amp;rect)</db:link>.</db:para>
</db:section>
<db:section xml:id="setHorizontalSpacing">
<db:title>void QGraphicsAnchorLayout::setHorizontalSpacing(qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:para>Sets the default horizontal spacing for the anchor layout to <db:code role="parameter">spacing</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#horizontalSpacing">horizontalSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#setVerticalSpacing">setVerticalSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#setSpacing">setSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSpacing">
<db:title>void QGraphicsAnchorLayout::setSpacing(qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:para>Sets the default horizontal and the default vertical spacing for the anchor layout to <db:code role="parameter">spacing</db:code>.</db:para>
<db:para>If an item is anchored with no spacing associated with the anchor, it will use the default spacing.</db:para>
<db:para><db:link xlink:href="qgraphicsanchorlayout.xml">QGraphicsAnchorLayout</db:link> does not support negative spacings. Setting a negative value will unset the previous spacing and make the layout use the spacing provided by the current widget style.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#setHorizontalSpacing">setHorizontalSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#setVerticalSpacing">setVerticalSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalSpacing">
<db:title>void QGraphicsAnchorLayout::setVerticalSpacing(qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:para>Sets the default vertical spacing for the anchor layout to <db:code role="parameter">spacing</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#verticalSpacing">verticalSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#setHorizontalSpacing">setHorizontalSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#setSpacing">setSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual protected] QSizeF QGraphicsAnchorLayout::sizeHint(Qt::SizeHint <db:emphasis>which</db:emphasis>, const QSizeF &amp;<db:emphasis>constraint</db:emphasis> = QSizeF()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayoutitem.xml#sizeHint" role="function">QGraphicsLayoutItem::sizeHint(Qt::SizeHint which, const QSizeF &amp;constraint) const</db:link>.</db:para>
</db:section>
<db:section xml:id="verticalSpacing">
<db:title>qreal QGraphicsAnchorLayout::verticalSpacing() const</db:title>
<db:para>Returns the default vertical spacing for the anchor layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#horizontalSpacing">horizontalSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsanchorlayout.xml#setVerticalSpacing">setVerticalSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
