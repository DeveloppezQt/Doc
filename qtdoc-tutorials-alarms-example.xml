<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Getting Started Programming with Qt Quick</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A tutorial for Qt Quick based on an alarms application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This tutorial shows how to develop a simple alarm application as an introduction to Qt Quick and Qt Quick Controls.</db:para>
<db:para>This application is similar to the alarm application usually found on an Android phone. Its features let you enter, edit, or delete alarms. An alarm can trigger on a given date, and you can set it to repeat on a series of subsequent days.</db:para>
<db:para>The main screen shows the list of saved alarms:</db:para>
<db:mediaobject>
<db:alt>&quot;Alarms application&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/mainscreen.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The detail screen lets you edit or delete existing alarms:</db:para>
<db:mediaobject>
<db:alt>&quot;Detail screen&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/detailscreen.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The dialog screen is used for adding new alarms. It pops up when you click on the &quot;+&quot; <db:link xlink:href="qml-qtquick-controls-roundbutton.xml">RoundButton</db:link> on the bottom of the main screen:</db:para>
<db:mediaobject>
<db:alt>&quot;Add alarms&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/addalarms.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The source files are located in the qtdoc repository. You can either fetch the Qt sources from the Qt Project, or install them as part of Qt. The application is also available in the example list of Qt Creator's Welcome mode.</db:para>
<db:section xml:id="creating-the-alarms-project">
<db:title>Creating the Alarms Project</db:title>
<db:para>This section shows how to create the project in Qt Creator. It discusses the files generated automatically by Qt Creator, and the two files the programmer has to create in Qt Creator or some other editor. The latter two files are included with the source code for this tutorial.</db:para>
<db:note>
<db:para>The UI text in Qt Creator and the contents of the generated files depend on the Qt Creator version that you use.</db:para>
</db:note>
</db:section>
<db:section xml:id="qt-creator">
<db:title>Qt Creator</db:title>
<db:para>Setting up a new project in Qt Creator is aided by a wizard that guides you step-by-step through the project creation process. The wizard prompts you to enter the settings needed for that particular type of project and creates the project for you.</db:para>
<db:para>To create the Alarms project, select <db:guilabel>File</db:guilabel> &gt; <db:guilabel>New Project</db:guilabel> &gt; <db:guilabel>Application (Qt)</db:guilabel> &gt; <db:guilabel>Qt Quick Application</db:guilabel> &gt; <db:guilabel>Choose</db:guilabel>. Type <db:emphasis>alarms</db:emphasis> in the <db:guilabel>Name</db:guilabel> field, and follow the instructions of the wizard.</db:para>
<db:mediaobject>
<db:alt>&quot;Qt Creator New Project dialog&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/alarms2.png"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:alt>&quot;Project Location&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/alarms3.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The Qt Quick application wizard creates a project that contains the following source files:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Source file</db:para>
</db:th>
<db:th>
<db:para>Purpose</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>CMakeLists.txt</db:para>
</db:td>
<db:td>
<db:para>The project file</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>main.cpp</db:para>
</db:td>
<db:td>
<db:para>The main C++ code file for the application.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>main.qml</db:para>
</db:td>
<db:td>
<db:para>The main QML code file for the application. We will instantiate our custom QML types (AlarmDialog, AlarmModel, AlarmDelegate, and TumblerDelegate) in this file.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The wizard generates the code in the main.cpp file below. This code block enables High DPI scaling and declares app and engine. The engine then loads our main QML file.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    QQmlApplicationEngine engine;
    const QUrl url(u&quot;qrc:/alarms/main.qml&quot;_s);
    QObject::connect(&amp;amp;engine, &amp;amp;QQmlApplicationEngine::objectCreated, &amp;amp;app,
                     [url](QObject *obj, const QUrl &amp;amp;objUrl) {
                         if (!obj &amp;amp;&amp;amp; url == objUrl)
                             QCoreApplication::exit(-1);
                     },
</db:programlisting>
</db:section>
<db:section xml:id="additional-source-files">
<db:title>Additional source files</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Source file</db:para>
</db:th>
<db:th>
<db:para>Purpose</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>qtquickcontrols2.conf</db:para>
</db:td>
<db:td>
<db:para>Selects the Material style with the Dark theme.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AlarmDialog.qml</db:para>
</db:td>
<db:td>
<db:para>Defines the dialog for adding new alarms.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AlarmDelegate.qml</db:para>
</db:td>
<db:td>
<db:para>Defines the layout of the main screen of the app.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AlarmModel.qml</db:para>
</db:td>
<db:td>
<db:para>Defines the <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> used for storing the alarms' data.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TumblerDelegate.qml</db:para>
</db:td>
<db:td>
<db:para>Defines the graphical layout of the Tumblers.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qml.qrc</db:para>
</db:td>
<db:td>
<db:para>The resource file, which contains the names of the source files, except main.cpp and the project file.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="qtquickcontrols2-op-op-conf">
<db:title>qtquickcontrols2.conf</db:title>
<db:para>The following snippet shows how to set the Dark theme in the Material style:</db:para>
<db:programlisting language="cpp">[Controls]
Style=Material
[Material]
Theme=Dark
Accent=Red
</db:programlisting>
</db:section>
<db:section xml:id="main-op-op-qml">
<db:title>main.qml</db:title>
<db:para>mainWindow, an <db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link> QML type, is the root item in this app.</db:para>
<db:programlisting language="cpp">ApplicationWindow {
    id: window
    width: 400
    height: 500
    visible: true
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> alarmListView combines the data from alarmModel with the layout defined in alarmDelegate.</db:para>
<db:programlisting language="cpp">    ListView {
        id: alarmListView
        anchors.fill: parent
        model: AlarmModel {}
        delegate: AlarmDelegate {}
    }
</db:programlisting>
<db:para>New alarms can be added by clicking <db:link xlink:href="qml-qtquick-controls-roundbutton.xml">RoundButton</db:link> addAlarmButton. Clicking it opens a <db:link xlink:href="qml-qt-labs-platform-dialog.xml">Dialog</db:link> screen alarmDialog.</db:para>
<db:programlisting language="cpp">    RoundButton {
        id: addAlarmButton
        text: &quot;+&quot;
        anchors.bottom: alarmListView.bottom
        anchors.bottomMargin: 8
        anchors.horizontalCenter: parent.horizontalCenter
        onClicked: alarmDialog.open()
    }

    AlarmDialog {
        id: alarmDialog
        x: Math.round((parent.width - width) / 2)
        y: Math.round((parent.height - height) / 2)
        alarmModel: alarmListView.model
    }
</db:programlisting>
</db:section>
<db:section xml:id="alarmdialog-op-op-qml">
<db:title>AlarmDialog.qml</db:title>
<db:para>This dialog screen has a <db:link xlink:href="qml-qtquick-layouts-rowlayout.xml">RowLayout</db:link> with a <db:link xlink:href="qml-qtquick-controls-tumbler.xml">Tumbler</db:link> each for hours and minutes, and another <db:link xlink:href="qml-qtquick-layouts-rowlayout.xml">RowLayout</db:link> with a Tumbler each for day, month, and year.</db:para>
<db:programlisting language="cpp">    contentItem: RowLayout {
        RowLayout {
            id: rowTumbler

            Tumbler {
                id: hoursTumbler
                model: 24
                delegate: TumblerDelegate {
                    text: formatNumber(modelData)
                }
            }
            Tumbler {
                id: minutesTumbler
                model: 60
                delegate: TumblerDelegate {
                    text: formatNumber(modelData)
                }
            }
        }

        RowLayout {
            id: datePicker

            Layout.leftMargin: 20

            property alias dayTumbler: dayTumbler
            property alias monthTumbler: monthTumbler
            property alias yearTumbler: yearTumbler

            readonly property var days: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

            Tumbler {
                id: dayTumbler

                function updateModel() {
                    // Populate the model with days of the month. For example: [0, ..., 30]
                    var previousIndex = dayTumbler.currentIndex
                    var array = []
                    var newDays = datePicker.days[monthTumbler.currentIndex]
                    for (var i = 1; i &amp;lt;= newDays; ++i)
                        array.push(i)
                    dayTumbler.model = array
                    dayTumbler.currentIndex = Math.min(newDays - 1, previousIndex)
                }

                Component.onCompleted: updateModel()

                delegate: TumblerDelegate {
                    text: formatNumber(modelData)
                }
            }
            Tumbler {
                id: monthTumbler

                onCurrentIndexChanged: dayTumbler.updateModel()

                model: 12
                delegate: TumblerDelegate {
                    text: window.locale.standaloneMonthName(modelData, Locale.ShortFormat)
                }
            }
            Tumbler {
                id: yearTumbler

                // This array is populated with the next three years. For example: [2018, 2019, 2020]
                readonly property var years: (function() {
                    var currentYear = new Date().getFullYear()
                    return [0, 1, 2].map(function(value) { return value + currentYear; })
                })()

                model: years
                delegate: TumblerDelegate {
                    text: formatNumber(modelData)
                }
            }
        }
    }
}
</db:programlisting>
<db:para>If you click on <db:emphasis role="bold">OK</db:emphasis> in the dialog, the entered data will be added to alarmModel:</db:para>
<db:programlisting language="cpp">    onAccepted: {
        alarmModel.append({
            &quot;hour&quot;: hoursTumbler.currentIndex,
            &quot;minute&quot;: minutesTumbler.currentIndex,
            &quot;day&quot;: dayTumbler.currentIndex + 1,
            &quot;month&quot;: monthTumbler.currentIndex + 1,
            &quot;year&quot;: yearTumbler.years[yearTumbler.currentIndex],
            &quot;activated&quot;: true,
            &quot;label&quot;: &quot;&quot;,
            &quot;repeat&quot;: false,
            &quot;daysToRepeat&quot;: [
                { &quot;dayOfWeek&quot;: 0, &quot;repeat&quot;: false },
                { &quot;dayOfWeek&quot;: 1, &quot;repeat&quot;: false },
                { &quot;dayOfWeek&quot;: 2, &quot;repeat&quot;: false },
                { &quot;dayOfWeek&quot;: 3, &quot;repeat&quot;: false },
                { &quot;dayOfWeek&quot;: 4, &quot;repeat&quot;: false },
                { &quot;dayOfWeek&quot;: 5, &quot;repeat&quot;: false },
                { &quot;dayOfWeek&quot;: 6, &quot;repeat&quot;: false }
            ],
        })
    }
    onRejected: alarmDialog.close()
</db:programlisting>
</db:section>
<db:section xml:id="alarmdelegate-op-op-qml">
<db:title>AlarmDelegate.qml</db:title>
<db:para>Each alarm in the main screen is an <db:link xlink:href="qml-qtquick-controls-itemdelegate.xml">ItemDelegate</db:link>. The <db:link xlink:href="qml-qtquick-controls-itemdelegate.xml">ItemDelegate</db:link> root contains all fields on the main screen and the detail screen. The detail screen's fields are only visible after an alarm has been clicked on, i.e. when root.checked is true.</db:para>
<db:programlisting language="cpp">ItemDelegate {
    id: root
    width: parent.width
    checkable: true

    onClicked: ListView.view.currentIndex = index

    contentItem: ColumnLayout {
        spacing: 0

        RowLayout {
            ColumnLayout {
                id: dateColumn

                readonly property date alarmDate: new Date(
                    model.year, model.month - 1, model.day, model.hour, model.minute)

                Label {
                    id: timeLabel
                    font.pixelSize: Qt.application.font.pixelSize * 2
                    text: dateColumn.alarmDate.toLocaleTimeString(window.locale, Locale.ShortFormat)
                }
                RowLayout {
                    Label {
                        id: dateLabel
                        text: dateColumn.alarmDate.toLocaleDateString(window.locale, Locale.ShortFormat)
                    }
                    Label {
                        id: alarmAbout
                        text: &quot;⸱ &quot; + model.label
                        visible: model.label.length &amp;gt; 0 &amp;amp;&amp;amp; !root.checked
                    }
                }
            }
            Item {
                Layout.fillWidth: true
            }
            Switch {
                checked: model.activated
                Layout.alignment: Qt.AlignTop
                onClicked: model.activated = checked
            }
        }
        CheckBox {
            id: alarmRepeat
            text: qsTr(&quot;Repeat&quot;)
            checked: model.repeat
            visible: root.checked
            onToggled: model.repeat = checked
        }
        Flow {
            visible: root.checked &amp;amp;&amp;amp; model.repeat
            Layout.fillWidth: true

            Repeater {
                id: dayRepeater
                model: daysToRepeat
                delegate: RoundButton {
                    text: Qt.locale().dayName(model.dayOfWeek, Locale.NarrowFormat)
                    flat: true
                    checked: model.repeat
                    checkable: true
                    Material.background: checked ? Material.accent : &quot;transparent&quot;
                    onToggled: model.repeat = checked
                }
            }
        }

        TextField {
            id: alarmDescriptionTextField
            placeholderText: qsTr(&quot;Enter description here&quot;)
            cursorVisible: true
            visible: root.checked
            text: model.label
            onTextEdited: model.label = text
        }
        Button {
            id: deleteAlarmButton
            text: qsTr(&quot;Delete&quot;)
            width: 40
            height: 40
            visible: root.checked
            onClicked: root.ListView.view.model.remove(root.ListView.view.currentIndex, 1)
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="alarmmodel-op-op-qml">
<db:title>AlarmModel.qml</db:title>
<db:para>This QML file contains the definition of alarmModel, the <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> that manages the alarm data.</db:para>
<db:para>It creates five <db:link xlink:href="qml-qtqml-models-listelement.xml">ListElements</db:link> with example alarms.</db:para>
<db:programlisting language="cpp">import QtQuick

// Populate the model with some sample data.
ListModel {
    id: alarmModel

    ListElement {
        hour: 6
        minute: 0
        day: 2
        month: 8
        year: 2018
        activated: true
        label: &quot;Wake up&quot;
        repeat: true
        daysToRepeat: [
            ListElement { dayOfWeek: 0; repeat: false },
            ListElement { dayOfWeek: 1; repeat: false },
            ListElement { dayOfWeek: 2; repeat: false },
            ListElement { dayOfWeek: 3; repeat: false },
            ListElement { dayOfWeek: 4; repeat: false },
            ListElement { dayOfWeek: 5; repeat: false },
            ListElement { dayOfWeek: 6; repeat: false }
        ]
    }
    ListElement {
        hour: 6
        minute: 0
        day: 3
        month: 8
        year: 2018
        activated: true
        label: &quot;Wake up&quot;
        repeat: true
        daysToRepeat: [
            ListElement { dayOfWeek: 0; repeat: true },
            ListElement { dayOfWeek: 1; repeat: true },
            ListElement { dayOfWeek: 2; repeat: true },
            ListElement { dayOfWeek: 3; repeat: true },
            ListElement { dayOfWeek: 4; repeat: true },
            ListElement { dayOfWeek: 5; repeat: false },
            ListElement { dayOfWeek: 6; repeat: false }
        ]
    }
    ListElement {
        hour: 7
        minute: 0
        day: 3
        month: 8
        year: 2018
        activated: false
        label: &quot;Exercise&quot;
        repeat: true
        daysToRepeat: [
            ListElement { dayOfWeek: 0; repeat: true },
            ListElement { dayOfWeek: 1; repeat: true },
            ListElement { dayOfWeek: 2; repeat: true },
            ListElement { dayOfWeek: 3; repeat: true },
            ListElement { dayOfWeek: 4; repeat: true },
            ListElement { dayOfWeek: 5; repeat: true },
            ListElement { dayOfWeek: 6; repeat: true }
        ]
    }
    ListElement {
        hour: 5
        minute: 15
        day: 1
        month: 9
        year: 2018
        activated: true
        label: &quot;&quot;
        repeat: false
        daysToRepeat: [
            ListElement { dayOfWeek: 0; repeat: false },
            ListElement { dayOfWeek: 1; repeat: false },
            ListElement { dayOfWeek: 2; repeat: false },
            ListElement { dayOfWeek: 3; repeat: false },
            ListElement { dayOfWeek: 4; repeat: false },
            ListElement { dayOfWeek: 5; repeat: false },
            ListElement { dayOfWeek: 6; repeat: false }
        ]
    }
    ListElement {
        hour: 5
        minute: 45
        day: 3
        month: 9
        year: 2018
        activated: false
        label: &quot;&quot;
        repeat: false
        daysToRepeat: [
            ListElement { dayOfWeek: 0; repeat: false },
            ListElement { dayOfWeek: 1; repeat: false },
            ListElement { dayOfWeek: 2; repeat: false },
            ListElement { dayOfWeek: 3; repeat: false },
            ListElement { dayOfWeek: 4; repeat: false },
            ListElement { dayOfWeek: 5; repeat: false },
            ListElement { dayOfWeek: 6; repeat: false }
        ]
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="tumblerdelegate-qml">
<db:title>TumblerDelegate.qml</db:title>
<db:para>TumblerDelegate defines the graphical properties of the Tumblers.</db:para>
<db:programlisting language="cpp">import QtQuick
import QtQuick.Controls
import QtQuick.Controls.Material

Text {
    text: modelData
    color: Tumbler.tumbler.Material.foreground
    font: Tumbler.tumbler.font
    opacity: 1.0 - Math.abs(Tumbler.displacement) / (Tumbler.tumbler.visibleItemCount / 2)
    horizontalAlignment: Text.AlignHCenter
    verticalAlignment: Text.AlignVCenter
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="entering-new-alarms">
<db:title>Entering new alarms</db:title>
<db:para>At the bottom of the startup screen, you can see a Button for adding alarms. Click it to open the <db:emphasis role="bold">Add new alarm</db:emphasis> dialog.</db:para>
<db:programlisting language="cpp">    RoundButton {
        id: addAlarmButton
        text: &quot;+&quot;
        anchors.bottom: alarmListView.bottom
        anchors.bottomMargin: 8
        anchors.horizontalCenter: parent.horizontalCenter
        onClicked: alarmDialog.open()
    }
</db:programlisting>
<db:para>The dialog for new alarms:</db:para>
<db:mediaobject>
<db:alt>&quot;Add alarms&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/addalarms.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>All fields are entered using <db:link xlink:href="qml-qtquick-controls-tumbler.xml">Tumbler</db:link> QML types. If you press OK, the values selected in the Tumblers are written to alarmModel.</db:para>
<db:programlisting language="cpp">    contentItem: RowLayout {
        RowLayout {
            id: rowTumbler

            Tumbler {
                id: hoursTumbler
                model: 24
                delegate: TumblerDelegate {
                    text: formatNumber(modelData)
                }
            }
            Tumbler {
                id: minutesTumbler
                model: 60
                delegate: TumblerDelegate {
                    text: formatNumber(modelData)
                }
            }
        }

        RowLayout {
            id: datePicker

            Layout.leftMargin: 20

            property alias dayTumbler: dayTumbler
            property alias monthTumbler: monthTumbler
            property alias yearTumbler: yearTumbler

            readonly property var days: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

            Tumbler {
                id: dayTumbler

                function updateModel() {
                    // Populate the model with days of the month. For example: [0, ..., 30]
                    var previousIndex = dayTumbler.currentIndex
                    var array = []
                    var newDays = datePicker.days[monthTumbler.currentIndex]
                    for (var i = 1; i &amp;lt;= newDays; ++i)
                        array.push(i)
                    dayTumbler.model = array
                    dayTumbler.currentIndex = Math.min(newDays - 1, previousIndex)
                }

                Component.onCompleted: updateModel()

                delegate: TumblerDelegate {
                    text: formatNumber(modelData)
                }
            }
            Tumbler {
                id: monthTumbler

                onCurrentIndexChanged: dayTumbler.updateModel()

                model: 12
                delegate: TumblerDelegate {
                    text: window.locale.standaloneMonthName(modelData, Locale.ShortFormat)
                }
            }
            Tumbler {
                id: yearTumbler

                // This array is populated with the next three years. For example: [2018, 2019, 2020]
                readonly property var years: (function() {
                    var currentYear = new Date().getFullYear()
                    return [0, 1, 2].map(function(value) { return value + currentYear; })
                })()

                model: years
                delegate: TumblerDelegate {
                    text: formatNumber(modelData)
                }
            }
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="editing-alarms">
<db:title>Editing alarms</db:title>
<db:para>If you click on a particular alarm, you can edit it in the detail screen.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/detailscreen.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Clicking on an alarm sets root.checked to true, which makes visible the fields of the detail screen.</db:para>
<db:programlisting language="cpp">visible: root.checked
</db:programlisting>
<db:para>If you want the alarm to trigger also on other days, check alarmRepeat. The Repeater will display a checkable <db:link xlink:href="qml-qtquick-controls-roundbutton.xml">RoundButton</db:link> for each day of the week.</db:para>
<db:programlisting language="cpp">        Flow {
            visible: root.checked &amp;amp;&amp;amp; model.repeat
            Layout.fillWidth: true

            Repeater {
                id: dayRepeater
                model: daysToRepeat
                delegate: RoundButton {
                    text: Qt.locale().dayName(model.dayOfWeek, Locale.NarrowFormat)
                    flat: true
                    checked: model.repeat
                    checkable: true
                    Material.background: checked ? Material.accent : &quot;transparent&quot;
                    onToggled: model.repeat = checked
                }
            }
        }
</db:programlisting>
<db:para>If you modify the description of the alarm, it will be reflected in the main screen afterwards.</db:para>
<db:programlisting language="cpp">        TextField {
            id: alarmDescriptionTextField
            placeholderText: qsTr(&quot;Enter description here&quot;)
            cursorVisible: true
            visible: root.checked
            text: model.label
            onTextEdited: model.label = text
        }
</db:programlisting>
</db:section>
<db:section xml:id="deleting-alarms">
<db:title>Deleting alarms</db:title>
<db:para>The detail screen (see above) has a Button for deleting alarms. When onClicked is emitted, the current <db:link xlink:href="qml-qtqml-models-listelement.xml">ListElement</db:link> is deleted from alarmModel.</db:para>
<db:programlisting language="cpp">        Button {
            id: deleteAlarmButton
            text: qsTr(&quot;Delete&quot;)
            width: 40
            height: 40
            visible: root.checked
            onClicked: root.ListView.view.model.remove(root.ListView.view.currentIndex, 1)
        }
</db:programlisting>
<db:section xml:id="summary">
<db:title>Summary</db:title>
<db:para>The app has no code for adding sound or vibration to the alarm, nor does it store the alarms in any format or database. Maybe it could be an interesting coding project to add those features. Storing the data could be done quickly and easily in <db:link xlink:href="json.xml">JSON format</db:link>.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdoc.git/tree/examples/tutorials/alarms?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="json.xml">JSON Support in Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
