<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScroller Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscroller.xml">QScroller</db:link> class enables kinetic scrolling for any scrolling widget or graphics item.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScroller</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>With kinetic scrolling, the user can push the widget in a given direction and it will continue to scroll in this direction until it is stopped either by the user or by friction. Aspects of inertia, friction and other physical concepts can be changed in order to fine-tune an intuitive user experience.</db:para>
<db:para>The <db:link xlink:href="qscroller.xml">QScroller</db:link> object is the object that stores the current position and scrolling speed and takes care of updates. <db:link xlink:href="qscroller.xml">QScroller</db:link> can be triggered by a flick gesture</db:para>
<db:programlisting language="cpp">    QWidget *w = ...;
    QScroller::grabGesture(w, QScroller::LeftMouseButtonGesture);
</db:programlisting>
<db:para>or directly like this:</db:para>
<db:programlisting language="cpp">    QWidget *w = ...;
    QScroller *scroller = QScroller::scroller(w);
    scroller-&amp;gt;scrollTo(QPointF(100, 100));
</db:programlisting>
<db:para>The scrolled QObjects receive a <db:link xlink:href="qscrollprepareevent.xml">QScrollPrepareEvent</db:link> whenever the scroller needs to update its geometry information and a <db:link xlink:href="qscrollevent.xml">QScrollEvent</db:link> whenever the content of the object should actually be scrolled.</db:para>
<db:para>The scroller uses the global <db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link> timer to generate its QScrollEvents. This can be changed with <db:link xlink:href="qscrollerproperties.xml#ScrollMetric-enum">QScrollerProperties::FrameRate</db:link> on a per-<db:link xlink:href="qscroller.xml">QScroller</db:link> basis.</db:para>
<db:para>Several examples in the scroller examples directory show how <db:link xlink:href="qscroller.xml">QScroller</db:link>, <db:link xlink:href="qscrollevent.xml">QScrollEvent</db:link> and the scroller gesture can be used.</db:para>
<db:para>Even though this kinetic scroller has a large number of settings available via <db:link xlink:href="qscrollerproperties.xml">QScrollerProperties</db:link>, we recommend that you leave them all at their default, platform optimized values. Before changing them you can experiment with the plot example in the scroller examples directory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscrollevent.xml">QScrollEvent</db:link></db:member>
<db:member><db:link xlink:href="qscrollprepareevent.xml">QScrollPrepareEvent</db:link></db:member>
<db:member><db:link xlink:href="qscrollerproperties.xml">QScrollerProperties</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Input-enum">
<db:title>enum QScroller::Input</db:title>
<db:enumsynopsis>
<db:enumname>Input</db:enumname>
<db:enumitem>
<db:enumidentifier>InputPress</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InputMove</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InputRelease</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum contains an input device agnostic view of input events that are relevant for <db:link xlink:href="qscroller.xml">QScroller</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscroller.xml">QScroller</db:link></db:emphasis>::InputPress</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The user pressed the input device (e.g. <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonPress</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::GraphicsSceneMousePress</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchBegin</db:link>)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscroller.xml">QScroller</db:link></db:emphasis>::InputMove</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The user moved the input device (e.g. <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseMove</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::GraphicsSceneMouseMove</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchUpdate</db:link>)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscroller.xml">QScroller</db:link></db:emphasis>::InputRelease</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The user released the input device (e.g. <db:link xlink:href="qevent.xml#Type-enum">QEvent::MouseButtonRelease</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::GraphicsSceneMouseRelease</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchEnd</db:link>)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ScrollerGestureType-enum">
<db:title>enum QScroller::ScrollerGestureType</db:title>
<db:enumsynopsis>
<db:enumname>ScrollerGestureType</db:enumname>
<db:enumitem>
<db:enumidentifier>TouchGesture</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LeftMouseButtonGesture</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RightMouseButtonGesture</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MiddleMouseButtonGesture</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum contains the different gesture types that are supported by the <db:link xlink:href="qscroller.xml">QScroller</db:link> gesture recognizer.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscroller.xml">QScroller</db:link></db:emphasis>::TouchGesture</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The gesture recognizer will only trigger on touch events. Specifically it will react on single touch points when using a touch screen and dual touch points when using a touchpad.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscroller.xml">QScroller</db:link></db:emphasis>::LeftMouseButtonGesture</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The gesture recognizer will only trigger on left mouse button events.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscroller.xml">QScroller</db:link></db:emphasis>::MiddleMouseButtonGesture</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The gesture recognizer will only trigger on middle mouse button events.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscroller.xml">QScroller</db:link></db:emphasis>::RightMouseButtonGesture</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The gesture recognizer will only trigger on right mouse button events.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="State-enum">
<db:title>enum QScroller::State</db:title>
<db:enumsynopsis>
<db:enumname>State</db:enumname>
<db:enumitem>
<db:enumidentifier>Inactive</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Pressed</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Dragging</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Scrolling</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum contains the different <db:link xlink:href="qscroller.xml">QScroller</db:link> states.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscroller.xml">QScroller</db:link></db:emphasis>::Inactive</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The scroller is not scrolling and nothing is pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscroller.xml">QScroller</db:link></db:emphasis>::Pressed</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A touch event was received or the mouse button was pressed but the scroll area is currently not dragged.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscroller.xml">QScroller</db:link></db:emphasis>::Dragging</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The scroll area is currently following the touch point or mouse.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscroller.xml">QScroller</db:link></db:emphasis>::Scrolling</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The scroll area is moving on it's own.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="scrollerProperties-prop">
<db:title>scrollerProperties : QScrollerProperties</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QScrollerProperties</db:type>
<db:varname>scrollerProperties</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">scrollerProperties</db:synopsisinfo>
<db:synopsisinfo role="setter">setScrollerProperties</db:synopsisinfo>
<db:synopsisinfo role="notifier">scrollerPropertiesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the scroller properties of this scroller. The properties are used by the <db:link xlink:href="qscroller.xml">QScroller</db:link> to determine its scrolling behavior.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qscrollerproperties.xml">QScrollerProperties</db:link></db:type> <db:emphasis role="bold">scrollerProperties</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setScrollerProperties</db:emphasis>(const <db:type><db:link xlink:href="qscrollerproperties.xml">QScrollerProperties</db:link></db:type> &amp;<db:emphasis>prop</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscroller.xml#scrollerPropertiesChanged">scrollerPropertiesChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qscrollerproperties.xml">QScrollerProperties</db:link></db:type> &amp;<db:emphasis>newProperties</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="state-prop">
<db:title>[read-only] state : const State</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>State</db:type>
<db:varname>state</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">state</db:synopsisinfo>
<db:synopsisinfo role="notifier">stateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the state of the scroller</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qscroller.xml#State-enum">QScroller::State</db:link></db:type> <db:emphasis role="bold">state</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscroller.xml#stateChanged">stateChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qscroller.xml#State-enum">QScroller::State</db:link></db:type> <db:emphasis>newState</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml#State-enum">QScroller::State</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="activeScrollers">
<db:title>[static] QList&lt;QScroller *&gt; QScroller::activeScrollers()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QScroller *&gt;</db:type>
<db:methodname>activeScrollers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QScroller *&gt; activeScrollers()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an application wide list of currently active <db:link xlink:href="qscroller.xml">QScroller</db:link> objects. Active <db:link xlink:href="qscroller.xml">QScroller</db:link> objects are in a <db:link xlink:href="qscroller.xml#state-prop">state</db:link>() that is not <db:link xlink:href="qscroller.xml#State-enum">QScroller::Inactive</db:link>. This function is useful when writing your own gesture recognizer.</db:para>
</db:section>
<db:section xml:id="ensureVisible">
<db:title>void QScroller::ensureVisible(const QRectF &amp;<db:emphasis>rect</db:emphasis>, qreal <db:emphasis>xmargin</db:emphasis>, qreal <db:emphasis>ymargin</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ensureVisible</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>xmargin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>ymargin</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void ensureVisible(const QRectF &amp;rect, qreal xmargin, qreal ymargin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts scrolling so that the rectangle <db:code role="parameter">rect</db:code> is visible inside the viewport with additional margins specified in pixels by <db:code role="parameter">xmargin</db:code> and <db:code role="parameter">ymargin</db:code> around the rect.</db:para>
<db:para>In cases where it is not possible to fit the rect plus margins inside the viewport the contents are scrolled so that as much as possible is visible from <db:code role="parameter">rect</db:code>.</db:para>
<db:para>The scrolling speed is calculated so that the given position is reached after a platform-defined time span.</db:para>
<db:para>This function performs the actual scrolling by calling <db:link xlink:href="qscroller.xml#scrollTo">scrollTo</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml#scrollTo">scrollTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ensureVisible-1">
<db:title>void QScroller::ensureVisible(const QRectF &amp;<db:emphasis>rect</db:emphasis>, qreal <db:emphasis>xmargin</db:emphasis>, qreal <db:emphasis>ymargin</db:emphasis>, int <db:emphasis>scrollTime</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ensureVisible</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>xmargin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>ymargin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>scrollTime</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void ensureVisible(const QRectF &amp;rect, qreal xmargin, qreal ymargin, int scrollTime)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This version will reach its destination position in <db:code role="parameter">scrollTime</db:code> milliseconds.</db:para>
</db:section>
<db:section xml:id="finalPosition">
<db:title>QPointF QScroller::finalPosition() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>finalPosition</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF finalPosition() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the estimated final position for the current scroll movement. Returns the current position if the scroller state is not Scrolling. The result is undefined when the scroller state is Inactive.</db:para>
<db:para>The target position is in pixel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml#pixelPerMeter">pixelPerMeter</db:link>()</db:member>
<db:member><db:link xlink:href="qscroller.xml#scrollTo">scrollTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabGesture">
<db:title>[static] Qt::GestureType QScroller::grabGesture(QObject *<db:emphasis>target</db:emphasis>, QScroller::ScrollerGestureType <db:emphasis>scrollGestureType</db:emphasis> = TouchGesture)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>Qt::GestureType</db:type>
<db:methodname>grabGesture</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QScroller::ScrollerGestureType</db:type>
<db:parameter>scrollGestureType</db:parameter>
<db:initializer>TouchGesture</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::GestureType grabGesture(QObject *target, QScroller::ScrollerGestureType scrollGestureType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers a custom scroll gesture recognizer, grabs it for the <db:code role="parameter">target</db:code> and returns the resulting gesture type. If <db:code role="parameter">scrollGestureType</db:code> is set to <db:link xlink:href="qscroller.xml#ScrollerGestureType-enum">TouchGesture</db:link> the gesture triggers on touch events. If it is set to one of <db:link xlink:href="qscroller.xml#ScrollerGestureType-enum">LeftMouseButtonGesture</db:link>, <db:link xlink:href="qscroller.xml#ScrollerGestureType-enum">RightMouseButtonGesture</db:link> or <db:link xlink:href="qscroller.xml#ScrollerGestureType-enum">MiddleMouseButtonGesture</db:link> it triggers on mouse events of the corresponding button.</db:para>
<db:para>Only one scroll gesture can be active on a single object at the same time. If you call this function twice on the same object, it will ungrab the existing gesture before grabbing the new one.</db:para>
<db:note>
<db:para>To avoid unwanted side-effects, mouse events are consumed while the gesture is triggered. Since the initial mouse press event is not consumed, the gesture sends a fake mouse release event at the global position (INT_MIN, INT_MIN). This ensures that internal states of the widget that received the original mouse press are consistent.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml#ungrabGesture">ungrabGesture</db:link>()</db:member>
<db:member><db:link xlink:href="qscroller.xml#grabbedGesture">grabbedGesture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabbedGesture">
<db:title>[static] Qt::GestureType QScroller::grabbedGesture(QObject *<db:emphasis>target</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>Qt::GestureType</db:type>
<db:methodname>grabbedGesture</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::GestureType grabbedGesture(QObject *target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the gesture type currently grabbed for the <db:code role="parameter">target</db:code> or 0 if no gesture is grabbed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml#grabGesture">grabGesture</db:link>()</db:member>
<db:member><db:link xlink:href="qscroller.xml#ungrabGesture">ungrabGesture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="handleInput">
<db:title>bool QScroller::handleInput(QScroller::Input <db:emphasis>input</db:emphasis>, const QPointF &amp;<db:emphasis>position</db:emphasis>, qint64 <db:emphasis>timestamp</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>handleInput</db:methodname>
<db:methodparam>
<db:type>QScroller::Input</db:type>
<db:parameter>input</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>timestamp</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool handleInput(QScroller::Input input, const QPointF &amp;position, qint64 timestamp)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is used by gesture recognizers to inform the scroller about a new input event. The scroller changes its internal <db:link xlink:href="qscroller.xml#state-prop">state</db:link>() according to the input event and its attached scroller properties. The scroller doesn't distinguish between the kind of input device the event came from. Therefore the event needs to be split into the <db:code role="parameter">input</db:code> type, a <db:code role="parameter">position</db:code> and a milli-second <db:code role="parameter">timestamp</db:code>. The <db:code role="parameter">position</db:code> needs to be in the target's coordinate system.</db:para>
<db:para>The return value is true if the event should be consumed by the calling filter or false if the event should be forwarded to the control.</db:para>
<db:note>
<db:para>Using <db:link xlink:href="qscroller.xml#grabGesture">grabGesture</db:link>() should be sufficient for most use cases.</db:para>
</db:note>
</db:section>
<db:section xml:id="hasScroller">
<db:title>[static] bool QScroller::hasScroller(QObject *<db:emphasis>target</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasScroller</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasScroller(QObject *target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if a <db:link xlink:href="qscroller.xml">QScroller</db:link> object was already created for <db:code role="parameter">target</db:code>; false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml#scroller">scroller</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixelPerMeter">
<db:title>QPointF QScroller::pixelPerMeter() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>pixelPerMeter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF pixelPerMeter() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pixel per meter metric for the scrolled widget.</db:para>
<db:para>The value is reported for both the x and y axis separately by using a <db:link xlink:href="qpointf.xml">QPointF</db:link>.</db:para>
<db:note>
<db:para>Please note that this value should be physically correct. The actual DPI settings that Qt returns for the display may be reported wrongly on purpose by the underlying windowing system, for example on macOS.</db:para>
</db:note>
</db:section>
<db:section xml:id="resendPrepareEvent">
<db:title>void QScroller::resendPrepareEvent()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resendPrepareEvent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resendPrepareEvent()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function resends the <db:link xlink:href="qscrollprepareevent.xml">QScrollPrepareEvent</db:link>. Calling resendPrepareEvent triggers a <db:link xlink:href="qscrollprepareevent.xml">QScrollPrepareEvent</db:link> from the scroller. This allows the receiver to re-set content position and content size while scrolling. Calling this function while in the Inactive state is useless as the prepare event is sent again before scrolling starts.</db:para>
</db:section>
<db:section xml:id="scrollTo">
<db:title>void QScroller::scrollTo(const QPointF &amp;<db:emphasis>pos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scrollTo</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scrollTo(const QPointF &amp;pos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts scrolling the widget so that point <db:code role="parameter">pos</db:code> is at the top-left position in the viewport.</db:para>
<db:para>The behaviour when scrolling outside the valid scroll area is undefined. In this case the scroller might or might not overshoot.</db:para>
<db:para>The scrolling speed will be calculated so that the given position will be reached after a platform-defined time span.</db:para>
<db:para><db:code role="parameter">pos</db:code> is given in viewport coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml#ensureVisible">ensureVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scrollTo-1">
<db:title>void QScroller::scrollTo(const QPointF &amp;<db:emphasis>pos</db:emphasis>, int <db:emphasis>scrollTime</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scrollTo</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>scrollTime</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void scrollTo(const QPointF &amp;pos, int scrollTime)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This version will reach its destination position in <db:code role="parameter">scrollTime</db:code> milliseconds.</db:para>
</db:section>
<db:section xml:id="scroller">
<db:title>[static] QScroller *QScroller::scroller(QObject *<db:emphasis>target</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QScroller *</db:type>
<db:methodname>scroller</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QScroller * scroller(QObject *target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scroller for the given <db:code role="parameter">target</db:code>. As long as the object exists this function will always return the same <db:link xlink:href="qscroller.xml">QScroller</db:link> instance. If no <db:link xlink:href="qscroller.xml">QScroller</db:link> exists for the <db:code role="parameter">target</db:code>, one will implicitly be created. At no point more than one <db:link xlink:href="qscroller.xml">QScroller</db:link> will be active on an object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml#hasScroller">hasScroller</db:link>()</db:member>
<db:member><db:link xlink:href="qscroller.xml#target">target</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scroller-1">
<db:title>[static] const QScroller *QScroller::scroller(const QObject *<db:emphasis>target</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QScroller *</db:type>
<db:methodname>scroller</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QScroller * scroller(const QObject *target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This is the const version of <db:link xlink:href="qscroller.xml#scroller">scroller</db:link>().</db:para>
</db:section>
<db:section xml:id="scrollerPropertiesChanged">
<db:title>void QScroller::scrollerPropertiesChanged(const QScrollerProperties &amp;<db:emphasis>newProperties</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scrollerPropertiesChanged</db:methodname>
<db:methodparam>
<db:type>const QScrollerProperties &amp;</db:type>
<db:parameter>newProperties</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">scrollerProperties</db:synopsisinfo>
<db:synopsisinfo role="signature">void scrollerPropertiesChanged(const QScrollerProperties &amp;newProperties)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:link xlink:href="qscroller.xml">QScroller</db:link> emits this signal whenever its scroller properties change. <db:code role="parameter">newProperties</db:code> are the new scroller properties.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qscroller.xml#scrollerProperties-prop">scrollerProperties</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml#scrollerProperties-prop">scrollerProperties</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSnapPositionsX">
<db:title>void QScroller::setSnapPositionsX(const QList&lt;qreal&gt; &amp;<db:emphasis>positions</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSnapPositionsX</db:methodname>
<db:methodparam>
<db:type>const QList&lt;qreal&gt; &amp;</db:type>
<db:parameter>positions</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSnapPositionsX(const QList&lt;qreal&gt; &amp;positions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the snap positions for the horizontal axis to a list of <db:code role="parameter">positions</db:code>. This overwrites all previously set snap positions and also a previously set snapping interval. Snapping can be deactivated by setting an empty list of positions.</db:para>
</db:section>
<db:section xml:id="setSnapPositionsX-1">
<db:title>void QScroller::setSnapPositionsX(qreal <db:emphasis>first</db:emphasis>, qreal <db:emphasis>interval</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSnapPositionsX</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>interval</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSnapPositionsX(qreal first, qreal interval)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the snap positions for the horizontal axis to regular spaced intervals. The first snap position is at <db:code role="parameter">first</db:code>. The next at <db:code role="parameter">first</db:code> + <db:code role="parameter">interval</db:code>. This can be used to implement a list header. This overwrites all previously set snap positions and also a previously set snapping interval. Snapping can be deactivated by setting an interval of 0.0</db:para>
</db:section>
<db:section xml:id="setSnapPositionsY">
<db:title>void QScroller::setSnapPositionsY(const QList&lt;qreal&gt; &amp;<db:emphasis>positions</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSnapPositionsY</db:methodname>
<db:methodparam>
<db:type>const QList&lt;qreal&gt; &amp;</db:type>
<db:parameter>positions</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSnapPositionsY(const QList&lt;qreal&gt; &amp;positions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the snap positions for the vertical axis to a list of <db:code role="parameter">positions</db:code>. This overwrites all previously set snap positions and also a previously set snapping interval. Snapping can be deactivated by setting an empty list of positions.</db:para>
</db:section>
<db:section xml:id="setSnapPositionsY-1">
<db:title>void QScroller::setSnapPositionsY(qreal <db:emphasis>first</db:emphasis>, qreal <db:emphasis>interval</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSnapPositionsY</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>interval</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSnapPositionsY(qreal first, qreal interval)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the snap positions for the vertical axis to regular spaced intervals. The first snap position is at <db:code role="parameter">first</db:code>. The next at <db:code role="parameter">first</db:code> + <db:code role="parameter">interval</db:code>. This overwrites all previously set snap positions and also a previously set snapping interval. Snapping can be deactivated by setting an interval of 0.0</db:para>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QScroller::stateChanged(QScroller::State <db:emphasis>newState</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>QScroller::State</db:type>
<db:parameter>newState</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">state</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(QScroller::State newState)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:link xlink:href="qscroller.xml">QScroller</db:link> emits this signal whenever the state changes. <db:code role="parameter">newState</db:code> is the new State.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qscroller.xml#state-prop">state</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml#state-prop">state</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop">
<db:title>void QScroller::stop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops the scroller and resets its state back to Inactive.</db:para>
</db:section>
<db:section xml:id="target">
<db:title>QObject *QScroller::target() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>target</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * target() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the target object of this scroller.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml#hasScroller">hasScroller</db:link>()</db:member>
<db:member><db:link xlink:href="qscroller.xml#scroller">scroller</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ungrabGesture">
<db:title>[static] void QScroller::ungrabGesture(QObject *<db:emphasis>target</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>ungrabGesture</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void ungrabGesture(QObject *target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Ungrabs the gesture for the <db:code role="parameter">target</db:code>. Does nothing if no gesture is grabbed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml#grabGesture">grabGesture</db:link>()</db:member>
<db:member><db:link xlink:href="qscroller.xml#grabbedGesture">grabbedGesture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="velocity">
<db:title>QPointF QScroller::velocity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>velocity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF velocity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current scrolling velocity in meter per second when the state is Scrolling or Dragging. Returns a zero velocity otherwise.</db:para>
<db:para>The velocity is reported for both the x and y axis separately by using a <db:link xlink:href="qpointf.xml">QPointF</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscroller.xml#pixelPerMeter">pixelPerMeter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
