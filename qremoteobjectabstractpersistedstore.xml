<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRemoteObjectAbstractPersistedStore Class</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A class which provides the methods for setting PROP values of a replica to value they had the last time the replica was used.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRemoteObjectAbstractPersistedStore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS RemoteObjects)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::RemoteObjects)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += remoteobjects</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This can be used to provide a &quot;reasonable&quot; value to be displayed until the connection to the source is established and current values are available.</db:para>
<db:para>This class must be overridden to provide an implementation for saving (<db:link xlink:href="qremoteobjectabstractpersistedstore.xml#saveProperties">QRemoteObjectAbstractPersistedStore::saveProperties</db:link>) and restoring (<db:link xlink:href="qremoteobjectabstractpersistedstore.xml#restoreProperties">QRemoteObjectAbstractPersistedStore::restoreProperties</db:link>) PROP values. The derived type can then be set for a node, and any replica acquired from that node will then automatically store PERSISTED properties when the replica destructor is called, and retrieve the values when the replica is instantiated.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRemoteObjectAbstractPersistedStore">
<db:title>QRemoteObjectAbstractPersistedStore::QRemoteObjectAbstractPersistedStore(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QRemoteObjectAbstractPersistedStore</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QRemoteObjectAbstractPersistedStore(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qremoteobjectabstractpersistedstore.xml">QRemoteObjectAbstractPersistedStore</db:link> with the given <db:code role="parameter">parent</db:code>. The default value of <db:code role="parameter">parent</db:code> is <db:code>nullptr</db:code>.</db:para>
</db:section>
<db:section xml:id="restoreProperties">
<db:title>[pure virtual] QVariantList QRemoteObjectAbstractPersistedStore::restoreProperties(const QString &amp;<db:emphasis>repName</db:emphasis>, const QByteArray &amp;<db:emphasis>repSig</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QVariantList</db:type>
<db:methodname>restoreProperties</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>repName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>repSig</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariantList restoreProperties(const QString &amp;repName, const QByteArray &amp;repSig) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method will be provided the replica class's <db:code role="parameter">repName</db:code> and <db:code role="parameter">repSig</db:code> when the replica is being initialized. It is the responsibility of the inheriting class to get the last values persisted by <db:link xlink:href="qremoteobjectabstractpersistedstore.xml#saveProperties">QRemoteObjectAbstractPersistedStore::saveProperties</db:link> and return them. An empty <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> should be returned if no values are available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjectabstractpersistedstore.xml#saveProperties">QRemoteObjectAbstractPersistedStore::saveProperties</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="saveProperties">
<db:title>[pure virtual] void QRemoteObjectAbstractPersistedStore::saveProperties(const QString &amp;<db:emphasis>repName</db:emphasis>, const QByteArray &amp;<db:emphasis>repSig</db:emphasis>, const QVariantList &amp;<db:emphasis>values</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>saveProperties</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>repName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>repSig</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantList &amp;</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void saveProperties(const QString &amp;repName, const QByteArray &amp;repSig, const QVariantList &amp;values) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method will be provided the replica class's <db:code role="parameter">repName</db:code>, <db:code role="parameter">repSig</db:code> and the list of <db:code role="parameter">values</db:code> that PERSISTED properties have when the replica destructor was called. It is the responsibility of the inheriting class to store the information in a manner consistent for <db:link xlink:href="qremoteobjectabstractpersistedstore.xml#restoreProperties">QRemoteObjectAbstractPersistedStore::restoreProperties</db:link> to retrieve.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qremoteobjectabstractpersistedstore.xml#restoreProperties">QRemoteObjectAbstractPersistedStore::restoreProperties</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
