<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLTexture Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link> class encapsulates an OpenGL texture object.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLTexture</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link> makes it easy to work with OpenGL textures and the myriad features and targets that they offer depending upon the capabilities of your OpenGL implementation.</db:para>
<db:para>The typical usage pattern for <db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link> is</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Instantiate the object specifying the texture target type</db:para>
</db:listitem>
<db:listitem>
<db:para>Set properties that affect the storage requirements e.g. storage format, dimensions</db:para>
</db:listitem>
<db:listitem>
<db:para>Allocate the server-side storage</db:para>
</db:listitem>
<db:listitem>
<db:para>Optionally upload pixel data</db:para>
</db:listitem>
<db:listitem>
<db:para>Optionally set any additional properties e.g. filtering and border options</db:para>
</db:listitem>
<db:listitem>
<db:para>Render with texture or render to texture</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In the common case of simply using a <db:link xlink:href="qimage.xml">QImage</db:link> as the source of texture pixel data most of the above steps are performed automatically.</db:para>
<db:programlisting language="cpp">// Prepare texture
QOpenGLTexture *texture = new QOpenGLTexture(QImage(fileName).mirrored());
texture-&amp;gt;setMinificationFilter(QOpenGLTexture::LinearMipMapLinear);
texture-&amp;gt;setMagnificationFilter(QOpenGLTexture::Linear);
...
// Render with texture
texture-&amp;gt;bind();
glDrawArrays(...);
</db:programlisting>
<db:para>Note that the <db:link xlink:href="qimage.xml">QImage</db:link> is mirrored vertically to account for the fact that OpenGL and <db:link xlink:href="qimage.xml">QImage</db:link> use opposite directions for the y axis. Another option would be to transform your texture coordinates.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="BindingTarget-enum">
<db:title>enum QOpenGLTexture::BindingTarget</db:title>
<db:enumsynopsis>
<db:enumname>BindingTarget</db:enumname>
<db:enumitem>
<db:enumidentifier>BindingTarget1D</db:enumidentifier>
<db:enumvalue>0x8068</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BindingTarget1DArray</db:enumidentifier>
<db:enumvalue>0x8C1C</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BindingTarget2D</db:enumidentifier>
<db:enumvalue>0x8069</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BindingTarget2DArray</db:enumidentifier>
<db:enumvalue>0x8C1D</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BindingTarget3D</db:enumidentifier>
<db:enumvalue>0x806A</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BindingTargetCubeMap</db:enumidentifier>
<db:enumvalue>0x8514</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BindingTargetCubeMapArray</db:enumidentifier>
<db:enumvalue>0x900A</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BindingTarget2DMultisample</db:enumidentifier>
<db:enumvalue>0x9104</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BindingTarget2DMultisampleArray</db:enumidentifier>
<db:enumvalue>0x9105</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BindingTargetRectangle</db:enumidentifier>
<db:enumvalue>0x84F6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BindingTargetBuffer</db:enumidentifier>
<db:enumvalue>0x8C2C</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the possible binding targets of texture units.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BindingTarget1D</db:code></db:para>
</db:td>
<db:td><db:code>0x8068</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_BINDING_1D</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BindingTarget1DArray</db:code></db:para>
</db:td>
<db:td><db:code>0x8C1C</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_BINDING_1D_ARRAY</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BindingTarget2D</db:code></db:para>
</db:td>
<db:td><db:code>0x8069</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_BINDING_2D</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BindingTarget2DArray</db:code></db:para>
</db:td>
<db:td><db:code>0x8C1D</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_BINDING_2D_ARRAY</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BindingTarget3D</db:code></db:para>
</db:td>
<db:td><db:code>0x806A</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_BINDING_3D</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BindingTargetCubeMap</db:code></db:para>
</db:td>
<db:td><db:code>0x8514</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_BINDING_CUBE_MAP</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BindingTargetCubeMapArray</db:code></db:para>
</db:td>
<db:td><db:code>0x900A</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_BINDING_CUBE_MAP_ARRAY</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BindingTarget2DMultisample</db:code></db:para>
</db:td>
<db:td><db:code>0x9104</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_BINDING_2D_MULTISAMPLE</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BindingTarget2DMultisampleArray</db:code></db:para>
</db:td>
<db:td><db:code>0x9105</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BindingTargetRectangle</db:code></db:para>
</db:td>
<db:td><db:code>0x84F6</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_BINDING_RECTANGLE</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BindingTargetBuffer</db:code></db:para>
</db:td>
<db:td><db:code>0x8C2C</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_BINDING_BUFFER</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ComparisonFunction-enum">
<db:title>[since 5.5] enum QOpenGLTexture::ComparisonFunction</db:title>
<db:enumsynopsis>
<db:enumname>ComparisonFunction</db:enumname>
<db:enumitem>
<db:enumidentifier>CompareLessEqual</db:enumidentifier>
<db:enumvalue>0x0203</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompareGreaterEqual</db:enumidentifier>
<db:enumvalue>0x0206</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompareLess</db:enumidentifier>
<db:enumvalue>0x0201</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompareGreater</db:enumidentifier>
<db:enumvalue>0x0204</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompareEqual</db:enumidentifier>
<db:enumvalue>0x0202</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CommpareNotEqual</db:enumidentifier>
<db:enumvalue>0x0205</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompareAlways</db:enumidentifier>
<db:enumvalue>0x0207</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompareNever</db:enumidentifier>
<db:enumvalue>0x0200</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies which comparison operator is used when texture comparison is enabled on this texture.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CompareLessEqual</db:code></db:para>
</db:td>
<db:td><db:code>0x0203</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_LEQUAL.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CompareGreaterEqual</db:code></db:para>
</db:td>
<db:td><db:code>0x0206</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_GEQUAL.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CompareLess</db:code></db:para>
</db:td>
<db:td><db:code>0x0201</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_LESS.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CompareGreater</db:code></db:para>
</db:td>
<db:td><db:code>0x0204</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_GREATER.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CompareEqual</db:code></db:para>
</db:td>
<db:td><db:code>0x0202</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_EQUAL.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CommpareNotEqual</db:code></db:para>
</db:td>
<db:td><db:code>0x0205</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_NOTEQUAL.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CompareAlways</db:code></db:para>
</db:td>
<db:td><db:code>0x0207</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_ALWAYS.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CompareNever</db:code></db:para>
</db:td>
<db:td><db:code>0x0200</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_NEVER.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="ComparisonMode-enum">
<db:title>[since 5.5] enum QOpenGLTexture::ComparisonMode</db:title>
<db:enumsynopsis>
<db:enumname>ComparisonMode</db:enumname>
<db:enumitem>
<db:enumidentifier>CompareRefToTexture</db:enumidentifier>
<db:enumvalue>0x884E</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CompareNone</db:enumidentifier>
<db:enumvalue>0x0000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies which comparison mode is used when sampling this texture.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CompareRefToTexture</db:code></db:para>
</db:td>
<db:td><db:code>0x884E</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPARE_REF_TO_TEXTURE.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CompareNone</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_NONE.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="CoordinateDirection-enum">
<db:title>enum QOpenGLTexture::CoordinateDirection</db:title>
<db:enumsynopsis>
<db:enumname>CoordinateDirection</db:enumname>
<db:enumitem>
<db:enumidentifier>DirectionS</db:enumidentifier>
<db:enumvalue>0x2802</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirectionT</db:enumidentifier>
<db:enumvalue>0x2803</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirectionR</db:enumidentifier>
<db:enumvalue>0x8072</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the possible texture coordinate directions</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::DirectionS</db:code></db:para>
</db:td>
<db:td><db:code>0x2802</db:code></db:td>
<db:td>
<db:para>The horizontal direction. Equivalent to GL_TEXTURE_WRAP_S</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::DirectionT</db:code></db:para>
</db:td>
<db:td><db:code>0x2803</db:code></db:td>
<db:td>
<db:para>The vertical direction. Equivalent to GL_TEXTURE_WRAP_T</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::DirectionR</db:code></db:para>
</db:td>
<db:td><db:code>0x8072</db:code></db:td>
<db:td>
<db:para>The depth direction. Equivalent to GL_TEXTURE_WRAP_R</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="CubeMapFace-enum">
<db:title>enum QOpenGLTexture::CubeMapFace</db:title>
<db:enumsynopsis>
<db:enumname>CubeMapFace</db:enumname>
<db:enumitem>
<db:enumidentifier>CubeMapPositiveX</db:enumidentifier>
<db:enumvalue>0x8515</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CubeMapNegativeX</db:enumidentifier>
<db:enumvalue>0x8516</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CubeMapPositiveY</db:enumidentifier>
<db:enumvalue>0x8517</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CubeMapNegativeY</db:enumidentifier>
<db:enumvalue>0x8518</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CubeMapPositiveZ</db:enumidentifier>
<db:enumvalue>0x8519</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CubeMapNegativeZ</db:enumidentifier>
<db:enumvalue>0x851A</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the possible CubeMap faces.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CubeMapPositiveX</db:code></db:para>
</db:td>
<db:td><db:code>0x8515</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_CUBE_MAP_POSITIVE_X</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CubeMapNegativeX</db:code></db:para>
</db:td>
<db:td><db:code>0x8516</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_CUBE_MAP_NEGATIVE_X</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CubeMapPositiveY</db:code></db:para>
</db:td>
<db:td><db:code>0x8517</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_CUBE_MAP_POSITIVE_Y</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CubeMapNegativeY</db:code></db:para>
</db:td>
<db:td><db:code>0x8518</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CubeMapPositiveZ</db:code></db:para>
</db:td>
<db:td><db:code>0x8519</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_CUBE_MAP_POSITIVE_Z</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::CubeMapNegativeZ</db:code></db:para>
</db:td>
<db:td><db:code>0x851A</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="DepthStencilMode-enum">
<db:title>[since 5.4] enum QOpenGLTexture::DepthStencilMode</db:title>
<db:enumsynopsis>
<db:enumname>DepthStencilMode</db:enumname>
<db:enumitem>
<db:enumidentifier>DepthMode</db:enumidentifier>
<db:enumvalue>0x1902</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StencilMode</db:enumidentifier>
<db:enumvalue>0x1901</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies which component of a depth/stencil texture is accessed when the texture is sampled.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::DepthMode</db:code></db:para>
</db:td>
<db:td><db:code>0x1902</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_DEPTH_COMPONENT.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::StencilMode</db:code></db:para>
</db:td>
<db:td><db:code>0x1901</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_STENCIL_INDEX.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="Feature-enum">
<db:title>enum QOpenGLTexture::Feature</db:title>
<db:bridgehead renderas="sect2">flags QOpenGLTexture::Features</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Feature</db:enumname>
<db:enumitem>
<db:enumidentifier>ImmutableStorage</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ImmutableMultisampleStorage</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextureRectangle</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextureArrays</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Texture3D</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextureMultisample</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextureBuffer</db:enumidentifier>
<db:enumvalue>0x00000040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextureCubeMapArrays</db:enumidentifier>
<db:enumvalue>0x00000080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Swizzle</db:enumidentifier>
<db:enumvalue>0x00000100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StencilTexturing</db:enumidentifier>
<db:enumvalue>0x00000200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnisotropicFiltering</db:enumidentifier>
<db:enumvalue>0x00000400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NPOTTextures</db:enumidentifier>
<db:enumvalue>0x00000800</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NPOTTextureRepeat</db:enumidentifier>
<db:enumvalue>0x00001000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Texture1D</db:enumidentifier>
<db:enumvalue>0x00002000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextureComparisonOperators</db:enumidentifier>
<db:enumvalue>0x00004000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TextureMipMapLevel</db:enumidentifier>
<db:enumvalue>0x00008000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QOpenGLTexture::Features</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum defines the OpenGL texture-related features that can be tested for.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::ImmutableStorage</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Support for immutable texture storage</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::ImmutableMultisampleStorage</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Support for immutable texture storage with multisample targets</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::TextureRectangle</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Support for the GL_TEXTURE_RECTANGLE target</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::TextureArrays</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>Support for texture targets with array layers</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Texture3D</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>Support for the 3 dimensional texture target</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::TextureMultisample</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>Support for texture targets that have multisample capabilities</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::TextureBuffer</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>Support for textures that use OpenGL buffer objects as their data source</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::TextureCubeMapArrays</db:code></db:para>
</db:td>
<db:td><db:code>0x00000080</db:code></db:td>
<db:td>
<db:para>Support for cubemap array texture target</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Swizzle</db:code></db:para>
</db:td>
<db:td><db:code>0x00000100</db:code></db:td>
<db:td>
<db:para>Support for texture component swizzle masks</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::StencilTexturing</db:code></db:para>
</db:td>
<db:td><db:code>0x00000200</db:code></db:td>
<db:td>
<db:para>Support for stencil texturing (i.e. looking up depth or stencil components of a combined depth/stencil format texture in GLSL shaders).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::AnisotropicFiltering</db:code></db:para>
</db:td>
<db:td><db:code>0x00000400</db:code></db:td>
<db:td>
<db:para>Support for anisotropic texture filtering</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::NPOTTextures</db:code></db:para>
</db:td>
<db:td><db:code>0x00000800</db:code></db:td>
<db:td>
<db:para>Basic support for non-power-of-two textures</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::NPOTTextureRepeat</db:code></db:para>
</db:td>
<db:td><db:code>0x00001000</db:code></db:td>
<db:td>
<db:para>Full support for non-power-of-two textures including texture repeat modes</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Texture1D</db:code></db:para>
</db:td>
<db:td><db:code>0x00002000</db:code></db:td>
<db:td>
<db:para>Support for the 1 dimensional texture target</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::TextureComparisonOperators</db:code></db:para>
</db:td>
<db:td><db:code>0x00004000</db:code></db:td>
<db:td>
<db:para>Support for texture comparison operators</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::TextureMipMapLevel</db:code></db:para>
</db:td>
<db:td><db:code>0x00008000</db:code></db:td>
<db:td>
<db:para>Support for setting the base and maximum mipmap levels</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Features</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Feature&gt;. </db:code>It stores an OR combination of <db:code>Feature</db:code> values.</db:para>
</db:section>
<db:section xml:id="Filter-enum">
<db:title>enum QOpenGLTexture::Filter</db:title>
<db:enumsynopsis>
<db:enumname>Filter</db:enumname>
<db:enumitem>
<db:enumidentifier>Nearest</db:enumidentifier>
<db:enumvalue>0x2600</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Linear</db:enumidentifier>
<db:enumvalue>0x2601</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NearestMipMapNearest</db:enumidentifier>
<db:enumvalue>0x2700</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NearestMipMapLinear</db:enumidentifier>
<db:enumvalue>0x2702</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LinearMipMapNearest</db:enumidentifier>
<db:enumvalue>0x2701</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LinearMipMapLinear</db:enumidentifier>
<db:enumvalue>0x2703</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the filtering parameters for a <db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link> object.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Nearest</db:code></db:para>
</db:td>
<db:td><db:code>0x2600</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_NEAREST</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Linear</db:code></db:para>
</db:td>
<db:td><db:code>0x2601</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_LINEAR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::NearestMipMapNearest</db:code></db:para>
</db:td>
<db:td><db:code>0x2700</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_NEAREST_MIPMAP_NEAREST</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::NearestMipMapLinear</db:code></db:para>
</db:td>
<db:td><db:code>0x2702</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_NEAREST_MIPMAP_LINEAR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::LinearMipMapNearest</db:code></db:para>
</db:td>
<db:td><db:code>0x2701</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_LINEAR_MIPMAP_NEAREST</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::LinearMipMapLinear</db:code></db:para>
</db:td>
<db:td><db:code>0x2703</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_LINEAR_MIPMAP_LINEAR</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="MipMapGeneration-enum">
<db:title>enum QOpenGLTexture::MipMapGeneration</db:title>
<db:enumsynopsis>
<db:enumname>MipMapGeneration</db:enumname>
<db:enumitem>
<db:enumidentifier>GenerateMipMaps</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DontGenerateMipMaps</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the options to control mipmap generation.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::GenerateMipMaps</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Mipmaps should be generated</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::DontGenerateMipMaps</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Mipmaps should not be generated</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PixelFormat-enum">
<db:title>enum QOpenGLTexture::PixelFormat</db:title>
<db:enumsynopsis>
<db:enumname>PixelFormat</db:enumname>
<db:enumitem>
<db:enumidentifier>NoSourceFormat</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Red</db:enumidentifier>
<db:enumvalue>0x1903</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG</db:enumidentifier>
<db:enumvalue>0x8227</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB</db:enumidentifier>
<db:enumvalue>0x1907</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BGR</db:enumidentifier>
<db:enumvalue>0x80E0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA</db:enumidentifier>
<db:enumvalue>0x1908</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BGRA</db:enumidentifier>
<db:enumvalue>0x80E1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Red_Integer</db:enumidentifier>
<db:enumvalue>0x8D94</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG_Integer</db:enumidentifier>
<db:enumvalue>0x8228</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB_Integer</db:enumidentifier>
<db:enumvalue>0x8D98</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BGR_Integer</db:enumidentifier>
<db:enumvalue>0x8D9A</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_Integer</db:enumidentifier>
<db:enumvalue>0x8D99</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BGRA_Integer</db:enumidentifier>
<db:enumvalue>0x8D9B</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Stencil</db:enumidentifier>
<db:enumvalue>0x1901</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Depth</db:enumidentifier>
<db:enumvalue>0x1902</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DepthStencil</db:enumidentifier>
<db:enumvalue>0x84F9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Alpha</db:enumidentifier>
<db:enumvalue>0x1906</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Luminance</db:enumidentifier>
<db:enumvalue>0x1909</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LuminanceAlpha</db:enumidentifier>
<db:enumvalue>0x190A</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the possible client-side pixel formats for a pixel transfer operation.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::NoSourceFormat</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_NONE</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Red</db:code></db:para>
</db:td>
<db:td><db:code>0x1903</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RED</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG</db:code></db:para>
</db:td>
<db:td><db:code>0x8227</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB</db:code></db:para>
</db:td>
<db:td><db:code>0x1907</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BGR</db:code></db:para>
</db:td>
<db:td><db:code>0x80E0</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_BGR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA</db:code></db:para>
</db:td>
<db:td><db:code>0x1908</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BGRA</db:code></db:para>
</db:td>
<db:td><db:code>0x80E1</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_BGRA</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Red_Integer</db:code></db:para>
</db:td>
<db:td><db:code>0x8D94</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RED_INTEGER</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG_Integer</db:code></db:para>
</db:td>
<db:td><db:code>0x8228</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG_INTEGER</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB_Integer</db:code></db:para>
</db:td>
<db:td><db:code>0x8D98</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB_INTEGER</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BGR_Integer</db:code></db:para>
</db:td>
<db:td><db:code>0x8D9A</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_BGR_INTEGER</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_Integer</db:code></db:para>
</db:td>
<db:td><db:code>0x8D99</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA_INTEGER</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BGRA_Integer</db:code></db:para>
</db:td>
<db:td><db:code>0x8D9B</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_BGRA_INTEGER</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Stencil</db:code></db:para>
</db:td>
<db:td><db:code>0x1901</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_STENCIL_INDEX. Introduced in Qt 5.4</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Depth</db:code></db:para>
</db:td>
<db:td><db:code>0x1902</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_DEPTH_COMPONENT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::DepthStencil</db:code></db:para>
</db:td>
<db:td><db:code>0x84F9</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_DEPTH_STENCIL</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Alpha</db:code></db:para>
</db:td>
<db:td><db:code>0x1906</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_ALPHA (OpenGL ES 2 only)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Luminance</db:code></db:para>
</db:td>
<db:td><db:code>0x1909</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_LUMINANCE (OpenGL ES 2 only)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::LuminanceAlpha</db:code></db:para>
</db:td>
<db:td><db:code>0x190A</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_LUMINANCE_ALPHA (OpenGL ES 2 only)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PixelType-enum">
<db:title>enum QOpenGLTexture::PixelType</db:title>
<db:enumsynopsis>
<db:enumname>PixelType</db:enumname>
<db:enumitem>
<db:enumidentifier>NoPixelType</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Int8</db:enumidentifier>
<db:enumvalue>0x1400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt8</db:enumidentifier>
<db:enumvalue>0x1401</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Int16</db:enumidentifier>
<db:enumvalue>0x1402</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt16</db:enumidentifier>
<db:enumvalue>0x1403</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Int32</db:enumidentifier>
<db:enumvalue>0x1404</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt32</db:enumidentifier>
<db:enumvalue>0x1405</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Float16</db:enumidentifier>
<db:enumvalue>0x140B</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Float16OES</db:enumidentifier>
<db:enumvalue>0x8D61</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Float32</db:enumidentifier>
<db:enumvalue>0x1406</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt32_RGB9_E5</db:enumidentifier>
<db:enumvalue>0x8C3E</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt32_RG11B10F</db:enumidentifier>
<db:enumvalue>0x8C3B</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt8_RG3B2</db:enumidentifier>
<db:enumvalue>0x8032</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt8_RG3B2_Rev</db:enumidentifier>
<db:enumvalue>0x8362</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt16_RGB5A1</db:enumidentifier>
<db:enumvalue>0x8034</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt16_RGB5A1_Rev</db:enumidentifier>
<db:enumvalue>0x8366</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt16_R5G6B5</db:enumidentifier>
<db:enumvalue>0x8363</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt16_R5G6B5_Rev</db:enumidentifier>
<db:enumvalue>0x8364</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt16_RGBA4</db:enumidentifier>
<db:enumvalue>0x8033</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt16_RGBA4_Rev</db:enumidentifier>
<db:enumvalue>0x8365</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt32_RGBA8</db:enumidentifier>
<db:enumvalue>0x8035</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt32_RGBA8_Rev</db:enumidentifier>
<db:enumvalue>0x8367</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt32_RGB10A2</db:enumidentifier>
<db:enumvalue>0x8036</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt32_RGB10A2_Rev</db:enumidentifier>
<db:enumvalue>0x8368</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt32_D24S8</db:enumidentifier>
<db:enumvalue>0x84FA</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Float32_D32_UInt32_S8_X24</db:enumidentifier>
<db:enumvalue>0x8DAD</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the possible pixel data types for a pixel transfer operation</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::NoPixelType</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_NONE</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Int8</db:code></db:para>
</db:td>
<db:td><db:code>0x1400</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_BYTE</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt8</db:code></db:para>
</db:td>
<db:td><db:code>0x1401</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_BYTE</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Int16</db:code></db:para>
</db:td>
<db:td><db:code>0x1402</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_SHORT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt16</db:code></db:para>
</db:td>
<db:td><db:code>0x1403</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_SHORT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Int32</db:code></db:para>
</db:td>
<db:td><db:code>0x1404</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_INT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt32</db:code></db:para>
</db:td>
<db:td><db:code>0x1405</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_INT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Float16</db:code></db:para>
</db:td>
<db:td><db:code>0x140B</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_HALF_FLOAT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Float16OES</db:code></db:para>
</db:td>
<db:td><db:code>0x8D61</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_HALF_FLOAT_OES</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Float32</db:code></db:para>
</db:td>
<db:td><db:code>0x1406</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_FLOAT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt32_RGB9_E5</db:code></db:para>
</db:td>
<db:td><db:code>0x8C3E</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_INT_5_9_9_9_REV</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt32_RG11B10F</db:code></db:para>
</db:td>
<db:td><db:code>0x8C3B</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_INT_10F_11F_11F_REV</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt8_RG3B2</db:code></db:para>
</db:td>
<db:td><db:code>0x8032</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_BYTE_3_3_2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt8_RG3B2_Rev</db:code></db:para>
</db:td>
<db:td><db:code>0x8362</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_BYTE_2_3_3_REV</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt16_RGB5A1</db:code></db:para>
</db:td>
<db:td><db:code>0x8034</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_SHORT_5_5_5_1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt16_RGB5A1_Rev</db:code></db:para>
</db:td>
<db:td><db:code>0x8366</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_SHORT_1_5_5_5_REV</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt16_R5G6B5</db:code></db:para>
</db:td>
<db:td><db:code>0x8363</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_SHORT_5_6_5</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt16_R5G6B5_Rev</db:code></db:para>
</db:td>
<db:td><db:code>0x8364</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_SHORT_5_6_5_REV</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt16_RGBA4</db:code></db:para>
</db:td>
<db:td><db:code>0x8033</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_SHORT_4_4_4_4</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt16_RGBA4_Rev</db:code></db:para>
</db:td>
<db:td><db:code>0x8365</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_SHORT_4_4_4_4_REV</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt32_RGBA8</db:code></db:para>
</db:td>
<db:td><db:code>0x8035</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_INT_8_8_8_8</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt32_RGBA8_Rev</db:code></db:para>
</db:td>
<db:td><db:code>0x8367</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_INT_8_8_8_8_REV</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt32_RGB10A2</db:code></db:para>
</db:td>
<db:td><db:code>0x8036</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_INT_10_10_10_2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt32_RGB10A2_Rev</db:code></db:para>
</db:td>
<db:td><db:code>0x8368</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_INT_2_10_10_10_REV</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::UInt32_D24S8</db:code></db:para>
</db:td>
<db:td><db:code>0x84FA</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_UNSIGNED_INT_24_8. Introduced in Qt 5.4</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Float32_D32_UInt32_S8_X24</db:code></db:para>
</db:td>
<db:td><db:code>0x8DAD</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_FLOAT_32_UNSIGNED_INT_24_8_REV. Introduced in Qt 5.4</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="SwizzleComponent-enum">
<db:title>enum QOpenGLTexture::SwizzleComponent</db:title>
<db:enumsynopsis>
<db:enumname>SwizzleComponent</db:enumname>
<db:enumitem>
<db:enumidentifier>SwizzleRed</db:enumidentifier>
<db:enumvalue>0x8E42</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SwizzleGreen</db:enumidentifier>
<db:enumvalue>0x8E43</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SwizzleBlue</db:enumidentifier>
<db:enumvalue>0x8E44</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SwizzleAlpha</db:enumidentifier>
<db:enumvalue>0x8E45</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the texture color components that can be assigned a swizzle mask.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SwizzleRed</db:code></db:para>
</db:td>
<db:td><db:code>0x8E42</db:code></db:td>
<db:td>
<db:para>The red component. Equivalent to GL_TEXTURE_SWIZZLE_R</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SwizzleGreen</db:code></db:para>
</db:td>
<db:td><db:code>0x8E43</db:code></db:td>
<db:td>
<db:para>The green component. Equivalent to GL_TEXTURE_SWIZZLE_G</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SwizzleBlue</db:code></db:para>
</db:td>
<db:td><db:code>0x8E44</db:code></db:td>
<db:td>
<db:para>The blue component. Equivalent to GL_TEXTURE_SWIZZLE_B</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SwizzleAlpha</db:code></db:para>
</db:td>
<db:td><db:code>0x8E45</db:code></db:td>
<db:td>
<db:para>The alpha component. Equivalent to GL_TEXTURE_SWIZZLE_A</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="SwizzleValue-enum">
<db:title>enum QOpenGLTexture::SwizzleValue</db:title>
<db:enumsynopsis>
<db:enumname>SwizzleValue</db:enumname>
<db:enumitem>
<db:enumidentifier>RedValue</db:enumidentifier>
<db:enumvalue>0x1903</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>GreenValue</db:enumidentifier>
<db:enumvalue>0x1904</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlueValue</db:enumidentifier>
<db:enumvalue>0x1905</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlphaValue</db:enumidentifier>
<db:enumvalue>0x1906</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ZeroValue</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OneValue</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the possible mask values for texture swizzling.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RedValue</db:code></db:para>
</db:td>
<db:td><db:code>0x1903</db:code></db:td>
<db:td>
<db:para>Maps the component to the red channel. Equivalent to GL_RED</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::GreenValue</db:code></db:para>
</db:td>
<db:td><db:code>0x1904</db:code></db:td>
<db:td>
<db:para>Maps the component to the green channel. Equivalent to GL_GREEN</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::BlueValue</db:code></db:para>
</db:td>
<db:td><db:code>0x1905</db:code></db:td>
<db:td>
<db:para>Maps the component to the blue channel. Equivalent to GL_BLUE</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::AlphaValue</db:code></db:para>
</db:td>
<db:td><db:code>0x1906</db:code></db:td>
<db:td>
<db:para>Maps the component to the alpha channel. Equivalent to GL_ALPHA</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::ZeroValue</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Maps the component to a fixed value of 0. Equivalent to GL_ZERO</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::OneValue</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Maps the component to a fixed value of 1. Equivalent to GL_ONE</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Target-enum">
<db:title>enum QOpenGLTexture::Target</db:title>
<db:enumsynopsis>
<db:enumname>Target</db:enumname>
<db:enumitem>
<db:enumidentifier>Target1D</db:enumidentifier>
<db:enumvalue>0x0DE0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Target1DArray</db:enumidentifier>
<db:enumvalue>0x8C18</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Target2D</db:enumidentifier>
<db:enumvalue>0x0DE1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Target2DArray</db:enumidentifier>
<db:enumvalue>0x8C1A</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Target3D</db:enumidentifier>
<db:enumvalue>0x806F</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TargetCubeMap</db:enumidentifier>
<db:enumvalue>0x8513</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TargetCubeMapArray</db:enumidentifier>
<db:enumvalue>0x9009</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Target2DMultisample</db:enumidentifier>
<db:enumvalue>0x9100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Target2DMultisampleArray</db:enumidentifier>
<db:enumvalue>0x9102</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TargetRectangle</db:enumidentifier>
<db:enumvalue>0x84F5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TargetBuffer</db:enumidentifier>
<db:enumvalue>0x8C2A</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the texture target of a <db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link> object. For more information on creating array textures, see <db:link xlink:href="https://www.khronos.org/opengl/wiki/Array_Texture">Array Texture</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Target1D</db:code></db:para>
</db:td>
<db:td><db:code>0x0DE0</db:code></db:td>
<db:td>
<db:para>A 1-dimensional texture. Equivalent to GL_TEXTURE_1D.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Target1DArray</db:code></db:para>
</db:td>
<db:td><db:code>0x8C18</db:code></db:td>
<db:td>
<db:para>An array of 1-dimensional textures. Equivalent to GL_TEXTURE_1D_ARRAY</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Target2D</db:code></db:para>
</db:td>
<db:td><db:code>0x0DE1</db:code></db:td>
<db:td>
<db:para>A 2-dimensional texture. Equivalent to GL_TEXTURE_2D</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Target2DArray</db:code></db:para>
</db:td>
<db:td><db:code>0x8C1A</db:code></db:td>
<db:td>
<db:para>An array of 2-dimensional textures. Equivalent to GL_TEXTURE_2D_ARRAY</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Target3D</db:code></db:para>
</db:td>
<db:td><db:code>0x806F</db:code></db:td>
<db:td>
<db:para>A 3-dimensional texture. Equivalent to GL_TEXTURE_3D</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::TargetCubeMap</db:code></db:para>
</db:td>
<db:td><db:code>0x8513</db:code></db:td>
<db:td>
<db:para>A cubemap texture. Equivalent to GL_TEXTURE_CUBE_MAP</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::TargetCubeMapArray</db:code></db:para>
</db:td>
<db:td><db:code>0x9009</db:code></db:td>
<db:td>
<db:para>An array of cubemap textures. Equivalent to GL_TEXTURE_CUBE_MAP_ARRAY</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Target2DMultisample</db:code></db:para>
</db:td>
<db:td><db:code>0x9100</db:code></db:td>
<db:td>
<db:para>A 2-dimensional texture with multisample support. Equivalent to GL_TEXTURE_2D_MULTISAMPLE</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Target2DMultisampleArray</db:code></db:para>
</db:td>
<db:td><db:code>0x9102</db:code></db:td>
<db:td>
<db:para>An array of 2-dimensional textures with multisample support. Equivalent to GL_TEXTURE_2D_MULTISAMPLE_ARRAY</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::TargetRectangle</db:code></db:para>
</db:td>
<db:td><db:code>0x84F5</db:code></db:td>
<db:td>
<db:para>A rectangular 2-dimensional texture. Equivalent to GL_TEXTURE_RECTANGLE</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::TargetBuffer</db:code></db:para>
</db:td>
<db:td><db:code>0x8C2A</db:code></db:td>
<db:td>
<db:para>A texture with data from an OpenGL buffer object. Equivalent to GL_TEXTURE_BUFFER</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="TextureFormat-enum">
<db:title>enum QOpenGLTexture::TextureFormat</db:title>
<db:enumsynopsis>
<db:enumname>TextureFormat</db:enumname>
<db:enumitem>
<db:enumidentifier>NoFormat</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R8_UNorm</db:enumidentifier>
<db:enumvalue>0x8229</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG8_UNorm</db:enumidentifier>
<db:enumvalue>0x822B</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB8_UNorm</db:enumidentifier>
<db:enumvalue>0x8051</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA8_UNorm</db:enumidentifier>
<db:enumvalue>0x8058</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R16_UNorm</db:enumidentifier>
<db:enumvalue>0x822A</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG16_UNorm</db:enumidentifier>
<db:enumvalue>0x822C</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB16_UNorm</db:enumidentifier>
<db:enumvalue>0x8054</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA16_UNorm</db:enumidentifier>
<db:enumvalue>0x805B</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R8_SNorm</db:enumidentifier>
<db:enumvalue>0x8F94</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG8_SNorm</db:enumidentifier>
<db:enumvalue>0x8F95</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB8_SNorm</db:enumidentifier>
<db:enumvalue>0x8F96</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA8_SNorm</db:enumidentifier>
<db:enumvalue>0x8F97</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R16_SNorm</db:enumidentifier>
<db:enumvalue>0x8F98</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG16_SNorm</db:enumidentifier>
<db:enumvalue>0x8F99</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB16_SNorm</db:enumidentifier>
<db:enumvalue>0x8F9A</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA16_SNorm</db:enumidentifier>
<db:enumvalue>0x8F9B</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R8U</db:enumidentifier>
<db:enumvalue>0x8232</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG8U</db:enumidentifier>
<db:enumvalue>0x8238</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB8U</db:enumidentifier>
<db:enumvalue>0x8D7D</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA8U</db:enumidentifier>
<db:enumvalue>0x8D7C</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R16U</db:enumidentifier>
<db:enumvalue>0x8234</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG16U</db:enumidentifier>
<db:enumvalue>0x823A</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB16U</db:enumidentifier>
<db:enumvalue>0x8D77</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA16U</db:enumidentifier>
<db:enumvalue>0x8D76</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R32U</db:enumidentifier>
<db:enumvalue>0x8236</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG32U</db:enumidentifier>
<db:enumvalue>0x823C</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB32U</db:enumidentifier>
<db:enumvalue>0x8D71</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA32U</db:enumidentifier>
<db:enumvalue>0x8D70</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R8I</db:enumidentifier>
<db:enumvalue>0x8231</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG8I</db:enumidentifier>
<db:enumvalue>0x8237</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB8I</db:enumidentifier>
<db:enumvalue>0x8D8F</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA8I</db:enumidentifier>
<db:enumvalue>0x8D8E</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R16I</db:enumidentifier>
<db:enumvalue>0x8233</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG16I</db:enumidentifier>
<db:enumvalue>0x8239</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB16I</db:enumidentifier>
<db:enumvalue>0x8D89</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA16I</db:enumidentifier>
<db:enumvalue>0x8D88</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R32I</db:enumidentifier>
<db:enumvalue>0x8235</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG32I</db:enumidentifier>
<db:enumvalue>0x823B</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB32I</db:enumidentifier>
<db:enumvalue>0x8D83</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA32I</db:enumidentifier>
<db:enumvalue>0x8D82</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R16F</db:enumidentifier>
<db:enumvalue>0x822D</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG16F</db:enumidentifier>
<db:enumvalue>0x822F</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB16F</db:enumidentifier>
<db:enumvalue>0x881B</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA16F</db:enumidentifier>
<db:enumvalue>0x881A</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R32F</db:enumidentifier>
<db:enumvalue>0x822E</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG32F</db:enumidentifier>
<db:enumvalue>0x8230</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB32F</db:enumidentifier>
<db:enumvalue>0x8815</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA32F</db:enumidentifier>
<db:enumvalue>0x8814</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB9E5</db:enumidentifier>
<db:enumvalue>0x8C3D</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG11B10F</db:enumidentifier>
<db:enumvalue>0x8C3A</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG3B2</db:enumidentifier>
<db:enumvalue>0x2A10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R5G6B5</db:enumidentifier>
<db:enumvalue>0x8D62</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB5A1</db:enumidentifier>
<db:enumvalue>0x8057</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA4</db:enumidentifier>
<db:enumvalue>0x8056</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB10A2</db:enumidentifier>
<db:enumvalue>0x906F</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>D16</db:enumidentifier>
<db:enumvalue>0x81A5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>D24</db:enumidentifier>
<db:enumvalue>0x81A6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>D24S8</db:enumidentifier>
<db:enumvalue>0x88F0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>D32</db:enumidentifier>
<db:enumvalue>0x81A7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>D32F</db:enumidentifier>
<db:enumvalue>0x8CAC</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>D32FS8X24</db:enumidentifier>
<db:enumvalue>0x8CAD</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>S8</db:enumidentifier>
<db:enumvalue>0x8D48</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB_DXT1</db:enumidentifier>
<db:enumvalue>0x83F0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_DXT1</db:enumidentifier>
<db:enumvalue>0x83F1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_DXT3</db:enumidentifier>
<db:enumvalue>0x83F2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_DXT5</db:enumidentifier>
<db:enumvalue>0x83F3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R_ATI1N_UNorm</db:enumidentifier>
<db:enumvalue>0x8DBB</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R_ATI1N_SNorm</db:enumidentifier>
<db:enumvalue>0x8DBC</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG_ATI2N_UNorm</db:enumidentifier>
<db:enumvalue>0x8DBD</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG_ATI2N_SNorm</db:enumidentifier>
<db:enumvalue>0x8DBE</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB_BP_UNSIGNED_FLOAT</db:enumidentifier>
<db:enumvalue>0x8E8F</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB_BP_SIGNED_FLOAT</db:enumidentifier>
<db:enumvalue>0x8E8E</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB_BP_UNorm</db:enumidentifier>
<db:enumvalue>0x8E8C</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R11_EAC_UNorm</db:enumidentifier>
<db:enumvalue>0x9270</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R11_EAC_SNorm</db:enumidentifier>
<db:enumvalue>0x9271</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG11_EAC_UNorm</db:enumidentifier>
<db:enumvalue>0x9272</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG11_EAC_SNorm</db:enumidentifier>
<db:enumvalue>0x9273</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB8_ETC2</db:enumidentifier>
<db:enumvalue>0x9274</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_ETC2</db:enumidentifier>
<db:enumvalue>0x9275</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB8_PunchThrough_Alpha1_ETC2</db:enumidentifier>
<db:enumvalue>0x9276</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_PunchThrough_Alpha1_ETC2</db:enumidentifier>
<db:enumvalue>0x9277</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA8_ETC2_EAC</db:enumidentifier>
<db:enumvalue>0x9278</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ETC2_EAC</db:enumidentifier>
<db:enumvalue>0x9279</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB8_ETC1</db:enumidentifier>
<db:enumvalue>0x8D64</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_4x4</db:enumidentifier>
<db:enumvalue>0x93B0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_5x4</db:enumidentifier>
<db:enumvalue>0x93B1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_5x5</db:enumidentifier>
<db:enumvalue>0x93B2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_6x5</db:enumidentifier>
<db:enumvalue>0x93B3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_6x6</db:enumidentifier>
<db:enumvalue>0x93B4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_8x5</db:enumidentifier>
<db:enumvalue>0x93B5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_8x6</db:enumidentifier>
<db:enumvalue>0x93B6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_8x8</db:enumidentifier>
<db:enumvalue>0x93B7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_10x5</db:enumidentifier>
<db:enumvalue>0x93B8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_10x6</db:enumidentifier>
<db:enumvalue>0x93B9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_10x8</db:enumidentifier>
<db:enumvalue>0x93BA</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_10x10</db:enumidentifier>
<db:enumvalue>0x93BB</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_12x10</db:enumidentifier>
<db:enumvalue>0x93BC</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA_ASTC_12x12</db:enumidentifier>
<db:enumvalue>0x93BD</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_4x4</db:enumidentifier>
<db:enumvalue>0x93D0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_5x4</db:enumidentifier>
<db:enumvalue>0x93D1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_5x5</db:enumidentifier>
<db:enumvalue>0x93D2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_6x5</db:enumidentifier>
<db:enumvalue>0x93D3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_6x6</db:enumidentifier>
<db:enumvalue>0x93D4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_8x5</db:enumidentifier>
<db:enumvalue>0x93D5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_8x6</db:enumidentifier>
<db:enumvalue>0x93D6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_8x8</db:enumidentifier>
<db:enumvalue>0x93D7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_10x5</db:enumidentifier>
<db:enumvalue>0x93D8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_10x6</db:enumidentifier>
<db:enumvalue>0x93D9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_10x8</db:enumidentifier>
<db:enumvalue>0x93DA</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_10x10</db:enumidentifier>
<db:enumvalue>0x93DB</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_12x10</db:enumidentifier>
<db:enumvalue>0x93DC</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8_ASTC_12x12</db:enumidentifier>
<db:enumvalue>0x93DD</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8</db:enumidentifier>
<db:enumvalue>0x8C41</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB8_Alpha8</db:enumidentifier>
<db:enumvalue>0x8C43</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB_DXT1</db:enumidentifier>
<db:enumvalue>0x8C4C</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB_Alpha_DXT1</db:enumidentifier>
<db:enumvalue>0x8C4D</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB_Alpha_DXT3</db:enumidentifier>
<db:enumvalue>0x8C4E</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB_Alpha_DXT5</db:enumidentifier>
<db:enumvalue>0x8C4F</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SRGB_BP_UNorm</db:enumidentifier>
<db:enumvalue>0x8E8D</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DepthFormat</db:enumidentifier>
<db:enumvalue>0x1902</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlphaFormat</db:enumidentifier>
<db:enumvalue>0x1906</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBFormat</db:enumidentifier>
<db:enumvalue>0x1907</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBAFormat</db:enumidentifier>
<db:enumvalue>0x1908</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LuminanceFormat</db:enumidentifier>
<db:enumvalue>0x1909</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LuminanceAlphaFormat</db:enumidentifier>
<db:enumvalue>0x190A</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the possible texture formats. Depending upon your OpenGL implementation only a subset of these may be supported.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::NoFormat</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_NONE</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R8_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8229</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R8</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG8_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x822B</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG8</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB8_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8051</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB8</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA8_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8058</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA8</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R16_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x822A</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R16</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG16_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x822C</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG16</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB16_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8054</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB16</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA16_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x805B</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA16</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R8_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F94</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R8_SNORM</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG8_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F95</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG8_SNORM</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB8_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F96</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB8_SNORM</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA8_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F97</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA8_SNORM</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R16_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F98</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R16_SNORM</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG16_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F99</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG16_SNORM</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB16_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F9A</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB16_SNORM</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA16_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F9B</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA16_SNORM</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R8U</db:code></db:para>
</db:td>
<db:td><db:code>0x8232</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R8UI</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG8U</db:code></db:para>
</db:td>
<db:td><db:code>0x8238</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG8UI</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB8U</db:code></db:para>
</db:td>
<db:td><db:code>0x8D7D</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB8UI</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA8U</db:code></db:para>
</db:td>
<db:td><db:code>0x8D7C</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA8UI</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R16U</db:code></db:para>
</db:td>
<db:td><db:code>0x8234</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R16UI</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG16U</db:code></db:para>
</db:td>
<db:td><db:code>0x823A</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG16UI</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB16U</db:code></db:para>
</db:td>
<db:td><db:code>0x8D77</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB16UI</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA16U</db:code></db:para>
</db:td>
<db:td><db:code>0x8D76</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA16UI</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R32U</db:code></db:para>
</db:td>
<db:td><db:code>0x8236</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R32UI</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG32U</db:code></db:para>
</db:td>
<db:td><db:code>0x823C</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG32UI</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB32U</db:code></db:para>
</db:td>
<db:td><db:code>0x8D71</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB32UI</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA32U</db:code></db:para>
</db:td>
<db:td><db:code>0x8D70</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA32UI</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R8I</db:code></db:para>
</db:td>
<db:td><db:code>0x8231</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R8I</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG8I</db:code></db:para>
</db:td>
<db:td><db:code>0x8237</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG8I</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB8I</db:code></db:para>
</db:td>
<db:td><db:code>0x8D8F</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB8I</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA8I</db:code></db:para>
</db:td>
<db:td><db:code>0x8D8E</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA8I</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R16I</db:code></db:para>
</db:td>
<db:td><db:code>0x8233</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R16I</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG16I</db:code></db:para>
</db:td>
<db:td><db:code>0x8239</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG16I</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB16I</db:code></db:para>
</db:td>
<db:td><db:code>0x8D89</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB16I</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA16I</db:code></db:para>
</db:td>
<db:td><db:code>0x8D88</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA16I</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R32I</db:code></db:para>
</db:td>
<db:td><db:code>0x8235</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R32I</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG32I</db:code></db:para>
</db:td>
<db:td><db:code>0x823B</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG32I</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB32I</db:code></db:para>
</db:td>
<db:td><db:code>0x8D83</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB32I</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA32I</db:code></db:para>
</db:td>
<db:td><db:code>0x8D82</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA32I</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R16F</db:code></db:para>
</db:td>
<db:td><db:code>0x822D</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R16F</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG16F</db:code></db:para>
</db:td>
<db:td><db:code>0x822F</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG16F</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB16F</db:code></db:para>
</db:td>
<db:td><db:code>0x881B</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB16F</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA16F</db:code></db:para>
</db:td>
<db:td><db:code>0x881A</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA16F</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R32F</db:code></db:para>
</db:td>
<db:td><db:code>0x822E</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R32F</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG32F</db:code></db:para>
</db:td>
<db:td><db:code>0x8230</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RG32F</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB32F</db:code></db:para>
</db:td>
<db:td><db:code>0x8815</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB32F</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA32F</db:code></db:para>
</db:td>
<db:td><db:code>0x8814</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA32F</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB9E5</db:code></db:para>
</db:td>
<db:td><db:code>0x8C3D</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB9_E5</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG11B10F</db:code></db:para>
</db:td>
<db:td><db:code>0x8C3A</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R11F_G11F_B10F</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG3B2</db:code></db:para>
</db:td>
<db:td><db:code>0x2A10</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_R3_G3_B2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R5G6B5</db:code></db:para>
</db:td>
<db:td><db:code>0x8D62</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB565</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB5A1</db:code></db:para>
</db:td>
<db:td><db:code>0x8057</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB5_A1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA4</db:code></db:para>
</db:td>
<db:td><db:code>0x8056</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA4</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB10A2</db:code></db:para>
</db:td>
<db:td><db:code>0x906F</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB10_A2UI</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::D16</db:code></db:para>
</db:td>
<db:td><db:code>0x81A5</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_DEPTH_COMPONENT16</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::D24</db:code></db:para>
</db:td>
<db:td><db:code>0x81A6</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_DEPTH_COMPONENT24</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::D24S8</db:code></db:para>
</db:td>
<db:td><db:code>0x88F0</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_DEPTH24_STENCIL8</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::D32</db:code></db:para>
</db:td>
<db:td><db:code>0x81A7</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_DEPTH_COMPONENT32</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::D32F</db:code></db:para>
</db:td>
<db:td><db:code>0x8CAC</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_DEPTH_COMPONENT32F</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::D32FS8X24</db:code></db:para>
</db:td>
<db:td><db:code>0x8CAD</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_DEPTH32F_STENCIL8</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::S8</db:code></db:para>
</db:td>
<db:td><db:code>0x8D48</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_STENCIL_INDEX8. Introduced in Qt 5.4</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB_DXT1</db:code></db:para>
</db:td>
<db:td><db:code>0x83F0</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGB_S3TC_DXT1_EXT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_DXT1</db:code></db:para>
</db:td>
<db:td><db:code>0x83F1</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_DXT3</db:code></db:para>
</db:td>
<db:td><db:code>0x83F2</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_S3TC_DXT3_EXT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_DXT5</db:code></db:para>
</db:td>
<db:td><db:code>0x83F3</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_S3TC_DXT5_EXT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R_ATI1N_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8DBB</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RED_RGTC1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R_ATI1N_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8DBC</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SIGNED_RED_RGTC1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG_ATI2N_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8DBD</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RG_RGTC2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG_ATI2N_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8DBE</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SIGNED_RG_RGTC2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB_BP_UNSIGNED_FLOAT</db:code></db:para>
</db:td>
<db:td><db:code>0x8E8F</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB_BP_SIGNED_FLOAT</db:code></db:para>
</db:td>
<db:td><db:code>0x8E8E</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB_BP_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8E8C</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_BPTC_UNORM_ARB</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R11_EAC_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x9270</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_R11_EAC</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::R11_EAC_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x9271</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SIGNED_R11_EAC</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG11_EAC_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x9272</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RG11_EAC</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RG11_EAC_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x9273</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SIGNED_RG11_EAC</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB8_ETC2</db:code></db:para>
</db:td>
<db:td><db:code>0x9274</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGB8_ETC2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_ETC2</db:code></db:para>
</db:td>
<db:td><db:code>0x9275</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ETC2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB8_PunchThrough_Alpha1_ETC2</db:code></db:para>
</db:td>
<db:td><db:code>0x9276</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_PunchThrough_Alpha1_ETC2</db:code></db:para>
</db:td>
<db:td><db:code>0x9277</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA8_ETC2_EAC</db:code></db:para>
</db:td>
<db:td><db:code>0x9278</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA8_ETC2_EAC</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ETC2_EAC</db:code></db:para>
</db:td>
<db:td><db:code>0x9279</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGB8_ETC1</db:code></db:para>
</db:td>
<db:td><db:code>0x8D64</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_ETC1_RGB8_OES</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_4x4</db:code></db:para>
</db:td>
<db:td><db:code>0x93B0</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_4x4_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_5x4</db:code></db:para>
</db:td>
<db:td><db:code>0x93B1</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_5x4_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_5x5</db:code></db:para>
</db:td>
<db:td><db:code>0x93B2</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_5x5_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_6x5</db:code></db:para>
</db:td>
<db:td><db:code>0x93B3</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_6x5_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_6x6</db:code></db:para>
</db:td>
<db:td><db:code>0x93B4</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_6x6_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_8x5</db:code></db:para>
</db:td>
<db:td><db:code>0x93B5</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_8x5_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_8x6</db:code></db:para>
</db:td>
<db:td><db:code>0x93B6</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_8x6_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_8x8</db:code></db:para>
</db:td>
<db:td><db:code>0x93B7</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_8x8_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_10x5</db:code></db:para>
</db:td>
<db:td><db:code>0x93B8</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_10x5_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_10x6</db:code></db:para>
</db:td>
<db:td><db:code>0x93B9</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_10x6_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_10x8</db:code></db:para>
</db:td>
<db:td><db:code>0x93BA</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_10x8_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_10x10</db:code></db:para>
</db:td>
<db:td><db:code>0x93BB</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_10x10_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_12x10</db:code></db:para>
</db:td>
<db:td><db:code>0x93BC</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_12x10_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBA_ASTC_12x12</db:code></db:para>
</db:td>
<db:td><db:code>0x93BD</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_RGBA_ASTC_12x12_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_4x4</db:code></db:para>
</db:td>
<db:td><db:code>0x93D0</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_5x4</db:code></db:para>
</db:td>
<db:td><db:code>0x93D1</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_5x5</db:code></db:para>
</db:td>
<db:td><db:code>0x93D2</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_6x5</db:code></db:para>
</db:td>
<db:td><db:code>0x93D3</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_6x6</db:code></db:para>
</db:td>
<db:td><db:code>0x93D4</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_8x5</db:code></db:para>
</db:td>
<db:td><db:code>0x93D5</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_8x6</db:code></db:para>
</db:td>
<db:td><db:code>0x93D6</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_8x8</db:code></db:para>
</db:td>
<db:td><db:code>0x93D7</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_10x5</db:code></db:para>
</db:td>
<db:td><db:code>0x93D8</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_10x6</db:code></db:para>
</db:td>
<db:td><db:code>0x93D9</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_10x8</db:code></db:para>
</db:td>
<db:td><db:code>0x93DA</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_10x10</db:code></db:para>
</db:td>
<db:td><db:code>0x93DB</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_12x10</db:code></db:para>
</db:td>
<db:td><db:code>0x93DC</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8_ASTC_12x12</db:code></db:para>
</db:td>
<db:td><db:code>0x93DD</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8</db:code></db:para>
</db:td>
<db:td><db:code>0x8C41</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_SRGB8</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB8_Alpha8</db:code></db:para>
</db:td>
<db:td><db:code>0x8C43</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_SRGB8_ALPHA8</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB_DXT1</db:code></db:para>
</db:td>
<db:td><db:code>0x8C4C</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB_S3TC_DXT1_EXT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB_Alpha_DXT1</db:code></db:para>
</db:td>
<db:td><db:code>0x8C4D</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB_Alpha_DXT3</db:code></db:para>
</db:td>
<db:td><db:code>0x8C4E</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB_Alpha_DXT5</db:code></db:para>
</db:td>
<db:td><db:code>0x8C4F</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::SRGB_BP_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8E8D</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::DepthFormat</db:code></db:para>
</db:td>
<db:td><db:code>0x1902</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_DEPTH_COMPONENT (only OpenGL ES 3 or ES 2 with OES_depth_texture)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::AlphaFormat</db:code></db:para>
</db:td>
<db:td><db:code>0x1906</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_ALPHA (OpenGL ES 2 only)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBFormat</db:code></db:para>
</db:td>
<db:td><db:code>0x1907</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGB (OpenGL ES 2 only)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::RGBAFormat</db:code></db:para>
</db:td>
<db:td><db:code>0x1908</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_RGBA (OpenGL ES 2 only)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::LuminanceFormat</db:code></db:para>
</db:td>
<db:td><db:code>0x1909</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_LUMINANCE (OpenGL ES 2 only)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::LuminanceAlphaFormat</db:code></db:para>
</db:td>
<db:td><db:code>0x190A</db:code></db:td>
<db:td>
<db:para>Equivalent to GL_LUMINANCE_ALPHA (OpenGL ES 2 only)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="TextureUnitReset-enum">
<db:title>enum QOpenGLTexture::TextureUnitReset</db:title>
<db:enumsynopsis>
<db:enumname>TextureUnitReset</db:enumname>
<db:enumitem>
<db:enumidentifier>ResetTextureUnit</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DontResetTextureUnit</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines options ot control texture unit activation.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::ResetTextureUnit</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The previous active texture unit will be reset</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::DontResetTextureUnit</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The previous active texture unit will not be rest</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="WrapMode-enum">
<db:title>enum QOpenGLTexture::WrapMode</db:title>
<db:enumsynopsis>
<db:enumname>WrapMode</db:enumname>
<db:enumitem>
<db:enumidentifier>Repeat</db:enumidentifier>
<db:enumvalue>0x2901</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MirroredRepeat</db:enumidentifier>
<db:enumvalue>0x8370</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ClampToEdge</db:enumidentifier>
<db:enumvalue>0x812F</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ClampToBorder</db:enumidentifier>
<db:enumvalue>0x812D</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines the possible texture coordinate wrapping modes.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::Repeat</db:code></db:para>
</db:td>
<db:td><db:code>0x2901</db:code></db:td>
<db:td>
<db:para>Texture coordinate is repeated. Equivalent to GL_REPEAT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::MirroredRepeat</db:code></db:para>
</db:td>
<db:td><db:code>0x8370</db:code></db:td>
<db:td>
<db:para>Texture coordinate is reflected about 0 and 1. Equivalent to GL_MIRRORED_REPEAT</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::ClampToEdge</db:code></db:para>
</db:td>
<db:td><db:code>0x812F</db:code></db:td>
<db:td>
<db:para>Clamps the texture coordinates to [0,1]. Equivalent to GL_CLAMP_TO_EDGE</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link></db:emphasis>::ClampToBorder</db:code></db:para>
</db:td>
<db:td><db:code>0x812D</db:code></db:td>
<db:td>
<db:para>As for ClampToEdge but also blends samples at 0 and 1 with a fixed border color. Equivalent to GL_CLAMP_TO_BORDER</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLTexture">
<db:title>[explicit] QOpenGLTexture::QOpenGLTexture(QOpenGLTexture::Target <db:emphasis>target</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QOpenGLTexture</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::Target</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTexture(QOpenGLTexture::Target target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link> object that can later be bound to <db:code role="parameter">target</db:code>.</db:para>
<db:para>This does not create the underlying OpenGL texture object. Therefore, construction using this constructor does not require a valid current OpenGL context.</db:para>
</db:section>
<db:section xml:id="QOpenGLTexture-1">
<db:title>[explicit] QOpenGLTexture::QOpenGLTexture(const QImage &amp;<db:emphasis>image</db:emphasis>, QOpenGLTexture::MipMapGeneration <db:emphasis>genMipMaps</db:emphasis> = GenerateMipMaps)</db:title>
<db:constructorsynopsis>
<db:methodname>QOpenGLTexture</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::MipMapGeneration</db:type>
<db:parameter>genMipMaps</db:parameter>
<db:initializer>GenerateMipMaps</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTexture(const QImage &amp;image, QOpenGLTexture::MipMapGeneration genMipMaps)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link> object that can later be bound to the 2D texture target and contains the pixel data contained in <db:code role="parameter">image</db:code>. If you wish to have a chain of mipmaps generated then set <db:code role="parameter">genMipMaps</db:code> to <db:code>true</db:code> (this is the default).</db:para>
<db:para>This does create the underlying OpenGL texture object. Therefore, construction using this constructor does require a valid current OpenGL context.</db:para>
</db:section>
<db:section xml:id="allocateStorage">
<db:title>void QOpenGLTexture::allocateStorage()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>allocateStorage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void allocateStorage()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Allocates server-side storage for this texture object taking into account, the format, dimensions, mipmap levels, array layers and cubemap faces.</db:para>
<db:para>Once storage has been allocated it is no longer possible to change these properties.</db:para>
<db:para>If supported <db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link> makes use of immutable texture storage.</db:para>
<db:para>Once storage has been allocated for the texture then pixel data can be uploaded via one of the <db:link xlink:href="qopengltexture.xml#setData">setData</db:link>() overloads.</db:para>
<db:note>
<db:para>If immutable texture storage is not available, then a default pixel format and pixel type will be used to create the mutable storage. You can use the other allocateStorage() overload to specify exactly the pixel format and the pixel type to use when allocating mutable storage; this is particulary useful under certain OpenGL ES implementations (notably, OpenGL ES 2), where the pixel format and the pixel type used at allocation time must perfectly match the format and the type passed to any subsequent <db:link xlink:href="qopengltexture.xml#setData">setData</db:link>() call.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#isStorageAllocated">isStorageAllocated</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="allocateStorage-1">
<db:title>[since 5.5] void QOpenGLTexture::allocateStorage(QOpenGLTexture::PixelFormat <db:emphasis>pixelFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>pixelType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>allocateStorage</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>pixelFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>pixelType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void allocateStorage(QOpenGLTexture::PixelFormat pixelFormat, QOpenGLTexture::PixelType pixelType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Allocates server-side storage for this texture object taking into account, the format, dimensions, mipmap levels, array layers and cubemap faces.</db:para>
<db:para>Once storage has been allocated it is no longer possible to change these properties.</db:para>
<db:para>If supported <db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link> makes use of immutable texture storage. However, if immutable texture storage is not available, then the specified <db:code role="parameter">pixelFormat</db:code> and <db:code role="parameter">pixelType</db:code> will be used to allocate mutable storage; note that in certain OpenGL implementations (notably, OpenGL ES 2) they must perfectly match the format and the type passed to any subsequent <db:link xlink:href="qopengltexture.xml#setData">setData</db:link>() call.</db:para>
<db:para>Once storage has been allocated for the texture then pixel data can be uploaded via one of the <db:link xlink:href="qopengltexture.xml#setData">setData</db:link>() overloads.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#isStorageAllocated">isStorageAllocated</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bind">
<db:title>void QOpenGLTexture::bind()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bind</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void bind()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Binds this texture to the currently active texture unit ready for rendering. Note that you do not need to bind <db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link> objects in order to modify them as the implementation makes use of the EXT_direct_state_access extension where available and simulates it where it is not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#release">release</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bind-1">
<db:title>void QOpenGLTexture::bind(uint <db:emphasis>unit</db:emphasis>, QOpenGLTexture::TextureUnitReset <db:emphasis>reset</db:emphasis> = DontResetTextureUnit)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bind</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>unit</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::TextureUnitReset</db:type>
<db:parameter>reset</db:parameter>
<db:initializer>DontResetTextureUnit</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void bind(uint unit, QOpenGLTexture::TextureUnitReset reset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Binds this texture to texture unit <db:code role="parameter">unit</db:code> ready for rendering. Note that you do not need to bind <db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link> objects in order to modify them as the implementation makes use of the EXT_direct_state_access extension where available and simulates it where it is not.</db:para>
<db:para>If parameter <db:code role="parameter">reset</db:code> is <db:code>true</db:code> then this function will restore the active unit to the texture unit that was active upon entry.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#release">release</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="borderColor">
<db:title>QColor QOpenGLTexture::borderColor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColor</db:type>
<db:methodname>borderColor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor borderColor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the borderColor of this texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setBorderColor">setBorderColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="borderColor-1">
<db:title>void QOpenGLTexture::borderColor(float *<db:emphasis>border</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>borderColor</db:methodname>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>border</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void borderColor(float *border) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the texture border color into the first four elements of the array pointed to by <db:code role="parameter">border</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setBorderColor">setBorderColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="borderColor-2">
<db:title>void QOpenGLTexture::borderColor(int *<db:emphasis>border</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>borderColor</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>border</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void borderColor(int *border) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the texture border color into the first four elements of the array pointed to by <db:code role="parameter">border</db:code>.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="borderColor-3">
<db:title>void QOpenGLTexture::borderColor(unsigned int *<db:emphasis>border</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>borderColor</db:methodname>
<db:methodparam>
<db:type>unsigned int *</db:type>
<db:parameter>border</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void borderColor(unsigned int *border) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the texture border color into the first four elements of the array pointed to by <db:code role="parameter">border</db:code>.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="boundTextureId">
<db:title>[static] GLuint QOpenGLTexture::boundTextureId(QOpenGLTexture::BindingTarget <db:emphasis>target</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>GLuint</db:type>
<db:methodname>boundTextureId</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::BindingTarget</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint boundTextureId(QOpenGLTexture::BindingTarget target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qopengltexture.xml#textureId">textureId</db:link> of the texture that is bound to the <db:code role="parameter">target</db:code> of the currently active texture unit.</db:para>
</db:section>
<db:section xml:id="boundTextureId-1">
<db:title>[static] GLuint QOpenGLTexture::boundTextureId(uint <db:emphasis>unit</db:emphasis>, QOpenGLTexture::BindingTarget <db:emphasis>target</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>GLuint</db:type>
<db:methodname>boundTextureId</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>unit</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::BindingTarget</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint boundTextureId(uint unit, QOpenGLTexture::BindingTarget target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qopengltexture.xml#textureId">textureId</db:link> of the texture that is bound to the <db:code role="parameter">target</db:code> of the texture unit <db:code role="parameter">unit</db:code>.</db:para>
</db:section>
<db:section xml:id="comparisonFunction">
<db:title>[since 5.5] QOpenGLTexture::ComparisonFunction QOpenGLTexture::comparisonFunction() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLTexture::ComparisonFunction</db:type>
<db:methodname>comparisonFunction</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTexture::ComparisonFunction comparisonFunction() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the texture comparison operator set on this texture. By default, a texture has a <db:link xlink:href="qopengltexture.xml#ComparisonFunction-enum">CompareLessEqual</db:link> comparison function.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setComparisonFunction">setComparisonFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="comparisonMode">
<db:title>[since 5.5] QOpenGLTexture::ComparisonMode QOpenGLTexture::comparisonMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLTexture::ComparisonMode</db:type>
<db:methodname>comparisonMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTexture::ComparisonMode comparisonMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the texture comparison mode set on this texture. By default, a texture has a <db:link xlink:href="qopengltexture.xml#ComparisonMode-enum">CompareNone</db:link> comparison mode (i.e. comparisons are disabled).</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setComparisonMode">setComparisonMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="create">
<db:title>bool QOpenGLTexture::create()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>create</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool create()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates the underlying OpenGL texture object. This requires a current valid OpenGL context. If the texture object already exists, this function does nothing.</db:para>
<db:para>Once the texture object is created you can obtain the object name from the <db:link xlink:href="qopengltexture.xml#textureId">textureId</db:link>() function. This may be useful if you wish to make some raw OpenGL calls related to this texture.</db:para>
<db:para>Normally it should not be necessary to call this function directly as all functions that set properties of the texture object implicitly call create() on your behalf.</db:para>
<db:para>Returns <db:code>true</db:code> if the creation succeeded, otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#destroy">destroy</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#isCreated">isCreated</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#textureId">textureId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createTextureView">
<db:title>QOpenGLTexture *QOpenGLTexture::createTextureView(QOpenGLTexture::Target <db:emphasis>target</db:emphasis>, QOpenGLTexture::TextureFormat <db:emphasis>viewFormat</db:emphasis>, int <db:emphasis>minimumMipmapLevel</db:emphasis>, int <db:emphasis>maximumMipmapLevel</db:emphasis>, int <db:emphasis>minimumLayer</db:emphasis>, int <db:emphasis>maximumLayer</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLTexture *</db:type>
<db:methodname>createTextureView</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::Target</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::TextureFormat</db:type>
<db:parameter>viewFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>minimumMipmapLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>maximumMipmapLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>minimumLayer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>maximumLayer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTexture * createTextureView(QOpenGLTexture::Target target, QOpenGLTexture::TextureFormat viewFormat, int minimumMipmapLevel, int maximumMipmapLevel, int minimumLayer, int maximumLayer) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to create a texture view onto this texture. A texture view is somewhat analogous to a view in SQL in that it presents a restricted or reinterpreted view of the original data. Texture views do not allocate any more server-side storage, insted relying on the storage buffer of the source texture.</db:para>
<db:para>Texture views are only available when using immutable storage. For more information on texture views see http://www.opengl.org/wiki/Texture_Storage#Texture_views.</db:para>
<db:para>The <db:code role="parameter">target</db:code> argument specifies the target to use for the view. Only some targets can be used depending upon the target of the original target. For e.g. a view onto a <db:link xlink:href="qopengltexture.xml#Target-enum">Target1DArray</db:link> texture can specify either <db:link xlink:href="qopengltexture.xml#Target-enum">Target1DArray</db:link> or <db:link xlink:href="qopengltexture.xml#Target-enum">Target1D</db:link> but for the latter the number of array layers specified with <db:code role="parameter">minimumLayer</db:code> and <db:code role="parameter">maximumLayer</db:code> must be exactly 1.</db:para>
<db:para>Simpliar constraints apply for the <db:code role="parameter">viewFormat</db:code>. See the above link and the specification for more details.</db:para>
<db:para>The <db:code role="parameter">minimumMipmapLevel</db:code>, <db:code role="parameter">maximumMipmapLevel</db:code>, <db:code role="parameter">minimumLayer</db:code>, and <db:code role="parameter">maximumLayer</db:code> arguments serve to restrict the parts of the texture accessible by the texture view.</db:para>
<db:para>If creation of the texture view fails this function will return 0. If the function succeeds it will return a pointer to a new <db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link> object that will return <db:code>true</db:code> from its <db:link xlink:href="qopengltexture.xml#isTextureView">isTextureView</db:link>() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#isTextureView">isTextureView</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="depth">
<db:title>int QOpenGLTexture::depth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>depth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int depth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the depth of a 3D texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#width">width</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setSize">setSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="depthStencilMode">
<db:title>[since 5.4] QOpenGLTexture::DepthStencilMode QOpenGLTexture::depthStencilMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLTexture::DepthStencilMode</db:type>
<db:methodname>depthStencilMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTexture::DepthStencilMode depthStencilMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the depth stencil mode for textures using a combined depth/stencil format.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setDepthStencilMode">setDepthStencilMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="destroy">
<db:title>void QOpenGLTexture::destroy()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>destroy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void destroy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Destroys the underlying OpenGL texture object. This requires a current valid OpenGL context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#isCreated">isCreated</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#textureId">textureId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="faces">
<db:title>int QOpenGLTexture::faces() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>faces</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int faces() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of faces for this texture. For cubemap and cubemap array type targets this will be 6.</db:para>
<db:para>For non-cubemap type targets this will return 1.</db:para>
</db:section>
<db:section xml:id="format">
<db:title>QOpenGLTexture::TextureFormat QOpenGLTexture::format() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLTexture::TextureFormat</db:type>
<db:methodname>format</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTexture::TextureFormat format() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the format of this texture object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="generateMipMaps">
<db:title>void QOpenGLTexture::generateMipMaps()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>generateMipMaps</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void generateMipMaps()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates mipmaps for this texture object from mipmap level 0. If you are using a texture target and filtering option that requires mipmaps and you have disabled automatic mipmap generation then you need to call this function or the overload to create the mipmap chain.</db:para>
<db:note>
<db:para>Mipmap generation is not supported for compressed textures with OpenGL ES.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setAutoMipMapGenerationEnabled">setAutoMipMapGenerationEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMipLevels">setMipLevels</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#mipLevels">mipLevels</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="generateMipMaps-1">
<db:title>void QOpenGLTexture::generateMipMaps(int <db:emphasis>baseLevel</db:emphasis>, bool <db:emphasis>resetBaseLevel</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>generateMipMaps</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>baseLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>resetBaseLevel</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void generateMipMaps(int baseLevel, bool resetBaseLevel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates mipmaps for this texture object from mipmap level <db:code role="parameter">baseLevel</db:code>. If you are using a texture target and filtering option that requires mipmaps and you have disabled automatic mipmap generation then you need to call this function or the overload to create the mipmap chain.</db:para>
<db:para>The generation of mipmaps to above <db:code role="parameter">baseLevel</db:code> is achieved by setting the mipmap base level to <db:code role="parameter">baseLevel</db:code> and then generating the mipmap chain. If <db:code role="parameter">resetBaseLevel</db:code> is <db:code>true</db:code>, then the baseLevel of the texture will be reset to its previous value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setAutoMipMapGenerationEnabled">setAutoMipMapGenerationEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMipLevels">setMipLevels</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#mipLevels">mipLevels</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasFeature">
<db:title>[static] bool QOpenGLTexture::hasFeature(QOpenGLTexture::Feature <db:emphasis>feature</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasFeature</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::Feature</db:type>
<db:parameter>feature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasFeature(QOpenGLTexture::Feature feature)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if your OpenGL implementation and version supports the texture feature <db:code role="parameter">feature</db:code>.</db:para>
</db:section>
<db:section xml:id="height">
<db:title>int QOpenGLTexture::height() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>height</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int height() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the height of a 2D or 3D texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#width">width</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#depth">depth</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setSize">setSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAutoMipMapGenerationEnabled">
<db:title>bool QOpenGLTexture::isAutoMipMapGenerationEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAutoMipMapGenerationEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAutoMipMapGenerationEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether auto mipmap generation is enabled for this texture object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setAutoMipMapGenerationEnabled">setAutoMipMapGenerationEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#generateMipMaps">generateMipMaps</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isBound">
<db:title>bool QOpenGLTexture::isBound() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBound</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBound() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this texture is bound to the corresponding target of the currently active texture unit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#bind">bind</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#release">release</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isBound-1">
<db:title>bool QOpenGLTexture::isBound(uint <db:emphasis>unit</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>isBound</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>unit</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBound(uint unit)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this texture is bound to the corresponding target of texture unit <db:code role="parameter">unit</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#bind">bind</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#release">release</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCreated">
<db:title>bool QOpenGLTexture::isCreated() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCreated</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCreated() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the underlying OpenGL texture object has been created.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#destroy">destroy</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#textureId">textureId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFixedSamplePositions">
<db:title>bool QOpenGLTexture::isFixedSamplePositions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFixedSamplePositions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFixedSamplePositions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this texture uses a fixed pattern of multisample samples. If storage has not yet been allocated for this texture then this function returns the requested fixed sample position setting.</db:para>
<db:para>For texture targets that do not support multisampling this will return <db:code>true</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setFixedSamplePositions">setFixedSamplePositions</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#isStorageAllocated">isStorageAllocated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isStorageAllocated">
<db:title>bool QOpenGLTexture::isStorageAllocated() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isStorageAllocated</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isStorageAllocated() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if server-side storage for this texture as been allocated.</db:para>
<db:para>The texture format, dimensions, mipmap levels and array layers cannot be altered once storage ihas been allocated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#allocateStorage">allocateStorage</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setSize">setSize</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMipLevels">setMipLevels</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setLayers">setLayers</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isTextureView">
<db:title>bool QOpenGLTexture::isTextureView() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isTextureView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isTextureView() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this texture object is actually a view onto another texture object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#createTextureView">createTextureView</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layers">
<db:title>int QOpenGLTexture::layers() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>layers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int layers() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of array layers for this texture. If storage has not yet been allocated for this texture then this function returns the requested number of array layers.</db:para>
<db:para>For texture targets that do not support array layers this will return 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setLayers">setLayers</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#isStorageAllocated">isStorageAllocated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="levelOfDetailRange">
<db:title>QPair&lt;float, float&gt; QOpenGLTexture::levelOfDetailRange() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPair&lt;float, float&gt;</db:type>
<db:methodname>levelOfDetailRange</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair&lt;float, float&gt; levelOfDetailRange() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum and maximum level of detail parameters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setLevelOfDetailRange">setLevelOfDetailRange</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#minimumLevelOfDetail">minimumLevelOfDetail</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#maximumLevelOfDetail">maximumLevelOfDetail</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="levelofDetailBias">
<db:title>float QOpenGLTexture::levelofDetailBias() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>levelofDetailBias</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float levelofDetailBias() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the level of detail bias parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setLevelofDetailBias">setLevelofDetailBias</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="magnificationFilter">
<db:title>QOpenGLTexture::Filter QOpenGLTexture::magnificationFilter() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLTexture::Filter</db:type>
<db:methodname>magnificationFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTexture::Filter magnificationFilter() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the magnification filter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setMagnificationFilter">setMagnificationFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumAnisotropy">
<db:title>float QOpenGLTexture::maximumAnisotropy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>maximumAnisotropy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float maximumAnisotropy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum level of anisotropy to be accounted for when performing texture lookups. This requires the GL_EXT_texture_filter_anisotropic extension.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setMaximumAnisotropy">setMaximumAnisotropy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumLevelOfDetail">
<db:title>float QOpenGLTexture::maximumLevelOfDetail() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>maximumLevelOfDetail</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float maximumLevelOfDetail() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum level of detail parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setMaximumLevelOfDetail">setMaximumLevelOfDetail</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#minimumLevelOfDetail">minimumLevelOfDetail</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#levelOfDetailRange">levelOfDetailRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumMipLevels">
<db:title>int QOpenGLTexture::maximumMipLevels() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maximumMipLevels</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maximumMipLevels() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum number of mipmap levels that this texture can have given the current dimensions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setMipLevels">setMipLevels</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#mipLevels">mipLevels</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setSize">setSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minMagFilters">
<db:title>QPair&lt;QOpenGLTexture::Filter, QOpenGLTexture::Filter&gt; QOpenGLTexture::minMagFilters() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPair&lt;QOpenGLTexture::Filter, QOpenGLTexture::Filter&gt;</db:type>
<db:methodname>minMagFilters</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair&lt;QOpenGLTexture::Filter, QOpenGLTexture::Filter&gt; minMagFilters() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current minification and magnification filters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setMinMagFilters">setMinMagFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minificationFilter">
<db:title>QOpenGLTexture::Filter QOpenGLTexture::minificationFilter() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLTexture::Filter</db:type>
<db:methodname>minificationFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTexture::Filter minificationFilter() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minification filter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setMinificationFilter">setMinificationFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumLevelOfDetail">
<db:title>float QOpenGLTexture::minimumLevelOfDetail() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>minimumLevelOfDetail</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float minimumLevelOfDetail() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum level of detail parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setMinimumLevelOfDetail">setMinimumLevelOfDetail</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#maximumLevelOfDetail">maximumLevelOfDetail</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#levelOfDetailRange">levelOfDetailRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mipBaseLevel">
<db:title>int QOpenGLTexture::mipBaseLevel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>mipBaseLevel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int mipBaseLevel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the mipmap base level used for all texture lookups with this texture. The default is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setMipBaseLevel">setMipBaseLevel</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#mipMaxLevel">mipMaxLevel</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#mipLevelRange">mipLevelRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mipLevelRange">
<db:title>QPair&lt;int, int&gt; QOpenGLTexture::mipLevelRange() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPair&lt;int, int&gt;</db:type>
<db:methodname>mipLevelRange</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair&lt;int, int&gt; mipLevelRange() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the range of mipmap levels that can be used for texture lookups with this texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setMipLevelRange">setMipLevelRange</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#mipBaseLevel">mipBaseLevel</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#mipMaxLevel">mipMaxLevel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mipLevels">
<db:title>int QOpenGLTexture::mipLevels() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>mipLevels</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int mipLevels() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of mipmap levels for this texture. If storage has not yet been allocated for this texture it returns the requested number of mipmap levels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setMipLevels">setMipLevels</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#maximumMipLevels">maximumMipLevels</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#isStorageAllocated">isStorageAllocated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mipMaxLevel">
<db:title>int QOpenGLTexture::mipMaxLevel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>mipMaxLevel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int mipMaxLevel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the mipmap maximum level used for all texture lookups with this texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setMipMaxLevel">setMipMaxLevel</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#mipBaseLevel">mipBaseLevel</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#mipLevelRange">mipLevelRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="release">
<db:title>void QOpenGLTexture::release()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>release</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void release()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unbinds this texture from the currently active texture unit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="release-1">
<db:title>void QOpenGLTexture::release(uint <db:emphasis>unit</db:emphasis>, QOpenGLTexture::TextureUnitReset <db:emphasis>reset</db:emphasis> = DontResetTextureUnit)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>release</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>unit</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::TextureUnitReset</db:type>
<db:parameter>reset</db:parameter>
<db:initializer>DontResetTextureUnit</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void release(uint unit, QOpenGLTexture::TextureUnitReset reset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unbinds this texture from texture unit <db:code role="parameter">unit</db:code>.</db:para>
<db:para>If parameter <db:code role="parameter">reset</db:code> is <db:code>true</db:code> then this function will restore the active unit to the texture unit that was active upon entry.</db:para>
</db:section>
<db:section xml:id="samples">
<db:title>int QOpenGLTexture::samples() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>samples</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int samples() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of multisample sample points for this texture. If storage has not yet been allocated for this texture then this function returns the requested number of samples.</db:para>
<db:para>For texture targets that do not support multisampling this will return 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setSamples">setSamples</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#isStorageAllocated">isStorageAllocated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAutoMipMapGenerationEnabled">
<db:title>void QOpenGLTexture::setAutoMipMapGenerationEnabled(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAutoMipMapGenerationEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAutoMipMapGenerationEnabled(bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enabled</db:code> is <db:code>true</db:code>, enables automatic mipmap generation for this texture object to occur whenever the level 0 mipmap data is set via <db:link xlink:href="qopengltexture.xml#setData">setData</db:link>().</db:para>
<db:para>The automatic mipmap generation is enabled by default.</db:para>
<db:note>
<db:para>Mipmap generation is not supported for compressed textures with OpenGL ES 2.0.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#isAutoMipMapGenerationEnabled">isAutoMipMapGenerationEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#generateMipMaps">generateMipMaps</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBorderColor">
<db:title>void QOpenGLTexture::setBorderColor(QColor <db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBorderColor</db:methodname>
<db:methodparam>
<db:type>QColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBorderColor(QColor color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the border color of the texture to <db:code role="parameter">color</db:code>.</db:para>
<db:note>
<db:para>This function has no effect on Mac and Qt built for OpenGL ES 2.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#borderColor">borderColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBorderColor-1">
<db:title>void QOpenGLTexture::setBorderColor(float <db:emphasis>r</db:emphasis>, float <db:emphasis>g</db:emphasis>, float <db:emphasis>b</db:emphasis>, float <db:emphasis>a</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBorderColor</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBorderColor(float r, float g, float b, float a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the color red to <db:code role="parameter">r</db:code>, green to <db:code role="parameter">g</db:code>, blue to <db:code role="parameter">b</db:code>, and <db:code role="parameter">a</db:code> to the alpha value.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setBorderColor-2">
<db:title>void QOpenGLTexture::setBorderColor(int <db:emphasis>r</db:emphasis>, int <db:emphasis>g</db:emphasis>, int <db:emphasis>b</db:emphasis>, int <db:emphasis>a</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBorderColor</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBorderColor(int r, int g, int b, int a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the color red to <db:code role="parameter">r</db:code>, green to <db:code role="parameter">g</db:code>, blue to <db:code role="parameter">b</db:code>, and the alpha value to <db:code role="parameter">a</db:code>.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setBorderColor-3">
<db:title>void QOpenGLTexture::setBorderColor(uint <db:emphasis>r</db:emphasis>, uint <db:emphasis>g</db:emphasis>, uint <db:emphasis>b</db:emphasis>, uint <db:emphasis>a</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBorderColor</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBorderColor(uint r, uint g, uint b, uint a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the color red to <db:code role="parameter">r</db:code>, green to <db:code role="parameter">g</db:code>, blue to <db:code role="parameter">b</db:code>, and the alpha value to <db:code role="parameter">a</db:code>.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setComparisonFunction">
<db:title>[since 5.5] void QOpenGLTexture::setComparisonFunction(QOpenGLTexture::ComparisonFunction <db:emphasis>function</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setComparisonFunction</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::ComparisonFunction</db:type>
<db:parameter>function</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setComparisonFunction(QOpenGLTexture::ComparisonFunction function)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the texture comparison function on this texture to <db:code role="parameter">function</db:code>. The texture comparison function is used by shadow samplers when sampling a depth texture.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#comparisonFunction">comparisonFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setComparisonMode">
<db:title>[since 5.5] void QOpenGLTexture::setComparisonMode(QOpenGLTexture::ComparisonMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setComparisonMode</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::ComparisonMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setComparisonMode(QOpenGLTexture::ComparisonMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the texture comparison mode on this texture to <db:code role="parameter">mode</db:code>. The texture comparison mode is used by shadow samplers when sampling a depth texture.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#comparisonMode">comparisonMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCompressedData">
<db:title>[since 5.3] void QOpenGLTexture::setCompressedData(int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>layer</db:emphasis>, QOpenGLTexture::CubeMapFace <db:emphasis>cubeFace</db:emphasis>, int <db:emphasis>dataSize</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCompressedData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::CubeMapFace</db:type>
<db:parameter>cubeFace</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dataSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCompressedData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Uploads compressed pixel <db:code role="parameter">data</db:code> to <db:code role="parameter">mipLevel</db:code>, array <db:code role="parameter">layer</db:code>, and <db:code role="parameter">cubeFace</db:code>. The pixel transfer can optionally be controlled with <db:code role="parameter">options</db:code>. The <db:code role="parameter">dataSize</db:code> argument should specify the size of the data pointed to by <db:code role="parameter">data</db:code>.</db:para>
<db:para>If not using a compressed <db:link xlink:href="qopengltexture.xml#format">format</db:link>() then you should use <db:link xlink:href="qopengltexture.xml#setData">setData</db:link>() instead of this function.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="setCompressedData-5">
<db:title>[since 5.9] void QOpenGLTexture::setCompressedData(int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>layer</db:emphasis>, int <db:emphasis>layerCount</db:emphasis>, QOpenGLTexture::CubeMapFace <db:emphasis>cubeFace</db:emphasis>, int <db:emphasis>dataSize</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCompressedData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layerCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::CubeMapFace</db:type>
<db:parameter>cubeFace</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dataSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCompressedData(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Parameter <db:code role="parameter">layerCount</db:code> is the number of layers in a texture array that are being uploaded/populated by this call.</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="setCompressedData-6">
<db:title>void QOpenGLTexture::setCompressedData(int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>layer</db:emphasis>, int <db:emphasis>dataSize</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCompressedData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dataSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCompressedData(int mipLevel, int layer, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setCompressedData-7">
<db:title>void QOpenGLTexture::setCompressedData(int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>dataSize</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCompressedData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dataSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCompressedData(int mipLevel, int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setCompressedData-8">
<db:title>void QOpenGLTexture::setCompressedData(int <db:emphasis>dataSize</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCompressedData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dataSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCompressedData(int dataSize, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setData">
<db:title>[since 5.3] void QOpenGLTexture::setData(int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>layer</db:emphasis>, QOpenGLTexture::CubeMapFace <db:emphasis>cubeFace</db:emphasis>, QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::CubeMapFace</db:type>
<db:parameter>cubeFace</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Uploads pixel <db:code role="parameter">data</db:code> for this texture object <db:code role="parameter">mipLevel</db:code>, array <db:code role="parameter">layer</db:code>, and <db:code role="parameter">cubeFace</db:code>. Storage must have been allocated before uploading pixel data. Some overloads of setData() will set appropriate dimensions, mipmap levels, and array layers and then allocate storage for you if they have enough information to do so. This will be noted in the function documentation.</db:para>
<db:para>The structure of the pixel data pointed to by <db:code role="parameter">data</db:code> is specified by <db:code role="parameter">sourceFormat</db:code> and <db:code role="parameter">sourceType</db:code>. The pixel data upload can optionally be controlled by <db:code role="parameter">options</db:code>.</db:para>
<db:para>If using a compressed <db:link xlink:href="qopengltexture.xml#format">format</db:link>() then you should use <db:link xlink:href="qopengltexture.xml#setCompressedData">setCompressedData</db:link>() instead of this function.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setCompressedData">setCompressedData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData-5">
<db:title>[since 5.9] void QOpenGLTexture::setData(int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>layer</db:emphasis>, int <db:emphasis>layerCount</db:emphasis>, QOpenGLTexture::CubeMapFace <db:emphasis>cubeFace</db:emphasis>, QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layerCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::CubeMapFace</db:type>
<db:parameter>cubeFace</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Parameter <db:code role="parameter">layerCount</db:code> is the number of layers in a texture array that are being uploaded/populated by this call.</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="setData-6">
<db:title>[since 5.3] void QOpenGLTexture::setData(int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>layer</db:emphasis>, QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="setData-7">
<db:title>[since 5.3] void QOpenGLTexture::setData(int <db:emphasis>mipLevel</db:emphasis>, QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="setData-8">
<db:title>[since 5.3] void QOpenGLTexture::setData(QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="setData-9">
<db:title>[since 5.14] void QOpenGLTexture::setData(int <db:emphasis>xOffset</db:emphasis>, int <db:emphasis>yOffset</db:emphasis>, int <db:emphasis>zOffset</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>depth</db:emphasis>, QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>xOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>yOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>zOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>depth</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int xOffset, int yOffset, int zOffset, int width, int height, int depth, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This overload is to be used to update a part of the texture. Parameters <db:code role="parameter">xOffset</db:code>, <db:code role="parameter">yOffset</db:code>, <db:code role="parameter">zOffset</db:code> specify the texel offsets within the texture. Parameters <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code> and <db:code role="parameter">depth</db:code> specify the dimensions of the sub image.</db:para>
<db:para>The structure of the pixel data pointed to by <db:code role="parameter">data</db:code> is specified by <db:code role="parameter">sourceFormat</db:code> and <db:code role="parameter">sourceType</db:code>. The pixel data upload can optionally be controlled by <db:code role="parameter">options</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="setData-10">
<db:title>[since 5.14] void QOpenGLTexture::setData(int <db:emphasis>xOffset</db:emphasis>, int <db:emphasis>yOffset</db:emphasis>, int <db:emphasis>zOffset</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>depth</db:emphasis>, int <db:emphasis>mipLevel</db:emphasis>, QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>xOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>yOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>zOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>depth</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This overload is to be used to update a part of the texture. Parameters <db:code role="parameter">xOffset</db:code>, <db:code role="parameter">yOffset</db:code>, <db:code role="parameter">zOffset</db:code> specify the texel offsets within the texture. Parameters <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code> and <db:code role="parameter">depth</db:code> specify the dimensions of the sub image. The mip map level the sub image we want to update is specified with <db:code role="parameter">mipLevel</db:code>.</db:para>
<db:para>The structure of the pixel data pointed to by <db:code role="parameter">data</db:code> is specified by <db:code role="parameter">sourceFormat</db:code> and <db:code role="parameter">sourceType</db:code>. The pixel data upload can optionally be controlled by <db:code role="parameter">options</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="setData-11">
<db:title>[since 5.14] void QOpenGLTexture::setData(int <db:emphasis>xOffset</db:emphasis>, int <db:emphasis>yOffset</db:emphasis>, int <db:emphasis>zOffset</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>depth</db:emphasis>, int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>layer</db:emphasis>, QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>xOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>yOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>zOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>depth</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This overload is to be used to update a part of the texture. Parameters <db:code role="parameter">xOffset</db:code>, <db:code role="parameter">yOffset</db:code>, <db:code role="parameter">zOffset</db:code> specify the texel offsets within the texture. Parameters <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code> and <db:code role="parameter">depth</db:code> specify the dimensions of the sub image. The mip map level and layerof the sub image we want to update are specified with <db:code role="parameter">mipLevel</db:code> and <db:code role="parameter">layer</db:code>.</db:para>
<db:para>The structure of the pixel data pointed to by <db:code role="parameter">data</db:code> is specified by <db:code role="parameter">sourceFormat</db:code> and <db:code role="parameter">sourceType</db:code>. The pixel data upload can optionally be controlled by <db:code role="parameter">options</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="setData-12">
<db:title>[since 5.14] void QOpenGLTexture::setData(int <db:emphasis>xOffset</db:emphasis>, int <db:emphasis>yOffset</db:emphasis>, int <db:emphasis>zOffset</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>depth</db:emphasis>, int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>layer</db:emphasis>, QOpenGLTexture::CubeMapFace <db:emphasis>face</db:emphasis>, QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>xOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>yOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>zOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>depth</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::CubeMapFace</db:type>
<db:parameter>face</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">12</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::CubeMapFace face, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This overload is to be used to update a part of the texture. Parameters <db:code role="parameter">xOffset</db:code>, <db:code role="parameter">yOffset</db:code>, <db:code role="parameter">zOffset</db:code> specify the texel offsets within the texture. Parameters <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code> and <db:code role="parameter">depth</db:code> specify the dimensions of the sub image.The mip map level, layer and cube map face of the sub image we want to update are specified with <db:code role="parameter">mipLevel</db:code>, <db:code role="parameter">layer</db:code> and <db:code role="parameter">face</db:code>.</db:para>
<db:para>The structure of the pixel data pointed to by <db:code role="parameter">data</db:code> is specified by <db:code role="parameter">sourceFormat</db:code> and <db:code role="parameter">sourceType</db:code>. The pixel data upload can optionally be controlled by <db:code role="parameter">options</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="setData-13">
<db:title>[since 5.14] void QOpenGLTexture::setData(int <db:emphasis>xOffset</db:emphasis>, int <db:emphasis>yOffset</db:emphasis>, int <db:emphasis>zOffset</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, int <db:emphasis>depth</db:emphasis>, int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>layer</db:emphasis>, QOpenGLTexture::CubeMapFace <db:emphasis>face</db:emphasis>, int <db:emphasis>layerCount</db:emphasis>, QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, const void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>xOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>yOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>zOffset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>depth</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::CubeMapFace</db:type>
<db:parameter>face</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layerCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">13</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::CubeMapFace face, int layerCount, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, const void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This overload is to be used to update a part of the texture. Parameters <db:code role="parameter">xOffset</db:code>, <db:code role="parameter">yOffset</db:code>, <db:code role="parameter">zOffset</db:code> specify the texel offsets within the texture. Parameters <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code> and <db:code role="parameter">depth</db:code> specify the dimensions of the sub image.The mip map level, starting layer, cube map face and number of layers of the sub image we want to update are specified with <db:code role="parameter">mipLevel</db:code>, <db:code role="parameter">layer</db:code>, <db:code role="parameter">face</db:code> and <db:code role="parameter">layerCount</db:code>.</db:para>
<db:para>The structure of the pixel data pointed to by <db:code role="parameter">data</db:code> is specified by <db:code role="parameter">sourceFormat</db:code> and <db:code role="parameter">sourceType</db:code>. The pixel data upload can optionally be controlled by <db:code role="parameter">options</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="setData-14">
<db:title>void QOpenGLTexture::setData(const QImage &amp;<db:emphasis>image</db:emphasis>, QOpenGLTexture::MipMapGeneration <db:emphasis>genMipMaps</db:emphasis> = GenerateMipMaps)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::MipMapGeneration</db:type>
<db:parameter>genMipMaps</db:parameter>
<db:initializer>GenerateMipMaps</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">14</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(const QImage &amp;image, QOpenGLTexture::MipMapGeneration genMipMaps)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This overload of <db:link xlink:href="qopengltexture.xml#setData">setData</db:link>() will allocate storage for you. The pixel data is contained in <db:code role="parameter">image</db:code>. Mipmaps are generated by default. Set <db:code role="parameter">genMipMaps</db:code> to <db:link xlink:href="qopengltexture.xml#MipMapGeneration-enum">DontGenerateMipMaps</db:link> to turn off mipmap generation.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setDepthStencilMode">
<db:title>[since 5.4] void QOpenGLTexture::setDepthStencilMode(QOpenGLTexture::DepthStencilMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDepthStencilMode</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::DepthStencilMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDepthStencilMode(QOpenGLTexture::DepthStencilMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If using a texture that has a combined depth/stencil format this function sets which component of the texture is accessed to <db:code role="parameter">mode</db:code>.</db:para>
<db:para>When the parameter is set to <db:link xlink:href="qopengltexture.xml#DepthStencilMode-enum">DepthMode</db:link>, then accessing it from the shader will access the depth component as a single float, as normal. But when the parameter is set to <db:link xlink:href="qopengltexture.xml#DepthStencilMode-enum">StencilMode</db:link>, the shader will access the stencil component.</db:para>
<db:note>
<db:para>This function has no effect on Mac and Qt built for OpenGL ES 2.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#depthStencilMode">depthStencilMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFixedSamplePositions">
<db:title>void QOpenGLTexture::setFixedSamplePositions(bool <db:emphasis>fixed</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFixedSamplePositions</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>fixed</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFixedSamplePositions(bool fixed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether the sample positions and number of samples used with a multisample capable texture target to <db:code role="parameter">fixed</db:code>. If set to <db:code>true</db:code> the sample positions and number of samples used are the same for all texels in the image and will not depend upon the image size or internal format. This function should be called before storage is allocated for the texture.</db:para>
<db:para>For targets that do not support multisampling this function has no effect.</db:para>
<db:para>The default value is <db:code>true</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#isFixedSamplePositions">isFixedSamplePositions</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#isStorageAllocated">isStorageAllocated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QOpenGLTexture::setFormat(QOpenGLTexture::TextureFormat <db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFormat</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::TextureFormat</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFormat(QOpenGLTexture::TextureFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the format of this texture object to <db:code role="parameter">format</db:code>. This function must be called before texture storage is allocated.</db:para>
<db:para>Note that all formats may not be supported. The exact set of supported formats is dependent upon your OpenGL implementation and version.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#format">format</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#allocateStorage">allocateStorage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLayers">
<db:title>void QOpenGLTexture::setLayers(int <db:emphasis>layers</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLayers</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layers</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLayers(int layers)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the number of array <db:code role="parameter">layers</db:code> to allocate storage for. This function should be called before storage is allocated for the texture.</db:para>
<db:para>For targets that do not support array layers this function has no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#layers">layers</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#isStorageAllocated">isStorageAllocated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLevelOfDetailRange">
<db:title>void QOpenGLTexture::setLevelOfDetailRange(float <db:emphasis>min</db:emphasis>, float <db:emphasis>max</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLevelOfDetailRange</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>min</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>max</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLevelOfDetailRange(float min, float max)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the minimum level of detail parameters to <db:code role="parameter">min</db:code> and the maximum level to <db:code role="parameter">max</db:code>.</db:para>
<db:note>
<db:para>This function has no effect on Qt built for OpenGL ES 2.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#levelOfDetailRange">levelOfDetailRange</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMinimumLevelOfDetail">setMinimumLevelOfDetail</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMaximumLevelOfDetail">setMaximumLevelOfDetail</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLevelofDetailBias">
<db:title>void QOpenGLTexture::setLevelofDetailBias(float <db:emphasis>bias</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLevelofDetailBias</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>bias</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLevelofDetailBias(float bias)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the level of detail bias to <db:code role="parameter">bias</db:code>. Level of detail bias affects the point at which mipmapping levels change. Increasing values for level of detail bias makes the overall images blurrier or smoother. Decreasing values make the overall images sharper.</db:para>
<db:note>
<db:para>This function has no effect on Qt built for OpenGL ES 2.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#levelofDetailBias">levelofDetailBias</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMagnificationFilter">
<db:title>void QOpenGLTexture::setMagnificationFilter(QOpenGLTexture::Filter <db:emphasis>filter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMagnificationFilter</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::Filter</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMagnificationFilter(QOpenGLTexture::Filter filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the magnification filter to <db:code role="parameter">filter</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#magnificationFilter">magnificationFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMinificationFilter">setMinificationFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMinMagFilters">setMinMagFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumAnisotropy">
<db:title>void QOpenGLTexture::setMaximumAnisotropy(float <db:emphasis>anisotropy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumAnisotropy</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>anisotropy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumAnisotropy(float anisotropy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If your OpenGL implementation supports the GL_EXT_texture_filter_anisotropic extension this function sets the maximum anisotropy level to <db:code role="parameter">anisotropy</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#maximumAnisotropy">maximumAnisotropy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumLevelOfDetail">
<db:title>void QOpenGLTexture::setMaximumLevelOfDetail(float <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumLevelOfDetail</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumLevelOfDetail(float value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum level of detail to <db:code role="parameter">value</db:code>. This limits the selection of lowest resolution mipmap (highest mipmap level). The default value is 1000.</db:para>
<db:note>
<db:para>This function has no effect on Qt built for OpenGL ES 2.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#maximumLevelOfDetail">maximumLevelOfDetail</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMinimumLevelOfDetail">setMinimumLevelOfDetail</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setLevelOfDetailRange">setLevelOfDetailRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMinMagFilters">
<db:title>void QOpenGLTexture::setMinMagFilters(QOpenGLTexture::Filter <db:emphasis>minificationFilter</db:emphasis>, QOpenGLTexture::Filter <db:emphasis>magnificationFilter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMinMagFilters</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::Filter</db:type>
<db:parameter>minificationFilter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::Filter</db:type>
<db:parameter>magnificationFilter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMinMagFilters(QOpenGLTexture::Filter minificationFilter, QOpenGLTexture::Filter magnificationFilter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the minification filter to <db:code role="parameter">minificationFilter</db:code> and the magnification filter to <db:code role="parameter">magnificationFilter</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#minMagFilters">minMagFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMinificationFilter">setMinificationFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMagnificationFilter">setMagnificationFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMinificationFilter">
<db:title>void QOpenGLTexture::setMinificationFilter(QOpenGLTexture::Filter <db:emphasis>filter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMinificationFilter</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::Filter</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMinificationFilter(QOpenGLTexture::Filter filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the filter used for minification to <db:code role="parameter">filter</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#minificationFilter">minificationFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMagnificationFilter">setMagnificationFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMinMagFilters">setMinMagFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMinimumLevelOfDetail">
<db:title>void QOpenGLTexture::setMinimumLevelOfDetail(float <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMinimumLevelOfDetail</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMinimumLevelOfDetail(float value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the minimum level of detail to <db:code role="parameter">value</db:code>. This limits the selection of highest resolution mipmap (lowest mipmap level). The default value is -1000.</db:para>
<db:note>
<db:para>This function has no effect on Qt built for OpenGL ES 2.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#minimumLevelOfDetail">minimumLevelOfDetail</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMaximumLevelOfDetail">setMaximumLevelOfDetail</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setLevelOfDetailRange">setLevelOfDetailRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMipBaseLevel">
<db:title>void QOpenGLTexture::setMipBaseLevel(int <db:emphasis>baseLevel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMipBaseLevel</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>baseLevel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMipBaseLevel(int baseLevel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the base mipmap level used for all texture lookups with this texture to <db:code role="parameter">baseLevel</db:code>.</db:para>
<db:note>
<db:para>This function has no effect on Qt built for OpenGL ES 2.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#mipBaseLevel">mipBaseLevel</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMipMaxLevel">setMipMaxLevel</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMipLevelRange">setMipLevelRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMipLevelRange">
<db:title>void QOpenGLTexture::setMipLevelRange(int <db:emphasis>baseLevel</db:emphasis>, int <db:emphasis>maxLevel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMipLevelRange</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>baseLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>maxLevel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMipLevelRange(int baseLevel, int maxLevel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the range of mipmap levels that can be used for texture lookups with this texture to range from <db:code role="parameter">baseLevel</db:code> to <db:code role="parameter">maxLevel</db:code>.</db:para>
<db:note>
<db:para>This function has no effect on Qt built for OpenGL ES 2.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setMipBaseLevel">setMipBaseLevel</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMipMaxLevel">setMipMaxLevel</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#mipLevelRange">mipLevelRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMipLevels">
<db:title>void QOpenGLTexture::setMipLevels(int <db:emphasis>levels</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMipLevels</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>levels</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMipLevels(int levels)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>For texture targets that support mipmaps, this function sets the requested number of mipmap <db:code role="parameter">levels</db:code> to allocate storage for. This function should be called before storage is allocated for the texture.</db:para>
<db:para>If the texture target does not support mipmaps this function has no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#mipLevels">mipLevels</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#maximumMipLevels">maximumMipLevels</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#isStorageAllocated">isStorageAllocated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMipMaxLevel">
<db:title>void QOpenGLTexture::setMipMaxLevel(int <db:emphasis>maxLevel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMipMaxLevel</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>maxLevel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMipMaxLevel(int maxLevel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum mipmap level used for all texture lookups with this texture to <db:code role="parameter">maxLevel</db:code>.</db:para>
<db:note>
<db:para>This function has no effect on Qt built for OpenGL ES 2.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#mipMaxLevel">mipMaxLevel</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMipBaseLevel">setMipBaseLevel</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setMipLevelRange">setMipLevelRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSamples">
<db:title>void QOpenGLTexture::setSamples(int <db:emphasis>samples</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSamples</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>samples</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSamples(int samples)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the number of <db:code role="parameter">samples</db:code> to allocate storage for when rendering to a multisample capable texture target. This function should be called before storage is allocated for the texture.</db:para>
<db:para>For targets that do not support multisampling this function has no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#samples">samples</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#isStorageAllocated">isStorageAllocated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSize">
<db:title>void QOpenGLTexture::setSize(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis> = 1, int <db:emphasis>depth</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>depth</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSize(int width, int height, int depth)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the dimensions of this texture object to <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>, and <db:code role="parameter">depth</db:code>. The default for each dimension is 1. The maximum allowable texture size is dependent upon your OpenGL implementation. Allocating storage for a texture less than the maximum size can still fail if your system is low on resources.</db:para>
<db:para>If a non-power-of-two <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code> or <db:code role="parameter">depth</db:code> is provided and your OpenGL implementation doesn't have support for repeating non-power-of-two textures, then the wrap mode is automatically set to <db:link xlink:href="qopengltexture.xml#WrapMode-enum">ClampToEdge</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#width">width</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#depth">depth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSwizzleMask">
<db:title>void QOpenGLTexture::setSwizzleMask(QOpenGLTexture::SwizzleComponent <db:emphasis>component</db:emphasis>, QOpenGLTexture::SwizzleValue <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSwizzleMask</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::SwizzleComponent</db:type>
<db:parameter>component</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::SwizzleValue</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSwizzleMask(QOpenGLTexture::SwizzleComponent component, QOpenGLTexture::SwizzleValue value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>GLSL shaders are able to reorder the components of the vec4 returned by texture functions. It is also desirable to be able to control this reordering from CPU side code. This is made possible by swizzle masks since OpenGL 3.3.</db:para>
<db:para>Each component of the texture can be mapped to one of the <db:link xlink:href="qopengltexture.xml#SwizzleValue-enum">SwizzleValue</db:link> options.</db:para>
<db:para>This function maps <db:code role="parameter">component</db:code> to the output <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>This function has no effect on Mac and Qt built for OpenGL ES 2.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#swizzleMask">swizzleMask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSwizzleMask-1">
<db:title>void QOpenGLTexture::setSwizzleMask(QOpenGLTexture::SwizzleValue <db:emphasis>r</db:emphasis>, QOpenGLTexture::SwizzleValue <db:emphasis>g</db:emphasis>, QOpenGLTexture::SwizzleValue <db:emphasis>b</db:emphasis>, QOpenGLTexture::SwizzleValue <db:emphasis>a</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSwizzleMask</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::SwizzleValue</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::SwizzleValue</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::SwizzleValue</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::SwizzleValue</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSwizzleMask(QOpenGLTexture::SwizzleValue r, QOpenGLTexture::SwizzleValue g, QOpenGLTexture::SwizzleValue b, QOpenGLTexture::SwizzleValue a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Parameters <db:code role="parameter">r</db:code>, <db:code role="parameter">g</db:code>, <db:code role="parameter">b</db:code>, and <db:code role="parameter">a</db:code> are values used for setting the colors red, green, blue, and the alpha value.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setWrapMode">
<db:title>void QOpenGLTexture::setWrapMode(QOpenGLTexture::WrapMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWrapMode</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::WrapMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWrapMode(QOpenGLTexture::WrapMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the wrap (or repeat mode) for all texture dimentions to <db:code role="parameter">mode</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#wrapMode">wrapMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWrapMode-1">
<db:title>void QOpenGLTexture::setWrapMode(QOpenGLTexture::CoordinateDirection <db:emphasis>direction</db:emphasis>, QOpenGLTexture::WrapMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWrapMode</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::CoordinateDirection</db:type>
<db:parameter>direction</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::WrapMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWrapMode(QOpenGLTexture::CoordinateDirection direction, QOpenGLTexture::WrapMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Holds the texture dimension <db:code role="parameter">direction</db:code>.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="swizzleMask">
<db:title>QOpenGLTexture::SwizzleValue QOpenGLTexture::swizzleMask(QOpenGLTexture::SwizzleComponent <db:emphasis>component</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLTexture::SwizzleValue</db:type>
<db:methodname>swizzleMask</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::SwizzleComponent</db:type>
<db:parameter>component</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTexture::SwizzleValue swizzleMask(QOpenGLTexture::SwizzleComponent component) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the swizzle mask for texture <db:code role="parameter">component</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setSwizzleMask">setSwizzleMask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="target">
<db:title>[since 5.4] QOpenGLTexture::Target QOpenGLTexture::target() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLTexture::Target</db:type>
<db:methodname>target</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTexture::Target target() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the binding target of this texture.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="textureId">
<db:title>GLuint QOpenGLTexture::textureId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLuint</db:type>
<db:methodname>textureId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint textureId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the underlying OpenGL texture object or 0 if it has not yet been created.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#destroy">destroy</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#isCreated">isCreated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width">
<db:title>int QOpenGLTexture::width() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>width</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int width() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of a 1D, 2D or 3D texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#depth">depth</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltexture.xml#setSize">setSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wrapMode">
<db:title>QOpenGLTexture::WrapMode QOpenGLTexture::wrapMode(QOpenGLTexture::CoordinateDirection <db:emphasis>direction</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLTexture::WrapMode</db:type>
<db:methodname>wrapMode</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::CoordinateDirection</db:type>
<db:parameter>direction</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTexture::WrapMode wrapMode(QOpenGLTexture::CoordinateDirection direction) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the wrap mode for the texture dimension <db:code role="parameter">direction</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setWrapMode">setWrapMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QOpenGLTexture</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qopengltexture.xml">QOpenGLTexture</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="setCompressedData-1">
<db:title>void QOpenGLTexture::setCompressedData(int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>layer</db:emphasis>, QOpenGLTexture::CubeMapFace <db:emphasis>cubeFace</db:emphasis>, int <db:emphasis>dataSize</db:emphasis>, void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCompressedData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::CubeMapFace</db:type>
<db:parameter>cubeFace</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dataSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCompressedData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setCompressedData-2">
<db:title>void QOpenGLTexture::setCompressedData(int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>layer</db:emphasis>, int <db:emphasis>dataSize</db:emphasis>, void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCompressedData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dataSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCompressedData(int mipLevel, int layer, int dataSize, void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setCompressedData-3">
<db:title>void QOpenGLTexture::setCompressedData(int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>dataSize</db:emphasis>, void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCompressedData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dataSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCompressedData(int mipLevel, int dataSize, void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setCompressedData-4">
<db:title>void QOpenGLTexture::setCompressedData(int <db:emphasis>dataSize</db:emphasis>, void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCompressedData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dataSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCompressedData(int dataSize, void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setData-1">
<db:title>void QOpenGLTexture::setData(int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>layer</db:emphasis>, QOpenGLTexture::CubeMapFace <db:emphasis>cubeFace</db:emphasis>, QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::CubeMapFace</db:type>
<db:parameter>cubeFace</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltexture.xml#setCompressedData">setCompressedData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData-2">
<db:title>void QOpenGLTexture::setData(int <db:emphasis>mipLevel</db:emphasis>, int <db:emphasis>layer</db:emphasis>, QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>layer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setData-3">
<db:title>void QOpenGLTexture::setData(int <db:emphasis>mipLevel</db:emphasis>, QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mipLevel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setData-4">
<db:title>void QOpenGLTexture::setData(QOpenGLTexture::PixelFormat <db:emphasis>sourceFormat</db:emphasis>, QOpenGLTexture::PixelType <db:emphasis>sourceType</db:emphasis>, void *<db:emphasis>data</db:emphasis>, const QOpenGLPixelTransferOptions *const <db:emphasis>options</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>QOpenGLTexture::PixelFormat</db:type>
<db:parameter>sourceFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLTexture::PixelType</db:type>
<db:parameter>sourceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLPixelTransferOptions *const</db:type>
<db:parameter>options</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void setData(QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, const QOpenGLPixelTransferOptions *const options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
