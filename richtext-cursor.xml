<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The QTextCursor Interface</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="richtext-structure.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Rich Text Document Structure"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="richtext-layouts.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Document Layouts"/></db:extendedlink>
<db:abstract>
<db:para>Qt GUI Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Documents can be edited via the interface provided by the <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> class; cursors are either created using a constructor or obtained from an editor widget. The cursor is used to perform editing operations that correspond exactly to those the user is able to make themselves in an editor. As a result, information about the document structure is also available through the cursor, and this allows the structure to be modified. The use of a cursor-oriented interface for editing makes the process of writing a custom editor simpler for developers, since the editing operations can be easily visualized.</db:para>
<db:para>The <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> class also maintains information about any text it has selected in the document, again following a model that is conceptually similar to the actions made by the user to select text in an editor.</db:para>
<db:para>Rich text documents can have multiple cursors associated with them, and each of these contains information about their position in the document and any selections that they may hold. This cursor-based paradigm makes common operations, such as cutting and pasting text, simple to implement programmatically, yet it also allows more complex editing operations to be performed on the document.</db:para>
<db:para>This chapter describes most of the common editing operations that you will need to perform using a cursor, from basic insertion of text and document elements to more complex manipulation of document structures.</db:para>
<db:section xml:id="cursor-based-editing">
<db:title>Cursor-Based Editing</db:title>
<db:para>At the simplest level, text documents are made up of a string of characters, marked up in some way to represent the block structure of the text within the document. <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> provides a cursor-based interface that allows the contents of a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> to be manipulated at the character level. Since the elements (blocks, frames, tables, etc.) are also encoded in the character stream, the document structure can itself be changed by the cursor.</db:para>
<db:para>The cursor keeps track of its location within its parent document, and can report information about the surrounding structure, such as the enclosing text block, frame, table, or list. The formats of the enclosing structures can also be directly obtained through the cursor.</db:para>
<db:section xml:id="using-a-cursor">
<db:title>Using a Cursor</db:title>
<db:para>The main use of a cursor is to insert or modify text within a block. We can use a text editor's cursor to do this:</db:para>
<db:programlisting language="cpp">    QTextEdit *editor = new QTextEdit();
    QTextCursor cursor(editor-&gt;textCursor());
</db:programlisting>
<db:para>Alternatively, we can obtain a cursor directly from a document:</db:para>
<db:programlisting language="cpp">    QTextDocument *document = new QTextDocument(editor);
    QTextCursor cursor(document);
</db:programlisting>
<db:para>The cursor is positioned at the start of the document so that we can write into the first (empty) block in the document.</db:para>
</db:section>
<db:section xml:id="grouping-cursor-operations">
<db:title>Grouping Cursor Operations</db:title>
<db:para>A series of editing operations can be packaged together so that they can be replayed, or undone together in a single action. This is achieved by using the <db:code>beginEditBlock()</db:code> and <db:code>endEditBlock()</db:code> functions in the following way, as in the following example where we select the word that contains the cursor:</db:para>
<db:programlisting language="cpp">    cursor.beginEditBlock();
    cursor.movePosition(QTextCursor::StartOfWord);
    cursor.movePosition(QTextCursor::EndOfWord, QTextCursor::KeepAnchor);
    cursor.endEditBlock();
</db:programlisting>
<db:para>If editing operations are not grouped, the document automatically records the individual operations so that they can be undone later. Grouping operations into larger packages can make editing more efficient both for the user and for the application, but care has to be taken not to group too many operations together as the user may want find-grained control over the undo process.</db:para>
</db:section>
<db:section xml:id="multiple-cursors">
<db:title>Multiple Cursors</db:title>
<db:para>Multiple cursors can be used to simultaneously edit the same document, although only one will be visible to the user in a QTextEdit widget. The <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> ensures that each cursor writes text correctly and does not interfere with any of the others.</db:para>
</db:section>
</db:section>
<db:section xml:id="inserting-document-elements">
<db:title>Inserting Document Elements</db:title>
<db:para><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> provides several functions that can be used to change the structure of a rich text document. Generally, these functions allow document elements to be created with relevant formatting information, and they are inserted into the document at the cursor's position.</db:para>
<db:para>The first group of functions insert block-level elements, and update the cursor position, but they do not return the element that was inserted:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtextcursor.xml#insertBlock">insertBlock</db:link>() inserts a new text block (paragraph) into a document at the cursor's position, and moves the cursor to the start of the new block.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtextcursor.xml#insertFragment">insertFragment</db:link>() inserts an existing text fragment into a document at the cursor's position.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtextcursor.xml#insertImage">insertImage</db:link>() inserts an image into a document at the cursor's position.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtextcursor.xml#insertText">insertText</db:link>() inserts text into the document at the cursor's position.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You can examine the contents of the element that was inserted through the cursor interface.</db:para>
<db:para>The second group of functions insert elements that provide structure to the document, and return the structure that was inserted:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtextcursor.xml#insertFrame">insertFrame</db:link>() inserts a frame into the document <db:emphasis>after</db:emphasis> the cursor's current block, and moves the cursor to the start of the empty block in the new frame.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtextcursor.xml#insertList">insertList</db:link>() inserts a list into the document at the cursor's position, and moves the cursor to the start of the first item in the list.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtextcursor.xml#insertTable">insertTable</db:link>() inserts a table into the document <db:emphasis>after</db:emphasis> the cursor's current block, and moves the cursor to the start of the block following the table.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>These elements either contain or group together other elements in the document.</db:para>
<db:section xml:id="text-and-text-fragments">
<db:title>Text and Text Fragments</db:title>
<db:para>Text can be inserted into the current block in the current character format, or in a custom format that is specified with the text:</db:para>
<db:programlisting language="cpp">    cursor.insertText(tr(&quot;Character formats&quot;),
                      headingFormat);

    cursor.insertBlock();

    cursor.insertText(tr(&quot;Text can be displayed in a variety of &quot;
                                  &quot;different character formats. &quot;), plainFormat);
    cursor.insertText(tr(&quot;We can emphasize text by &quot;));
    cursor.insertText(tr(&quot;making it italic&quot;), emphasisFormat);
</db:programlisting>
<db:para>Once the character format has been used with a cursor, that format becomes the default format for any text inserted with that cursor until another character format is specified.</db:para>
<db:para>If a cursor is used to insert text without specifying a character format, the text will be given the character format used at that position in the document.</db:para>
</db:section>
<db:section xml:id="blocks">
<db:title>Blocks</db:title>
<db:para>Text blocks are inserted into the document with the <db:link xlink:href="qtextcursor.xml#insertBlock">insertBlock</db:link>() function.</db:para>
<db:programlisting language="cpp">    QTextBlockFormat backgroundFormat = blockFormat;
    backgroundFormat.setBackground(QColor(&quot;lightGray&quot;));

    cursor.setBlockFormat(backgroundFormat);
</db:programlisting>
<db:para>The cursor is positioned at the start of the new block.</db:para>
</db:section>
<db:section xml:id="frames">
<db:title>Frames</db:title>
<db:para>Frames are inserted into a document using the cursor, and will be placed within the cursor's current frame <db:emphasis>after</db:emphasis> the current block. The following code shows how a frame can be inserted between two text blocks in a document's root frame. We begin by finding the cursor's current frame:</db:para>
<db:programlisting language="cpp">    QTextFrame *mainFrame = cursor.currentFrame();
    cursor.insertText(...);
</db:programlisting>
<db:para>We insert some text in this frame then set up a frame format for the child frame:</db:para>
<db:programlisting language="cpp">    QTextFrameFormat frameFormat;
    frameFormat.setMargin(32);
    frameFormat.setPadding(8);
    frameFormat.setBorder(4);
</db:programlisting>
<db:para>The frame format will give the frame an external margin of 32 pixels, internal padding of 8 pixels, and a border that is 4 pixels wide. See the <db:link xlink:href="qtextframeformat.xml">QTextFrameFormat</db:link> documentation for more information about frame formats.</db:para>
<db:para>The frame is inserted into the document after the preceding text:</db:para>
<db:programlisting language="cpp">    cursor.insertFrame(frameFormat);
    cursor.insertText(...);
</db:programlisting>
<db:para>We add some text to the document immediately after we insert the frame. Since the text cursor is positioned <db:emphasis>inside the frame</db:emphasis> when it is inserted into the document, this text will also be inserted inside the frame.</db:para>
<db:para>Finally, we position the cursor outside the frame by taking the last available cursor position inside the frame we recorded earlier:</db:para>
<db:programlisting language="cpp">    cursor = mainFrame-&gt;lastCursorPosition();
    cursor.insertText(...);
</db:programlisting>
<db:para>The text that we add last is inserted after the child frame in the document. Since each frame is padded with text blocks, this ensures that more elements can always be inserted with a cursor.</db:para>
</db:section>
<db:section xml:id="tables">
<db:title>Tables</db:title>
<db:para>Tables are inserted into the document using the cursor, and will be placed within the cursor's current frame <db:emphasis>after</db:emphasis> the current block:</db:para>
<db:programlisting language="cpp">    QTextCursor cursor(editor-&gt;textCursor());
    QTextTable *table = cursor.insertTable(rows, columns, tableFormat);
</db:programlisting>
<db:para>Tables can be created with a specific format that defines the overall properties of the table, such as its alignment, background color, and the cell spacing used. It can also determine the constraints on each column, allowing each of them to have a fixed width, or resize according to the available space.</db:para>
<db:programlisting language="cpp">    QTextTableFormat tableFormat;
    tableFormat.setBackground(QColor(&quot;#e0e0e0&quot;));
    QList&lt;QTextLength&gt; constraints;
    constraints &lt;&lt; QTextLength(QTextLength::PercentageLength, 16);
    constraints &lt;&lt; QTextLength(QTextLength::PercentageLength, 28);
    constraints &lt;&lt; QTextLength(QTextLength::PercentageLength, 28);
    constraints &lt;&lt; QTextLength(QTextLength::PercentageLength, 28);
    tableFormat.setColumnWidthConstraints(constraints);
    QTextTable *table = cursor.insertTable(rows, columns, tableFormat);
</db:programlisting>
<db:para>The columns in the table created above will each take up a certain percentage of the available width. Note that the table format is optional; if you insert a table without a format, some sensible default values will be used for the table's properties.</db:para>
<db:para>Since cells can contain other document elements, they too can be formatted and styled as necessary.</db:para>
<db:para>Text can be added to the table by navigating to each cell with the cursor and inserting text.</db:para>
<db:programlisting language="cpp">    cell = table-&gt;cellAt(0, 0);
    cellCursor = cell.firstCursorPosition();
    cellCursor.insertText(tr(&quot;Week&quot;), charFormat);
</db:programlisting>
<db:para>We can create a simple timetable by following this approach:</db:para>
<db:programlisting language="cpp">    for (column = 1; column &lt; columns; ++column) {
        cell = table-&gt;cellAt(0, column);
        cellCursor = cell.firstCursorPosition();
        cellCursor.insertText(tr(&quot;Team %1&quot;).arg(column), charFormat);
    }

    for (row = 1; row &lt; rows; ++row) {
        cell = table-&gt;cellAt(row, 0);
        cellCursor = cell.firstCursorPosition();
        cellCursor.insertText(tr(&quot;%1&quot;).arg(row), charFormat);

        for (column = 1; column &lt; columns; ++column) {
            if ((row-1) % 3 == column-1) {
                cell = table-&gt;cellAt(row, column);
                QTextCursor cellCursor = cell.firstCursorPosition();
                cellCursor.insertText(tr(&quot;On duty&quot;), charFormat);
            }
        }
    }
</db:programlisting>
</db:section>
<db:section xml:id="lists">
<db:title>Lists</db:title>
<db:para>Lists of block elements can be automatically created and inserted into the document at the current cursor position. Each list that is created in this way requires a list format to be specified:</db:para>
<db:programlisting language="cpp">    QTextListFormat listFormat;
    if (list) {
        listFormat = list-&gt;format();
        listFormat.setIndent(listFormat.indent() + 1);
    }

    listFormat.setStyle(QTextListFormat::ListDisc);
    cursor.insertList(listFormat);
</db:programlisting>
<db:para>The above code first checks whether the cursor is within an existing list and, if so, gives the list format for the new list a suitable level of indentation. This allows nested lists to be created with increasing levels of indentation. A more sophisticated implementation would also use different kinds of symbol for the bullet points in each level of the list.</db:para>
</db:section>
<db:section xml:id="images">
<db:title>Images</db:title>
<db:para>Inline images are added to documents through the cursor in the usual manner. Unlike many other elements, all of the image properties are specified by the image's format. This means that a <db:link xlink:href="qtextimageformat.xml">QTextImageFormat</db:link> object has to be created before an image can be inserted:</db:para>
<db:programlisting language="cpp">    QTextImageFormat imageFormat;
    imageFormat.setName(&quot;:/images/advert.png&quot;);
    cursor.insertImage(imageFormat);
</db:programlisting>
<db:para>The image name refers to an entry in the application's resource file. The method used to derive this name is described in <db:link xlink:href="resources.xml">The Qt Resource System</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>Rich text is stored in text documents that can either be created by importing HTML from an external source, or generated using a <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link>.</db:para>
<db:section xml:id="manipulating-rich-text">
<db:title>Manipulating Rich Text</db:title>
<db:para>The easiest way to use a rich text document is through the QTextEdit class, providing an editable view onto a document. The code below imports HTML into a document, and displays the document using a text edit widget.</db:para>
<db:programlisting language="cpp">QTextEdit *editor = new QTextEdit(parent);
editor-&gt;setHtml(aStringContainingHTMLtext);
editor-&gt;show();
</db:programlisting>
<db:para>You can retrieve the document from the text edit using the document() function. The document can then be edited programmatically using the <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> class. This class is modeled after a screen cursor, and editing operations follow the same semantics. The following code changes the first line of the document to a bold font, leaving all other font properties untouched. The editor will be automatically updated to reflect the changes made to the underlying document data.</db:para>
<db:programlisting language="cpp">QTextDocument *document = edit-&gt;document();
QTextCursor cursor(document);

cursor.movePosition(QTextCursor::Start);
cursor.movePosition(QTextCursor::EndOfLine, QTextCursor::KeepAnchor);

QTextCharFormat format;
format.setFontWeight(QFont::Bold);

cursor.mergeCharFormat(format);
</db:programlisting>
<db:para>Note that the cursor was moved from the start of the first line to the end, but that it retained an anchor at the start of the line. This demonstrates the cursor-based selection facilities of the <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> class.</db:para>
</db:section>
<db:section xml:id="generating-a-calendar">
<db:title>Generating a Calendar</db:title>
<db:para>Rich text can be generated very quickly using the cursor-based approach. The following example shows a simple calendar in a QTextEdit widget with bold headers for the days of the week:</db:para>
<db:programlisting language="cpp">    editor = new QTextEdit(this);

    QTextCursor cursor(editor-&gt;textCursor());
    cursor.movePosition(QTextCursor::Start);

    QTextCharFormat format(cursor.charFormat());
    format.setFontFamily(&quot;Courier&quot;);

    QTextCharFormat boldFormat = format;
    boldFormat.setFontWeight(QFont::Bold);

    cursor.insertBlock();
    cursor.insertText(&quot; &quot;, boldFormat);

    QDate date = QDate::currentDate();
    int year = date.year(), month = date.month();

    for (int weekDay = 1; weekDay &lt;= 7; ++weekDay) {
        cursor.insertText(QString(&quot;%1 &quot;).arg(QLocale::system().dayName(weekDay), 3),
            boldFormat);
    }

    cursor.insertBlock();
    cursor.insertText(&quot; &quot;, format);

    for (int column = 1; column &lt; QDate(year, month, 1).dayOfWeek(); ++column) {
        cursor.insertText(&quot;    &quot;, format);
    }

    for (int day = 1; day &lt;= date.daysInMonth(); ++day) {
        int weekDay = QDate(year, month, day).dayOfWeek();

        if (QDate(year, month, day) == date)
            cursor.insertText(QString(&quot;%1 &quot;).arg(day, 3), boldFormat);
        else
            cursor.insertText(QString(&quot;%1 &quot;).arg(day, 3), format);

        if (weekDay == 7) {
            cursor.insertBlock();
            cursor.insertText(&quot; &quot;, format);
        }
    }
</db:programlisting>
<db:para>The above example demonstrates how simple it is to quickly generate new rich text documents using a minimum amount of code. Although we have generated a crude fixed-pitch calendar to avoid quoting too much code, Scribe provides much more sophisticated layout and formatting features.</db:para>
</db:section>
</db:section>
</db:article>
