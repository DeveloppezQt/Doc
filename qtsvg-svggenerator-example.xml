<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SVG Generator Example</db:title>
<db:productname>QtSvg</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt SVG Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt SVG Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The SVG Generator example shows how to add SVG file export to applications.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/svggenerator-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Scalable Vector Graphics (SVG) is an XML-based language for describing two-dimensional vector graphics. Qt provides classes for rendering and generating SVG drawings. This example allows the user to create a simple picture and save it to an SVG file.</db:para>
<db:para>The example consists of two classes: <db:code>Window</db:code> and <db:code>DisplayWidget</db:code>.</db:para>
<db:para>The <db:code>Window</db:code> class contains the application logic and constructs the user interface from a Qt Designer UI file as described in the <db:link xlink:href="designer-using-a-ui-file.xml#the-multiple-inheritance-approach">Qt Designer manual</db:link>. It also contains the code to write an SVG file.</db:para>
<db:para>The <db:code>DisplayWidget</db:code> class performs all the work of painting a picture on screen. Since we want the SVG to resemble this picture as closely as possible, we make this code available to the <db:code>Window</db:code> class so that it can be used to generate SVG files.</db:para>
<db:section xml:id="the-displaywidget-class">
<db:title>The DisplayWidget Class</db:title>
<db:para>The <db:code>DisplayWidget</db:code> class displays a drawing consisting of a selection of elements chosen by the user. These are defined using <db:code>Shape</db:code> and <db:code>Background</db:code> enums that are included within the class definition:</db:para>
<db:programlisting language="cpp">class DisplayWidget : public QWidget
{
    Q_OBJECT

public:
    enum Shape { House = 0, Car = 1 };
    enum Background { Sky = 0, Trees = 1, Road = 2 };

    DisplayWidget(QWidget *parent = 0);
    QColor color() const;
    void paint(QPainter &amp;amp;painter);

public slots:
    void setBackground(Background background);
    void setColor(const QColor &amp;amp;color);
    void setShape(Shape shape);

protected:
    void paintEvent(QPaintEvent *event) override;

private:
    Background background;
    QColor shapeColor;
    Shape shape;
    QHash&amp;lt;Shape,QPainterPath&amp;gt; shapeMap;
    QPainterPath moon;
    QPainterPath tree;
};
</db:programlisting>
<db:para>Much of this class is used to configure the appearance of the drawing. The <db:code>paintEvent()</db:code> and <db:code>paint()</db:code> functions are most relevant to the purpose of this example, so we will describe these here and leave the reader to look at the source code for the example to see how shapes and colors are handled.</db:para>
<db:para>We reimplement the QWidget::paintEvent() function to display the drawing on screen:</db:para>
<db:programlisting language="cpp">void DisplayWidget::paintEvent(QPaintEvent * /* event */)
{
    QPainter painter;
    painter.begin(this);
    painter.setRenderHint(QPainter::Antialiasing);
    paint(painter);
    painter.end();
}
</db:programlisting>
<db:para>Here, we only construct a QPainter object, begin painting on the device and set a render hint for improved output quality before calling the <db:code>paint()</db:code> function to perform the painting itself. When this returns, we close the painter and return.</db:para>
<db:para>The <db:code>paint()</db:code> function is designed to be used for different painting tasks. In this example, we use it to draw on a <db:code>DisplayWidget</db:code> instance and on a QSvgGenerator object. We show how the painting is performed to demonstrate that there is nothing device-specific about the process:</db:para>
<db:programlisting language="cpp">void DisplayWidget::paint(QPainter &amp;amp;painter)
{
    painter.setClipRect(QRect(0, 0, 200, 200));
    painter.setPen(Qt::NoPen);

    switch (background) {
    case Sky:
    default:
        painter.fillRect(QRect(0, 0, 200, 200), Qt::darkBlue);
        painter.translate(145, 10);
        painter.setBrush(Qt::white);
        painter.drawPath(moon);
        painter.translate(-145, -10);
        break;
    case Trees:
    {
        painter.fillRect(QRect(0, 0, 200, 200), Qt::darkGreen);
        painter.setBrush(Qt::green);
        painter.setPen(Qt::black);
        for (int y = -55, row = 0; y &amp;lt; 200; y += 50, ++row) {
            int xs;
            if (row == 2 || row == 3)
                xs = 150;
            else
                xs = 50;
            for (int x = 0; x &amp;lt; 200; x += xs) {
                painter.save();
                painter.translate(x, y);
                painter.drawPath(tree);
                painter.restore();
            }
        }
        break;
    }
    case Road:
        painter.fillRect(QRect(0, 0, 200, 200), Qt::gray);
        painter.setPen(QPen(Qt::white, 4, Qt::DashLine));
        painter.drawLine(QLine(0, 35, 200, 35));
        painter.drawLine(QLine(0, 165, 200, 165));
        break;
    }

    painter.setBrush(shapeColor);
    painter.setPen(Qt::black);
    painter.translate(100, 100);
    painter.drawPath(shapeMap[shape]);
}
</db:programlisting>
</db:section>
<db:section xml:id="the-window-class">
<db:title>The Window Class</db:title>
<db:para>The <db:code>Window</db:code> class represents the example's window, containing the user interface, which has been created using Qt Designer:</db:para>
<db:programlisting language="cpp">class Window : public QWidget, private Ui::Window
{
    Q_OBJECT

public:
    Window(QWidget *parent = 0);

public slots:
    void saveSvg();
    void updateBackground(int background);
    void updateColor();
    void updateShape(int shape);

private:
    QString path;
};
</db:programlisting>
<db:para>As with the <db:code>DisplayWidget</db:code> class, we concentrate on the parts of the code which are concerned with painting and SVG generation. In the <db:code>Window</db:code> class, the <db:code>saveSvg()</db:code> function is called whenever the <db:emphasis role="bold">Save As...</db:emphasis> button is clicked; this connection was defined in the <db:code>window.ui</db:code> file using Qt Designer.</db:para>
<db:para>The start of the <db:code>saveSvg()</db:code> function performs the task of showing a file dialog so that the user can specify a SVG file to save the drawing to.</db:para>
<db:programlisting language="cpp">void Window::saveSvg()
{
    QString newPath = QFileDialog::getSaveFileName(this, tr(&quot;Save SVG&quot;),
        path, tr(&quot;SVG files (*.svg)&quot;));

    if (newPath.isEmpty())
        return;

    path = newPath;

    QSvgGenerator generator;
    generator.setFileName(path);
    generator.setSize(QSize(200, 200));
    generator.setViewBox(QRect(0, 0, 200, 200));
    generator.setTitle(tr(&quot;SVG Generator Example Drawing&quot;));
    generator.setDescription(tr(&quot;An SVG drawing created by the SVG Generator &quot;
                                &quot;Example provided with Qt.&quot;));
    QPainter painter;
    painter.begin(&amp;amp;generator);
    displayWidget-&amp;gt;paint(painter);
    painter.end();
}
</db:programlisting>
<db:para>In the rest of the function, we set up the generator and configure it to generate output with the appropriate dimensions and write to the user-specified file. We paint on the QSvgGenerator object in the same way that we paint on a widget, calling the <db:code>DisplayWidget::paint()</db:code> function so that we use exactly the same code that we used to display the drawing.</db:para>
<db:para>The generation process itself begins with the call to the painter's <db:link xlink:href="">begin()</db:link> function and ends with call to its <db:link xlink:href="">end()</db:link> function. The QSvgGenerator paint device relies on the explicit use of these functions to ensure that output is written to the file.</db:para>
</db:section>
<db:section xml:id="further-reading">
<db:title>Further Reading</db:title>
<db:para>The <db:link xlink:href="qtsvg-svgviewer-example.xml">SVG Viewer Example</db:link> shows how to display SVG drawings in an application, and can be used to show the contents of SVG files created by this example.</db:para>
<db:para>See the Qt SVG module documentation for more information about SVG and Qt's SVG classes.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtsvg.git/tree/examples/svg/svggenerator?h=5.14">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
