<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QTextDocumentFragment Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextdocumentfragment.xml">QTextDocumentFragment</db:link> class represents a piece of formatted text from a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextDocumentFragment</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextDocumentFragment is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qtextdocumentfragment.xml">QTextDocumentFragment</db:link> is a fragment of rich text, that can be inserted into a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>. A document fragment can be created from a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>, from a <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link>'s selection, or from another document fragment. Document fragments can also be created by the static functions, <db:link xlink:href="qtextdocumentfragment.xml#fromPlainText">fromPlainText</db:link>() and <db:link xlink:href="qtextdocumentfragment.xml#fromHtml">fromHtml</db:link>().</db:para>
<db:para>The contents of a document fragment can be obtained as plain text by using the <db:link xlink:href="qtextdocumentfragment.xml#toPlainText">toPlainText</db:link>() function, or it can be obtained as HTML with <db:link xlink:href="qtextdocumentfragment.xml#toHtml">toHtml</db:link>().</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextDocumentFragment">
<db:title>QTextDocumentFragment::QTextDocumentFragment()</db:title>
<db:para>Constructs an empty <db:link xlink:href="qtextdocumentfragment.xml">QTextDocumentFragment</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentfragment.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTextDocumentFragment-1">
<db:title>[explicit] QTextDocumentFragment::QTextDocumentFragment(const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="qtextdocumentfragment.xml">QTextDocumentFragment</db:link> from the <db:code role="parameter">cursor</db:code>'s selection. If the cursor doesn't have a selection, the created fragment is empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentfragment.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#selection">QTextCursor::selection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTextDocumentFragment-2">
<db:title>[explicit] QTextDocumentFragment::QTextDocumentFragment(const QTextDocument *<db:emphasis>document</db:emphasis>)</db:title>
<db:para>Converts the given <db:code role="parameter">document</db:code> into a <db:link xlink:href="qtextdocumentfragment.xml">QTextDocumentFragment</db:link>. Note that the <db:link xlink:href="qtextdocumentfragment.xml">QTextDocumentFragment</db:link> only stores the document contents, not meta information like the document's title.</db:para>
</db:section>
<db:section xml:id="QTextDocumentFragment-3">
<db:title>QTextDocumentFragment::QTextDocumentFragment(const QTextDocumentFragment &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copy constructor. Creates a copy of the <db:code role="parameter">other</db:code> fragment.</db:para>
</db:section>
<db:section xml:id="dtor.QTextDocumentFragment">
<db:title>[noexcept] QTextDocumentFragment::~QTextDocumentFragment()</db:title>
<db:para>Destroys the document fragment.</db:para>
</db:section>
<db:section xml:id="fromHtml">
<db:title>[static] QTextDocumentFragment QTextDocumentFragment::fromHtml(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qtextdocumentfragment.xml">QTextDocumentFragment</db:link> based on the arbitrary piece of HTML in the given <db:code role="parameter">text</db:code>. The formatting is preserved as much as possible; for example, &quot;&lt;b&gt;bold&lt;/b&gt;&quot; will become a document fragment with the text &quot;bold&quot; with a bold character format.</db:para>
</db:section>
<db:section xml:id="fromHtml-1">
<db:title>[static, since 4.2] QTextDocumentFragment QTextDocumentFragment::fromHtml(const QString &amp;<db:emphasis>text</db:emphasis>, const QTextDocument *<db:emphasis>resourceProvider</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qtextdocumentfragment.xml">QTextDocumentFragment</db:link> based on the arbitrary piece of HTML in the given <db:code role="parameter">text</db:code>. The formatting is preserved as much as possible; for example, &quot;&lt;b&gt;bold&lt;/b&gt;&quot; will become a document fragment with the text &quot;bold&quot; with a bold character format.</db:para>
<db:para>If the provided HTML contains references to external resources such as imported style sheets, then they will be loaded through the <db:code role="parameter">resourceProvider</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="fromPlainText">
<db:title>[static] QTextDocumentFragment QTextDocumentFragment::fromPlainText(const QString &amp;<db:emphasis>plainText</db:emphasis>)</db:title>
<db:para>Returns a document fragment that contains the given <db:code role="parameter">plainText</db:code>.</db:para>
<db:para>When inserting such a fragment into a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> the current char format of the <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> used for insertion is used as format for the text.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QTextDocumentFragment::isEmpty() const</db:title>
<db:para>Returns <db:code>true</db:code> if the fragment is empty; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="toHtml">
<db:title>[since 4.2] QString QTextDocumentFragment::toHtml(const QByteArray &amp;<db:emphasis>encoding</db:emphasis> = QByteArray()) const</db:title>
<db:para>Returns the contents of the document fragment as HTML, using the specified <db:code role="parameter">encoding</db:code> (e.g., &quot;UTF-8&quot;, &quot;ISO 8859-1&quot;).</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentfragment.xml#toPlainText">toPlainText</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#toHtml">QTextDocument::toHtml</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toPlainText">
<db:title>QString QTextDocumentFragment::toPlainText() const</db:title>
<db:para>Returns the document fragment's text as plain text (i.e. with no formatting information).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentfragment.xml#toHtml">toHtml</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QTextDocumentFragment &amp;QTextDocumentFragment::operator=(const QTextDocumentFragment &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the <db:code role="parameter">other</db:code> fragment to this fragment.</db:para>
</db:section>
</db:section>
</db:article>
