<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractTransition Class</db:title>
<db:productname>QtStateMachine</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt State Machine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstracttransition.xml">QAbstractTransition</db:link> class is the base class of transitions between <db:link xlink:href="qml-qtqml-statemachine-qabstractstate.xml">QAbstractState</db:link> objects.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractTransition</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS StateMachine)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::StateMachine)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += statemachine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qeventtransition.xml" xlink:role="class">QEventTransition</db:link> and <db:link xlink:href="qsignaltransition.xml" xlink:role="class">QSignalTransition</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractTransition is part of <db:simplelist><db:member>statemachine</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qabstracttransition.xml">QAbstractTransition</db:link> class is the abstract base class of transitions between states (<db:link xlink:href="qml-qtqml-statemachine-qabstractstate.xml">QAbstractState</db:link> objects) of a <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link>. <db:link xlink:href="qabstracttransition.xml">QAbstractTransition</db:link> is part of <db:link xlink:href="qtstatemachine-overview.xml">Qt State Machine Framework</db:link>.</db:para>
<db:para>The <db:link xlink:href="qabstracttransition.xml#sourceState">sourceState</db:link>() function returns the source of the transition. The <db:link xlink:href="qabstracttransition.xml#targetStates">targetStates</db:link>() function returns the targets of the transition. The <db:link xlink:href="qabstracttransition.xml#machine">machine</db:link>() function returns the state machine that the transition is part of.</db:para>
<db:para>The <db:link xlink:href="qabstracttransition.xml#triggered">triggered</db:link>() signal is emitted when the transition has been triggered.</db:para>
<db:para>Transitions can cause animations to be played. Use the <db:link xlink:href="qabstracttransition.xml#addAnimation">addAnimation</db:link>() function to add an animation to the transition.</db:para>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>The <db:link xlink:href="qabstracttransition.xml#eventTest">eventTest</db:link>() function is called by the state machine to determine whether an event should trigger the transition. In your reimplementation you typically check the event type and cast the event object to the proper type, and check that one or more properties of the event meet your criteria.</db:para>
<db:para>The <db:link xlink:href="qabstracttransition.xml#onTransition">onTransition</db:link>() function is called when the transition is triggered; reimplement this function to perform custom processing for the transition.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="TransitionType-enum">
<db:title>enum QAbstractTransition::TransitionType</db:title>
<db:enumsynopsis>
<db:enumname>TransitionType</db:enumname>
<db:enumitem>
<db:enumidentifier>ExternalTransition</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InternalTransition</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies the kind of transition. By default, the type is an external transition.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstracttransition.xml">QAbstractTransition</db:link></db:emphasis>::ExternalTransition</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Any state that is the source state of a transition (which is not a target-less transition) is left, and re-entered when necessary.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstracttransition.xml">QAbstractTransition</db:link></db:emphasis>::InternalTransition</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>If the target state of a transition is a sub-state of a compound state, and that compound state is the source state, an internal transition will not leave the source state.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#transitionType">QAbstractTransition::transitionType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="sourceState-prop">
<db:title>[read-only] sourceState : QState* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QState*</db:type>
<db:varname>sourceState</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sourceState</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the source state (parent) of this transition</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstate.xml">QState</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qabstracttransition.xml#sourceState">sourceState</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="targetState-prop">
<db:title>targetState : QAbstractState*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAbstractState*</db:type>
<db:varname>targetState</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">targetState</db:synopsisinfo>
<db:synopsisinfo role="setter">setTargetState</db:synopsisinfo>
<db:synopsisinfo role="notifier">targetStateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the target state of this transition</db:para>
<db:para>If a transition has no target state, the transition may still be triggered, but this will not cause the state machine's configuration to change (i.e. the current state will not be exited and re-entered).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractstate.xml">QAbstractState</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qabstracttransition.xml#targetState">targetState</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstracttransition.xml#setTargetState">setTargetState</db:link></db:emphasis>(<db:type><db:link xlink:href="qabstractstate.xml">QAbstractState</db:link></db:type> *<db:emphasis>target</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstracttransition.xml#targetStateChanged">targetStateChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
<db:section xml:id="targetStates-prop">
<db:title>targetStates : QList&lt;QAbstractState*&gt;</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QList&lt;QAbstractState*&gt;</db:type>
<db:varname>targetStates</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">targetStates</db:synopsisinfo>
<db:synopsisinfo role="setter">setTargetStates</db:synopsisinfo>
<db:synopsisinfo role="notifier">targetStatesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the target states of this transition</db:para>
<db:para>If multiple states are specified, all must be descendants of the same parallel group state.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type><db:link xlink:href="qabstractstate.xml">QAbstractState</db:link></db:type> *&gt; <db:emphasis role="bold"><db:link xlink:href="qabstracttransition.xml#targetStates">targetStates</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstracttransition.xml#setTargetStates">setTargetStates</db:link></db:emphasis>(const <db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type><db:link xlink:href="qabstractstate.xml">QAbstractState</db:link></db:type> *&gt; &amp;<db:emphasis>targets</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstracttransition.xml#targetStatesChanged">targetStatesChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
<db:section xml:id="transitionType-prop">
<db:title>[bindable] transitionType : TransitionType</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>TransitionType</db:type>
<db:varname>transitionType</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">transitionType</db:synopsisinfo>
<db:synopsisinfo role="setter">setTransitionType</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>indicates whether this transition is an internal transition, or an external transition.</db:para>
<db:para>Internal and external transitions behave the same, except for the case of a transition whose source state is a compound state and whose target(s) is a descendant of the source. In such a case, an internal transition will not exit and re-enter its source state, while an external one will.</db:para>
<db:para>By default, the type is an external transition.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractTransition">
<db:title>QAbstractTransition::QAbstractTransition(QState *<db:emphasis>sourceState</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractTransition</db:methodname>
<db:methodparam>
<db:type>QState *</db:type>
<db:parameter>sourceState</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractTransition(QState *sourceState)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qabstracttransition.xml">QAbstractTransition</db:link> object with the given <db:code role="parameter">sourceState</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractTransition">
<db:title>[virtual] QAbstractTransition::~QAbstractTransition()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractTransition</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractTransition()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this transition.</db:para>
</db:section>
<db:section xml:id="addAnimation">
<db:title>void QAbstractTransition::addAnimation(QAbstractAnimation *<db:emphasis>animation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addAnimation</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation *</db:type>
<db:parameter>animation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addAnimation(QAbstractAnimation *animation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">animation</db:code> to this transition. The transition does not take ownership of the animation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#removeAnimation">removeAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qabstracttransition.xml#animations">animations</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="animations">
<db:title>QList&lt;QAbstractAnimation *&gt; QAbstractTransition::animations() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAbstractAnimation *&gt;</db:type>
<db:methodname>animations</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAbstractAnimation *&gt; animations() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of animations associated with this transition, or an empty list if it has no animations.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#addAnimation">addAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAbstractTransition::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventTest">
<db:title>[pure virtual protected] bool QAbstractTransition::eventTest(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>eventTest</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool eventTest(QEvent *event) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called to determine whether the given <db:code role="parameter">event</db:code> should cause this transition to trigger. Reimplement this function and return true if the event should trigger the transition, otherwise return false.</db:para>
</db:section>
<db:section xml:id="machine">
<db:title>QStateMachine *QAbstractTransition::machine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStateMachine *</db:type>
<db:methodname>machine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStateMachine * machine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the state machine that this transition is part of, or <db:code>nullptr</db:code> if the transition is not part of a state machine.</db:para>
</db:section>
<db:section xml:id="onTransition">
<db:title>[pure virtual protected] void QAbstractTransition::onTransition(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>onTransition</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void onTransition(QEvent *event) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called when the transition is triggered. The given <db:code role="parameter">event</db:code> is what caused the transition to trigger. Reimplement this function to perform custom processing when the transition is triggered.</db:para>
</db:section>
<db:section xml:id="removeAnimation">
<db:title>void QAbstractTransition::removeAnimation(QAbstractAnimation *<db:emphasis>animation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeAnimation</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation *</db:type>
<db:parameter>animation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeAnimation(QAbstractAnimation *animation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the given <db:code role="parameter">animation</db:code> from this transition.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#addAnimation">addAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTargetState">
<db:title>void QAbstractTransition::setTargetState(QAbstractState *<db:emphasis>target</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTargetState</db:methodname>
<db:methodparam>
<db:type>QAbstractState *</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">targetState</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTargetState(QAbstractState *target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">target</db:code> state of this transition.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qabstracttransition.xml#targetState-prop">targetState</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#targetState">targetState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTargetStates">
<db:title>void QAbstractTransition::setTargetStates(const QList&lt;QAbstractState *&gt; &amp;<db:emphasis>targets</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTargetStates</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QAbstractState *&gt; &amp;</db:type>
<db:parameter>targets</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">targetStates</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTargetStates(const QList&lt;QAbstractState *&gt; &amp;targets)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the target states of this transition to be the given <db:code role="parameter">targets</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qabstracttransition.xml#targetStates-prop">targetStates</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#targetStates">targetStates</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransitionType">
<db:title>void QAbstractTransition::setTransitionType(QAbstractTransition::TransitionType <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransitionType</db:methodname>
<db:methodparam>
<db:type>QAbstractTransition::TransitionType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">transitionType</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransitionType(QAbstractTransition::TransitionType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the type of the transition to <db:code role="parameter">type</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qabstracttransition.xml#transitionType-prop">transitionType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#transitionType">transitionType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceState">
<db:title>QState *QAbstractTransition::sourceState() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QState *</db:type>
<db:methodname>sourceState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">sourceState</db:synopsisinfo>
<db:synopsisinfo role="signature">QState * sourceState() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the source state of this transition, or <db:code>nullptr</db:code> if this transition has no source state.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstracttransition.xml#sourceState-prop">sourceState</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="targetState">
<db:title>QAbstractState *QAbstractTransition::targetState() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractState *</db:type>
<db:methodname>targetState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">targetState</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractState * targetState() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the target state of this transition, or <db:code>nullptr</db:code> if the transition has no target.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstracttransition.xml#targetState-prop">targetState</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#setTargetState">setTargetState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="targetStateChanged">
<db:title>void QAbstractTransition::targetStateChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>targetStateChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">targetState</db:synopsisinfo>
<db:synopsisinfo role="signature">void targetStateChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:link xlink:href="qabstracttransition.xml#targetState">targetState</db:link> property is changed.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstracttransition.xml#targetState-prop">targetState</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-statemachine-qabstracttransition.xml#targetState-prop">QAbstractTransition::targetState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="targetStates">
<db:title>QList&lt;QAbstractState *&gt; QAbstractTransition::targetStates() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAbstractState *&gt;</db:type>
<db:methodname>targetStates</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">targetStates</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAbstractState *&gt; targetStates() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the target states of this transition, or an empty list if this transition has no target states.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstracttransition.xml#targetStates-prop">targetStates</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#setTargetStates">setTargetStates</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="targetStatesChanged">
<db:title>void QAbstractTransition::targetStatesChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>targetStatesChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">targetStates</db:synopsisinfo>
<db:synopsisinfo role="signature">void targetStatesChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:link xlink:href="qabstracttransition.xml#targetStates">targetStates</db:link> property is changed.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstracttransition.xml#targetStates-prop">targetStates</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-statemachine-qabstracttransition.xml#targetStates-prop">QAbstractTransition::targetStates</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transitionType">
<db:title>QAbstractTransition::TransitionType QAbstractTransition::transitionType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractTransition::TransitionType</db:type>
<db:methodname>transitionType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">transitionType</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractTransition::TransitionType transitionType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the transition.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstracttransition.xml#transitionType-prop">transitionType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#setTransitionType">setTransitionType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="triggered">
<db:title>void QAbstractTransition::triggered()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>triggered</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void triggered()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the transition has been triggered (after <db:link xlink:href="qabstracttransition.xml#onTransition">onTransition</db:link>() has been called).</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
</db:section>
</db:article>
