<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QAbstractTransition Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstracttransition.xml">QAbstractTransition</db:link> class is the base class of transitions between <db:link xlink:href="qabstractstate.xml">QAbstractState</db:link> objects.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractTransition</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qeventtransition.xml" xlink:role="class">QEventTransition</db:link> and <db:link xlink:href="qsignaltransition.xml" xlink:role="class">QSignalTransition</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractTransition is part of <db:simplelist><db:member><db:link xlink:href="statemachine.xml">State Machine Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qabstracttransition.xml">QAbstractTransition</db:link> class is the abstract base class of transitions between states (<db:link xlink:href="qabstractstate.xml">QAbstractState</db:link> objects) of a <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link>. <db:link xlink:href="qabstracttransition.xml">QAbstractTransition</db:link> is part of <db:link xlink:href="statemachine-api.xml">The State Machine Framework</db:link>.</db:para>
<db:para>The <db:link xlink:href="qabstracttransition.xml#sourceState">sourceState</db:link>() function returns the source of the transition. The <db:link xlink:href="qabstracttransition.xml#targetStates">targetStates</db:link>() function returns the targets of the transition. The <db:link xlink:href="qabstracttransition.xml#machine">machine</db:link>() function returns the state machine that the transition is part of.</db:para>
<db:para>The <db:link xlink:href="qabstracttransition.xml#triggered">triggered</db:link>() signal is emitted when the transition has been triggered.</db:para>
<db:para>Transitions can cause animations to be played. Use the <db:link xlink:href="qabstracttransition.xml#addAnimation">addAnimation</db:link>() function to add an animation to the transition.</db:para>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>The <db:link xlink:href="qabstracttransition.xml#eventTest">eventTest</db:link>() function is called by the state machine to determine whether an event should trigger the transition. In your reimplementation you typically check the event type and cast the event object to the proper type, and check that one or more properties of the event meet your criteria.</db:para>
<db:para>The <db:link xlink:href="qabstracttransition.xml#onTransition">onTransition</db:link>() function is called when the transition is triggered; reimplement this function to perform custom processing for the transition.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractTransition">
<db:title>QAbstractTransition::QAbstractTransition(QState *<db:emphasis>sourceState</db:emphasis> = 0)</db:title>
<db:para>Constructs a new <db:link xlink:href="qabstracttransition.xml">QAbstractTransition</db:link> object with the given <db:code role="parameter">sourceState</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractTransition">
<db:title>[virtual noexcept] QAbstractTransition::~QAbstractTransition()</db:title>
<db:para>Destroys this transition.</db:para>
</db:section>
<db:section xml:id="addAnimation">
<db:title>void QAbstractTransition::addAnimation(QAbstractAnimation *<db:emphasis>animation</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">animation</db:code> to this transition. The transition does not take ownership of the animation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#removeAnimation">removeAnimation</db:link>()</db:member>
<db:member><db:link xlink:href="qabstracttransition.xml#animations">animations</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="animations">
<db:title>QList&lt;QAbstractAnimation *&gt; QAbstractTransition::animations() const</db:title>
<db:para>Returns the list of animations associated with this transition, or an empty list if it has no animations.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#addAnimation">addAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAbstractTransition::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventTest">
<db:title>[pure virtual protected] bool QAbstractTransition::eventTest(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This function is called to determine whether the given <db:code role="parameter">event</db:code> should cause this transition to trigger. Reimplement this function and return true if the event should trigger the transition, otherwise return false.</db:para>
</db:section>
<db:section xml:id="machine">
<db:title>QStateMachine *QAbstractTransition::machine() const</db:title>
<db:para>Returns the state machine that this transition is part of, or 0 if the transition is not part of a state machine.</db:para>
</db:section>
<db:section xml:id="onTransition">
<db:title>[pure virtual protected] void QAbstractTransition::onTransition(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This function is called when the transition is triggered. The given <db:code role="parameter">event</db:code> is what caused the transition to trigger. Reimplement this function to perform custom processing when the transition is triggered.</db:para>
</db:section>
<db:section xml:id="removeAnimation">
<db:title>void QAbstractTransition::removeAnimation(QAbstractAnimation *<db:emphasis>animation</db:emphasis>)</db:title>
<db:para>Removes the given <db:code role="parameter">animation</db:code> from this transition.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#addAnimation">addAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTargetState">
<db:title>void QAbstractTransition::setTargetState(QAbstractState *<db:emphasis>target</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">target</db:code> state of this transition.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#targetState">targetState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTargetStates">
<db:title>void QAbstractTransition::setTargetStates(const QList&lt;QAbstractState *&gt; &amp;<db:emphasis>targets</db:emphasis>)</db:title>
<db:para>Sets the target states of this transition to be the given <db:code role="parameter">targets</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#targetStates">targetStates</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceState">
<db:title>QState *QAbstractTransition::sourceState() const</db:title>
<db:para>Returns the source state of this transition, or 0 if this transition has no source state.</db:para>
</db:section>
<db:section xml:id="targetState">
<db:title>QAbstractState *QAbstractTransition::targetState() const</db:title>
<db:para>Returns the target state of this transition, or 0 if the transition has no target.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#setTargetState">setTargetState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="targetStates">
<db:title>QList&lt;QAbstractState *&gt; QAbstractTransition::targetStates() const</db:title>
<db:para>Returns the target states of this transition, or an empty list if this transition has no target states.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#setTargetStates">setTargetStates</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="triggered">
<db:title>void QAbstractTransition::triggered()</db:title>
<db:para>This signal is emitted when the transition has been triggered (after <db:link xlink:href="qabstracttransition.xml#onTransition">onTransition</db:link>() has been called).</db:para>
</db:section>
</db:section>
</db:article>
