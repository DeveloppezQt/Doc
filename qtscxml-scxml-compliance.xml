<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SCXML Compliance</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Scxml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes the compliance of the Qt SCXML implementation with the SCXML specification.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="supported-data-models">
<db:title>Supported Data Models</db:title>
<db:para>Qt SCXML supports the following data models:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>null data model, as described in <db:link xlink:href="https://www.w3.org/TR/scxml/#minimal-profile">SCXML Specification - B.1 The Null Data Model</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>ECMAScript data model, as described in <db:link xlink:href="https://www.w3.org/TR/scxml/#ecma-profile">SCXML Specification - B.2 The ECMAScript Data Model</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>C++ data model, as described in the <db:link xlink:href="qscxmlcppdatamodel.xml">QScxmlCppDataModel</db:link> documentation</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="supported-elements-and-attributes">
<db:title>Supported Elements and Attributes</db:title>
<db:para>The Qt SCXML implementation is SCXML compliant, with a few exceptions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Event data (<db:code>_event.data</db:code>) is implemented as a <db:link xlink:href="qvariant.xml">QVariant</db:link>. If parameters are passed to <db:code>&lt;send&gt;</db:code>, the <db:link xlink:href="qvariant.xml">QVariant</db:link> holds a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>, so multiple parameters with the same name are not supported.</db:para>
</db:listitem>
<db:listitem>
<db:para>There is no &quot;raw&quot; representation of an event.</db:para>
</db:listitem>
<db:listitem>
<db:para>The (optional) basic http event I/O processor is not supported.</db:para>
</db:listitem>
<db:listitem>
<db:para>The contents of a <db:code>&lt;script&gt;</db:code> tag and a <db:code>&lt;data&gt;</db:code> tag must be valid for the chosen data model. So, as an example: XML content inside &lt;data&gt; is not supported. However, the ECMAScript data model does support data in JSON format.</db:para>
</db:listitem>
<db:listitem>
<db:para>The only service that can be instantiated with <db:code>&lt;invoke&gt;</db:code> is another SCXML state machine.</db:para>
</db:listitem>
<db:listitem>
<db:para>To keep the behavior of dynamically created state machines and compiled state machines the same, the <db:emphasis>typeexpr</db:emphasis> and <db:emphasis>srcexpr</db:emphasis> attributes are not supported. Moreover, if a <db:code>&lt;content&gt;</db:code> tag is used inside an <db:code>&lt;invoke&gt;</db:code> tag, that content must be XML. Specifically, dynamically creating SCXML, for example by concatenating strings with the ECMAScript data model, is not supported.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-scxml-extensions">
<db:title>Qt SCXML Extensions</db:title>
<db:para>The Qt SCXML implementation extends SCXML in the following ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If the event is an error event, <db:code>_event.errorMessage</db:code> will contain a more detailed description of the error.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
