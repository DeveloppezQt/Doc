<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>World Time Clock Plugin Example</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>Creating a custom widget plugin for <db:emphasis>Qt Designer</db:emphasis> that uses signals and slots.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/worldtimeclockplugin-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In this example, we simply extend the <db:link xlink:href="qtdesigner-customwidgetplugin-example.xml">Custom Widget Plugin</db:link> example and its custom widget (based on the <db:link xlink:href="qtwidgets-widgets-analogclock-example.xml">Analog Clock</db:link> example), by introducing the concept of signals and slots.</db:para>
<db:para>The World Time Clock Plugin example consists of two classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>WorldTimeClock</db:code> is a custom clock widget with hour and minute hands that is automatically updated every few seconds.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>WorldTimeClockPlugin</db:code> exposes the <db:code>WorldTimeClock</db:code> class to <db:emphasis>Qt Designer</db:emphasis>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>First we will take a look at the <db:code>WorldTimeClock</db:code> class which extends the <db:link xlink:href="qtdesigner-customwidgetplugin-example.xml">Custom Widget Plugin</db:link> example's <db:code>AnalogClock</db:code> class by providing a signal and a slot. Then we will take a quick look at the <db:code>WorldTimeClockPlugin</db:code> class, but this class is in most parts identical to the <db:link xlink:href="qtdesigner-customwidgetplugin-example.xml">Custom Widget Plugin</db:link> example's implementation.</db:para>
<db:para>Finally we take a look at the plugin's project file. The project file for custom widget plugins needs some additional information to ensure that they will work within <db:emphasis>Qt Designer</db:emphasis>. This is also covered in the <db:link xlink:href="qtdesigner-customwidgetplugin-example.xml">Custom Widget Plugin</db:link> example, but due to its importance (custom widget plugins rely on components supplied with <db:emphasis>Qt Designer</db:emphasis> which must be specified in the project file that we use) we will repeat it here.</db:para>
<db:section xml:id="worldtimeclock-class">
<db:title>WorldTimeClock Class</db:title>
<db:para>The <db:code>WorldTimeClock</db:code> class inherits <db:link xlink:href="qwidget.xml">QWidget</db:link>, and is a custom clock widget with hour and minute hands that is automatically updated every few seconds. What makes this example different from the <db:link xlink:href="qtdesigner-customwidgetplugin-example.xml">Custom Widget Plugin</db:link> example, is the introduction of the signal and slot in the custom widget class:</db:para>
<db:programlisting language="cpp">class QDESIGNER_WIDGET_EXPORT WorldTimeClock : public QWidget
{
    Q_OBJECT

public:
    explicit WorldTimeClock(QWidget *parent = nullptr);

public slots:
    void setTimeZone(int hourOffset);

signals:
    void updated(QTime currentTime);

protected:
    void paintEvent(QPaintEvent *event) override;

private:
    int timeZoneOffset = 0;
};
</db:programlisting>
<db:para>Note the use of the <db:link xlink:href="qdesignercustomwidgetinterface.xml#QDESIGNER_WIDGET_EXPORT">QDESIGNER_WIDGET_EXPORT</db:link> macro. This is needed to ensure that <db:emphasis>Qt Designer</db:emphasis> can create instances of the widget on some platforms, but it is a good idea to use it on all platforms.</db:para>
<db:para>We declare the <db:code>setTimeZone()</db:code> slot with an associated <db:code>timeZoneOffset</db:code> variable, and we declare an <db:code>updated()</db:code> signal which takes the current time as argument and is emitted whenever the widget is repainted.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/worldtimeclock-connection.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In <db:emphasis>Qt Designer</db:emphasis>'s workspace we can then, for example, connect the <db:code>WorldTimeClock</db:code> widget's <db:code>updated()</db:code> signal to a <db:link xlink:href="qtimeedit.xml">QTimeEdit</db:link>'s <db:link xlink:href="qdatetimeedit.xml#time-prop">setTime</db:link>() slot using <db:emphasis>Qt Designer</db:emphasis>'s mode for editing signal and slots.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/worldtimeclock-signalandslot.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We can also connect a <db:link xlink:href="qspinbox.xml">QSpinBox</db:link>'s <db:link xlink:href="qspinbox.xml#valueChanged">valueChanged</db:link>() signal to the <db:code>WorldTimeClock</db:code>'s <db:code>setTimeZone()</db:code> slot.</db:para>
</db:section>
<db:section xml:id="worldtimeclockplugin-class">
<db:title>WorldTimeClockPlugin Class</db:title>
<db:para>The <db:code>WorldTimeClockPlugin</db:code> class exposes the <db:code>WorldTimeClock</db:code> class to <db:emphasis>Qt Designer</db:emphasis>. Its definition is equivalent to the <db:link xlink:href="qtdesigner-customwidgetplugin-example.xml">Custom Widget Plugin</db:link> example's plugin class which is explained in detail. The only part of the class definition that is specific to this particular custom widget is the class name.</db:para>
<db:para>To ensure that Qt recognizes the widget as a plugin, export relevant information about the widget by adding the <db:code>Q_PLUGIN_METADATA()</db:code> macro:</db:para>
<db:programlisting language="cpp">class WorldTimeClockPlugin : public QObject,
                             public QDesignerCustomWidgetInterface
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QDesignerCustomWidgetInterface&quot;)
    Q_INTERFACES(QDesignerCustomWidgetInterface)

public:
    explicit WorldTimeClockPlugin(QObject *parent = nullptr);

    bool isContainer() const override;
    bool isInitialized() const override;
    QIcon icon() const override;
    QString domXml() const override;
    QString group() const override;
    QString includeFile() const override;
    QString name() const override;
    QString toolTip() const override;
    QString whatsThis() const override;
    QWidget *createWidget(QWidget *parent) override;
    void initialize(QDesignerFormEditorInterface *core) override;

private:
    bool initialized = false;
};
</db:programlisting>
<db:para>The plugin class provides <db:emphasis>Qt Designer</db:emphasis> with basic information about our plugin, such as its class name and its include file. Furthermore it knows how to create instances of the <db:code>WorldTimeClockPlugin</db:code> widget. <db:code>WorldTimeClockPlugin</db:code> also defines the <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">initialize</db:link>() function which is called after the plugin is loaded into <db:emphasis>Qt Designer</db:emphasis>. The function's <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> parameter provides the plugin with a gateway to all of <db:emphasis>Qt Designer</db:emphasis>'s API's.</db:para>
<db:para>The <db:code>WorldTimeClockPlugin</db:code> class inherits from both <db:link xlink:href="qobject.xml">QObject</db:link> and <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link>. It is important to remember, when using multiple inheritance, to ensure that all the interfaces (i.e. the classes that doesn't inherit <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link>) are made known to the meta object system using the <db:link xlink:href="qobject.xml#Q_INTERFACES">Q_INTERFACES</db:link>() macro. This enables <db:emphasis>Qt Designer</db:emphasis> to use <db:link xlink:href="qobject.xml#qobject_cast-1">qobject_cast</db:link>() to query for supported interfaces using nothing but a <db:link xlink:href="qobject.xml">QObject</db:link> pointer.</db:para>
<db:para>The implementation of the <db:code>WorldTimeClockPlugin</db:code> is also equivalent to the plugin interface implementation in the <db:link xlink:href="qtdesigner-customwidgetplugin-example.xml">Custom Widget Plugin</db:link> example (only the class name and the implementation of <db:link xlink:href="qdesignercustomwidgetinterface.xml#domXml">QDesignerCustomWidgetInterface::domXml</db:link>() differ). The main thing to remember is to use the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro to export the <db:code>WorldTimeClockPlugin</db:code> class for use with <db:emphasis>Qt Designer</db:emphasis>:</db:para>
<db:programlisting language="cpp">    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QDesignerCustomWidgetInterface&quot;)
</db:programlisting>
<db:para>Without this macro, there is no way for Qt Designer to use the widget.</db:para>
</db:section>
<db:section xml:id="project-files">
<db:title>Project files</db:title>
<db:section xml:id="cmake">
<db:title>CMake</db:title>
<db:para>The project files need to state that a plugin linking to the <db:emphasis>Qt Designer</db:emphasis> libraries is to be built:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Core Gui UiPlugin Widgets)

qt_add_plugin(worldtimeclockplugin)

target_link_libraries(worldtimeclockplugin PUBLIC
    Qt::Core
    Qt::Gui
    Qt::UiPlugin
    Qt::Widgets
)
</db:programlisting>
<db:para>The link libraries list specifies <db:code>Qt::UiPlugin</db:code>. This indicates that the plugin uses the abstract interfaces <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> and <db:link xlink:href="qdesignercustomwidgetcollectioninterface.xml">QDesignerCustomWidgetCollectionInterface</db:link> only and has no linkage to the <db:emphasis>Qt Designer</db:emphasis> libraries. When accessing other interfaces of <db:emphasis>Qt Designer</db:emphasis> that have linkage, <db:code>Designer</db:code> should be used instead; this ensures that the plugin dynamically links to the <db:emphasis>Qt Designer</db:emphasis> libraries and has a run-time dependency on them.</db:para>
<db:para>The header and source files for the widget are declared in the usual way:</db:para>
<db:programlisting language="cpp">target_sources(worldtimeclockplugin PRIVATE
    worldtimeclock.cpp worldtimeclock.h
    worldtimeclockplugin.cpp worldtimeclockplugin.h
)
</db:programlisting>
<db:para>We provide an implementation of the plugin interface so that <db:emphasis>Qt Designer</db:emphasis> can use the custom widget. In this particular example we also provide implementations of the container extension interface and the extension factory.</db:para>
<db:para>It is important to ensure that the plugin is installed in a location that is searched by <db:emphasis>Qt Designer</db:emphasis>. We do this by specifying a target path for the project and adding it to the list of items to install:</db:para>
<db:programlisting language="cpp">   set(INSTALL_EXAMPLEDIR &quot;${QT6_INSTALL_PREFIX}/${QT6_INSTALL_PLUGINS}/designer&quot;)
install(TARGETS worldtimeclockplugin
    RUNTIME DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
    BUNDLE DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
    LIBRARY DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
)
</db:programlisting>
<db:para>The custom widget is created as a library. It will be installed alongside the other <db:emphasis>Qt Designer</db:emphasis> plugins when the project is installed (using <db:code>ninja install</db:code> or an equivalent installation procedure).</db:para>
<db:para>For more information about plugins, see the <db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link> documentation.</db:para>
</db:section>
<db:section xml:id="qmake">
<db:title>qmake</db:title>
<db:para>The following example shows how to link a plugin to the <db:emphasis>Qt Designer</db:emphasis> libraries:</db:para>
<db:programlisting language="cpp">TEMPLATE    = lib
CONFIG     += plugin

QT          += widgets uiplugin
</db:programlisting>
<db:para>The <db:code>QT</db:code> variable contains the keyword <db:code>uiplugin</db:code>, which is the equivalent of the <db:code>Qt::UiPlugin</db:code> library.</db:para>
<db:para>The following example shows how to add the header and source files of the widget:</db:para>
<db:programlisting language="cpp">HEADERS     = worldtimeclock.h \
              worldtimeclockplugin.h
SOURCES     = worldtimeclock.cpp \
              worldtimeclockplugin.cpp
</db:programlisting>
<db:para>The following example shows how to install a plugin to the <db:emphasis>Qt Designer</db:emphasis>'s plugin path:</db:para>
<db:programlisting language="cpp">target.path = $$[QT_INSTALL_PLUGINS]/designer
INSTALLS += target
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qttools.git/tree/examples/designer/worldtimeclockplugin?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
