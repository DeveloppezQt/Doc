<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Widgets Maps Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to handle geolocation requests.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/maps-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Maps</db:emphasis> demonstrates how to handle geolocation requests originating from a <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link>.</db:para>
<db:para>The <db:link xlink:href="https://www.w3.org/TR/geolocation-API/">Geolocation API</db:link> is a JavaScript API that web applications can use to determine the user's physical location to show on a map, for example. As Qt WebEngine relies on the <db:emphasis>Qt Positioning</db:emphasis> module to power this API, a viable location backend is needed for the target platform.</db:para>
<db:para>To avoid accidentally sending location information to third parties geolocation requests are denied by default. This example demonstrates the steps an application must take in order to start accepting these requests.</db:para>
<db:note>
<db:para>On Windows 11, enable settings to grant the application access to Windows location services. In the Settings App under <db:guilabel>Privacy &amp; Security</db:guilabel> &gt; <db:guilabel>Location</db:guilabel>, enable <db:guilabel>Location services</db:guilabel>, <db:guilabel>Let apps access your location</db:guilabel> and <db:guilabel>Let desktop apps access your location</db:guilabel>.</db:para>
</db:note>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="the-code">
<db:title>The Code</db:title>
<db:para>The example program consists of a single class, <db:code>MainWindow</db:code>, inheriting from <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QMainWindow&amp;gt;
#include &amp;lt;QWebEngineView&amp;gt;

class MainWindow : public QMainWindow
{
    Q_OBJECT
public:
    explicit MainWindow(QWidget *parent = nullptr);

private:
    QWebEngineView *m_view;
};
</db:programlisting>
<db:para>In the constructor we first set up the <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> as the central widget:</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , m_view(new QWebEngineView(this))
{
    setCentralWidget(m_view);
</db:programlisting>
<db:para>We then proceed to connect a lambda function to the <db:link xlink:href="qwebenginepage.xml#featurePermissionRequested">QWebEnginePage::featurePermissionRequested</db:link> signal:</db:para>
<db:programlisting language="cpp">    QWebEnginePage *page = m_view-&amp;gt;page();

    connect(page, &amp;amp;QWebEnginePage::featurePermissionRequested,
            [this, page](const QUrl &amp;amp;securityOrigin, QWebEnginePage::Feature feature) {
</db:programlisting>
<db:para>This signal is emitted whenever a web page requests to make use of a certain feature or device, including not only location services but also audio capture devices or mouse locking, for example. In this example we only handle requests for location services:</db:para>
<db:programlisting language="cpp">        if (feature != QWebEnginePage::Geolocation)
            return;
</db:programlisting>
<db:para>Now comes the part where we actually ask the user for permission:</db:para>
<db:programlisting language="cpp">        QMessageBox msgBox(this);
        msgBox.setText(tr(&quot;%1 wants to know your location&quot;).arg(securityOrigin.host()));
        msgBox.setInformativeText(tr(&quot;Do you want to send your current location to this website?&quot;));
        msgBox.setStandardButtons(QMessageBox::Yes | QMessageBox::No);
        msgBox.setDefaultButton(QMessageBox::Yes);

        if (msgBox.exec() == QMessageBox::Yes) {
            page-&amp;gt;setFeaturePermission(
                securityOrigin, feature, QWebEnginePage::PermissionGrantedByUser);
        } else {
            page-&amp;gt;setFeaturePermission(
                securityOrigin, feature, QWebEnginePage::PermissionDeniedByUser);
        }
    });
</db:programlisting>
<db:para>Note that the question includes the host component of the web site's URI (<db:code>securityOrigin</db:code>) to inform the user as to exactly which web site will be receiving their location data.</db:para>
<db:para>We use the <db:link xlink:href="qwebenginepage.xml#setFeaturePermission">QWebEnginePage::setFeaturePermission</db:link> method to communicate the user's answer back to the web page.</db:para>
<db:para>Finally we ask the <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> to load the web page that might want to use location services:</db:para>
<db:programlisting language="cpp">    page-&amp;gt;load(QUrl(QStringLiteral(&quot;https://maps.google.com&quot;)));
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwebengine.git/tree/examples/webenginewidgets/maps?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwebengine-features.xml#html5-geolocation">Qt WebEngine HTML5 Geolocation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
