<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFrame Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qframe.xml">QFrame</db:link> class is the base class of widgets that can have a frame.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFrame</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractscrollarea.xml" xlink:role="class">QAbstractScrollArea</db:link>, <db:link xlink:href="qlabel.xml" xlink:role="class">QLabel</db:link>, <db:link xlink:href="qlcdnumber.xml" xlink:role="class">QLCDNumber</db:link>, <db:link xlink:href="qsplitter.xml" xlink:role="class">QSplitter</db:link>, <db:link xlink:href="qstackedwidget.xml" xlink:role="class">QStackedWidget</db:link>, and <db:link xlink:href="qtoolbox.xml" xlink:role="class">QToolBox</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFrame is part of <db:simplelist><db:member>abstractwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmenu.xml">QMenu</db:link> uses this to &quot;raise&quot; the menu above the surrounding screen. <db:link xlink:href="qprogressbar.xml">QProgressBar</db:link> has a &quot;sunken&quot; look. <db:link xlink:href="qlabel.xml">QLabel</db:link> has a flat look. The frames of widgets like these can be changed.</db:para>
<db:programlisting language="cpp">QLabel label(...);
label.setFrameStyle(QFrame::Panel | QFrame::Raised);
label.setLineWidth(2);

QProgressBar pbar(...);
label.setFrameStyle(QFrame::NoFrame);
</db:programlisting>
<db:para>The <db:link xlink:href="qframe.xml">QFrame</db:link> class can also be used directly for creating simple placeholder frames without any contents.</db:para>
<db:para>The frame style is specified by a <db:link xlink:href="qframe.xml#Shape-enum">frame shape</db:link> and a <db:link xlink:href="qframe.xml#Shadow-enum">shadow style</db:link> that is used to visually separate the frame from surrounding widgets. These properties can be set together using the <db:link xlink:href="qframe.xml#setFrameStyle">setFrameStyle</db:link>() function and read with <db:link xlink:href="qframe.xml#frameStyle">frameStyle</db:link>().</db:para>
<db:para>The frame shapes are <db:link xlink:href="qframe.xml#Shape-enum">NoFrame</db:link>, <db:link xlink:href="qframe.xml#Shape-enum">Box</db:link>, <db:link xlink:href="qframe.xml#Shape-enum">Panel</db:link>, <db:link xlink:href="qframe.xml#Shape-enum">StyledPanel</db:link>, <db:link xlink:href="qframe.xml#Shape-enum">HLine</db:link> and <db:link xlink:href="qframe.xml#Shape-enum">VLine</db:link>; the shadow styles are <db:link xlink:href="qframe.xml#Shadow-enum">Plain</db:link>, <db:link xlink:href="qframe.xml#Shadow-enum">Raised</db:link> and <db:link xlink:href="qframe.xml#Shadow-enum">Sunken</db:link>.</db:para>
<db:para>A frame widget has three attributes that describe the thickness of the border: <db:link xlink:href="qframe.xml#lineWidth-prop">lineWidth</db:link>, <db:link xlink:href="qframe.xml#midLineWidth-prop">midLineWidth</db:link>, and <db:link xlink:href="qframe.xml#frameWidth-prop">frameWidth</db:link>.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The line width is the width of the frame border. It can be modified to customize the frame's appearance.</db:para>
</db:listitem>
<db:listitem>
<db:para>The mid-line width specifies the width of an extra line in the middle of the frame, which uses a third color to obtain a special 3D effect. Notice that a mid-line is only drawn for <db:link xlink:href="qframe.xml#Shape-enum">Box</db:link>, <db:link xlink:href="qframe.xml#Shape-enum">HLine</db:link> and <db:link xlink:href="qframe.xml#Shape-enum">VLine</db:link> frames that are raised or sunken.</db:para>
</db:listitem>
<db:listitem>
<db:para>The frame width is determined by the frame style, and the <db:link xlink:href="qframe.xml#frameWidth-prop">frameWidth</db:link>() function is used to obtain the value defined for the style used.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The margin between the frame and the contents of the frame can be customized with the <db:link xlink:href="qwidget.xml#setContentsMargins">QWidget::setContentsMargins</db:link>() function.</db:para>
<db:anchor xml:id="picture"/>
<db:para>This table shows some of the combinations of styles and line widths:</db:para>
<db:mediaobject>
<db:alt>Table of frame styles</db:alt>
<db:imageobject>
<db:imagedata fileref="images/frames.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Shadow-enum">
<db:title>enum QFrame::Shadow</db:title>
<db:para>This enum type defines the types of shadow that are used to give a 3D effect to frames.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qframe.xml">QFrame</db:link></db:emphasis>::Plain</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>the frame and contents appear level with the surroundings; draws using the palette <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::WindowText</db:link> color (without any 3D effect)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qframe.xml">QFrame</db:link></db:emphasis>::Raised</db:code></db:para>
</db:td>
<db:td><db:code>0x0020</db:code></db:td>
<db:td>
<db:para>the frame and contents appear raised; draws a 3D raised line using the light and dark colors of the current color group</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qframe.xml">QFrame</db:link></db:emphasis>::Sunken</db:code></db:para>
</db:td>
<db:td><db:code>0x0030</db:code></db:td>
<db:td>
<db:para>the frame and contents appear sunken; draws a 3D sunken line using the light and dark colors of the current color group</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Shadow interacts with <db:link xlink:href="qframe.xml#Shape-enum">QFrame::Shape</db:link>, the <db:link xlink:href="qframe.xml#lineWidth-prop">lineWidth</db:link>() and the <db:link xlink:href="qframe.xml#midLineWidth-prop">midLineWidth</db:link>(). See the picture of the frames in the main class documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qframe.xml#Shape-enum">QFrame::Shape</db:link></db:member>
<db:member><db:link xlink:href="qframe.xml#lineWidth-prop">lineWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qframe.xml#midLineWidth-prop">midLineWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Shape-enum">
<db:title>enum QFrame::Shape</db:title>
<db:para>This enum type defines the shapes of frame available.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qframe.xml">QFrame</db:link></db:emphasis>::NoFrame</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qframe.xml">QFrame</db:link> draws nothing</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qframe.xml">QFrame</db:link></db:emphasis>::Box</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qframe.xml">QFrame</db:link> draws a box around its contents</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qframe.xml">QFrame</db:link></db:emphasis>::Panel</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qframe.xml">QFrame</db:link> draws a panel to make the contents appear raised or sunken</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qframe.xml">QFrame</db:link></db:emphasis>::StyledPanel</db:code></db:para>
</db:td>
<db:td><db:code>0x0006</db:code></db:td>
<db:td>
<db:para>draws a rectangular panel with a look that depends on the current GUI style. It can be raised or sunken.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qframe.xml">QFrame</db:link></db:emphasis>::HLine</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qframe.xml">QFrame</db:link> draws a horizontal line that frames nothing (useful as separator)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qframe.xml">QFrame</db:link></db:emphasis>::VLine</db:code></db:para>
</db:td>
<db:td><db:code>0x0005</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qframe.xml">QFrame</db:link> draws a vertical line that frames nothing (useful as separator)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qframe.xml">QFrame</db:link></db:emphasis>::WinPanel</db:code></db:para>
</db:td>
<db:td><db:code>0x0003</db:code></db:td>
<db:td>
<db:para>draws a rectangular panel that can be raised or sunken like those in Windows 2000. Specifying this shape sets the line width to 2 pixels. WinPanel is provided for compatibility. For GUI style independence we recommend using StyledPanel instead.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>When it does not call <db:link xlink:href="qstyle.xml">QStyle</db:link>, Shape interacts with <db:link xlink:href="qframe.xml#Shadow-enum">QFrame::Shadow</db:link>, the <db:link xlink:href="qframe.xml#lineWidth-prop">lineWidth</db:link>() and the <db:link xlink:href="qframe.xml#midLineWidth-prop">midLineWidth</db:link>() to create the total result. See the picture of the frames in the main class documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qframe.xml#Shadow-enum">QFrame::Shadow</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml#style">QFrame::style</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#drawPrimitive">QStyle::drawPrimitive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="StyleMask-enum">
<db:title>enum QFrame::StyleMask</db:title>
<db:para>This enum defines two constants that can be used to extract the two components of <db:link xlink:href="qframe.xml#frameStyle">frameStyle</db:link>():</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qframe.xml">QFrame</db:link></db:emphasis>::Shadow_Mask</db:code></db:para>
</db:td>
<db:td><db:code>0x00f0</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qframe.xml#Shadow-enum">Shadow</db:link> part of <db:link xlink:href="qframe.xml#frameStyle">frameStyle</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qframe.xml">QFrame</db:link></db:emphasis>::Shape_Mask</db:code></db:para>
</db:td>
<db:td><db:code>0x000f</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qframe.xml#Shape-enum">Shape</db:link> part of <db:link xlink:href="qframe.xml#frameStyle">frameStyle</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Normally, you don't need to use these, since <db:link xlink:href="qframe.xml#frameShadow-prop">frameShadow</db:link>() and <db:link xlink:href="qframe.xml#frameShape-prop">frameShape</db:link>() already extract the <db:link xlink:href="qframe.xml#Shadow-enum">Shadow</db:link> and the <db:link xlink:href="qframe.xml#Shape-enum">Shape</db:link> parts of <db:link xlink:href="qframe.xml#frameStyle">frameStyle</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qframe.xml#frameStyle">frameStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qframe.xml#setFrameStyle">setFrameStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="frameRect-prop">
<db:title>frameRect : QRect</db:title>
<db:para>This property holds the frame's rectangle</db:para>
<db:para>The frame's rectangle is the rectangle the frame is drawn in. By default, this is the entire widget. Setting the rectangle <db:emphasis>doesn't</db:emphasis> cause a widget update. The frame rectangle is automatically adjusted when the widget changes size.</db:para>
<db:para>If you set the rectangle to a null rectangle (for example, <db:link xlink:href="qrect.xml">QRect</db:link>(0, 0, 0, 0)), then the resulting frame rectangle is equivalent to the <db:link xlink:href="qwidget.xml#rect-prop">widget rectangle</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> <db:emphasis role="bold">frameRect</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFrameRect</db:emphasis>(<db:emphasis>const QRect &amp;</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="frameShadow-prop">
<db:title>frameShadow : Shadow</db:title>
<db:para>This property holds the frame shadow value from the frame style</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qframe.xml#Shadow-enum">QFrame::Shadow</db:link></db:type> <db:emphasis role="bold">frameShadow</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFrameShadow</db:emphasis>(<db:emphasis>QFrame::Shadow</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qframe.xml#frameStyle">frameStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qframe.xml#frameShape-prop">frameShape</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameShape-prop">
<db:title>frameShape : Shape</db:title>
<db:para>This property holds the frame shape value from the frame style</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qframe.xml#Shape-enum">QFrame::Shape</db:link></db:type> <db:emphasis role="bold">frameShape</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFrameShape</db:emphasis>(<db:emphasis>QFrame::Shape</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qframe.xml#frameStyle">frameStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qframe.xml#frameShadow-prop">frameShadow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameWidth-prop">
<db:title>[read-only] frameWidth : const int</db:title>
<db:para>This property holds the width of the frame that is drawn.</db:para>
<db:para>Note that the frame width depends on the <db:link xlink:href="qframe.xml#setFrameStyle">frame style</db:link>, not only the line width and the mid-line width. For example, the style specified by <db:link xlink:href="qframe.xml#Shape-enum">NoFrame</db:link> always has a frame width of 0, whereas the style <db:link xlink:href="qframe.xml#Shape-enum">Panel</db:link> has a frame width equivalent to the line width.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">frameWidth</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qframe.xml#lineWidth-prop">lineWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qframe.xml#midLineWidth-prop">midLineWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qframe.xml#frameStyle">frameStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineWidth-prop">
<db:title>lineWidth : int</db:title>
<db:para>This property holds the line width</db:para>
<db:para>Note that the <db:emphasis>total</db:emphasis> line width for frames used as separators (<db:link xlink:href="qframe.xml#Shape-enum">HLine</db:link> and <db:link xlink:href="qframe.xml#Shape-enum">VLine</db:link>) is specified by <db:link xlink:href="qframe.xml#frameWidth-prop">frameWidth</db:link>.</db:para>
<db:para>The default value is 1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">lineWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLineWidth</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qframe.xml#midLineWidth-prop">midLineWidth</db:link></db:member>
<db:member><db:link xlink:href="qframe.xml#frameWidth-prop">frameWidth</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="midLineWidth-prop">
<db:title>midLineWidth : int</db:title>
<db:para>This property holds the width of the mid-line</db:para>
<db:para>The default value is 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">midLineWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMidLineWidth</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qframe.xml#lineWidth-prop">lineWidth</db:link></db:member>
<db:member><db:link xlink:href="qframe.xml#frameWidth-prop">frameWidth</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFrame">
<db:title>[explicit] QFrame::QFrame(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>f</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>Constructs a frame widget with frame style <db:link xlink:href="qframe.xml#Shape-enum">NoFrame</db:link> and a 1-pixel frame width.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> and <db:code role="parameter">f</db:code> arguments are passed to the <db:link xlink:href="qwidget.xml">QWidget</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QFrame">
<db:title>[virtual noexcept] QFrame::~QFrame()</db:title>
<db:para>Destroys the frame.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QFrame::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QFrame::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="frameStyle">
<db:title>int QFrame::frameStyle() const</db:title>
<db:para>Returns the frame style.</db:para>
<db:para>The default value is <db:link xlink:href="qframe.xml#Shadow-enum">QFrame::Plain</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qframe.xml#setFrameStyle">setFrameStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qframe.xml#frameShape-prop">frameShape</db:link>()</db:member>
<db:member><db:link xlink:href="qframe.xml#frameShadow-prop">frameShadow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[virtual protected] void QFrame::initStyleOption(QStyleOptionFrame *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initializes <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qframe.xml">QFrame</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionframe.xml">QStyleOptionFrame</db:link> but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QFrame::paintEvent(<db:emphasis>QPaintEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="setFrameStyle">
<db:title>void QFrame::setFrameStyle(int <db:emphasis>style</db:emphasis>)</db:title>
<db:para>Sets the frame style to <db:code role="parameter">style</db:code>.</db:para>
<db:para>The <db:code role="parameter">style</db:code> is the bitwise OR between a frame shape and a frame shadow style. See the picture of the frames in the main class documentation.</db:para>
<db:para>The frame shapes are given in <db:link xlink:href="qframe.xml#Shape-enum">QFrame::Shape</db:link> and the shadow styles in <db:link xlink:href="qframe.xml#Shadow-enum">QFrame::Shadow</db:link>.</db:para>
<db:para>If a mid-line width greater than 0 is specified, an additional line is drawn for <db:link xlink:href="qframe.xml#Shadow-enum">Raised</db:link> or <db:link xlink:href="qframe.xml#Shadow-enum">Sunken</db:link> <db:link xlink:href="qframe.xml#Shape-enum">Box</db:link>, <db:link xlink:href="qframe.xml#Shape-enum">HLine</db:link>, and <db:link xlink:href="qframe.xml#Shape-enum">VLine</db:link> frames. The mid-color of the current color group is used for drawing middle lines.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qframe.xml#frameStyle">frameStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QFrame::sizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
