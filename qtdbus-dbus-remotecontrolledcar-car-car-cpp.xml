<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>D-Bus Remote Controlled Car Example</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>QtDBus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to use Qt D-Bus to control a car from another application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;car.h&quot;
#include &amp;lt;QtWidgets/QtWidgets&amp;gt;
#include &amp;lt;qmath.h&amp;gt;

QRectF Car::boundingRect() const
{
    return QRectF(-35, -81, 70, 115);
}

Car::Car() : color(Qt::green), wheelsAngle(0), speed(0)
{
    startTimer(1000 / 33);
    setFlag(QGraphicsItem::ItemIsMovable, true);
    setFlag(QGraphicsItem::ItemIsFocusable, true);
}

void Car::accelerate()
{
    if (speed &amp;lt; 10)
        ++speed;
}

void Car::decelerate()
{
    if (speed &amp;gt; -10)
        --speed;
}

void Car::turnLeft()
{
    if (wheelsAngle &amp;gt; -30)
        wheelsAngle -= 5;
}

void Car::turnRight()
{
    if (wheelsAngle &amp;lt; 30)
       wheelsAngle += 5;
}

void Car::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)
{
    Q_UNUSED(option);
    Q_UNUSED(widget);

    painter-&amp;gt;setBrush(Qt::gray);
    painter-&amp;gt;drawRect(-20, -58, 40, 2); // front axel
    painter-&amp;gt;drawRect(-20, 7, 40, 2); // rear axel

    painter-&amp;gt;setBrush(color);
    painter-&amp;gt;drawRect(-25, -79, 50, 10); // front wing

    painter-&amp;gt;drawEllipse(-25, -48, 50, 20); // side pods
    painter-&amp;gt;drawRect(-25, -38, 50, 35); // side pods
    painter-&amp;gt;drawRect(-5, 9, 10, 10); // back pod

    painter-&amp;gt;drawEllipse(-10, -81, 20, 100); // main body

    painter-&amp;gt;drawRect(-17, 19, 34, 15); // rear wing

    painter-&amp;gt;setBrush(Qt::black);
    painter-&amp;gt;drawPie(-5, -51, 10, 15, 0, 180 * 16);
    painter-&amp;gt;drawRect(-5, -44, 10, 10); // cocpit

    painter-&amp;gt;save();
    painter-&amp;gt;translate(-20, -58);
    painter-&amp;gt;rotate(wheelsAngle);
    painter-&amp;gt;drawRect(-10, -7, 10, 15); // front left
    painter-&amp;gt;restore();

    painter-&amp;gt;save();
    painter-&amp;gt;translate(20, -58);
    painter-&amp;gt;rotate(wheelsAngle);
    painter-&amp;gt;drawRect(0, -7, 10, 15); // front left
    painter-&amp;gt;restore();

    painter-&amp;gt;drawRect(-30, 0, 12, 17); // rear left
    painter-&amp;gt;drawRect(19, 0, 12, 17);  // rear right
}

void Car::timerEvent(QTimerEvent *event)
{
    Q_UNUSED(event);

    const qreal axelDistance = 54;
    qreal wheelsAngleRads = qDegreesToRadians(wheelsAngle);
    qreal turnDistance = ::cos(wheelsAngleRads) * axelDistance * 2;
    qreal turnRateRads = wheelsAngleRads / turnDistance;  // rough estimate
    qreal turnRate = qRadiansToDegrees(turnRateRads);
    qreal rotation = speed * turnRate;

    setTransform(QTransform().rotate(rotation), true);
    setTransform(QTransform::fromTranslate(0, -speed), true);
    update();
}

</db:programlisting>
</db:article>
