<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCollatorSortKey Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcollatorsortkey.xml">QCollatorSortKey</db:link> class can be used to speed up string collation.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCollatorSortKey</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCollatorSortKey is part of <db:simplelist><db:member>i18n</db:member><db:member>string-processing</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qcollatorsortkey.xml">QCollatorSortKey</db:link> class is always created by <db:link xlink:href="qcollator.xml#sortKey">QCollator::sortKey</db:link>() and is used for fast strings collation, for example when collating many strings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollator.xml">QCollator</db:link></db:member>
<db:member><db:link xlink:href="qcollator.xml#sortKey">QCollator::sortKey</db:link>()</db:member>
<db:member><db:link xlink:href="qcollatorsortkey.xml#compare">compare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCollatorSortKey">
<db:title>QCollatorSortKey::QCollatorSortKey(const QCollatorSortKey &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCollatorSortKey</db:methodname>
<db:methodparam>
<db:type>const QCollatorSortKey &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCollatorSortKey(const QCollatorSortKey &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of the <db:code role="parameter">other</db:code> collator key.</db:para>
</db:section>
<db:section xml:id="dtor.QCollatorSortKey">
<db:title>QCollatorSortKey::~QCollatorSortKey()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCollatorSortKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCollatorSortKey()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the collator key.</db:para>
</db:section>
<db:section xml:id="compare">
<db:title>int QCollatorSortKey::compare(const QCollatorSortKey &amp;<db:emphasis>otherKey</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>compare</db:methodname>
<db:methodparam>
<db:type>const QCollatorSortKey &amp;</db:type>
<db:parameter>otherKey</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int compare(const QCollatorSortKey &amp;otherKey) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares this key to <db:code role="parameter">otherKey</db:code>, which must have been created by the same <db:link xlink:href="qcollator.xml">QCollator</db:link>'s sortKey() as this key. The comparison is performed in accordance with that <db:link xlink:href="qcollator.xml">QCollator</db:link>'s sort order.</db:para>
<db:para>Returns a negative value if this key sorts before <db:code role="parameter">otherKey</db:code>, 0 if the two keys are equal or a positive value if this key sorts after <db:code role="parameter">otherKey</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollatorsortkey.xml#operator-lt">operator&lt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QCollatorSortKey::swap(QCollatorSortKey &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QCollatorSortKey &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QCollatorSortKey &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this collator key with <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QCollatorSortKey &amp;QCollatorSortKey::operator=(const QCollatorSortKey &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCollatorSortKey &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QCollatorSortKey &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QCollatorSortKey &amp; operator=(const QCollatorSortKey &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this collator key.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QCollatorSortKey &amp;QCollatorSortKey::operator=(QCollatorSortKey &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCollatorSortKey &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QCollatorSortKey &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCollatorSortKey &amp; operator=(QCollatorSortKey &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this collator key.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt">
<db:title>bool operator&lt;(const QCollatorSortKey &amp;<db:emphasis>lhs</db:emphasis>, const QCollatorSortKey &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QCollatorSortKey &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QCollatorSortKey &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QCollatorSortKey &amp;lhs, const QCollatorSortKey &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Both keys must have been created by the same <db:link xlink:href="qcollator.xml">QCollator</db:link>'s sortKey(). Returns true if <db:code role="parameter">lhs</db:code> should be sorted before <db:code role="parameter">rhs</db:code>, according to the <db:link xlink:href="qcollator.xml">QCollator</db:link> that created them; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcollatorsortkey.xml#compare">QCollatorSortKey::compare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
