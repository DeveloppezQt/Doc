<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOAuth1Signature Class</db:title>
<db:productname>QtNetworkAuth</db:productname>
<db:edition>Qt Network Authorization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Network Authorization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Implements OAuth 1 signature methods.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOAuth1Signature</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS NetworkAuth)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::NetworkAuth)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += networkauth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOAuth1Signature is part of <db:simplelist><db:member>oauth</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>OAuth-authenticated requests can have two sets of credentials: those passed via the &quot;oauth_consumer_key&quot; parameter and those in the &quot;oauth_token&quot; parameter. In order for the server to verify the authenticity of the request and prevent unauthorized access, the client needs to prove that it is the rightful owner of the credentials. This is accomplished using the shared-secret (or RSA key) part of each set of credentials.</db:para>
<db:para>OAuth specifies three methods for the client to establish its rightful ownership of the credentials: &quot;HMAC-SHA1&quot;, &quot;RSA-SHA1&quot;, and &quot;PLAINTEXT&quot;. Each generates a &quot;signature&quot; with which the request is &quot;signed&quot;; the first two use a digest of the data signed in generating this, though the last does not. The &quot;RSA-SHA1&quot; method is not supported here; it would use an RSA key rather than the shared-secret associated with the client credentials.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="HttpRequestMethod-enum">
<db:title>enum QOAuth1Signature::HttpRequestMethod</db:title>
<db:enumsynopsis>
<db:enumname>HttpRequestMethod</db:enumname>
<db:enumitem>
<db:enumidentifier>Head</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Get</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Put</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Post</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Delete</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Custom</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Unknown</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Indicates the HTTP request method.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qoauth1signature.xml">QOAuth1Signature</db:link></db:emphasis>::<db:emphasis role="bold">HttpRequestMethod</db:emphasis>::Head</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>HEAD method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qoauth1signature.xml">QOAuth1Signature</db:link></db:emphasis>::<db:emphasis role="bold">HttpRequestMethod</db:emphasis>::Get</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>GET method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qoauth1signature.xml">QOAuth1Signature</db:link></db:emphasis>::<db:emphasis role="bold">HttpRequestMethod</db:emphasis>::Put</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>PUT method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qoauth1signature.xml">QOAuth1Signature</db:link></db:emphasis>::<db:emphasis role="bold">HttpRequestMethod</db:emphasis>::Post</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>POST method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qoauth1signature.xml">QOAuth1Signature</db:link></db:emphasis>::<db:emphasis role="bold">HttpRequestMethod</db:emphasis>::Delete</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>DELETE method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qoauth1signature.xml">QOAuth1Signature</db:link></db:emphasis>::<db:emphasis role="bold">HttpRequestMethod</db:emphasis>::Custom</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Identifies a custom method.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qoauth1signature.xml">QOAuth1Signature</db:link></db:emphasis>::<db:emphasis role="bold">HttpRequestMethod</db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Method not set.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOAuth1Signature">
<db:title>[explicit] QOAuth1Signature::QOAuth1Signature(const QUrl &amp;<db:emphasis>url</db:emphasis> = QUrl(), QOAuth1Signature::HttpRequestMethod <db:emphasis>method</db:emphasis> = HttpRequestMethod::Post, const QMultiMap&lt;QString, QVariant&gt; &amp;<db:emphasis>parameters</db:emphasis> = {})</db:title>
<db:constructorsynopsis>
<db:methodname>QOAuth1Signature</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QOAuth1Signature::HttpRequestMethod</db:type>
<db:parameter>method</db:parameter>
<db:initializer>HttpRequestMethod::Post</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QMultiMap&lt;QString, QVariant&gt; &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>{}</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth1Signature(const QUrl &amp;url, QOAuth1Signature::HttpRequestMethod method, const QMultiMap&lt;QString, QVariant&gt; &amp;parameters)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qoauth1signature.xml">QOAuth1Signature</db:link> using</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code role="parameter">url</db:code> as the target address</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">method</db:code> as the HTTP method used to send the request</db:para>
</db:listitem>
<db:listitem>
<db:para>and the given user <db:code role="parameter">parameters</db:code> to augment the request.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="QOAuth1Signature-1">
<db:title>QOAuth1Signature::QOAuth1Signature(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QString &amp;<db:emphasis>clientSharedKey</db:emphasis>, const QString &amp;<db:emphasis>tokenSecret</db:emphasis>, QOAuth1Signature::HttpRequestMethod <db:emphasis>method</db:emphasis> = HttpRequestMethod::Post, const QMultiMap&lt;QString, QVariant&gt; &amp;<db:emphasis>parameters</db:emphasis> = {})</db:title>
<db:constructorsynopsis>
<db:methodname>QOAuth1Signature</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>clientSharedKey</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>tokenSecret</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOAuth1Signature::HttpRequestMethod</db:type>
<db:parameter>method</db:parameter>
<db:initializer>HttpRequestMethod::Post</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QMultiMap&lt;QString, QVariant&gt; &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>{}</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth1Signature(const QUrl &amp;url, const QString &amp;clientSharedKey, const QString &amp;tokenSecret, QOAuth1Signature::HttpRequestMethod method, const QMultiMap&lt;QString, QVariant&gt; &amp;parameters)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qoauth1signature.xml">QOAuth1Signature</db:link> using</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code role="parameter">url</db:code> as the target address</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">clientSharedKey</db:code> as the user token used to verify the signature</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">tokenSecret</db:code> as the negotiated token used to verify the signature</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">method</db:code> as the HTTP method used to send the request</db:para>
</db:listitem>
<db:listitem>
<db:para>and the given user <db:code role="parameter">parameters</db:code> to augment the request.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="QOAuth1Signature-2">
<db:title>QOAuth1Signature::QOAuth1Signature(const QOAuth1Signature &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QOAuth1Signature</db:methodname>
<db:methodparam>
<db:type>const QOAuth1Signature &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth1Signature(const QOAuth1Signature &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QOAuth1Signature-3">
<db:title>QOAuth1Signature::QOAuth1Signature(QOAuth1Signature &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QOAuth1Signature</db:methodname>
<db:methodparam>
<db:type>QOAuth1Signature &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth1Signature(QOAuth1Signature &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qoauth1signature.xml">QOAuth1Signature</db:link> instance, taking over the private data <db:code role="parameter">other</db:code> was using.</db:para>
</db:section>
<db:section xml:id="dtor.QOAuth1Signature">
<db:title>QOAuth1Signature::~QOAuth1Signature()</db:title>
<db:destructorsynopsis>
<db:methodname>~QOAuth1Signature</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QOAuth1Signature()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qoauth1signature.xml">QOAuth1Signature</db:link>.</db:para>
</db:section>
<db:section xml:id="addRequestBody">
<db:title>void QOAuth1Signature::addRequestBody(const QUrlQuery &amp;<db:emphasis>body</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addRequestBody</db:methodname>
<db:methodparam>
<db:type>const QUrlQuery &amp;</db:type>
<db:parameter>body</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addRequestBody(const QUrlQuery &amp;body)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the request <db:code role="parameter">body</db:code> to the signature. When a POST request body contains arguments they should be included in the signed data.</db:para>
</db:section>
<db:section xml:id="clientSharedKey">
<db:title>QString QOAuth1Signature::clientSharedKey() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>clientSharedKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString clientSharedKey() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the user secret used to generate the signature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1signature.xml#setClientSharedKey">setClientSharedKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="customMethodString">
<db:title>[since 5.13] QByteArray QOAuth1Signature::customMethodString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>customMethodString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray customMethodString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the custom method string.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1signature.xml#setCustomMethodString">setCustomMethodString</db:link>()</db:member>
<db:member><db:link xlink:href="qoauth1signature.xml#httpRequestMethod">httpRequestMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hmacSha1">
<db:title>QByteArray QOAuth1Signature::hmacSha1() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>hmacSha1</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray hmacSha1() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates the HMAC-SHA1 signature using the client shared secret and, where available, token secret.</db:para>
</db:section>
<db:section xml:id="httpRequestMethod">
<db:title>QOAuth1Signature::HttpRequestMethod QOAuth1Signature::httpRequestMethod() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOAuth1Signature::HttpRequestMethod</db:type>
<db:methodname>httpRequestMethod</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth1Signature::HttpRequestMethod httpRequestMethod() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the request method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1signature.xml#setHttpRequestMethod">setHttpRequestMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert">
<db:title>void QOAuth1Signature::insert(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insert(const QString &amp;key, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a new pair <db:code role="parameter">key</db:code>, <db:code role="parameter">value</db:code> into the signature. When a POST request body contains arguments they should be included in the signed data.</db:para>
</db:section>
<db:section xml:id="keys">
<db:title>QList&lt;QString&gt; QOAuth1Signature::keys() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QString&gt;</db:type>
<db:methodname>keys</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QString&gt; keys() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the list of keys of parameters included in the signed data.</db:para>
</db:section>
<db:section xml:id="parameters">
<db:title>QMultiMap&lt;QString, QVariant&gt; QOAuth1Signature::parameters() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap&lt;QString, QVariant&gt;</db:type>
<db:methodname>parameters</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap&lt;QString, QVariant&gt; parameters() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the parameters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1signature.xml#setParameters">setParameters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="plainText">
<db:title>QByteArray QOAuth1Signature::plainText() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>plainText</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray plainText() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates the PLAINTEXT signature.</db:para>
</db:section>
<db:section xml:id="plainText-1">
<db:title>[static] QByteArray QOAuth1Signature::plainText(const QString &amp;<db:emphasis>clientSharedKey</db:emphasis>, const QString &amp;<db:emphasis>tokenSecret</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>plainText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>clientSharedKey</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>tokenSecret</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray plainText(const QString &amp;clientSharedKey, const QString &amp;tokenSecret)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates a PLAINTEXT signature from the client secret <db:code role="parameter">clientSharedKey</db:code> and the token secret <db:code role="parameter">tokenSecret</db:code>.</db:para>
</db:section>
<db:section xml:id="rsaSha1">
<db:title>QByteArray QOAuth1Signature::rsaSha1() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>rsaSha1</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray rsaSha1() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates the RSA-SHA1 signature.</db:para>
<db:note>
<db:para>Currently this method is not supported.</db:para>
</db:note>
</db:section>
<db:section xml:id="setClientSharedKey">
<db:title>void QOAuth1Signature::setClientSharedKey(const QString &amp;<db:emphasis>secret</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setClientSharedKey</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>secret</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setClientSharedKey(const QString &amp;secret)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">secret</db:code> as the user secret used to generate the signature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1signature.xml#clientSharedKey">clientSharedKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCustomMethodString">
<db:title>[since 5.13] void QOAuth1Signature::setCustomMethodString(const QByteArray &amp;<db:emphasis>verb</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCustomMethodString</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>verb</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCustomMethodString(const QByteArray &amp;verb)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a custom request method. Will set the <db:link xlink:href="qoauth1signature.xml#httpRequestMethod">httpRequestMethod</db:link> to <db:link xlink:href="qoauth1signature.xml#HttpRequestMethod-enum">QOAuth1Signature::HttpRequestMethod::Custom</db:link> and store the <db:code role="parameter">verb</db:code> to use it for the generation of the signature.</db:para>
<db:note>
<db:para>Using this method is required when working with custom verbs. Setting only the request method will fail, as the signure needs to know the actual verb.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1signature.xml#customMethodString">customMethodString</db:link>()</db:member>
<db:member><db:link xlink:href="qoauth1signature.xml#setHttpRequestMethod">setHttpRequestMethod</db:link>()</db:member>
<db:member><db:link xlink:href="qoauth1signature.xml#HttpRequestMethod-enum">HttpRequestMethod</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHttpRequestMethod">
<db:title>void QOAuth1Signature::setHttpRequestMethod(QOAuth1Signature::HttpRequestMethod <db:emphasis>method</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHttpRequestMethod</db:methodname>
<db:methodparam>
<db:type>QOAuth1Signature::HttpRequestMethod</db:type>
<db:parameter>method</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHttpRequestMethod(QOAuth1Signature::HttpRequestMethod method)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the request <db:code role="parameter">method</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1signature.xml#httpRequestMethod">httpRequestMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setParameters">
<db:title>void QOAuth1Signature::setParameters(const QMultiMap&lt;QString, QVariant&gt; &amp;<db:emphasis>parameters</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setParameters</db:methodname>
<db:methodparam>
<db:type>const QMultiMap&lt;QString, QVariant&gt; &amp;</db:type>
<db:parameter>parameters</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setParameters(const QMultiMap&lt;QString, QVariant&gt; &amp;parameters)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">parameters</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1signature.xml#parameters">parameters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTokenSecret">
<db:title>void QOAuth1Signature::setTokenSecret(const QString &amp;<db:emphasis>secret</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTokenSecret</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>secret</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTokenSecret(const QString &amp;secret)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">secret</db:code> as the negotiated secret used to generate the signature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1signature.xml#tokenSecret">tokenSecret</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUrl">
<db:title>void QOAuth1Signature::setUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUrl(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the URL to <db:code role="parameter">url</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1signature.xml#url">url</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QOAuth1Signature::swap(QOAuth1Signature &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QOAuth1Signature &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QOAuth1Signature &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps signature <db:code role="parameter">other</db:code> with this signature. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="take">
<db:title>QVariant QOAuth1Signature::take(const QString &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVariant</db:type>
<db:methodname>take</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant take(const QString &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">key</db:code> and any associated value from the signed data.</db:para>
</db:section>
<db:section xml:id="tokenSecret">
<db:title>QString QOAuth1Signature::tokenSecret() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>tokenSecret</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString tokenSecret() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the negotiated secret used to generate the signature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1signature.xml#setTokenSecret">setTokenSecret</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="url">
<db:title>QUrl QOAuth1Signature::url() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>url</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl url() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the URL.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qoauth1signature.xml#setUrl">setUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>QVariant QOAuth1Signature::value(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>defaultValue</db:emphasis> = QVariant()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>defaultValue</db:parameter>
<db:initializer>QVariant()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant value(const QString &amp;key, const QVariant &amp;defaultValue) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value associated with <db:code role="parameter">key</db:code>, if present in the signed data, otherwise <db:code role="parameter">defaultValue</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QOAuth1Signature &amp;QOAuth1Signature::operator=(QOAuth1Signature &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QOAuth1Signature &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QOAuth1Signature &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QOAuth1Signature &amp; operator=(QOAuth1Signature &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assignment operator.</db:para>
</db:section>
</db:section>
</db:article>
