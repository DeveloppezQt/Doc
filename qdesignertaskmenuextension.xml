<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDesignerTaskMenuExtension Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> class allows you to add custom menu entries to Qt Designer's task menu.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDesignerTaskMenuExtension</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Designer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Designer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> provides an interface for creating custom task menu extensions. It is typically used to create task menu entries that are specific to a plugin in <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para><db:emphasis>Qt Designer</db:emphasis> uses the <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> to feed its task menu. Whenever a task menu is requested, <db:emphasis>Qt Designer</db:emphasis> will query for the selected widget's task menu extension.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/taskmenuextension-example.webp"/>
</db:imageobject>
</db:mediaobject>
<db:para>A task menu extension is a collection of QActions. The actions appear as entries in the task menu when the plugin with the specified extension is selected. The image above shows the custom <db:emphasis role="bold">Edit State...</db:emphasis> action which appears in addition to <db:emphasis>Qt Designer</db:emphasis>'s default task menu entries: <db:emphasis role="bold">Cut</db:emphasis>, <db:emphasis role="bold">Copy</db:emphasis>, <db:emphasis role="bold">Paste</db:emphasis> etc.</db:para>
<db:para>To create a custom task menu extension, your extension class must inherit from both <db:link xlink:href="qobject.xml">QObject</db:link> and <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link>. For example:</db:para>
<db:programlisting language="cpp">class MyTaskMenuExtension : public QObject,
        public QDesignerTaskMenuExtension
{
    Q_OBJECT
    Q_INTERFACES(QDesignerTaskMenuExtension)

public:
    MyTaskMenuExtension(MyCustomWidget *widget, QObject *parent);

    QAction *preferredEditAction() const;
    QList&amp;lt;QAction *&amp;gt; taskActions() const;

private slots:
    void mySlot();

private:
    MyCustomWidget *widget;
    QAction *myAction;
};
</db:programlisting>
<db:para>Since we are implementing an interface, we must ensure that it is made known to the meta-object system using the <db:link xlink:href="qobject.xml#Q_INTERFACES">Q_INTERFACES</db:link>() macro. This enables <db:emphasis>Qt Designer</db:emphasis> to use the <db:link xlink:href="qobject.xml#qobject_cast-1">qobject_cast</db:link>() function to query for supported interfaces using nothing but a <db:link xlink:href="qobject.xml">QObject</db:link> pointer.</db:para>
<db:para>You must reimplement the <db:link xlink:href="qdesignertaskmenuextension.xml#taskActions">taskActions</db:link>() function to return a list of actions that will be included in <db:emphasis>Qt Designer</db:emphasis> task menu. Optionally, you can reimplement the <db:link xlink:href="qdesignertaskmenuextension.xml#preferredEditAction">preferredEditAction</db:link>() function to set the action that is invoked when selecting your plugin and pressing <db:emphasis role="bold">F2</db:emphasis>. The preferred edit action must be one of the actions returned by <db:link xlink:href="qdesignertaskmenuextension.xml#taskActions">taskActions</db:link>() and, if it's not defined, pressing the <db:emphasis role="bold">F2</db:emphasis> key will simply be ignored.</db:para>
<db:para>In <db:emphasis>Qt Designer</db:emphasis>, extensions are not created until they are required. A task menu extension, for example, is created when you click the right mouse button over a widget in <db:emphasis>Qt Designer</db:emphasis>'s workspace. For that reason you must also construct an extension factory, using either <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> or a subclass, and register it using <db:emphasis>Qt Designer</db:emphasis>'s <db:link xlink:href="qextensionmanager.xml">extension manager</db:link>.</db:para>
<db:para>When a task menu extension is required, <db:emphasis>Qt Designer</db:emphasis>'s <db:link xlink:href="qextensionmanager.xml">extension manager</db:link> will run through all its registered factories calling <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() for each until it finds one that is able to create a task menu extension for the selected widget. This factory will then make an instance of the extension.</db:para>
<db:para>There are four available types of extensions in <db:emphasis>Qt Designer</db:emphasis>: <db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link>, <db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link>, <db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link>, and <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link>. <db:emphasis>Qt Designer</db:emphasis>'s behavior is the same whether the requested extension is associated with a container, a member sheet, a property sheet or a task menu.</db:para>
<db:para>The <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> class provides a standard extension factory, and can also be used as an interface for custom extension factories. You can either create a new <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link> and reimplement the <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() function. For example:</db:para>
<db:programlisting language="cpp">QObject *ANewExtensionFactory::createExtension(QObject *object,
        const QString &amp;amp;iid, QObject *parent) const
{
    if (iid != Q_TYPEID(QDesignerTaskMenuExtension))
        return 0;

    if (MyCustomWidget *widget = qobject_cast&amp;lt;MyCustomWidget*&amp;gt;(object))
        return new MyTaskMenuExtension(widget, parent);

    return 0;
}
</db:programlisting>
<db:para>Or you can use an existing factory, expanding the <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() function to make the factory able to create a task menu extension as well. For example:</db:para>
<db:programlisting language="cpp">QObject *AGeneralExtensionFactory::createExtension(QObject *object,
        const QString &amp;amp;iid, QObject *parent) const
{
    MyCustomWidget *widget = qobject_cast&amp;lt;MyCustomWidget*&amp;gt;(object);

    if (widget &amp;amp;&amp;amp; (iid == Q_TYPEID(QDesignerContainerExtension))) {
        return new MyContainerExtension(widget, parent);

    } else if (widget &amp;amp;&amp;amp; (iid == Q_TYPEID(QDesignerTaskMenuExtension))) {
        return new MyTaskMenuExtension(widget, parent);

    } else {
        return 0;
    }
}
</db:programlisting>
<db:para>For a complete example using the <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> class, see the <db:link xlink:href="qtdesigner-taskmenuextension-example.xml">Task Menu Extension example</db:link>. The example shows how to create a custom widget plugin for <db:emphasis>Qt Designer</db:emphasis>, and how to to use the <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> class to add custom items to <db:emphasis>Qt Designer</db:emphasis>'s task menu.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link></db:member>
<db:member><db:link xlink:href="qextensionmanager.xml">QExtensionManager</db:link></db:member>
<db:member><db:link xlink:href="designer-creating-custom-widgets-extensions.xml">Creating Custom Widget Extensions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QDesignerTaskMenuExtension">
<db:title>[virtual] QDesignerTaskMenuExtension::~QDesignerTaskMenuExtension()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDesignerTaskMenuExtension</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDesignerTaskMenuExtension()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the task menu extension.</db:para>
</db:section>
<db:section xml:id="preferredEditAction">
<db:title>[virtual] QAction *QDesignerTaskMenuExtension::preferredEditAction() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QAction *</db:type>
<db:methodname>preferredEditAction</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAction * preferredEditAction() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the action that is invoked when selecting a plugin with the specified extension and pressing <db:emphasis role="bold">F2</db:emphasis>.</db:para>
<db:para>The action must be one of the actions returned by <db:link xlink:href="qdesignertaskmenuextension.xml#taskActions">taskActions</db:link>().</db:para>
</db:section>
<db:section xml:id="taskActions">
<db:title>[pure virtual] QList&lt;QAction *&gt; QDesignerTaskMenuExtension::taskActions() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAction *&gt;</db:type>
<db:methodname>taskActions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAction *&gt; taskActions() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the task menu extension as a list of actions which will be included in <db:emphasis>Qt Designer</db:emphasis>'s task menu when a plugin with the specified extension is selected.</db:para>
<db:para>The function must be reimplemented to add actions to the list.</db:para>
</db:section>
</db:section>
</db:article>
