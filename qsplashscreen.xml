<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSplashScreen Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsplashscreen.xml">QSplashScreen</db:link> widget provides a splash screen that can be shown during application startup.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSplashScreen</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A splash screen is a widget that is usually displayed when an application is being started. Splash screens are often used for applications that have long start up times (e.g. database or networking applications that take time to establish connections) to provide the user with feedback that the application is loading.</db:para>
<db:para>The splash screen appears in the center of the screen. It may be useful to add the <db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowStaysOnTopHint</db:link> to the splash widget's window flags if you want to keep it above all the other windows on the desktop.</db:para>
<db:para>Some X11 window managers do not support the &quot;stays on top&quot; flag. A solution is to set up a timer that periodically calls <db:link xlink:href="qwidget.xml#raise">raise</db:link>() on the splash screen to simulate the &quot;stays on top&quot; effect.</db:para>
<db:para>The most common usage is to show a splash screen before the main widget is displayed on the screen. This is illustrated in the following code snippet in which a splash screen is displayed and some initialization tasks are performed before the application's main window is shown:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QPixmap pixmap(&quot;:/splash.png&quot;);
    QSplashScreen splash(pixmap);
    splash.show();
    app.processEvents();
    ...
    QMainWindow window;
    window.show();
    splash.finish(&amp;window);
    return app.exec();
}
</db:programlisting>
<db:para>The user can hide the splash screen by clicking on it with the mouse. Since the splash screen is typically displayed before the event loop has started running, it is necessary to periodically call <db:link xlink:href="qcoreapplication.xml#processEvents">QApplication::processEvents</db:link>() to receive the mouse clicks.</db:para>
<db:para>It is sometimes useful to update the splash screen with messages, for example, announcing connections established or modules loaded as the application starts up:</db:para>
<db:programlisting language="cpp">QPixmap pixmap(&quot;:/splash.png&quot;);
QSplashScreen *splash = new QSplashScreen(pixmap);
splash-&gt;show();

... // Loading some items
splash-&gt;showMessage(&quot;Loaded modules&quot;);

qApp-&gt;processEvents();

... // Establishing connections
splash-&gt;showMessage(&quot;Established connections&quot;);

qApp-&gt;processEvents();
</db:programlisting>
<db:para><db:link xlink:href="qsplashscreen.xml">QSplashScreen</db:link> supports this with the <db:link xlink:href="qsplashscreen.xml#showMessage">showMessage</db:link>() function. If you wish to do your own drawing you can get a pointer to the pixmap used in the splash screen with <db:link xlink:href="qsplashscreen.xml#pixmap">pixmap</db:link>(). Alternatively, you can subclass <db:link xlink:href="qsplashscreen.xml">QSplashScreen</db:link> and reimplement <db:link xlink:href="qsplashscreen.xml#drawContents">drawContents</db:link>().</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSplashScreen">
<db:title>[explicit] QSplashScreen::QSplashScreen(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis> = QPixmap(), Qt::WindowFlags <db:emphasis>f</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>Construct a splash screen that will display the <db:code role="parameter">pixmap</db:code>.</db:para>
<db:para>There should be no need to set the widget flags, <db:code role="parameter">f</db:code>, except perhaps <db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowStaysOnTopHint</db:link>.</db:para>
</db:section>
<db:section xml:id="QSplashScreen-2">
<db:title>QSplashScreen::QSplashScreen(QWidget *<db:emphasis>parent</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis> = QPixmap(), Qt::WindowFlags <db:emphasis>f</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function allows you to specify a parent for your splashscreen. The typical use for this constructor is if you have a multiple screens and prefer to have the splash screen on a different screen than your primary one. In that case pass the proper desktop() as the <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSplashScreen">
<db:title>[virtual noexcept] QSplashScreen::~QSplashScreen()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="clearMessage">
<db:title>void QSplashScreen::clearMessage()</db:title>
<db:para>Removes the message being displayed on the splash screen</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplashscreen.xml#showMessage">showMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawContents">
<db:title>[virtual protected] void QSplashScreen::drawContents(QPainter *<db:emphasis>painter</db:emphasis>)</db:title>
<db:para>Draw the contents of the splash screen using painter <db:code role="parameter">painter</db:code>. The default implementation draws the message passed by <db:link xlink:href="qsplashscreen.xml#showMessage">showMessage</db:link>(). Reimplement this function if you want to do your own drawing on the splash screen.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QSplashScreen::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="finish">
<db:title>void QSplashScreen::finish(QWidget *<db:emphasis>mainWin</db:emphasis>)</db:title>
<db:para>Makes the splash screen wait until the widget <db:code role="parameter">mainWin</db:code> is displayed before calling <db:link xlink:href="qwidget.xml#close">close</db:link>() on itself.</db:para>
</db:section>
<db:section xml:id="message">
<db:title>[since 5.2] QString QSplashScreen::message() const</db:title>
<db:para>Returns the message that is currently displayed on the splash screen.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplashscreen.xml#showMessage">showMessage</db:link>()</db:member>
<db:member><db:link xlink:href="qsplashscreen.xml#clearMessage">clearMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="messageChanged">
<db:title>void QSplashScreen::messageChanged(const QString &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:para>This signal is emitted when the message on the splash screen changes. <db:code role="parameter">message</db:code> is the new message and is a null-string when the message has been removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplashscreen.xml#showMessage">showMessage</db:link>()</db:member>
<db:member><db:link xlink:href="qsplashscreen.xml#clearMessage">clearMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QSplashScreen::mousePressEvent(<db:emphasis>QMouseEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="pixmap">
<db:title>const QPixmap QSplashScreen::pixmap() const</db:title>
<db:para>Returns the pixmap that is used in the splash screen. The image does not have any of the text drawn by <db:link xlink:href="qsplashscreen.xml#showMessage">showMessage</db:link>() calls.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplashscreen.xml#setPixmap">setPixmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="repaint">
<db:title>void QSplashScreen::repaint()</db:title>
<db:para>This overrides <db:link xlink:href="qwidget.xml#repaint">QWidget::repaint</db:link>(). It differs from the standard repaint function in that it also calls <db:link xlink:href="qcoreapplication.xml#flush">QApplication::flush</db:link>() to ensure the updates are displayed, even when there is no event loop present.</db:para>
</db:section>
<db:section xml:id="setPixmap">
<db:title>void QSplashScreen::setPixmap(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>Sets the pixmap that will be used as the splash screen's image to <db:code role="parameter">pixmap</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsplashscreen.xml#pixmap">pixmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showMessage">
<db:title>void QSplashScreen::showMessage(const QString &amp;<db:emphasis>message</db:emphasis>, int <db:emphasis>alignment</db:emphasis> = Qt::AlignLeft, const QColor &amp;<db:emphasis>color</db:emphasis> = Qt::black)</db:title>
<db:para>Draws the <db:code role="parameter">message</db:code> text onto the splash screen with color <db:code role="parameter">color</db:code> and aligns the text according to the flags in <db:code role="parameter">alignment</db:code>.</db:para>
<db:para>To make sure the splash screen is repainted immediately, you can call <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>'s <db:link xlink:href="qcoreapplication.xml#processEvents">processEvents</db:link>() after the call to showMessage(). You usually want this to make sure that the message is kept up to date with what your application is doing (e.g., loading files).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:member>
<db:member><db:link xlink:href="qsplashscreen.xml#clearMessage">clearMessage</db:link>()</db:member>
<db:member><db:link xlink:href="qsplashscreen.xml#message">message</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
