<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TableViewDelegate QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A delegate that can be assigned to a <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>.</db:para>
<db:para>This type was introduced in Qt 6.9.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.9</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-itemdelegate.xml">ItemDelegate</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TableViewDelegate is part of <db:simplelist><db:member>qtquickcontrols-delegates</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-tableviewdelegate.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A <db:link xlink:href="qml-qtquick-controls-tableviewdelegate.xml">TableViewDelegate</db:link> is a delegate that can be assigned to the <db:link xlink:href="qml-qtquick-tableview.xml#delegate-prop">delegate property</db:link> of a <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>. It renders each cell of the table in the view using the application style.</db:para>
<db:programlisting language="cpp">TableView {
    anchors.fill: parent
    delegate: TableViewDelegate {}
    // model: yourModel
}
</db:programlisting>
<db:para><db:link xlink:href="qml-qtquick-controls-tableviewdelegate.xml">TableViewDelegate</db:link> inherits <db:link xlink:href="qml-qtquick-controls-itemdelegate.xml">ItemDelegate</db:link>, which means that it's composed of two items: a <db:link xlink:href="qml-qtquick-controls-control.xml#background-prop">background</db:link> and a <db:link xlink:href="qml-qtquick-controls-control.xml#contentItem-prop">contentItem</db:link>.</db:para>
<db:para>The position of the contentItem is controlled with <db:link xlink:href="qml-qtquick-controls-control.xml#padding-prop">padding</db:link>.</db:para>
<db:section xml:id="interacting-with-pointers">
<db:title>Interacting with pointers</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls-tableviewdelegate.xml">TableViewDelegate</db:link> inherits <db:link xlink:href="qml-qtquick-controls-itemdelegate.xml">ItemDelegate</db:link>. This means that it will emit signals such as <db:link xlink:href="qml-qtquick-controls-abstractbutton.xml#clicked-signal">clicked</db:link> when the user clicks on the delegate. You can connect to this signal to implement application-specific functionality.</db:para>
<db:para>However, the <db:link xlink:href="qml-qtquick-controls-itemdelegate.xml">ItemDelegate</db:link> API does not give you information about the position of the click, or which modifiers are being held. If this is needed, a better approach would be to use pointer handlers, for example:</db:para>
<db:programlisting language="cpp">TableView {
    id: tableView
    delegate: TableViewDelegate {
        TapHandler {
            acceptedButtons: Qt.RightButton
            onTapped: someContextMenu.open()
        }

        TapHandler {
            acceptedModifiers: Qt.ControlModifier
            onTapped: tableView.doSomethingToCell(row, column)
        }
    }
}
</db:programlisting>
<db:note>
<db:para>If you want to disable the default behavior that occurs when the user clicks on the delegate (like changing the current index), you can set <db:link xlink:href="qml-qtquick-tableview.xml#pointerNavigationEnabled-prop">pointerNavigationEnabled</db:link> to <db:code>false</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="editing-cells-in-the-table">
<db:title>Editing cells in the table</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls-tableviewdelegate.xml">TableViewDelegate</db:link> has a default <db:link xlink:href="qml-qtquick-tableview.xml#editDelegate-attached-prop">edit delegate</db:link> assigned. If <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> has <db:link xlink:href="qml-qtquick-tableview.xml#editTriggers-prop">edit triggers</db:link> set, and the <db:link xlink:href="qml-qtquick-tableview.xml#model-prop">model</db:link> has support for <db:link xlink:href="qml-qtquick-tableview.xml#editing-cells">editing model items</db:link>, then the user can activate any of the edit triggers to edit the text of the <db:link xlink:href="qml-qtquick-controls-tableviewdelegate.xml#current-prop">current</db:link> table cell.</db:para>
<db:para>The default edit delegate will use the <db:code>Qt.EditRole</db:code> to read and write data to the <db:link xlink:href="qml-qtquick-tableview.xml#model-prop">model</db:link>. If you need to use another role, or otherwise have needs outside what the default edit delegate offers, you can always assign your own delegate to <db:link xlink:href="qml-qtquick-tableview.xml#editDelegate-attached-prop">TableView.editDelegate</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols-customize.xml#customizing-tableviewdelegate">Customizing TableViewDelegate</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="current-prop">
<db:title>current : bool</db:title>
<db:para>This property holds whether or not the delegate represents the <db:link xlink:href="qitemselectionmodel.xml#currentIndex">current index</db:link> in the <db:link xlink:href="qml-qtquick-tableview.xml#selectionModel-prop">selection model</db:link>.</db:para>
</db:section>
<db:section xml:id="editing-prop">
<db:title>editing : bool</db:title>
<db:para>This property holds whether or not the delegate is being <db:link xlink:href="qml-qtquick-tableview.xml#editing-cells">edited</db:link>.</db:para>
</db:section>
<db:section xml:id="selected-prop">
<db:title>selected : bool</db:title>
<db:para>This property holds whether or not the delegate represents a <db:link xlink:href="qitemselectionmodel.xml#selection">selected index</db:link> in the <db:link xlink:href="qml-qtquick-tableview.xml#selectionModel-prop">selection model</db:link>.</db:para>
</db:section>
<db:section xml:id="tableView-prop">
<db:title>tableView : TableView</db:title>
<db:para>This property points to the <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> that contains the delegate item.</db:para>
</db:section>
</db:section>
</db:article>
