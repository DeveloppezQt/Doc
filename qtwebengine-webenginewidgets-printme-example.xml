<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Widgets PrintMe Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to print web pages using Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> Widgets.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/printme-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>PrintMe</db:emphasis> demonstrates how to use the <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> and <db:link xlink:href="qprintdialog.xml">QPrintDialog</db:link> classes to print a web page. Further, it shows how to implement print preview by using the <db:link xlink:href="qprintpreviewdialog.xml">QPrintPreviewDialog</db:link> class. For completeness, it also illustrates how to trigger a printing request within JavaScript.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="simple-html-page">
<db:title>Simple HTML Page</db:title>
<db:para>In this example, we create an internal HTML page that is added as a resource collection file (.qrc). The page shows only a small HTML message box that explains how to trigger printing by using keyboard shortcuts or clicking a button. The button has the JavaScript <db:code>onclick</db:code> event attribute that calls the JavaScript <db:code>window.print()</db:code> function.</db:para>
<db:programlisting language="cpp">&amp;lt;html lang=&quot;en&quot;&amp;gt;
   &amp;lt;head&amp;gt;
      &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
      &amp;lt;title&amp;gt;PrintMe&amp;lt;/title&amp;gt;
      &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&amp;gt;
      &amp;lt;script&amp;gt;
      function printNow() {
         window.print();
      }
      &amp;lt;/script&amp;gt;
   &amp;lt;/head&amp;gt;
   &amp;lt;body&amp;gt;
      &amp;lt;form class=&quot;form&quot;&amp;gt;
         &amp;lt;img class=&quot;logo&quot; src=&quot;icon.svg&quot; alt=&quot;qtwebengine&quot;&amp;gt;
         &amp;lt;div class=&quot;header&quot;&amp;gt;
            &amp;lt;h1&amp;gt;Hello Paper World!&amp;lt;/h1&amp;gt;
            &amp;lt;h2&amp;gt;Press Ctrl+p to print with print preview&amp;lt;/h2&amp;gt;
            &amp;lt;h2&amp;gt;Press Ctrl+Shift+p to print without print preview&amp;lt;/h2&amp;gt;
            &amp;lt;h2&amp;gt;Click the button to print using JavaScript&amp;lt;/h2&amp;gt;
            &amp;lt;p class=&quot;button&quot; onclick=&quot;printNow()&quot;&amp;gt;Print Now&amp;lt;/p&amp;gt;
      &amp;lt;/form&amp;gt;
   &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
</db:programlisting>
</db:section>
<db:section xml:id="main-function">
<db:title>Main Function</db:title>
<db:para>In the <db:code>main</db:code> function, we first instantiate a <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> and set the URL to our internal HTML page. Next, we create a <db:code>PrintHandler</db:code> instance and pass the requested page. For convenience, we also create keyboard shortcuts that can be used to call a print dialog or print preview dialog.</db:para>
<db:programlisting language="cpp">    QWebEngineView view;
    view.setUrl(QUrl(QStringLiteral(&quot;qrc:/index.html&quot;)));
    view.resize(1024, 750);
    view.show();

    PrintHandler handler;
    handler.setPage(view.page());

    auto printPreviewShortCut = new QShortcut(QKeySequence(Qt::CTRL + Qt::Key_P), &amp;amp;view);
    auto printShortCut = new QShortcut(QKeySequence(Qt::CTRL + Qt::SHIFT + Qt::Key_P), &amp;amp;view);

    QObject::connect(printPreviewShortCut, &amp;amp;QShortcut::activated, &amp;amp;handler, &amp;amp;PrintHandler::printPreview);
    QObject::connect(printShortCut, &amp;amp;QShortcut::activated, &amp;amp;handler, &amp;amp;PrintHandler::print);
</db:programlisting>
</db:section>
<db:section xml:id="print-handler">
<db:title>Print Handler</db:title>
<db:para>In the <db:code>PrintHandler</db:code> function, we first implement <db:code>printPreview()</db:code>, where we instantiate <db:link xlink:href="qprinter.xml">QPrinter</db:link> together with <db:link xlink:href="qprintpreviewdialog.xml">QPrintPreviewDialog</db:link>. We need the <db:link xlink:href="qprintpreviewdialog.xml#paintRequested">QPrintPreviewDialog::paintRequested</db:link> handle to generate a set of preview pages.</db:para>
<db:programlisting language="cpp">void PrintHandler::printPreview()
{
    if (!m_page)
        return;
    if (m_inPrintPreview)
        return;
    m_inPrintPreview = true;
    QPrinter printer;
    QPrintPreviewDialog preview(&amp;amp;printer, m_page-&amp;gt;view());
    connect(&amp;amp;preview, &amp;amp;QPrintPreviewDialog::paintRequested,
            this, &amp;amp;PrintHandler::printDocument);
    preview.exec();
    m_inPrintPreview = false;
}
</db:programlisting>
<db:para>Now we can implement the <db:code>PrintHandler::printDocument()</db:code> slot, which is called in response to the <db:link xlink:href="qprintpreviewdialog.xml#paintRequested">QPrintPreviewDialog::paintRequested</db:link> signal.</db:para>
<db:programlisting language="cpp">void PrintHandler::printDocument(QPrinter *printer)
{
    QEventLoop loop;
    bool result;
    auto printPreview = [&amp;amp;](bool success) { result = success; loop.quit(); };
    m_page-&amp;gt;print(printer, std::move(printPreview));
    loop.exec();
    if (!result) {
        QPainter painter;
        if (painter.begin(printer)) {
            QFont font = painter.font();
            font.setPixelSize(20);
            painter.setFont(font);
            painter.drawText(QPointF(10,25),
                             QStringLiteral(&quot;Could not generate print preview.&quot;));

            painter.end();
        }
    }
}
</db:programlisting>
<db:para>To do actual painting on a printer, we call the <db:link xlink:href="qwebenginepage.xml#print">QWebEnginePage::print</db:link>() function. Because this call blocks the main event loop, we need to create a local one. We begin the local event loop by calling <db:link xlink:href="qeventloop.xml#exec">QEventLoop::exec</db:link>(). When the local event loop terminates, we check for <db:code>result</db:code> and report any errors that occurred.</db:para>
<db:para>The last function we implement, <db:code>PrintHandler::print()</db:code>, is trivial, because it simply opens <db:link xlink:href="qprintdialog.xml">QPrintDialog</db:link> and calls the previously implemented <db:code>PrintHandler::printDocument()</db:code>.</db:para>
<db:programlisting language="cpp">void PrintHandler::print()
{
    QPrinter printer(QPrinter::HighResolution);
    QPrintDialog dialog(&amp;amp;printer, m_page-&amp;gt;view());
    if (dialog.exec() != QDialog::Accepted)
        return;
    printDocument(&amp;amp;printer);
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/printme/data/data.qrc">webenginewidgets/printme/data/data.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/printme/data/icon.svg">webenginewidgets/printme/data/icon.svg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/printme/data/index.html">webenginewidgets/printme/data/index.html</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/printme/data/style.css">webenginewidgets/printme/data/style.css</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/printme/main.cpp">webenginewidgets/printme/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/printme/printhandler.cpp">webenginewidgets/printme/printhandler.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/printme/printhandler.h">webenginewidgets/printme/printhandler.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/printme/printme.pro">webenginewidgets/printme/printme.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
