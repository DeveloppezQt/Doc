<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPaintDevice Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> class is the base class of objects that can be painted on with <db:link xlink:href="qpainter.xml">QPainter</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPaintDevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qimage.xml" xlink:role="class">QImage</db:link>, <db:link xlink:href="qpagedpaintdevice.xml" xlink:role="class">QPagedPaintDevice</db:link>, <db:link xlink:href="qpaintdevicewindow.xml" xlink:role="class">QPaintDeviceWindow</db:link>, <db:link xlink:href="qpicture.xml" xlink:role="class">QPicture</db:link>, and <db:link xlink:href="qpixmap.xml" xlink:role="class">QPixmap</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPaintDevice is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A paint device is an abstraction of a two-dimensional space that can be drawn on using a <db:link xlink:href="qpainter.xml">QPainter</db:link>. Its default coordinate system has its origin located at the top-left position. X increases to the right and Y increases downwards. The unit is one pixel.</db:para>
<db:para>The drawing capabilities of <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> are currently implemented by the QWidget, <db:link xlink:href="qimage.xml">QImage</db:link>, <db:link xlink:href="qpixmap.xml">QPixmap</db:link>, <db:link xlink:href="qpicture.xml">QPicture</db:link>, and QPrinter subclasses.</db:para>
<db:para>To implement support for a new backend, you must derive from <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> and reimplement the virtual <db:link xlink:href="qpaintdevice.xml#paintEngine">paintEngine</db:link>() function to tell <db:link xlink:href="qpainter.xml">QPainter</db:link> which paint engine should be used to draw on this particular device. Note that you also must create a corresponding paint engine to be able to draw on the device, i.e derive from <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> and reimplement its virtual functions.</db:para>
<db:warning>
<db:para>Qt requires that a <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> object exists before any paint devices can be created. Paint devices access window system resources, and these resources are not initialized before an application object is created.</db:para>
</db:warning>
<db:para>The <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> class provides several functions returning the various device metrics: The <db:link xlink:href="qpaintdevice.xml#depth">depth</db:link>() function returns its bit depth (number of bit planes). The <db:link xlink:href="qpaintdevice.xml#height">height</db:link>() function returns its height in default coordinate system units (e.g. pixels for <db:link xlink:href="qpixmap.xml">QPixmap</db:link> and QWidget) while <db:link xlink:href="qpaintdevice.xml#heightMM">heightMM</db:link>() returns the height of the device in millimeters. Similiarily, the <db:link xlink:href="qpaintdevice.xml#width">width</db:link>() and <db:link xlink:href="qpaintdevice.xml#widthMM">widthMM</db:link>() functions return the width of the device in default coordinate system units and in millimeters, respectively. Alternatively, the protected <db:link xlink:href="qpaintdevice.xml#metric">metric</db:link>() function can be used to retrieve the metric information by specifying the desired <db:link xlink:href="qpaintdevice.xml#PaintDeviceMetric-enum">PaintDeviceMetric</db:link> as argument.</db:para>
<db:para>The <db:link xlink:href="qpaintdevice.xml#logicalDpiX">logicalDpiX</db:link>() and <db:link xlink:href="qpaintdevice.xml#logicalDpiY">logicalDpiY</db:link>() functions return the horizontal and vertical resolution of the device in dots per inch. The <db:link xlink:href="qpaintdevice.xml#physicalDpiX">physicalDpiX</db:link>() and <db:link xlink:href="qpaintdevice.xml#physicalDpiY">physicalDpiY</db:link>() functions also return the resolution of the device in dots per inch, but note that if the logical and physical resolution differ, the corresponding <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> must handle the mapping. Finally, the <db:link xlink:href="qpaintdevice.xml#colorCount">colorCount</db:link>() function returns the number of different colors available for the paint device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:member>
<db:member><db:link xlink:href="qpainter.xml">QPainter</db:link></db:member>
<db:member><db:link xlink:href="coordsys.xml">Coordinate System</db:link></db:member>
<db:member><db:link xlink:href="paintsystem.xml">Paint System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PaintDeviceMetric-enum">
<db:title>enum QPaintDevice::PaintDeviceMetric</db:title>
<db:enumsynopsis>
<db:enumname>PaintDeviceMetric</db:enumname>
<db:enumitem>
<db:enumidentifier>PdmWidth</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdmHeight</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdmWidthMM</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdmHeightMM</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdmNumColors</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdmDepth</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdmDpiX</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdmDpiY</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdmPhysicalDpiX</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdmPhysicalDpiY</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdmDevicePixelRatio</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdmDevicePixelRatioScaled</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Describes the various metrics of a paint device.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link></db:emphasis>::PdmWidth</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The width of the paint device in default coordinate system units (e.g. pixels for <db:link xlink:href="qpixmap.xml">QPixmap</db:link> and QWidget). See also <db:link xlink:href="qpaintdevice.xml#width">width</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link></db:emphasis>::PdmHeight</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The height of the paint device in default coordinate system units (e.g. pixels for <db:link xlink:href="qpixmap.xml">QPixmap</db:link> and QWidget). See also <db:link xlink:href="qpaintdevice.xml#height">height</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link></db:emphasis>::PdmWidthMM</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The width of the paint device in millimeters. See also <db:link xlink:href="qpaintdevice.xml#widthMM">widthMM</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link></db:emphasis>::PdmHeightMM</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The height of the paint device in millimeters. See also <db:link xlink:href="qpaintdevice.xml#heightMM">heightMM</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link></db:emphasis>::PdmNumColors</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The number of different colors available for the paint device. See also <db:link xlink:href="qpaintdevice.xml#colorCount">colorCount</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link></db:emphasis>::PdmDepth</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The bit depth (number of bit planes) of the paint device. See also <db:link xlink:href="qpaintdevice.xml#depth">depth</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link></db:emphasis>::PdmDpiX</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The horizontal resolution of the device in dots per inch. See also <db:link xlink:href="qpaintdevice.xml#logicalDpiX">logicalDpiX</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link></db:emphasis>::PdmDpiY</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The vertical resolution of the device in dots per inch. See also <db:link xlink:href="qpaintdevice.xml#logicalDpiY">logicalDpiY</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link></db:emphasis>::PdmPhysicalDpiX</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>The horizontal resolution of the device in dots per inch. See also <db:link xlink:href="qpaintdevice.xml#physicalDpiX">physicalDpiX</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link></db:emphasis>::PdmPhysicalDpiY</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>The vertical resolution of the device in dots per inch. See also <db:link xlink:href="qpaintdevice.xml#physicalDpiY">physicalDpiY</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link></db:emphasis>::PdmDevicePixelRatio</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>The device pixel ratio for device. Common values are 1 for normal-dpi displays and 2 for high-dpi &quot;retina&quot; displays.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link></db:emphasis>::PdmDevicePixelRatioScaled</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>The scaled device pixel ratio for the device. This is identical to PdmDevicePixelRatio, except that the value is scaled by a constant factor in order to support paint devices with fractional scale factors. The constant scaling factor used is devicePixelRatioFScale(). This enum value has been introduced in Qt 5.6.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintdevice.xml#metric">metric</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintdevice.xml#devicePixelRatio">devicePixelRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPaintDevice">
<db:title>[protected] QPaintDevice::QPaintDevice()</db:title>
<db:constructorsynopsis>
<db:methodname>QPaintDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPaintDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a paint device. This constructor can be invoked only from subclasses of <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QPaintDevice">
<db:title>[virtual] QPaintDevice::~QPaintDevice()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPaintDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPaintDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the paint device and frees window system resources.</db:para>
</db:section>
<db:section xml:id="colorCount">
<db:title>int QPaintDevice::colorCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>colorCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int colorCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of different colors available for the paint device. If the number of colors available is too great to be represented by the int data type, then INT_MAX will be returned instead.</db:para>
</db:section>
<db:section xml:id="depth">
<db:title>int QPaintDevice::depth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>depth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int depth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bit depth (number of bit planes) of the paint device.</db:para>
</db:section>
<db:section xml:id="devicePixelRatio">
<db:title>qreal QPaintDevice::devicePixelRatio() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>devicePixelRatio</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal devicePixelRatio() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device pixel ratio for device.</db:para>
<db:para>Common values are 1 for normal-dpi displays and 2 for high-dpi &quot;retina&quot; displays.</db:para>
</db:section>
<db:section xml:id="devicePixelRatioF">
<db:title>[since 5.6] qreal QPaintDevice::devicePixelRatioF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>devicePixelRatioF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal devicePixelRatioF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device pixel ratio for the device as a floating point number.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="height">
<db:title>int QPaintDevice::height() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>height</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int height() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the height of the paint device in default coordinate system units (e.g. pixels for <db:link xlink:href="qpixmap.xml">QPixmap</db:link> and QWidget).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintdevice.xml#heightMM">heightMM</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="heightMM">
<db:title>int QPaintDevice::heightMM() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>heightMM</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int heightMM() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the height of the paint device in millimeters. Due to platform limitations it may not be possible to use this function to determine the actual physical size of a widget on the screen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintdevice.xml#height">height</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="logicalDpiX">
<db:title>int QPaintDevice::logicalDpiX() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>logicalDpiX</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int logicalDpiX() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal resolution of the device in dots per inch, which is used when computing font sizes. For X11, this is usually the same as could be computed from <db:link xlink:href="qpaintdevice.xml#widthMM">widthMM</db:link>().</db:para>
<db:para>Note that if the logicalDpiX() doesn't equal the <db:link xlink:href="qpaintdevice.xml#physicalDpiX">physicalDpiX</db:link>(), the corresponding <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> must handle the resolution mapping.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintdevice.xml#logicalDpiY">logicalDpiY</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintdevice.xml#physicalDpiX">physicalDpiX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="logicalDpiY">
<db:title>int QPaintDevice::logicalDpiY() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>logicalDpiY</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int logicalDpiY() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the vertical resolution of the device in dots per inch, which is used when computing font sizes. For X11, this is usually the same as could be computed from <db:link xlink:href="qpaintdevice.xml#heightMM">heightMM</db:link>().</db:para>
<db:para>Note that if the logicalDpiY() doesn't equal the <db:link xlink:href="qpaintdevice.xml#physicalDpiY">physicalDpiY</db:link>(), the corresponding <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> must handle the resolution mapping.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintdevice.xml#logicalDpiX">logicalDpiX</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintdevice.xml#physicalDpiY">physicalDpiY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="metric">
<db:title>[virtual protected] int QPaintDevice::metric(QPaintDevice::PaintDeviceMetric <db:emphasis>metric</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>metric</db:methodname>
<db:methodparam>
<db:type>QPaintDevice::PaintDeviceMetric</db:type>
<db:parameter>metric</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int metric(QPaintDevice::PaintDeviceMetric metric) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the metric information for the given paint device <db:code role="parameter">metric</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintdevice.xml#PaintDeviceMetric-enum">PaintDeviceMetric</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEngine">
<db:title>[pure virtual] QPaintEngine *QPaintDevice::paintEngine() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPaintEngine *</db:type>
<db:methodname>paintEngine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPaintEngine * paintEngine() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the paint engine used for drawing on the device.</db:para>
</db:section>
<db:section xml:id="paintingActive">
<db:title>bool QPaintDevice::paintingActive() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>paintingActive</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool paintingActive() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the device is currently being painted on, i.e. someone has called <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>() but not yet called <db:link xlink:href="qpainter.xml#end">QPainter::end</db:link>() for this device; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#isActive">QPainter::isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="physicalDpiX">
<db:title>int QPaintDevice::physicalDpiX() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>physicalDpiX</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int physicalDpiX() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal resolution of the device in dots per inch. For example, when printing, this resolution refers to the physical printer's resolution. The logical DPI on the other hand, refers to the resolution used by the actual paint engine.</db:para>
<db:para>Note that if the physicalDpiX() doesn't equal the <db:link xlink:href="qpaintdevice.xml#logicalDpiX">logicalDpiX</db:link>(), the corresponding <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> must handle the resolution mapping.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintdevice.xml#physicalDpiY">physicalDpiY</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintdevice.xml#logicalDpiX">logicalDpiX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="physicalDpiY">
<db:title>int QPaintDevice::physicalDpiY() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>physicalDpiY</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int physicalDpiY() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal resolution of the device in dots per inch. For example, when printing, this resolution refers to the physical printer's resolution. The logical DPI on the other hand, refers to the resolution used by the actual paint engine.</db:para>
<db:para>Note that if the physicalDpiY() doesn't equal the <db:link xlink:href="qpaintdevice.xml#logicalDpiY">logicalDpiY</db:link>(), the corresponding <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> must handle the resolution mapping.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintdevice.xml#physicalDpiX">physicalDpiX</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintdevice.xml#logicalDpiY">logicalDpiY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width">
<db:title>int QPaintDevice::width() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>width</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int width() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of the paint device in default coordinate system units (e.g. pixels for <db:link xlink:href="qpixmap.xml">QPixmap</db:link> and QWidget).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintdevice.xml#widthMM">widthMM</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widthMM">
<db:title>int QPaintDevice::widthMM() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>widthMM</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int widthMM() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of the paint device in millimeters. Due to platform limitations it may not be possible to use this function to determine the actual physical size of a widget on the screen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintdevice.xml#width">width</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
