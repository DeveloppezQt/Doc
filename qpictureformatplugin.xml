<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPictureFormatPlugin Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpictureformatplugin.xml">QPictureFormatPlugin</db:link> class provides an abstract base for custom picture format plugins.</db:para>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPictureFormatPlugin</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPictureFormatPlugin is part of <db:simplelist><db:member>plugins</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The picture format plugin is a simple plugin interface that makes it easy to create custom picture formats that can be used transparently by applications.</db:para>
<db:para>Writing an picture format plugin is achieved by subclassing this base class, reimplementing the pure virtual functions <db:link xlink:href="qpictureformatplugin.xml#loadPicture">loadPicture</db:link>(), <db:link xlink:href="qpictureformatplugin.xml#savePicture">savePicture</db:link>(), and <db:link xlink:href="qpictureformatplugin.xml#installIOHandler">installIOHandler</db:link>(), and exporting the class with the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro.</db:para>
<db:para>The json file containing the metadata should contain one entry with the list of picture formats supported by the plugin:</db:para>
<db:programlisting language="cpp">{ &quot;Keys&quot;: [ &quot;mypictureformat&quot; ] }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPictureFormatPlugin">
<db:title>[explicit] QPictureFormatPlugin::QPictureFormatPlugin(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs an picture format plugin with the given <db:code role="parameter">parent</db:code>. This is invoked automatically by the moc generated code that exports the plugin.</db:para>
</db:section>
<db:section xml:id="dtor.QPictureFormatPlugin">
<db:title>[virtual noexcept] QPictureFormatPlugin::~QPictureFormatPlugin()</db:title>
<db:para>Destroys the picture format plugin.</db:para>
<db:para>You never have to call this explicitly. Qt destroys a plugin automatically when it is no longer used.</db:para>
</db:section>
<db:section xml:id="installIOHandler">
<db:title>[pure virtual] bool QPictureFormatPlugin::installIOHandler(const QString &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Installs a QPictureIO picture I/O handler for the picture format <db:code role="parameter">format</db:code>. Returns <db:code>true</db:code> on success.</db:para>
</db:section>
<db:section xml:id="loadPicture">
<db:title>[virtual] bool QPictureFormatPlugin::loadPicture(const QString &amp;<db:emphasis>format</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>, QPicture *<db:emphasis>picture</db:emphasis>)</db:title>
<db:para>Loads the picture stored in the file called <db:code role="parameter">fileName</db:code>, with the given <db:code role="parameter">format</db:code>, into *<db:code role="parameter">picture</db:code>. Returns <db:code>true</db:code> on success; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureformatplugin.xml#savePicture">savePicture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="savePicture">
<db:title>[virtual] bool QPictureFormatPlugin::savePicture(const QString &amp;<db:emphasis>format</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>, const QPicture &amp;<db:emphasis>picture</db:emphasis>)</db:title>
<db:para>Saves the given <db:code role="parameter">picture</db:code> into the file called <db:code role="parameter">fileName</db:code>, using the specified <db:code role="parameter">format</db:code>. Returns <db:code>true</db:code> on success; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureformatplugin.xml#loadPicture">loadPicture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
