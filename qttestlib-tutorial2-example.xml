<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Chapter 2: Data Driven Testing</db:title>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qttestlib-tutorial1-example.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Chapter 1"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qttestlib-tutorial3-example.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Chapter 3"/></db:extendedlink>
<db:abstract>
<db:para>How to create data driven tests.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This chapter demonstrates how to execute a test multiple times with different test data.</db:para>
<db:para>So far, we have hard coded the data we wanted to test into our test function. If we add more test data, the function might look like this:</db:para>
<db:programlisting language="cpp">QCOMPARE(QString(&quot;hello&quot;).toUpper(), QString(&quot;HELLO&quot;));
QCOMPARE(QString(&quot;Hello&quot;).toUpper(), QString(&quot;HELLO&quot;));
QCOMPARE(QString(&quot;HellO&quot;).toUpper(), QString(&quot;HELLO&quot;));
QCOMPARE(QString(&quot;HELLO&quot;).toUpper(), QString(&quot;HELLO&quot;));
</db:programlisting>
<db:para>To prevent the function from being cluttered with repetitive code, Qt Test supports adding test data to a test function. All we need is to add another private slot to our test class:</db:para>
<db:programlisting language="cpp">class TestQString: public QObject
{
    Q_OBJECT

private slots:
    void toUpper_data();
    void toUpper();
};
</db:programlisting>
<db:section xml:id="writing-the-data-function">
<db:title>Writing the Data Function</db:title>
<db:para>A test function's associated data function has <db:code>_data</db:code> appended to its name. Our data function looks like this:</db:para>
<db:programlisting language="cpp">void TestQString::toUpper_data()
{
    QTest::addColumn&amp;lt;QString&amp;gt;(&quot;string&quot;);
    QTest::addColumn&amp;lt;QString&amp;gt;(&quot;result&quot;);

    QTest::newRow(&quot;all-lower&quot;) &amp;lt;&amp;lt; &quot;hello&quot; &amp;lt;&amp;lt; &quot;HELLO&quot;;
    QTest::newRow(&quot;mixed&quot;)     &amp;lt;&amp;lt; &quot;Hello&quot; &amp;lt;&amp;lt; &quot;HELLO&quot;;
    QTest::newRow(&quot;all-upper&quot;) &amp;lt;&amp;lt; &quot;HELLO&quot; &amp;lt;&amp;lt; &quot;HELLO&quot;;
}
</db:programlisting>
<db:para>First, we define the two elements of our test table using the <db:link xlink:href="qtest.xml#addColumn">QTest::addColumn</db:link>() function: a test string and the expected result of applying the <db:link xlink:href="qstring.xml#toUpper">QString::toUpper</db:link>() function to that string.</db:para>
<db:para>Then, we add some data to the table using the <db:link xlink:href="qtest.xml#newRow">QTest::newRow</db:link>() function. We can also use <db:link xlink:href="qtest.xml#addRow">QTest::addRow</db:link>() if we need to format some data in the row name, for example when generating many data rows iteratively. Each row of data will become a separate row in the test table.</db:para>
<db:para><db:link xlink:href="qtest.xml#newRow">QTest::newRow</db:link>() takes one argument: a name that will be associated with the data set and used in the test log to identify the data row. <db:link xlink:href="qtest.xml#addRow">QTest::addRow</db:link>() takes a (<db:code>printf</db:code>-style) format string followed by the parameters to be represented in place of the formatting tokens in the format string. Then, we stream the data set into the new table row. First an arbitrary string, and then the expected result of applying the <db:link xlink:href="qstring.xml#toUpper">QString::toUpper</db:link>() function to that string.</db:para>
<db:para>You can think of the test data as a two-dimensional table. In our case, it has two columns called <db:code>string</db:code> and <db:code>result</db:code> and three rows. In addition, a name and an index are associated with each row:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>index</db:para>
</db:th>
<db:th>
<db:para>name</db:para>
</db:th>
<db:th>
<db:para>string</db:para>
</db:th>
<db:th>
<db:para>result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>all-lower</db:para>
</db:td>
<db:td>
<db:para>&quot;hello&quot;</db:para>
</db:td>
<db:td>
<db:para>HELLO</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>mixed</db:para>
</db:td>
<db:td>
<db:para>&quot;Hello&quot;</db:para>
</db:td>
<db:td>
<db:para>HELLO</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>all-upper</db:para>
</db:td>
<db:td>
<db:para>&quot;HELLO&quot;</db:para>
</db:td>
<db:td>
<db:para>HELLO</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>When data is streamed into the row, each datum is asserted to match the type of the column whose value it supplies. If any assertion fails, the test is aborted.</db:para>
<db:para>The names of rows and columns, in a given test function's data table, should be unique: if two rows share a name, or two columns share a name, a warning will (since Qt 6.5) be produced. See <db:link xlink:href="qtlogging.xml#qWarning">qWarning</db:link>() for how you can cause warnings to be treated as errors and <db:link xlink:href="qttest-best-practices-qdoc.xml#test-for-warnings">Test for Warnings</db:link> for how to get your tests clear of other warnings.</db:para>
</db:section>
<db:section xml:id="rewriting-the-test-function">
<db:title>Rewriting the Test Function</db:title>
<db:para>Our test function can now be rewritten:</db:para>
<db:programlisting language="cpp">void TestQString::toUpper()
{
    QFETCH(QString, string);
    QFETCH(QString, result);

    QCOMPARE(string.toUpper(), result);
}
</db:programlisting>
<db:para>The TestQString::toUpper() function will be executed three times, once for each entry in the test table that we created in the associated TestQString::toUpper_data() function.</db:para>
<db:para>First, we fetch the two elements of the data set using the <db:link xlink:href="qtest.xml#QFETCH">QFETCH</db:link>() macro. <db:link xlink:href="qtest.xml#QFETCH">QFETCH</db:link>() takes two arguments: The data type of the element and the element name. Then, we perform the test using the <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>() macro.</db:para>
<db:para>This approach makes it very easy to add new data to the test without modifying the test itself.</db:para>
</db:section>
<db:section xml:id="preparing-the-stand-alone-executable">
<db:title>Preparing the Stand-Alone Executable</db:title>
<db:para>And again, to make our test case a stand-alone executable, the following two lines are needed:</db:para>
<db:programlisting language="cpp">QTEST_MAIN(TestQString)
#include &quot;testqstring.moc&quot;
</db:programlisting>
<db:para>As before, the <db:link xlink:href="qtest.xml#QTEST_MAIN">QTEST_MAIN</db:link>() macro expands to a simple main() method that runs all the test functions, and since both the declaration and the implementation of our test class are in a .cpp file, we also need to include the generated moc file to make Qt's introspection work.</db:para>
</db:section>
<db:section xml:id="building-the-executable">
<db:title>Building the Executable</db:title>
<db:para>You can build the test case executable using CMake or qmake.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Configure your build settings in your CMakeLists.txt file:</db:para>
<db:programlisting language="cpp"># Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

cmake_minimum_required(VERSION 3.16)
project(tutorial2 LANGUAGES CXX)

find_package(Qt6 REQUIRED COMPONENTS Core Gui Test Widgets)

qt_standard_project_setup()

qt_add_executable(tutorial2
    testqstring.cpp
)

set_target_properties(tutorial2 PROPERTIES
    WIN32_EXECUTABLE TRUE
    MACOSX_BUNDLE TRUE
)

target_link_libraries(tutorial2 PRIVATE
    Qt6::Core
    Qt6::Gui
    Qt6::Test
    Qt6::Widgets
)

install(TARGETS tutorial2
    BUNDLE  DESTINATION .
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

qt_generate_deploy_app_script(
    TARGET tutorial2
    OUTPUT_SCRIPT deploy_script
    NO_UNSUPPORTED_PLATFORM_ERROR
)
install(SCRIPT ${deploy_script})
</db:programlisting>
<db:para>Next, from the command line, run either <db:code>cmake</db:code> or use the <db:code>qt-cmake</db:code> convenience script located in <db:code>Qt-prefix/&lt;version&gt;/&lt;platform&gt;/bin/qt-cmake</db:code>:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;Qt-prefix&amp;gt;/&amp;lt;version&amp;gt;/&amp;lt;platform&amp;gt;/bin/qt-cmake &amp;lt;source-dir&amp;gt; &amp;lt;build-dir&amp;gt; -G Ninja
</db:programlisting>
<db:para>Then, run your preferred generator tool to build the executable. Here, we're using Ninja:</db:para>
<db:programlisting language="cpp" role="bad">ninja
</db:programlisting>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>Configure your build settings in your <db:code>.pro</db:code> file:</db:para>
<db:programlisting language="cpp">QT += widgets testlib

SOURCES = testqstring.cpp

# install
target.path = $$[QT_INSTALL_EXAMPLES]/qtestlib/tutorial2
INSTALLS += target
</db:programlisting>
<db:para>Next, run <db:code>qmake</db:code>, and, finally, run <db:code>make</db:code> to build your executable:</db:para>
<db:programlisting language="cpp" role="bad">qmake
make
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="running-the-executable">
<db:title>Running the Executable</db:title>
<db:para>Running the resulting executable should give you the following output:</db:para>
<db:programlisting language="cpp">********* Start testing of TestQString *********
Config: Using QtTest library %VERSION%, Qt %VERSION%
PASS   : TestQString::initTestCase()
PASS   : TestQString::toUpper(all-lower)
PASS   : TestQString::toUpper(mixed)
PASS   : TestQString::toUpper(all-upper)
PASS   : TestQString::cleanupTestCase()
Totals: 5 passed, 0 failed, 0 skipped, 0 blacklisted, 0ms
********* Finished testing of TestQString *********
</db:programlisting>
</db:section>
</db:article>
