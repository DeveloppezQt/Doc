<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Chapter 2: Data Driven Testing</db:title>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qttestlib-tutorial1-example.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Chapter 1"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qttestlib-tutorial3-example.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Chapter 3"/></db:extendedlink>
<db:abstract>
<db:para>How to create data driven tests.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>{Qt Test Tutorial}{Contents}</db:para>
<db:para>In this chapter we will demonstrate how to execute a test multiple times with different test data.</db:para>
<db:para>So far, we have hard coded the data we wanted to test into our test function. If we add more test data, the function might look like this:</db:para>
<db:programlisting language="cpp">QCOMPARE(QString(&quot;hello&quot;).toUpper(), QString(&quot;HELLO&quot;));
QCOMPARE(QString(&quot;Hello&quot;).toUpper(), QString(&quot;HELLO&quot;));
QCOMPARE(QString(&quot;HellO&quot;).toUpper(), QString(&quot;HELLO&quot;));
QCOMPARE(QString(&quot;HELLO&quot;).toUpper(), QString(&quot;HELLO&quot;));
</db:programlisting>
<db:para>To prevent that the function ends up being cluttered by repetitive code, Qt Test supports adding test data to a test function. All we need is to add another private slot to our test class:</db:para>
<db:programlisting language="cpp">class TestQString: public QObject
{
    Q_OBJECT

private slots:
    void toUpper_data();
    void toUpper();
};
</db:programlisting>
<db:section xml:id="writing-the-data-function">
<db:title>Writing the Data Function</db:title>
<db:para>A test function's associated data function carries the same name, appended by <db:code>_data</db:code>. Our data function looks like this:</db:para>
<db:programlisting language="cpp">void TestQString::toUpper_data()
{
    QTest::addColumn&amp;lt;QString&amp;gt;(&quot;string&quot;);
    QTest::addColumn&amp;lt;QString&amp;gt;(&quot;result&quot;);

    QTest::newRow(&quot;all lower&quot;) &amp;lt;&amp;lt; &quot;hello&quot; &amp;lt;&amp;lt; &quot;HELLO&quot;;
    QTest::newRow(&quot;mixed&quot;)     &amp;lt;&amp;lt; &quot;Hello&quot; &amp;lt;&amp;lt; &quot;HELLO&quot;;
    QTest::newRow(&quot;all upper&quot;) &amp;lt;&amp;lt; &quot;HELLO&quot; &amp;lt;&amp;lt; &quot;HELLO&quot;;
}
</db:programlisting>
<db:para>First, we define the two elements of our test table using the <db:link xlink:href="qtest.xml#addColumn">QTest::addColumn</db:link>() function: a test string, and the expected result of applying the QString::toUpper() function to that string.</db:para>
<db:para>Then we add some data to the table using the <db:link xlink:href="">QTest::newRow()</db:link> function. Each set of data will become a separate row in the test table.</db:para>
<db:para><db:link xlink:href="">QTest::newRow()</db:link> takes one argument: a name that will be associated with the data set. If the test fails, the name will be used in the test log, referencing the failed data. Then we stream the data set into the new table row. First an arbitrary string, and then the expected result of applying the QString::toUpper() function to that string.</db:para>
<db:para>You can think of the test data as a two-dimensional table. In our case, it has two columns called <db:code>string</db:code> and <db:code>result</db:code> and three rows. In addition a name as well as an index is associated with each row:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>index</db:para>
</db:th>
<db:th>
<db:para>name</db:para>
</db:th>
<db:th>
<db:para>string</db:para>
</db:th>
<db:th>
<db:para>result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>all lower</db:para>
</db:td>
<db:td>
<db:para>&quot;hello&quot;</db:para>
</db:td>
<db:td>
<db:para>HELLO</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>mixed</db:para>
</db:td>
<db:td>
<db:para>&quot;Hello&quot;</db:para>
</db:td>
<db:td>
<db:para>HELLO</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>all upper</db:para>
</db:td>
<db:td>
<db:para>&quot;HELLO&quot;</db:para>
</db:td>
<db:td>
<db:para>HELLO</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="rewriting-the-test-function">
<db:title>Rewriting the Test Function</db:title>
<db:para>Our test function can now be rewritten:</db:para>
<db:programlisting language="cpp">void TestQString::toUpper()
{
    QFETCH(QString, string);
    QFETCH(QString, result);

    QCOMPARE(string.toUpper(), result);
}
</db:programlisting>
<db:para>The TestQString::toUpper() function will be executed three times, once for each entry in the test table that we created in the associated TestQString::toUpper_data() function.</db:para>
<db:para>First, we fetch the two elements of the data set using the <db:link xlink:href="qtest.xml#QFETCH">QFETCH</db:link>() macro. <db:link xlink:href="qtest.xml#QFETCH">QFETCH</db:link>() takes two arguments: The data type of the element and the element name. Then we perform the test using the <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>() macro.</db:para>
<db:para>This approach makes it very easy to add new data to the test without modifying the test itself.</db:para>
<db:para>And again, to make our test case a stand-alone executable, the following two lines are needed:</db:para>
<db:programlisting language="cpp">QTEST_MAIN(TestQString)
#include &quot;testqstring.moc&quot;
</db:programlisting>
<db:para>As before, the <db:link xlink:href="qtest.xml#QTEST_MAIN">QTEST_MAIN</db:link>() macro expands to a simple main() method that runs all the test functions, and since both the declaration and the implementation of our test class are in a .cpp file, we also need to include the generated moc file to make Qt's introspection work.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/qtestlib/tutorial2?h=5.13">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
