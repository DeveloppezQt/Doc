<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Map QML Type</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Map type displays a map.</db:para>
<db:para>This type was introduced in QtLocation 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtLocation 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtLocation 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Map is part of <db:simplelist><db:member><db:link xlink:href="qml-qtlocation5-maps.xml">QML Maps Plugin</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Map type is used to display a map or image of the Earth, with the capability to also display interactive objects tied to the map's surface.</db:para>
<db:para>There are a variety of different ways to visualize the Earth's surface in a 2-dimensional manner, but all of them involve some kind of projection: a mathematical relationship between the 3D coordinates (latitude, longitude and altitude) and 2D coordinates (X and Y in pixels) on the screen.</db:para>
<db:para>Different sources of map data can use different projections, and from the point of view of the Map type, we treat these as one replaceable unit: the Map plugin. A Map plugin consists of a data source, as well as all other details needed to display its data on-screen.</db:para>
<db:para>The current Map plugin in use is contained in the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> property of the Map item. In order to display any image in a Map item, you will need to set this property. See the <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> type for a description of how to retrieve an appropriate plugin for use.</db:para>
<db:para>The geographic region displayed in the Map item is referred to as its viewport, and this is defined by the properties <db:link xlink:href="qml-qtlocation-map.xml#center-prop">center</db:link>, and <db:link xlink:href="qml-qtlocation-map.xml#zoomLevel-prop">zoomLevel</db:link>. The <db:link xlink:href="qml-qtlocation-map.xml#center-prop">center</db:link> property contains a <db:link xlink:href="qml-coordinate.xml">coordinate</db:link> specifying the center of the viewport, while <db:link xlink:href="qml-qtlocation-map.xml#zoomLevel-prop">zoomLevel</db:link> controls the scale of the map. See each of these properties for further details about their values.</db:para>
<db:para>When the map is displayed, each possible geographic coordinate that is visible will map to some pixel X and Y coordinate on the screen. To perform conversions between these two, Map provides the <db:link xlink:href="qml-qtlocation-map.xml#toCoordinate-method">toCoordinate</db:link> and <db:link xlink:href="qml-qtlocation-map.xml#fromCoordinate-method">fromCoordinate</db:link> functions, which are of general utility.</db:para>
<db:section xml:id="map-objects">
<db:title>Map Objects</db:title>
<db:para>Map related objects can be declared within the body of a Map object in Qt Quick and will automatically appear on the Map. To add an object programmatically, first be sure it is created with the Map as its parent (for example in an argument to <db:link xlink:href="qml-qtqml-component.xml#createObject-method">Component::createObject</db:link>). Then call the <db:link xlink:href="qml-qtlocation-map.xml#addMapItem-method">addMapItem</db:link> method on the Map, if the type of this object is one of <db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircle</db:link>, <db:link xlink:href="qml-qtlocation-maprectangle.xml">MapRectangle</db:link>, <db:link xlink:href="qml-qtlocation-mappolyline.xml">MapPolyline</db:link>, <db:link xlink:href="qml-qtlocation-mappolygon.xml">MapPolygon</db:link>, <db:link xlink:href="qml-qtlocation-maproute.xml">MapRoute</db:link> or <db:link xlink:href="qml-qtlocation-mapquickitem.xml">MapQuickItem</db:link>. A corresponding <db:link xlink:href="qml-qtlocation-map.xml#removeMapItem-method">removeMapItem</db:link> method also exists to do the opposite and remove any of the above types of map objects from the Map.</db:para>
<db:para>Moving Map objects around, resizing them or changing their shape normally does not involve any special interaction with Map itself â€“ changing these properties in a map object will automatically update the display.</db:para>
</db:section>
<db:section xml:id="performance">
<db:title>Performance</db:title>
<db:para>Maps are rendered using OpenGL (ES) and the Qt Scene Graph stack, and as a result perform quite well where GL accelerated hardware is available.</db:para>
<db:para>For &quot;online&quot; Maps, network bandwidth and latency can be major contributors to the user's perception of performance. Extensive caching is performed to mitigate this, but such mitigation is not always perfect.</db:para>
<db:para>In general, large and complex Map items such as polygons and polylines with large numbers of vertices can have an adverse effect on UI performance.</db:para>
</db:section>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para>The following snippet shows a simple Map and the necessary Plugin type to use it. The map is centered over Oslo, Norway, with zoom level 14.</db:para>
<db:programlisting language="cpp">import QtQuick
import QtLocation
import QtPositioning

Window {
    ...
    Plugin {
        id: mapPlugin
        name: &quot;osm&quot;
    }

    Map {
        id: map
        anchors.fill: parent
        plugin: mapPlugin
        center: QtPositioning.coordinate(59.91, 10.75) // Oslo
        zoomLevel: 14
        property geoCoordinate startCentroid

        PinchHandler {
            id: pinch
            target: null
            onActiveChanged: if (active) {
                map.startCentroid = map.toCoordinate(pinch.centroid.position, false)
            }
            onScaleChanged: (delta) =&amp;gt; {
                map.zoomLevel += Math.log2(delta)
                map.alignCoordinateToPoint(map.startCentroid, pinch.centroid.position)
            }
            onRotationChanged: (delta) =&amp;gt; {
                map.bearing -= delta
                map.alignCoordinateToPoint(map.startCentroid, pinch.centroid.position)
            }
            grabPermissions: PointerHandler.TakeOverForbidden
        }
        WheelHandler {
            id: wheel
            // workaround for QTBUG-87646 / QTBUG-112394 / QTBUG-112432:
            // Magic Mouse pretends to be a trackpad but doesn't work with PinchHandler
            // and we don't yet distinguish mice and trackpads on Wayland either
            acceptedDevices: Qt.platform.pluginName === &quot;cocoa&quot; || Qt.platform.pluginName === &quot;wayland&quot;
                             ? PointerDevice.Mouse | PointerDevice.TouchPad
                             : PointerDevice.Mouse
            rotationScale: 1/120
            property: &quot;zoomLevel&quot;
        }
        DragHandler {
            id: drag
            target: null
            onTranslationChanged: (delta) =&amp;gt; map.pan(-delta.x, -delta.y)
        }
        Shortcut {
            enabled: map.zoomLevel &amp;lt; map.maximumZoomLevel
            sequence: StandardKey.ZoomIn
            onActivated: map.zoomLevel = Math.round(map.zoomLevel + 1)
        }
        Shortcut {
            enabled: map.zoomLevel &amp;gt; map.minimumZoomLevel
            sequence: StandardKey.ZoomOut
            onActivated: map.zoomLevel = Math.round(map.zoomLevel - 1)
        }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/minimal_map.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="activeMapType-prop">
<db:title>activeMapType : mapType</db:title>
<db:fieldsynopsis>
<db:type>mapType</db:type>
<db:varname>activeMapType</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Access to the currently active <db:link xlink:href="qml-qtlocation-maptype.xml">map type</db:link>.</db:para>
<db:para>This property can be set to change the active <db:link xlink:href="qml-qtlocation-maptype.xml">map type</db:link>. See the <db:link xlink:href="qml-qtlocation-map.xml#supportedMapTypes-prop">supportedMapTypes</db:link> property for possible values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-maptype.xml">mapType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bearing-prop">
<db:title>[since QtLocation 5.9] bearing : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>bearing</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the bearing for the map. The default value is 0. If the Plugin used for the Map supports bearing, the valid range for this value is between 0 and 360. If the Plugin used for the Map does not support bearing, changing this property will have no effect.</db:para>
<db:para>This property was introduced in QtLocation 5.9.</db:para>
</db:section>
<db:section xml:id="center-prop">
<db:title>center : coordinate</db:title>
<db:fieldsynopsis>
<db:type>coordinate</db:type>
<db:varname>center</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the coordinate which occupies the center of the mapping viewport. Invalid center coordinates are ignored.</db:para>
<db:para>The default value is an arbitrary valid coordinate.</db:para>
</db:section>
<db:section xml:id="color-prop">
<db:title>color : color</db:title>
<db:fieldsynopsis>
<db:type>color</db:type>
<db:varname>color</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the background color of the map element.</db:para>
</db:section>
<db:section xml:id="copyrightsVisible-prop">
<db:title>copyrightsVisible : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>copyrightsVisible</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the visibility of the copyrights notice. The notice is usually displayed in the bottom left corner. By default, this property is set to true.</db:para>
<db:note>
<db:para>Many map providers require the notice to be visible as part of the terms and conditions. Please consult the relevant provider documentation before turning this notice off.</db:para>
</db:note>
</db:section>
<db:section xml:id="error-prop">
<db:title>[read-only] error : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>error</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This read-only property holds the last occurred mapping service provider error.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Map.<db:link xlink:href="qdtls.xml#QDtlsError-enum">NoError</db:link> - No error has occurred.</db:para>
</db:listitem>
<db:listitem>
<db:para>Map.NotSupportedError -The maps plugin property was not set or there is no mapping manager associated with the plugin.</db:para>
</db:listitem>
<db:listitem>
<db:para>Map.UnknownParameterError -The plugin did not recognize one of the parameters it was given.</db:para>
</db:listitem>
<db:listitem>
<db:para>Map.MissingRequiredParameterError - The plugin did not find one of the parameters it was expecting.</db:para>
</db:listitem>
<db:listitem>
<db:para>Map.ConnectionError - The plugin could not connect to its backend service or database.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoserviceprovider.xml#Error-enum">QGeoServiceProvider::Error</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString-prop">
<db:title>[read-only] errorString : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>errorString</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This read-only property holds the textual presentation of the latest mapping provider error. If no error has occurred, an empty string is returned.</db:para>
<db:para>An empty string may also be returned if an error occurred which has no associated textual representation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoserviceprovider.xml#errorString">QGeoServiceProvider::errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fieldOfView-prop">
<db:title>[since QtLocation 5.9] fieldOfView : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>fieldOfView</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the field of view of the camera used to look at the map, in degrees. If the plugin property of the map is not set, or the plugin does not support mapping, the value is 45 degrees.</db:para>
<db:para>Note that changing this value implicitly changes also the distance between the camera and the map, so that, at a tilting angle of 0 degrees, the resulting image is identical for any value used for this property.</db:para>
<db:para>For more information about this parameter, consult the Wikipedia articles about <db:link xlink:href="https://en.wikipedia.org/wiki/Field_of_view">Field of view</db:link> and <db:link xlink:href="https://en.wikipedia.org/wiki/Angle_of_view">Angle of view</db:link>.</db:para>
<db:para>This property was introduced in QtLocation 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#minimumFieldOfView-prop">minimumFieldOfView</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#maximumFieldOfView-prop">maximumFieldOfView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapItems-prop">
<db:title>[read-only] mapItems : list&lt;MapItem&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;MapItem&gt;</db:type>
<db:varname>mapItems</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the list of all map items in no particular order. These items include items that were declared statically as part of the type declaration, as well as dynamical items (<db:link xlink:href="qml-qtlocation-map.xml#addMapItem-method">addMapItem</db:link>, <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#addMapItem-method">addMapItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#removeMapItem-method">removeMapItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#clearMapItems-method">clearMapItems</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapReady-prop">
<db:title>[read-only] mapReady : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>mapReady</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the map has been successfully initialized and is ready to be used. Some methods, such as <db:link xlink:href="qml-qtlocation-map.xml#fromCoordinate-method">fromCoordinate</db:link> and <db:link xlink:href="qml-qtlocation-map.xml#toCoordinate-method">toCoordinate</db:link>, will not work before the map is ready. Due to the architecture of the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link>, it's advised to use the signal emitted for this property in place of <db:link xlink:href="qml-qtqml-component.xml#completed-signal">Component.onCompleted</db:link>, to make sure that everything behaves as expected.</db:para>
</db:section>
<db:section xml:id="maximumFieldOfView-prop">
<db:title>[since QtLocation 5.9] maximumFieldOfView : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>maximumFieldOfView</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum valid field of view for the map, in degrees.</db:para>
<db:para>The minimum tilt field of view by the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> used is an upper bound for this property. If the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> property is not set or the plugin does not support mapping, this property is 179.</db:para>
<db:para>This property was introduced in QtLocation 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#fieldOfView-prop">fieldOfView</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#minimumFieldOfView-prop">minimumFieldOfView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumTilt-prop">
<db:title>[since QtLocation 5.9] maximumTilt : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>maximumTilt</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum valid tilt for the map, in degrees.</db:para>
<db:para>The maximum tilt defined by the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> used is an upper bound for this property. If the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> property is not set or the plugin does not support mapping, this property is 89.5.</db:para>
<db:para>Since <db:link xlink:href="qtlocation-module.xml">QtLocation</db:link> 5.12, plugins can additionally restrict this value depending on the current zoom level.</db:para>
<db:para>This property was introduced in QtLocation 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#tilt-prop">tilt</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#minimumTilt-prop">minimumTilt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumZoomLevel-prop">
<db:title>maximumZoomLevel : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>maximumZoomLevel</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum valid zoom level for the map.</db:para>
<db:para>The maximum zoom level is defined by the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> used. If the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> property is not set or the plugin does not support mapping, this property is 30.</db:para>
</db:section>
<db:section xml:id="minimumFieldOfView-prop">
<db:title>[since QtLocation 5.9] minimumFieldOfView : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>minimumFieldOfView</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum valid field of view for the map, in degrees.</db:para>
<db:para>The minimum tilt field of view by the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> used is a lower bound for this property. If the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> property is not set or the plugin does not support mapping, this property is 1.</db:para>
<db:para>This property was introduced in QtLocation 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#fieldOfView-prop">fieldOfView</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#maximumFieldOfView-prop">maximumFieldOfView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumTilt-prop">
<db:title>[since QtLocation 5.9] minimumTilt : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>minimumTilt</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum valid tilt for the map, in degrees.</db:para>
<db:para>The minimum tilt defined by the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> used is a lower bound for this property. If the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> property is not set or the plugin does not support mapping, this property is 0.</db:para>
<db:para>Since <db:link xlink:href="qtlocation-module.xml">QtLocation</db:link> 5.12, plugins can additionally restrict this value depending on the current zoom level.</db:para>
<db:para>This property was introduced in QtLocation 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#tilt-prop">tilt</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#maximumTilt-prop">maximumTilt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumZoomLevel-prop">
<db:title>minimumZoomLevel : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>minimumZoomLevel</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum valid zoom level for the map.</db:para>
<db:para>The minimum zoom level defined by the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> used is a lower bound for this property. However, the returned value is also canvas-size-dependent, and can be higher than the user-specified value, or than the minimum zoom level defined by the plugin used, to prevent the map from being smaller than the viewport in either dimension.</db:para>
<db:para>If the <db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link> property is not set or the plugin does not support mapping, this property is 0.</db:para>
</db:section>
<db:section xml:id="plugin-prop">
<db:title>plugin : Plugin</db:title>
<db:fieldsynopsis>
<db:type>Plugin</db:type>
<db:varname>plugin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the plugin which provides the mapping functionality.</db:para>
<db:para>This is a write-once property. Once the map has a plugin associated with it, any attempted modifications of the plugin will be ignored.</db:para>
</db:section>
<db:section xml:id="supportedMapTypes-prop">
<db:title>[read-only] supportedMapTypes : list&lt;mapType&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;mapType&gt;</db:type>
<db:varname>supportedMapTypes</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This read-only property holds the set of <db:link xlink:href="qml-qtlocation-maptype.xml">map types</db:link> supported by this map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#activeMapType-prop">activeMapType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tilt-prop">
<db:title>[since QtLocation 5.9] tilt : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>tilt</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the tilt for the map, in degrees. The default value is 0. The valid range for this value is [ <db:link xlink:href="qml-qtlocation-map.xml#minimumTilt-prop">minimumTilt</db:link>, <db:link xlink:href="qml-qtlocation-map.xml#maximumTilt-prop">maximumTilt</db:link> ]. If the Plugin used for the Map does not support tilting, changing this property will have no effect.</db:para>
<db:para>This property was introduced in QtLocation 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#minimumTilt-prop">minimumTilt</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#maximumTilt-prop">maximumTilt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visibleArea-prop">
<db:title>visibleArea : rect</db:title>
<db:fieldsynopsis>
<db:type>rect</db:type>
<db:varname>visibleArea</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the visible area inside the Map QML element. It is a rect whose coordinates are relative to the Map element. Its size will be clamped to the size of the Map element. A null visibleArea means that the whole Map is visible.</db:para>
</db:section>
<db:section xml:id="visibleRegion-prop">
<db:title>visibleRegion : geoshape</db:title>
<db:fieldsynopsis>
<db:type>geoshape</db:type>
<db:varname>visibleRegion</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the region which occupies the viewport of the map. The camera is positioned in the center of the shape, and at the largest integral zoom level possible which allows the whole shape to be visible on the screen. This implies that reading this property back shortly after having been set the returned area is equal or larger than the set area.</db:para>
<db:para>Setting this property implicitly changes the <db:link xlink:href="qml-qtlocation-map.xml#center-prop">center</db:link> and <db:link xlink:href="qml-qtlocation-map.xml#zoomLevel-prop">zoomLevel</db:link> of the map. Any previously set value to those properties will be overridden.</db:para>
<db:note>
<db:para>Since Qt 5.14 This property provides change notifications.</db:para>
</db:note>
</db:section>
<db:section xml:id="zoomLevel-prop">
<db:title>zoomLevel : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>zoomLevel</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the zoom level for the map.</db:para>
<db:para>Larger values for the zoom level provide more detail. Zoom levels are always non-negative. The default value is 8.0. Depending on the plugin in use, values outside the [<db:link xlink:href="qml-qtlocation-map.xml#minimumZoomLevel-prop">minimumZoomLevel</db:link>, <db:link xlink:href="qml-qtlocation-map.xml#maximumZoomLevel-prop">maximumZoomLevel</db:link>] range, which represent the range for which tiles are available, may be accepted, or clamped.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="copyrightLinkActivated-signal">
<db:title>copyrightLinkActivated(string <db:emphasis>link</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user clicks on a <db:code role="parameter">link</db:code> in the copyright notice. The application should open the link in a browser or display its contents to the user.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onCopyrightLinkActivated</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addMapItem-method">
<db:title>void addMapItem(MapItem <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">item</db:code> to the Map (for example <db:link xlink:href="qml-qtlocation-mapquickitem.xml">MapQuickItem</db:link>, <db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircle</db:link>). If the object already is on the Map, it will not be added again.</db:para>
<db:para>As an example, consider the case where you have a <db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircle</db:link> representing your current position:</db:para>
<db:programlisting language="qml">import QtQuick
import QtPositioning
import QtLocation

PositionSource {
    id: positionSource
}

Map {
    id: map
    property MapCircle circle

    Component.onCompleted: {
        circle = Qt.createQmlObject('import QtLocation; MapCircle {}', page)
        circle.center = positionSource.position.coordinate
        circle.radius = 5000.0
        circle.color = 'green'
        circle.border.width = 3
        map.addMapItem(circle)
    }
}
</db:programlisting>
<db:note>
<db:para>MapItemViews cannot be added with this method.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#mapItems-prop">mapItems</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#removeMapItem-method">removeMapItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#clearMapItems-method">clearMapItems</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMapItemGroup-method">
<db:title>void addMapItemGroup(MapItemGroup <db:emphasis>itemGroup</db:emphasis>)</db:title>
<db:para>Adds the map items contained in the given <db:code role="parameter">itemGroup</db:code> to the Map (for example <db:link xlink:href="qml-qtlocation-mapquickitem.xml">MapQuickItem</db:link>, <db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircle</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-mapitemgroup.xml">MapItemGroup</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#removeMapItemGroup-method">removeMapItemGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMapItemView-method">
<db:title>void addMapItemView(MapItemView <db:emphasis>itemView</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">itemView</db:code> to the Map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#removeMapItemView-method">removeMapItemView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="alignCoordinateToPoint-method">
<db:title>void alignCoordinateToPoint(coordinate <db:emphasis>coordinate</db:emphasis>, QPointF <db:emphasis>point</db:emphasis>)</db:title>
<db:para>Aligns <db:code role="parameter">coordinate</db:code> to <db:code role="parameter">point</db:code>. This method effectively extends the functionality offered by the <db:link xlink:href="qml-qtlocation-map.xml#center-prop">center</db:link> qml property, allowing to align a coordinate to point of the Map element other than its center. This is useful in those applications where the center of the scene (e.g., a cursor) is not to be placed exactly in the center of the map.</db:para>
<db:para>If the map is tilted, and <db:code role="parameter">coordinate</db:code> happens to be behind the camera, or if the map is not ready (see <db:link xlink:href="qml-qtlocation-map.xml#mapReady-prop">mapReady</db:link>), calling this method will have no effect.</db:para>
<db:para>The release of this API with Qt 5.10 is a Technology Preview.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#center-prop">center</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearData-method">
<db:title>void clearData()</db:title>
<db:para>Clears map data collected by the currently selected plugin.</db:para>
<db:note>
<db:para>This method will delete cached files.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#plugin-prop">plugin</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearMapItems-method">
<db:title>void clearMapItems()</db:title>
<db:para>Removes all items and item groups from the map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#mapItems-prop">mapItems</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#addMapItem-method">addMapItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#removeMapItem-method">removeMapItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#addMapItemGroup-method">addMapItemGroup</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#removeMapItemGroup-method">removeMapItemGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fitViewportToGeoShape-method">
<db:title>void fitViewportToGeoShape(<db:emphasis>geoShape</db:emphasis>, <db:emphasis>margins</db:emphasis>)</db:title>
<db:para>Fits the viewport to a specific geo shape <db:code role="parameter">geoShape</db:code>. The <db:code role="parameter">margins</db:code> are in screen pixels.</db:para>
<db:note>
<db:para>If the projection used by the plugin is not WebMercator, and the plugin does not have fitting to shape capability, this method will do nothing.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#visibleRegion-prop">visibleRegion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fitViewportToMapItems-method">
<db:title>void fitViewportToMapItems(list&lt;MapItems&gt; <db:emphasis>items</db:emphasis> = {})</db:title>
<db:para>If no argument is provided, fits the current viewport to the boundary of all map items. The camera is positioned in the center of the map items, and at the largest integral zoom level possible which allows all map items to be visible on screen. If <db:code role="parameter">items</db:code> is provided, fits the current viewport to the boundary of the specified map items only.</db:para>
<db:note>
<db:para>This method gained the optional <db:code role="parameter">items</db:code> argument since Qt 5.15. In previous releases, this method fitted the map to all map items.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#fitViewportToVisibleMapItems-method">fitViewportToVisibleMapItems</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fitViewportToVisibleMapItems-method">
<db:title>void fitViewportToVisibleMapItems()</db:title>
<db:para>Fits the current viewport to the boundary of all <db:emphasis role="bold">visible</db:emphasis> map items. The camera is positioned in the center of the map items, and at the largest integral zoom level possible which allows all map items to be visible on screen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#fitViewportToMapItems-method">fitViewportToMapItems</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromCoordinate-method">
<db:title>point fromCoordinate(coordinate <db:emphasis>coordinate</db:emphasis>, bool <db:emphasis>clipToViewPort</db:emphasis>)</db:title>
<db:para>Returns the position relative to the map item which corresponds to the <db:code role="parameter">coordinate</db:code>.</db:para>
<db:para>If <db:code role="parameter">clipToViewPort</db:code> is true, or not supplied then returns an invalid <db:link xlink:href="qpointf.xml">QPointF</db:link> if <db:code role="parameter">coordinate</db:code> is not within the current viewport.</db:para>
</db:section>
<db:section xml:id="pan-method">
<db:title>void pan(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:para>Starts panning the map by <db:code role="parameter">dx</db:code> pixels along the x-axis and by <db:code role="parameter">dy</db:code> pixels along the y-axis.</db:para>
<db:para>Positive values for <db:code role="parameter">dx</db:code> move the map right, negative values left. Positive values for <db:code role="parameter">dy</db:code> move the map down, negative values up.</db:para>
<db:para>During panning the <db:link xlink:href="qml-qtlocation-map.xml#center-prop">center</db:link>, and <db:link xlink:href="qml-qtlocation-map.xml#zoomLevel-prop">zoomLevel</db:link> may change.</db:para>
</db:section>
<db:section xml:id="prefetchData-method">
<db:title>void prefetchData()</db:title>
<db:para>Optional hint that allows the map to prefetch during this idle period</db:para>
</db:section>
<db:section xml:id="removeMapItem-method">
<db:title>void removeMapItem(MapItem <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Removes the given <db:code role="parameter">item</db:code> from the Map (for example <db:link xlink:href="qml-qtlocation-mapquickitem.xml">MapQuickItem</db:link>, <db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircle</db:link>). If the MapItem does not exist or was not previously added to the map, the method does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-map.xml#mapItems-prop">mapItems</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#addMapItem-method">addMapItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#clearMapItems-method">clearMapItems</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeMapItemGroup-method">
<db:title>void removeMapItemGroup(MapItemGroup <db:emphasis>itemGroup</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">itemGroup</db:code> and the items contained therein from the Map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-mapitemgroup.xml">MapItemGroup</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#addMapItemGroup-method">addMapItemGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeMapItemView-method">
<db:title>void removeMapItemView(MapItemView <db:emphasis>itemView</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">itemView</db:code> and the items instantiated by it from the Map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-map.xml#addMapItemView-method">addMapItemView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBearing-method">
<db:title>void setBearing(real <db:emphasis>bearing</db:emphasis>, coordinate <db:emphasis>coordinate</db:emphasis>)</db:title>
<db:para>Sets the bearing for the map to <db:code role="parameter">bearing</db:code>, rotating it around <db:code role="parameter">coordinate</db:code>. If the Plugin used for the Map supports bearing, the valid range for <db:code role="parameter">bearing</db:code> is between 0 and 360. If the Plugin used for the Map does not support bearing, or if the map is tilted and <db:code role="parameter">coordinate</db:code> happens to be behind the camera, or if the map is not ready (see <db:link xlink:href="qml-qtlocation-map.xml#mapReady-prop">mapReady</db:link>), calling this method will have no effect.</db:para>
<db:para>The release of this API with Qt 5.10 is a Technology Preview.</db:para>
</db:section>
<db:section xml:id="toCoordinate-method">
<db:title>coordinate toCoordinate(QPointF <db:emphasis>position</db:emphasis>, bool <db:emphasis>clipToViewPort</db:emphasis>)</db:title>
<db:para>Returns the coordinate which corresponds to the <db:code role="parameter">position</db:code> relative to the map item.</db:para>
<db:para>If <db:code role="parameter">clipToViewPort</db:code> is true, or not supplied then returns an invalid coordinate if <db:code role="parameter">position</db:code> is not within the current viewport.</db:para>
</db:section>
</db:section>
</db:article>
