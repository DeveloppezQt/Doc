<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Materials C++ Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt 3D Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2014 Klaralvdalens Datakonsult AB (KDAB).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the Qt3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL3$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file. Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;barrel.h&quot;

const char *diffuseColorsName[] = {
    &quot;red&quot;,
    &quot;blue&quot;,
    &quot;green&quot;,
    &quot;rust&quot;,
    &quot;stainless_steel&quot;
};

const char *specularColorsName[] = {
    &quot;_rust&quot;,
    &quot;_stainless_steel&quot;,
    &quot;&quot;
};

const char *bumpsName[] = {
    &quot;no_bumps&quot;,
    &quot;soft_bumps&quot;,
    &quot;middle_bumps&quot;,
    &quot;hard_bumps&quot;
};

Barrel::Barrel(Qt3DCore::QNode *parent)
    : RenderableEntity(parent)
    , m_bumps(NoBumps)
    , m_diffuseColor(Red)
    , m_specularColor(None)
    , m_material(new Qt3DRender::QNormalDiffuseSpecularMapMaterial())
    , m_diffuseTexture(m_material-&gt;diffuse())
    , m_normalTexture(m_material-&gt;normal())
    , m_specularTexture(m_material-&gt;specular())
    , m_diffuseTextureImage(new Qt3DRender::QTextureImage())
    , m_normalTextureImage(new Qt3DRender::QTextureImage())
    , m_specularTextureImage(new Qt3DRender::QTextureImage())
{
    mesh()-&gt;setSource(QUrl(QStringLiteral(&quot;qrc:/assets/metalbarrel/metal_barrel.obj&quot;)));
    transform()-&gt;setScale(0.03f);

    m_diffuseTexture-&gt;addTextureImage(m_diffuseTextureImage);
    m_normalTexture-&gt;addTextureImage(m_normalTextureImage);
    m_specularTexture-&gt;addTextureImage(m_specularTextureImage);

    setNormalTextureSource();
    setDiffuseTextureSource();
    setSpecularTextureSource();
    m_material-&gt;setShininess(10.0f);
    addComponent(m_material);
}

Barrel::~Barrel()
{
}

void Barrel::setDiffuse(Barrel::DiffuseColor diffuse)
{
    if (diffuse != m_diffuseColor) {
        m_diffuseColor = diffuse;
        setDiffuseTextureSource();
    }
}

void Barrel::setSpecular(Barrel::SpecularColor specular)
{
    if (specular != m_specularColor) {
        m_specularColor = specular;
        setSpecularTextureSource();
    }
}

void Barrel::setBumps(Barrel::Bumps bumps)
{
    if (bumps != m_bumps) {
        m_bumps = bumps;
        setNormalTextureSource();
    }
}

void Barrel::setShininess(float shininess)
{
    if (shininess != m_material-&gt;shininess())
        m_material-&gt;setShininess(shininess);
}

Barrel::DiffuseColor Barrel::diffuse() const
{
    return m_diffuseColor;
}

Barrel::SpecularColor Barrel::specular() const
{
    return m_specularColor;
}

Barrel::Bumps Barrel::bumps() const
{
    return m_bumps;
}

float Barrel::shininess() const
{
    return m_material-&gt;shininess();
}

void Barrel::setNormalTextureSource()
{
    m_normalTextureImage-&gt;setSource(QUrl(QStringLiteral(&quot;qrc:/assets/metalbarrel/normal_&quot;) + bumpsName[m_bumps] + QStringLiteral(&quot;.webp&quot;)));
}

void Barrel::setDiffuseTextureSource()
{
    m_diffuseTextureImage-&gt;setSource(QUrl(QStringLiteral(&quot;qrc:/assets/metalbarrel/diffus_&quot;) + diffuseColorsName[m_diffuseColor] + QStringLiteral(&quot;.webp&quot;)));
}

void Barrel::setSpecularTextureSource()
{
    m_specularTextureImage-&gt;setSource(QUrl(QStringLiteral(&quot;qrc:/assets/metalbarrel/specular&quot;) + specularColorsName[m_specularColor] + QStringLiteral(&quot;.webp&quot;)));
}

</db:programlisting>
</db:article>
