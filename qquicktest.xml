<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickTest Namespace</db:title>
<db:productname>QtQmlTest</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Test Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquicktest.xml">QQuickTest</db:link> namespace contains all the functions and macros related to Qt Quick Test.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtQuickTest</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>See the <db:link xlink:href="qtquicktest-index.xml#introduction-to-qt-quick-test">Introduction to Qt Quick Test</db:link> for information about how to write Qt Quick unit tests.</db:para>
<db:para>To link to the Qt Quick Test C++ library, see <db:link xlink:href="qtquicktest-module.xml">Qt Quick Test C++ API</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquicktest-index.xml#executing-c-before-qml-tests">Executing C++ Before QML Tests</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="qIsPolishScheduled">
<db:title>[since 5.13] bool QQuickTest::qIsPolishScheduled(const QQuickItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>qIsPolishScheduled</db:methodname>
<db:methodparam>
<db:type>const QQuickItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool qIsPolishScheduled(const QQuickItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:link xlink:href="qquickitem.xml#updatePolish">updatePolish</db:link>() has not been called on <db:code role="parameter">item</db:code> since the last call to <db:link xlink:href="qquickitem.xml#polish">polish</db:link>(), otherwise returns <db:code>false</db:code>.</db:para>
<db:para>When assigning values to properties in QML, any layouting the item must do as a result of the assignment might not take effect immediately, but can instead be postponed until the item is polished. For these cases, you can use this function to ensure that the item has been polished before the execution of the test continues. For example:</db:para>
<db:programlisting language="cpp">QVERIFY(QQuickTest::qIsPolishScheduled(item));
QVERIFY(QQuickTest::qWaitForItemPolished(item));
</db:programlisting>
<db:para>Without the call to <db:code>qIsPolishScheduled()</db:code> above, the call to <db:code>qWaitForItemPolished()</db:code> might see that no polish was scheduled and therefore pass instantly, assuming that the item had already been polished. This function makes it obvious why an item wasn't polished and allows tests to fail early under such circumstances.</db:para>
<db:para>The QML equivalent of this function is <db:link xlink:href="qml-qttest-testcase.xml#isPolishScheduled-method">isPolishScheduled</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#polish">QQuickItem::polish</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#updatePolish">QQuickItem::updatePolish</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qWaitForItemPolished">
<db:title>[since 5.13] bool QQuickTest::qWaitForItemPolished(const QQuickItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>timeout</db:emphasis> = 5000)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>qWaitForItemPolished</db:methodname>
<db:methodparam>
<db:type>const QQuickItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeout</db:parameter>
<db:initializer>5000</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool qWaitForItemPolished(const QQuickItem *item, int timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Waits for <db:code role="parameter">timeout</db:code> milliseconds or until <db:link xlink:href="qquickitem.xml#updatePolish">updatePolish</db:link>() has been called on <db:code role="parameter">item</db:code>.</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code>updatePolish()</db:code> was called on <db:code role="parameter">item</db:code> within <db:code role="parameter">timeout</db:code> milliseconds, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The QML equivalent of this function is <db:link xlink:href="qml-qttest-testcase.xml#waitForItemPolished-method">waitForItemPolished</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickitem.xml#polish">QQuickItem::polish</db:link>()</db:member>
<db:member><db:link xlink:href="qquickitem.xml#updatePolish">QQuickItem::updatePolish</db:link>()</db:member>
<db:member><db:link xlink:href="qquicktest.xml#qIsPolishScheduled">QQuickTest::qIsPolishScheduled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QUICK_TEST_MAIN">
<db:title>QUICK_TEST_MAIN(<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>QUICK_TEST_MAIN</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QUICK_TEST_MAIN(name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets up the entry point for a Qt Quick Test application. The <db:code role="parameter">name</db:code> argument uniquely identifies this set of tests.</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtQuickTest&amp;gt;
QUICK_TEST_MAIN(example)
</db:programlisting>
<db:note>
<db:para>The macro assumes that your test sources are in the current directory, unless the <db:code>QUICK_TEST_SOURCE_DIR</db:code> environment variable is set.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquicktest.xml#QUICK_TEST_MAIN_WITH_SETUP">QUICK_TEST_MAIN_WITH_SETUP</db:link>()</db:member>
<db:member><db:link xlink:href="qtquicktest-index.xml#running-qt-quick-tests">Running Qt Quick Tests</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QUICK_TEST_MAIN_WITH_SETUP">
<db:title>QUICK_TEST_MAIN_WITH_SETUP(<db:emphasis>name</db:emphasis>, <db:emphasis>QuickTestSetupClass</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>QUICK_TEST_MAIN_WITH_SETUP</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>QuickTestSetupClass</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QUICK_TEST_MAIN_WITH_SETUP(name, QuickTestSetupClass)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets up the entry point for a Qt Quick Test application. The <db:code role="parameter">name</db:code> argument uniquely identifies this set of tests.</db:para>
<db:para>This macro is identical to <db:link xlink:href="qquicktest.xml#QUICK_TEST_MAIN">QUICK_TEST_MAIN</db:link>(), except that it takes an additional argument <db:code role="parameter">QuickTestSetupClass</db:code>, a pointer to a <db:link xlink:href="qobject.xml">QObject</db:link>-derived class. With this class it is possible to define additional setup code to execute before running the QML test.</db:para>
<db:note>
<db:para>The macro assumes that your test sources are in the current directory, unless the <db:code>QUICK_TEST_SOURCE_DIR</db:code> environment variable is set.</db:para>
</db:note>
<db:para>The following snippet demonstrates the use of this macro:</db:para>
<db:programlisting language="cpp">// src_qmltest_qquicktest.cpp
#include &amp;lt;QtQuickTest&amp;gt;
#include &amp;lt;QQmlEngine&amp;gt;
#include &amp;lt;QQmlContext&amp;gt;

class Setup : public QObject
{
    Q_OBJECT

public:
    Setup() {}

public slots:
    void qmlEngineAvailable(QQmlEngine *engine)
    {
        engine-&amp;gt;rootContext()-&amp;gt;setContextProperty(&quot;myContextProperty&quot;, QVariant(true));
    }
};

QUICK_TEST_MAIN_WITH_SETUP(mytest, Setup)

#include &quot;src_qmltest_qquicktest.moc&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquicktest.xml#QUICK_TEST_MAIN">QUICK_TEST_MAIN</db:link>()</db:member>
<db:member><db:link xlink:href="qtquicktest-index.xml#running-qt-quick-tests">Running Qt Quick Tests</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
