<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSvgWidget Class</db:title>
<db:productname>QtSvg</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SVG Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsvgwidget.xml">QSvgWidget</db:link> class provides a widget that is used to display the contents of Scalable Vector Graphics (SVG) files.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSvgWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS SvgWidgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::SvgWidgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += svgwidgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSvgWidget is part of <db:simplelist><db:member>painting</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class enables developers to display SVG drawings alongside standard widgets, and is used in much the same way as <db:link xlink:href="qlabel.xml">QLabel</db:link> is used for displaying text and bitmap images.</db:para>
<db:para>Since <db:link xlink:href="qsvgwidget.xml">QSvgWidget</db:link> is a subclass of <db:link xlink:href="qwidget.xml">QWidget</db:link>, SVG drawings are rendered using the properties of the display. More control can be exercised over the rendering process with the <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link> class, as this can be used to paint onto other paint devices, such as <db:link xlink:href="qimage.xml">QImage</db:link> and QGLWidget. The renderer used by the widget can be obtained with the <db:link xlink:href="qsvgwidget.xml#renderer">renderer</db:link>() function.</db:para>
<db:para>Each <db:link xlink:href="qsvgwidget.xml">QSvgWidget</db:link> can be constructed with the file name of a SVG file, or they can be constructed without a specific file to render and one can be supplied later. The <db:link xlink:href="qsvgwidget.xml#load">load</db:link>() functions provide two different ways to load an SVG file: they accept either the file name of an SVG file or a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> containing the serialized XML representation of an SVG file.</db:para>
<db:para>By default, the widget provides a size hint to reflect the size of the drawing that it displays. If no data has been loaded, the widget provides the default <db:link xlink:href="qwidget.xml">QWidget</db:link> size hint. Subclass this class and reimplement <db:link xlink:href="qsvgwidget.xml#sizeHint">sizeHint</db:link>() if you need to customize this behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link></db:member>
<db:member><db:link xlink:href="qtsvg-module.xml">Qt SVG C++ Classes</db:link></db:member>
<db:member><db:link xlink:href="qpicture.xml">QPicture</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSvgWidget">
<db:title>QSvgWidget::QSvgWidget(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSvgWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSvgWidget(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new SVG display widget with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QSvgWidget-1">
<db:title>QSvgWidget::QSvgWidget(const QString &amp;<db:emphasis>file</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSvgWidget</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSvgWidget(const QString &amp;file, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new SVG display widget with the given <db:code role="parameter">parent</db:code> and loads the contents of the specified <db:code role="parameter">file</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSvgWidget">
<db:title>[virtual] QSvgWidget::~QSvgWidget()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSvgWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSvgWidget()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the widget.</db:para>
</db:section>
<db:section xml:id="load">
<db:title>void QSvgWidget::load(const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void load(const QString &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the contents of the specified SVG <db:code role="parameter">file</db:code> and updates the widget.</db:para>
</db:section>
<db:section xml:id="load-1">
<db:title>void QSvgWidget::load(const QByteArray &amp;<db:emphasis>contents</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>contents</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void load(const QByteArray &amp;contents)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the specified SVG format <db:code role="parameter">contents</db:code> and updates the widget.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QSvgWidget::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="renderer">
<db:title>QSvgRenderer *QSvgWidget::renderer() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSvgRenderer *</db:type>
<db:methodname>renderer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSvgRenderer * renderer() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the renderer used to display the contents of the widget.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QSvgWidget::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
