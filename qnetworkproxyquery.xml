<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkProxyQuery Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> class is used to query the proxy settings for a socket.</db:para>
<db:para>This class was introduced in Qt 4.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkProxyQuery</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkProxyQuery is part of <db:simplelist><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> holds the details of a socket being created or request being made. It is used by <db:link xlink:href="qnetworkproxy.xml">QNetworkProxy</db:link> and <db:link xlink:href="qnetworkproxyfactory.xml">QNetworkProxyFactory</db:link> to allow applications to have a more fine-grained control over which proxy servers are used, depending on the details of the query. This allows an application to apply different settings, according to the protocol or destination hostname, for instance.</db:para>
<db:para><db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> supports the following criteria for selecting the proxy:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>the type of query</db:para>
</db:listitem>
<db:listitem>
<db:para>the local port number to use</db:para>
</db:listitem>
<db:listitem>
<db:para>the destination host name</db:para>
</db:listitem>
<db:listitem>
<db:para>the destination port number</db:para>
</db:listitem>
<db:listitem>
<db:para>the protocol name, such as &quot;http&quot; or &quot;ftp&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>the URL being requested</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The destination host name is the host in the connection in the case of outgoing connection sockets. It is the hostName parameter passed to <db:link xlink:href="qabstractsocket.xml#connectToHost">QTcpSocket::connectToHost</db:link>() or the host component of a URL requested with <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link>.</db:para>
<db:para>The destination port number is the requested port to connect to in the case of outgoing sockets, while the local port number is the port the socket wishes to use locally before attempting the external connection. In most cases, the local port number is used by listening sockets only (<db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link>) or by datagram sockets (<db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link>).</db:para>
<db:para>The protocol name is an arbitrary string that indicates the type of connection being attempted. For example, it can match the scheme of a URL, like &quot;http&quot;, &quot;https&quot; and &quot;ftp&quot;. In most cases, the proxy selection will not change depending on the protocol, but this information is provided in case a better choice can be made, like choosing an caching HTTP proxy for HTTP-based connections, but a more powerful SOCKSv5 proxy for all others.</db:para>
<db:para>The network configuration specifies which configuration to use, when bearer management is used. For example on a mobile phone the proxy settings are likely to be different for the cellular network vs WLAN.</db:para>
<db:para>Some of the criteria may not make sense in all of the types of query. The following table lists the criteria that are most commonly used, according to the type of query.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Query type</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">TcpSocket</db:link></db:para>
</db:td>
<db:td>
<db:para>Normal sockets requesting a connection to a remote server, like <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link>. The peer hostname and peer port match the values passed to <db:link xlink:href="qabstractsocket.xml#connectToHost">QTcpSocket::connectToHost</db:link>(). The local port is usually -1, indicating the socket has no preference in which port should be used. The URL component is not used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">UdpSocket</db:link></db:para>
</db:td>
<db:td>
<db:para>Datagram-based sockets, which can both send and receive. The local port, remote host or remote port fields can all be used or be left unused, depending on the characteristics of the socket. The URL component is not used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">TcpServer</db:link></db:para>
</db:td>
<db:td>
<db:para>Passive server sockets that listen on a port and await incoming connections from the network. Normally, only the local port is used, but the remote address could be used in specific circumstances, for example to indicate which remote host a connection is expected from. The URL component is not used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">UrlRequest</db:link></db:para>
</db:td>
<db:td>
<db:para>A more high-level request, such as those coming from <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>. These requests will inevitably use an outgoing TCP socket, but the this query type is provided to indicate that more detailed information is present in the URL component. For ease of implementation, the URL's host and port are set as the destination address.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>It should be noted that any of the criteria may be missing or unknown (an empty <db:link xlink:href="qstring.xml">QString</db:link> for the hostname or protocol name, -1 for the port numbers). If that happens, the functions executing the query should make their best guess or apply some implementation-defined default values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxy.xml">QNetworkProxy</db:link></db:member>
<db:member><db:link xlink:href="qnetworkproxyfactory.xml">QNetworkProxyFactory</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:member>
<db:member><db:link xlink:href="qabstractsocket.xml#setProxy">QAbstractSocket::setProxy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="QueryType-enum">
<db:title>enum QNetworkProxyQuery::QueryType</db:title>
<db:para>Describes the type of one <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> query.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link></db:emphasis>::TcpSocket</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>a normal, outgoing TCP socket</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link></db:emphasis>::UdpSocket</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>a datagram-based UDP socket, which could send to multiple destinations</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link></db:emphasis>::TcpServer</db:code></db:para>
</db:td>
<db:td><db:code>100</db:code></db:td>
<db:td>
<db:para>a TCP server that listens for incoming connections from the network</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link></db:emphasis>::UrlRequest</db:code></db:para>
</db:td>
<db:td><db:code>101</db:code></db:td>
<db:td>
<db:para>a more complex request which involves loading of a URL</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#queryType">queryType</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setQueryType">setQueryType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkProxyQuery">
<db:title>QNetworkProxyQuery::QNetworkProxyQuery()</db:title>
<db:para>Constructs a default <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> object. By default, the query type will be <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::TcpSocket</db:link>.</db:para>
</db:section>
<db:section xml:id="QNetworkProxyQuery-2">
<db:title>[explicit] QNetworkProxyQuery::QNetworkProxyQuery(const QUrl &amp;<db:emphasis>requestUrl</db:emphasis>, QNetworkProxyQuery::QueryType <db:emphasis>queryType</db:emphasis> = UrlRequest)</db:title>
<db:para>Constructs a <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> with the URL <db:code role="parameter">requestUrl</db:code> and sets the query type to <db:code role="parameter">queryType</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#protocolTag">protocolTag</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#peerHostName">peerHostName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#peerPort">peerPort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QNetworkProxyQuery-3">
<db:title>QNetworkProxyQuery::QNetworkProxyQuery(const QNetworkConfiguration &amp;<db:emphasis>networkConfiguration</db:emphasis>, const QUrl &amp;<db:emphasis>requestUrl</db:emphasis>, QNetworkProxyQuery::QueryType <db:emphasis>queryType</db:emphasis> = UrlRequest)</db:title>
<db:para>Constructs a <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> with the URL <db:code role="parameter">requestUrl</db:code> and sets the query type to <db:code role="parameter">queryType</db:code>. The specified <db:code role="parameter">networkConfiguration</db:code> is used to resolve the proxy settings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#protocolTag">protocolTag</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#peerHostName">peerHostName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#peerPort">peerPort</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#networkConfiguration">networkConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QNetworkProxyQuery-4">
<db:title>[explicit] QNetworkProxyQuery::QNetworkProxyQuery(quint16 <db:emphasis>bindPort</db:emphasis>, const QString &amp;<db:emphasis>protocolTag</db:emphasis> = QString(), QNetworkProxyQuery::QueryType <db:emphasis>queryType</db:emphasis> = TcpServer)</db:title>
<db:para>Constructs a <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> of type <db:code role="parameter">queryType</db:code> and sets the protocol tag to be <db:code role="parameter">protocolTag</db:code>. This constructor is suitable for <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::TcpSocket</db:link> queries because it sets the local port number to <db:code role="parameter">bindPort</db:code>.</db:para>
<db:para>Note that <db:code role="parameter">bindPort</db:code> is of type quint16 to indicate the exact port number that is requested. The value of -1 (unknown) is not allowed in this context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#localPort">localPort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QNetworkProxyQuery-5">
<db:title>QNetworkProxyQuery::QNetworkProxyQuery(const QNetworkConfiguration &amp;<db:emphasis>networkConfiguration</db:emphasis>, quint16 <db:emphasis>bindPort</db:emphasis>, const QString &amp;<db:emphasis>protocolTag</db:emphasis> = QString(), QNetworkProxyQuery::QueryType <db:emphasis>queryType</db:emphasis> = TcpServer)</db:title>
<db:para>Constructs a <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> of type <db:code role="parameter">queryType</db:code> and sets the protocol tag to be <db:code role="parameter">protocolTag</db:code>. This constructor is suitable for <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::TcpSocket</db:link> queries because it sets the local port number to <db:code role="parameter">bindPort</db:code>. The specified <db:code role="parameter">networkConfiguration</db:code> is used to resolve the proxy settings.</db:para>
<db:para>Note that <db:code role="parameter">bindPort</db:code> is of type quint16 to indicate the exact port number that is requested. The value of -1 (unknown) is not allowed in this context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#localPort">localPort</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#networkConfiguration">networkConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QNetworkProxyQuery-6">
<db:title>QNetworkProxyQuery::QNetworkProxyQuery(const QString &amp;<db:emphasis>hostname</db:emphasis>, int <db:emphasis>port</db:emphasis>, const QString &amp;<db:emphasis>protocolTag</db:emphasis> = QString(), QNetworkProxyQuery::QueryType <db:emphasis>queryType</db:emphasis> = TcpSocket)</db:title>
<db:para>Constructs a <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> of type <db:code role="parameter">queryType</db:code> and sets the protocol tag to be <db:code role="parameter">protocolTag</db:code>. This constructor is suitable for <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::TcpSocket</db:link> queries, because it sets the peer hostname to <db:code role="parameter">hostname</db:code> and the peer's port number to <db:code role="parameter">port</db:code>.</db:para>
</db:section>
<db:section xml:id="QNetworkProxyQuery-7">
<db:title>QNetworkProxyQuery::QNetworkProxyQuery(const QNetworkConfiguration &amp;<db:emphasis>networkConfiguration</db:emphasis>, const QString &amp;<db:emphasis>hostname</db:emphasis>, int <db:emphasis>port</db:emphasis>, const QString &amp;<db:emphasis>protocolTag</db:emphasis> = QString(), QNetworkProxyQuery::QueryType <db:emphasis>queryType</db:emphasis> = TcpSocket)</db:title>
<db:para>Constructs a <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> of type <db:code role="parameter">queryType</db:code> and sets the protocol tag to be <db:code role="parameter">protocolTag</db:code>. This constructor is suitable for <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::TcpSocket</db:link> queries, because it sets the peer hostname to <db:code role="parameter">hostname</db:code> and the peer's port number to <db:code role="parameter">port</db:code>. The specified <db:code role="parameter">networkConfiguration</db:code> is used to resolve the proxy settings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#networkConfiguration">networkConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QNetworkProxyQuery-1">
<db:title>QNetworkProxyQuery::QNetworkProxyQuery(const QNetworkProxyQuery &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> object that is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkProxyQuery">
<db:title>[noexcept] QNetworkProxyQuery::~QNetworkProxyQuery()</db:title>
<db:para>Destroys this <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> object.</db:para>
</db:section>
<db:section xml:id="localPort">
<db:title>int QNetworkProxyQuery::localPort() const</db:title>
<db:para>Returns the port number of the socket that will accept incoming packets from remote servers or -1 if the port is not known.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#peerPort">peerPort</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#peerHostName">peerHostName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setLocalPort">setLocalPort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="networkConfiguration">
<db:title>QNetworkConfiguration QNetworkProxyQuery::networkConfiguration() const</db:title>
<db:para>Returns the network configuration component of the query.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setNetworkConfiguration">setNetworkConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="peerHostName">
<db:title>QString QNetworkProxyQuery::peerHostName() const</db:title>
<db:para>Returns the host name or IP address being of the outgoing connection being requested, or an empty string if the remote hostname is not known.</db:para>
<db:para>If the query type is <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::UrlRequest</db:link>, this function returns the host component of the URL being requested.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#peerPort">peerPort</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#localPort">localPort</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setPeerHostName">setPeerHostName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="peerPort">
<db:title>int QNetworkProxyQuery::peerPort() const</db:title>
<db:para>Returns the port number for the outgoing request or -1 if the port number is not known.</db:para>
<db:para>If the query type is <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::UrlRequest</db:link>, this function returns the port number of the URL being requested. In general, frameworks will fill in the port number from their default values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#peerHostName">peerHostName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#localPort">localPort</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setPeerPort">setPeerPort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="protocolTag">
<db:title>QString QNetworkProxyQuery::protocolTag() const</db:title>
<db:para>Returns the protocol tag for this <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> object, or an empty <db:link xlink:href="qstring.xml">QString</db:link> in case the protocol tag is unknown.</db:para>
<db:para>In the case of queries of type <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::UrlRequest</db:link>, this function returns the value of the scheme component of the URL.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setProtocolTag">setProtocolTag</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#url">url</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="queryType">
<db:title>QNetworkProxyQuery::QueryType QNetworkProxyQuery::queryType() const</db:title>
<db:para>Returns the query type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setQueryType">setQueryType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLocalPort">
<db:title>void QNetworkProxyQuery::setLocalPort(int <db:emphasis>port</db:emphasis>)</db:title>
<db:para>Sets the port number that the socket wishes to use locally to accept incoming packets from remote servers to <db:code role="parameter">port</db:code>. The local port is most often used with the <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::TcpServer</db:link> and <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::UdpSocket</db:link> query types.</db:para>
<db:para>Valid values are 0 to 65535 (with 0 indicating that any port number will be acceptable) or -1, which means the local port number is unknown or not applicable.</db:para>
<db:para>In some circumstances, for special protocols, it's the local port number can also be used with a query of type <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::TcpSocket</db:link>. When that happens, the socket is indicating it wishes to use the port number <db:code role="parameter">port</db:code> when connecting to a remote host.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#localPort">localPort</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setPeerPort">setPeerPort</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setPeerHostName">setPeerHostName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNetworkConfiguration">
<db:title>void QNetworkProxyQuery::setNetworkConfiguration(const QNetworkConfiguration &amp;<db:emphasis>networkConfiguration</db:emphasis>)</db:title>
<db:para>Sets the network configuration component of this <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> object to be <db:code role="parameter">networkConfiguration</db:code>. The network configuration can be used to return different proxy settings based on the network in use, for example WLAN vs cellular networks on a mobile phone.</db:para>
<db:para>In the case of &quot;user choice&quot; or &quot;service network&quot; configurations, you should first start the <db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link> and obtain the active configuration from its properties.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#networkConfiguration">networkConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPeerHostName">
<db:title>void QNetworkProxyQuery::setPeerHostName(const QString &amp;<db:emphasis>hostname</db:emphasis>)</db:title>
<db:para>Sets the hostname of the outgoing connection being requested to <db:code role="parameter">hostname</db:code>. An empty hostname can be used to indicate that the remote host is unknown.</db:para>
<db:para>The peer host name can also be used to indicate the expected source address of an incoming connection in the case of <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::UdpSocket</db:link> or <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::TcpServer</db:link> query types.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#peerHostName">peerHostName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setPeerPort">setPeerPort</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setLocalPort">setLocalPort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPeerPort">
<db:title>void QNetworkProxyQuery::setPeerPort(int <db:emphasis>port</db:emphasis>)</db:title>
<db:para>Sets the requested port number for the outgoing connection to be <db:code role="parameter">port</db:code>. Valid values are 1 to 65535, or -1 to indicate that the remote port number is unknown.</db:para>
<db:para>The peer port number can also be used to indicate the expected port number of an incoming connection in the case of <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::UdpSocket</db:link> or <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::TcpServer</db:link> query types.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#peerPort">peerPort</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setPeerHostName">setPeerHostName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setLocalPort">setLocalPort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProtocolTag">
<db:title>void QNetworkProxyQuery::setProtocolTag(const QString &amp;<db:emphasis>protocolTag</db:emphasis>)</db:title>
<db:para>Sets the protocol tag for this <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> object to be <db:code role="parameter">protocolTag</db:code>.</db:para>
<db:para>The protocol tag is an arbitrary string that indicates which protocol is being talked over the socket, such as &quot;http&quot;, &quot;xmpp&quot;, &quot;telnet&quot;, etc. The protocol tag is used by the backend to return a request that is more specific to the protocol in question: for example, a HTTP connection could be use a caching HTTP proxy server, while all other connections use a more powerful SOCKSv5 proxy server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#protocolTag">protocolTag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQueryType">
<db:title>void QNetworkProxyQuery::setQueryType(QNetworkProxyQuery::QueryType <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Sets the query type of this object to be <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#queryType">queryType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUrl">
<db:title>void QNetworkProxyQuery::setUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:para>Sets the URL component of this <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> object to be <db:code role="parameter">url</db:code>. Setting the URL will also set the protocol tag, the remote host name and port number. This is done so as to facilitate the implementation of the code that determines the proxy server to be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#url">url</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#peerHostName">peerHostName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkproxyquery.xml#peerPort">peerPort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 5.0] void QNetworkProxyQuery::swap(QNetworkProxyQuery &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this network proxy query instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="url">
<db:title>QUrl QNetworkProxyQuery::url() const</db:title>
<db:para>Returns the URL component of this <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> object in case of a query of type <db:link xlink:href="qnetworkproxyquery.xml#QueryType-enum">QNetworkProxyQuery::UrlRequest</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkproxyquery.xml#setUrl">setUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QNetworkProxyQuery::operator!=(const QNetworkProxyQuery &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> object does not contain the same data as <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QNetworkProxyQuery &amp;QNetworkProxyQuery::operator=(const QNetworkProxyQuery &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copies the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QNetworkProxyQuery::operator==(const QNetworkProxyQuery &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qnetworkproxyquery.xml">QNetworkProxyQuery</db:link> object contains the same data as <db:code role="parameter">other</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
