<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Word Count</db:title>
<db:productname>QtConcurrent</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to use the map-reduce algorithm.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Concurrent <db:emphasis>Word Count</db:emphasis> example demonstrates the use of the map-reduce algorithm when applied to the problem of counting words in a collection of files.</db:para>
<db:para>First, the Application starts a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> to select a starting path, and then prints the output to the console.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="comparing-the-operations">
<db:title>Comparing the operations</db:title>
<db:para>Compare a single-threaded, sequential approach to counting the words in the text files to a multithreaded approach with mappedReduced():</db:para>
<db:programlisting language="cpp">    ...
    WordCount total = singleThreadedWordCount(files);
    ...
    WordCount total = QtConcurrent::mappedReduced(files, countWords, reduce).result();
    ...
</db:programlisting>
<db:para>The first argument to the <db:link xlink:href="qtconcurrent.xml#mappedReduced">mappedReduced</db:link> function is the container to operate on. The second argument is the mapping function <db:code>countWords()</db:code>. It is called in parallel by multiple threads. The third argument is the reducing function <db:code>reduce()</db:code>. It is called once for each result returned by the mapping function, and generates the final computation result.</db:para>
<db:para>The function returns a <db:link xlink:href="qfuture.xml">QFuture</db:link> object of type <db:code>WordCount</db:code>. Call the <db:link xlink:href="qfuture.xml#result">result</db:link> function immediately on this <db:link xlink:href="qfuture.xml">QFuture</db:link> to block further execution until the result becomes available.</db:para>
<db:note>
<db:para>The mapping function must be thread-safe since it is called from multiple threads.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/qtconcurrent/wordcount?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
