<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Changes to Qt WebEngine</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Migrate Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> to Qt 6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 6 is a result of the conscious effort to make the framework more efficient and easy to use.</db:para>
<db:para>We try to maintain binary and source compatibility for all the public APIs in each release. But some changes were inevitable in an effort to make Qt a better framework</db:para>
<db:para>In this topic we summarize those changes in Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link>, and provide guidance to handle them.</db:para>
<db:section xml:id="moved-classes">
<db:title>Moved Classes</db:title>
<db:section xml:id="the-qt-webengine-module">
<db:title>The Qt WebEngine module</db:title>
<db:para>Has been renamed to the Qt WebEngineQuick module to not collide with the name of the super module, and to be consistent with other Quick modules.</db:para>
<db:para>If you port your Qt Quick application, please remember to use the new module name in your qmake project file.</db:para>
<db:programlisting language="cpp">QT += webenginequick
</db:programlisting>
</db:section>
<db:section xml:id="classes-moved-from-qt-webenginewidgets-to-qt-webenginecore">
<db:title>Classes moved from Qt WebEngineWidgets to Qt WebEngineCore</db:title>
<db:para>Several classes have been moved from Qt WebEngineWidgets to Qt WebEngineCore if they did not use the Widgets module. In most cases this change should be source compatible unless you included the module name in the include header, in which case you need to update your includes.</db:para>
<db:section xml:id="classes-moved-with-minimal-changes">
<db:title>Classes moved with minimal changes</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qwebenginehistory.xml">QWebEngineHistory</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwebenginescriptcollection.xml">QWebEngineScriptCollection</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwebengineclientcertificateselection.xml">QWebEngineClientCertificateSelection</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwebenginesettings.xml">QWebEngineSettings</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qwebenginefullscreenrequest.xml">QWebEngineFullScreenRequest</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qwebenginecertificateerror">
<db:title>QWebEngineCertificateError</db:title>
<db:para>Has been unified between QML and C++ versions, so both are now accepted or rejected via methods on the class.</db:para>
</db:section>
<db:section xml:id="qwebenginecontextmenudata">
<db:title>QWebEngineContextMenuData</db:title>
<db:para>Has been moved to Core and renamed <db:link xlink:href="qwebenginecontextmenurequest.xml">QWebEngineContextMenuRequest</db:link>.</db:para>
</db:section>
<db:section xml:id="qwebenginedownloaditem">
<db:title>QWebEngineDownloadItem</db:title>
<db:para>Has been moved to Core and renamed <db:link xlink:href="qwebenginedownloadrequest.xml">QWebEngineDownloadRequest</db:link>.</db:para>
</db:section>
<db:section xml:id="qwebenginepage">
<db:title>QWebEnginePage</db:title>
<db:para>Has been moved to Core, and API that worked on <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> or <db:link xlink:href="qprinter.xml">QPrinter</db:link> has been moved, and can now be accessed only from <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link>. See Changed API.</db:para>
</db:section>
</db:section>
<db:section xml:id="classes-moved-from-qt-webenginequick-to-qt-webenginecore">
<db:title>Classes moved from Qt WebEngineQuick to Qt WebEngineCore</db:title>
<db:section xml:id="webenginenavigationrequest">
<db:title>WebEngineNavigationRequest</db:title>
<db:para>Is now <db:link xlink:href="qwebenginenavigationrequest.xml">QWebEngineNavigationRequest</db:link>, and accessible from C++ API as well, adding a more informative variant of <db:link xlink:href="qwebenginepage.xml#acceptNavigationRequest">QWebEnginePage::acceptNavigationRequest</db:link>().</db:para>
</db:section>
<db:section xml:id="webenginenewviewrequest">
<db:title>WebEngineNewViewRequest</db:title>
<db:para>Is now <db:link xlink:href="qml-qtwebengine-webenginenewwindowrequest.xml">WebEngineNewWindowRequest</db:link> and <db:link xlink:href="qwebenginenewwindowrequest.xml">QWebEngineNewWindowRequest</db:link>, and accessible from C++ API as well, adding a more informative variant of <db:link xlink:href="qwebenginepage.xml#createWindow">QWebEnginePage::createWindow</db:link>().</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="changed-api">
<db:title>Changed API</db:title>
<db:section xml:id="c">
<db:title>C++</db:title>
<db:section xml:id="qwebenginepage-certificateerror">
<db:title>QWebEnginePage::certificateError()</db:title>
<db:para>Is now a signal instead of a derived method. The errors are either accepted or rejected via methods on the <db:link xlink:href="qwebenginecertificateerror.xml">QWebEngineCertificateError</db:link> class.</db:para>
</db:section>
<db:section xml:id="qwebenginepage-print">
<db:title>QWebEnginePage::print()</db:title>
<db:para>Has been moved to <db:link xlink:href="qwebengineview.xml#print">QWebEngineView::print</db:link>() and no longer takes a callback argument but signals finished with <db:link xlink:href="qwebengineview.xml#printFinished">QWebEngineView::printFinished</db:link>() instead. It was never possible to have two active print jobs at the same time.</db:para>
</db:section>
<db:section xml:id="qwebenginepage-view">
<db:title>QWebEnginePage::view()</db:title>
<db:para>Has been removed as <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> and <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> are now in different modules. The view associated with a page can be accessed using the static helper <db:link xlink:href="qwebengineview.xml#forPage">QWebEngineView::forPage</db:link>().</db:para>
</db:section>
<db:section xml:id="qwebengineprofile-defaultprofile">
<db:title>QWebEngineProfile::defaultProfile()</db:title>
<db:para>Has been removed. The default profile is now an off-the-record profile, and only used if a <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> is created without an explicit profile. To maintain Qt 5 like behavior, create a global profile called &quot;Default&quot; and use it when creating every <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="qml">
<db:title>QML</db:title>
<db:section xml:id="webenginenavigationrequest">
<db:title>WebEngineNavigationRequest</db:title>
<db:para>The navigation requests are now accepted or rejected like other request objects using accept() or reject() methods.</db:para>
</db:section>
<db:section xml:id="webenginenewviewrequest">
<db:title>WebEngineNewViewRequest</db:title>
<db:para>Has been renamed <db:link xlink:href="qml-qtwebengine-webenginenewwindowrequest.xml">WebEngineNewWindowRequest</db:link>.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="changed-behavior">
<db:title>Changed Behavior</db:title>
<db:section xml:id="default-profile">
<db:title>Default Profile</db:title>
<db:para>The default profile is now <db:emphasis>off the record</db:emphasis>. To have a standard browser profile with disk-cache and cookies, we recommend creating your own profile and using that explicitly.</db:para>
</db:section>
<db:section xml:id="qrc-scheme">
<db:title>QRC Scheme</db:title>
<db:para>Can no longer be accessed from custom schemes by default, nor can it access local content directly. If the Qt 5 behavior is needed, it can be restored by registering the qrc scheme like a custom URL scheme, and setting the CorsEnabled and LocalAccessAllowed access flags.</db:para>
<db:programlisting language="cpp">QWebEngineUrlScheme qrcScheme(QByteArrayLiteral(&quot;qrc&quot;));
qrcScheme.setFlags(QWebEngineUrlScheme::SecureScheme
                   | QWebEngineUrlScheme::LocalAccessAllowed
                   | QWebEngineUrlScheme::CorsEnabled
                   | QWebEngineUrlScheme::ViewSourceAllowed);
QWebEngineUrlScheme::registerScheme(qrcScheme);
</db:programlisting>
</db:section>
<db:section xml:id="ocsp-certificate-revocation-checking">
<db:title>OCSP Certificate Revocation Checking</db:title>
<db:para>In Qt 5 OCSP could be enabled on Linux using QWebEngineProfile::setUseForGlobalCertificateVerification(true) on a <db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link>. This has been removed in Qt6 as this specific form of OCSP is considered bad. As of Qt 6.2, no new method for revoked certificate checking on Linux has yet been added.</db:para>
</db:section>
</db:section>
</db:article>
