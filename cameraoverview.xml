<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Camera Overview</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Camera viewfinder, still image capture, and video recording.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Multimedia API provides a number of camera related classes, so you can access images and videos from mobile device cameras or web cameras. There are both C++ and QML APIs for common tasks.</db:para>
<db:section xml:id="camera-features">
<db:title>Camera Features</db:title>
<db:para>In order to use the camera classes, a quick overview of the way a camera works is needed. If you're already familiar with this, you can skip ahead to <db:link xlink:href="cameraoverview.xml#camera-tldr">Camera implementation details</db:link>. For a more detailed explanations of how a camera works, see the following YouTube clip.</db:para>
<db:mediaobject>
<db:videoobject>
<?db video="iframe"?>
<db:videodata format="youtube" fileref="qS1FmgPVLqw">
</db:videodata>
</db:videoobject>
<db:imageobject>
<db:imagedata fileref="images/qS1FmgPVLqw.jpg">
</db:imagedata>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="the-lens-assembly">
<db:title>The Lens Assembly</db:title>
<db:para>At one end of the camera assembly is the lens assembly (one or more lenses, arranged to focus light onto the sensor). The lenses themselves can sometimes be moved to adjust things like focus and zoom. They might also be fixed in an arrangement for a good balance between maintaining focus and cost.</db:para>
<db:mediaobject>
<db:alt>&quot;An animation of how focus works&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/how-focus-works.gif"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:alt>&quot;An animation of how zoom works.&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/Zoom.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>Some lens assemblies can automatically be adjusted so that an object at different distances from the camera can be kept in focus. This is usually done by measuring how sharp a particular area of the frame is, and then adjusting the lens assembly to find the peak sharpness. In some cases, the camera will always use the center of the frame for this. In other cases, a camera may also allow this target focus region to be specified. Some examples of this feature include:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Face zoom: Using computer vision to detect and use one or more faces as the target.</db:para>
</db:listitem>
<db:listitem>
<db:para>Touch to zoom: Enabling the user to manually select an area via the preview screen.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="the-sensor">
<db:title>The Sensor</db:title>
<db:para>Once light arrives at the sensor, it gets converted into digital pixels. This process can depend on a number of things but ultimately comes down to two things:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The length of time conversion is allowed to take. Also known as exposure time.</db:para>
</db:listitem>
<db:listitem>
<db:para>How bright the light is.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The longer a conversion is allowed to take, the better the resulting image quality. Using a flash can assist with letting more light hit the sensor, allowing it to convert pixels faster, giving better quality for the same amount of time. Conversely, allowing a longer conversion time can let you take photos in darker environments, <db:emphasis role="bold">as long as the camera is steady</db:emphasis>. If the camera moves while the sensor is recording, the resulting image is blurred.</db:para>
</db:section>
<db:section xml:id="image-processing">
<db:title>Image Processing</db:title>
<db:para>After the image has been captured by the sensor, the camera firmware performs various image processing tasks on it to compensate for various sensor characteristics, current lighting, and desired image properties. Faster sensor pixel conversion times may introduce digital noise, so some amount of image processing can be done to remove this, based on the camera sensor settings.</db:para>
<db:para>The color of the image can also be adjusted at this stage to compensate for different light sources - fluorescent lights and sunlight give very different appearances to the same object, so the image can be adjusted based on the white balance of the picture (due to the different color temperatures of the light sources).</db:para>
<db:mediaobject>
<db:alt>&quot;5 examples of various image processing techniques.&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/image_processing.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Some forms of &quot;special effects&quot; can also be performed at this stage. Black and white, sepia, or &quot;negative&quot; style images can be produced.</db:para>
</db:section>
<db:section xml:id="recording-for-posterity">
<db:title>Recording for Posterity</db:title>
<db:para>Finally, once a perfectly focused, exposed and processed image has been created, it can be put to good use. Camera images can be further processed by application code (for example, to detect bar-codes, or to stitch together a panoramic image), or saved to a common format like JPEG, or used to create a movie. Many of these tasks have classes to assist them.</db:para>
<db:anchor xml:id="camera-tldr"/>
</db:section>
</db:section>
<db:section xml:id="camera-implementation-details">
<db:title>Camera Implementation Details</db:title>
<db:section xml:id="detecting-and-selecting-a-camera">
<db:title>Detecting and Selecting a Camera</db:title>
<db:para>Before using the camera APIs, you should check that a camera is available at runtime. If there is none available, you could disable camera related features in your application. To perform this check in C++, use the <db:link xlink:href="qmediadevices.xml#videoInputs-prop">QMediaDevices::videoInputs</db:link>() function, as shown in the example below:</db:para>
<db:programlisting language="cpp">bool checkCameraAvailability()
{
    if (QMediaDevices::videoInputs().count() &amp;gt; 0)
        return true;
    else
        return false;
}
</db:programlisting>
<db:para>Access a camera using the <db:link xlink:href="qcamera.xml">QCamera</db:link> class in C++ or the <db:link xlink:href="qml-qtmultimedia-camera.xml">Camera</db:link> type in QML.</db:para>
<db:para>When multiple cameras are available, you can specify which one to use.</db:para>
<db:para>In C++:</db:para>
<db:programlisting language="cpp">const QList&amp;lt;QCameraDevice&amp;gt; cameras = QMediaDevices::videoInputs();
for (const QCameraDevice &amp;amp;cameraDevice : cameras) {
    if (cameraDevice.description() == &quot;mycamera&quot;)
        camera = new QCamera(cameraDevice);
}
</db:programlisting>
<db:para>In QML, you can select the camera by setting the <db:link xlink:href="qml-qtmultimedia-camera.xml#cameraDevice-prop">Camera::cameraDevice</db:link> property. You can also select a camera by its physical position on the system rather than by camera info. This is useful on mobile devices, which often have a front-facing and a back-facing camera.</db:para>
<db:para>In C++:</db:para>
<db:programlisting language="cpp">camera = new QCamera(QCameraDevice::FrontFace);
</db:programlisting>
<db:para>In QML, you can set the <db:code>Camera</db:code> <db:link xlink:href="qml-qtmultimedia-camera.xml#cameraDevice-prop">cameraDevice</db:link> property. Available cameras can be retrieved with <db:link xlink:href="qml-qtmultimedia-mediadevices.xml">MediaDevices</db:link>.videoInputs</db:para>
<db:para>In QML:</db:para>
<db:programlisting language="qml">Camera {
    position: Camera.FrontFace
}
</db:programlisting>
<db:para>If both <db:link xlink:href="qcameradevice.xml">QCameraDevice</db:link> and position aren't specified, the default camera will be used. On desktop platforms, the default camera is set by the user in the system settings. On a mobile device, the back-facing camera is usually the default camera. You can get the default camera with <db:link xlink:href="qmediadevices.xml#defaultVideoInput-prop">QMediaDevices::defaultVideoInput</db:link>() or <db:link xlink:href="qml-qtmultimedia-mediadevices.xml">MediaDevices</db:link>.defaultVideoInput in QML.</db:para>
</db:section>
<db:section xml:id="preview">
<db:title>Preview</db:title>
<db:para>While not strictly necessary, it's often useful to be able to see what the camera is pointing at. This is known as a preview.</db:para>
<db:para>Depending on whether you're using QML or C++, you can do this in multiple ways. In QML, you can use <db:link xlink:href="qml-qtmultimedia-camera.xml">Camera</db:link> and videoOutput together to monitor a captureSession.</db:para>
<db:programlisting language="qml">Item {
    VideoOutput {
        id: output
        anchors.fill: parent
    }
    CaptureSession {
        videoOutput: output

        Camera {
            // You can adjust various settings in here
        }
    }
}
</db:programlisting>
<db:para>In C++, your choice depends on whether you are using widgets, or <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>. The <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> class is used in the widgets case, and <db:link xlink:href="qgraphicsvideoitem.xml">QGraphicsVideoItem</db:link> is useful for <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>.</db:para>
<db:programlisting language="cpp">QMediaCaptureSession captureSession;
camera = new QCamera;
captureSession.setCamera(camera);
viewfinder = new QVideoWidget;
captureSession.setVideoOutput(viewfinder);
viewfinder-&amp;gt;show();

camera-&amp;gt;start(); // to start the camera
</db:programlisting>
<db:para>For advanced usage (like processing preview frames as they come, which enables detection of objects or patterns), you can also use your own <db:link xlink:href="qvideosink.xml">QVideoSink</db:link> and set that as the videoOutput for the <db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link>. In this case, you will need to render the preview image yourself by processing the data received from the videoFrameChanged() signal.</db:para>
<db:programlisting language="cpp">QMediaCaptureSession captureSession;
camera = new QCamera;
captureSession.setCamera(camera);
mySink = new QVideoSink;
captureSession.setVideoOutput(mySink);

camera-&amp;gt;start();
// MyVideoSink::setVideoFrame(..) will be called with video frames
</db:programlisting>
<db:para>On mobile devices, the preview image is by default oriented in the same way as the device. Thus, as the user rotates the device, the preview image will switch between portrait and landscape mode. Once you start recording, the orientation will be locked. To avoid a poor user experience, you should also lock the orientation of the applications user interface while recording. This can be achieved using the <db:link xlink:href="qwindow.xml#contentOrientation-prop">contentOrientation</db:link> property of <db:link xlink:href="qwindow.xml">QWindow</db:link>.</db:para>
</db:section>
<db:section xml:id="still-images">
<db:title>Still Images</db:title>
<db:para>After setting up a viewfinder and finding something photogenic, to capture an image we need to initialize a new <db:link xlink:href="qimagecapture.xml">QImageCapture</db:link> object. All that is then needed is to start the camera and capture the image.</db:para>
<db:programlisting language="cpp">QMediaCaptureSession captureSession;
camera = new QCamera;
captureSession.setCamera(camera);
imageCapture = new QImageCapture;
captureSession.setImageCapture(imageCapture);

camera-&amp;gt;start(); // Viewfinder frames start flowing

//on shutter button pressed
imageCapture-&amp;gt;capture();
</db:programlisting>
</db:section>
<db:section xml:id="movies">
<db:title>Movies</db:title>
<db:para>Previously we saw code that allowed the capture of a still image. Recording video requires the use of a <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> object.</db:para>
<db:para>To record video we need to create a camera object as before but this time as well as creating a viewfinder, we will also initialize a media recorder object.</db:para>
<db:programlisting language="cpp">QMediaCaptureSession captureSession;
camera = new QCamera;
captureSession.setCamera(camera);
recorder = new QMediaRecorder(camera);
captureSession.setRecorder(recorder);

camera-&amp;gt;start();

// setup output format for the recorder
QMediaFormat format(QMediaFormat::MPEG4);
format.setVideoCodec(QMediaRecorder::VideoCodec::H264);
format.setAudioCodec(QMediaRecorder::AudioCodec::MP3);
recorder-&amp;gt;setMediaFormat(settings);

//on shutter button pressed
recorder-&amp;gt;record();

// sometime later, or on another press
recorder-&amp;gt;stop();
</db:programlisting>
<db:para>Signals from the <db:emphasis>QMediaRecorder</db:emphasis> can be connected to slots to react to changes in the state of the encoding process or error events. Recording starts when <db:link xlink:href="qmediarecorder.xml#record">QMediaRecorder::record</db:link>() is called. This causes the signal <db:link xlink:href="qmediarecorder.xml#recorderStateChanged">recorderStateChanged</db:link>() to be emitted. Recording is controlled by the record(), stop(), and pause() slots of <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link>.</db:para>
</db:section>
<db:section xml:id="controlling-the-imaging-pipeline">
<db:title>Controlling the Imaging Pipeline</db:title>
<db:para>Now that the basics of capturing images and movies are covered, there are a number of ways to control the imaging pipeline to implement some interesting techniques. As explained earlier, several physical and electronic elements combine to determine the final images, and you can control them with different classes.</db:para>
<db:section xml:id="focus-and-zoom">
<db:title>Focus and Zoom</db:title>
<db:para><db:link xlink:href="qcamera.xml">QCamera</db:link> allows you to set the general focus policy by means of the enums for the <db:link xlink:href="qcamera.xml#FocusMode-enum">FocusMode</db:link>. <db:link xlink:href="qcamera.xml#FocusMode-enum">FocusMode</db:link> deals with settings such as <db:link xlink:href="qcamera.xml#FocusMode-enum">QCamera::FocusModeAuto</db:link>, and <db:link xlink:href="qcamera.xml#FocusMode-enum">QCamera::FocusModeInfinity</db:link>.</db:para>
<db:para>For camera hardware that supports it, <db:link xlink:href="qcamera.xml#FocusMode-enum">QCamera::FocusModeAutoNear</db:link> allows imaging of things that are close to the sensor. This is useful in applications like bar-code recognition, or business card scanning.</db:para>
<db:para>In addition to focus, <db:link xlink:href="qcamera.xml">QCamera</db:link> allows you to control any available zoom functionality using <db:link xlink:href="qcamera.xml#setZoomFactor">setZoomFactor</db:link>() or <db:link xlink:href="qcamera.xml#zoomTo">zoomTo</db:link>(). The available zoom range might be limited or entirely fixed to unity (1:1). The allowed range can be checked with <db:link xlink:href="qcamera.xml#minimumZoomFactor-prop">minimumZoomFactor</db:link>() and <db:link xlink:href="qcamera.xml#maximumZoomFactor-prop">maximumZoomFactor</db:link>().</db:para>
</db:section>
<db:section xml:id="exposure-shutter-speed-and-flash">
<db:title>Exposure, Shutter Speed and Flash</db:title>
<db:para>There are a number of settings that affect the amount of light that hits the camera sensor, and hence the quality of the resulting image.</db:para>
<db:para>The main settings for automatic image taking are the <db:link xlink:href="qcamera.xml#ExposureMode-enum">exposure mode</db:link> and <db:link xlink:href="qcamera.xml#FlashMode-enum">flash mode</db:link>. Several other settings (such as: ISO setting and exposure time) are usually managed automatically, but can also be overridden if desired.</db:para>
<db:para>Finally, you can control the flash hardware (if present) using this class. In some cases the hardware may also double as a torch.</db:para>
<db:anchor xml:id="camera-image-processing"/>
</db:section>
<db:section xml:id="image-processing">
<db:title>Image Processing</db:title>
<db:para>The <db:link xlink:href="qcamera.xml">QCamera</db:link> class lets you adjust the image processing part of the pipeline. These settings include:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qcamera.xml#WhiteBalanceMode-enum">white balance</db:link> (also known as color temperature)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Most cameras support automatic settings for all of these, so you shouldn't need to adjust them unless the user wants a specific setting.</db:para>
</db:section>
<db:section xml:id="canceling-asynchronous-operations">
<db:title>Canceling Asynchronous Operations</db:title>
<db:para>Various operations, such as image capture and auto focusing, occur asynchronously. These operations can often be canceled by the start of a new operation, as long as this is supported by the camera.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>There are both C++ and QML examples available.</db:para>
<db:section xml:id="c-examples">
<db:title>C++ Examples</db:title>
<db:variablelist role="camera_examples">
<db:varlistentry>
<db:term><db:link xlink:href="qtmultimedia-camera-example.xml" xlink:role="page">Camera Example</db:link></db:term>
<db:listitem>
<db:para>Shows how to capture a still image or record video.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qml-examples">
<db:title>QML Examples</db:title>
<db:variablelist role="camera_examples_qml">
<db:varlistentry>
<db:term><db:link xlink:href="qtmultimedia-declarative-camera-example.xml" xlink:role="page">QML Camera Application</db:link></db:term>
<db:listitem>
<db:para>This Qt Quick based application shows how to use the API to capture a still image or video.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtmultimedia-video-recorder-example.xml" xlink:role="page">QML Video Recorder</db:link></db:term>
<db:listitem>
<db:para>Recording audio and video using Qt Quick.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
<db:section xml:id="reference-documentation">
<db:title>Reference Documentation</db:title>
<db:section xml:id="c-classes">
<db:title>C++ Classes</db:title>
<db:variablelist role="multimedia_camera">
<db:varlistentry>
<db:term><db:link xlink:href="qcamera.xml" xlink:role="class">QCamera</db:link></db:term>
<db:listitem>
<db:para>The QCamera class provides interface for system camera devices.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcameradevice.xml" xlink:role="class">QCameraDevice</db:link></db:term>
<db:listitem>
<db:para>The QCameraDevice class provides general information about camera devices.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcameraformat.xml" xlink:role="class">QCameraFormat</db:link></db:term>
<db:listitem>
<db:para>The QCameraFormat class describes a video format supported by a camera device.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qimagecapture.xml" xlink:role="class">QImageCapture</db:link></db:term>
<db:listitem>
<db:para>The QImageCapture class is used for the recording of media content.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qml-types">
<db:title>QML Types</db:title>
<db:variablelist role="camera_qml">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-camera.xml" xlink:role="">Camera</db:link></db:term>
<db:listitem>
<db:para>An interface for camera settings related to focus and zoom.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-imagecapture.xml" xlink:role="">ImageCapture</db:link></db:term>
<db:listitem>
<db:para>An interface for capturing camera images.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
