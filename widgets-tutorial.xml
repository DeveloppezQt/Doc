<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Widgets Tutorial</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This tutorial covers basic usage of widgets and layouts, showing how they are used to build GUI applications.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>Widgets are the basic building blocks for graphical user interface (GUI) applications built with Qt. Each GUI component (e.g. buttons, labels, text editors) is a <db:link xlink:href="qwidget.xml">widget</db:link> that is placed somewhere within a user interface window, or is displayed as an independent window. Each type of widget is provided by a subclass of <db:link xlink:href="qwidget.xml">QWidget</db:link>, which is itself a subclass of <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:para><db:link xlink:href="qwidget.xml">QWidget</db:link> is not an abstract class. It can be used as a container for other widgets, and it can be subclassed with minimal effort to create new, custom widgets. <db:link xlink:href="qwidget.xml">QWidget</db:link> is often used to create a window inside which other <db:link xlink:href="qwidget.xml">QWidget</db:link>s are placed.</db:para>
<db:para>As with <db:link xlink:href="qobject.xml">QObject</db:link>s, <db:link xlink:href="qwidget.xml">QWidget</db:link>s can be created with parent objects to indicate ownership, ensuring that objects are deleted when they are no longer used. With widgets, these parent-child relationships have an additional meaning: each child widget is displayed within the screen area occupied by its parent widget. This means that when you delete a window widget, all the child widgets it contains are also deleted.</db:para>
</db:section>
<db:section xml:id="writing-a-main-function">
<db:title>Writing a Main Function</db:title>
<db:para>Many of the GUI examples provided with Qt follow the pattern of having a main.cpp file, which contains the standard code to initialize the application, plus any number of other source/header files that contain the application logic and custom GUI components.</db:para>
<db:para>A typical main() function in main.cpp looks like this:</db:para>
<db:programlisting language="cpp">#include &lt;QtWidgets&gt;

// Include header files for application components.
// ...

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    // Set up and show widgets.
    // ...

    return app.exec();
}
</db:programlisting>
<db:para>First, a <db:link xlink:href="qapplication.xml">QApplication</db:link> object is constructed, which can be configured with arguments passed in from the command line. After the widgets have been created and shown, <db:link xlink:href="qapplication.xml#exec">QApplication::exec</db:link>() is called to start Qt's event loop. Control passes to Qt until this function returns. Finally, main() returns the value returned by <db:link xlink:href="qapplication.xml#exec">QApplication::exec</db:link>().</db:para>
</db:section>
<db:section xml:id="simple-widget-examples">
<db:title>Simple Widget Examples</db:title>
<db:para>Each of these simple widget examples is written entirely within the main() function.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtwidgets-tutorials-widgets-toplevel-example.xml">Creating a window</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwidgets-tutorials-widgets-childwidget-example.xml">Creating child widgets</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwidgets-tutorials-widgets-windowlayout-example.xml">Using layouts</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwidgets-tutorials-widgets-nestedlayouts-example.xml">Nested layouts</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="real-world-widget-examples">
<db:title>Real World Widget Examples</db:title>
<db:para>In these <db:link xlink:href="examples-widgets.xml">more advanced examples</db:link>, the code that creates the widgets and layouts is stored in other files. For example, the GUI for a main window may be created in the constructor of a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> subclass.</db:para>
</db:section>
<db:section xml:id="building-the-examples">
<db:title>Building The Examples</db:title>
<db:para>If you installed a binary package to get Qt, or if you compiled Qt yourself, the examples described in this tutorial should already be built and ready to run. If you wish to modify and recompile them, follow these steps:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>From a command prompt, enter the directory containing the example you have modified.</db:para>
</db:listitem>
<db:listitem>
<db:para>Type qmake and press <db:guilabel>Return</db:guilabel>. If this doesn't work, make sure that the executable is on your path, or enter its full location.</db:para>
</db:listitem>
<db:listitem>
<db:para>On Linux/Unix and macOS, type make and press <db:guilabel>Return</db:guilabel>; on Windows with Visual Studio, type nmake and press <db:guilabel>Return</db:guilabel>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>An executable file is created in the current directory. On Windows, this file may be located in a debug or release subdirectory. You can run this executable to see the example code at work.</db:para>
</db:section>
</db:article>
