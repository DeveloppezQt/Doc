<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Widgets Simple Browser Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A simple browser based on Qt WebEngine Widgets.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;browserwindow.h&quot;
#include &quot;tabwidget.h&quot;
#include &quot;ui_certificateerrordialog.h&quot;
#include &quot;ui_passworddialog.h&quot;
#include &quot;webpage.h&quot;
#include &quot;webview.h&quot;
#include &amp;lt;QAuthenticator&amp;gt;
#include &amp;lt;QMessageBox&amp;gt;
#include &amp;lt;QStyle&amp;gt;
#include &amp;lt;QWebEngineCertificateError&amp;gt;

WebPage::WebPage(QWebEngineProfile *profile, QObject *parent)
    : QWebEnginePage(profile, parent)
{
    connect(this, &amp;amp;QWebEnginePage::authenticationRequired, this, &amp;amp;WebPage::handleAuthenticationRequired);
    connect(this, &amp;amp;QWebEnginePage::featurePermissionRequested, this, &amp;amp;WebPage::handleFeaturePermissionRequested);
    connect(this, &amp;amp;QWebEnginePage::proxyAuthenticationRequired, this, &amp;amp;WebPage::handleProxyAuthenticationRequired);
    connect(this, &amp;amp;QWebEnginePage::registerProtocolHandlerRequested, this, &amp;amp;WebPage::handleRegisterProtocolHandlerRequested);
#if !defined(QT_NO_SSL) || QT_VERSION &amp;gt;= QT_VERSION_CHECK(5, 12, 0)
    connect(this, &amp;amp;QWebEnginePage::selectClientCertificate, this, &amp;amp;WebPage::handleSelectClientCertificate);
#endif
}

bool WebPage::certificateError(const QWebEngineCertificateError &amp;amp;error)
{
    QWidget *mainWindow = view()-&amp;gt;window();
    if (error.isOverridable()) {
        QDialog dialog(mainWindow);
        dialog.setModal(true);
        dialog.setWindowFlags(dialog.windowFlags() &amp;amp; ~Qt::WindowContextHelpButtonHint);
        Ui::CertificateErrorDialog certificateDialog;
        certificateDialog.setupUi(&amp;amp;dialog);
        certificateDialog.m_iconLabel-&amp;gt;setText(QString());
        QIcon icon(mainWindow-&amp;gt;style()-&amp;gt;standardIcon(QStyle::SP_MessageBoxWarning, 0, mainWindow));
        certificateDialog.m_iconLabel-&amp;gt;setPixmap(icon.pixmap(32, 32));
        certificateDialog.m_errorLabel-&amp;gt;setText(error.errorDescription());
        dialog.setWindowTitle(tr(&quot;Certificate Error&quot;));
        return dialog.exec() == QDialog::Accepted;
    }

    QMessageBox::critical(mainWindow, tr(&quot;Certificate Error&quot;), error.errorDescription());
    return false;
}

void WebPage::handleAuthenticationRequired(const QUrl &amp;amp;requestUrl, QAuthenticator *auth)
{
    QWidget *mainWindow = view()-&amp;gt;window();
    QDialog dialog(mainWindow);
    dialog.setModal(true);
    dialog.setWindowFlags(dialog.windowFlags() &amp;amp; ~Qt::WindowContextHelpButtonHint);

    Ui::PasswordDialog passwordDialog;
    passwordDialog.setupUi(&amp;amp;dialog);

    passwordDialog.m_iconLabel-&amp;gt;setText(QString());
    QIcon icon(mainWindow-&amp;gt;style()-&amp;gt;standardIcon(QStyle::SP_MessageBoxQuestion, 0, mainWindow));
    passwordDialog.m_iconLabel-&amp;gt;setPixmap(icon.pixmap(32, 32));

    QString introMessage(tr(&quot;Enter username and password for \&quot;%1\&quot; at %2&quot;)
                         .arg(auth-&amp;gt;realm()).arg(requestUrl.toString().toHtmlEscaped()));
    passwordDialog.m_infoLabel-&amp;gt;setText(introMessage);
    passwordDialog.m_infoLabel-&amp;gt;setWordWrap(true);

    if (dialog.exec() == QDialog::Accepted) {
        auth-&amp;gt;setUser(passwordDialog.m_userNameLineEdit-&amp;gt;text());
        auth-&amp;gt;setPassword(passwordDialog.m_passwordLineEdit-&amp;gt;text());
    } else {
        // Set authenticator null if dialog is cancelled
        *auth = QAuthenticator();
    }
}

inline QString questionForFeature(QWebEnginePage::Feature feature)
{
    switch (feature) {
    case QWebEnginePage::Geolocation:
        return WebPage::tr(&quot;Allow %1 to access your location information?&quot;);
    case QWebEnginePage::MediaAudioCapture:
        return WebPage::tr(&quot;Allow %1 to access your microphone?&quot;);
    case QWebEnginePage::MediaVideoCapture:
        return WebPage::tr(&quot;Allow %1 to access your webcam?&quot;);
    case QWebEnginePage::MediaAudioVideoCapture:
        return WebPage::tr(&quot;Allow %1 to access your microphone and webcam?&quot;);
    case QWebEnginePage::MouseLock:
        return WebPage::tr(&quot;Allow %1 to lock your mouse cursor?&quot;);
    case QWebEnginePage::DesktopVideoCapture:
        return WebPage::tr(&quot;Allow %1 to capture video of your desktop?&quot;);
    case QWebEnginePage::DesktopAudioVideoCapture:
        return WebPage::tr(&quot;Allow %1 to capture audio and video of your desktop?&quot;);
    case QWebEnginePage::Notifications:
        return QString();
    }
    return QString();
}

void WebPage::handleFeaturePermissionRequested(const QUrl &amp;amp;securityOrigin, Feature feature)
{
    QString title = tr(&quot;Permission Request&quot;);
    QString question = questionForFeature(feature).arg(securityOrigin.host());
    if (!question.isEmpty() &amp;amp;&amp;amp; QMessageBox::question(view()-&amp;gt;window(), title, question) == QMessageBox::Yes)
        setFeaturePermission(securityOrigin, feature, PermissionGrantedByUser);
    else
        setFeaturePermission(securityOrigin, feature, PermissionDeniedByUser);
}

void WebPage::handleProxyAuthenticationRequired(const QUrl &amp;amp;, QAuthenticator *auth, const QString &amp;amp;proxyHost)
{
    QWidget *mainWindow = view()-&amp;gt;window();
    QDialog dialog(mainWindow);
    dialog.setModal(true);
    dialog.setWindowFlags(dialog.windowFlags() &amp;amp; ~Qt::WindowContextHelpButtonHint);

    Ui::PasswordDialog passwordDialog;
    passwordDialog.setupUi(&amp;amp;dialog);

    passwordDialog.m_iconLabel-&amp;gt;setText(QString());
    QIcon icon(mainWindow-&amp;gt;style()-&amp;gt;standardIcon(QStyle::SP_MessageBoxQuestion, 0, mainWindow));
    passwordDialog.m_iconLabel-&amp;gt;setPixmap(icon.pixmap(32, 32));

    QString introMessage = tr(&quot;Connect to proxy \&quot;%1\&quot; using:&quot;);
    introMessage = introMessage.arg(proxyHost.toHtmlEscaped());
    passwordDialog.m_infoLabel-&amp;gt;setText(introMessage);
    passwordDialog.m_infoLabel-&amp;gt;setWordWrap(true);

    if (dialog.exec() == QDialog::Accepted) {
        auth-&amp;gt;setUser(passwordDialog.m_userNameLineEdit-&amp;gt;text());
        auth-&amp;gt;setPassword(passwordDialog.m_passwordLineEdit-&amp;gt;text());
    } else {
        // Set authenticator null if dialog is cancelled
        *auth = QAuthenticator();
    }
}

void WebPage::handleRegisterProtocolHandlerRequested(QWebEngineRegisterProtocolHandlerRequest request)
{
    auto answer = QMessageBox::question(
        view()-&amp;gt;window(),
        tr(&quot;Permission Request&quot;),
        tr(&quot;Allow %1 to open all %2 links?&quot;)
        .arg(request.origin().host())
        .arg(request.scheme()));
    if (answer == QMessageBox::Yes)
        request.accept();
    else
        request.reject();
}

#if !defined(QT_NO_SSL) || QT_VERSION &amp;gt;= QT_VERSION_CHECK(5, 12, 0)
void WebPage::handleSelectClientCertificate(QWebEngineClientCertificateSelection selection)
{
    // Just select one.
    selection.select(selection.certificates().at(0));
}
#endif

</db:programlisting>
</db:article>
