<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Connecting to Databases</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="sql-programming.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="SQL Programming"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="sql-sqlstatements.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Executing SQL Statements"/></db:extendedlink>
<db:abstract>
<db:para>Qt SQL Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>To access a database with <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> or <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link>, create and open one or more database connections. Database connections are normally identified by connection name, <db:emphasis>not</db:emphasis> by database name. You can have multiple connections to the same database. <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> also supports the concept of a <db:emphasis>default</db:emphasis> connection, which is an unnamed connection. When calling <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> or <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> member functions that take a connection name argument, if you don't pass a connection name, the default connection will be used. Creating a default connection is convenient when your application only requires one database connection.</db:para>
<db:para>Note the difference between creating a connection and opening it. Creating a connection involves creating an instance of class <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link>. The connection is not usable until it is opened. The following snippet shows how to create a <db:emphasis>default</db:emphasis> connection and then open it:</db:para>
<db:programlisting language="cpp">    QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QMYSQL&quot;);
    db.setHostName(&quot;bigblue&quot;);
    db.setDatabaseName(&quot;flightdb&quot;);
    db.setUserName(&quot;acarlson&quot;);
    db.setPassword(&quot;1uTbSbAs&quot;);
    bool ok = db.open();
</db:programlisting>
<db:para>The first line creates the connection object, and the last line opens it for use. In between, we initialize some connection information, including the <db:link xlink:href="qsqldatabase.xml#setDatabaseName">database name</db:link>, the <db:link xlink:href="qsqldatabase.xml#setHostName">host name</db:link>, the <db:link xlink:href="qsqldatabase.xml#setUserName">user name</db:link>, and the <db:link xlink:href="qsqldatabase.xml#setPassword">password</db:link>. In this case, we are connecting to the MySQL database <db:code>flightdb</db:code> on the host <db:code>bigblue</db:code>. The <db:code>&quot;QMYSQL&quot;</db:code> argument to <db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>() specifies the type of database driver to use for the connection. The set of database drivers included with Qt are shown in the table of <db:link xlink:href="sql-driver.xml#supported-databases">supported database drivers</db:link>.</db:para>
<db:para>The connection in the snippet will be the <db:emphasis>default</db:emphasis> connection, because we don't pass the second argument to <db:link xlink:href="qsqldatabase.xml#addDatabase">addDatabase</db:link>(), which is the connection name. For example, here we establish two MySQL database connections named <db:code>&quot;first&quot;</db:code> and <db:code>&quot;second&quot;</db:code>:</db:para>
<db:programlisting language="cpp">    QSqlDatabase firstDB = QSqlDatabase::addDatabase(&quot;QMYSQL&quot;, &quot;first&quot;);
    QSqlDatabase secondDB = QSqlDatabase::addDatabase(&quot;QMYSQL&quot;, &quot;second&quot;);
</db:programlisting>
<db:para>After these connections have been initialized, <db:link xlink:href="qsqldatabase.xml#open">open</db:link>() for each one to establish the live connections. If the <db:link xlink:href="qsqldatabase.xml#open">open</db:link>() fails, it returns <db:code>false</db:code>. In that case, call <db:link xlink:href="qsqldatabase.xml#lastError">QSqlDatabase::lastError</db:link>() to get error information.</db:para>
<db:para>Once a connection is established, we can call the static function <db:link xlink:href="qsqldatabase.xml#database">QSqlDatabase::database</db:link>() from anywhere with a connection name to get a pointer to that database connection. If we don't pass a connection name, it will return the default connection. For example:</db:para>
<db:programlisting language="cpp">    QSqlDatabase defaultDB = QSqlDatabase::database();
    QSqlDatabase firstDB = QSqlDatabase::database(&quot;first&quot;);
    QSqlDatabase secondDB = QSqlDatabase::database(&quot;second&quot;);
</db:programlisting>
<db:para>To remove a database connection, first close the database using <db:link xlink:href="qsqldatabase.xml#close">QSqlDatabase::close</db:link>(), then remove it using the static method <db:link xlink:href="qsqldatabase.xml#removeDatabase">QSqlDatabase::removeDatabase</db:link>().</db:para>
</db:article>
