<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QItemSelection Class</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qitemselection.xml">QItemSelection</db:link> class manages information about selected items in a model.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QItemSelection</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QItemSelection is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qitemselection.xml">QItemSelection</db:link> describes the items in a model that have been selected by the user. A <db:link xlink:href="qitemselection.xml">QItemSelection</db:link> is basically a list of selection ranges, see <db:link xlink:href="qitemselectionrange.xml">QItemSelectionRange</db:link>. It provides functions for creating and manipulating selections, and selecting a range of items from a model.</db:para>
<db:para>The <db:link xlink:href="qitemselection.xml">QItemSelection</db:link> class is one of the <db:link xlink:href="">Model/View Classes</db:link> and is part of Qt's <db:link xlink:href="">model/view framework</db:link>.</db:para>
<db:para>An item selection can be constructed and initialized to contain a range of items from an existing model. The following example constructs a selection that contains a range of items from the given model, beginning at the topLeft, and ending at the bottomRight.</db:para>
<db:programlisting language="cpp">QItemSelection *selection = new QItemSelection(topLeft, bottomRight);
</db:programlisting>
<db:para>An empty item selection can be constructed, and later populated as required. So, if the model is going to be unavailable when we construct the item selection, we can rewrite the above code in the following way:</db:para>
<db:programlisting language="cpp">QItemSelection *selection = new QItemSelection();
...
selection-&gt;select(topLeft, bottomRight);
</db:programlisting>
<db:para><db:link xlink:href="qitemselection.xml">QItemSelection</db:link> saves memory, and avoids unnecessary work, by working with selection ranges rather than recording the model item index for each item in the selection. Generally, an instance of this class will contain a list of non-overlapping selection ranges.</db:para>
<db:para>Use <db:link xlink:href="qitemselection.xml#merge">merge</db:link>() to merge one item selection into another without making overlapping ranges. Use <db:link xlink:href="qitemselection.xml#split">split</db:link>() to split one selection range into smaller ranges based on a another selection range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QItemSelection">
<db:title>QItemSelection::QItemSelection()</db:title>
<db:para>Constructs an empty selection.</db:para>
</db:section>
<db:section xml:id="QItemSelection-1">
<db:title>QItemSelection::QItemSelection(const QModelIndex &amp;<db:emphasis>topLeft</db:emphasis>, const QModelIndex &amp;<db:emphasis>bottomRight</db:emphasis>)</db:title>
<db:para>Constructs an item selection that extends from the top-left model item, specified by the <db:code role="parameter">topLeft</db:code> index, to the bottom-right item, specified by <db:code role="parameter">bottomRight</db:code>.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>bool QItemSelection::contains(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns true if the selection contains the given <db:code role="parameter">index</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="indexes">
<db:title>QModelIndexList QItemSelection::indexes() const</db:title>
<db:para>Returns a list of model indexes that correspond to the selected items.</db:para>
</db:section>
<db:section xml:id="merge">
<db:title>void QItemSelection::merge(const QItemSelection &amp;<db:emphasis>other</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>command</db:emphasis>)</db:title>
<db:para>Merges the <db:code role="parameter">other</db:code> selection with this <db:link xlink:href="qitemselection.xml">QItemSelection</db:link> using the <db:code role="parameter">command</db:code> given. This method guarantees that no ranges are overlapping.</db:para>
<db:para>Note that only <db:link xlink:href="qitemselectionmodel.xml#SelectionFlag-enum">QItemSelectionModel::Select</db:link>, <db:link xlink:href="qitemselectionmodel.xml#SelectionFlag-enum">QItemSelectionModel::Deselect</db:link>, and <db:link xlink:href="qitemselectionmodel.xml#SelectionFlag-enum">QItemSelectionModel::Toggle</db:link> are supported.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselection.xml#split">split</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="select">
<db:title>void QItemSelection::select(const QModelIndex &amp;<db:emphasis>topLeft</db:emphasis>, const QModelIndex &amp;<db:emphasis>bottomRight</db:emphasis>)</db:title>
<db:para>Adds the items in the range that extends from the top-left model item, specified by the <db:code role="parameter">topLeft</db:code> index, to the bottom-right item, specified by <db:code role="parameter">bottomRight</db:code> to the list.</db:para>
<db:note>
<db:para><db:code role="parameter">topLeft</db:code> and <db:code role="parameter">bottomRight</db:code> must have the same parent.</db:para>
</db:note>
</db:section>
<db:section xml:id="split">
<db:title>[static] void QItemSelection::split(const QItemSelectionRange &amp;<db:emphasis>range</db:emphasis>, const QItemSelectionRange &amp;<db:emphasis>other</db:emphasis>, QItemSelection *<db:emphasis>result</db:emphasis>)</db:title>
<db:para>Splits the selection <db:code role="parameter">range</db:code> using the selection <db:code role="parameter">other</db:code> range. Removes all items in <db:code role="parameter">other</db:code> from <db:code role="parameter">range</db:code> and puts the result in <db:code role="parameter">result</db:code>. This can be compared with the semantics of the <db:emphasis>subtract</db:emphasis> operation of a set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselection.xml#merge">merge</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
