<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStringDecoder Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link> class provides a state-based decoder for text.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStringDecoder</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qstringconverter.xml" xlink:role="class">QStringConverter</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStringDecoder is part of <db:simplelist><db:member>i18n</db:member><db:member><db:link xlink:href="string-processing.xml">Classes for string data</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A text decoder converts text an encoded text format that uses a specific encoding into Qt's internal representation.</db:para>
<db:para>Converting encoded data into a <db:link xlink:href="qstring.xml">QString</db:link> can be achieved using the following code:</db:para>
<db:programlisting language="cpp">QByteArray encodedString = &quot;...&quot;;
auto toUtf16 = QStringDecoder(QStringDecoder::Utf8);
QString string = toUtf16(encodedString);
</db:programlisting>
<db:para>The decoder remembers any state that is required between calls, so converting data received in chunks, for example, when receiving it over a network, is just as easy, by calling the decoder whenever new data is available:</db:para>
<db:programlisting language="cpp">auto toUtf16 = QStringDecoder(QStringDecoder::Utf8);

QString string;
while (new_data_available()) {
    QByteArray chunk = get_new_data();
    string += toUtf16(chunk);
}
</db:programlisting>
<db:para>The <db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link> object maintains state between chunks and therefore works correctly even if chunks are split in the middle of a multi-byte character sequence.</db:para>
<db:para><db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link> objects can't be copied because of their internal state, but can be moved.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringconverter.xml">QStringConverter</db:link></db:member>
<db:member><db:link xlink:href="qstringencoder.xml">QStringEncoder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="decode">
<db:title>QStringDecoder::EncodedData&lt;QByteArrayView&gt; QStringDecoder::decode(QByteArrayView <db:emphasis>ba</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-28-29">QStringDecoder::EncodedData&lt;QByteArrayView&gt; QStringDecoder::operator()(QByteArrayView <db:emphasis>ba</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="decode-1">QStringDecoder::EncodedData&lt;const QByteArray &amp;&gt; QStringDecoder::decode(const QByteArray &amp;<db:emphasis>ba</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-28-29-1">QStringDecoder::EncodedData&lt;const QByteArray &amp;&gt; QStringDecoder::operator()(const QByteArray &amp;<db:emphasis>ba</db:emphasis>)</db:bridgehead>
<db:para>Converts <db:code role="parameter">ba</db:code> and returns a struct that is implicitly convertible to <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:programlisting language="cpp">QByteArray encodedString = &quot;...&quot;;
auto toUtf16 = QStringDecoder(QStringDecoder::Utf8);
auto data = toUtf16(encodedString); // data's type is QStringDecoder::EncodedData&lt;const QByteArray &amp;&gt;
QString string = toUtf16(encodedString); // Implicit conversion to QString

// Here you have to cast &quot;data&quot; to QString
auto func = [&amp;]() { return !toUtf16.hasError() ? QString(data) : u&quot;foo&quot;_s; }
</db:programlisting>
</db:section>
<db:section xml:id="QStringDecoder">
<db:title>[constexpr noexcept] QStringDecoder::QStringDecoder()</db:title>
<db:para>Default constructs an decoder. The default decoder is not valid, and can't be used for converting text.</db:para>
</db:section>
<db:section xml:id="QStringDecoder-1">
<db:title>[explicit] QStringDecoder::QStringDecoder(QAnyStringView <db:emphasis>name</db:emphasis>, QStringConverter::Flags <db:emphasis>flags</db:emphasis> = Flag::Default)</db:title>
<db:para>Creates an decoder object using <db:code role="parameter">name</db:code> and <db:code role="parameter">flags</db:code>. If <db:code role="parameter">name</db:code> is not the name of a known encoding an invalid converter will get created.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.8, this function took only a <db:code>const char *</db:code>, which was expected to be UTF-8-encoded.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringconverter.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringDecoder-2">
<db:title>[explicit constexpr] QStringDecoder::QStringDecoder(QStringConverter::Encoding <db:emphasis>encoding</db:emphasis>, QStringConverter::Flags <db:emphasis>flags</db:emphasis> = Flag::Default)</db:title>
<db:para>Creates an decoder object using <db:code role="parameter">encoding</db:code> and <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="appendToBuffer">
<db:title>QChar *QStringDecoder::appendToBuffer(QChar *<db:emphasis>out</db:emphasis>, QByteArrayView <db:emphasis>in</db:emphasis>)</db:title>
<db:para>Decodes the sequence of bytes viewed by <db:code role="parameter">in</db:code> and writes the decoded result into the buffer starting at <db:code role="parameter">out</db:code>. Returns a pointer to the end of data written.</db:para>
<db:para><db:code role="parameter">out</db:code> needs to be large enough to be able to hold all the decoded data. Use <db:link xlink:href="qstringdecoder.xml#requiredSpace">requiredSpace</db:link> to determine the maximum size requirements to decode an encoded data buffer of <db:code>in.size()</db:code> bytes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringdecoder.xml#requiredSpace">requiredSpace</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="appendToBuffer-1">
<db:title>[since 6.6] char16_t *QStringDecoder::appendToBuffer(char16_t *<db:emphasis>out</db:emphasis>, QByteArrayView <db:emphasis>in</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="decoderForHtml">
<db:title>[static] QStringDecoder QStringDecoder::decoderForHtml(QByteArrayView <db:emphasis>data</db:emphasis>)</db:title>
<db:para>Tries to determine the encoding of the HTML in <db:code role="parameter">data</db:code> by looking at leading byte order marks or a charset specifier in the HTML meta tag and returns a <db:link xlink:href="qstringdecoder.xml">QStringDecoder</db:link> matching the encoding. If the returned decoder is not valid, the encoding specified is not supported by <db:link xlink:href="qstringconverter.xml">QStringConverter</db:link>. If no encoding is detected, the method returns a decoder for Utf8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringconverter.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requiredSpace">
<db:title>qsizetype QStringDecoder::requiredSpace(qsizetype <db:emphasis>inputLength</db:emphasis>) const</db:title>
<db:para>Returns the maximum amount of UTF-16 code units required to be able to process <db:code role="parameter">inputLength</db:code> encoded data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringdecoder.xml#appendToBuffer">appendToBuffer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
