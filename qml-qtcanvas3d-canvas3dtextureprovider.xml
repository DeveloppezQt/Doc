<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Canvas3DTextureProvider QML Type</db:title>
<db:productname>QtCanvas3D</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Canvas 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides means to get <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> as <db:link xlink:href="qml-qtcanvas3d-canvas3dtexture.xml">Canvas3DTexture</db:link>.</db:para>
<db:para><db:emphasis role="bold">This type is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:para>This type was introduced in QtCanvas3D 1.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtCanvas3D 1.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtCanvas3D 1.1</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:emphasis role="bold">Deprecated in Qt 5.12.</db:emphasis> An uncreatable QML type that provides an extension API that can be used to get <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> as <db:link xlink:href="qml-qtcanvas3d-canvas3dtexture.xml">Canvas3DTexture</db:link>. Only QQuickItems that implement <db:link xlink:href="qquickitem.xml#textureProvider">QQuickItem::textureProvider</db:link>() method can be used as a texture source, which in most cases means the <db:code>layer.enabled</db:code> property of the item must be set to <db:code>true</db:code>.</db:para>
<db:para>Typical usage would be something like this:</db:para>
<db:programlisting language="cpp">// In QML code, declare a layered item you wish to show as texture
Rectangle {
    id: textureSource
    layer.enabled: true
    // ...
}
.
.
// In JavaScript code, declare the variables for the extension and the texture
var textureProvider;
var myTexture;
.
.
// Get the extension after the context has been created in onInitializeGL().
textureProvider = gl.getExtension(&quot;QTCANVAS3D_texture_provider&quot;);
.
.
// Get the Canvas3DTexture object representing our source item
if (textureProvider)
    myTexture = textureProvider.createTextureFromSource(textureSource);
.
.
// If you just need to access the texture in onPaingGL(), the above is usually enough.
// However, in cases where you utilize synchronous OpenGL commands or dynamically enable
// the source item layer after canvas initialization, it is not guaranteed that the texture
// is valid immediately after calling createTextureFromSource().
// To ensure you don't use the texture before it is ready, connect the textureReady() signal
// to a handler function that will use the texture.
textureProvider.textureReady.connect(function(sourceItem) {
    if (sourceItem === textureSource) {
        gl.bindTexture(gl.TEXTURE_2D, myTexture);
        // ...
    }
});
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcanvas3d-context3d.xml">Context3D</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="textureReady-signal">
<db:title>void textureReady(Item *<db:emphasis>source</db:emphasis>)</db:title>
<db:para>Indicates that the texture created with <db:link xlink:href="qml-qtcanvas3d-canvas3dtextureprovider.xml#createTextureFromSource-method">createTextureFromSource</db:link>() method for the <db:code role="parameter">source</db:code> item is ready to be used.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onTextureReady</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="createTextureFromSource-method">
<db:title>QJSValue createTextureFromSource(Item *<db:emphasis>source</db:emphasis>)</db:title>
<db:para><db:emphasis role="bold">Deprecated in Qt 5.12.</db:emphasis> Creates and returns a Canvas3DTexture object for the supplied <db:code role="parameter">source</db:code> item.</db:para>
<db:para>The <db:code role="parameter">source</db:code> item must be of a type that implements a texture provider, which in most cases means the <db:code>layer.enabled</db:code> property of the item must be set to <db:code>true</db:code>. <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> items can also be used as texture sources. The texture provider of the <db:code role="parameter">source</db:code> item owns the OpenGL texture. If the <db:code role="parameter">source</db:code> item is deleted or the <db:code>layer.enabled</db:code> property is set to <db:code>false</db:code> while the texture is still in use in Canvas3D, the rendered texture contents become undefined.</db:para>
<db:para>Trying to bind the returned Canvas3DTexture object is not guaranteed to work until a <db:link xlink:href="qml-qtcanvas3d-canvas3dtextureprovider.xml#textureReady-signal">textureReady</db:link>() signal corresponding to the <db:code role="parameter">source</db:code> item has been emitted. However, if you don't have any synchronous OpenGL calls between the first use of the texture and the end of your paingGL() handler, and if you can guarantee that the source item has been fully rendered at least once after its layer was enabled, you can immediately use the returned texture without waiting for the <db:link xlink:href="qml-qtcanvas3d-canvas3dtextureprovider.xml#textureReady-signal">textureReady</db:link>() signal.</db:para>
<db:para>Disabling the <db:code role="parameter">source</db:code> item's layer will destroy the underlying texture provider, so it is necessary to call this method again for the <db:code role="parameter">source</db:code> item if you re-enable its layer.</db:para>
<db:para>If this function is called twice for same <db:code role="parameter">source</db:code>, it doesn't create a new Canvas3DTexture instance, but instead returns a reference to a previously created one, as long as the previous instance is still alive.</db:para>
<db:para>The generated texture is owned and managed by Qt Quick's scene graph, so attempting to modify its parameters is not guaranteed to work.</db:para>
<db:note>
<db:para>Qt Quick uses texture coordinates where the origin is at top left corner, which is different from OpenGL default coordinate system, where the origin is at bottom left corner. You need to account for this when specifying the UV mapping for the texture. Alternatively, you can specify a suitable <db:link xlink:href="qml-qtquick-shadereffectsource.xml#textureMirroring-prop">textureMirroring</db:link> value for your layer or <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> item.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
