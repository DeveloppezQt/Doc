<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractOAuth Class</db:title>
<db:productname>QtNetworkAuth</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Authorization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link> class is the base of all implementations of OAuth authentication methods.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractOAuth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += networkauth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractoauth2.xml" xlink:role="class">QAbstractOAuth2</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractOAuth is part of <db:simplelist><db:member>oauth</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class defines the basic interface of the OAuth authentication classes. By inheriting this class, you can create custom authentication methods for different web services.</db:para>
<db:para>It also contains some functions to ease the process of implementing different authentication flows.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QAbstractOAuth::Error</db:title>
<db:para>Indicates the latest received error.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has ocurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::NetworkError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Failed to connect to the server.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::ServerError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The server answered the request with an error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::OAuthTokenNotFoundError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The server's response to a token request provided no token identifier.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::OAuthTokenSecretNotFoundError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The server's response to a token request provided no token secret.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::OAuthCallbackNotVerified</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The authorization server has not verified the supplied callback URI in the request. This usually happens when the provided callback does not match with the callback supplied during client registration.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Stage-enum">
<db:title>enum QAbstractOAuth::Stage</db:title>
<db:para>Identifies an authentication stage. It's passed to a ModifyParametersFunction so that it can make different changes to parameters at each call to it during the process of authentication.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Stage</db:emphasis>::RequestingTemporaryCredentials</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Preparing the temporary credentials request.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Stage</db:emphasis>::RequestingAuthorization</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Preparing the authorization grant URL.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Stage</db:emphasis>::RequestingAccessToken</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Preparing the token request.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QAbstractOAuth::Status</db:title>
<db:para>Indicates the current authentication status.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Status</db:emphasis>::NotAuthenticated</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No token has been retrieved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Status</db:emphasis>::TemporaryCredentialsReceived</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Temporary credentials have been received, this status is used in some OAuth authetication methods.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Status</db:emphasis>::Granted</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Token credentials have been received and authenticated calls are allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Status</db:emphasis>::RefreshingToken</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>New token credentials have been requested.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="authorizationUrl-prop">
<db:title>authorizationUrl : QUrl</db:title>
<db:para>This property holds the URL used to request the Resource Owner Authorization as described in: <db:link xlink:href="https://tools.ietf.org/html/rfc5849#section-2.2">The OAuth 1.0 Protocol: Resource Owner Authorization</db:link></db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml#authorizationUrl">authorizationUrl</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml#setAuthorizationUrl">setAuthorizationUrl</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">authorizationUrlChanged</db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="extraTokens-prop">
<db:title>[read-only] extraTokens : const QVariantMap</db:title>
<db:para>This property holds the extra tokens received from the server.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml#extraTokens">extraTokens</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">extraTokensChanged</db:emphasis>(const <db:type><db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link></db:type> &amp;<db:emphasis>tokens</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : const Status</db:title>
<db:para>This property holds the current authentication status.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractoauth.xml#Status-enum">QAbstractOAuth::Status</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml#status">status</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">statusChanged</db:emphasis>(<db:type><db:link xlink:href="qabstractoauth.xml#Status-enum">QAbstractOAuth::Status</db:link></db:type> <db:emphasis>status</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QAbstractOAuth">
<db:title>[virtual noexcept] QAbstractOAuth::~QAbstractOAuth()</db:title>
<db:para>Destroys the abstract OAuth.</db:para>
</db:section>
<db:section xml:id="authorizationUrl">
<db:title>QUrl QAbstractOAuth::authorizationUrl() const</db:title>
<db:para>Returns the authorization request URL.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstractoauth.xml#authorizationUrl-prop">authorizationUrl</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#setAuthorizationUrl">setAuthorizationUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="callback">
<db:title>[protected] QString QAbstractOAuth::callback() const</db:title>
<db:para>Returns the current callback string corresponding to the current reply handler. The returned string is the string sent to the server to specify the callback URI, or the word identifying the alternative method in headless devices.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#replyHandler">replyHandler</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractoauth.xml#setReplyHandler">setReplyHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extraTokens">
<db:title>QVariantMap QAbstractOAuth::extraTokens() const</db:title>
<db:para>Returns the extra tokens received from the server during authentication.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstractoauth.xml#extraTokens-prop">extraTokens</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#extraTokens-prop">extraTokensChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="generateRandomString">
<db:title>[static protected] QByteArray QAbstractOAuth::generateRandomString(quint8 <db:emphasis>length</db:emphasis>)</db:title>
<db:para>Generates a random string which could be used as state or nonce. The parameter <db:code role="parameter">length</db:code> determines the size of the generated string.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc5849#section-3.3">The OAuth 1.0 Protocol: Nonce and Timestamp</db:link>.</db:para>
</db:section>
<db:section xml:id="modifyParametersFunction">
<db:title>QAbstractOAuth::ModifyParametersFunction QAbstractOAuth::modifyParametersFunction() const</db:title>
<db:para>Returns the current parameter-modification function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>ModifyParametersFunction</db:member>
<db:member><db:link xlink:href="qabstractoauth.xml#setModifyParametersFunction">setModifyParametersFunction</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractoauth.xml#Stage-enum">Stage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="networkAccessManager">
<db:title>QNetworkAccessManager *QAbstractOAuth::networkAccessManager() const</db:title>
<db:para>Returns the current network access manager used to send the requests to the server during authentication flows or to make authentication calls.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#setNetworkAccessManager">setNetworkAccessManager</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replyHandler">
<db:title>QAbstractOAuthReplyHandler *QAbstractOAuth::replyHandler() const</db:title>
<db:para>Returns the reply handler currently in use.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#setReplyHandler">setReplyHandler</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractoauthreplyhandler.xml">QAbstractOAuthReplyHandler</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resourceOwnerAuthorization">
<db:title>[virtual protected] void QAbstractOAuth::resourceOwnerAuthorization(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis>)</db:title>
<db:para>Builds the resource owner authorization URL to be used in the web browser: <db:code role="parameter">url</db:code> is used as the base URL and the query is created using <db:code role="parameter">parameters</db:code>. When the URL is ready, the authorizeWithBrowser() signal will be emitted with the generated URL.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">authorizeWithBrowser()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAuthorizationUrl">
<db:title>void QAbstractOAuth::setAuthorizationUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:para>Sets the authorization request URL to <db:code role="parameter">url</db:code>. This address will be used to allow the user to grant the application the ability to make authenticated calls on behalf of the user.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qabstractoauth.xml#authorizationUrl-prop">authorizationUrl</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#authorizationUrl">authorizationUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setModifyParametersFunction">
<db:title>void QAbstractOAuth::setModifyParametersFunction(const QAbstractOAuth::ModifyParametersFunction &amp;<db:emphasis>modifyParametersFunction</db:emphasis>)</db:title>
<db:para>Sets the parameter-modification function. This function is used to customize the parameters sent to the server during a specified authorization stage. The number of calls to this function depends on the flow used during the authentication.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#modifyParametersFunction">modifyParametersFunction</db:link>()</db:member>
<db:member>ModifyParametersFunction</db:member>
<db:member><db:link xlink:href="qabstractoauth.xml#Stage-enum">Stage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNetworkAccessManager">
<db:title>void QAbstractOAuth::setNetworkAccessManager(QNetworkAccessManager *<db:emphasis>networkAccessManager</db:emphasis>)</db:title>
<db:para>Sets the network manager to <db:code role="parameter">networkAccessManager</db:code>. <db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link> does not take ownership of <db:code role="parameter">networkAccessManager</db:code>. If no custom network access manager is set, an internal network access manager is used. This network access manager will be used to make the request to the authentication server and the authenticated request to the web service.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#networkAccessManager">networkAccessManager</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setReplyHandler">
<db:title>void QAbstractOAuth::setReplyHandler(QAbstractOAuthReplyHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Sets the current reply handler to <db:code role="parameter">handler</db:code>.</db:para>
<db:note>
<db:para>Does not take ownership of <db:code role="parameter">handler</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#replyHandler">replyHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStatus">
<db:title>[protected] void QAbstractOAuth::setStatus(QAbstractOAuth::Status <db:emphasis>status</db:emphasis>)</db:title>
<db:para>Sets the current status to <db:code role="parameter">status</db:code>. This method is for use by classes based on <db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#status">status</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status">
<db:title>QAbstractOAuth::Status QAbstractOAuth::status() const</db:title>
<db:para>Returns the current authentication status.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstractoauth.xml#status-prop">status</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#setStatus">setStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractoauth.xml#Status-enum">Status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
