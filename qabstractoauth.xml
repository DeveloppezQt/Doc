<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractOAuth Class</db:title>
<db:productname>QtNetworkAuth</db:productname>
<db:edition>Qt Network Authorization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Network Authorization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link> class is the base of all implementations of OAuth authentication methods.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractOAuth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += networkauth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractoauth2.xml" xlink:role="class">QAbstractOAuth2</db:link> and <db:link xlink:href="qoauth1.xml" xlink:role="class">QOAuth1</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractOAuth is part of <db:simplelist><db:member>oauth</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class defines the basic interface of the OAuth authentication classes. By inheriting this class, you can create custom authentication methods for different web services.</db:para>
<db:para>It also contains some functions to ease the process of implementing different authentication flows.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ContentType-enum">
<db:title>enum QAbstractOAuth::ContentType</db:title>
<db:enumsynopsis>
<db:enumname>ContentType</db:enumname>
<db:enumitem>
<db:enumidentifier>WwwFormUrlEncoded</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Json</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Indicates the MIME Content-Type of the POST methods in authenticated calls.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">ContentType</db:emphasis>::WwwFormUrlEncoded</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Uses application/x-www-form-urlencoded format.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">ContentType</db:emphasis>::Json</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Uses application/json format.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Error-enum">
<db:title>enum QAbstractOAuth::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NetworkError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ServerError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OAuthTokenNotFoundError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OAuthTokenSecretNotFoundError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OAuthCallbackNotVerified</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Indicates the latest received error.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has ocurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::NetworkError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Failed to connect to the server.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::ServerError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The server answered the request with an error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::OAuthTokenNotFoundError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The server's response to a token request provided no token identifier.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::OAuthTokenSecretNotFoundError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The server's response to a token request provided no token secret.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::OAuthCallbackNotVerified</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The authorization server has not verified the supplied callback URI in the request. This usually happens when the provided callback does not match with the callback supplied during client registration.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Stage-enum">
<db:title>enum QAbstractOAuth::Stage</db:title>
<db:enumsynopsis>
<db:enumname>Stage</db:enumname>
<db:enumitem>
<db:enumidentifier>RequestingTemporaryCredentials</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RequestingAuthorization</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RequestingAccessToken</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RefreshingAccessToken</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Identifies an authentication stage. It's passed to a ModifyParametersFunction so that it can make different changes to parameters at each call to it during the process of authentication.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Stage</db:emphasis>::RequestingTemporaryCredentials</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Preparing the temporary credentials request.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Stage</db:emphasis>::RequestingAuthorization</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Preparing the authorization grant URL.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Stage</db:emphasis>::RequestingAccessToken</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Preparing the token request.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Stage</db:emphasis>::RefreshingAccessToken</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Preparing the access token refresh.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QAbstractOAuth::Status</db:title>
<db:enumsynopsis>
<db:enumname>Status</db:enumname>
<db:enumitem>
<db:enumidentifier>NotAuthenticated</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TemporaryCredentialsReceived</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Granted</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RefreshingToken</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Indicates the current authentication status.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Status</db:emphasis>::NotAuthenticated</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No token has been retrieved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Status</db:emphasis>::TemporaryCredentialsReceived</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Temporary credentials have been received, this status is used in some OAuth authetication methods.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Status</db:emphasis>::Granted</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Token credentials have been received and authenticated calls are allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link></db:emphasis>::<db:emphasis role="bold">Status</db:emphasis>::RefreshingToken</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>New token credentials have been requested.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="authorizationUrl-prop">
<db:title>authorizationUrl : QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>authorizationUrl</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">authorizationUrl</db:synopsisinfo>
<db:synopsisinfo role="setter">setAuthorizationUrl</db:synopsisinfo>
<db:synopsisinfo role="notifier">authorizationUrlChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URL used to request the Resource Owner Authorization as described in: <db:link xlink:href="https://tools.ietf.org/html/rfc5849#section-2.2">The OAuth 1.0 Protocol: Resource Owner Authorization</db:link></db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml#authorizationUrl">authorizationUrl</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml#setAuthorizationUrl">setAuthorizationUrl</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">authorizationUrlChanged</db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="contentType-prop">
<db:title>contentType : QAbstractOAuth::ContentType</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAbstractOAuth::ContentType</db:type>
<db:varname>contentType</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">contentType</db:synopsisinfo>
<db:synopsisinfo role="setter">setContentType</db:synopsisinfo>
<db:synopsisinfo role="notifier">contentTypeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the Content-Type to use when sending authorization parameters.</db:para>
<db:para>This property controls how parameters are formatted when sent with a POST request. A suitable header is also added.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractoauth.xml#ContentType-enum">QAbstractOAuth::ContentType</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml#contentType">contentType</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml#setContentType">setContentType</db:link></db:emphasis>(<db:type><db:link xlink:href="qabstractoauth.xml#ContentType-enum">QAbstractOAuth::ContentType</db:link></db:type> <db:emphasis>contentType</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">contentTypeChanged</db:emphasis>(<db:type><db:link xlink:href="qabstractoauth.xml#ContentType-enum">QAbstractOAuth::ContentType</db:link></db:type> <db:emphasis>contentType</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="extraTokens-prop">
<db:title>[read-only] extraTokens : const QVariantMap</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVariantMap</db:type>
<db:varname>extraTokens</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">extraTokens</db:synopsisinfo>
<db:synopsisinfo role="notifier">extraTokensChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the extra tokens received from the server.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml#extraTokens">extraTokens</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">extraTokensChanged</db:emphasis>(const <db:type><db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link></db:type> &amp;<db:emphasis>tokens</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : const Status</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Status</db:type>
<db:varname>status</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">status</db:synopsisinfo>
<db:synopsisinfo role="notifier">statusChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current authentication status.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractoauth.xml#Status-enum">QAbstractOAuth::Status</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractoauth.xml#status">status</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">statusChanged</db:emphasis>(<db:type><db:link xlink:href="qabstractoauth.xml#Status-enum">QAbstractOAuth::Status</db:link></db:type> <db:emphasis>status</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QAbstractOAuth">
<db:title>[virtual] QAbstractOAuth::~QAbstractOAuth()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractOAuth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractOAuth()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the abstract OAuth.</db:para>
</db:section>
<db:section xml:id="authorizationUrl">
<db:title>QUrl QAbstractOAuth::authorizationUrl() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>authorizationUrl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">authorizationUrl</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl authorizationUrl() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the authorization request URL.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstractoauth.xml#authorizationUrl-prop">authorizationUrl</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#setAuthorizationUrl">setAuthorizationUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="authorizeWithBrowser">
<db:title>void QAbstractOAuth::authorizeWithBrowser(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>authorizeWithBrowser</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void authorizeWithBrowser(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:code role="parameter">url</db:code> generated by <db:link xlink:href="qabstractoauth.xml#resourceOwnerAuthorization">resourceOwnerAuthorization</db:link>() is ready to be used in the web browser to allow the application to impersonate the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#resourceOwnerAuthorization">resourceOwnerAuthorization</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="callback">
<db:title>[protected] QString QAbstractOAuth::callback() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>callback</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString callback() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current callback string corresponding to the current reply handler. The returned string is the string sent to the server to specify the callback URI, or the word identifying the alternative method in headless devices.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#replyHandler">replyHandler</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractoauth.xml#setReplyHandler">setReplyHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clientIdentifier">
<db:title>QString QAbstractOAuth::clientIdentifier() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>clientIdentifier</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">clientIdentifier</db:synopsisinfo>
<db:synopsisinfo role="signature">QString clientIdentifier() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current client identifier used in the authentication process.</db:para>
<db:note>
<db:para>Getter function for property clientIdentifier. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#setClientIdentifier">setClientIdentifier</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentType">
<db:title>QAbstractOAuth::ContentType QAbstractOAuth::contentType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractOAuth::ContentType</db:type>
<db:methodname>contentType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">contentType</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractOAuth::ContentType contentType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current Content-Type used in authenticated calls.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstractoauth.xml#contentType-prop">contentType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#setContentType">setContentType</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractoauth.xml#post">post</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deleteResource">
<db:title>[pure virtual] QNetworkReply *QAbstractOAuth::deleteResource(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNetworkReply *</db:type>
<db:methodname>deleteResource</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkReply * deleteResource(const QUrl &amp;url, const QVariantMap &amp;parameters) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends an authenticated DELETE request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.7">Hypertext Transfer Protocol – HTTP/1.1: DELETE</db:link></db:para>
</db:section>
<db:section xml:id="extraTokens">
<db:title>QVariantMap QAbstractOAuth::extraTokens() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariantMap</db:type>
<db:methodname>extraTokens</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">extraTokens</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariantMap extraTokens() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the extra tokens received from the server during authentication.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstractoauth.xml#extraTokens-prop">extraTokens</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#extraTokens-prop">extraTokensChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="generateRandomString">
<db:title>[static protected] QByteArray QAbstractOAuth::generateRandomString(quint8 <db:emphasis>length</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>generateRandomString</db:methodname>
<db:methodparam>
<db:type>quint8</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray generateRandomString(quint8 length)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates a random string which could be used as state or nonce. The parameter <db:code role="parameter">length</db:code> determines the size of the generated string.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc5849#section-3.3">The OAuth 1.0 Protocol: Nonce and Timestamp</db:link>.</db:para>
</db:section>
<db:section xml:id="get">
<db:title>[pure virtual] QNetworkReply *QAbstractOAuth::get(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNetworkReply *</db:type>
<db:methodname>get</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkReply * get(const QUrl &amp;url, const QVariantMap &amp;parameters) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends an authenticated GET request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.3">Hypertext Transfer Protocol – HTTP/1.1: GET</db:link></db:para>
</db:section>
<db:section xml:id="grant">
<db:title>[pure virtual] void QAbstractOAuth::grant()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>grant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void grant() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this function to implement the corresponding authentication flow in the subclasses. Client code calls this function to start the authentication workflow. This may require user interaction: for example, asking the user's authorization via a web browser. When the authentication succeeds, it should emit <db:link xlink:href="qabstractoauth.xml#granted">granted</db:link>(); this gives notice that credentials are ready to be used in authenticated calls.</db:para>
</db:section>
<db:section xml:id="granted">
<db:title>void QAbstractOAuth::granted()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>granted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void granted()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the authorization flow finishes successfully.</db:para>
</db:section>
<db:section xml:id="head">
<db:title>[pure virtual] QNetworkReply *QAbstractOAuth::head(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNetworkReply *</db:type>
<db:methodname>head</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkReply * head(const QUrl &amp;url, const QVariantMap &amp;parameters) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends an authenticated HEAD request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.4">Hypertext Transfer Protocol – HTTP/1.1: HEAD</db:link></db:para>
</db:section>
<db:section xml:id="modifyParametersFunction">
<db:title>QAbstractOAuth::ModifyParametersFunction QAbstractOAuth::modifyParametersFunction() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractOAuth::ModifyParametersFunction</db:type>
<db:methodname>modifyParametersFunction</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractOAuth::ModifyParametersFunction modifyParametersFunction() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current parameter-modification function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>ModifyParametersFunction</db:member>
<db:member><db:link xlink:href="qabstractoauth.xml#setModifyParametersFunction">setModifyParametersFunction</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractoauth.xml#Stage-enum">Stage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="networkAccessManager">
<db:title>QNetworkAccessManager *QAbstractOAuth::networkAccessManager() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNetworkAccessManager *</db:type>
<db:methodname>networkAccessManager</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkAccessManager * networkAccessManager() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current network access manager used to send the requests to the server during authentication flows or to make authentication calls.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#setNetworkAccessManager">setNetworkAccessManager</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="post">
<db:title>[pure virtual] QNetworkReply *QAbstractOAuth::post(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNetworkReply *</db:type>
<db:methodname>post</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkReply * post(const QUrl &amp;url, const QVariantMap &amp;parameters) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends an authenticated POST request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.5">Hypertext Transfer Protocol – HTTP/1.1: POST</db:link></db:para>
</db:section>
<db:section xml:id="put">
<db:title>[pure virtual] QNetworkReply *QAbstractOAuth::put(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNetworkReply *</db:type>
<db:methodname>put</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkReply * put(const QUrl &amp;url, const QVariantMap &amp;parameters) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends an authenticated PUT request and returns a new <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>. The <db:code role="parameter">url</db:code> and <db:code role="parameter">parameters</db:code> are used to create the request.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="https://tools.ietf.org/html/rfc2616#section-9.6">Hypertext Transfer Protocol – HTTP/1.1: PUT</db:link></db:para>
</db:section>
<db:section xml:id="replyHandler">
<db:title>QAbstractOAuthReplyHandler *QAbstractOAuth::replyHandler() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractOAuthReplyHandler *</db:type>
<db:methodname>replyHandler</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractOAuthReplyHandler * replyHandler() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the reply handler currently in use.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#setReplyHandler">setReplyHandler</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractoauthreplyhandler.xml">QAbstractOAuthReplyHandler</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resourceOwnerAuthorization">
<db:title>[virtual protected] void QAbstractOAuth::resourceOwnerAuthorization(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resourceOwnerAuthorization</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resourceOwnerAuthorization(const QUrl &amp;url, const QVariantMap &amp;parameters)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Builds the resource owner authorization URL to be used in the web browser: <db:code role="parameter">url</db:code> is used as the base URL and the query is created using <db:code role="parameter">parameters</db:code>. When the URL is ready, the <db:link xlink:href="qabstractoauth.xml#authorizeWithBrowser">authorizeWithBrowser</db:link>() signal will be emitted with the generated URL.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#authorizeWithBrowser">authorizeWithBrowser</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAuthorizationUrl">
<db:title>void QAbstractOAuth::setAuthorizationUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAuthorizationUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">authorizationUrl</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAuthorizationUrl(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the authorization request URL to <db:code role="parameter">url</db:code>. This address will be used to allow the user to grant the application the ability to make authenticated calls on behalf of the user.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qabstractoauth.xml#authorizationUrl-prop">authorizationUrl</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#authorizationUrl">authorizationUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setClientIdentifier">
<db:title>void QAbstractOAuth::setClientIdentifier(const QString &amp;<db:emphasis>clientIdentifier</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setClientIdentifier</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>clientIdentifier</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">clientIdentifier</db:synopsisinfo>
<db:synopsisinfo role="signature">void setClientIdentifier(const QString &amp;clientIdentifier)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current client identifier to <db:code role="parameter">clientIdentifier</db:code>.</db:para>
<db:note>
<db:para>Setter function for property clientIdentifier. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#clientIdentifier">clientIdentifier</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContentType">
<db:title>void QAbstractOAuth::setContentType(QAbstractOAuth::ContentType <db:emphasis>contentType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setContentType</db:methodname>
<db:methodparam>
<db:type>QAbstractOAuth::ContentType</db:type>
<db:parameter>contentType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">contentType</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContentType(QAbstractOAuth::ContentType contentType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current Content-Type to <db:code role="parameter">contentType</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qabstractoauth.xml#contentType-prop">contentType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#contentType">contentType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setModifyParametersFunction">
<db:title>void QAbstractOAuth::setModifyParametersFunction(const QAbstractOAuth::ModifyParametersFunction &amp;<db:emphasis>modifyParametersFunction</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setModifyParametersFunction</db:methodname>
<db:methodparam>
<db:type>const QAbstractOAuth::ModifyParametersFunction &amp;</db:type>
<db:parameter>modifyParametersFunction</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setModifyParametersFunction(const QAbstractOAuth::ModifyParametersFunction &amp;modifyParametersFunction)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the parameter-modification function <db:code role="parameter">modifyParametersFunction</db:code>. This function is used to customize the parameters sent to the server during a specified authorization stage. The number of calls to this function depends on the flow used during the authentication.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#modifyParametersFunction">modifyParametersFunction</db:link>()</db:member>
<db:member>ModifyParametersFunction</db:member>
<db:member><db:link xlink:href="qabstractoauth.xml#Stage-enum">Stage</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNetworkAccessManager">
<db:title>void QAbstractOAuth::setNetworkAccessManager(QNetworkAccessManager *<db:emphasis>networkAccessManager</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNetworkAccessManager</db:methodname>
<db:methodparam>
<db:type>QNetworkAccessManager *</db:type>
<db:parameter>networkAccessManager</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNetworkAccessManager(QNetworkAccessManager *networkAccessManager)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the network manager to <db:code role="parameter">networkAccessManager</db:code>. <db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link> does not take ownership of <db:code role="parameter">networkAccessManager</db:code>. If no custom network access manager is set, an internal network access manager is used. This network access manager will be used to make the request to the authentication server and the authenticated request to the web service.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#networkAccessManager">networkAccessManager</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setReplyHandler">
<db:title>void QAbstractOAuth::setReplyHandler(QAbstractOAuthReplyHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setReplyHandler</db:methodname>
<db:methodparam>
<db:type>QAbstractOAuthReplyHandler *</db:type>
<db:parameter>handler</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setReplyHandler(QAbstractOAuthReplyHandler *handler)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current reply handler to <db:code role="parameter">handler</db:code>.</db:para>
<db:note>
<db:para>Does not take ownership of <db:code role="parameter">handler</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#replyHandler">replyHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStatus">
<db:title>[protected] void QAbstractOAuth::setStatus(QAbstractOAuth::Status <db:emphasis>status</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStatus</db:methodname>
<db:methodparam>
<db:type>QAbstractOAuth::Status</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStatus(QAbstractOAuth::Status status)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current status to <db:code role="parameter">status</db:code>. This method is for use by classes based on <db:link xlink:href="qabstractoauth.xml">QAbstractOAuth</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#status">status</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setToken">
<db:title>void QAbstractOAuth::setToken(const QString &amp;<db:emphasis>token</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setToken</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>token</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">token</db:synopsisinfo>
<db:synopsisinfo role="signature">void setToken(const QString &amp;token)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the token used to sign authenticated requests to <db:code role="parameter">token</db:code>.</db:para>
<db:note>
<db:para>Setter function for property token. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#token">token</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status">
<db:title>QAbstractOAuth::Status QAbstractOAuth::status() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractOAuth::Status</db:type>
<db:methodname>status</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">status</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractOAuth::Status status() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current authentication status.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstractoauth.xml#status-prop">status</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#setStatus">setStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractoauth.xml#Status-enum">Status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="token">
<db:title>QString QAbstractOAuth::token() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>token</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">token</db:synopsisinfo>
<db:synopsisinfo role="signature">QString token() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the token used to sign the authenticated requests.</db:para>
<db:note>
<db:para>Getter function for property token. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractoauth.xml#setToken">setToken</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
