<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRegion Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qregion.xml">QRegion</db:link> class specifies a clip region for a painter.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRegion</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRegion is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qregion.xml">QRegion</db:link> is used with <db:link xlink:href="qpainter.xml#setClipRegion">QPainter::setClipRegion</db:link>() to limit the paint area to what needs to be painted. There is also a <db:link xlink:href="qwidget.xml#repaint">QWidget::repaint</db:link>() function that takes a <db:link xlink:href="qregion.xml">QRegion</db:link> parameter. <db:link xlink:href="qregion.xml">QRegion</db:link> is the best tool for minimizing the amount of screen area to be updated by a repaint.</db:para>
<db:para>This class is not suitable for constructing shapes for rendering, especially as outlines. Use <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> to create paths and shapes for use with <db:link xlink:href="qpainter.xml">QPainter</db:link>.</db:para>
<db:para><db:link xlink:href="qregion.xml">QRegion</db:link> is an <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link> class.</db:para>
<db:section xml:id="creating-and-using-regions">
<db:title>Creating and Using Regions</db:title>
<db:para>A region can be created from a rectangle, an ellipse, a polygon or a bitmap. Complex regions may be created by combining simple regions using <db:link xlink:href="qregion.xml#united">united</db:link>(), <db:link xlink:href="qregion.xml#intersected">intersected</db:link>(), <db:link xlink:href="qregion.xml#subtracted">subtracted</db:link>(), or <db:link xlink:href="qregion.xml#xored">xored</db:link>() (exclusive or). You can move a region using <db:link xlink:href="qregion.xml#translate">translate</db:link>().</db:para>
<db:para>You can test whether a region <db:link xlink:href="qregion.xml#isEmpty">isEmpty</db:link>() or if it <db:link xlink:href="qregion.xml#contains">contains</db:link>() a <db:link xlink:href="qpoint.xml">QPoint</db:link> or <db:link xlink:href="qrect.xml">QRect</db:link>. The bounding rectangle can be found with <db:link xlink:href="qregion.xml#boundingRect">boundingRect</db:link>().</db:para>
<db:para>Iteration over the region (with <db:link xlink:href="qregion.xml#begin">begin</db:link>(), <db:link xlink:href="qregion.xml#end">end</db:link>(), or C++11 ranged-for loops) gives a decomposition of the region into rectangles.</db:para>
<db:para>Example of using complex regions:</db:para>
<db:programlisting language="cpp">void MyWidget::paintEvent(QPaintEvent *)
{
    QRegion r1(QRect(100, 100, 200, 80),    // r1: elliptic region
               QRegion::Ellipse);
    QRegion r2(QRect(100, 120, 90, 30));    // r2: rectangular region
    QRegion r3 = r1.intersected(r2);        // r3: intersection

    QPainter painter(this);
    painter.setClipRegion(r3);
    // ...                                  // paint clipped graphics
}
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#setClipRegion">QPainter::setClipRegion</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#setClipRect">QPainter::setClipRect</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml">QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RegionType-enum">
<db:title>enum QRegion::RegionType</db:title>
<db:enumsynopsis>
<db:enumname>RegionType</db:enumname>
<db:enumitem>
<db:enumidentifier>Rectangle</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ellipse</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies the shape of the region to be created.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qregion.xml">QRegion</db:link></db:emphasis>::Rectangle</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>the region covers the entire rectangle.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qregion.xml">QRegion</db:link></db:emphasis>::Ellipse</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>the region is an ellipse inside the rectangle.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="const_iterator-typedef">
<db:title>QRegion::const_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>An iterator over the non-overlapping rectangles that make up the region.</db:para>
<db:para>The union of all the rectangles is equal to the original region.</db:para>
<db:para><db:link xlink:href="qregion.xml">QRegion</db:link> does not offer mutable iterators.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="const_reverse_iterator-typedef">
<db:title>QRegion::const_reverse_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reverse_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A reverse iterator over the non-overlapping rectangles that make up the region.</db:para>
<db:para>The union of all the rectangles is equal to the original region.</db:para>
<db:para><db:link xlink:href="qregion.xml">QRegion</db:link> does not offer mutable iterators.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRegion">
<db:title>QRegion::QRegion()</db:title>
<db:constructorsynopsis>
<db:methodname>QRegion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty region.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QRegion-1">
<db:title>QRegion::QRegion(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>, QRegion::RegionType <db:emphasis>t</db:emphasis> = Rectangle)</db:title>
<db:constructorsynopsis>
<db:methodname>QRegion</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRegion::RegionType</db:type>
<db:parameter>t</db:parameter>
<db:initializer>Rectangle</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion(int x, int y, int w, int h, QRegion::RegionType t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a rectangular or elliptic region.</db:para>
<db:para>If <db:code role="parameter">t</db:code> is <db:code>Rectangle</db:code>, the region is the filled rectangle (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>). If <db:code role="parameter">t</db:code> is <db:code>Ellipse</db:code>, the region is the filled ellipse with center at (<db:code role="parameter">x</db:code> + <db:code role="parameter">w</db:code> / 2, <db:code role="parameter">y</db:code> + <db:code role="parameter">h</db:code> / 2) and size (<db:code role="parameter">w</db:code> ,<db:code role="parameter">h</db:code>).</db:para>
</db:section>
<db:section xml:id="QRegion-2">
<db:title>QRegion::QRegion(const QRect &amp;<db:emphasis>r</db:emphasis>, QRegion::RegionType <db:emphasis>t</db:emphasis> = Rectangle)</db:title>
<db:constructorsynopsis>
<db:methodname>QRegion</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRegion::RegionType</db:type>
<db:parameter>t</db:parameter>
<db:initializer>Rectangle</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion(const QRect &amp;r, QRegion::RegionType t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Create a region based on the rectangle <db:code role="parameter">r</db:code> with region type <db:code role="parameter">t</db:code>.</db:para>
<db:para>If the rectangle is invalid a null region will be created.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#RegionType-enum">QRegion::RegionType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QRegion-3">
<db:title>QRegion::QRegion(const QPolygon &amp;<db:emphasis>a</db:emphasis>, Qt::FillRule <db:emphasis>fillRule</db:emphasis> = Qt::OddEvenFill)</db:title>
<db:constructorsynopsis>
<db:methodname>QRegion</db:methodname>
<db:methodparam>
<db:type>const QPolygon &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::FillRule</db:type>
<db:parameter>fillRule</db:parameter>
<db:initializer>Qt::OddEvenFill</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion(const QPolygon &amp;a, Qt::FillRule fillRule)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a polygon region from the point array <db:code role="parameter">a</db:code> with the fill rule specified by <db:code role="parameter">fillRule</db:code>.</db:para>
<db:para>If <db:code role="parameter">fillRule</db:code> is <db:link xlink:href="qt.xml#FillRule-enum">Qt::WindingFill</db:link>, the polygon region is defined using the winding algorithm; if it is <db:link xlink:href="qt.xml#FillRule-enum">Qt::OddEvenFill</db:link>, the odd-even fill algorithm is used.</db:para>
<db:warning>
<db:para>This constructor can be used to create complex regions that will slow down painting when used.</db:para>
</db:warning>
</db:section>
<db:section xml:id="QRegion-6">
<db:title>QRegion::QRegion(const QBitmap &amp;<db:emphasis>bm</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRegion</db:methodname>
<db:methodparam>
<db:type>const QBitmap &amp;</db:type>
<db:parameter>bm</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion(const QBitmap &amp;bm)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a region from the bitmap <db:code role="parameter">bm</db:code>.</db:para>
<db:para>The resulting region consists of the pixels in bitmap <db:code role="parameter">bm</db:code> that are <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::color1</db:link>, as if each pixel was a 1 by 1 rectangle.</db:para>
<db:para>This constructor may create complex regions that will slow down painting when used. Note that drawing masked pixmaps can be done much faster using <db:link xlink:href="qpixmap.xml#setMask">QPixmap::setMask</db:link>().</db:para>
</db:section>
<db:section xml:id="QRegion-4">
<db:title>QRegion::QRegion(const QRegion &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRegion</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion(const QRegion &amp;r)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new region which is equal to region <db:code role="parameter">r</db:code>.</db:para>
</db:section>
<db:section xml:id="QRegion-5">
<db:title>QRegion::QRegion(QRegion &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QRegion</db:methodname>
<db:methodparam>
<db:type>QRegion &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion(QRegion &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a new region from region <db:code role="parameter">other</db:code>. After the call, <db:code role="parameter">other</db:code> is null.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin">
<db:title>QRegion::const_iterator QRegion::begin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion::const_iterator</db:type>
<db:methodname>begin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion::const_iterator begin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qregion.xml#const_iterator-typedef">const_iterator</db:link> pointing to the beginning of the range of non-overlapping rectangles that make up the region.</db:para>
<db:para>The union of all the rectangles is equal to the original region.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundingRect">
<db:title>QRect QRegion::boundingRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>boundingRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect boundingRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rectangle of this region. An empty region gives a rectangle that is <db:link xlink:href="qrect.xml#isNull">QRect::isNull</db:link>().</db:para>
</db:section>
<db:section xml:id="cbegin">
<db:title>QRegion::const_iterator QRegion::cbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion::const_iterator</db:type>
<db:methodname>cbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion::const_iterator cbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qregion.xml#begin">begin</db:link>().</db:para>
</db:section>
<db:section xml:id="cend">
<db:title>QRegion::const_iterator QRegion::cend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion::const_iterator</db:type>
<db:methodname>cend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion::const_iterator cend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qregion.xml#end">end</db:link>().</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>bool QRegion::contains(const QPoint &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const QPoint &amp;p) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the region contains the point <db:code role="parameter">p</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="contains-1">
<db:title>bool QRegion::contains(const QRect &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const QRect &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the region overlaps the rectangle <db:code role="parameter">r</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="crbegin">
<db:title>QRegion::const_reverse_iterator QRegion::crbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion::const_reverse_iterator</db:type>
<db:methodname>crbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion::const_reverse_iterator crbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qregion.xml#rbegin">rbegin</db:link>().</db:para>
</db:section>
<db:section xml:id="crend">
<db:title>QRegion::const_reverse_iterator QRegion::crend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion::const_reverse_iterator</db:type>
<db:methodname>crend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion::const_reverse_iterator crend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qregion.xml#rend">rend</db:link>().</db:para>
</db:section>
<db:section xml:id="end">
<db:title>QRegion::const_iterator QRegion::end() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion::const_iterator</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion::const_iterator end() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qregion.xml#const_iterator-typedef">const_iterator</db:link> pointing to one past the end of non-overlapping rectangles that make up the region.</db:para>
<db:para>The union of all the rectangles is equal to the original region.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#rend">rend</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#begin">begin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromHRGN">
<db:title>[static, since 6.0] QRegion QRegion::fromHRGN(HRGN <db:emphasis>hrgn</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>fromHRGN</db:methodname>
<db:methodparam>
<db:type>HRGN</db:type>
<db:parameter>hrgn</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion fromHRGN(HRGN hrgn)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qregion.xml">QRegion</db:link> that is equivalent to the given <db:code role="parameter">hrgn</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="intersected">
<db:title>QRegion QRegion::intersected(const QRegion &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>intersected</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion intersected(const QRegion &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a region which is the intersection of this region and <db:code role="parameter">r</db:code>.</db:para>
<db:mediaobject>
<db:alt>Region Intersection</db:alt>
<db:imageobject>
<db:imagedata fileref="images/rintersect.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The figure shows the intersection of two elliptical regions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#subtracted">subtracted</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#united">united</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#xored">xored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intersected-1">
<db:title>QRegion QRegion::intersected(const QRect &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>intersected</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion intersected(const QRect &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a region which is the intersection of this region and the given <db:code role="parameter">rect</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#subtracted">subtracted</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#united">united</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#xored">xored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intersects">
<db:title>bool QRegion::intersects(const QRegion &amp;<db:emphasis>region</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>intersects</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>region</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool intersects(const QRegion &amp;region) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this region intersects with <db:code role="parameter">region</db:code>, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="intersects-1">
<db:title>bool QRegion::intersects(const QRect &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>intersects</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool intersects(const QRect &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this region intersects with <db:code role="parameter">rect</db:code>, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QRegion::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the region is empty; otherwise returns <db:code>false</db:code>. An empty region is a region that contains no points.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QRegion r1(10, 10, 20, 20);
r1.isEmpty();               // false

QRegion r3;
r3.isEmpty();               // true

QRegion r2(40, 40, 20, 20);
r3 = r1.intersected(r2);    // r3: intersection of r1 and r2
r3.isEmpty();               // true

r3 = r1.united(r2);         // r3: union of r1 and r2
r3.isEmpty();               // false
</db:programlisting>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QRegion::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the region is empty; otherwise returns <db:code>false</db:code>. An empty region is a region that contains no points. This function is the same as <db:link xlink:href="qregion.xml#isEmpty">isEmpty</db:link></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rbegin">
<db:title>QRegion::const_reverse_iterator QRegion::rbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion::const_reverse_iterator</db:type>
<db:methodname>rbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion::const_reverse_iterator rbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qregion.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link> pointing to the beginning of the range of non-overlapping rectangles that make up the region.</db:para>
<db:para>The union of all the rectangles is equal to the original region.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rectCount">
<db:title>int QRegion::rectCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rectCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rectCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of rectangles that this region is composed of. Same as <db:code>end() - begin()</db:code>.</db:para>
</db:section>
<db:section xml:id="rend">
<db:title>QRegion::const_reverse_iterator QRegion::rend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion::const_reverse_iterator</db:type>
<db:methodname>rend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion::const_reverse_iterator rend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qregion.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link> pointing to one past the end of the range of non-overlapping rectangles that make up the region.</db:para>
<db:para>The union of all the rectangles is equal to the original region.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#crend">crend</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#rbegin">rbegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRects">
<db:title>void QRegion::setRects(const QRect *<db:emphasis>rects</db:emphasis>, int <db:emphasis>number</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRects</db:methodname>
<db:methodparam>
<db:type>const QRect *</db:type>
<db:parameter>rects</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>number</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRects(const QRect *rects, int number)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the region using the array of rectangles specified by <db:code role="parameter">rects</db:code> and <db:code role="parameter">number</db:code>. The rectangles <db:emphasis>must</db:emphasis> be optimally Y-X sorted and follow these restrictions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The rectangles must not intersect.</db:para>
</db:listitem>
<db:listitem>
<db:para>All rectangles with a given top coordinate must have the same height.</db:para>
</db:listitem>
<db:listitem>
<db:para>No two rectangles may abut horizontally (they should be combined into a single wider rectangle in that case).</db:para>
</db:listitem>
<db:listitem>
<db:para>The rectangles must be sorted in ascending order, with Y as the major sort key and X as the minor sort key.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="subtracted">
<db:title>QRegion QRegion::subtracted(const QRegion &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>subtracted</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion subtracted(const QRegion &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a region which is <db:code role="parameter">r</db:code> subtracted from this region.</db:para>
<db:mediaobject>
<db:alt>Region Subtraction</db:alt>
<db:imageobject>
<db:imagedata fileref="images/rsubtract.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The figure shows the result when the ellipse on the right is subtracted from the ellipse on the left (<db:code>left - right</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#intersected">intersected</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#united">united</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#xored">xored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QRegion::swap(QRegion &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QRegion &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QRegion &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps region <db:code role="parameter">other</db:code> with this region. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="toHRGN">
<db:title>[since 6.0] HRGN QRegion::toHRGN() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>HRGN</db:type>
<db:methodname>toHRGN</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">HRGN toHRGN() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a HRGN that is equivalent to the given region.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="translate">
<db:title>void QRegion::translate(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(int dx, int dy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Translates (moves) the region <db:code role="parameter">dx</db:code> along the X axis and <db:code role="parameter">dy</db:code> along the Y axis.</db:para>
</db:section>
<db:section xml:id="translate-1">
<db:title>void QRegion::translate(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(const QPoint &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Translates the region <db:code role="parameter">point</db:code><db:emphasis>.x()</db:emphasis> along the x axis and <db:code role="parameter">point</db:code><db:emphasis>.y()</db:emphasis> along the y axis, relative to the current position. Positive values move the region to the right and down.</db:para>
<db:para>Translates to the given <db:code role="parameter">point</db:code>.</db:para>
</db:section>
<db:section xml:id="translated">
<db:title>QRegion QRegion::translated(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>translated</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion translated(int dx, int dy) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of the region that is translated <db:code role="parameter">dx</db:code> along the x axis and <db:code role="parameter">dy</db:code> along the y axis, relative to the current position. Positive values move the region to the right and down.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translated-1">
<db:title>QRegion QRegion::translated(const QPoint &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>translated</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion translated(const QPoint &amp;p) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a copy of the regtion that is translated <db:code role="parameter">p</db:code><db:emphasis>.x()</db:emphasis> along the x axis and <db:code role="parameter">p</db:code><db:emphasis>.y()</db:emphasis> along the y axis, relative to the current position. Positive values move the rectangle to the right and down.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="united">
<db:title>QRegion QRegion::united(const QRegion &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>united</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion united(const QRegion &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a region which is the union of this region and <db:code role="parameter">r</db:code>.</db:para>
<db:mediaobject>
<db:alt>Region Union</db:alt>
<db:imageobject>
<db:imagedata fileref="images/runion.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The figure shows the union of two elliptical regions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#intersected">intersected</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#subtracted">subtracted</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#xored">xored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="united-1">
<db:title>QRegion QRegion::united(const QRect &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>united</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion united(const QRect &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a region which is the union of this region and the given <db:code role="parameter">rect</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#intersected">intersected</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#subtracted">subtracted</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#xored">xored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="xored">
<db:title>QRegion QRegion::xored(const QRegion &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>xored</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion xored(const QRegion &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a region which is the exclusive or (XOR) of this region and <db:code role="parameter">r</db:code>.</db:para>
<db:mediaobject>
<db:alt>Region XORed</db:alt>
<db:imageobject>
<db:imagedata fileref="images/rxor.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The figure shows the exclusive or of two elliptical regions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#intersected">intersected</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#united">united</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#subtracted">subtracted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QRegion::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the region as a <db:link xlink:href="qvariant.xml">QVariant</db:link></db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QRegion::operator!=(const QRegion &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QRegion &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this region is different from the <db:code role="parameter">other</db:code> region; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-and">
<db:title>QRegion QRegion::operator&amp;(const QRegion &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>operator&amp;</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion operator&amp;(const QRegion &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Applies the <db:link xlink:href="qregion.xml#intersected">intersected</db:link>() function to this region and <db:code role="parameter">r</db:code>. <db:code>r1&amp;r2</db:code> is equivalent to <db:code>r1.intersected(r2)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#intersected">intersected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-and-1">
<db:title>QRegion QRegion::operator&amp;(const QRect &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>operator&amp;</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion operator&amp;(const QRect &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-and-eq">
<db:title>QRegion &amp;QRegion::operator&amp;=(const QRegion &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRegion &amp;</db:type>
<db:methodname>operator&amp;=</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion &amp; operator&amp;=(const QRegion &amp;r)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Applies the <db:link xlink:href="qregion.xml#intersected">intersected</db:link>() function to this region and <db:code role="parameter">r</db:code> and assigns the result to this region. <db:code>r1&amp;=r2</db:code> is equivalent to <db:code>r1</db:code> = r1.intersected(r2).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#intersected">intersected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-and-eq-1">
<db:title>QRegion &amp;QRegion::operator&amp;=(const QRect &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRegion &amp;</db:type>
<db:methodname>operator&amp;=</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion &amp; operator&amp;=(const QRect &amp;r)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QRegion QRegion::operator+(const QRegion &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion operator+(const QRegion &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Applies the <db:link xlink:href="qregion.xml#united">united</db:link>() function to this region and <db:code role="parameter">r</db:code>. <db:code>r1+r2</db:code> is equivalent to <db:code>r1.united(r2)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#united">united</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#operator-7c">operator|</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-1">
<db:title>QRegion QRegion::operator+(const QRect &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion operator+(const QRect &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QRegion &amp;QRegion::operator+=(const QRegion &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRegion &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion &amp; operator+=(const QRegion &amp;r)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Applies the <db:link xlink:href="qregion.xml#united">united</db:link>() function to this region and <db:code role="parameter">r</db:code> and assigns the result to this region. <db:code>r1+=r2</db:code> is equivalent to <db:code>r1 = r1.united(r2)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#intersected">intersected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq-1">
<db:title>QRegion &amp;QRegion::operator+=(const QRect &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRegion &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion &amp; operator+=(const QRect &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a region that is the union of this region with the specified <db:code role="parameter">rect</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#united">united</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>QRegion QRegion::operator-(const QRegion &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion operator-(const QRegion &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Applies the <db:link xlink:href="qregion.xml#subtracted">subtracted</db:link>() function to this region and <db:code role="parameter">r</db:code>. <db:code>r1-r2</db:code> is equivalent to <db:code>r1.subtracted(r2)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#subtracted">subtracted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QRegion &amp;QRegion::operator-=(const QRegion &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRegion &amp;</db:type>
<db:methodname>operator-=</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion &amp; operator-=(const QRegion &amp;r)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Applies the <db:link xlink:href="qregion.xml#subtracted">subtracted</db:link>() function to this region and <db:code role="parameter">r</db:code> and assigns the result to this region. <db:code>r1-=r2</db:code> is equivalent to <db:code>r1 = r1.subtracted(r2)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#subtracted">subtracted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QRegion &amp;QRegion::operator=(const QRegion &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRegion &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion &amp; operator=(const QRegion &amp;r)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">r</db:code> to this region and returns a reference to the region.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QRegion &amp;QRegion::operator=(QRegion &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRegion &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QRegion &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion &amp; operator=(QRegion &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qregion.xml">QRegion</db:link> instance.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QRegion::operator==(const QRegion &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QRegion &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the region is equal to <db:code role="parameter">r</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-5e">
<db:title>QRegion QRegion::operator^(const QRegion &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>operator^</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion operator^(const QRegion &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Applies the <db:link xlink:href="qregion.xml#xored">xored</db:link>() function to this region and <db:code role="parameter">r</db:code>. <db:code>r1^r2</db:code> is equivalent to <db:code>r1.xored(r2)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#xored">xored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5e-eq">
<db:title>QRegion &amp;QRegion::operator^=(const QRegion &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRegion &amp;</db:type>
<db:methodname>operator^=</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion &amp; operator^=(const QRegion &amp;r)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Applies the <db:link xlink:href="qregion.xml#xored">xored</db:link>() function to this region and <db:code role="parameter">r</db:code> and assigns the result to this region. <db:code>r1^=r2</db:code> is equivalent to <db:code>r1 = r1.xored(r2)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#xored">xored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c">
<db:title>QRegion QRegion::operator|(const QRegion &amp;<db:emphasis>r</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>operator|</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion operator|(const QRegion &amp;r) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Applies the <db:link xlink:href="qregion.xml#united">united</db:link>() function to this region and <db:code role="parameter">r</db:code>. <db:code>r1|r2</db:code> is equivalent to <db:code>r1.united(r2)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#united">united</db:link>()</db:member>
<db:member><db:link xlink:href="qregion.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c-eq">
<db:title>QRegion &amp;QRegion::operator|=(const QRegion &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRegion &amp;</db:type>
<db:methodname>operator|=</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion &amp; operator|=(const QRegion &amp;r)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Applies the <db:link xlink:href="qregion.xml#united">united</db:link>() function to this region and <db:code role="parameter">r</db:code> and assigns the result to this region. <db:code>r1|=r2</db:code> is equivalent to <db:code>r1 = r1.united(r2)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregion.xml#united">united</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>s</db:emphasis>, const QRegion &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;s, const QRegion &amp;r)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the region <db:code role="parameter">r</db:code> to the stream <db:code role="parameter">s</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>s</db:emphasis>, QRegion &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QRegion &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;s, QRegion &amp;r)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a region from the stream <db:code role="parameter">s</db:code> into <db:code role="parameter">r</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
