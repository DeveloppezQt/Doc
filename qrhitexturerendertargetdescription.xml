<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRhiTextureRenderTargetDescription Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes the color and depth or depth/stencil attachments of a render target.</db:para>
<db:para>This class was introduced in Qt 6.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>rhi/qrhi.h</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::GuiPrivate)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui-private</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A texture render target has zero or more textures as color attachments, zero or one renderbuffer as combined depth/stencil buffer or zero or one texture as depth buffer.</db:para>
<db:note>
<db:para>depthStencilBuffer() and depthTexture() cannot be both set (cannot be non-null at the same time).</db:para>
</db:note>
<db:para>Let's look at some example usages in combination with <db:link xlink:href="qrhitexturerendertarget.xml">QRhiTextureRenderTarget</db:link>.</db:para>
<db:para>Due to the constructors, the targeting a texture (and no depth/stencil buffer) is simple:</db:para>
<db:programlisting language="cpp">QRhiTexture *texture = rhi-&gt;newTexture(QRhiTexture::RGBA8, QSize(256, 256), 1, QRhiTexture::RenderTarget);
texture-&gt;create();
QRhiTextureRenderTarget *rt = rhi-&gt;newTextureRenderTarget({ texture }));
</db:programlisting>
<db:para>The following creates a texture render target that is set up to target mip level #2 of a texture:</db:para>
<db:programlisting language="cpp">QRhiTexture *texture = rhi-&gt;newTexture(QRhiTexture::RGBA8, QSize(512, 512), 1, QRhiTexture::RenderTarget | QRhiTexture::MipMapped);
texture-&gt;create();
QRhiColorAttachment colorAtt(texture);
colorAtt.setLevel(2);
QRhiTextureRenderTarget *rt = rhi-&gt;newTextureRenderTarget({ colorAtt });
</db:programlisting>
<db:para>Another example, this time to render into a depth texture:</db:para>
<db:programlisting language="cpp">QRhiTexture *shadowMap = rhi-&gt;newTexture(QRhiTexture::D32F, QSize(1024, 1024), 1, QRhiTexture::RenderTarget);
shadowMap-&gt;create();
QRhiTextureRenderTargetDescription rtDesc;
rtDesc.setDepthTexture(shadowMap);
QRhiTextureRenderTarget *rt = rhi-&gt;newTextureRenderTarget(rtDesc);
</db:programlisting>
<db:para>A very common case, having a texture as the color attachment and a renderbuffer as depth/stencil to enable depth testing:</db:para>
<db:programlisting language="cpp">QRhiTexture *texture = rhi-&gt;newTexture(QRhiTexture::RGBA8, QSize(512, 512), 1, QRhiTexture::RenderTarget);
texture-&gt;create();
QRhiRenderBuffer *depthStencil = rhi-&gt;newRenderBuffer(QRhiRenderBuffer::DepthStencil, QSize(512, 512));
depthStencil-&gt;create();
QRhiTextureRenderTargetDescription rtDesc({ texture }, depthStencil);
QRhiTextureRenderTarget *rt = rhi-&gt;newTextureRenderTarget(rtDesc);
</db:programlisting>
<db:para>Finally, to enable multisample rendering in a portable manner (so also supporting OpenGL ES 3.0), using a <db:link xlink:href="qrhirenderbuffer.xml">QRhiRenderBuffer</db:link> as the (multisample) color buffer and then resolving into a regular (non-multisample) 2D texture. To enable depth testing, a depth-stencil buffer, which also must use the same sample count, is used as well:</db:para>
<db:programlisting language="cpp">QRhiRenderBuffer *colorBuffer = rhi-&gt;newRenderBuffer(QRhiRenderBuffer::Color, QSize(512, 512), 4); // 4x MSAA
colorBuffer-&gt;create();
QRhiRenderBuffer *depthStencil = rhi-&gt;newRenderBuffer(QRhiRenderBuffer::DepthStencil, QSize(512, 512), 4);
depthStencil-&gt;create();
QRhiTexture *texture = rhi-&gt;newTexture(QRhiTexture::RGBA8, QSize(512, 512), 1, QRhiTexture::RenderTarget);
texture-&gt;create();
QRhiColorAttachment colorAtt(colorBuffer);
colorAtt.setResolveTexture(texture);
QRhiTextureRenderTarget *rt = rhi-&gt;newTextureRenderTarget({ colorAtt, depthStencil });
</db:programlisting>
<db:note>
<db:para>when multisample resolving is enabled, the multisample data may not be written out at all. This means that the multisample texture in a color attachment must not be used afterwards with shaders for sampling (or other purposes) whenever a resolve texture is set, since the multisample color buffer is merely an intermediate storage then that gets no data written back on some GPU architectures at all. See <db:link xlink:href="qrhitexturerendertarget.xml#Flag-enum">PreserveColorContents</db:link> for more details.</db:para>
</db:note>
<db:note>
<db:para>When using setDepthTexture(), not setDepthStencilBuffer(), and the depth (stencil) data is not of interest afterwards, set the DoNotStoreDepthStencilContents flag on the <db:link xlink:href="qrhitexturerendertarget.xml">QRhiTextureRenderTarget</db:link>. This allows indicating to the underlying 3D API that the depth/stencil data can be discarded, leading potentially to better performance with tiled GPU architectures. When the depth-stencil buffer is a <db:link xlink:href="qrhirenderbuffer.xml">QRhiRenderBuffer</db:link> (and also for the multisample color texture, see previous note) this is implicit, but with a depth (stencil) <db:link xlink:href="qrhitexture.xml">QRhiTexture</db:link> the intention needs to be declared explicitly. By default <db:link xlink:href="qrhi.xml">QRhi</db:link> assumes that the data is of interest (e.g., the depth texture is sampled in a shader afterwards).</db:para>
</db:note>
<db:note>
<db:para>This is a RHI API with limited compatibility guarantees, see <db:link xlink:href="qrhi.xml">QRhi</db:link> for details.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrhicolorattachment.xml">QRhiColorAttachment</db:link></db:member>
<db:member><db:link xlink:href="qrhitexturerendertarget.xml">QRhiTextureRenderTarget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRhiTextureRenderTargetDescription">
<db:title>QRhiTextureRenderTargetDescription::QRhiTextureRenderTargetDescription(const QRhiColorAttachment &amp;<db:emphasis>colorAttachment</db:emphasis>)</db:title>
<db:para>Constructs a texture render target description with one attachment described by <db:code role="parameter">colorAttachment</db:code>.</db:para>
</db:section>
<db:section xml:id="QRhiTextureRenderTargetDescription-1">
<db:title>QRhiTextureRenderTargetDescription::QRhiTextureRenderTargetDescription(const QRhiColorAttachment &amp;<db:emphasis>colorAttachment</db:emphasis>, QRhiRenderBuffer *<db:emphasis>depthStencilBuffer</db:emphasis>)</db:title>
<db:para>Constructs a texture render target description with two attachments, a color attachment described by <db:code role="parameter">colorAttachment</db:code>, and a depth/stencil attachment with <db:code role="parameter">depthStencilBuffer</db:code>.</db:para>
</db:section>
<db:section xml:id="QRhiTextureRenderTargetDescription-2">
<db:title>QRhiTextureRenderTargetDescription::QRhiTextureRenderTargetDescription(const QRhiColorAttachment &amp;<db:emphasis>colorAttachment</db:emphasis>, QRhiTexture *<db:emphasis>depthTexture</db:emphasis>)</db:title>
<db:para>Constructs a texture render target description with two attachments, a color attachment described by <db:code role="parameter">colorAttachment</db:code>, and a depth attachment with <db:code role="parameter">depthTexture</db:code>.</db:para>
<db:note>
<db:para><db:code role="parameter">depthTexture</db:code> must have a suitable format, such as <db:link xlink:href="qrhitexture.xml#Format-enum">QRhiTexture::D16</db:link> or <db:link xlink:href="qrhitexture.xml#Format-enum">QRhiTexture::D32F</db:link>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
