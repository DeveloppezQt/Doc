<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using ActiveX controls and COM in Qt</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>A Windows-only extension for accessing ActiveX controls and COM objects.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:link xlink:href="qaxcontainer-module.xml">QAxContainer</db:link> module is part of the <db:link xlink:href="activeqt-index.xml">ActiveQt</db:link> framework. It provides a library implementing a <db:link xlink:href="qwidget.xml">QWidget</db:link> subclass, <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link>, that acts as a container for ActiveX controls, and a <db:link xlink:href="qobject.xml">QObject</db:link> subclass, <db:link xlink:href="qaxobject.xml">QAxObject</db:link>, that can be used to easily access non-visual COM objects. Scripting COM objects embedded using these classes is possible through the <db:link xlink:href="qaxscript.xml">QAxScript</db:link>, <db:link xlink:href="qaxscriptmanager.xml">QAxScriptManager</db:link> and <db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link> classes, and a set of <db:link xlink:href="activeqt-tools.xml">tools</db:link> makes it easy to access COM objects programmatically.</db:para>
<db:para>The module consists of six classes</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para><db:link xlink:href="qaxbase.xml">QAxBase</db:link> is an abstract class that provides an API to initialize and access a COM object or ActiveX control.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaxobject.xml">QAxObject</db:link> provides a <db:link xlink:href="qobject.xml">QObject</db:link> that wraps a COM object.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> is a <db:link xlink:href="qwidget.xml">QWidget</db:link> that wraps an ActiveX control.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaxscriptmanager.xml">QAxScriptManager</db:link>, <db:link xlink:href="qaxscript.xml">QAxScript</db:link> and <db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link> provide an interface to the Windows Script Host.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Some <db:link xlink:href="activeqt-index.xml#activeqt-examples">example applications</db:link> that use standard ActiveX controls to provide high-level user interface functionality are provided.</db:para>
<db:para>Topics:</db:para>
<db:section xml:id="using-the-library">
<db:title>Using the Library</db:title>
<db:para>To build Qt applications that can host COM objects and ActiveX controls link the application against the <db:link xlink:href="qaxcontainer-module.xml">QAxContainer</db:link> module by adding</db:para>
<db:programlisting language="cpp">QT += axcontainer
</db:programlisting>
<db:para>to your application's <db:code>.pro</db:code> file.</db:para>
<db:section xml:id="distributing-qaxcontainer-applications">
<db:title>Distributing QAxContainer Applications</db:title>
<db:para>The <db:link xlink:href="qaxcontainer-module.xml">QAxContainer</db:link> library is static, so there is no need to redistribute any additional files when using this module. Note however that the ActiveX server binaries you are using might not be installed on the target system, so you have to ship them with your package and register them during the installation process of your application.</db:para>
</db:section>
</db:section>
<db:section xml:id="instantiating-com-objects">
<db:title>Instantiating COM Objects</db:title>
<db:para>To instantiate a COM object use the QAxBase::setControl() API, or pass the name of the object directly into the constructor of the <db:link xlink:href="qaxbase.xml">QAxBase</db:link> subclass you are using.</db:para>
<db:para>The control can be specified in a variety of formats, but the fastest and most powerful format is to use the class ID (CLSID) of the object directly. The class ID can be prepended with information about a remote machine that the object should run on, and can include a license key for licensed controls.</db:para>
<db:section xml:id="typical-error-messages">
<db:title>Typical Error Messages</db:title>
<db:para>ActiveQt prints error messages to the debug output when it encounters error situations at runtime. Usually you must run your program in the debugger to see these messages (e.g. in Visual Studio's Debug output).</db:para>
<db:section xml:id="requested-control-could-not-be-instantiated">
<db:title>Requested control could not be instantiated</db:title>
<db:para>The control requested in QAxBase::setControl() is not installed on this system, or is not accessible for the current user.</db:para>
<db:para>The control might require administrator rights, or a license key. If the control is licensed, pass the license key to QAxBase::setControl as documented.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="accessing-the-object-api">
<db:title>Accessing the Object API</db:title>
<db:para>ActiveQt provides a Qt API to the COM object, and replaces COM datatypes with Qt equivalents.</db:para>
<db:para>There are four ways to call APIs on the COM object:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Generating a C++ namespace</db:para>
</db:listitem>
<db:listitem>
<db:para>Call-by-name</db:para>
</db:listitem>
<db:listitem>
<db:para>Through a script engine</db:para>
</db:listitem>
<db:listitem>
<db:para>Using the native COM interfaces</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="generating-a-c-namespace">
<db:title>Generating a C++ Namespace</db:title>
<db:para>To generate a C++ namespace for the type library you want to access, use the <db:link xlink:href="activeqt-dumpcpp.xml">dumpcpp</db:link> tool. Run this tool manually on the type library you want to use, or integrate it into the build system by adding the type libraries to the <db:code>TYPELIBS</db:code> variable in your application's <db:code>.pro</db:code> file:</db:para>
<db:programlisting language="cpp">TYPELIBS = file.tlb
</db:programlisting>
<db:para>Note that <db:link xlink:href="activeqt-dumpcpp.xml">dumpcpp</db:link> might not be able to expose all APIs in the type library.</db:para>
<db:para>Include the resulting header file in your code to access the object APIs through the generated C++ classes. See the <db:link xlink:href="activeqt-activeqt-qutlook-example.xml">Qutlook</db:link> example for more information.</db:para>
</db:section>
<db:section xml:id="call-by-name">
<db:title>Call-by-Name</db:title>
<db:para>Use <db:link xlink:href="qaxbase.xml#dynamicCall">QAxBase::dynamicCall</db:link>() and <db:link xlink:href="qaxbase.xml#querySubObject">QAxBase::querySubObject</db:link>() as well as the <db:link xlink:href="qobject.xml#setProperty">QObject::setProperty</db:link>() and <db:link xlink:href="qobject.xml#property">QObject::property</db:link>() APIs to call the methods and properties of the COM object through their name. Use the <db:link xlink:href="activeqt-dumpdoc.xml">dumpdoc</db:link> tool to get the documentation of the Qt API for any COM object and its subobjects; note that not all of the COM object's APIs might be available.</db:para>
</db:section>
<db:section xml:id="calling-function-through-a-script-engine">
<db:title>Calling Function Through a Script Engine</db:title>
<db:para>A Qt application can host any ActiveScript engine installed on the system. The script engine can then run script code that accesses the COM objects.</db:para>
<db:para>To instantiate a script engine, use <db:link xlink:href="qaxscriptmanager.xml#addObject">QAxScriptManager::addObject</db:link>() to register the COM objects you want to access from script, and <db:link xlink:href="qaxscriptmanager.xml#load">QAxScriptManager::load</db:link>() to load the script code into the engine. Then call the script functions using <db:link xlink:href="qaxscriptmanager.xml#call">QAxScriptManager::call</db:link>() or <db:link xlink:href="qaxscript.xml#call">QAxScript::call</db:link>().</db:para>
<db:para>Which APIs of the COM object are available through scripting depends on the script language used.</db:para>
<db:para>The <db:link xlink:href="activeqt-testcon.xml">ActiveX Test Container</db:link> demonstrates loading of script files.</db:para>
</db:section>
<db:section xml:id="calling-a-function-using-the-native-com-interfaces">
<db:title>Calling a Function Using the Native COM Interfaces</db:title>
<db:para>To call functions of the COM object that can not be accessed via any of the above methods it is possible to request the COM interface directly using <db:link xlink:href="qaxbase.xml#queryInterface">QAxBase::queryInterface</db:link>(). To get a C++ definition of the respective interface classes use the <db:code>#import</db:code> directive with the type library provided with the control; see your compiler manual for details.</db:para>
</db:section>
<db:section xml:id="typical-error-messages">
<db:title>Typical Error Messages</db:title>
<db:para>ActiveQt prints error messages to the debug output when it encounters error situations at runtime. Usually you must run your program in the debugger to see these messages (e.g. in Visual Studio's Debug output).</db:para>
<db:section xml:id="qaxbase-internalinvoke-no-such-method">
<db:title>QAxBase::internalInvoke: No such method</db:title>
<db:para>A <db:link xlink:href="qaxbase.xml#dynamicCall">QAxBase::dynamicCall</db:link>() failed - the function prototype did not match any function available in the object's API.</db:para>
</db:section>
<db:section xml:id="error-calling-idispatch-member-non-optional-parameter-missing">
<db:title>Error calling IDispatch member: Non-optional parameter missing</db:title>
<db:para>A <db:link xlink:href="qaxbase.xml#dynamicCall">QAxBase::dynamicCall</db:link>() failed - the function prototype was correct, but too few parameters were provided.</db:para>
</db:section>
<db:section xml:id="error-calling-idispatch-member-type-mismatch-in-parameter-n">
<db:title>Error calling IDispatch member: Type mismatch in parameter n</db:title>
<db:para>A <db:link xlink:href="qaxbase.xml#dynamicCall">QAxBase::dynamicCall</db:link>() failed - the function prototype was correct, but the parameter at index <db:code>n</db:code> was of the wrong type and could not be coerced to the correct type.</db:para>
</db:section>
<db:section xml:id="qaxscriptmanager-call-no-script-provides-this-function">
<db:title>QAxScriptManager::call(): No script provides this function</db:title>
<db:para>You try to call a function that is provided through an engine that doesn't provide introspection (ie. ActivePython or ActivePerl). You need to call the function directly on the respective <db:link xlink:href="qaxscript.xml">QAxScript</db:link> object.</db:para>
</db:section>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="activeqt-index.xml">ActiveQt Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
