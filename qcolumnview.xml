<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QColumnView Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcolumnview.xml">QColumnView</db:link> class provides a model/view implementation of a column view.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QColumnView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemview.xml" xlink:role="class">QAbstractItemView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QColumnView is part of <db:simplelist><db:member>model-view</db:member><db:member>advanced</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcolumnview.xml">QColumnView</db:link> displays a model in a number of QListViews, one for each hierarchy in the tree. This is sometimes referred to as a cascading list.</db:para>
<db:para>The <db:link xlink:href="qcolumnview.xml">QColumnView</db:link> class is one of the <db:link xlink:href="model-view-programming.xml#the-model-view-classes">Model/View Classes</db:link> and is part of Qt's <db:link xlink:href="model-view-programming.xml">model/view framework</db:link>.</db:para>
<db:para><db:link xlink:href="qcolumnview.xml">QColumnView</db:link> implements the interfaces defined by the <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> class to allow it to display data provided by models derived from the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qcolumnview.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="resizeGripsVisible-prop">
<db:title>resizeGripsVisible : bool</db:title>
<db:para>This property holds the way to specify if the list views gets resize grips or not</db:para>
<db:para>By default, <db:code>visible</db:code> is set to true</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">resizeGripsVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setResizeGripsVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolumnview.xml#setRootIndex">setRootIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QColumnView">
<db:title>[explicit] QColumnView::QColumnView(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a column view with a <db:code role="parameter">parent</db:code> to represent a model's data. Use <db:link xlink:href="qcolumnview.xml#setModel">setModel</db:link>() to set the model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QColumnView">
<db:title>[virtual noexcept] QColumnView::~QColumnView()</db:title>
<db:para>Destroys the column view.</db:para>
</db:section>
<db:section xml:id="columnWidths">
<db:title>QList&lt;int&gt; QColumnView::columnWidths() const</db:title>
<db:para>Returns a list of the width of all the columns in this view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolumnview.xml#setColumnWidths">setColumnWidths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createColumn">
<db:title>[virtual protected] QAbstractItemView *QColumnView::createColumn(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>To use a custom widget for the final column when you select an item overload this function and return a widget. <db:code role="parameter">index</db:code> is the root index that will be assigned to the view.</db:para>
<db:para>Return the new view. <db:link xlink:href="qcolumnview.xml">QColumnView</db:link> will automatically take ownership of the widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolumnview.xml#setPreviewWidget">setPreviewWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentChanged">
<db:title>[override virtual protected] void QColumnView::currentChanged(const QModelIndex &amp;<db:emphasis>current</db:emphasis>, const QModelIndex &amp;<db:emphasis>previous</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#currentChanged" role="function">QAbstractItemView::currentChanged(const QModelIndex &amp;current, const QModelIndex &amp;previous)</db:link>.</db:para>
</db:section>
<db:section xml:id="horizontalOffset">
<db:title>[override virtual protected] int QColumnView::horizontalOffset() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#horizontalOffset" role="function">QAbstractItemView::horizontalOffset() const</db:link>.</db:para>
</db:section>
<db:section xml:id="indexAt">
<db:title>[override virtual] QModelIndex QColumnView::indexAt(const QPoint &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#indexAt" role="function">QAbstractItemView::indexAt(const QPoint &amp;point) const</db:link>.</db:para>
</db:section>
<db:section xml:id="initializeColumn">
<db:title>[protected] void QColumnView::initializeColumn(QAbstractItemView *<db:emphasis>column</db:emphasis>) const</db:title>
<db:para>Copies the behavior and options of the column view and applies them to the <db:code role="parameter">column</db:code> such as the <db:link xlink:href="qabstractitemview.xml#iconSize-prop">iconSize</db:link>(), <db:link xlink:href="qabstractitemview.xml#textElideMode-prop">textElideMode</db:link>() and <db:link xlink:href="qabstractitemview.xml#alternatingRowColors-prop">alternatingRowColors</db:link>(). This can be useful when reimplementing <db:link xlink:href="qcolumnview.xml#createColumn">createColumn</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolumnview.xml#createColumn">createColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isIndexHidden">
<db:title>[override virtual protected] bool QColumnView::isIndexHidden(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#isIndexHidden" role="function">QAbstractItemView::isIndexHidden(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="moveCursor">
<db:title>[override virtual protected] QModelIndex QColumnView::moveCursor(QAbstractItemView::CursorAction <db:emphasis>cursorAction</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#moveCursor" role="function">QAbstractItemView::moveCursor(QAbstractItemView::CursorAction cursorAction, Qt::KeyboardModifiers modifiers)</db:link>.</db:para>
<db:para>Move left should go to the parent index Move right should go to the child index or down if there is no child</db:para>
</db:section>
<db:section xml:id="previewWidget">
<db:title>QWidget *QColumnView::previewWidget() const</db:title>
<db:para>Returns the preview widget, or <db:code>nullptr</db:code> if there is none.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolumnview.xml#setPreviewWidget">setPreviewWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qcolumnview.xml#updatePreviewWidget">updatePreviewWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QColumnView::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#resizeEvent" role="function">QAbstractItemView::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="rowsInserted">
<db:title>[override virtual protected] void QColumnView::rowsInserted(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#rowsInserted" role="function">QAbstractItemView::rowsInserted(const QModelIndex &amp;parent, int start, int end)</db:link>.</db:para>
</db:section>
<db:section xml:id="scrollContentsBy">
<db:title>[override virtual protected] void QColumnView::scrollContentsBy(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#scrollContentsBy" role="function">QAbstractScrollArea::scrollContentsBy(int dx, int dy)</db:link>.</db:para>
</db:section>
<db:section xml:id="scrollTo">
<db:title>[override virtual] void QColumnView::scrollTo(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, QAbstractItemView::ScrollHint <db:emphasis>hint</db:emphasis> = EnsureVisible)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#scrollTo" role="function">QAbstractItemView::scrollTo(const QModelIndex &amp;index, QAbstractItemView::ScrollHint hint)</db:link>.</db:para>
</db:section>
<db:section xml:id="selectAll">
<db:title>[override virtual] void QColumnView::selectAll()</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#selectAll" role="function">QAbstractItemView::selectAll()</db:link>.</db:para>
</db:section>
<db:section xml:id="setColumnWidths">
<db:title>void QColumnView::setColumnWidths(const QList&lt;int&gt; &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:para>Sets the column widths to the values given in the <db:code role="parameter">list</db:code>. Extra values in the list are kept and used when the columns are created.</db:para>
<db:para>If list contains too few values, only width of the rest of the columns will not be modified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolumnview.xml#columnWidths">columnWidths</db:link>()</db:member>
<db:member><db:link xlink:href="qcolumnview.xml#createColumn">createColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setModel">
<db:title>[override virtual] void QColumnView::setModel(QAbstractItemModel *<db:emphasis>model</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setModel" role="function">QAbstractItemView::setModel(QAbstractItemModel *model)</db:link>.</db:para>
</db:section>
<db:section xml:id="setPreviewWidget">
<db:title>void QColumnView::setPreviewWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets the preview <db:code role="parameter">widget</db:code>.</db:para>
<db:para>The <db:code role="parameter">widget</db:code> becomes a child of the column view, and will be destroyed when the column area is deleted or when a new widget is set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolumnview.xml#previewWidget">previewWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qcolumnview.xml#updatePreviewWidget">updatePreviewWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRootIndex">
<db:title>[override virtual] void QColumnView::setRootIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setRootIndex" role="function">QAbstractItemView::setRootIndex(const QModelIndex &amp;index)</db:link>.</db:para>
</db:section>
<db:section xml:id="setSelection">
<db:title>[override virtual protected] void QColumnView::setSelection(const QRect &amp;<db:emphasis>rect</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>command</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setSelection" role="function">QAbstractItemView::setSelection(const QRect &amp;rect, QItemSelectionModel::SelectionFlags flags)</db:link>.</db:para>
</db:section>
<db:section xml:id="setSelectionModel">
<db:title>[override virtual] void QColumnView::setSelectionModel(QItemSelectionModel *<db:emphasis>newSelectionModel</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setSelectionModel" role="function">QAbstractItemView::setSelectionModel(QItemSelectionModel *selectionModel)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QColumnView::sizeHint() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#sizeHint" role="function">QAbstractScrollArea::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="updatePreviewWidget">
<db:title>void QColumnView::updatePreviewWidget(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted when the preview widget should be updated to provide rich information about <db:code role="parameter">index</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolumnview.xml#previewWidget">previewWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verticalOffset">
<db:title>[override virtual protected] int QColumnView::verticalOffset() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#verticalOffset" role="function">QAbstractItemView::verticalOffset() const</db:link>.</db:para>
</db:section>
<db:section xml:id="visualRect">
<db:title>[override virtual] QRect QColumnView::visualRect(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#visualRect" role="function">QAbstractItemView::visualRect(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="visualRegionForSelection">
<db:title>[override virtual protected] QRegion QColumnView::visualRegionForSelection(const QItemSelection &amp;<db:emphasis>selection</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#visualRegionForSelection" role="function">QAbstractItemView::visualRegionForSelection(const QItemSelection &amp;selection) const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
