<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Animation and Transitions in Qt Quick</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>the animation system in Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="animation-and-transitions-types">
<db:title>Animation and Transitions Types</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-transition.xml">Transition</db:link> - Animates transitions during state changes</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> - Runs animations sequentially</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-parallelanimation.xml">ParallelAnimation</db:link> - Runs animations in parallel</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-behavior.xml">Behavior</db:link> - Specifies a default animation for property changes</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-propertyaction.xml">PropertyAction</db:link> - Sets immediate property changes during animation</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-pauseanimation.xml">PauseAnimation</db:link> - Introduces a pause in an animation</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-smoothedanimation.xml">SmoothedAnimation</db:link> - Allows a property to smoothly track a value</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-springanimation.xml">SpringAnimation</db:link> - Allows a property to track a value in a spring-like motion</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-scriptaction.xml">ScriptAction</db:link> - Runs scripts during an animation</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Types that animate properties based on data types <db:variablelist role="qtquick-animation-properties">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-anchoranimation.xml" xlink:role="">AnchorAnimation</db:link></db:term>
<db:listitem>
<db:para>Animates changes in anchor values.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-coloranimation.xml" xlink:role="">ColorAnimation</db:link></db:term>
<db:listitem>
<db:para>Animates changes in color values.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-numberanimation.xml" xlink:role="">NumberAnimation</db:link></db:term>
<db:listitem>
<db:para>Animates changes in qreal-type values.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-parentanimation.xml" xlink:role="">ParentAnimation</db:link></db:term>
<db:listitem>
<db:para>Animates changes in parent values.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-pathanimation.xml" xlink:role="">PathAnimation</db:link></db:term>
<db:listitem>
<db:para>Animates an item along a path.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-propertyanimation.xml" xlink:role="">PropertyAnimation</db:link></db:term>
<db:listitem>
<db:para>Animates changes in property values.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-rotationanimation.xml" xlink:role="">RotationAnimation</db:link></db:term>
<db:listitem>
<db:para>Animates changes in rotation values.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-vector3danimation.xml" xlink:role="">Vector3dAnimation</db:link></db:term>
<db:listitem>
<db:para>Animates changes in QVector3d values.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:para>
<db:para>Animations are created by applying animation types to property values. Animation types will interpolate property values to create smooth transitions. As well, state transitions may assign animations to state changes.</db:para>
<db:para>To create an animation, use an appropriate animation type for the type of the property that is to be animated, and apply the animation depending on the type of behavior that is required.</db:para>
</db:section>
<db:section xml:id="triggering-animations">
<db:title>Triggering Animations</db:title>
<db:para>There are several ways of setting animation to an object.</db:para>
<db:section xml:id="direct-property-animation">
<db:title>Direct Property Animation</db:title>
<db:para>Animations are created by applying animation objects to property values to gradually change the properties over time. These <db:emphasis>property animations</db:emphasis> apply smooth movements by interpolating values between property value changes. Property animations provide timing controls and allows different interpolations through <db:link xlink:href="qtquick-statesanimations-animations.xml#qml-easing-animation">easing curves</db:link>.</db:para>
<db:programlisting language="qml">Rectangle {
    id: flashingblob
    width: 75; height: 75
    color: &quot;blue&quot;
    opacity: 1.0

    MouseArea {
        anchors.fill: parent
        onClicked: {
            animateColor.start()
            animateOpacity.start()
        }
    }

    PropertyAnimation {id: animateColor; target: flashingblob; properties: &quot;color&quot;; to: &quot;green&quot;; duration: 100}

    NumberAnimation {
        id: animateOpacity
        target: flashingblob
        properties: &quot;opacity&quot;
        from: 0.99
        to: 1.0
        loops: Animation.Infinite
        easing {type: Easing.OutBack; overshoot: 500}
   }
}
</db:programlisting>
<db:para>Specialized property animation types have more efficient implementations than the <db:link xlink:href="qml-qtquick-propertyanimation.xml">PropertyAnimation</db:link> type. They are for setting animations to different QML types such as <db:code>int</db:code>, <db:code>color</db:code>, and rotations. Similarly, the <db:link xlink:href="qml-qtquick-parentanimation.xml">ParentAnimation</db:link> can animate parent changes.</db:para>
<db:para>See the <db:link xlink:href="qtquick-statesanimations-animations.xml#qml-controlling-animations">Controlling Animations</db:link> section for more information about the different animation properties.</db:para>
</db:section>
<db:section xml:id="using-predefined-targets-and-properties">
<db:title>Using Predefined Targets and Properties</db:title>
<db:para>In the previous example, the <db:link xlink:href="qml-qtquick-propertyanimation.xml">PropertyAnimation</db:link> and <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> objects needed to specify particular <db:link xlink:href="qml-qtquick-propertyanimation.xml#target-prop">target</db:link> and <db:link xlink:href="qml-qtquick-propertyanimation.xml#properties-prop">properties</db:link> values to specify the objects and properties that should be animated. This can be avoided by using the <db:emphasis>&lt;Animation&gt; on &lt;Property&gt;</db:emphasis> syntax, which specifies the animation is to be applied as a <db:emphasis>property value source</db:emphasis>.</db:para>
<db:para>Below are two <db:link xlink:href="qml-qtquick-propertyanimation.xml">PropertyAnimation</db:link> objects that are specified using this syntax:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    id: rect
    width: 100; height: 100
    color: &quot;red&quot;

    PropertyAnimation on x { to: 100 }
    PropertyAnimation on y { to: 100 }
}
</db:programlisting>
<db:para>The animation starts as soon as the rectangle is loaded, and will automatically be applied to its <db:code>x</db:code> and <db:code>y</db:code> values. Since the <db:emphasis>&lt;Animation&gt; on &lt;Property&gt;</db:emphasis> syntax has been used, it is not necessary to set the <db:link xlink:href="qml-qtquick-propertyanimation.xml#target-prop">target</db:link> value of the <db:link xlink:href="qml-qtquick-propertyanimation.xml">PropertyAnimation</db:link> objects to <db:code>rect</db:code>, and neither is it necessary to set the <db:link xlink:href="qml-qtquick-propertyanimation.xml#property-prop">property</db:link> values to <db:code>x</db:code> and <db:code>y</db:code>.</db:para>
<db:para>This can also be used by <db:link xlink:href="qtquick-statesanimations-animations.xml#playing-animations-in-parallel-or-in-sequence">grouped animations</db:link> to ensure that all animations within a group are applied to the same property. For example, the previous example could instead use <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> to animate the rectangle's <db:code>color</db:code> first to yellow, then to blue:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 100; height: 100
    color: &quot;red&quot;

    SequentialAnimation on color {
        ColorAnimation { to: &quot;yellow&quot;; duration: 1000 }
        ColorAnimation { to: &quot;blue&quot;; duration: 1000 }
    }
}
</db:programlisting>
<db:para>Since the <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> object has been specified on the <db:code>color</db:code> property using the <db:emphasis>&lt;Animation&gt; on &lt;Property&gt;</db:emphasis> syntax, its child <db:link xlink:href="qml-qtquick-coloranimation.xml">ColorAnimation</db:link> objects are also automatically applied to this property and do not need to specify <db:link xlink:href="qml-qtquick-propertyanimation.xml#target-prop">target</db:link> or <db:link xlink:href="qml-qtquick-propertyanimation.xml#property-prop">property</db:link> animation values.</db:para>
<db:anchor xml:id="qml-transition-animations"/>
</db:section>
<db:section xml:id="transitions-during-state-changes">
<db:title>Transitions During State Changes</db:title>
<db:para><db:link xlink:href="qml-qtquick-state.xml">Qt Quick States</db:link> are property configurations where a property may have different values to reflect different states. State changes introduce abrupt property changes; animations smooth transitions to produce visually appealing state changes.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-transition.xml">Transition</db:link> type can contain animation types to interpolate property changes caused by state changes. To assign the transition to an object, bind it to the <db:code>transitions</db:code> property.</db:para>
<db:para>A button might have two states, the <db:code>pressed</db:code> state when the user clicks on the button and a <db:code>released</db:code> state when the user releases the button. We can assign different property configurations for each state. A transition would animate the change from the <db:code>pressed</db:code> state to the <db:code>released</db:code> state. Likewise, there would be an animation during the change from the <db:code>released</db:code> state to the <db:code>pressed</db:code> state.</db:para>
<db:programlisting language="qml">Rectangle {
    width: 75; height: 75
    id: button
    state: &quot;RELEASED&quot;

    MouseArea {
        anchors.fill: parent
        onPressed: button.state = &quot;PRESSED&quot;
        onReleased: button.state = &quot;RELEASED&quot;
    }

    states: [
        State {
            name: &quot;PRESSED&quot;
            PropertyChanges { target: button; color: &quot;lightblue&quot;}
        },
        State {
            name: &quot;RELEASED&quot;
            PropertyChanges { target: button; color: &quot;lightsteelblue&quot;}
        }
    ]

    transitions: [
        Transition {
            from: &quot;PRESSED&quot;
            to: &quot;RELEASED&quot;
            ColorAnimation { target: button; duration: 100}
        },
        Transition {
            from: &quot;RELEASED&quot;
            to: &quot;PRESSED&quot;
            ColorAnimation { target: button; duration: 100}
        }
    ]
}
</db:programlisting>
<db:para>Binding the <db:code>to</db:code> and <db:code>from</db:code> properties to the state's name will assign that particular transition to the state change. For simple or symmetric transitions, setting the to <db:code>to</db:code> property to the wild card symbol, &quot;<db:code>*</db:code>&quot;, denotes that the transition applies to any state change.</db:para>
<db:programlisting language="qml">    transitions:
        Transition {
            to: &quot;*&quot;
            ColorAnimation { target: button; duration: 100}
        }
</db:programlisting>
</db:section>
<db:section xml:id="default-animation-as-behaviors">
<db:title>Default Animation as Behaviors</db:title>
<db:para>Default property animations are set using <db:emphasis>behavior animations</db:emphasis>. Animations declared in <db:link xlink:href="qml-qtquick-behavior.xml">Behavior</db:link> types apply to the property and animates any property value changes. However, Behavior types have an <db:code>enabled</db:code> property to purposely enable or disable the behavior animations.</db:para>
<db:para>A ball component might have a behavior animation assigned to its <db:code>x</db:code>, <db:code>y</db:code>, and <db:code>color</db:code> properties. The behavior animation could be set up to simulate an elastic effect. In effect, this behavior animation would apply the elastic effect to the properties whenever the ball moves.</db:para>
<db:programlisting language="qml">Rectangle {
    width: 75; height: 75; radius: width
    id: ball
    color: &quot;salmon&quot;

    Behavior on x {
        NumberAnimation {
            id: bouncebehavior
            easing {
                type: Easing.OutElastic
                amplitude: 1.0
                period: 0.5
            }
        }
    }
    Behavior on y {
        animation: bouncebehavior
    }
    Behavior {
        ColorAnimation { target: ball; duration: 100 }
    }
}
</db:programlisting>
<db:para>There are several methods of assigning behavior animations to properties. The <db:code>Behavior on &lt;property&gt;</db:code> declaration is a convenient way of assigning a behavior animation onto a property.</db:para>
<db:para>See the <db:link xlink:href="qtquick-animation-example.xml">Qt Quick Examples - Animation</db:link> for a demonstration of behavioral animations.</db:para>
</db:section>
</db:section>
<db:section xml:id="playing-animations-in-parallel-or-in-sequence">
<db:title>Playing Animations in Parallel or in Sequence</db:title>
<db:para>Animations can run <db:emphasis>in parallel</db:emphasis> or <db:emphasis>in sequence</db:emphasis>. Parallel animations will play a group of animations at the same time while sequential animations play a group of animations in order: one after the other. Grouping animations in <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> and <db:link xlink:href="qml-qtquick-parallelanimation.xml">ParallelAnimation</db:link> will play the animations in sequence or in parallel.</db:para>
<db:para>A banner component may have several icons or slogans to display, one after the other. The <db:code>opacity</db:code> property could transform to <db:code>1.0</db:code> denoting an opaque object. Using the <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> type, the opacity animations will play after the preceding animation finishes. The <db:link xlink:href="qml-qtquick-parallelanimation.xml">ParallelAnimation</db:link> type will play the animations at the same time.</db:para>
<db:programlisting language="qml">Rectangle {
    id: banner
    width: 150; height: 100; border.color: &quot;black&quot;

    Column {
        anchors.centerIn: parent
        Text {
            id: code
            text: &quot;Code less.&quot;
            opacity: 0.01
        }
        Text {
            id: create
            text: &quot;Create more.&quot;
            opacity: 0.01
        }
        Text {
            id: deploy
            text: &quot;Deploy everywhere.&quot;
            opacity: 0.01
        }
    }

    MouseArea {
        anchors.fill: parent
        onPressed: playbanner.start()
    }

    SequentialAnimation {
        id: playbanner
        running: false
        NumberAnimation { target: code; property: &quot;opacity&quot;; to: 1.0; duration: 200}
        NumberAnimation { target: create; property: &quot;opacity&quot;; to: 1.0; duration: 200}
        NumberAnimation { target: deploy; property: &quot;opacity&quot;; to: 1.0; duration: 200}
    }
}
</db:programlisting>
<db:para>Once individual animations are placed into a <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> or <db:link xlink:href="qml-qtquick-parallelanimation.xml">ParallelAnimation</db:link>, they can no longer be started and stopped independently. The sequential or parallel animation must be started and stopped as a group.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> type is also useful for playing <db:link xlink:href="qtquick-statesanimations-animations.xml#qml-transition-animations">transition animations</db:link> because animations are played in parallel inside transitions.</db:para>
<db:anchor xml:id="qml-controlling-animations"/>
</db:section>
<db:section xml:id="controlling-animations">
<db:title>Controlling Animations</db:title>
<db:para>There are different methods to control animations.</db:para>
<db:section xml:id="animation-playback">
<db:title>Animation Playback</db:title>
<db:para>All animation types inherit from the <db:link xlink:href="qml-qtquick-animation.xml">Animation</db:link> type. It is not possible to create <db:link xlink:href="qml-qtquick-animation.xml">Animation</db:link> objects; instead, this type provides the essential properties and methods for animation types. Animation types have <db:code>start()</db:code>, <db:code>stop()</db:code>, <db:code>resume()</db:code>, <db:code>pause()</db:code>, <db:code>restart()</db:code>, and <db:code>complete()</db:code> – all of these methods control the execution of animations.</db:para>
<db:anchor xml:id="qml-easing-animation"/>
</db:section>
<db:section xml:id="easing">
<db:title>Easing</db:title>
<db:para>Easing curves define how the animation will interpolate between the start value and the end value. Different easing curves might go beyond the defined range of interpolation. The easing curves simplify the creation of animation effects such as bounce effects, acceleration, deceleration, and cyclical animations.</db:para>
<db:para>A QML object may have different easing curve for each property animation. There are also different parameters to control the curve, some of which are exclusive to a particular curve. For more information about the easing curves, visit the <db:link xlink:href="qml-qtquick-propertyanimation.xml#easing.type-prop">easing</db:link> documentation.</db:para>
<db:para>The <db:link xlink:href="qtwidgets-animation-easing-example.xml">easing example</db:link> visually demonstrates each of the different easing types.</db:para>
</db:section>
<db:section xml:id="other-animation-types">
<db:title>Other Animation Types</db:title>
<db:para>In addition, QML provides several other types useful for animation:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-pauseanimation.xml">PauseAnimation</db:link>: enables pauses during animations</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-scriptaction.xml">ScriptAction</db:link>: allows JavaScript to be executed during an animation, and can be used together with <db:link xlink:href="qml-qtquick-statechangescript.xml">StateChangeScript</db:link> to reused existing scripts</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-propertyaction.xml">PropertyAction</db:link>: changes a property <db:emphasis>immediately</db:emphasis> during an animation, without animating the property change</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>These are specialized animation types that animate different property types</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-smoothedanimation.xml">SmoothedAnimation</db:link>: a specialized <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> that provides smooth changes in animation when the target value changes</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-springanimation.xml">SpringAnimation</db:link>: provides a spring-like animation with specialized attributes such as <db:link xlink:href="qml-qtquick-springanimation.xml#mass-prop">mass</db:link>, <db:link xlink:href="qml-qtquick-springanimation.xml#damping-prop">damping</db:link> and <db:link xlink:href="qml-qtquick-springanimation.xml#epsilon-prop">epsilon</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-parentanimation.xml">ParentAnimation</db:link>: used for animating a parent change (see <db:link xlink:href="qml-qtquick-parentchange.xml">ParentChange</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-anchoranimation.xml">AnchorAnimation</db:link>: used for animating an anchor change (see <db:link xlink:href="qml-qtquick-anchorchanges.xml">AnchorChanges</db:link>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="sharing-animation-instances">
<db:title>Sharing Animation Instances</db:title>
<db:para>Sharing animation instances between Transitions or Behaviors is not supported, and may lead to undefined behavior. In the following example, changes to the Rectangle's position will most likely not be correctly animated.</db:para>
<db:programlisting language="qml">Rectangle {
    // NOT SUPPORTED: this will not work correctly as both Behaviors
    // try to control a single animation instance
    NumberAnimation { id: anim; duration: 300; easing.type: Easing.InBack }
    Behavior on x { animation: anim }
    Behavior on y { animation: anim }
}
</db:programlisting>
<db:para>The easiest fix is to repeat the <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> for both Behaviors. If the repeated animation is rather complex, you might also consider creating a custom animation component and assigning an instance to each Behavior, for example:</db:para>
<db:programlisting language="qml">// MyNumberAnimation.qml
NumberAnimation { id: anim; duration: 300; easing.type: Easing.InBack }
</db:programlisting>
<db:programlisting language="qml">// main.qml
Rectangle {
    Behavior on x { MyNumberAnimation {} }
    Behavior on y { MyNumberAnimation {} }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-animation-example.xml">Qt Quick Examples - Animation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
