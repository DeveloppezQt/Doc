<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>GaugeStyle QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides custom styling for Gauge.</db:para>
<db:para>This type was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls.Styles 1.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>GaugeStyle is part of <db:simplelist><db:member><db:link xlink:href="controlsstyling.xml">Styling Controls</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>You can create a custom gauge by replacing the following delegates:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-styles-gaugestyle.xml#background-prop">background</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-styles-gaugestyle.xml#valueBar-prop">valueBar</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-styles-gaugestyle.xml#tickmarkLabel-prop">tickmarkLabel</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Below, you'll find an example of how to create a temperature gauge that changes color as its value increases:</db:para>
<db:programlisting language="cpp">import QtQuick 2.2
import QtQuick.Controls 1.4
import QtQuick.Controls.Styles 1.4
import QtQuick.Extras 1.4

Rectangle {
    width: 80
    height: 200

    Timer {
        running: true
        repeat: true
        interval: 2000
        onTriggered: gauge.value = gauge.value == gauge.maximumValue ? 5 : gauge.maximumValue
    }

    Gauge {
        id: gauge
        anchors.fill: parent
        anchors.margins: 10

        value: 5
        Behavior on value {
            NumberAnimation {
                duration: 1000
            }
        }

        style: GaugeStyle {
            valueBar: Rectangle {
                implicitWidth: 16
                color: Qt.rgba(gauge.value / gauge.maximumValue, 0, 1 - gauge.value / gauge.maximumValue, 1)
            }
        }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gauge-temperature.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The gauge displaying values at various points during the animation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="styling-gauge.xml">Styling Gauge</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="background-prop">
<db:title>background : Component</db:title>
<db:para>The background of the gauge, displayed behind the <db:link xlink:href="qml-qtquick-controls-styles-gaugestyle.xml#valueBar-prop">valueBar</db:link>.</db:para>
<db:para>By default, no background is defined.</db:para>
</db:section>
<db:section xml:id="control-prop">
<db:title>[read-only] control : Gauge</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-extras-gauge.xml">Gauge</db:link> that this style is attached to.</db:para>
</db:section>
<db:section xml:id="foreground-prop">
<db:title>foreground : Component</db:title>
<db:para>The bar that represents the foreground of the gauge.</db:para>
<db:para>This component is drawn above every other component.</db:para>
</db:section>
<db:section xml:id="minorTickmark-prop">
<db:title>minorTickmark : Component</db:title>
<db:para>Each minor tickmark displayed by the gauge.</db:para>
<db:para>To set the size of the minor tickmarks, specify an <db:link xlink:href="qml-qtquick-item.xml#implicitWidth-prop">implicitWidth</db:link> and <db:link xlink:href="qml-qtquick-item.xml#implicitHeight-prop">implicitHeight</db:link>.</db:para>
<db:para>For layouting reasons, each minor tickmark should have the same <db:code>implicitHeight</db:code>. If different heights are needed for individual tickmarks, specify those heights in a child item of the component.</db:para>
<db:para>In the example below, we decrease the width of the minor tickmarks:</db:para>
<db:programlisting language="cpp">minorTickmark: Item {
    implicitWidth: 8
    implicitHeight: 1

    Rectangle {
        color: &quot;#cccccc&quot;
        anchors.fill: parent
        anchors.leftMargin: 2
        anchors.rightMargin: 4
    }
}
</db:programlisting>
<db:mediaobject>
<db:alt>Gauge minorTickmark example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/gauge-minorTickmark-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Each instance of this component has access to the following property:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:code>readonly property int</db:code> <db:emphasis role="bold">styleData.index</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>The index of this minor tickmark.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>readonly property real</db:code> <db:emphasis role="bold">styleData.value</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>The value that this minor tickmark represents.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>readonly property real</db:code> <db:emphasis role="bold">styleData.valuePosition</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>The value that this minor tickmark represents as a position in pixels, with 0 being at the bottom of the gauge.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-styles-gaugestyle.xml#tickmark-prop">tickmark</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="padding-prop">
<db:title>padding group</db:title>
<db:bridgehead renderas="sect2" xml:id="padding.bottom-prop">padding.bottom : int</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="padding.left-prop">padding.left : int</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="padding.right-prop">padding.right : int</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="padding.top-prop">padding.top : int</db:bridgehead>
<db:para>This grouped property holds the <db:code>top</db:code>, <db:code>left</db:code>, <db:code>right</db:code> and <db:code>bottom</db:code> padding.</db:para>
</db:section>
<db:section xml:id="tickmark-prop">
<db:title>tickmark : Component</db:title>
<db:para>Each tickmark displayed by the gauge.</db:para>
<db:para>To set the size of the tickmarks, specify an <db:link xlink:href="qml-qtquick-item.xml#implicitWidth-prop">implicitWidth</db:link> and <db:link xlink:href="qml-qtquick-item.xml#implicitHeight-prop">implicitHeight</db:link>.</db:para>
<db:para>The widest tickmark will determine the space set aside for all tickmarks. For this reason, the <db:code>implicitWidth</db:code> of each tickmark should be greater than or equal to that of each minor tickmark. If you need minor tickmarks to have greater widths than the major tickmarks, set the larger width in a child item of the <db:link xlink:href="qml-qtquick-controls-styles-gaugestyle.xml#minorTickmark-prop">minorTickmark</db:link> component.</db:para>
<db:para>For layouting reasons, each tickmark should have the same <db:code>implicitHeight</db:code>. If different heights are needed for individual tickmarks, specify those heights in a child item of the component.</db:para>
<db:para>In the example below, we decrease the height of the tickmarks:</db:para>
<db:programlisting language="cpp">tickmark: Item {
    implicitWidth: 18
    implicitHeight: 1

    Rectangle {
        color: &quot;#c8c8c8&quot;
        anchors.fill: parent
        anchors.leftMargin: 3
        anchors.rightMargin: 3
    }
}
</db:programlisting>
<db:mediaobject>
<db:alt>Gauge tickmark example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/gauge-tickmark-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Each instance of this component has access to the following properties:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:code>readonly property int</db:code> <db:emphasis role="bold">styleData.index</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>The index of this tickmark.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>readonly property real</db:code> <db:emphasis role="bold">styleData.value</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>The value that this tickmark represents.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>readonly property real</db:code> <db:emphasis role="bold">styleData.valuePosition</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>The value that this tickmark represents as a position in pixels, with 0 being at the bottom of the gauge.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-styles-gaugestyle.xml#minorTickmark-prop">minorTickmark</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tickmarkLabel-prop">
<db:title>tickmarkLabel : Component</db:title>
<db:para>This defines the text of each tickmark label on the gauge.</db:para>
<db:para>Each instance of this component has access to the following properties:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:code>readonly property int</db:code> <db:emphasis role="bold">styleData.index</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>The index of this label.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>readonly property real</db:code> <db:emphasis role="bold">styleData.value</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>The value that this label represents.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="valueBar-prop">
<db:title>valueBar : Component</db:title>
<db:para>The bar that represents the value of the gauge.</db:para>
<db:para>To height of the value bar is automatically resized according to <db:link xlink:href="qml-qtquick-extras-gauge.xml#value-prop">value</db:link>, and does not need to be specified.</db:para>
<db:para>When a custom valueBar is defined, its <db:link xlink:href="qml-qtquick-item.xml#implicitWidth-prop">implicitWidth</db:link> property must be set.</db:para>
</db:section>
<db:section xml:id="valuePosition-prop">
<db:title>[read-only] valuePosition : real</db:title>
<db:para>This property holds the value displayed by the gauge as a position in pixels.</db:para>
<db:para>It is useful for custom styling.</db:para>
</db:section>
</db:section>
</db:article>
