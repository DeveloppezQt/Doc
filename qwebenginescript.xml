<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEngineScript Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link> class encapsulates a JavaScript program.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEngineScript</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS WebEngineCore)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::WebEngineCore)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginecore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtwebengine-webenginescript.xml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link> enables the programmatic injection of so called <db:emphasis>user scripts</db:emphasis> in the JavaScript engine at different points, determined by <db:link xlink:href="qwebenginescript.xml#injectionPoint">injectionPoint</db:link>(), during the loading of web contents.</db:para>
<db:para>Scripts can be executed either in the main JavaScript <db:emphasis>world</db:emphasis>, along with the rest of the JavaScript coming from the web contents, or in their own isolated world. While the DOM of the page can be accessed from any world, JavaScript variables of a function defined in one world are not accessible from a different one. <db:link xlink:href="qwebenginescript.xml#ScriptWorldId-enum">ScriptWorldId</db:link> provides some predefined IDs for this purpose.</db:para>
<db:para>The following <db:link xlink:href="https://wiki.greasespot.net/Metadata_Block">Greasemonkey</db:link> attributes are supported since Qt 5.8: <db:code>@exclude</db:code>, <db:code>@include</db:code>, <db:code>@name</db:code>, <db:code>@match</db:code>, and <db:code>@run-at</db:code>.</db:para>
<db:para>Use <db:link xlink:href="qwebenginepage.xml#scripts">QWebEnginePage::scripts</db:link>() and <db:link xlink:href="qwebengineprofile.xml#scripts">QWebEngineProfile::scripts</db:link>() to access the collection of scripts associated with a single page or a number of pages sharing the same profile.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwebengine-overview.xml#script-injection">Script Injection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="InjectionPoint-enum">
<db:title>enum QWebEngineScript::InjectionPoint</db:title>
<db:enumsynopsis>
<db:enumname>InjectionPoint</db:enumname>
<db:enumitem>
<db:enumidentifier>Deferred</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DocumentReady</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DocumentCreation</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the timing of the script injection:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link></db:emphasis>::DocumentCreation</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The script will be executed as soon as the document is created. This is not suitable for any DOM operation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link></db:emphasis>::DocumentReady</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The script will run as soon as the DOM is ready. This is equivalent to the <db:code>DOMContentLoaded</db:code> event firing in JavaScript.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link></db:emphasis>::Deferred</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The script will run when the page load finishes, or 500ms after the document is ready, whichever comes first.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ScriptWorldId-enum">
<db:title>enum QWebEngineScript::ScriptWorldId</db:title>
<db:enumsynopsis>
<db:enumname>ScriptWorldId</db:enumname>
<db:enumitem>
<db:enumidentifier>MainWorld</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ApplicationWorld</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserWorld</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum provides pre-defined world IDs for isolating user scripts into different worlds:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link></db:emphasis>::MainWorld</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The world used by the page's web contents. It can be useful in order to expose custom functionality to web contents in certain scenarios.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link></db:emphasis>::ApplicationWorld</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The default isolated world used for application level functionality implemented in JavaScript.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link></db:emphasis>::UserWorld</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The first isolated world to be used by scripts set by users if the application is not making use of more worlds. As a rule of thumb, if that functionality is exposed to the application users, each individual script should probably get its own isolated world.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWebEngineScript">
<db:title>QWebEngineScript::QWebEngineScript()</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEngineScript</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineScript()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null script.</db:para>
</db:section>
<db:section xml:id="QWebEngineScript-1">
<db:title>QWebEngineScript::QWebEngineScript(const QWebEngineScript &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEngineScript</db:methodname>
<db:methodparam>
<db:type>const QWebEngineScript &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineScript(const QWebEngineScript &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a user script using the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QWebEngineScript">
<db:title>QWebEngineScript::~QWebEngineScript()</db:title>
<db:destructorsynopsis>
<db:methodname>~QWebEngineScript</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWebEngineScript()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a script.</db:para>
</db:section>
<db:section xml:id="injectionPoint">
<db:title>QWebEngineScript::InjectionPoint QWebEngineScript::injectionPoint() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineScript::InjectionPoint</db:type>
<db:methodname>injectionPoint</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">injectionPoint</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineScript::InjectionPoint injectionPoint() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the point in the loading process at which the script will be executed. The default value is <db:link xlink:href="qwebenginescript.xml#InjectionPoint-enum">QWebEngineScript::Deferred</db:link>.</db:para>
<db:note>
<db:para>Getter function for property injectionPoint. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescript.xml#setInjectionPoint">setInjectionPoint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QWebEngineScript::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">name</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the script. Can be useful to retrieve a particular script from a <db:link xlink:href="qwebenginescriptcollection.xml">QWebEngineScriptCollection</db:link>.</db:para>
<db:note>
<db:para>Getter function for property name. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescript.xml#setName">setName</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginescriptcollection.xml#find">QWebEngineScriptCollection::find</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="runsOnSubFrames">
<db:title>bool QWebEngineScript::runsOnSubFrames() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>runsOnSubFrames</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">runsOnSubFrames</db:synopsisinfo>
<db:synopsisinfo role="signature">bool runsOnSubFrames() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the script is executed on every frame in the page, or <db:code>false</db:code> if it is only ran for the main frame.</db:para>
<db:note>
<db:para>Getter function for property runsOnSubFrames. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescript.xml#setRunsOnSubFrames">setRunsOnSubFrames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setInjectionPoint">
<db:title>void QWebEngineScript::setInjectionPoint(QWebEngineScript::InjectionPoint <db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInjectionPoint</db:methodname>
<db:methodparam>
<db:type>QWebEngineScript::InjectionPoint</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">injectionPoint</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInjectionPoint(QWebEngineScript::InjectionPoint p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the point at which to execute the script to be <db:code role="parameter">p</db:code>.</db:para>
<db:note>
<db:para>Setter function for property injectionPoint. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescript.xml#injectionPoint">injectionPoint</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginescript.xml#InjectionPoint-enum">InjectionPoint</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setName">
<db:title>void QWebEngineScript::setName(const QString &amp;<db:emphasis>scriptName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>scriptName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">name</db:synopsisinfo>
<db:synopsisinfo role="signature">void setName(const QString &amp;scriptName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the script name to <db:code role="parameter">scriptName</db:code>.</db:para>
<db:note>
<db:para>Setter function for property name. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescript.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRunsOnSubFrames">
<db:title>void QWebEngineScript::setRunsOnSubFrames(bool <db:emphasis>on</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRunsOnSubFrames</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">runsOnSubFrames</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRunsOnSubFrames(bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Executes the script on sub frames in addition to the main frame if <db:code role="parameter">on</db:code> returns <db:code>true</db:code>.</db:para>
<db:note>
<db:para>Setter function for property runsOnSubFrames. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescript.xml#runsOnSubFrames">runsOnSubFrames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSourceCode">
<db:title>void QWebEngineScript::setSourceCode(const QString &amp;<db:emphasis>scriptSource</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSourceCode</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>scriptSource</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">sourceCode</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSourceCode(const QString &amp;scriptSource)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the script source to <db:code role="parameter">scriptSource</db:code>.</db:para>
<db:note>
<db:para>Setter function for property sourceCode. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescript.xml#sourceCode">sourceCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWorldId">
<db:title>void QWebEngineScript::setWorldId(quint32 <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWorldId</db:methodname>
<db:methodparam>
<db:type>quint32</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">worldId</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWorldId(quint32 id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the world ID of the isolated world to <db:code role="parameter">id</db:code> when running this script.</db:para>
<db:para>Must be between <db:code>0</db:code> and <db:code>256</db:code>.</db:para>
<db:note>
<db:para>Setter function for property worldId. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescript.xml#worldId">worldId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceCode">
<db:title>QString QWebEngineScript::sourceCode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>sourceCode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">sourceCode</db:synopsisinfo>
<db:synopsisinfo role="signature">QString sourceCode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the source of the script.</db:para>
<db:note>
<db:para>Getter function for property sourceCode. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescript.xml#setSourceCode">setSourceCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QWebEngineScript::swap(QWebEngineScript &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QWebEngineScript &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QWebEngineScript &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the contents of the script with the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="worldId">
<db:title>quint32 QWebEngineScript::worldId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint32</db:type>
<db:methodname>worldId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">worldId</db:synopsisinfo>
<db:synopsisinfo role="signature">quint32 worldId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the world ID defining which world the script is executed in.</db:para>
<db:note>
<db:para>Getter function for property worldId. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescript.xml#setWorldId">setWorldId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QWebEngineScript::operator!=(const QWebEngineScript &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QWebEngineScript &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QWebEngineScript &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the script is not equal to <db:code role="parameter">other</db:code>, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QWebEngineScript &amp;QWebEngineScript::operator=(const QWebEngineScript &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QWebEngineScript &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QWebEngineScript &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineScript &amp; operator=(const QWebEngineScript &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to the script.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QWebEngineScript::operator==(const QWebEngineScript &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QWebEngineScript &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QWebEngineScript &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the script is equal to <db:code role="parameter">other</db:code>, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
