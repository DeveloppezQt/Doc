<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Spin Box Delegate Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Spin Box Delegate example shows how to create an editor for a custom delegate in the model/view framework by reusing a standard Qt editor widget.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The model/view framework provides a standard delegate that is used by default with the standard view classes. For most purposes, the selection of editor widgets available through this delegate is sufficient for editing text, boolean values, and other simple data types. However, for specific data types, it is sometimes necessary to use a custom delegate to either display the data in a specific way, or allow the user to edit it with a custom control.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/spinboxdelegate-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This concepts behind this example are covered in the <db:link xlink:href="model-view-programming.xml#delegate-classes">Delegate Classes</db:link> chapter of the <db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link> overview.</db:para>
<db:section xml:id="spinboxdelegate-class-definition">
<db:title>SpinBoxDelegate Class Definition</db:title>
<db:para>The definition of the delegate is as follows:</db:para>
<db:programlisting language="cpp">class SpinBoxDelegate : public QStyledItemDelegate
{
    Q_OBJECT

public:
    SpinBoxDelegate(QObject *parent = 0);

    QWidget *createEditor(QWidget *parent, const QStyleOptionViewItem &amp;option,
                          const QModelIndex &amp;index) const;

    void setEditorData(QWidget *editor, const QModelIndex &amp;index) const;
    void setModelData(QWidget *editor, QAbstractItemModel *model,
                      const QModelIndex &amp;index) const;

    void updateEditorGeometry(QWidget *editor,
        const QStyleOptionViewItem &amp;option, const QModelIndex &amp;index) const;
};
</db:programlisting>
<db:para>The delegate class declares only those functions that are needed to create an editor widget, display it at the correct location in a view, and communicate with a model. Custom delegates can also provide their own painting code by reimplementing the <db:code>paintEvent()</db:code> function. Furthermore it is also possible to reuse (and avoid deleting) the editor widget by reimplementing the <db:code role="parameter">destroyEditor()</db:code> function. A reused widget could be a mutable member created in the constructor and deleted in the destructor.</db:para>
</db:section>
<db:section xml:id="spinboxdelegate-class-implementation">
<db:title>SpinBoxDelegate Class Implementation</db:title>
<db:para>Delegates are often stateless. The constructor only needs to call the base class's constructor with the parent <db:link xlink:href="qobject.xml">QObject</db:link> as its argument:</db:para>
<db:programlisting language="cpp">SpinBoxDelegate::SpinBoxDelegate(QObject *parent)
    : QStyledItemDelegate(parent)
{
}
</db:programlisting>
<db:para>Since the delegate is a subclass of <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link>, the data it retrieves from the model is displayed in a default style, and we do not need to provide a custom <db:code>paintEvent()</db:code>.</db:para>
<db:para>The <db:code>createEditor()</db:code> function returns an editor widget, in this case a spin box that restricts values from the model to integers from 0 to 100 inclusive.</db:para>
<db:programlisting language="cpp">QWidget *SpinBoxDelegate::createEditor(QWidget *parent,
    const QStyleOptionViewItem &amp;/* option */,
    const QModelIndex &amp;/* index */) const
{
    QSpinBox *editor = new QSpinBox(parent);
    editor-&gt;setFrame(false);
    editor-&gt;setMinimum(0);
    editor-&gt;setMaximum(100);

    return editor;
}
</db:programlisting>
<db:para>We install an event filter on the spin box to ensure that it behaves in a way that is consistent with other delegates. The implementation for the event filter is provided by the base class.</db:para>
<db:para>The <db:code>setEditorData()</db:code> function reads data from the model, converts it to an integer value, and writes it to the editor widget.</db:para>
<db:programlisting language="cpp">void SpinBoxDelegate::setEditorData(QWidget *editor,
                                    const QModelIndex &amp;index) const
{
    int value = index.model()-&gt;data(index, Qt::EditRole).toInt();

    QSpinBox *spinBox = static_cast&lt;QSpinBox*&gt;(editor);
    spinBox-&gt;setValue(value);
}
</db:programlisting>
<db:para>Since the view treats delegates as ordinary <db:link xlink:href="qwidget.xml">QWidget</db:link> instances, we have to use a static cast before we can set the value in the spin box.</db:para>
<db:para>The <db:code>setModelData()</db:code> function reads the contents of the spin box, and writes it to the model.</db:para>
<db:programlisting language="cpp">void SpinBoxDelegate::setModelData(QWidget *editor, QAbstractItemModel *model,
                                   const QModelIndex &amp;index) const
{
    QSpinBox *spinBox = static_cast&lt;QSpinBox*&gt;(editor);
    spinBox-&gt;interpretText();
    int value = spinBox-&gt;value();

    model-&gt;setData(index, value, Qt::EditRole);
}
</db:programlisting>
<db:para>We call <db:link xlink:href="qabstractspinbox.xml#interpretText">interpretText</db:link>() to make sure that we obtain the most up-to-date value in the spin box.</db:para>
<db:para>The <db:code>updateEditorGeometry()</db:code> function updates the editor widget's geometry using the information supplied in the style option. This is the minimum that the delegate must do in this case.</db:para>
<db:programlisting language="cpp">void SpinBoxDelegate::updateEditorGeometry(QWidget *editor,
    const QStyleOptionViewItem &amp;option, const QModelIndex &amp;/* index */) const
{
    editor-&gt;setGeometry(option.rect);
}
</db:programlisting>
<db:para>More complex editor widgets may divide the rectangle available in <db:code>option.rect</db:code> between different child widgets if required.</db:para>
</db:section>
<db:section xml:id="the-main-function">
<db:title>The Main Function</db:title>
<db:para>This example is written in a slightly different way to many of the other examples supplied with Qt. To demonstrate the use of a custom editor widget in a standard view, it is necessary to set up a model containing some arbitrary data and a view to display it.</db:para>
<db:para>We set up the application in the normal way, construct a standard item model to hold some data, set up a table view to use the data in the model, and construct a custom delegate to use for editing:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    QStandardItemModel model(4, 2);
    QTableView tableView;
    tableView.setModel(&amp;model);

    SpinBoxDelegate delegate;
    tableView.setItemDelegate(&amp;delegate);
</db:programlisting>
<db:para>The table view is informed about the delegate, and will use it to display each of the items. Since the delegate is a subclass of <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link>, each cell in the table will be rendered using standard painting operations.</db:para>
<db:para>We insert some arbitrary data into the model for demonstration purposes:</db:para>
<db:programlisting language="cpp">    for (int row = 0; row &lt; 4; ++row) {
        for (int column = 0; column &lt; 2; ++column) {
            QModelIndex index = model.index(row, column, QModelIndex());
            model.setData(index, QVariant((row + 1) * (column + 1)));
        }
    }
</db:programlisting>
<db:para>Finally, the table view is displayed with a window title, and we start the application's event loop:</db:para>
<db:programlisting language="cpp">    tableView.setWindowTitle(QObject::tr(&quot;Spin Box Delegate&quot;));
    tableView.show();
    return app.exec();
}
</db:programlisting>
<db:para>Each of the cells in the table can now be edited in the usual way, but the spin box ensures that the data returned to the model is always constrained by the values allowed by the spin box delegate.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="itemviews/spinboxdelegate/delegate.cpp">itemviews/spinboxdelegate/delegate.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/spinboxdelegate/delegate.h">itemviews/spinboxdelegate/delegate.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/spinboxdelegate/main.cpp">itemviews/spinboxdelegate/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/spinboxdelegate/spinboxdelegate.pro">itemviews/spinboxdelegate/spinboxdelegate.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
