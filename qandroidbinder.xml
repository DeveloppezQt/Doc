<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAndroidBinder Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Wraps the most important methods of Android Binder class.</db:para>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:para>This class was introduced in Qt 6.2.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtCore/private/qandroidextras_p.h</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core-private</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qandroidbinder.xml">QAndroidBinder</db:link> is a convenience class that wraps the most important <db:link xlink:href="https://developer.android.com/reference/android/os/Binder.html">Android Binder</db:link> methods.</db:para>
<db:para>When building with CMake, use the following commands to use private Qt Core APIs:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
target_link_libraries(mytarget PRIVATE Qt6::CorePrivate)
</db:programlisting>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CallType-enum">
<db:title>enum QAndroidBinder::CallType</db:title>
<db:enumsynopsis>
<db:enumname>CallType</db:enumname>
<db:enumitem>
<db:enumidentifier>Normal</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OneWay</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is used with <db:link xlink:href="qandroidbinder.xml#transact">QAndroidBinder::transact</db:link>() to describe the mode in which the IPC call is performed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qandroidbinder.xml">QAndroidBinder</db:link></db:emphasis>::<db:emphasis role="bold">CallType</db:emphasis>::Normal</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>normal IPC, meaning that the caller waits the result from the callee</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qandroidbinder.xml">QAndroidBinder</db:link></db:emphasis>::<db:emphasis role="bold">CallType</db:emphasis>::OneWay</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>one-way IPC, meaning that the caller returns immediately, without waiting for a result from the callee</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAndroidBinder">
<db:title>[explicit] QAndroidBinder::QAndroidBinder()</db:title>
<db:constructorsynopsis>
<db:methodname>QAndroidBinder</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidBinder()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new object which can be used to perform IPC.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qandroidbinder.xml#onTransact">onTransact</db:link></db:member>
<db:member><db:link xlink:href="qandroidbinder.xml#transact">transact</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QAndroidBinder-1">
<db:title>QAndroidBinder::QAndroidBinder(const int &amp;<db:emphasis>binder</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAndroidBinder</db:methodname>
<db:methodparam>
<db:type>const int &amp;</db:type>
<db:parameter>binder</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAndroidBinder(const int &amp;binder)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new object from the <db:code role="parameter">binder</db:code> Java object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qandroidbinder.xml#transact">transact</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="handle">
<db:title>int QAndroidBinder::handle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>handle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int handle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The return value is useful to call other Java API which are not covered by this wrapper</db:para>
</db:section>
<db:section xml:id="onTransact">
<db:title>[virtual] bool QAndroidBinder::onTransact(int <db:emphasis>code</db:emphasis>, const QAndroidParcel &amp;<db:emphasis>data</db:emphasis>, const QAndroidParcel &amp;<db:emphasis>reply</db:emphasis>, QAndroidBinder::CallType <db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>onTransact</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>code</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAndroidParcel &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAndroidParcel &amp;</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAndroidBinder::CallType</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool onTransact(int code, const QAndroidParcel &amp;data, const QAndroidParcel &amp;reply, QAndroidBinder::CallType flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Default implementation is a stub that returns false. The user should override this method to get the transact data from the caller.</db:para>
<db:para>The <db:code role="parameter">code</db:code> is the action to perform. The <db:code role="parameter">data</db:code> is the marshaled data sent by the caller. The <db:code role="parameter">reply</db:code> is the marshaled data to be sent to the caller. The <db:code role="parameter">flags</db:code> are the additional operation flags.</db:para>
<db:warning>
<db:para>This method is called from Binder's thread which is different from the thread that this object was created.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qandroidbinder.xml#transact">transact</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transact">
<db:title>bool QAndroidBinder::transact(int <db:emphasis>code</db:emphasis>, const QAndroidParcel &amp;<db:emphasis>data</db:emphasis>, QAndroidParcel *<db:emphasis>reply</db:emphasis> = nullptr, QAndroidBinder::CallType <db:emphasis>flags</db:emphasis> = CallType::Normal) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>transact</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>code</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAndroidParcel &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAndroidParcel *</db:type>
<db:parameter>reply</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QAndroidBinder::CallType</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>CallType::Normal</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool transact(int code, const QAndroidParcel &amp;data, QAndroidParcel *reply, QAndroidBinder::CallType flags) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs an IPC call</db:para>
<db:para>The <db:code role="parameter">code</db:code> is the action to perform. Should be between <db:link xlink:href="https://developer.android.com/reference/android/os/IBinder.html#FIRST_CALL_TRANSACTION">FIRST_CALL_TRANSACTION</db:link> and <db:link xlink:href="https://developer.android.com/reference/android/os/IBinder.html#LAST_CALL_TRANSACTION">LAST_CALL_TRANSACTION</db:link>. The <db:code role="parameter">data</db:code> is the marshaled data to send to the target. The <db:code role="parameter">reply</db:code> (if specified) is the marshaled data to be received from the target. May be <db:emphasis role="bold">nullptr</db:emphasis> if you are not interested in the return value. The <db:code role="parameter">flags</db:code> are the additional operation flags.</db:para>
<db:para>Returns true on success</db:para>
</db:section>
</db:section>
</db:article>
