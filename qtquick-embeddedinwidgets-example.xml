<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Embedded in Widgets</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates embedding a <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> into a <db:link xlink:href="qwidget.xml">QWidget</db:link> UI via <db:link xlink:href="qwidget.xml#createWindowContainer">QWidget::createWindowContainer</db:link>().</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-embeddedinwidgets-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates one of the approaches to adding Qt Quick content into a <db:link xlink:href="qwidget.xml">QWidget</db:link>-based application. <db:link xlink:href="qquickview.xml">QQuickView</db:link>, and its parent class, <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> derive from <db:link xlink:href="qwindow.xml">QWindow</db:link>. This means that they can be used with <db:link xlink:href="qwidget.xml#createWindowContainer">QWidget::createWindowContainer</db:link>(), like any other <db:link xlink:href="qwindow.xml">QWindow</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Qt Creator: Tutorial: Build and run</db:link>.</db:para>
<db:para>Embedding the window internally leads to creating a native child widget inside the widget hierarchy, and the window (the <db:link xlink:href="qquickview.xml">QQuickView</db:link> in the example) is reparented. The container widget takes care of repositioning the child window so that it appears to be part of the user interface, even though in reality it is separate native window that paints independently from its parent, the <db:link xlink:href="qwidget.xml">QWidget</db:link>-based top-level window.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow()
    : m_quickView(new QQuickView)
{
    QWidget *centralWidget = new QWidget(this);
    QVBoxLayout *layout = new QVBoxLayout(centralWidget);

    m_quickView-&gt;setResizeMode(QQuickView::SizeRootObjectToView);
    connect(m_quickView, &amp;QQuickView::statusChanged,
            this, &amp;MainWindow::quickViewStatusChanged);
    connect(m_quickView, &amp;QQuickWindow::sceneGraphError,
            this, &amp;MainWindow::sceneGraphError);
    m_quickView-&gt;loadFromModule(&quot;embeddedinwidgets&quot;, &quot;Main&quot;);

    QWidget *container = QWidget::createWindowContainer(m_quickView);
    container-&gt;setMinimumSize(m_quickView-&gt;size());
    container-&gt;setFocusPolicy(Qt::TabFocus);

    layout-&gt;addWidget(new QLineEdit(QStringLiteral(&quot;A QLineEdit&quot;)));
    layout-&gt;addWidget(container);
    layout-&gt;addWidget(new QLineEdit(QStringLiteral(&quot;A QLineEdit&quot;)));
    setCentralWidget(centralWidget);

    QMenu *fileMenu = menuBar()-&gt;addMenu(tr(&quot;File&quot;));
    fileMenu-&gt;addAction(tr(&quot;Quit&quot;), qApp, &amp;QCoreApplication::quit);
}
</db:programlisting>
<db:para>The key step during initialization is the creation of <db:code>container</db:code>, a <db:link xlink:href="qwidget.xml">QWidget</db:link> that wraps and hosts the <db:link xlink:href="qquickview.xml">QQuickView</db:link>. This widget can then added to a layout like any other <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
<db:note>
<db:para>Using native window embedding is just one possible approach to combining <db:link xlink:href="qwidget.xml">QWidget</db:link> and Qt Quick user interfaces. The other, more commonly used approach for this is <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>. See the <db:link xlink:href="qtquick-quickwidgets-quickwidget-example.xml">Qt Quick Widgets Example</db:link> for an example of using <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>. There are significant differences internally when it comes to rendering and event handling. <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> does not use native windows at all and redirects the Qt Quick rendering into a texture that is then composited with the rest of the <db:link xlink:href="qwidget.xml">QWidget</db:link> content via a 3D graphics API such as OpenGL or Vulkan. This brings more flexibility, at the expense of performance. It also works on platforms where there is no actual windowing system and no concept of native windows. Whereas the window embedding approach demonstrated by this example can be more performant, but it is best suited for user interfaces where the Qt Quick content occupies a fixed rectangular area and is not resized, stacked, or clipped afterwards.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/embeddedinwidgets?h=6.9">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#createWindowContainer">QWidget::createWindowContainer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
