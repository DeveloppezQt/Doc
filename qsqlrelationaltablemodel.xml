<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSqlRelationalTableModel Class</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link> class provides an editable data model for a single database table, with foreign key support.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSqlRelationalTableModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Sql)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Sql)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sql</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsqltablemodel.xml" xlink:role="class">QSqlTableModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSqlRelationalTableModel is part of <db:simplelist><db:member><db:link xlink:href="database.xml">Database Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link> acts like <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link>, but allows columns to be set as foreign keys into other database tables.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/noforeignkeys.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/foreignkeys.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The screenshot on the left shows a plain <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> in a <db:link xlink:href="qtableview.xml">QTableView</db:link>. Foreign keys (<db:code>city</db:code> and <db:code>country</db:code>) aren't resolved to human-readable values. The screenshot on the right shows a <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link>, with foreign keys resolved into human-readable text strings.</db:para>
<db:para>The following code snippet shows how the <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link> was set up:</db:para>
<db:programlisting language="cpp">    model-&amp;gt;setTable(&quot;employee&quot;);

    model-&amp;gt;setRelation(2, QSqlRelation(&quot;city&quot;, &quot;id&quot;, &quot;name&quot;));
    model-&amp;gt;setRelation(3, QSqlRelation(&quot;country&quot;, &quot;id&quot;, &quot;name&quot;));
</db:programlisting>
<db:para>The <db:link xlink:href="qsqlrelationaltablemodel.xml#setRelation">setRelation</db:link>() function calls establish a relationship between two tables. The first call specifies that column 2 in table <db:code>employee</db:code> is a foreign key that maps with field <db:code>id</db:code> of table <db:code>city</db:code>, and that the view should present the <db:code>city</db:code>'s <db:code>name</db:code> field to the user. The second call does something similar with column 3.</db:para>
<db:para>If you use a read-write <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link>, you probably want to use <db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link> on the view. Unlike the default delegate, <db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link> provides a combobox for fields that are foreign keys into other tables. To use the class, simply call <db:link xlink:href="qabstractitemview.xml#setItemDelegate">QAbstractItemView::setItemDelegate</db:link>() on the view with an instance of <db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link>:</db:para>
<db:programlisting language="cpp">    std::unique_ptr&amp;lt;QTableView&amp;gt; view{new QTableView};
    view-&amp;gt;setModel(model);
    view-&amp;gt;setItemDelegate(new QSqlRelationalDelegate(view.get()));
</db:programlisting>
<db:para>The <db:link xlink:href="qtsql-relationaltablemodel-example.xml">relationaltablemodel</db:link> example illustrates how to use <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link> in conjunction with <db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link> to provide tables with foreign key support.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/relationaltable.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Notes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The table must have a primary key declared.</db:para>
</db:listitem>
<db:listitem>
<db:para>The table's primary key may not contain a relation to another table.</db:para>
</db:listitem>
<db:listitem>
<db:para>If a relational table contains keys that refer to non-existent rows in the referenced table, the rows containing the invalid keys will not be exposed through the model. The user or the database is responsible for keeping referential integrity.</db:para>
</db:listitem>
<db:listitem>
<db:para>If a relation's display column name is also used as a column name in the relational table, or if it is used as display column name in more than one relation it will be aliased. The alias is the relation's table name, display column name and a unique id joined by an underscore (e.g. tablename_columnname_id). <db:link xlink:href="qsqlrecord.xml#fieldName">QSqlRecord::fieldName</db:link>() will return the aliased column name. All occurrences of the duplicate display column name are aliased when duplication is detected, but no aliasing is done to the column names in the main table. The aliasing doesn't affect <db:link xlink:href="qsqlrelation.xml">QSqlRelation</db:link>, so <db:link xlink:href="qsqlrelation.xml#displayColumn">QSqlRelation::displayColumn</db:link>() will return the original display column name.</db:para>
</db:listitem>
<db:listitem>
<db:para>The reference table name is aliased. The alias is the word &quot;relTblAl&quot; and the relationed column index joined by an underscore (e.g. relTblAl_2). The alias can be used to filter the table (For example, setFilter(&quot;relTblAl_2='Oslo' OR relTblAl_3='USA'&quot;)).</db:para>
</db:listitem>
<db:listitem>
<db:para>When using <db:link xlink:href="qsqlrelationaltablemodel.xml#setData">setData</db:link>() the role should always be <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link>, and when using <db:link xlink:href="qsqlrelationaltablemodel.xml#data">data</db:link>() the role should always be <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrelation.xml">QSqlRelation</db:link></db:member>
<db:member><db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link></db:member>
<db:member><db:link xlink:href="qtsql-relationaltablemodel-example.xml">Relational Table Model Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="JoinMode-enum">
<db:title>enum QSqlRelationalTableModel::JoinMode</db:title>
<db:enumsynopsis>
<db:enumname>JoinMode</db:enumname>
<db:enumitem>
<db:enumidentifier>InnerJoin</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LeftJoin</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link></db:emphasis>::InnerJoin</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>- Inner join mode, return rows when there is at least one match in both tables.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link></db:emphasis>::LeftJoin</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>- Left join mode, returns all rows from the left table (table_name1), even if there are no matches in the right table (table_name2).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrelationaltablemodel.xml#setJoinMode">QSqlRelationalTableModel::setJoinMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSqlRelationalTableModel">
<db:title>[explicit] QSqlRelationalTableModel::QSqlRelationalTableModel(QObject *<db:emphasis>parent</db:emphasis> = nullptr, const QSqlDatabase &amp;<db:emphasis>db</db:emphasis> = QSqlDatabase())</db:title>
<db:constructorsynopsis>
<db:methodname>QSqlRelationalTableModel</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QSqlDatabase &amp;</db:type>
<db:parameter>db</db:parameter>
<db:initializer>QSqlDatabase()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlRelationalTableModel(QObject *parent, const QSqlDatabase &amp;db)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an empty <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link> and sets the parent to <db:code role="parameter">parent</db:code> and the database connection to <db:code role="parameter">db</db:code>. If <db:code role="parameter">db</db:code> is not valid, the default database connection will be used.</db:para>
</db:section>
<db:section xml:id="dtor.QSqlRelationalTableModel">
<db:title>[virtual] QSqlRelationalTableModel::~QSqlRelationalTableModel()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSqlRelationalTableModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSqlRelationalTableModel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the object and frees any allocated resources.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>[override virtual] void QSqlRelationalTableModel::clear()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsqltablemodel.xml#clear" role="function">QSqlTableModel::clear()</db:link>.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[override virtual] QVariant QSqlRelationalTableModel::data(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>data</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::DisplayRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant data(const QModelIndex &amp;index, int role) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsqltablemodel.xml#data" role="function">QSqlTableModel::data(const QModelIndex &amp;index, int role) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrelationaltablemodel.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertRowIntoTable">
<db:title>[override virtual protected] bool QSqlRelationalTableModel::insertRowIntoTable(const QSqlRecord &amp;<db:emphasis>values</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>insertRowIntoTable</db:methodname>
<db:methodparam>
<db:type>const QSqlRecord &amp;</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertRowIntoTable(const QSqlRecord &amp;values) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsqltablemodel.xml#insertRowIntoTable" role="function">QSqlTableModel::insertRowIntoTable(const QSqlRecord &amp;values)</db:link>.</db:para>
</db:section>
<db:section xml:id="orderByClause">
<db:title>[override virtual protected] QString QSqlRelationalTableModel::orderByClause() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>orderByClause</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString orderByClause() const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsqltablemodel.xml#orderByClause" role="function">QSqlTableModel::orderByClause() const</db:link>.</db:para>
</db:section>
<db:section xml:id="relation">
<db:title>QSqlRelation QSqlRelationalTableModel::relation(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSqlRelation</db:type>
<db:methodname>relation</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlRelation relation(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the relation for the column <db:code role="parameter">column</db:code>, or an invalid relation if no relation is set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrelationaltablemodel.xml#setRelation">setRelation</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrelation.xml#isValid">QSqlRelation::isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="relationModel">
<db:title>[virtual] QSqlTableModel *QSqlRelationalTableModel::relationModel(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSqlTableModel *</db:type>
<db:methodname>relationModel</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlTableModel * relationModel(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> object for accessing the table for which <db:code role="parameter">column</db:code> is a foreign key, or <db:code>nullptr</db:code> if there is no relation for the given <db:code role="parameter">column</db:code>.</db:para>
<db:para>The returned object is owned by the <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrelationaltablemodel.xml#setRelation">setRelation</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrelationaltablemodel.xml#relation">relation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeColumns">
<db:title>[override virtual] bool QSqlRelationalTableModel::removeColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>removeColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeColumns(int column, int count, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsqltablemodel.xml#removeColumns" role="function">QSqlTableModel::removeColumns(int column, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="revertRow">
<db:title>[override virtual] void QSqlRelationalTableModel::revertRow(int <db:emphasis>row</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>revertRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void revertRow(int row) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsqltablemodel.xml#revertRow" role="function">QSqlTableModel::revertRow(int row)</db:link>.</db:para>
</db:section>
<db:section xml:id="select">
<db:title>[override virtual] bool QSqlRelationalTableModel::select()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>select</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool select() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsqltablemodel.xml#select" role="function">QSqlTableModel::select()</db:link>.</db:para>
</db:section>
<db:section xml:id="selectStatement">
<db:title>[override virtual protected] QString QSqlRelationalTableModel::selectStatement() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>selectStatement</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString selectStatement() const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsqltablemodel.xml#selectStatement" role="function">QSqlTableModel::selectStatement() const</db:link>.</db:para>
</db:section>
<db:section xml:id="setData">
<db:title>[override virtual] bool QSqlRelationalTableModel::setData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::EditRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setData(const QModelIndex &amp;index, const QVariant &amp;value, int role) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsqltablemodel.xml#setData" role="function">QSqlTableModel::setData(const QModelIndex &amp;index, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:para>Sets the data for the <db:code role="parameter">role</db:code> in the item with the specified <db:code role="parameter">index</db:code> to the <db:code role="parameter">value</db:code> given. Depending on the edit strategy, the value might be applied to the database at once, or it may be cached in the model.</db:para>
<db:para>Returns <db:code>true</db:code> if the value could be set, or false on error (for example, if <db:code role="parameter">index</db:code> is out of bounds).</db:para>
<db:para>For relational columns, <db:code role="parameter">value</db:code> must be the index, not the display value. The index must also exist in the referenced table, otherwise the function returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqltablemodel.xml#editStrategy">editStrategy</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrelationaltablemodel.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qsqltablemodel.xml#submit">submit</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrelationaltablemodel.xml#revertRow">revertRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setJoinMode">
<db:title>void QSqlRelationalTableModel::setJoinMode(QSqlRelationalTableModel::JoinMode <db:emphasis>joinMode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setJoinMode</db:methodname>
<db:methodparam>
<db:type>QSqlRelationalTableModel::JoinMode</db:type>
<db:parameter>joinMode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setJoinMode(QSqlRelationalTableModel::JoinMode joinMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the SQL <db:code role="parameter">joinMode</db:code> to show or hide rows with NULL foreign keys. In <db:link xlink:href="qsqlrelationaltablemodel.xml#JoinMode-enum">InnerJoin</db:link> mode (the default) these rows will not be shown: use the <db:link xlink:href="qsqlrelationaltablemodel.xml#JoinMode-enum">LeftJoin</db:link> mode if you want to show them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrelationaltablemodel.xml#JoinMode-enum">QSqlRelationalTableModel::JoinMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRelation">
<db:title>[virtual] void QSqlRelationalTableModel::setRelation(int <db:emphasis>column</db:emphasis>, const QSqlRelation &amp;<db:emphasis>relation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setRelation</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSqlRelation &amp;</db:type>
<db:parameter>relation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRelation(int column, const QSqlRelation &amp;relation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Lets the specified <db:code role="parameter">column</db:code> be a foreign index specified by <db:code role="parameter">relation</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    model-&amp;gt;setTable(&quot;employee&quot;);

    model-&amp;gt;setRelation(2, QSqlRelation(&quot;city&quot;, &quot;id&quot;, &quot;name&quot;));
</db:programlisting>
<db:para>The setRelation() call specifies that column 2 in table <db:code>employee</db:code> is a foreign key that maps with field <db:code>id</db:code> of table <db:code>city</db:code>, and that the view should present the <db:code>city</db:code>'s <db:code>name</db:code> field to the user.</db:para>
<db:para>Note: The table's primary key may not contain a relation to another table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrelationaltablemodel.xml#relation">relation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTable">
<db:title>[override virtual] void QSqlRelationalTableModel::setTable(const QString &amp;<db:emphasis>table</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setTable</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>table</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTable(const QString &amp;table) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsqltablemodel.xml#setTable" role="function">QSqlTableModel::setTable(const QString &amp;tableName)</db:link>.</db:para>
</db:section>
<db:section xml:id="updateRowInTable">
<db:title>[override virtual protected] bool QSqlRelationalTableModel::updateRowInTable(int <db:emphasis>row</db:emphasis>, const QSqlRecord &amp;<db:emphasis>values</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>updateRowInTable</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSqlRecord &amp;</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool updateRowInTable(int row, const QSqlRecord &amp;values) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsqltablemodel.xml#updateRowInTable" role="function">QSqlTableModel::updateRowInTable(int row, const QSqlRecord &amp;values)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
