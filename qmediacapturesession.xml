<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaCaptureSession Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link> class allows capturing of audio and video content.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaCaptureSession</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Multimedia)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Multimedia)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtmultimedia-capturesession.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaCaptureSession is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_video</db:member><db:member>multimedia_audio</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link> is the central class that manages capturing of media on the local device.</db:para>
<db:para>You can connect a camera and a microphone to <db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link> using <db:link xlink:href="qmediacapturesession.xml#camera-prop">setCamera</db:link>() and <db:link xlink:href="qmediacapturesession.xml#setAudioInput">setAudioInput</db:link>(). A preview of the captured media can be seen by setting a <db:link xlink:href="qvideosink.xml">QVideoSink</db:link> of <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> using <db:link xlink:href="qmediacapturesession.xml#setVideoOutput">setVideoOutput</db:link>() and heard by routing the audio to an output device using <db:link xlink:href="qmediacapturesession.xml#setAudioOutput">setAudioOutput</db:link>().</db:para>
<db:para>You can capture still images from a camera by setting a <db:link xlink:href="qimagecapture.xml">QImageCapture</db:link> object on the capture session, and record audio/video using a <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml">QCamera</db:link></db:member>
<db:member><db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link></db:member>
<db:member><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:member>
<db:member><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:member>
<db:member><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="camera-prop">
<db:title>camera : QCamera*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QCamera*</db:type>
<db:varname>camera</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">camera</db:synopsisinfo>
<db:synopsisinfo role="setter">setCamera</db:synopsisinfo>
<db:synopsisinfo role="notifier">cameraChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the camera used to capture video.</db:para>
<db:para>Record video or take images by adding a camera to the capture session using this property,</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamera.xml">QCamera</db:link></db:type> *<db:emphasis role="bold">camera</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCamera</db:emphasis>(<db:type><db:link xlink:href="qcamera.xml">QCamera</db:link></db:type> *<db:emphasis>camera</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">cameraChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="imageCapture-prop">
<db:title>imageCapture : QImageCapture*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QImageCapture*</db:type>
<db:varname>imageCapture</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">imageCapture</db:synopsisinfo>
<db:synopsisinfo role="setter">setImageCapture</db:synopsisinfo>
<db:synopsisinfo role="notifier">imageCaptureChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the object used to capture still images.</db:para>
<db:para>Add a <db:link xlink:href="qimagecapture.xml">QImageCapture</db:link> object to the capture session to enable capturing of still images from the camera.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:type> *<db:emphasis role="bold">imageCapture</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setImageCapture</db:emphasis>(<db:type><db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:type> *<db:emphasis>imageCapture</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">imageCaptureChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="recorder-prop">
<db:title>recorder : QMediaRecorder*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaRecorder*</db:type>
<db:varname>recorder</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">recorder</db:synopsisinfo>
<db:synopsisinfo role="setter">setRecorder</db:synopsisinfo>
<db:synopsisinfo role="notifier">recorderChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the recorder object used to capture audio/video.</db:para>
<db:para>Add a <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> object to the capture session to enable recording of audio and/or video from the capture session.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:type> *<db:emphasis role="bold">recorder</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRecorder</db:emphasis>(<db:type><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:type> *<db:emphasis>recorder</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">recorderChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaCaptureSession">
<db:title>[explicit] QMediaCaptureSession::QMediaCaptureSession(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaCaptureSession</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaCaptureSession(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a session for media capture from the <db:code role="parameter">parent</db:code> object.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaCaptureSession">
<db:title>[virtual] QMediaCaptureSession::~QMediaCaptureSession()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QMediaCaptureSession</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMediaCaptureSession()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the session.</db:para>
</db:section>
<db:section xml:id="audioInput">
<db:title>QAudioInput *QMediaCaptureSession::audioInput() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAudioInput *</db:type>
<db:methodname>audioInput</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioInput</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioInput * audioInput() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device that is being used to capture audio.</db:para>
<db:note>
<db:para>Getter function for property audioInput. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediacapturesession.xml#setAudioInput">setAudioInput</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAudioInput">
<db:title>void QMediaCaptureSession::setAudioInput(QAudioInput *<db:emphasis>input</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAudioInput</db:methodname>
<db:methodparam>
<db:type>QAudioInput *</db:type>
<db:parameter>input</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioInput</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAudioInput(QAudioInput *input)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the audio input device to <db:code role="parameter">input</db:code>. If setting it to an empty <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> the capture session will use the default input as defined by the operating system.</db:para>
<db:note>
<db:para>Setter function for property audioInput. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediacapturesession.xml#audioInput">audioInput</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAudioOutput">
<db:title>void QMediaCaptureSession::setAudioOutput(QAudioOutput *<db:emphasis>output</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAudioOutput</db:methodname>
<db:methodparam>
<db:type>QAudioOutput *</db:type>
<db:parameter>output</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioOutput</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAudioOutput(QAudioOutput *output)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the audio output device to <db:code role="parameter">output</db:code>.</db:para>
<db:note>
<db:para>Setter function for property audioOutput. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediacapturesession.xml#audioOutput-prop">audioOutput</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVideoOutput">
<db:title>void QMediaCaptureSession::setVideoOutput(QObject *<db:emphasis>output</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVideoOutput</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>output</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoOutput</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVideoOutput(QObject *output)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a <db:link xlink:href="qobject.xml">QObject</db:link>, (<db:code role="parameter">output</db:code>), to a video preview for the capture session.</db:para>
<db:para>A <db:link xlink:href="qobject.xml">QObject</db:link> based preview is expected to have an invokable videoSink() method that returns a <db:link xlink:href="qvideosink.xml">QVideoSink</db:link>.</db:para>
<db:para>The previously set preview is detached.</db:para>
<db:note>
<db:para>Setter function for property videoOutput. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediacapturesession.xml#videoOutput-prop">videoOutput</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVideoSink">
<db:title>void QMediaCaptureSession::setVideoSink(QVideoSink *<db:emphasis>sink</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVideoSink</db:methodname>
<db:methodparam>
<db:type>QVideoSink *</db:type>
<db:parameter>sink</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVideoSink(QVideoSink *sink)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a <db:link xlink:href="qvideosink.xml">QVideoSink</db:link>, (<db:code role="parameter">sink</db:code>), to a video preview for the capture session.</db:para>
<db:para>A <db:link xlink:href="qobject.xml">QObject</db:link> based preview is expected to have an invokable videoSink() method that returns a <db:link xlink:href="qvideosink.xml">QVideoSink</db:link>.</db:para>
<db:para>The previously set preview is detached.</db:para>
</db:section>
</db:section>
</db:article>
