<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Debugging QML Applications</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>debugging tools in QML.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="console-api">
<db:title>Console API</db:title>
<db:section xml:id="log">
<db:title>Log</db:title>
<db:para>console.log, console.debug, console.info, console.warn and console.error can be used to print debugging information to the console. For example:</db:para>
<db:programlisting language="cpp">function f(a, b) {
  console.log(&quot;a is &quot;, a, &quot;b is &quot;, b);
}
</db:programlisting>
<db:para>The output is generated using the <db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>, <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>, <db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link> methods in C++ (see also <db:link xlink:href="debug.xml">Debugging Techniques</db:link>).</db:para>
</db:section>
<db:section xml:id="assert">
<db:title>Assert</db:title>
<db:para>console.assert tests that an expression is true. If not, it will write an optional message to the console and print the stack trace.</db:para>
<db:programlisting language="cpp">function f() {
  var x = 12
  console.assert(x == 12, &quot;This will pass&quot;);
  console.assert(x &gt; 12, &quot;This will fail&quot;);
}
</db:programlisting>
</db:section>
<db:section xml:id="timer">
<db:title>Timer</db:title>
<db:para>console.time and console.timeEnd log the time (in milliseconds) that was spent between the calls. Both take a string argument that identifies the measurement. For example:</db:para>
<db:programlisting language="cpp">function f() {
    console.time(&quot;wholeFunction&quot;);
    console.time(&quot;firstPart&quot;);
    // first part
    console.timeEnd(&quot;firstPart&quot;);
    // second part
    console.timeEnd(&quot;wholeFunction&quot;);
}
</db:programlisting>
</db:section>
<db:section xml:id="trace">
<db:title>Trace</db:title>
<db:para>console.trace prints the stack trace of the JavaScript execution at the point where it was called. The stack trace info contains the function name, file name, line number and column number. The stack trace is limited to last 10 stack frames.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>Count</db:title>
<db:para>console.count prints the current number of times a particular piece of code has been executed, along with a message. That is,</db:para>
<db:programlisting language="cpp">function f() {
  console.count(&quot;f called&quot;);
}
</db:programlisting>
<db:para>will print f called: 1, f called: 2 ... whenever f() is executed.</db:para>
</db:section>
<db:section xml:id="profile">
<db:title>Profile</db:title>
<db:para>console.profile turns on the QML and JavaScript profilers. Nested calls are not supported and a warning will be printed to the console.</db:para>
<db:para>console.profileEnd turns off the QML and JavaScript profilers. Calling this function without a previous call to console.profile will print a warning to the console. A profiling client should have been attached before this call to receive and store the profiling data. For example:</db:para>
<db:programlisting language="cpp">function f() {
    console.profile();
    //Call some function that needs to be profiled.
    //Ensure that a client is attached before ending
    //the profiling session.
    console.profileEnd();
}
</db:programlisting>
</db:section>
<db:section xml:id="exception">
<db:title>Exception</db:title>
<db:para>console.exception prints an error message together with the stack trace of JavaScript execution at the point where it is called.</db:para>
</db:section>
</db:section>
<db:section xml:id="debugging-module-imports">
<db:title>Debugging Module Imports</db:title>
<db:para>The QML_IMPORT_TRACE environment variable can be set to enable debug output from QML's import loading mechanisms.</db:para>
<db:para>For example, for a simple QML file like this:</db:para>
<db:programlisting language="qml">import QtQuick 2.3

Rectangle { width: 100; height: 100 }
</db:programlisting>
<db:para>If you set QML_IMPORT_TRACE=1 before running the <db:link xlink:href="qtquick-qmlscene.xml">QML Scene</db:link> (or your QML C++ application), you will see output similar to this:</db:para>
<db:programlisting language="cpp">QQmlImportDatabase::addImportPath &quot;/qt-sdk/imports&quot;
QQmlImportDatabase::addImportPath &quot;/qt-sdk/bin/QMLViewer.app/Contents/MacOS&quot;
QQmlImportDatabase::addToImport 0x106237370 &quot;.&quot; -1.-1 File as &quot;&quot;
QQmlImportDatabase::addToImport 0x106237370 &quot;Qt&quot; 4.7 Library as &quot;&quot;
QQmlImportDatabase::resolveType &quot;Rectangle&quot; = &quot;QDeclarativeRectangle&quot;
</db:programlisting>
</db:section>
<db:section xml:id="qml-debugging-infrastructure">
<db:title>QML Debugging Infrastructure</db:title>
<db:para>The <db:link xlink:href="qtqml-index.xml">Qt QML</db:link> module provides services for debugging, inspecting, and profiling applications via a TCP port.</db:para>
<db:section xml:id="enabling-the-infrastructure">
<db:title>Enabling the Infrastructure</db:title>
<db:para>You have to explicitly enable the debugging infrastructure when compiling your application. If you use qmake, you can add the configuration parameters to the project .pro file:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt Quick 1: CONFIG+=declarative_debug</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt Quick 2: CONFIG+=qml_debug</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you use some other build system, you can pass the following defines to the compiler:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt Quick 1: QT_DECLARATIVE_DEBUG</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt Quick 2: QT_QML_DEBUG</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Enabling the debugging infrastructure might compromise the integrity of the application and system, and therefore, you should only enable it in a controlled environment. When the infrastructure is enabled, the application displays the following warning:</db:para>
</db:note>
<db:para>QML debugging is enabled. Only use this in a safe environment.</db:para>
</db:section>
<db:section xml:id="starting-applications">
<db:title>Starting Applications</db:title>
<db:para>Start the application with the following arguments:</db:para>
<db:para>-qmljsdebugger=port:&lt;port_from&gt;[,port_to][,host:&lt;ip address&gt;][,block]</db:para>
<db:para>Where port_from (mandatory) specifies either the debugging port or the start port of a range of ports when port_to is specified, ip address (optional) specifies the IP address of the host where the application is running, and block (optional) prevents the application from running until the debug client connects to the server. This enables debugging from the start.</db:para>
<db:para>After the application has successfully started, it displays the following message:</db:para>
<db:para>QML Debugger: Waiting for connection on port &lt;port_number&gt;</db:para>
</db:section>
<db:section xml:id="connecting-to-applications">
<db:title>Connecting to Applications</db:title>
<db:para>When the application is running, an IDE or a tool that implements the binary protocol can connect to the open port.</db:para>
<db:para>Qt provides a qmlprofiler command line tool to capture profiling data in a file. To run the tool, enter the following command:</db:para>
<db:para>qmlprofiler -p &lt;port&gt; -attach &lt;ip address&gt;</db:para>
</db:section>
</db:section>
<db:section xml:id="debugging-with-qt-creator">
<db:title>Debugging with Qt Creator</db:title>
<db:para>Qt Creator uses the debugging infrastructure to debug, inspect and profile Qt Quick applications on the desktop as well as on remote devices. Qt Creator provides integrated clients for debugging JS, inspecting the object tree, and profiling the activities of a QML engine. For more information, see <db:link xlink:href="http://doc.qt.io/qtcreator/creator-debugging-qml.html">Qt Creator: Debugging Qt Quick Projects</db:link>.</db:para>
</db:section>
</db:article>
