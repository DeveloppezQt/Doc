<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Debugging QML Applications</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides information on how to use QML's debugging tools.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>When you develop an application with QML, there are many ways to debug possible issues that you may face. The sections below describe the debugging tools available and how to use them.</db:para>
<db:section xml:id="console-api">
<db:title>Console API</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Feature</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Log</db:para>
</db:td>
<db:td>
<db:para>Use console.log, console.debug, console.info, console.warn, or console.error to print debugging information to the console.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">function f(a, b) {
  console.log(&quot;a is &quot;, a, &quot;b is &quot;, b);
}
</db:programlisting>
<db:para>The output is generated using the <db:link xlink:href="qloggingcategory.xml#qCDebug">qCDebug</db:link>, <db:link xlink:href="qloggingcategory.xml#qCWarning">qCWarning</db:link>, or <db:link xlink:href="qloggingcategory.xml#qCCritical">qCCritical</db:link> methods in C++, with a category of qml or js, depending on the type of file doing the logging. See also <db:link xlink:href="debug.xml">Debugging Techniques</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Assert</db:para>
</db:td>
<db:td>
<db:para>console.assert tests that an expression is true. If not, it writes an optional message to the console and prints the stack trace.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">function f() {
  var x = 12
  console.assert(x == 12, &quot;This will pass&quot;);
  console.assert(x &amp;gt; 12, &quot;This will fail&quot;);
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Timer</db:para>
</db:td>
<db:td>
<db:para>console.time and console.timeEnd log the time (in milliseconds) that was spent between the calls. Both take a string argument that identifies the measurement.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">function f() {
    console.time(&quot;wholeFunction&quot;);
    console.time(&quot;firstPart&quot;);
    // first part
    console.timeEnd(&quot;firstPart&quot;);
    // second part
    console.timeEnd(&quot;wholeFunction&quot;);
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Trace</db:para>
</db:td>
<db:td>
<db:para>console.trace prints the stack trace of the JavaScript execution at the point where it was called. This stack trace information contains the function name, file name, line number, and column number. The stack trace is limited to last 10 stack frames.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Count</db:para>
</db:td>
<db:td>
<db:para>console.count prints the current number of times a particular piece of code has run, along with a message.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">function f() {
  console.count(&quot;f called&quot;);
}
</db:programlisting>
<db:para>The code sample above prints f called: 1, f called: 2 ... whenever f() is run.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Profile</db:para>
</db:td>
<db:td>
<db:para>console.profile turns on the QML and JavaScript profilers. Nested calls are not supported and prints a warning to the console.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ProfileEnd</db:para>
</db:td>
<db:td>
<db:para>console.profileEnd turns off the QML and JavaScript profilers. Calling this function without a previous call to console.profile prints a warning to the console. A profiling client needs to be attached before this call to receive and store the profiling data.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">function f() {
    console.profile();
    //Call some function that needs to be profiled.
    //Ensure that a client is attached before ending
    //the profiling session.
    console.profileEnd();
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Exception</db:para>
</db:td>
<db:td>
<db:para>console.exception prints an error message together with the stack trace of JavaScript execution at the point where it is called.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Alternatively, a <db:link xlink:href="qloggingcategory.xml">logging category</db:link> can be passed as the first argument to any of these console functions. See <db:link xlink:href="qml-qtqml-loggingcategory.xml">LoggingCategory</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="debugging-module-imports">
<db:title>Debugging Module Imports</db:title>
<db:para>Set the QML_IMPORT_TRACE environment variable to enable debug output from QML's import loading mechanisms.</db:para>
<db:para>For example, for a simple QML file like this:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle { width: 100; height: 100 }
</db:programlisting>
<db:para>If you set QML_IMPORT_TRACE=1 before running the <db:link xlink:href="qtquick-qml-runtime.xml#qml-runtime-tool">QML Runtime Tool</db:link> or your QML C++ application, you will see output similar to:</db:para>
<db:programlisting language="cpp">QQmlImportDatabase::addImportPath &quot;/qt-sdk/imports&quot;
QQmlImportDatabase::addImportPath &quot;/qt-sdk/bin/QMLViewer.app/Contents/MacOS&quot;
QQmlImportDatabase::addToImport 0x106237370 &quot;.&quot; -1.-1 File as &quot;&quot;
QQmlImportDatabase::addToImport 0x106237370 &quot;Qt&quot; 4.7 Library as &quot;&quot;
QQmlImportDatabase::resolveType &quot;Rectangle&quot; = &quot;QDeclarativeRectangle&quot;
</db:programlisting>
</db:section>
<db:section xml:id="qml-debugging-infrastructure">
<db:title>QML Debugging Infrastructure</db:title>
<db:para>The <db:link xlink:href="qtqml-index.xml">Qt Qml</db:link> module provides services for debugging, inspecting, and profiling applications via a TCP port or a local socket.</db:para>
<db:note>
<db:para>The qmltooling plugins that are required for debugging and profiling QML applications on devices are automatically installed during Qt installation. They must be deployed to the devices for debugging and profiling to work.</db:para>
</db:note>
<db:section xml:id="enabling-the-infrastructure">
<db:title>Enabling the Infrastructure</db:title>
<db:para>When you compile your application, you must explicitly enable the debugging infrastructure. If you use qmake, you can add the configuration parameters to the project .pro file:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt Quick 1: CONFIG+=declarative_debug</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt Quick 2: CONFIG+=qml_debug</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you use another build system, you can pass the following defines to the compiler:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt Quick 1: QT_DECLARATIVE_DEBUG</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt Quick 2: QT_QML_DEBUG</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Enabling the debugging infrastructure may compromise the integrity of your application and system, and therefore, you should only enable it in a controlled environment. When the infrastructure is enabled, the application displays the following warning:</db:para>
</db:note>
<db:para>QML debugging is enabled. Only use this in a safe environment.</db:para>
</db:section>
<db:section xml:id="starting-applications">
<db:title>Starting Applications</db:title>
<db:para>To enable debugging – from the start or to attach a debugger later on – start the application with the following arguments:</db:para>
<db:para>-qmljsdebugger=port:&lt;port_from&gt;[,port_to][,host:&lt;ip address&gt;][,block][,file:&lt;local socket&gt;][,services:&lt;comma-separated list of services to enable&gt;]</db:para>
<db:para>Where:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>the mandatory port_from specifies either the debugging port or the start port of a range of ports when port_to is specified</db:para>
</db:listitem>
<db:listitem>
<db:para>the optional ip address specifies the IP address of the host where the application is running</db:para>
</db:listitem>
<db:listitem>
<db:para>the optional block prevents the application from running until the debug client connects to the server</db:para>
</db:listitem>
<db:listitem>
<db:para>the optional file specifies the local socket.</db:para>
</db:listitem>
<db:listitem>
<db:para>the optional services specifies the services to enable; the default is all that are found. Note that the v4 debug service disables the JIT.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>After the application has successfully started, it displays the following message:</db:para>
<db:para>QML Debugger: Waiting for connection on port &lt;port_number&gt; or QML Debugger: Connecting to socket at &lt;file&gt;&quot;</db:para>
</db:section>
<db:section xml:id="connecting-to-applications">
<db:title>Connecting to Applications</db:title>
<db:para>When the application is running, an IDE or a tool that implements the binary protocol can connect to the open port.</db:para>
<db:para>Qt provides a qmlprofiler command line tool to capture profiling data in a file. To run this tool, enter the following command:</db:para>
<db:para>qmlprofiler -p &lt;port&gt; -attach &lt;ip address&gt;</db:para>
</db:section>
</db:section>
<db:section xml:id="debugging-with-qt-creator">
<db:title>Debugging with Qt Creator</db:title>
<db:para>Qt Creator uses the debugging infrastructure to debug, inspect, and profile Qt Quick applications on the desktop as well as on remote devices. Qt Creator provides integrated clients for debugging JavaScript, inspecting the object tree, and profiling the activities of a QML engine. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-debugging-qml.html">Qt Creator: Debugging Qt Quick Projects</db:link>.</db:para>
</db:section>
</db:article>
