<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTranslator Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtranslator.xml">QTranslator</db:link> class provides internationalization support for text output.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTranslator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTranslator is part of <db:simplelist><db:member>i18n</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An object of this class contains a set of translations from a source language to a target language. <db:link xlink:href="qtranslator.xml">QTranslator</db:link> provides functions to look up translations in a translation file. Translation files are created using <db:link xlink:href="qtlinguist-index.xml">Qt Linguist</db:link>.</db:para>
<db:para>The most common use of <db:link xlink:href="qtranslator.xml">QTranslator</db:link> is to: load a translation file, install it using <db:link xlink:href="qcoreapplication.xml#installTranslator">QCoreApplication::installTranslator</db:link>(), and use it via <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(). Here's an example main() function using the <db:link xlink:href="qtranslator.xml">QTranslator</db:link>:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    QTranslator translator;
    // look up e.g. :/translations/myapp_de.qm
    if (translator.load(QLocale(), QLatin1String(&quot;myapp&quot;), QLatin1String(&quot;_&quot;), QLatin1String(&quot;:/translations&quot;)))
        QCoreApplication::installTranslator(&amp;amp;translator);

    QPushButton hello(QCoreApplication::translate(&quot;main&quot;, &quot;Hello world!&quot;));
    hello.resize(100, 30);

    hello.show();
    return QCoreApplication::exec();
}
</db:programlisting>
<db:para>Note that the translator must be created <db:emphasis>before</db:emphasis> the application's widgets.</db:para>
<db:para>Most applications will never need to do anything else with this class. The other functions provided by this class are useful for applications that work on translator files.</db:para>
<db:section xml:id="looking-up-translations">
<db:title>Looking up Translations</db:title>
<db:para>It is possible to look up a translation using <db:link xlink:href="qtranslator.xml#translate">translate</db:link>() (as <db:link xlink:href="qobject.xml#tr">tr</db:link>() and <db:link xlink:href="qcoreapplication.xml#translate">QCoreApplication::translate</db:link>() do). The <db:link xlink:href="qtranslator.xml#translate">translate</db:link>() function takes up to three parameters:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:emphasis>context</db:emphasis> - usually the class name for the <db:link xlink:href="qobject.xml#tr">tr</db:link>() caller.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:emphasis>source text</db:emphasis> - usually the argument to <db:link xlink:href="qobject.xml#tr">tr</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:emphasis>disambiguation</db:emphasis> - an optional string that helps disambiguate different uses of the same text in the same context.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, the &quot;Cancel&quot; in a dialog might have &quot;Anuluj&quot; when the program runs in Polish (in this case the source text would be &quot;Cancel&quot;). The context would (normally) be the dialog's class name; there would normally be no comment, and the translated text would be &quot;Anuluj&quot;.</db:para>
<db:para>But it's not always so simple. The Spanish version of a printer dialog with settings for two-sided printing and binding would probably require both &quot;Activado&quot; and &quot;Activada&quot; as translations for &quot;Enabled&quot;. In this case the source text would be &quot;Enabled&quot; in both cases, and the context would be the dialog's class name, but the two items would have disambiguations such as &quot;two-sided printing&quot; for one and &quot;binding&quot; for the other. The disambiguation enables the translator to choose the appropriate gender for the Spanish version, and enables Qt to distinguish between translations.</db:para>
</db:section>
<db:section xml:id="using-multiple-translations">
<db:title>Using Multiple Translations</db:title>
<db:para>Multiple translation files can be installed in an application. Translations are searched for in the reverse order in which they were installed, so the most recently installed translation file is searched for translations first and the earliest translation file is searched last. The search stops as soon as a translation containing a matching string is found.</db:para>
<db:para>This mechanism makes it possible for a specific translation to be &quot;selected&quot; or given priority over the others; simply uninstall the translator from the application by passing it to the <db:link xlink:href="qcoreapplication.xml#removeTranslator">QCoreApplication::removeTranslator</db:link>() function and reinstall it with <db:link xlink:href="qcoreapplication.xml#installTranslator">QCoreApplication::installTranslator</db:link>(). It will then be the first translation to be searched for matching strings.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#installTranslator">QCoreApplication::installTranslator</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#removeTranslator">QCoreApplication::removeTranslator</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#translate">QCoreApplication::translate</db:link>()</db:member>
<db:member><db:link xlink:href="qtwidgets-tools-i18n-example.xml">I18N Example</db:link></db:member>
<db:member><db:link xlink:href="qtlinguist-hellotr-example.xml">Hello tr() Example</db:link></db:member>
<db:member><db:link xlink:href="qtlinguist-arrowpad-example.xml">Arrow Pad Example</db:link></db:member>
<db:member><db:link xlink:href="qtlinguist-trollprint-example.xml">Troll Print Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTranslator">
<db:title>[explicit] QTranslator::QTranslator(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QTranslator</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTranslator(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty message file object with parent <db:code role="parameter">parent</db:code> that is not connected to any file.</db:para>
</db:section>
<db:section xml:id="dtor.QTranslator">
<db:title>[virtual] QTranslator::~QTranslator()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QTranslator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTranslator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the object and frees any allocated resources.</db:para>
</db:section>
<db:section xml:id="filePath">
<db:title>[since 5.15] QString QTranslator::filePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>filePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString filePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the path of the loaded translation file.</db:para>
<db:para>The file path is empty if no translation was loaded yet, the loading failed, or if the translation was not loaded from a file.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[virtual] bool QTranslator::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this translator is empty, otherwise returns false. This function works with stripped and unstripped translation files.</db:para>
</db:section>
<db:section xml:id="language">
<db:title>[since 5.15] QString QTranslator::language() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>language</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString language() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the target language as stored in the translation file.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="load">
<db:title>bool QTranslator::load(const QString &amp;<db:emphasis>filename</db:emphasis>, const QString &amp;<db:emphasis>directory</db:emphasis> = QString(), const QString &amp;<db:emphasis>search_delimiters</db:emphasis> = QString(), const QString &amp;<db:emphasis>suffix</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filename</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>directory</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>search_delimiters</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>suffix</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool load(const QString &amp;filename, const QString &amp;directory, const QString &amp;search_delimiters, const QString &amp;suffix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads <db:code role="parameter">filename</db:code> + <db:code role="parameter">suffix</db:code> (&quot;.qm&quot; if the <db:code role="parameter">suffix</db:code> is not specified), which may be an absolute file name or relative to <db:code role="parameter">directory</db:code>. Returns true if the translation is successfully loaded; otherwise returns false.</db:para>
<db:para>If <db:code role="parameter">directory</db:code> is not specified, the current directory is used (i.e., as <db:link xlink:href="qdir.xml#currentPath">currentPath</db:link>()).</db:para>
<db:para>The previous contents of this translator object are discarded.</db:para>
<db:para>If the file name does not exist, other file names are tried in the following order:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>File name without <db:code role="parameter">suffix</db:code> appended.</db:para>
</db:listitem>
<db:listitem>
<db:para>File name with text after a character in <db:code role="parameter">search_delimiters</db:code> stripped (&quot;_.&quot; is the default for <db:code role="parameter">search_delimiters</db:code> if it is an empty string) and <db:code role="parameter">suffix</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>File name stripped without <db:code role="parameter">suffix</db:code> appended.</db:para>
</db:listitem>
<db:listitem>
<db:para>File name stripped further, etc.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>For example, an application running in the fr_CA locale (French-speaking Canada) might call load(&quot;foo.fr_ca&quot;, &quot;/opt/foolib&quot;). load() would then try to open the first existing readable file from this list:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>/opt/foolib/foo.fr_ca.qm</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo.fr_ca</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo.fr.qm</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo.fr</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo.qm</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Usually, it is better to use the QTranslator::load(const <db:link xlink:href="qlocale.xml">QLocale</db:link> &amp;, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;) function instead, because it uses <db:link xlink:href="qlocale.xml#uiLanguages">QLocale::uiLanguages</db:link>() and not simply the locale name, which refers to the formatting of dates and numbers and not necessarily the UI language.</db:para>
</db:section>
<db:section xml:id="load-1">
<db:title>[since 4.8] bool QTranslator::load(const QLocale &amp;<db:emphasis>locale</db:emphasis>, const QString &amp;<db:emphasis>filename</db:emphasis>, const QString &amp;<db:emphasis>prefix</db:emphasis> = QString(), const QString &amp;<db:emphasis>directory</db:emphasis> = QString(), const QString &amp;<db:emphasis>suffix</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QLocale &amp;</db:type>
<db:parameter>locale</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filename</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>prefix</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>directory</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>suffix</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool load(const QLocale &amp;locale, const QString &amp;filename, const QString &amp;prefix, const QString &amp;directory, const QString &amp;suffix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads <db:code role="parameter">filename</db:code> + <db:code role="parameter">prefix</db:code> + <db:link xlink:href="qlocale.xml#uiLanguages">ui language name</db:link> + <db:code role="parameter">suffix</db:code> (&quot;.qm&quot; if the <db:code role="parameter">suffix</db:code> is not specified), which may be an absolute file name or relative to <db:code role="parameter">directory</db:code>. Returns true if the translation is successfully loaded; otherwise returns false.</db:para>
<db:para>The previous contents of this translator object are discarded.</db:para>
<db:para>If the file name does not exist, other file names are tried in the following order:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>File name without <db:code role="parameter">suffix</db:code> appended.</db:para>
</db:listitem>
<db:listitem>
<db:para>File name with ui language part after a &quot;_&quot; character stripped and <db:code role="parameter">suffix</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>File name with ui language part stripped without <db:code role="parameter">suffix</db:code> appended.</db:para>
</db:listitem>
<db:listitem>
<db:para>File name with ui language part stripped further, etc.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>For example, an application running in the <db:code role="parameter">locale</db:code> with the following <db:link xlink:href="qlocale.xml#uiLanguages">ui languages</db:link> - &quot;es&quot;, &quot;fr-CA&quot;, &quot;de&quot; might call load(QLocale(), &quot;foo&quot;, &quot;.&quot;, &quot;/opt/foolib&quot;, &quot;.qm&quot;). <db:link xlink:href="qtranslator.xml#load">load</db:link>() would replace '-' (dash) with '_' (underscore) in the ui language and then try to open the first existing readable file from this list:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>/opt/foolib/foo.es.qm</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo.es</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo.fr_CA.qm</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo.fr_CA</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo.de.qm</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo.de</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo.fr.qm</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo.fr</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo.qm</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo.</db:para>
</db:listitem>
<db:listitem>
<db:para>/opt/foolib/foo</db:para>
</db:listitem>
</db:orderedlist>
<db:para>On operating systems where file system is case sensitive, <db:link xlink:href="qtranslator.xml">QTranslator</db:link> also tries to load a lower-cased version of the locale name.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="load-2">
<db:title>bool QTranslator::load(const uchar *<db:emphasis>data</db:emphasis>, int <db:emphasis>len</db:emphasis>, const QString &amp;<db:emphasis>directory</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const uchar *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>directory</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool load(const uchar *data, int len, const QString &amp;directory)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtranslator.xml#load">load</db:link>().</db:para>
<db:para>Loads the QM file data <db:code role="parameter">data</db:code> of length <db:code role="parameter">len</db:code> into the translator.</db:para>
<db:para>The data is not copied. The caller must be able to guarantee that <db:code role="parameter">data</db:code> will not be deleted or modified.</db:para>
<db:para><db:code role="parameter">directory</db:code> is only used to specify the base directory when loading the dependencies of a QM file. If the file does not have dependencies, this argument is ignored.</db:para>
</db:section>
<db:section xml:id="translate">
<db:title>[virtual] QString QTranslator::translate(const char *<db:emphasis>context</db:emphasis>, const char *<db:emphasis>sourceText</db:emphasis>, const char *<db:emphasis>disambiguation</db:emphasis> = nullptr, int <db:emphasis>n</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>sourceText</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>disambiguation</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>n</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString translate(const char *context, const char *sourceText, const char *disambiguation, int n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the translation for the key (<db:code role="parameter">context</db:code>, <db:code role="parameter">sourceText</db:code>, <db:code role="parameter">disambiguation</db:code>). If none is found, also tries (<db:code role="parameter">context</db:code>, <db:code role="parameter">sourceText</db:code>, &quot;&quot;). If that still fails, returns a null string.</db:para>
<db:note>
<db:para>Incomplete translations may result in unexpected behavior: If no translation for (<db:code role="parameter">context</db:code>, <db:code role="parameter">sourceText</db:code>, &quot;&quot;) is provided, the method might in this case actually return a translation for a different <db:code role="parameter">disambiguation</db:code>.</db:para>
</db:note>
<db:para>If <db:code role="parameter">n</db:code> is not -1, it is used to choose an appropriate form for the translation (e.g. &quot;%n file found&quot; vs. &quot;%n files found&quot;).</db:para>
<db:para>If you need to programatically insert translations into a <db:link xlink:href="qtranslator.xml">QTranslator</db:link>, this function can be reimplemented.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtranslator.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
