<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QConcatenateTablesProxyModel Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qconcatenatetablesproxymodel.xml">QConcatenateTablesProxyModel</db:link> class proxies multiple source models, concatenating their rows.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QConcatenateTablesProxyModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemmodel.xml" xlink:role="class">QAbstractItemModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QConcatenateTablesProxyModel is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qconcatenatetablesproxymodel.xml">QConcatenateTablesProxyModel</db:link> takes multiple source models and concatenates their rows.</db:para>
<db:para>In other words, the proxy will have all rows of the first source model, followed by all rows of the second source model, and so on.</db:para>
<db:para>If the source models don't have the same number of columns, the proxy will only have as many columns as the source model with the smallest number of columns. Additional columns in other source models will simply be ignored.</db:para>
<db:para>Source models can be added and removed at runtime, and the column count is adjusted accordingly.</db:para>
<db:para>This proxy does not inherit from <db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link> because it uses multiple source models, rather than a single one.</db:para>
<db:para>Only flat models (lists and tables) are supported, tree models are not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link></db:member>
<db:member><db:link xlink:href="">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qidentityproxymodel.xml">QIdentityProxyModel</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QConcatenateTablesProxyModel">
<db:title>[explicit] QConcatenateTablesProxyModel::QConcatenateTablesProxyModel(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a concatenate-rows proxy model with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QConcatenateTablesProxyModel">
<db:title>[virtual noexcept] QConcatenateTablesProxyModel::~QConcatenateTablesProxyModel()</db:title>
<db:para>Destroys this proxy model.</db:para>
</db:section>
<db:section xml:id="addSourceModel">
<db:title>void QConcatenateTablesProxyModel::addSourceModel(QAbstractItemModel *<db:emphasis>sourceModel</db:emphasis>)</db:title>
<db:para>Adds a source model <db:code role="parameter">sourceModel</db:code>, below all previously added source models.</db:para>
<db:para>The ownership of <db:code role="parameter">sourceModel</db:code> is not affected by this.</db:para>
<db:para>The same source model cannot be added more than once.</db:para>
</db:section>
<db:section xml:id="canDropMimeData">
<db:title>[override virtual] bool QConcatenateTablesProxyModel::canDropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#canDropMimeData" role="function">QAbstractItemModel::canDropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="columnCount">
<db:title>[override virtual] int QConcatenateTablesProxyModel::columnCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#columnCount" role="function">QAbstractItemModel::columnCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
<db:para>This method returns the column count of the source model with the smallest number of columns.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[override virtual] QVariant QConcatenateTablesProxyModel::data(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#data" role="function">QAbstractItemModel::data(const QModelIndex &amp;index, int role) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qconcatenatetablesproxymodel.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[override virtual] bool QConcatenateTablesProxyModel::dropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#dropMimeData" role="function">QAbstractItemModel::dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</db:link>.</db:para>
<db:para><db:link xlink:href="qconcatenatetablesproxymodel.xml">QConcatenateTablesProxyModel</db:link> handles dropping onto an item, between items, and after the last item. In all cases the call is forwarded to the underlying source model. When dropping onto an item, the source model for this item is called. When dropping between items, the source model immediately below the drop position is called. When dropping after the last item, the last source model is called.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>[override virtual] Qt::ItemFlags QConcatenateTablesProxyModel::flags(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#flags" role="function">QAbstractItemModel::flags(const QModelIndex &amp;index) const</db:link>.</db:para>
<db:para>Returns the flags for the given index. If the <db:code role="parameter">index</db:code> is valid, the flags come from the source model for this <db:code role="parameter">index</db:code>. If the <db:code role="parameter">index</db:code> is invalid (as used to determine if dropping onto an empty area in the view is allowed, for instance), the flags from the first model are returned.</db:para>
</db:section>
<db:section xml:id="headerData">
<db:title>[override virtual] QVariant QConcatenateTablesProxyModel::headerData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#headerData" role="function">QAbstractItemModel::headerData(int section, Qt::Orientation orientation, int role) const</db:link>.</db:para>
<db:para>This method returns the horizontal header data for the first source model, and the vertical header data for the source model corresponding to each row.</db:para>
</db:section>
<db:section xml:id="index">
<db:title>[override virtual] QModelIndex QConcatenateTablesProxyModel::index(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#index" role="function">QAbstractItemModel::index(int row, int column, const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="itemData">
<db:title>[override virtual] QMap&lt;int, QVariant&gt; QConcatenateTablesProxyModel::itemData(const QModelIndex &amp;<db:emphasis>proxyIndex</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#itemData" role="function">QAbstractItemModel::itemData(const QModelIndex &amp;index) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qconcatenatetablesproxymodel.xml#setItemData">setItemData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromSource">
<db:title>QModelIndex QConcatenateTablesProxyModel::mapFromSource(const QModelIndex &amp;<db:emphasis>sourceIndex</db:emphasis>) const</db:title>
<db:para>Returns the proxy index for a given <db:code role="parameter">sourceIndex</db:code>, which can be from any of the source models.</db:para>
</db:section>
<db:section xml:id="mapToSource">
<db:title>QModelIndex QConcatenateTablesProxyModel::mapToSource(const QModelIndex &amp;<db:emphasis>proxyIndex</db:emphasis>) const</db:title>
<db:para>Returns the source index for a given <db:code role="parameter">proxyIndex</db:code>.</db:para>
</db:section>
<db:section xml:id="mimeData">
<db:title>[override virtual] QMimeData *QConcatenateTablesProxyModel::mimeData(const QModelIndexList &amp;<db:emphasis>indexes</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#mimeData" role="function">QAbstractItemModel::mimeData(const QModelIndexList &amp;indexes) const</db:link>.</db:para>
<db:para>The call is forwarded to the source model of the first index in the list of <db:code role="parameter">indexes</db:code>.</db:para>
<db:para>Important: please note that this proxy only supports dragging a single row. It will assert if called with indexes from multiple rows, because dragging rows that might come from different source models cannot be implemented generically by this proxy model. Each piece of data in the <db:link xlink:href="qmimedata.xml">QMimeData</db:link> needs to be merged, which is data-type-specific. Reimplement this method in a subclass if you want to support dragging multiple rows.</db:para>
</db:section>
<db:section xml:id="mimeTypes">
<db:title>[override virtual] QStringList QConcatenateTablesProxyModel::mimeTypes() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#mimeTypes" role="function">QAbstractItemModel::mimeTypes() const</db:link>.</db:para>
<db:para>This method returns the mime types for the first source model.</db:para>
</db:section>
<db:section xml:id="parent">
<db:title>[override virtual] QModelIndex QConcatenateTablesProxyModel::parent(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#parent" role="function">QAbstractItemModel::parent(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="removeSourceModel">
<db:title>void QConcatenateTablesProxyModel::removeSourceModel(QAbstractItemModel *<db:emphasis>sourceModel</db:emphasis>)</db:title>
<db:para>Removes the source model <db:code role="parameter">sourceModel</db:code>, which was previously added to this proxy.</db:para>
<db:para>The ownership of <db:code role="parameter">sourceModel</db:code> is not affected by this.</db:para>
</db:section>
<db:section xml:id="rowCount">
<db:title>[override virtual] int QConcatenateTablesProxyModel::rowCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#rowCount" role="function">QAbstractItemModel::rowCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="setData">
<db:title>[override virtual] bool QConcatenateTablesProxyModel::setData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#setData" role="function">QAbstractItemModel::setData(const QModelIndex &amp;index, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qconcatenatetablesproxymodel.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemData">
<db:title>[override virtual] bool QConcatenateTablesProxyModel::setItemData(const QModelIndex &amp;<db:emphasis>proxyIndex</db:emphasis>, const QMap&lt;int, QVariant&gt; &amp;<db:emphasis>roles</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#setItemData" role="function">QAbstractItemModel::setItemData(const QModelIndex &amp;index, const QMap&lt;int, QVariant&gt; &amp;roles)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qconcatenatetablesproxymodel.xml#itemData">itemData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceModels">
<db:title>QList&lt;QAbstractItemModel *&gt; QConcatenateTablesProxyModel::sourceModels() const</db:title>
<db:para>Returns a list of models that were added as source models for this proxy model.</db:para>
</db:section>
<db:section xml:id="span">
<db:title>[override virtual] QSize QConcatenateTablesProxyModel::span(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#span" role="function">QAbstractItemModel::span(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
