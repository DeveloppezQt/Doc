<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtConcurrent Word Count Example</db:title>
<db:productname>QtConcurrent</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to use the map-reduce algorithm.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QList&amp;gt;
#include &amp;lt;QMap&amp;gt;
#include &amp;lt;QTextStream&amp;gt;
#include &amp;lt;QString&amp;gt;
#include &amp;lt;QStringList&amp;gt;
#include &amp;lt;QDir&amp;gt;
#include &amp;lt;QTime&amp;gt;
#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QDebug&amp;gt;

#include &amp;lt;qtconcurrentmap.h&amp;gt;

using namespace QtConcurrent;

/*
    Utility function that recursivily searches for files.
*/
QStringList findFiles(const QString &amp;amp;startDir, const QStringList &amp;amp;filters)
{
    QStringList names;
    QDir dir(startDir);

    const auto files = dir.entryList(filters, QDir::Files);
    for (const QString &amp;amp;file : files)
        names += startDir + '/' + file;

    const auto subdirs =  dir.entryList(QDir::AllDirs | QDir::NoDotAndDotDot);
    for (const QString &amp;amp;subdir : subdirs)
        names += findFiles(startDir + '/' + subdir, filters);
    return names;
}

typedef QMap&amp;lt;QString, int&amp;gt; WordCount;

/*
    Single threaded word counter function.
*/
WordCount singleThreadedWordCount(const QStringList &amp;amp;files)
{
    WordCount wordCount;
    for (const QString &amp;amp;file : files) {
        QFile f(file);
        f.open(QIODevice::ReadOnly);
        QTextStream textStream(&amp;amp;f);
        while (!textStream.atEnd()) {
            const auto words =  textStream.readLine().split(' ');
            for (const QString &amp;amp;word : words)
                wordCount[word] += 1;
        }
    }
    return wordCount;
}

// countWords counts the words in a single file. This function is
// called in parallel by several threads and must be thread
// safe.
WordCount countWords(const QString &amp;amp;file)
{
    QFile f(file);
    f.open(QIODevice::ReadOnly);
    QTextStream textStream(&amp;amp;f);
    WordCount wordCount;

    while (!textStream.atEnd()) {
        const auto words =  textStream.readLine().split(' ');
        for (const QString &amp;amp;word : words)
            wordCount[word] += 1;
    }

    return wordCount;
}

// reduce adds the results from map to the final
// result. This functor will only be called by one thread
// at a time.
void reduce(WordCount &amp;amp;result, const WordCount &amp;amp;w)
{
    QMapIterator&amp;lt;QString, int&amp;gt; i(w);
    while (i.hasNext()) {
        i.next();
        result[i.key()] += i.value();
    }
}

int main(int argc, char** argv)
{
    QApplication app(argc, argv);
    qDebug() &amp;lt;&amp;lt; &quot;finding files...&quot;;
    QStringList files = findFiles(&quot;../../&quot;, QStringList() &amp;lt;&amp;lt; &quot;*.cpp&quot; &amp;lt;&amp;lt; &quot;*.h&quot;);
    qDebug() &amp;lt;&amp;lt; files.count() &amp;lt;&amp;lt; &quot;files&quot;;

    qDebug() &amp;lt;&amp;lt; &quot;warmup&quot;;
    {
        WordCount total = singleThreadedWordCount(files);
    }

    qDebug() &amp;lt;&amp;lt; &quot;warmup done&quot;;

    int singleThreadTime = 0;
    {
        QTime time;
        time.start();
        WordCount total = singleThreadedWordCount(files);
        singleThreadTime = time.elapsed();
        qDebug() &amp;lt;&amp;lt; &quot;single thread&quot; &amp;lt;&amp;lt; singleThreadTime;
    }

    int mapReduceTime = 0;
    {
        QTime time;
        time.start();
        WordCount total = mappedReduced(files, countWords, reduce);
        mapReduceTime = time.elapsed();
        qDebug() &amp;lt;&amp;lt; &quot;MapReduce&quot; &amp;lt;&amp;lt; mapReduceTime;
    }
    qDebug() &amp;lt;&amp;lt; &quot;MapReduce speedup x&quot; &amp;lt;&amp;lt; ((double)singleThreadTime - (double)mapReduceTime) / (double)mapReduceTime + 1;
}

</db:programlisting>
</db:article>
