<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Windows - Building from Source</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Configuring and building Qt for Windows.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This page describes the process of configuring and building <db:link xlink:href="windows.xml">Qt for Windows</db:link>. To download and install a pre-built Qt for Windows, follow the instructions on the <db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link> page.</db:para>
<db:section xml:id="step-1-getting-the-sources">
<db:title>Step 1: Getting the Sources</db:title>
<db:para>Qt sources can be installed in the Qt Online Installer. Source packages are also available as <db:link xlink:href="https://code.qt.io">Git repositories</db:link>, as archives in the <db:link xlink:href="https://account.qt.io/">Qt Account</db:link> (commercial users), and on <db:link xlink:href="https://download.qt.io">download.qt.io</db:link> (open-source users).</db:para>
<db:para>If you install the sources through the Qt Online Installer, they will be available in the Qt installation directory, for instance <db:code>C:\Qt\6.4.3\Src</db:code>.</db:para>
<db:para>If you downloaded the source archive, extract it to a directory of your choice, for instance C:\dev\Qt\src.</db:para>
<db:note>
<db:para>The path to the source directory must not contain any spaces or Windows specific file system characters. The path should also be kept short. This avoids issues with too long file paths in the compilation phase.</db:para>
</db:note>
</db:section>
<db:section xml:id="step-2-install-build-requirements">
<db:title>Step 2: Install Build Requirements</db:title>
<db:para>To build Qt from sources you need a build environment with a supported compiler and various build tools available:</db:para>
<db:section xml:id="build-tools">
<db:title>Build Tools</db:title>
<db:informaltable style="generic" width="80%">
<db:thead>
<db:tr>
<db:th>
<db:para>Tool</db:para>
</db:th>
<db:th>
<db:para>Supported Versions</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>CMake</db:para>
</db:td>
<db:td>
<db:para>Version 3.16 and newer (3.17 and newer for -debug-and-release builds 3.21 and newer for -static builds).</db:para>
</db:td>
<db:td>
<db:para>Required for configuring the Qt build. Available in the Qt Online Installer and on <db:link xlink:href="https://cmake.org">cmake.org</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ninja</db:para>
</db:td>
<db:td>
<db:para>-</db:para>
</db:td>
<db:td>
<db:para>Recommended tool for building Qt. Available in the Qt Online Installer and on <db:link xlink:href="https://ninja-build.org">ninja-build.org</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Perl</db:para>
</db:td>
<db:td>
<db:para>-</db:para>
</db:td>
<db:td>
<db:para>Required build tool. Popular Windows installers are <db:link xlink:href="https://www.activestate.com/products/perl/downloads/">ActiveState Perl</db:link> and <db:link xlink:href="https://strawberryperl.com/">Strawberry Perl</db:link>. Perl is also installed as part of <db:link xlink:href="https://git-scm.com/download/win">Git</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Python</db:para>
</db:td>
<db:td>
<db:para>Version 3</db:para>
</db:td>
<db:td>
<db:para>Required build tool. Windows installers are available on <db:link xlink:href="https://www.python.org/downloads/windows/">python.org</db:link>, or from the <db:link xlink:href="https://docs.python.org/3/using/windows.html#windows-store">Microsoft Store</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The executables cmake.exe, ninja.exe, perl.exe, and python.exe must be available in your build environment. You achieve this by adding the respective directory to your PATH environment variable.</db:para>
</db:section>
<db:section xml:id="compilers">
<db:title>Compilers</db:title>
<db:para>The following compilers and configurations are supported in Qt 6.4:</db:para>
<db:informaltable style="generic" width="80%">
<db:thead>
<db:tr>
<db:th>
<db:para>Operating System</db:para>
</db:th>
<db:th>
<db:para>Architecture</db:para>
</db:th>
<db:th>
<db:para>Compiler</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Windows 11 21H2 (1809 or later)</db:para>
</db:td>
<db:td>
<db:para>x86_64</db:para>
</db:td>
<db:td>
<db:para>MSVC 2022, MSVC 2019, MinGW 11.2</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows 10 21H2 (1809 or later)</db:para>
</db:td>
<db:td>
<db:para>x86_64</db:para>
</db:td>
<db:td>
<db:para>MSVC 2022, MSVC 2019, MinGW 11.2</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows on ARM</db:para>
</db:td>
<db:td>
<db:para>arm64</db:para>
</db:td>
<db:td>
<db:para>MSVC 2019/2022</db:para>
</db:td>
<db:td>
<db:para>Technology Preview</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Windows on ARM is only supported as a deployment target. Applications have to be cross-compiled from an x86-64 Windows machine and deployed to target.</db:para>
</db:note>
</db:section>
<db:section xml:id="qdoc-dependencies">
<db:title>QDoc Dependencies</db:title>
<db:para><db:link xlink:href="qdoc-index.xml">QDoc</db:link> uses Clang to parse C++ code. If you wish to build QDoc manually, refer to <db:link xlink:href="qdoc-guide-clang.xml">Installing Clang for QDoc</db:link> for specific build requirements.</db:para>
</db:section>
</db:section>
<db:section xml:id="step-3-set-the-environment-variables">
<db:title>Step 3: Set the Environment Variables</db:title>
<db:para>We recommend creating a desktop link that opens a command prompt with the environment set up similar to the <db:guilabel>Command Prompt</db:guilabel> menu entries provided by Visual Studio. This is done by creating an application link passing a .cmd file setting up the environment and the command line option /k (remain open) to cmd.exe.</db:para>
<db:para>Assuming the file is called qt6vars.cmd and the Qt folder is called <db:code>C:\Qt\6.4.3\Src</db:code>:</db:para>
<db:programlisting language="cpp" role="bad">REM Set up Microsoft Visual Studio 2019, where &amp;lt;arch&amp;gt; is amd64, x86, etc.
CALL &quot;C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Auxiliary\Build\vcvarsall.bat&quot; &amp;lt;arch&amp;gt;
SET _ROOT=C:\Qt\6.4.3\Src
SET PATH=%_ROOT%\qtbase\bin;%PATH%
SET _ROOT=
</db:programlisting>
<db:para>A desktop link can then be created by specifying the command %SystemRoot%\system32\cmd.exe /E:ON /V:ON /k C:\Qt\qt6vars.cmd as application.</db:para>
<db:para>Depending on your individual setup, you might also need to make the installation directories of CMake, Ninja, Perl, and Python part of the SET %PATH% line above.</db:para>
<db:note>
<db:para>Setups for MinGW are similar; they differ only in that the bin folder of the installation should be added to the path instead of calling the Visual Studio setup script. For MinGW, please make sure that no sh.exe can be found in the path, as it affects mingw32-make.</db:para>
</db:note>
</db:section>
<db:section xml:id="step-4-build-the-qt-library">
<db:title>Step 4: Build the Qt Library</db:title>
<db:para>To configure the Qt library for your machine type, run the configure.bat script in the source directory.</db:para>
<db:para>By default, Qt is configured for installation in the C:\Program Files\Qt directory, but this can be changed by using the -prefix option.</db:para>
<db:para>The <db:link xlink:href="configure-options.xml">Configure Options</db:link> page contains more information about the configure options. See <db:link xlink:href="windows-graphics.xml">Qt for Windows - Graphics Acceleration</db:link> for specific options regarding graphics acceleration.</db:para>
</db:section>
</db:article>
