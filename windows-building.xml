<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Windows - Building from Source</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Configuring and building Qt for Windows.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This page describes the process of configuring and building <db:link xlink:href="windows.xml">Qt for Windows</db:link>. Before building, there are some requirements that are given in more detail in the <db:link xlink:href="windows-requirements.xml">Qt for Windows - Requirements</db:link> document.</db:para>
<db:para>You can download the Qt 5 sources from the <db:link xlink:href="http://qt.io/download">Downloads</db:link> page. For more information, visit the <db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link> page.</db:para>
<db:section xml:id="step-1-install-the-license-file-commercially-licensed-qt-only">
<db:title>Step 1: Install the License File (Commercially Licensed Qt Only)</db:title>
<db:para>If you use Qt with a commercial license, the Qt tools look for a local license file. If you are using a binary installer or the commercial Qt Creator, your licenses are automatically fetched and stored in your local user profile (%USERPROFILE%\AppData\Roaming\Qt\qtlicenses.ini file).</db:para>
<db:para>If you do not use any binary installer or Qt Creator, you can download the respective license file from your <db:link xlink:href="https://account.qt.io/">Qt Account</db:link> Web portal and save it to your user profile as %USERPROFILE%\.qt-license. If you prefer a different location or file name, you need to set the QT_LICENSE_FILE environment variable to the respective file path.</db:para>
</db:section>
<db:section xml:id="step-2-unpack-the-archive">
<db:title>Step 2: Unpack the Archive</db:title>
<db:para>Uncompress the files into the directory you want Qt installed; e.g. C:\Qt\%VERSION%.</db:para>
<db:note>
<db:para>The install path must not contain any spaces or Windows specific file system characters.</db:para>
</db:note>
</db:section>
<db:section xml:id="step-3-set-the-environment-variables">
<db:title>Step 3: Set the Environment Variables</db:title>
<db:para>We recommend creating a desktop link that opens a command prompt with the environment set up similar to the <db:guilabel>Command Prompt</db:guilabel> menu entries provided by Visual Studio. This is done by creating an application link passing a .cmd file setting up the environment and the command line option /k (remain open) to cmd.exe.</db:para>
<db:para>Assuming the file is called qt5vars.cmd and the Qt folder is called Qt-5 and located under C:\Qt:</db:para>
<db:programlisting language="cpp" role="bad">REM Set up Microsoft Visual Studio 2017, where &amp;lt;arch&amp;gt; is amd64, x86, etc.
CALL &quot;C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Auxiliary\Build\vcvarsall.bat&quot; &amp;lt;arch&amp;gt;
SET _ROOT=C:\Qt\Qt-5
SET PATH=%_ROOT%\qtbase\bin;%_ROOT%\gnuwin32\bin;%PATH%
REM Uncomment the below line when using a git checkout of the source repository
REM SET PATH=%_ROOT%\qtrepotools\bin;%PATH%
SET _ROOT=
</db:programlisting>
<db:para>A desktop link can then be created by specifying the command %SystemRoot%\system32\cmd.exe /E:ON /V:ON /k C:\Qt\qt5vars.cmd as application and C:\Qt\Qt-5 as working directory.</db:para>
<db:note>
<db:para>Setups for MinGW are similar; they differ only in that the bin folder of the installation should be added to the path instead of calling the Visual Studio setup script. For MinGW, please make sure that no sh.exe can be found in the path, as it affects mingw32-make.</db:para>
</db:note>
<db:para>Settings required by the additional libraries (see <db:link xlink:href="windows-requirements.xml">Qt for Windows - Requirements</db:link>) should also go this file below the call to the Windows SDK setup script.</db:para>
</db:section>
<db:section xml:id="step-4-build-the-qt-library">
<db:title>Step 4: Build the Qt Library</db:title>
<db:para>The default behavior of configure is to create an in-source build of Qt 5. If you want to install Qt 5 to a separate location, you need to specify the command line option -prefix &lt;location&gt;. Alternatively, the command line option -developer-build creates an in-source build for developer usage.</db:para>
<db:para>To configure the Qt library for a debug build for your machine, type the following command in the command prompt:</db:para>
<db:programlisting language="cpp" role="bad">configure -debug -nomake examples -nomake tests -skip qtwebengine -opensource
</db:programlisting>
<db:para>The <db:link xlink:href="configure-options.xml">Configure Options</db:link> page contains more information about the configure options.</db:para>
<db:para>To build Qt using <db:link xlink:href="http://wiki.qt.io/jom">jom</db:link>, type:</db:para>
<db:programlisting language="cpp" role="bad">jom
</db:programlisting>
<db:para>If you do not have <db:link xlink:href="http://wiki.qt.io/jom">jom</db:link> installed, type:</db:para>
<db:programlisting language="cpp" role="bad">nmake
</db:programlisting>
<db:para>For MinGW, type:</db:para>
<db:programlisting language="cpp" role="bad">mingw32-make
</db:programlisting>
<db:para>If an installation prefix was given, type jom install, nmake install or mingw32-make install.</db:para>
<db:note>
<db:para>If you later need to reconfigure and rebuild Qt from the same location, ensure that all traces of the previous configuration are removed by entering the build directory and typing nmake distclean before running configure again.</db:para>
</db:note>
</db:section>
<db:section xml:id="parallel-builds">
<db:title>Parallel Builds</db:title>
<db:para><db:link xlink:href="http://wiki.qt.io/jom">jom</db:link> is a replacement for nmake which makes use of all CPU cores and thus speeds up building.</db:para>
</db:section>
<db:section xml:id="step-5-build-the-qt-documentation">
<db:title>Step 5: Build the Qt Documentation</db:title>
<db:para>For the Qt reference documentation to be available in <db:link xlink:href="qtassistant-index.xml">Qt Assistant</db:link>, you must build it separately:</db:para>
<db:programlisting language="cpp" role="bad">nmake docs
</db:programlisting>
</db:section>
</db:article>
