<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Windows - Building from Source</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Configuring and building Qt for Windows.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This page describes the process of configuring and building <db:link xlink:href="windows.xml">Qt for Windows</db:link>. To download and install a pre-built Qt for Windows, follow the instructions on the <db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link> page.</db:para>
<db:section xml:id="step-1-getting-the-sources">
<db:title>Step 1: Getting the Sources</db:title>
<db:para>Qt sources can be installed in Qt Online Installer. Source packages are also available as <db:link xlink:href="https://code.qt.io">Git repositories</db:link>, as archives in the <db:link xlink:href="https://account.qt.io/">Qt Account</db:link> (commercial users), and on <db:link xlink:href="https://download.qt.io">download.qt.io</db:link> (open-source users).</db:para>
<db:para>If you install the sources through Qt Online Installer, they will be available in the Qt installation directory, for instance <db:code>C:\Qt\6.6.3\Src</db:code>.</db:para>
<db:para>If you downloaded the source archive, extract it to a directory of your choice, for instance C:\dev\Qt\src.</db:para>
<db:note>
<db:para>The path to the source directory must not contain any spaces or Windows-specific file system characters. The path should also be kept short. This prevents issues with too long file paths in the compilation phase.</db:para>
</db:note>
</db:section>
<db:section xml:id="step-2-installing-build-requirements-and-set-environment">
<db:title>Step 2: Installing Build Requirements and Set Environment</db:title>
<db:para>To build Qt from sources you need a build environment with a supported compiler and various build tools.</db:para>
<db:section xml:id="build-tools">
<db:title>Build Tools</db:title>
<db:informaltable style="generic" width="80%">
<db:thead>
<db:tr>
<db:th>
<db:para>Tool</db:para>
</db:th>
<db:th>
<db:para>Supported Versions</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>CMake</db:para>
</db:td>
<db:td>
<db:para>Version 3.16 and newer (3.17 and newer for -debug-and-release builds 3.21 and newer for -static builds).</db:para>
</db:td>
<db:td>
<db:para>Required for configuring the Qt build. Available in Qt Online Installer and on <db:link xlink:href="https://cmake.org">cmake.org</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ninja</db:para>
</db:td>
<db:td>
<db:para>-</db:para>
</db:td>
<db:td>
<db:para>Recommended tool for building Qt. Available in Qt Online Installer and on <db:link xlink:href="https://ninja-build.org">ninja-build.org</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Python</db:para>
</db:td>
<db:td>
<db:para>Version 3</db:para>
</db:td>
<db:td>
<db:para>Required build tool. Windows installers are available on <db:link xlink:href="https://www.python.org/downloads/windows/">python.org</db:link>, or from the <db:link xlink:href="https://docs.python.org/3/using/windows.html#windows-store">Microsoft Store</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The executables cmake.exe, ninja.exe, and python.exe must be available in your build environment. Add the respective directory to your PATH environment variable.</db:para>
</db:section>
<db:section xml:id="compilers">
<db:title>Compilers</db:title>
<db:para>The following compilers and configurations are supported in Qt 6.6:</db:para>
<db:informaltable style="generic" width="80%">
<db:thead>
<db:tr>
<db:th>
<db:para>Operating System</db:para>
</db:th>
<db:th>
<db:para>Architecture</db:para>
</db:th>
<db:th>
<db:para>Compiler</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Windows 10 (1809 or later)</db:para>
</db:td>
<db:td>
<db:para>x86_64</db:para>
</db:td>
<db:td>
<db:para>MSVC 2022, MSVC 2019, MinGW 11.2</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows 11</db:para>
</db:td>
<db:td>
<db:para>x86_64</db:para>
</db:td>
<db:td>
<db:para>MSVC 2022, MSVC 2019, MinGW 11.2</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows on ARM</db:para>
</db:td>
<db:td>
<db:para>arm64</db:para>
</db:td>
<db:td>
<db:para>MSVC 2019/2022</db:para>
</db:td>
<db:td>
<db:para>Technology Preview</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Windows on ARM is only supported as a deployment target. Applications have to be cross-compiled from an x86-64 Windows machine and deployed to target.</db:para>
</db:note>
</db:section>
<db:section xml:id="qdoc-dependencies">
<db:title>QDoc Dependencies</db:title>
<db:para>QDoc uses Clang to parse C++ code. If you wish to build QDoc manually, refer to <db:link xlink:href="">Installing Clang for QDoc</db:link> for specific build requirements.</db:para>
</db:section>
<db:section xml:id="setting-the-environment">
<db:title>Setting the Environment</db:title>
<db:para>For MSVC, do one of the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Run the vcvarsall.bat:</db:para>
<db:programlisting language="cpp" role="bad">&quot;C:\Program Files\Microsoft Visual Studio\2022\Professional\VC\Auxiliary\Build\vcvarsall.bat&quot; amd64
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Search on the Windows search bar for the VS Native Tools command prompt.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For MinGW: Add MinGW to PATH environment variable:</db:para>
<db:programlisting language="cpp" role="bad">Set PATH=C:\qt\tools\mingw1120_64\bin;%PATH%
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="step-3-building-the-qt-libraries-and-tools">
<db:title>Step 3: Building the Qt Libraries and Tools</db:title>
<db:para>To configure your build, create a build directory and run the configure.bat script in this directory:</db:para>
<db:programlisting language="cpp" role="bad">mkdir C:\dev\qt-build
cd C:\dev\qt-build
C:\dev\Qt\src\configure.bat
</db:programlisting>
<db:para>By default, Qt is configured for installation in the C:\Qt\Qt-6.5.3 directory. This can be changed by using the -prefix option. See the list of <db:link xlink:href="configure-options.xml">Qt Configure Options</db:link> to tweak further.</db:para>
<db:para>Then build the libraries and tools:</db:para>
<db:programlisting language="cpp" role="bad">cmake --build . --parallel
</db:programlisting>
<db:para>Period after --build means current folder.</db:para>
<db:para>After building, you need to install the libraries and tools in the desired path (unless you enabled a <db:link xlink:href="https://doc.qt.io/qt-6/configure-options.html#developer-builds">developer build</db:link>:</db:para>
<db:programlisting language="cpp" role="bad">cmake --install .
</db:programlisting>
</db:section>
<db:section xml:id="step-4-using-qt">
<db:title>Step 4: Using Qt</db:title>
<db:para>After Qt is installed, you can start building applications with it.</db:para>
<db:para>If you work from the command line, consider adding the Qt tools to your PATH environment variable as follows:</db:para>
<db:programlisting language="cpp" role="bad">set PATH=C:\Qt\Qt-6.5.3\bin;%PATH%
</db:programlisting>
<db:para>If you plan to use Qt from an IDE, you need to register the Qt version explicitly there. For Qt Creator, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-project-qmake.html">Qt Creator: Adding Qt Versions</db:link>.</db:para>
</db:section>
</db:article>
