<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStandardPaths Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link> class provides methods for accessing standard paths.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStandardPaths</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class contains functions to query standard locations on the local filesystem, for common tasks such as user-specific directories or system-wide configuration directories.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="LocateOption-enum">
<db:title>enum QStandardPaths::LocateOption</db:title>
<db:bridgehead renderas="sect2">flags QStandardPaths::LocateOptions</db:bridgehead>
<db:enumsynopsis>
<db:enumname>LocateOption</db:enumname>
<db:enumitem>
<db:enumidentifier>LocateFile</db:enumidentifier>
<db:enumvalue>0x0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LocateDirectory</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QStandardPaths::LocateOptions</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes the different flags that can be used for controlling the behavior of <db:link xlink:href="qstandardpaths.xml#locate">QStandardPaths::locate</db:link> and <db:link xlink:href="qstandardpaths.xml#locateAll">QStandardPaths::locateAll</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::LocateFile</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>return only files</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::LocateDirectory</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>return only directories</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>LocateOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;LocateOption&gt;. </db:code>It stores an OR combination of <db:code>LocateOption</db:code> values.</db:para>
</db:section>
<db:section xml:id="StandardLocation-enum">
<db:title>enum QStandardPaths::StandardLocation</db:title>
<db:enumsynopsis>
<db:enumname>StandardLocation</db:enumname>
<db:enumitem>
<db:enumidentifier>DesktopLocation</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DocumentsLocation</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FontsLocation</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ApplicationsLocation</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MusicLocation</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MoviesLocation</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PicturesLocation</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TempLocation</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HomeLocation</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AppLocalDataLocation</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CacheLocation</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>GenericDataLocation</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RuntimeLocation</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConfigLocation</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DownloadLocation</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>GenericCacheLocation</db:enumidentifier>
<db:enumvalue>15</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>GenericConfigLocation</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AppDataLocation</db:enumidentifier>
<db:enumvalue>17</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AppConfigLocation</db:enumidentifier>
<db:enumvalue>18</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PublicShareLocation</db:enumidentifier>
<db:enumvalue>19</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TemplatesLocation</db:enumidentifier>
<db:enumvalue>20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StateLocation</db:enumidentifier>
<db:enumvalue>21</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>GenericStateLocation</db:enumidentifier>
<db:enumvalue>22</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the different locations that can be queried using methods such as <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>, <db:link xlink:href="qstandardpaths.xml#standardLocations">QStandardPaths::standardLocations</db:link>, and <db:link xlink:href="qstandardpaths.xml#displayName">QStandardPaths::displayName</db:link>.</db:para>
<db:para>Some of the values in this enum represent a user configuration. Such enum values will return the same paths in different applications, so they could be used to share data with other applications. Other values are specific to this application. Each enum value in the table below describes whether it's application-specific or generic.</db:para>
<db:para>Application-specific directories should be assumed to be unreachable by other applications. Therefore, files placed there might not be readable by other applications, even if run by the same user. On the other hand, generic directories should be assumed to be accessible by all applications run by this user, but should still be assumed to be unreachable by applications by other users.</db:para>
<db:para>Data interchange with other users is out of the scope of <db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::DesktopLocation</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Returns the user's desktop directory. This is a generic value. On systems with no concept of a desktop, this is the same as QStandardPaths::HomeLocation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::DocumentsLocation</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Returns the directory containing user document files. This is a generic value. The returned path is never empty.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::FontsLocation</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Returns the directory containing user's fonts. This is a generic value. Note that installing fonts may require additional, platform-specific operations.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::ApplicationsLocation</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Returns the directory containing the user applications (either executables, application bundles, or shortcuts to them). This is a generic value. Note that installing applications may require additional, platform-specific operations. Files, folders or shortcuts in this directory are platform-specific.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::MusicLocation</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Returns the directory containing the user's music or other audio files. This is a generic value. If no directory specific for music files exists, a sensible fallback for storing user documents is returned.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::MoviesLocation</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Returns the directory containing the user's movies and videos. This is a generic value. If no directory specific for movie files exists, a sensible fallback for storing user documents is returned.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::PicturesLocation</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Returns the directory containing the user's pictures or photos. This is a generic value. If no directory specific for picture files exists, a sensible fallback for storing user documents is returned.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::TempLocation</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Returns a directory where temporary files can be stored. The returned value might be application-specific, shared among other applications for this user, or even system-wide. The returned path is never empty.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::HomeLocation</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Returns the user's home directory (the same as <db:link xlink:href="qdir.xml#homePath">QDir::homePath</db:link>()). On Unix systems, this is equal to the HOME environment variable. This value might be generic or application-specific, but the returned path is never empty.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::AppLocalDataLocation</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Returns the local settings path on the Windows operating system. On all other platforms, it returns the same value as AppDataLocation. This enum value was added in Qt 5.4.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::CacheLocation</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Returns a directory location where user-specific non-essential (cached) data should be written. This is an application-specific directory. The returned path is never empty.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::GenericCacheLocation</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>Returns a directory location where user-specific non-essential (cached) data, shared across applications, should be written. This is a generic value. Note that the returned path may be empty if the system has no concept of shared cache.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::GenericDataLocation</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Returns a directory location where persistent data shared across applications can be stored. This is a generic value. The returned path is never empty.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::RuntimeLocation</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Returns a directory location where runtime communication files should be written, like Unix local sockets. This is a generic value. The returned path may be empty on some systems.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::ConfigLocation</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Returns a directory location where user-specific configuration files should be written. This may be either a generic value or application-specific, and the returned path is never empty.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::DownloadLocation</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>Returns a directory for user's downloaded files. This is a generic value. If no directory specific for downloads exists, a sensible fallback for storing user documents is returned.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::GenericConfigLocation</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Returns a directory location where user-specific configuration files shared between multiple applications should be written. This is a generic value and the returned path is never empty.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::AppDataLocation</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>Returns a directory location where persistent application data can be stored. This is an application-specific directory. To obtain a path to store data to be shared with other applications, use QStandardPaths::GenericDataLocation. The returned path is never empty. On the Windows operating system, this returns the roaming path. This enum value was added in Qt 5.4.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::AppConfigLocation</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>Returns a directory location where user-specific configuration files should be written. This is an application-specific directory, and the returned path is never empty. This enum value was added in Qt 5.5.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::PublicShareLocation</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>Returns a directory location where user-specific publicly shared files and directories can be stored. This is a generic value. Note that the returned path may be empty if the system has no concept of a publicly shared location. This enum value was added in Qt 6.4.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::TemplatesLocation</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td>
<db:para>Returns a directory location where user-specific template files can be stored. This is a generic value. Note that the returned path may be empty if the system has no concept of a templates location. This enum value was added in Qt 6.4.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::StateLocation (since Qt 6.7)</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>Returns a directory location where user-specific application state data files should be written. This is an application-specific directory, and the returned path is never empty.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::GenericStateLocation (since Qt 6.7)</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>Returns a directory location where shared state data files across applications should be written. This value might be generic or application-specific, but the returned path is never empty.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following table gives examples of paths on different operating systems. The first path is the writable path (unless noted). Other, additional paths, if any, represent non-writable locations.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Path type</db:para>
</db:th>
<db:th>
<db:para>macOS</db:para>
</db:th>
<db:th>
<db:para>Windows</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>DesktopLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Desktop&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/Desktop&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DocumentsLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Documents&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/Documents&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FontsLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;/System/Library/Fonts&quot; (not writable)</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Windows/Fonts&quot; (not writable)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ApplicationsLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;/Applications&quot; (not writable)</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/AppData/Roaming/Microsoft/Windows/Start Menu/Programs&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MusicLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Music&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/Music&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MoviesLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Movies&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/Videos&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PicturesLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Pictures&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/Pictures&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TempLocation</db:para>
</db:td>
<db:td>
<db:para>randomly generated by the OS</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/AppData/Local/Temp&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>HomeLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AppLocalDataLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Library/Application Support/&lt;APPNAME&gt;&quot;, &quot;/Library/Application Support/&lt;APPNAME&gt;&quot;. &quot;&lt;APPDIR&gt;/../Resources&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/AppData/Local/&lt;APPNAME&gt;&quot;, &quot;C:/ProgramData/&lt;APPNAME&gt;&quot;, &quot;&lt;APPDIR&gt;&quot;, &quot;&lt;APPDIR&gt;/data&quot;, &quot;&lt;APPDIR&gt;/data/&lt;APPNAME&gt;&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CacheLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Library/Caches/&lt;APPNAME&gt;&quot;, &quot;/Library/Caches/&lt;APPNAME&gt;&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/AppData/Local/&lt;APPNAME&gt;/cache&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>StateLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Library/Preferences/&lt;APPNAME&gt;/State&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/AppData/Local/&lt;APPNAME&gt;/State&quot;, &quot;C:/ProgramData/&lt;APPNAME&gt;/State&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GenericDataLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Library/Application Support&quot;, &quot;/Library/Application Support&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/AppData/Local&quot;, &quot;C:/ProgramData&quot;, &quot;&lt;APPDIR&gt;&quot;, &quot;&lt;APPDIR&gt;/data&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>RuntimeLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Library/Application Support&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ConfigLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Library/Preferences&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/AppData/Local/&lt;APPNAME&gt;&quot;, &quot;C:/ProgramData/&lt;APPNAME&gt;&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GenericConfigLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Library/Preferences&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/AppData/Local&quot;, &quot;C:/ProgramData&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DownloadLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Downloads&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/Downloads&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GenericCacheLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Library/Caches&quot;, &quot;/Library/Caches&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/AppData/Local/cache&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GenericStateLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Library/Preferences/State&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/AppData/Local/State&quot;, &quot;C:/ProgramData/State&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AppDataLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Library/Application Support/&lt;APPNAME&gt;&quot;, &quot;/Library/Application Support/&lt;APPNAME&gt;&quot;. &quot;&lt;APPDIR&gt;/../Resources&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/AppData/Roaming/&lt;APPNAME&gt;&quot;, &quot;C:/ProgramData/&lt;APPNAME&gt;&quot;, &quot;&lt;APPDIR&gt;&quot;, &quot;&lt;APPDIR&gt;/data&quot;, &quot;&lt;APPDIR&gt;/data/&lt;APPNAME&gt;&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AppConfigLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Library/Preferences/&lt;APPNAME&gt;&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/AppData/Local/&lt;APPNAME&gt;&quot;, &quot;C:/ProgramData/&lt;APPNAME&gt;&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PublicShareLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Public&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/Public&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TemplatesLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Templates&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;C:/Users/&lt;USER&gt;/AppData/Roaming/Microsoft/Windows/Templates&quot;</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Path type</db:para>
</db:th>
<db:th>
<db:para>Linux and other UNIX operating systems</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>DesktopLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Desktop&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DocumentsLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Documents&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FontsLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/.fonts&quot;, &quot;~/.local/share/fonts&quot;, &quot;/usr/local/share/fonts&quot;, &quot;/usr/share/fonts&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ApplicationsLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/.local/share/applications&quot;, &quot;/usr/local/share/applications&quot;, &quot;/usr/share/applications&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MusicLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Music&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MoviesLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Videos&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PicturesLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Pictures&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TempLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;/tmp&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>HomeLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AppLocalDataLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/.local/share/&lt;APPNAME&gt;&quot;, &quot;/usr/local/share/&lt;APPNAME&gt;&quot;, &quot;/usr/share/&lt;APPNAME&gt;&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CacheLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/.cache/&lt;APPNAME&gt;&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>StateLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/.local/state/&lt;APPNAME&gt;&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GenericDataLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/.local/share&quot;, &quot;/usr/local/share&quot;, &quot;/usr/share&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>RuntimeLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;/run/user/&lt;USER&gt;&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ConfigLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/.config&quot;, &quot;/etc/xdg&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GenericConfigLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/.config&quot;, &quot;/etc/xdg&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DownloadLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Downloads&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GenericCacheLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/.cache&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GenericStateLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/.local/state&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AppDataLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/.local/share/&lt;APPNAME&gt;&quot;, &quot;/usr/local/share/&lt;APPNAME&gt;&quot;, &quot;/usr/share/&lt;APPNAME&gt;&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AppConfigLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/.config/&lt;APPNAME&gt;&quot;, &quot;/etc/xdg/&lt;APPNAME&gt;&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PublicShareLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Public&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TemplatesLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;~/Templates&quot;</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Path type</db:para>
</db:th>
<db:th>
<db:para>Android</db:para>
</db:th>
<db:th>
<db:para>iOS</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>DesktopLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/files&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Documents/Desktop&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DocumentsLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;USER&gt;/Documents&quot; [*], &quot;&lt;USER&gt;/&lt;APPNAME&gt;/Documents&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Documents&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FontsLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;/system/fonts&quot; (not writable)</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Library/Fonts&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ApplicationsLocation</db:para>
</db:td>
<db:td>
<db:para>not supported (directory not readable)</db:para>
</db:td>
<db:td>
<db:para>not supported</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MusicLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;USER&gt;/Music&quot; [*], &quot;&lt;USER&gt;/&lt;APPNAME&gt;/Music&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Documents/Music&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MoviesLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;USER&gt;/Movies&quot; [*], &quot;&lt;USER&gt;/&lt;APPNAME&gt;/Movies&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Documents/Movies&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PicturesLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;USER&gt;/Pictures&quot; [*], &quot;&lt;USER&gt;/&lt;APPNAME&gt;/Pictures&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Documents/Pictures&quot;, &quot;assets-library://&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TempLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/cache&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/tmp&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>HomeLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/files&quot;</db:para>
</db:td>
<db:td>
<db:para>system defined</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AppLocalDataLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/files&quot;, &quot;&lt;USER&gt;/&lt;APPNAME&gt;/files&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Library/Application Support&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>CacheLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/cache&quot;, &quot;&lt;USER&gt;/&lt;APPNAME&gt;/cache&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Library/Caches&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>StateLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/files/state&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GenericStateLocation (there is shared state)</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/files/state&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GenericDataLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;USER&gt;&quot; [*] or &quot;&lt;USER&gt;/&lt;APPNAME&gt;/files&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Library/Application Support&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>RuntimeLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/cache&quot;</db:para>
</db:td>
<db:td>
<db:para>not supported</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ConfigLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/files/settings&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Library/Preferences&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GenericConfigLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/files/settings&quot; (there is no shared settings)</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Library/Preferences&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DownloadLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;USER&gt;/Downloads&quot; [*], &quot;&lt;USER&gt;/&lt;APPNAME&gt;/Downloads&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Documents/Downloads&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GenericCacheLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/cache&quot; (there is no shared cache)</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Library/Caches&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AppDataLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/files&quot;, &quot;&lt;USER&gt;/&lt;APPNAME&gt;/files&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Library/Application Support&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AppConfigLocation</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/files/settings&quot;</db:para>
</db:td>
<db:td>
<db:para>&quot;&lt;APPROOT&gt;/Library/Preferences/&lt;APPNAME&gt;&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PublicShareLocation</db:para>
</db:td>
<db:td>
<db:para>not supported</db:para>
</db:td>
<db:td>
<db:para>not supported</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TemplatesLocation</db:para>
</db:td>
<db:td>
<db:para>not supported</db:para>
</db:td>
<db:td>
<db:para>not supported</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In the table above, &lt;APPNAME&gt; is usually the organization name, the application name, or both, or a unique name generated at packaging. Similarly, &lt;APPROOT&gt; is the location where this application is installed (often a sandbox). &lt;APPDIR&gt; is the directory containing the application executable.</db:para>
<db:para>The paths above should not be relied upon, as they may change according to OS configuration, locale, or they may change in future Qt versions.</db:para>
<db:note>
<db:para>On Android, applications with open files on the external storage (&lt;USER&gt; locations), will be killed if the external storage is unmounted.</db:para>
</db:note>
<db:note>
<db:para>On Android 6.0 (API 23) or higher, the &quot;WRITE_EXTERNAL_STORAGE&quot; permission must be requested at runtime when using <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link> or <db:link xlink:href="qstandardpaths.xml#standardLocations">QStandardPaths::standardLocations</db:link>.</db:para>
</db:note>
<db:note>
<db:para>On Android, reading/writing to GenericDataLocation needs the READ_EXTERNAL_STORAGE/WRITE_EXTERNAL_STORAGE permission granted.</db:para>
</db:note>
<db:note>
<db:para>[*] On Android 11 and above, public directories are no longer directly accessible in scoped storage mode. Thus, paths of the form &quot;&lt;USER&gt;/DirName&quot; are not returned. Instead, you can use <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> which uses the Storage Access Framework (SAF) to access such directories.</db:para>
</db:note>
<db:note>
<db:para>On iOS, if you do pass QStandardPaths::standardLocations(QStandardPaths::PicturesLocation).last() as argument to <db:link xlink:href="qfiledialog.xml#setDirectory">QFileDialog::setDirectory</db:link>(), a native image picker dialog will be used for accessing the user's photo album. The filename returned can be loaded using <db:link xlink:href="qfile.xml">QFile</db:link> and related APIs. This feature was added in Qt 5.5.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandardpaths.xml#writableLocation">writableLocation</db:link>()</db:member>
<db:member><db:link xlink:href="qstandardpaths.xml#standardLocations">standardLocations</db:link>()</db:member>
<db:member><db:link xlink:href="qstandardpaths.xml#displayName">displayName</db:link>()</db:member>
<db:member><db:link xlink:href="qstandardpaths.xml#locate">locate</db:link>()</db:member>
<db:member><db:link xlink:href="qstandardpaths.xml#locateAll">locateAll</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="displayName">
<db:title>[static] QString QStandardPaths::displayName(QStandardPaths::StandardLocation <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>displayName</db:methodname>
<db:methodparam>
<db:type>QStandardPaths::StandardLocation</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString displayName(QStandardPaths::StandardLocation type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a localized display name for the given location <db:code role="parameter">type</db:code> or an empty <db:link xlink:href="qstring.xml">QString</db:link> if no relevant location can be found.</db:para>
</db:section>
<db:section xml:id="findExecutable">
<db:title>[static] QString QStandardPaths::findExecutable(const QString &amp;<db:emphasis>executableName</db:emphasis>, const QStringList &amp;<db:emphasis>paths</db:emphasis> = QStringList())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>findExecutable</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>executableName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>paths</db:parameter>
<db:initializer>QStringList()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString findExecutable(const QString &amp;executableName, const QStringList &amp;paths)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds the executable named <db:code role="parameter">executableName</db:code> in the specified <db:code role="parameter">paths</db:code>, or the system paths if <db:code role="parameter">paths</db:code> is empty.</db:para>
<db:para>On most operating systems the system path is determined by the PATH environment variable. The directories where to search for the executable can be set in the paths argument. To search in both your own paths and the system paths, call findExecutable twice, once with paths set and once with paths empty. Symlinks are not resolved in order to preserve behavior for the case of executables whose behavior depends on the name they are invoked with.</db:para>
<db:note>
<db:para>On Windows, the usual executable extensions (from the PATHEXT environment variable) are automatically appended. For example, the findExecutable(&quot;foo&quot;) call finds foo.exe or foo.bat if present.</db:para>
</db:note>
<db:para>Returns the absolute file path to the executable, or an empty string if not found.</db:para>
<db:para>If the given <db:code role="parameter">executableName</db:code> is an absolute path pointing to an executable, its clean path is returned.</db:para>
</db:section>
<db:section xml:id="locate">
<db:title>[static] QString QStandardPaths::locate(QStandardPaths::StandardLocation <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>, QStandardPaths::LocateOptions <db:emphasis>options</db:emphasis> = LocateFile)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>locate</db:methodname>
<db:methodparam>
<db:type>QStandardPaths::StandardLocation</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStandardPaths::LocateOptions</db:type>
<db:parameter>options</db:parameter>
<db:initializer>LocateFile</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString locate(QStandardPaths::StandardLocation type, const QString &amp;fileName, QStandardPaths::LocateOptions options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds a file or directory called <db:code role="parameter">fileName</db:code> in the standard locations for <db:code role="parameter">type</db:code>.</db:para>
<db:para>The <db:code role="parameter">options</db:code> flag lets you specify whether to look for files or directories. By default, this flag is set to LocateFile.</db:para>
<db:para>Returns the absolute path to the first file or directory found, otherwise returns an empty string.</db:para>
</db:section>
<db:section xml:id="locateAll">
<db:title>[static] QStringList QStandardPaths::locateAll(QStandardPaths::StandardLocation <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>, QStandardPaths::LocateOptions <db:emphasis>options</db:emphasis> = LocateFile)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>locateAll</db:methodname>
<db:methodparam>
<db:type>QStandardPaths::StandardLocation</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStandardPaths::LocateOptions</db:type>
<db:parameter>options</db:parameter>
<db:initializer>LocateFile</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList locateAll(QStandardPaths::StandardLocation type, const QString &amp;fileName, QStandardPaths::LocateOptions options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds all files or directories by the name, <db:code role="parameter">fileName</db:code>, in the standard locations for <db:code role="parameter">type</db:code>.</db:para>
<db:para>The <db:code role="parameter">options</db:code> flag lets you specify whether to look for files or directories. By default, this flag is set to LocateFile.</db:para>
<db:para>Returns the list of all the files that were found.</db:para>
</db:section>
<db:section xml:id="setTestModeEnabled">
<db:title>[static] void QStandardPaths::setTestModeEnabled(bool <db:emphasis>testMode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setTestModeEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>testMode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTestModeEnabled(bool testMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">testMode</db:code> is true, this enables a special &quot;test mode&quot; in <db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link>, which changes writable locations to point to test directories. This prevents auto tests from reading or writing to the current user's configuration.</db:para>
<db:para>It affects the locations into which test programs might write files: GenericDataLocation, AppDataLocation, ConfigLocation, GenericConfigLocation, AppConfigLocation, StateLocation, GenericStateLocation, GenericCacheLocation, and CacheLocation. Other locations are not affected.</db:para>
<db:para>On Unix, XDG_DATA_HOME is set to ~/.qttest/share, XDG_CONFIG_HOME is set to ~/.qttest/config, XDG_STATE_HOME is set ~/.qttest/state and XDG_CACHE_HOME is set to ~/.qttest/cache.</db:para>
<db:para>On macOS, data goes to ~/.qttest/Application Support, cache goes to ~/.qttest/Cache, and config goes to ~/.qttest/Preferences.</db:para>
<db:para>On Windows, everything goes to a &quot;qttest&quot; directory under %APPDATA%.</db:para>
</db:section>
<db:section xml:id="standardLocations">
<db:title>[static] QStringList QStandardPaths::standardLocations(QStandardPaths::StandardLocation <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>standardLocations</db:methodname>
<db:methodparam>
<db:type>QStandardPaths::StandardLocation</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList standardLocations(QStandardPaths::StandardLocation type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns all the directories where files of <db:code role="parameter">type</db:code> belong.</db:para>
<db:para>The list of directories is sorted from high to low priority, starting with <db:link xlink:href="qstandardpaths.xml#writableLocation">writableLocation</db:link>() if it can be determined. This list is empty if no locations for type are defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandardpaths.xml#writableLocation">writableLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writableLocation">
<db:title>[static] QString QStandardPaths::writableLocation(QStandardPaths::StandardLocation <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>writableLocation</db:methodname>
<db:methodparam>
<db:type>QStandardPaths::StandardLocation</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString writableLocation(QStandardPaths::StandardLocation type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the directory where files of <db:code role="parameter">type</db:code> should be written to, or an empty string if the location cannot be determined.</db:para>
<db:note>
<db:para>The storage location returned may not exist; that is, it may need to be created by the system or the user.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
