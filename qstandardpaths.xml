<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QStandardPaths Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link> class provides methods for accessing standard paths.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStandardPaths</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class contains functions to query standard locations on the local filesystem, for common tasks such as user-specific directories or system-wide configuration directories.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="LocateOption-enum">
<db:title>enum QStandardPaths::LocateOption</db:title>
<db:bridgehead renderas="sect2">flags QStandardPaths::LocateOptions</db:bridgehead>
<db:para>This enum describes the different flags that can be used for controlling the behavior of <db:link xlink:href="qstandardpaths.xml#locate">QStandardPaths::locate</db:link> and <db:link xlink:href="qstandardpaths.xml#locateAll">QStandardPaths::locateAll</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::LocateFile</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>return only files</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::LocateDirectory</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>return only directories</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>LocateOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;LocateOption&gt;. </db:code>It stores an OR combination of <db:code>LocateOption</db:code> values.</db:para>
</db:section>
<db:section xml:id="StandardLocation-enum">
<db:title>enum QStandardPaths::StandardLocation</db:title>
<db:para>This enum describes the different locations that can be queried using methods such as <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>, <db:link xlink:href="qstandardpaths.xml#standardLocations">QStandardPaths::standardLocations</db:link>, and <db:link xlink:href="qstandardpaths.xml#displayName">QStandardPaths::displayName</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::DesktopLocation</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Returns the user's desktop directory.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::DocumentsLocation</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Returns the user's document.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::FontsLocation</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Returns the user's fonts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::ApplicationsLocation</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Returns the user's applications.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::MusicLocation</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Returns the user's music.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::MoviesLocation</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Returns the user's movies.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::PicturesLocation</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Returns the user's pictures.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::TempLocation</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Returns the system's temporary directory.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::HomeLocation</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Returns the user's home directory.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::DataLocation</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Returns a directory location where persistent application data can be stored. QCoreApplication::organizationName and QCoreApplication::applicationName are appended to the directory location returned for GenericDataLocation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::CacheLocation</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Returns a directory location where user-specific non-essential (cached) data should be written.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::GenericCacheLocation</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>Returns a directory location where user-specific non-essential (cached) data, shared across applications, should be written.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::GenericDataLocation</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Returns a directory location where persistent data shared across applications can be stored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::RuntimeLocation</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Returns a directory location where runtime communication files should be written. For instance unix local sockets.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::ConfigLocation</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Returns a directory location where user-specific configuration files should be written.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::GenericConfigLocation</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Returns a directory location where user-specific configuration files shared between multiple applications should be written. This is a generic value and the returned path is never empty.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:emphasis>::DownloadLocation</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>Returns a directory for user's downloaded files.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandardpaths.xml#writableLocation">writableLocation</db:link>()</db:member>
<db:member><db:link xlink:href="qstandardpaths.xml#standardLocations">standardLocations</db:link>()</db:member>
<db:member><db:link xlink:href="qstandardpaths.xml#displayName">displayName</db:link>()</db:member>
<db:member><db:link xlink:href="qstandardpaths.xml#locate">locate</db:link>()</db:member>
<db:member><db:link xlink:href="qstandardpaths.xml#locateAll">locateAll</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="displayName">
<db:title>[static] QString QStandardPaths::displayName(QStandardPaths::StandardLocation <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Returns a localized display name for the given location <db:code role="parameter">type</db:code> or an empty <db:link xlink:href="qstring.xml">QString</db:link> if no relevant location can be found.</db:para>
</db:section>
<db:section xml:id="locate">
<db:title>[static] QString QStandardPaths::locate(QStandardPaths::StandardLocation <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>, QStandardPaths::LocateOptions <db:emphasis>options</db:emphasis> = LocateFile)</db:title>
<db:para>Tries to find a file or directory called <db:code role="parameter">fileName</db:code> in the standard locations for <db:code role="parameter">type</db:code>.</db:para>
<db:para>The full path to the first file or directory (depending on <db:code role="parameter">options</db:code>) found is returned. If no such file or directory can be found, an empty string is returned.</db:para>
</db:section>
<db:section xml:id="locateAll">
<db:title>[static] int QStandardPaths::locateAll(QStandardPaths::StandardLocation <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>, QStandardPaths::LocateOptions <db:emphasis>options</db:emphasis> = LocateFile)</db:title>
<db:para>Tries to find all files or directories called <db:code role="parameter">fileName</db:code> in the standard locations for <db:code role="parameter">type</db:code>.</db:para>
<db:para>The <db:code role="parameter">options</db:code> flag allows to specify whether to look for files or directories.</db:para>
<db:para>Returns the list of all the files that were found.</db:para>
</db:section>
<db:section xml:id="setTestModeEnabled">
<db:title>[static] void QStandardPaths::setTestModeEnabled(bool <db:emphasis>testMode</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">testMode</db:code> is true, this enables a special &quot;test mode&quot; in <db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link>, which changes writable locations to point to test directories, in order to prevent auto tests from reading from or writing to the current user's configuration.</db:para>
<db:para>This affects the locations into which test programs might write files: <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">GenericDataLocation</db:link>, <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">DataLocation</db:link>, <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">ConfigLocation</db:link>, <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">GenericConfigLocation</db:link>, <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">GenericCacheLocation</db:link>, <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">CacheLocation</db:link>. Other locations are not affected.</db:para>
<db:para>On Unix, XDG_DATA_HOME is set to ~/.qttest/share, XDG_CONFIG_HOME is set to ~/.qttest/config, and XDG_CACHE_HOME is set to ~/.qttest/cache.</db:para>
<db:para>On Mac, data goes to &quot;~/.qttest/Application Support&quot;, cache goes to ~/.qttest/Cache, and config goes to ~/.qttest/Preferences.</db:para>
<db:para>On Windows, everything goes to a &quot;qttest&quot; directory under Application Data.</db:para>
</db:section>
<db:section xml:id="standardLocations">
<db:title>[static] int QStandardPaths::standardLocations(QStandardPaths::StandardLocation <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Returns all the directories where files of <db:code role="parameter">type</db:code> belong.</db:para>
<db:para>The list of directories is sorted from high to low priority, starting with <db:link xlink:href="qstandardpaths.xml#writableLocation">writableLocation</db:link>() if it can be determined. This list is empty if no locations for <db:code role="parameter">type</db:code> are defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandardpaths.xml#writableLocation">writableLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writableLocation">
<db:title>[static] QString QStandardPaths::writableLocation(QStandardPaths::StandardLocation <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Returns the directory where files of <db:code role="parameter">type</db:code> should be written to, or an empty string if the location cannot be determined.</db:para>
<db:note>
<db:para>The storage location returned can be a directory that does not exist; i.e., it may need to be created by the system or the user.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QStandardPaths</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="enableTestMode">
<db:title>[static, deprecated] void QStandardPaths::enableTestMode(bool <db:emphasis>testMode</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qstandardpaths.xml#setTestModeEnabled">QStandardPaths::setTestModeEnabled</db:link></db:para>
</db:section>
</db:section>
</db:section>
</db:article>
