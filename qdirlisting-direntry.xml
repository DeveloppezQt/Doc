<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>DirEntry Class</db:title>
<db:subtitle>QDirListing::DirEntry</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>DirEntry</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>DirEntry is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Dereferencing a valid <db:link xlink:href="qdirlisting-const-iterator.xml">QDirListing::const_iterator</db:link> returns a <db:link xlink:href="qdirlisting-direntry.xml">DirEntry</db:link> object.</db:para>
<db:para><db:link xlink:href="qdirlisting-direntry.xml">DirEntry</db:link> offers a subset of <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>'s API (for example, <db:link xlink:href="qdirlisting-direntry.xml#fileName">fileName</db:link>(), <db:link xlink:href="qdirlisting-direntry.xml#filePath">filePath</db:link>(), <db:link xlink:href="qdirlisting-direntry.xml#exists">exists</db:link>()). Internally, <db:link xlink:href="qdirlisting-direntry.xml">DirEntry</db:link> only constructs a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object if needed, that is, if the info hasn't been already fetched by other system functions. You can use <db:link xlink:href="qdirlisting-direntry.xml#fileInfo">DirEntry::fileInfo</db:link>() to get a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>. For example:</db:para>
<db:programlisting language="cpp">using ItFlag = QDirListing::IteratorFlag;
for (const auto &amp;dirEntry : QDirListing(u&quot;/etc&quot;_s, ItFlag::Recursive)) {
    // Faster
    if (dirEntry.fileName().endsWith(u&quot;.conf&quot;)) { /* ... */ }

    // This works, but might be potentially slower, since it has to construct a
    // QFileInfo, whereas (depending on the implementation) the fileName could
    // be known already
    if (dirEntry.fileInfo().fileName().endsWith(u&quot;.conf&quot;)) { /* ... */ }
}
using ItFlag = QDirListing::IteratorFlag;
for (const auto &amp;dirEntry : QDirListing(u&quot;/etc&quot;_s, ItFlag::Recursive)) {
    // Both approaches are the same, because DirEntry will have to construct
    // a QFileInfo to get this info (for example, by calling system stat())

    if (dirEntry.size() &gt;= 4'000 /* 4KB */) { /* ...*/ }
    if (dirEntry.fileInfo().size() &gt;= 4'000 /* 4KB */) { /* ... */ }
}
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="birthTime">
<db:title>QDateTime DirEntry::birthTime(const QTimeZone &amp;<db:emphasis>tz</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="fileTime">QDateTime DirEntry::fileTime(QFileDevice::FileTime <db:emphasis>type</db:emphasis>, const QTimeZone &amp;<db:emphasis>tz</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="lastModified">QDateTime DirEntry::lastModified(const QTimeZone &amp;<db:emphasis>tz</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="lastRead">QDateTime DirEntry::lastRead(const QTimeZone &amp;<db:emphasis>tz</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="metadataChangeTime">QDateTime DirEntry::metadataChangeTime(const QTimeZone &amp;<db:emphasis>tz</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="fileInfo">QFileInfo DirEntry::fileInfo() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="absoluteFilePath">QString DirEntry::absoluteFilePath() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="absolutePath">QString DirEntry::absolutePath() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="baseName">QString DirEntry::baseName() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="bundleName">QString DirEntry::bundleName() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="canonicalFilePath">QString DirEntry::canonicalFilePath() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="completeBaseName">QString DirEntry::completeBaseName() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="completeSuffix">QString DirEntry::completeSuffix() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="fileName">QString DirEntry::fileName() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="filePath">QString DirEntry::filePath() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="suffix">QString DirEntry::suffix() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="exists">bool DirEntry::exists() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="isDir">bool DirEntry::isDir() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="isExecutable">bool DirEntry::isExecutable() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="isFile">bool DirEntry::isFile() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="isHidden">bool DirEntry::isHidden() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="isReadable">bool DirEntry::isReadable() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="isSymLink">bool DirEntry::isSymLink() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="isWritable">bool DirEntry::isWritable() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="size">qint64 DirEntry::size() const</db:bridgehead>
<db:para>See the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> methods with the same names.</db:para>
</db:section>
</db:section>
</db:article>
