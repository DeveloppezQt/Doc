<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The Qt Resource System</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A platform-independent mechanism for storing binary files in an application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt resource system is a platform-independent mechanism for storing binary files in the application's executable. This is useful if your application always needs a certain set of files (icons, translation files, etc.) and you don't want to run the risk of losing the files.</db:para>
<db:para>The resource system is based on tight cooperation between <db:link xlink:href="qmake-manual.xml">qmake</db:link>, <db:link xlink:href="rcc.xml">rcc</db:link> (Qt's resource compiler), and QFile.</db:para>
<db:section xml:id="resource-collection-files-op-op-qrc">
<db:title>Resource Collection Files (.qrc)</db:title>
<db:anchor xml:id="resource-collection-files"/>
<db:para>The resources associated with an application are specified in a .qrc file, an XML-based file format that lists files on the disk and optionally assigns them a resource name that the application must use to access the resource.</db:para>
<db:para>Here's an example .qrc file:</db:para>
<db:programlisting language="cpp">&amp;lt;!DOCTYPE RCC&amp;gt;&amp;lt;RCC version=&quot;1.0&quot;&amp;gt;
&amp;lt;qresource&amp;gt;
    &amp;lt;file&amp;gt;images/copy.png&amp;lt;/file&amp;gt;
    &amp;lt;file&amp;gt;images/cut.png&amp;lt;/file&amp;gt;
    &amp;lt;file&amp;gt;images/new.png&amp;lt;/file&amp;gt;
    &amp;lt;file&amp;gt;images/open.png&amp;lt;/file&amp;gt;
    &amp;lt;file&amp;gt;images/paste.png&amp;lt;/file&amp;gt;
    &amp;lt;file&amp;gt;images/save.png&amp;lt;/file&amp;gt;
&amp;lt;/qresource&amp;gt;
&amp;lt;/RCC&amp;gt;
</db:programlisting>
<db:para>The resource files listed in the .qrc file are files that are part of the application's source tree. The specified paths are relative to the directory containing the .qrc file. Note that the listed resource files must be located in the same directory as the .qrc file, or one of its subdirectories.</db:para>
<db:para>Resource data can either be compiled into the binary and thus accessed immediately in application code, or a binary resource can be created and at a later point in application code registered with the resource system.</db:para>
<db:para>By default, resources are accessible in the application under the same file name as they have in the source tree, with a :/ prefix, or by a <db:link xlink:href="qurl-proxy.xml">URL</db:link> with a qrc scheme.</db:para>
<db:para>For example, the file path :/images/cut.png or the URL qrc:///images/cut.png would give access to the cut.png file, whose location in the application's source tree is images/cut.png. This can be changed using the file tag's alias attribute:</db:para>
<db:programlisting language="cpp">&amp;lt;file alias=&quot;cut-img.png&quot;&amp;gt;images/cut.png&amp;lt;/file&amp;gt;
</db:programlisting>
<db:para>The file is then accessible as :/cut-img.png from the application. It is also possible to specify a path prefix for all files in the .qrc file using the qresource tag's prefix attribute:</db:para>
<db:programlisting language="cpp">&amp;lt;qresource prefix=&quot;/myresources&quot;&amp;gt;
    &amp;lt;file alias=&quot;cut-img.png&quot;&amp;gt;images/cut.png&amp;lt;/file&amp;gt;
&amp;lt;/qresource&amp;gt;
</db:programlisting>
<db:para>In this case, the file is accessible as :/myresources/cut-img.png.</db:para>
<db:para>Some resources need to change based on the user's locale, such as translation files or icons. This is done by adding a lang attribute to the qresource tag, specifying a suitable locale string. For example:</db:para>
<db:programlisting language="cpp">&amp;lt;qresource&amp;gt;
    &amp;lt;file&amp;gt;cut.jpg&amp;lt;/file&amp;gt;
&amp;lt;/qresource&amp;gt;
&amp;lt;qresource lang=&quot;fr&quot;&amp;gt;
    &amp;lt;file alias=&quot;cut.jpg&quot;&amp;gt;cut_fr.jpg&amp;lt;/file&amp;gt;
&amp;lt;/qresource&amp;gt;
</db:programlisting>
<db:para>If the user's locale is French (i.e., QLocale::system().name() returns &quot;fr_FR&quot;), :/cut.jpg becomes a reference to the cut_fr.jpg image. For other locales, cut.jpg is used.</db:para>
<db:para>See the QLocale documentation for a description of the format to use for locale strings.</db:para>
<db:para>See QFileSelector for an additional mechanism to select locale-specific resources, in addition to the ability to select OS-specific and other features.</db:para>
<db:section xml:id="external-binary-resources">
<db:title>External Binary Resources</db:title>
<db:para>For an external binary resource to be created you must create the resource data (commonly given the .rcc extension) by passing the -binary switch to <db:link xlink:href="rcc.xml">rcc</db:link>. Once the binary resource is created you can register the resource with the QResource API.</db:para>
<db:para>For example, a set of resource data specified in a .qrc file can be compiled in the following way:</db:para>
<db:programlisting language="cpp">rcc -binary myresource.qrc -o myresource.rcc
</db:programlisting>
<db:para>In the application, this resource would be registered with code like this:</db:para>
<db:programlisting language="cpp">QResource::registerResource(&quot;/path/to/myresource.rcc&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="compiled-in-resources">
<db:title>Compiled-In Resources</db:title>
<db:para>For a resource to be compiled into the binary the .qrc file must be mentioned in the application's .pro file so that qmake knows about it. For example:</db:para>
<db:programlisting language="cpp">RESOURCES     = application.qrc
</db:programlisting>
<db:para>qmake will produce make rules to generate a file called qrc_application.cpp that is linked into the application. This file contains all the data for the images and other resources as static C++ arrays of compressed binary data. The qrc_application.cpp file is automatically regenerated whenever the .qrc file changes or one of the files that it refers to changes. If you don't use .pro files, you can either invoke rcc manually or add build rules to your build system.</db:para>
<db:mediaobject>
<db:alt>Building resources into an application</db:alt>
<db:imageobject>
<db:imagedata fileref="images/resources.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Currently, Qt always stores the data directly in the executable, even on Windows, macOS, and iOS, where the operating system provides native support for resources. This might change in a future Qt release.</db:para>
</db:section>
</db:section>
<db:section xml:id="compression">
<db:title>Compression</db:title>
<db:para>rcc attempts to compress the content to optimize disk space usage in the final binaries. By default, it will perform a heuristic check to determine whether compressing is worth it and will store the content uncompressed if it fails to sufficiently compress. To control the threshold, you can use the -threshold option, which tells rcc the percentage of the original file size that must be gained for it to store the file in compressed form.</db:para>
<db:programlisting language="cpp">rcc -threshold 25 myresources.qrc
</db:programlisting>
<db:para>The default value is &quot;70&quot;, indicating that the compressed file must be 70% smaller than the original (no more than 30% of the original file size).</db:para>
<db:para>It is possible to turn off compression, if desired. This can be useful if your resources already contain a compressed format, such as .png files, and you do not want to incur the CPU cost at build time to confirm that it can't be compressed. Another reason is if disk usage is not a problem and the application would prefer to keep the content as clean memory pages at runtime. You do this by giving the -no-compress command line argument.</db:para>
<db:programlisting language="cpp">rcc -no-compress myresources.qrc
</db:programlisting>
<db:para>rcc also gives you some control over the compression level and compression algorithm, for example:</db:para>
<db:programlisting language="cpp">rcc -compress 2 -compress-algo zlib myresources.qrc
</db:programlisting>
<db:para>rcc supports the following compression algorithms and compression levels:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>best: use the best algorithm among the ones below, at its highest compression level, to achieve the most compression at the expense of using a lot of CPU time during compilation. This value is useful in the XML file to indicate a file should be most compressed, regardless of which algorithms rcc supports.</db:para>
</db:listitem>
<db:listitem>
<db:para>zstd: use the <db:link xlink:href="https://zstd.net">Zstandard</db:link> library to compress contents. Valid compression levels range from 1 to 19, 1 is least compression (least CPU time) and 19 is the most compression (most CPU time). The default level is 14. A special value of 0 tells the zstd library to choose an implementation-defined default.</db:para>
</db:listitem>
<db:listitem>
<db:para>zlib: use the <db:link xlink:href="https://zlib.net">zlib</db:link> library to compress contents. Valid compression levels range from 1 to 9, with 1the least compression (least CPU time) and 9 the most compression (most CPU time). The special value 0 means &quot;no compression&quot; and should not be used. The default is implementation-defined, but usually is level 6.</db:para>
</db:listitem>
<db:listitem>
<db:para>none: no compression. This is the same as the -no-compress option.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Support for both Zstandard and zlib are optional. If a given library was not detected at compile time, attempting to pass -compress-algo for that library will result in an error. The default compression algorithm is zstd if it is enabled, zlib if not.</db:para>
</db:section>
<db:section xml:id="using-resources-in-the-application">
<db:title>Using Resources in the Application</db:title>
<db:para>In the application, resource paths can be used in most places instead of ordinary file system paths. In particular, you can pass a resource path instead of a file name to the QIcon, QImage, or QPixmap constructor:</db:para>
<db:programlisting language="cpp">    cutAct = new QAction(QIcon(&quot;:/images/cut.png&quot;), tr(&quot;Cu&amp;amp;t&quot;), this);
</db:programlisting>
<db:para>See the <db:link xlink:href="qtwidgets-mainwindows-application-example.xml">Application</db:link> example for an actual application that uses Qt's resource system to store its icons.</db:para>
<db:para>In memory, resources are represented by a tree of resource objects. The tree is automatically built at startup and used by QFile for resolving paths to resources. You can use a QDir initialized with &quot;:/&quot; to navigate through the resource tree from the root.</db:para>
<db:para>Qt's resources support the concept of a search path list. If you then refer to a resource with : instead of :/ as the prefix, the resource will be looked up using the search path list. The search path list is empty at startup; call QDir::addSearchPath() to add paths to it.</db:para>
</db:section>
<db:section xml:id="using-resources-in-a-library">
<db:title>Using Resources in a Library</db:title>
<db:para>If you have resources in a library, you need to force initialization of your resources by calling <db:link xlink:href="qdir-proxy.xml#Q_INIT_RESOURCE">Q_INIT_RESOURCE</db:link>() with the base name of the .qrc file. For example:</db:para>
<db:programlisting language="cpp">MyClass::MyClass() : BaseClass()
{
    Q_INIT_RESOURCE(resources);

    QFile file(&quot;:/myfile.dat&quot;);
    ...
}
</db:programlisting>
<db:para>This ensures that the resources are linked into the final application binary in the case of static linking. You should put the initialization code close to where the resources are used in your library, so that clients of your library will only link in the resources if they use the feature of the library that depends on them.</db:para>
<db:para>Note: As the resource initializers generated by rcc are declared in the global namespace, your calls to <db:link xlink:href="qdir-proxy.xml#Q_INIT_RESOURCE">Q_INIT_RESOURCE</db:link>() also need to be done outside of any namespace.</db:para>
<db:para>If the library includes resources that are not used internally, but instead exposed to clients of the library, the initialization needs to happen in the application code. For example:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    Q_INIT_RESOURCE(graphlib);

    QFile file(&quot;:/graph.png&quot;);
    ...
    return app.exec();
}
</db:programlisting>
<db:para>As before, this ensures that the resources are linked into the final application binary in the case of static linking, but also triggers loading of the library in the case of dynamic linking, such as plugins.</db:para>
<db:para>Similarly, if you must unload a set of resources explicitly (because a plugin is being unloaded or the resources are not valid any longer), you can force removal of your resources by calling <db:link xlink:href="qdir-proxy.xml#Q_CLEANUP_RESOURCE">Q_CLEANUP_RESOURCE</db:link>() with the same base name as above.</db:para>
<db:para>Note: The use of <db:link xlink:href="qdir-proxy.xml#Q_INIT_RESOURCE">Q_INIT_RESOURCE</db:link>() and <db:link xlink:href="qdir-proxy.xml#Q_CLEANUP_RESOURCE">Q_CLEANUP_RESOURCE</db:link>() is not necessary when the resource is built as part of the application.</db:para>
</db:section>
</db:article>
