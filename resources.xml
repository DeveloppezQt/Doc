<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The Qt Resource System</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A platform-independent mechanism for shipping resource files in an application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt resource system is a platform-independent mechanism for shipping resource files in an application. Use it if your application always needs a certain set of files (like icons, translation files, images), and you don't want to use system-specific means to package and locate these resources.</db:para>
<db:para>Most commonly, the resource files are embedded into your application executable, or in libraries and plugins that are loaded by the application executable. Alternatively, the resource files can also be stored in an <db:link xlink:href="resources.xml#external-resource-files">external resource file</db:link>.</db:para>
<db:para>The resource system is based on tight cooperation between Qt's rcc resource compiler, the build system, and the Qt runtime API.</db:para>
<db:note>
<db:para>Currently, the Qt resource system does not make use of any system-specific capabilities for handling resources, such as the ones on Windows, macOS, and iOS. This might change in a future Qt release.</db:para>
</db:note>
<db:section xml:id="the-qt-resource-compiler-rcc">
<db:title>The Qt Resource Compiler (rcc)</db:title>
<db:para>The <db:link xlink:href="">Resource Compiler (rcc)</db:link> command line tool reads resource files and generates either a C++ or Python source file, or an .rcc file.</db:para>
<db:para>The list of files and related metadata is passed to rcc in the form of a <db:link xlink:href="resources.xml#qt-resource-collection-file">Qt Resource Collection File</db:link>.</db:para>
<db:para>By default, rcc will generate C++ source code that is then compiled as part of an executable or library. The -g python option generates Python source code instead. The -binary option generates a binary archive that is by convention saved in an .rcc file and can be loaded at runtime.</db:para>
<db:note>
<db:para>While it is possible to run rcc from the command line, this is typically best left to a build system. See also the sections about <db:link xlink:href="resources.xml#qmake">qmake</db:link> and <db:link xlink:href="resources.xml#cmake">CMake</db:link> below.</db:para>
</db:note>
</db:section>
<db:section xml:id="qt-resource-collection-file-qrc">
<db:title>Qt Resource Collection File (.qrc)</db:title>
<db:anchor xml:id="qt-resource-collection-file"/>
<db:anchor xml:id="resource-collection-files"/>
<db:para>A .qrc file is an XML document that enumerates local files to be included as runtime resources. It serves as input to rcc.</db:para>
<db:para>Here's an example .qrc file:</db:para>
<db:programlisting language="cpp">&lt;RCC&gt;
    &lt;qresource prefix=&quot;/&quot;&gt;
        &lt;file&gt;images/copy.png&lt;/file&gt;
        &lt;file&gt;images/cut.png&lt;/file&gt;
        &lt;file&gt;images/new.png&lt;/file&gt;
        &lt;file&gt;images/open.png&lt;/file&gt;
        &lt;file&gt;images/paste.png&lt;/file&gt;
        &lt;file&gt;images/save.png&lt;/file&gt;
    &lt;/qresource&gt;
&lt;/RCC&gt;

</db:programlisting>
<db:para>Each &lt;file&gt; element in the XML identifies a file in the application's source tree. The path is resolved relative to the directory containing the .qrc file.</db:para>
<db:para>The path is also used by default to identify the file's content at runtime. That is, the file titlebarLeft.png will be available in the resource system as :/res/titlebarLeft.png or qrc:/res/titlebarLeft.png. To override this default run-time name, see <db:link xlink:href="resources.xml#prefixes">Prefixes</db:link> and <db:link xlink:href="resources.xml#aliases">Aliases</db:link>.</db:para>
<db:para><db:emphasis>Qt Creator</db:emphasis>, <db:emphasis>Qt Design Studio</db:emphasis>, Qt Widgets Designer, and <db:emphasis>Qt Visual Studio Tools</db:emphasis> allow you to create, inspect and edit .qrc files through a convenient user interface. Except for Qt Widgets Designer, they also provide wizards for projects using the Qt resource system.</db:para>
</db:section>
<db:section xml:id="build-system-integration">
<db:title>Build System Integration</db:title>
<db:para>The processing of resource files with rcc is typically done at the time the application is built. Several build tools have dedicated support for this, including <db:link xlink:href="resources.xml#cmake">CMake</db:link> and <db:link xlink:href="resources.xml#qmake">qmake</db:link>.</db:para>
<db:section xml:id="cmake">
<db:title>CMake</db:title>
<db:para>If CMAKE_AUTORCC is enabled, you can just add .qrc files as sources to your executable or library. The referenced resource files will then be embedded into the binary:</db:para>
<db:programlisting language="cpp">set(CMAKE_AUTORCC ON)

qt_add_executable(my_app
    application.qrc
    main.cpp
)
</db:programlisting>
<db:para>See <db:link xlink:href="https://cmake.org/cmake/help/latest/prop_tgt/AUTORCC.html">CMake's AUTORCC documentation</db:link> for more details about AUTORCC.</db:para>
<db:para>An alternative to AUTORCC is using Qt6Core's CMake function <db:link xlink:href="qt-add-resources.xml">qt_add_resources</db:link>, which gives more control over the creation of resources. For example, it allows you to specify the content of the resource directly in the project file without writing a .qrc file first:</db:para>
<db:programlisting language="cpp">qt_add_resources(my_app &quot;app_images&quot;
    PREFIX &quot;/&quot;
    FILES
        images/copy.png
        images/cut.png
        images/new.png
        images/open.png
        images/paste.png
        images/save.png
)
</db:programlisting>
<db:para>Finally, <db:link xlink:href="">qt_add_qml_module</db:link> allows you to embed Qt Quick resources into the resource system of your application. The function is defined in the Qml component of the Qt6 CMake package.</db:para>
</db:section>
<db:section xml:id="qmake">
<db:title>qmake</db:title>
<db:para>qmake supports handing resources with the RESOURCES variable. If you add a .qrc file path to the variable, the listed resource files will be embedded into the generated library or executable:</db:para>
<db:programlisting language="cpp">RESOURCES = application.qrc
</db:programlisting>
<db:para>This creates a resource of several .png files, that are addressable like this: &quot;:/res/titlebarLeft.png&quot;.</db:para>
<db:para>If the directory layout of the files you want to embed into the resource doesn't match the expectations of the application, you can specify resources.base. base is a path prefix that denotes the root point of the file's alias. In the example above, if resources.base is set to &quot;res&quot;, then titlebarLeft.png is addressable as &quot;:/titlebarLeft.png&quot;.</db:para>
</db:section>
</db:section>
<db:section xml:id="runtime-api">
<db:title>Runtime API</db:title>
<db:para>Qt API that deals with iterating and reading files has built-in support for the Qt Resource System. You can pass a resource path instead of a local file path to <db:link xlink:href="qfile.xml">QFile</db:link> and <db:link xlink:href="qdir.xml">QDir</db:link>, but also for instance to the QIcon, QImage, and QPixmap constructors:</db:para>
<db:programlisting language="cpp">    cutAct = new QAction(QIcon(&quot;:/images/cut.png&quot;), tr(&quot;Cu&amp;t&quot;), this);
</db:programlisting>
<db:para>The : prefix makes it explicit that &quot;/images/cut.png&quot; should be loaded from the Qt Resource System.</db:para>
<db:para>You can also reference the Qt resource system through a <db:link xlink:href="qurl.xml">QUrl</db:link>. Use the qrc scheme in this case:</db:para>
<db:programlisting language="cpp">    QQmlApplicationEngine engine;
    engine.load(QUrl(&quot;qrc:/myapp/main.qml&quot;));
</db:programlisting>
</db:section>
<db:section xml:id="advanced-topics">
<db:title>Advanced Topics</db:title>
<db:section xml:id="prefixes">
<db:title>Prefixes</db:title>
<db:para>A .qrc file can set a prefix to be added to each local file name, given in a &lt;file&gt; element, to get the name by which the file shall be known within the resource system.</db:para>
<db:para>Prefixes allow you to structure the resources, avoiding clashes between resource files added through different .qrc files in different libraries or plugins.</db:para>
<db:note>
<db:para>The /qt and /qt-project.org prefixes are reserved for documented use cases in Qt. The <db:link xlink:href="">qt.conf</db:link> file is for instance looked up in :/qt/etc/qt.conf or qrc:/qt/etc/qt.conf.</db:para>
</db:note>
</db:section>
<db:section xml:id="aliases">
<db:title>Aliases</db:title>
<db:para>Sometimes it is convenient to make a resource file available under a different path at runtime. .qrc files allow this by setting an alias attribute:</db:para>
<db:programlisting language="cpp">&lt;file alias=&quot;cut-img.png&quot;&gt;images/cut.png&lt;/file&gt;
</db:programlisting>
<db:para>The file is from the application then only accessible as :/cut-img.png or qrc:/cut-img.png.</db:para>
</db:section>
<db:section xml:id="discarding-the-file-contents">
<db:title>Discarding the file contents</db:title>
<db:para>Sometimes you want to add a file node to the resource file system but don't actually want to add the file contents. .qrc files allow this by setting the empty attribute to true.</db:para>
<db:programlisting language="cpp">&lt;file empty=&quot;true&quot;&gt;Button.qml&lt;/file&gt;
</db:programlisting>
<db:para>The resulting file is then still accessible from the application, but its contents are empty.</db:para>
<db:para>This is useful to strip QML source code from an application binary.</db:para>
<db:note>
<db:para>If you omit the QML source code from the binary, the QML engine has to rely on the compilation units created by qmlcachegen or qmlsc. Those are tied to the specific version of Qt they were built with. If you change the version of Qt your application uses, they can't be loaded anymore.</db:para>
</db:note>
</db:section>
<db:section xml:id="language-selectors">
<db:title>Language Selectors</db:title>
<db:para>Some resources need to change based on the user's locale, such as translation files or icons. <db:link xlink:href="resources.xml#resource-collection-files">Resource Collection Files</db:link> support this through a lang attribute to the qresource tag, specifying a suitable locale string. For example:</db:para>
<db:programlisting language="cpp">&lt;qresource&gt;
    &lt;file&gt;cut.jpg&lt;/file&gt;
&lt;/qresource&gt;
&lt;qresource lang=&quot;fr&quot;&gt;
    &lt;file alias=&quot;cut.jpg&quot;&gt;cut_fr.jpg&lt;/file&gt;
&lt;/qresource&gt;
</db:programlisting>
<db:para>If the user's locale is French (i.e., <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().language() is French), :/cut.jpg or qrc:/cut.jpg becomes a reference to the cut_fr.jpg image. For other locales, cut.jpg is used.</db:para>
<db:para>See the <db:link xlink:href="qlocale.xml">QLocale</db:link> documentation for a description of the format to use for locale strings.</db:para>
<db:para>See <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> for an additional mechanism to select locale-specific resources.</db:para>
</db:section>
<db:section xml:id="embedding-large-files">
<db:title>Embedding Large Files</db:title>
<db:para>By default, rcc embeds the resource files into executables in the form of C++ arrays. This can be problematic especially for large resources.</db:para>
<db:para>If the compiler takes too long, or even fails because of memory overflow, you can opt into a special mode where the resources are embedded as part of a two-step process. The C++ compiler only reserves enough space in the target executable or library for the resources. The actual embedding of the resource file's content and metadata is then done after the compilation and linking phase, through another rcc call.</db:para>
<db:para>For CMake, you need to use the <db:link xlink:href="qt-add-bigresources.xml">qt_add_big_resources</db:link> function.</db:para>
</db:section>
<db:section xml:id="external-resource-files">
<db:title>External Resource Files</db:title>
<db:para>An alternative to embedding the resource files into the binary is to store them in a separate .rcc file. rcc allows this with the -binary option. Such a .rcc file must then be loaded at runtime with <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
<db:para>For example, a set of resource data specified in a .qrc file can be compiled in the following way:</db:para>
<db:programlisting language="cpp">rcc -binary myresource.qrc -o myresource.rcc
</db:programlisting>
<db:para>In the application, this resource would be registered with code like this:</db:para>
<db:programlisting language="cpp">QResource::registerResource(&quot;/path/to/myresource.rcc&quot;);
</db:programlisting>
<db:para>If you use CMake, you can use the <db:link xlink:href="qt-add-binary-resources.xml">qt_add_binary_resources</db:link> function to schedule the rcc call above:</db:para>
<db:programlisting language="cpp">qt_add_binary_resources(resources application.qrc DESTINATION application.rcc)
add_dependencies(my_app resources)
</db:programlisting>
</db:section>
<db:section xml:id="resources-in-a-qt-for-python-application">
<db:title>Resources in a Qt for Python application</db:title>
<db:para>The resource collection file is converted to a Python module by using the resource compiler rcc:</db:para>
<db:programlisting language="cpp">rcc -g python mainwindow.qrc &gt; mainwindow_rc.py
</db:programlisting>
<db:para>The module can then be imported in the application:</db:para>
<db:programlisting language="cpp">import mainwindow_rc.py
</db:programlisting>
</db:section>
<db:section xml:id="compression">
<db:title>Compression</db:title>
<db:para>rcc attempts to compress the content to optimize disk space usage in the final binaries. By default, it will perform a heuristic check to determine whether compressing is worth it and will store the content uncompressed if it fails to sufficiently compress. To control the threshold, you can use the -threshold option, which tells rcc the percentage of the original file size that must be gained for it to store the file in compressed form.</db:para>
<db:programlisting language="cpp">rcc -threshold 25 myresources.qrc
</db:programlisting>
<db:para>The default value is &quot;70&quot;, indicating that the compressed file must be 70% smaller than the original (no more than 30% of the original file size).</db:para>
<db:para>It is possible to turn off compression if desired. This can be useful if your resources already contain a compressed format, such as .png files, and you do not want to incur the CPU cost at build time to confirm that it can't be compressed. Another reason is if disk usage is not a problem and the application would prefer to keep the content as clean memory pages at runtime. You do this by giving the -no-compress command line argument.</db:para>
<db:programlisting language="cpp">rcc -no-compress myresources.qrc
</db:programlisting>
<db:para>rcc also gives you some control over the compression level and compression algorithm, for example:</db:para>
<db:programlisting language="cpp">rcc -compress 2 -compress-algo zlib myresources.qrc
</db:programlisting>
<db:para>It is also possible to use compress, threshold as attributes in a .qrc file tag. For selecting the algorithm, set the compression-algorithm attribute.</db:para>
<db:programlisting language="cpp">&lt;qresource&gt;
    &lt;file compress=&quot;1&quot; compression-algorithm=&quot;zstd&quot;&gt;data.txt&lt;/file&gt;
&lt;/qresource&gt;
</db:programlisting>
<db:para>The above will select the zstd algorithm with compression level 1.</db:para>
<db:para>rcc supports the following compression algorithms and compression levels:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>best: use the best algorithm among the ones below, at its highest compression level, to achieve the most compression at the expense of using a lot of CPU time during compilation. This value is useful in the XML file to indicate a file should be most compressed, regardless of which algorithms rcc supports.</db:para>
</db:listitem>
<db:listitem>
<db:para>zstd: use the <db:link xlink:href="https://facebook.github.io/zstd/">Zstandard</db:link> library to compress contents. Valid compression levels range from 1 to 19, 1 is least compression (least CPU time) and 19 is the most compression (most CPU time). The default level is 14. A special value of 0 tells the zstd library to choose an implementation-defined default.</db:para>
</db:listitem>
<db:listitem>
<db:para>zlib: use the <db:link xlink:href="https://zlib.net">zlib</db:link> library to compress contents. Valid compression levels range from 1 to 9, with 1 applying the least compression (least CPU time) and 9 the most compression (most CPU time). The special value 0 means &quot;no compression&quot; and should not be used. The default is implementation-defined, but usually is level 6.</db:para>
</db:listitem>
<db:listitem>
<db:para>none: no compression. This is the same as the -no-compress option.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Support for both Zstandard and zlib are optional. If a given library was not detected at compile time, attempting to pass -compress-algo for that library will result in an error. The default compression algorithm is zstd if it is enabled, zlib if not.</db:para>
</db:section>
<db:section xml:id="explicit-loading-and-unloading-of-embedded-resources">
<db:title>Explicit Loading and Unloading of Embedded Resources</db:title>
<db:para>Resources embedded in C++ executable or library code are automatically registered to the Qt resource system in a constructor of an internal global variable. Since the global variables are initialized before main() runs, the resources are available when the program starts to run.</db:para>
<db:para>When embedding resources in <db:emphasis>static</db:emphasis> libraries, the C++ linker might remove the static variables that register the resources. If you embed resources in a static library, you therefore need to explicitly register your resources by calling <db:link xlink:href="qtresource-qtcore-proxy.xml#Q_INIT_RESOURCE">Q_INIT_RESOURCE</db:link>() with the base name of the .qrc file. For example:</db:para>
<db:programlisting language="cpp">MyClass::MyClass() : BaseClass()
{
    Q_INIT_RESOURCE(resources);

    QFile file(&quot;:/myfile.dat&quot;);
    ...
}
</db:programlisting>
<db:para>You can also explicitly remove registered resources from the application, for instance when unloading a plugin. Use <db:link xlink:href="qtresource-qtcore-proxy.xml#Q_CLEANUP_RESOURCE">Q_CLEANUP_RESOURCE</db:link>() for this.</db:para>
<db:para>Note: As the resource initializers generated by rcc are declared in the global namespace, your calls to <db:link xlink:href="qtresource-qtcore-proxy.xml#Q_INIT_RESOURCE">Q_INIT_RESOURCE</db:link>() and <db:link xlink:href="qtresource-qtcore-proxy.xml#Q_CLEANUP_RESOURCE">Q_CLEANUP_RESOURCE</db:link>() need to be done outside any namespace.</db:para>
</db:section>
</db:section>
</db:article>
