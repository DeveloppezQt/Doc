<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Chart Themes Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows the look and feel of the different built-in themes.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example shows the look and feel of the different built-in themes for some of the supported chart types.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_chartthemes_light.png"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_chartthemes_brown_sand.png"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_chartthemes_blue_cerulean.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-charts">
<db:title>Creating Charts</db:title>
<db:para>The charts of different types are generated and added to the layout separately. For example, the line chart is created as follows. The creation of other chart types is similar.</db:para>
<db:para>First a chart is created.</db:para>
<db:programlisting language="cpp">QChart *chart = new QChart();
chart-&amp;gt;setTitle(&quot;Line chart&quot;);
</db:programlisting>
<db:para>A common set of random data is generated and placed in a list. This list is used in each chart type to add data to the series of the chart. For the line series, <db:link xlink:href="qlineseries.xml">QLineSeries</db:link> instances are created and added to the chart.</db:para>
<db:programlisting language="cpp">QString name(&quot;Series &quot;);
int nameIndex = 0;
for (const DataList &amp;amp;list : m_dataTable) {
    QLineSeries *series = new QLineSeries(chart);
    for (const Data &amp;amp;data : list)
        series-&amp;gt;append(data.first);
    series-&amp;gt;setName(name + QString::number(nameIndex));
    nameIndex++;
    chart-&amp;gt;addSeries(series);
}
</db:programlisting>
<db:para>Default axes are created for the line series. We also specify ranges for the axes based on the range of the data used for the series.</db:para>
<db:programlisting language="cpp">chart-&amp;gt;createDefaultAxes();
chart-&amp;gt;axes(Qt::Horizontal).first()-&amp;gt;setRange(0, m_valueMax);
chart-&amp;gt;axes(Qt::Vertical).first()-&amp;gt;setRange(0, m_valueCount);
</db:programlisting>
<db:para>We also want to add more space between the labels and the y-axes. For this we specify a label format that adds space characters to the labels.</db:para>
<db:programlisting language="cpp">// Add space to label to add space between labels and axis
QValueAxis *axisY = qobject_cast&amp;lt;QValueAxis*&amp;gt;(chart-&amp;gt;axes(Qt::Vertical).first());
Q_ASSERT(axisY);
axisY-&amp;gt;setLabelFormat(&quot;%.1f  &quot;);
</db:programlisting>
<db:para>Finally the line chart is added to the grid layout.</db:para>
<db:programlisting language="cpp">chartView = new QChartView(createLineChart());
m_ui-&amp;gt;gridLayout-&amp;gt;addWidget(chartView, 1, 2);
</db:programlisting>
</db:section>
<db:section xml:id="changing-theme">
<db:title>Changing Theme</db:title>
<db:para>The user can select a built-in theme to be used in the example. This theme is then applied to all charts in the layout.</db:para>
<db:programlisting language="cpp">QChart::ChartTheme theme = static_cast&amp;lt;QChart::ChartTheme&amp;gt;(
            m_ui-&amp;gt;themeComboBox-&amp;gt;itemData(m_ui-&amp;gt;themeComboBox-&amp;gt;currentIndex()).toInt());
chartView-&amp;gt;chart()-&amp;gt;setTheme(theme);
</db:programlisting>
<db:para>In order to give the result a more harmonious look, the background palette of the application is customized to match the selected theme. The <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Window</db:link> and <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::WindowText</db:link> roles are set based on the selected theme.</db:para>
<db:programlisting language="cpp">QPalette pal = window()-&amp;gt;palette();
if (theme == QChart::ChartThemeLight) {
    pal.setColor(QPalette::Window, QRgb(0xf0f0f0));
    pal.setColor(QPalette::WindowText, QRgb(0x404044));
</db:programlisting>
</db:section>
<db:section xml:id="changing-animation-legend-and-anti-aliasing">
<db:title>Changing Animation, Legend and Anti-Aliasing</db:title>
<db:para>In this example, it is also possible to see how changing animation, legend and anti-aliasing affects the appearance of the chart.</db:para>
<db:para>Based on the user's selection, the used animation type is set on each chart. It is possible to have no animations in the chart, or have animations for grid axis or series, or both.</db:para>
<db:programlisting language="cpp">QChart::AnimationOptions options(
            m_ui-&amp;gt;animatedComboBox-&amp;gt;itemData(m_ui-&amp;gt;animatedComboBox-&amp;gt;currentIndex()).toInt());
if (!m_charts.isEmpty() &amp;amp;&amp;amp; m_charts.at(0)-&amp;gt;chart()-&amp;gt;animationOptions() != options) {
    for (QChartView *chartView : charts)
        chartView-&amp;gt;chart()-&amp;gt;setAnimationOptions(options);
}
</db:programlisting>
<db:para>The chart can be shown with a legend. The legend can be aligned to different sides of the chart.</db:para>
<db:programlisting language="cpp">Qt::Alignment alignment(
            m_ui-&amp;gt;legendComboBox-&amp;gt;itemData(m_ui-&amp;gt;legendComboBox-&amp;gt;currentIndex()).toInt());

if (!alignment) {
    for (QChartView *chartView : charts)
        chartView-&amp;gt;chart()-&amp;gt;legend()-&amp;gt;hide();
} else {
    for (QChartView *chartView : charts) {
        chartView-&amp;gt;chart()-&amp;gt;legend()-&amp;gt;setAlignment(alignment);
        chartView-&amp;gt;chart()-&amp;gt;legend()-&amp;gt;show();
    }
}
</db:programlisting>
<db:para>The user can also see how changing anti-aliasing option changes the appearance of the chart. Anti-aliasing is updated based on the user's selection.</db:para>
<db:programlisting language="cpp">bool checked = m_ui-&amp;gt;antialiasCheckBox-&amp;gt;isChecked();
for (QChartView *chart : charts)
    chart-&amp;gt;setRenderHint(QPainter::Antialiasing, checked);
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/chartthemes?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
