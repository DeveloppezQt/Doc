<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebSocket client example</db:title>
<db:productname>QtWebSockets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebSockets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A sample <db:link xlink:href="qml-qtwebsockets-websocket.xml">WebSocket</db:link> client that sends a message and displays the message that it receives back.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>The EchoClient example implements a <db:link xlink:href="qml-qtwebsockets-websocket.xml">WebSocket</db:link> client that sends a message to a <db:link xlink:href="qml-qtwebsockets-websocket.xml">WebSocket</db:link> server and dumps the answer that it gets back. This example should ideally be used with the EchoServer example.</db:para>
</db:section>
<db:section xml:id="code">
<db:title>Code</db:title>
<db:para>We start by connecting to the `connected()` signal.</db:para>
<db:programlisting language="cpp">EchoClient::EchoClient(const QUrl &amp;url, bool debug, QObject *parent) :
    QObject(parent),
    m_url(url),
    m_debug(debug)
{
    if (m_debug)
        qDebug() &lt;&lt; &quot;WebSocket server:&quot; &lt;&lt; url;
    connect(&amp;m_webSocket, &amp;QWebSocket::connected, this, &amp;EchoClient::onConnected);
    connect(&amp;m_webSocket, &amp;QWebSocket::disconnected, this, &amp;EchoClient::closed);
    m_webSocket.open(QUrl(url));
}
</db:programlisting>
<db:para>After the connection, we open the socket to the given <db:code role="parameter">url</db:code>.</db:para>
<db:programlisting language="cpp">void EchoClient::onConnected()
{
    if (m_debug)
        qDebug() &lt;&lt; &quot;WebSocket connected&quot;;
    connect(&amp;m_webSocket, &amp;QWebSocket::textMessageReceived,
            this, &amp;EchoClient::onTextMessageReceived);
    m_webSocket.sendTextMessage(QStringLiteral(&quot;Hello, world!&quot;));
}
</db:programlisting>
<db:para>When the client is connected successfully, we connect to the `onTextMessageReceived()` signal, and send out &quot;Hello, world!&quot;. If connected with the EchoServer, we will receive the same message back.</db:para>
<db:programlisting language="cpp">void EchoClient::onTextMessageReceived(QString message)
{
    if (m_debug)
        qDebug() &lt;&lt; &quot;Message received:&quot; &lt;&lt; message;
    m_webSocket.close();
}
</db:programlisting>
<db:para>Whenever a message is received, we write it out.</db:para>
</db:section>
</db:article>
