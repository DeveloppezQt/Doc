<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Object Model</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A description of the powerful features made possible by Qt's dynamic object model.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The standard C++ object model provides very efficient runtime support for the object paradigm. But its static nature is inflexibile in certain problem domains. Graphical user interface programming is a domain that requires both runtime efficiency and a high level of flexibility. Qt provides this, by combining the speed of C++ with the flexibility of the Qt Object Model.</db:para>
<db:para>Qt adds these features to C++:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>a very powerful mechanism for seamless object communication called <db:link xlink:href="signalsandslots.xml">signals and slots</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>queryable and designable <db:link xlink:href="properties.xml">object properties</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>powerful <db:link xlink:href="eventsandfilters.xml">events and event filters</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>contextual <db:link xlink:href="internationalization.xml">string translation for internationalization</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>sophisticated interval driven <db:link xlink:href="timers.xml">timers</db:link> that make it possible to elegantly integrate many tasks in an event-driven GUI</db:para>
</db:listitem>
<db:listitem>
<db:para>hierarchical and queryable <db:link xlink:href="objecttrees.xml">object trees</db:link> that organize object ownership in a natural way</db:para>
</db:listitem>
<db:listitem>
<db:para>guarded pointers (<db:link xlink:href="qpointer.xml">QPointer</db:link>) that are automatically set to 0 when the referenced object is destroyed, unlike normal C++ pointers which become dangling pointers when their objects are destroyed</db:para>
</db:listitem>
<db:listitem>
<db:para>a <db:link xlink:href="metaobjects.xml#qobjectcast">dynamic cast</db:link> that works across library boundaries.</db:para>
</db:listitem>
<db:listitem>
<db:para>support for <db:link xlink:href="custom-types.xml">custom type</db:link> creation.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Many of these Qt features are implemented with standard C++ techniques, based on inheritance from QObject. Others, like the object communication mechanism and the dynamic property system, require the <db:link xlink:href="metaobjects.xml">Meta-Object System</db:link> provided by Qt's own <db:link xlink:href="moc.xml">Meta-Object Compiler (moc)</db:link>.</db:para>
<db:para>The meta-object system is a C++ extension that makes the language better suited to true component GUI programming.</db:para>
<db:section xml:id="important-classes">
<db:title>Important Classes</db:title>
<db:para>These classes form the basis of the Qt Object Model.</db:para>
<db:variablelist role="objectmodel">
<db:varlistentry>
<db:term><db:link xlink:href="qmetaobject.xml" xlink:role="class">QMetaObject</db:link></db:term>
<db:listitem>
<db:para>The QMetaObject class contains meta-information about Qt objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmetatype.xml" xlink:role="class">QMetaType</db:link></db:term>
<db:listitem>
<db:para>The QMetaType class manages named types in the meta-object system.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qpointer.xml" xlink:role="class">QPointer</db:link></db:term>
<db:listitem>
<db:para>The QPointer class is a template class that provides guarded pointers to QObject.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsignalblocker.xml" xlink:role="class">QSignalBlocker</db:link></db:term>
<db:listitem>
<db:para>Exception-safe wrapper around QObject::blockSignals().</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:anchor xml:id="identity-vs-value"/>
</db:section>
<db:section xml:id="qt-objects-identity-vs-value">
<db:title>Qt Objects: Identity vs Value</db:title>
<db:para>Some of the added features listed above for the Qt Object Model, require that we think of Qt Objects as identities, not values. Values are copied or assigned; identities are cloned. Cloning means to create a new identity, not an exact copy of the old one. For example, twins have different identities. They may look identical, but they have different names, different locations, and may have completely different social networks.</db:para>
<db:para>Then cloning an identity is a more complex operation than copying or assigning a value. We can see what this means in the Qt Object Model.</db:para>
<db:para><db:emphasis role="bold">A Qt Object...</db:emphasis></db:para>
<db:itemizedlist>
<db:listitem>
<db:para>might have a unique <db:link xlink:href="">QObject::objectName()</db:link>. If we copy a Qt Object, what name should we give the copy?</db:para>
</db:listitem>
<db:listitem>
<db:para>has a location in an <db:link xlink:href="objecttrees.xml">object hierarchy</db:link>. If we copy a Qt Object, where should the copy be located?</db:para>
</db:listitem>
<db:listitem>
<db:para>can be connected to other Qt Objects to emit signals to them or to receive signals emitted by them. If we copy a Qt Object, how should we transfer these connections to the copy?</db:para>
</db:listitem>
<db:listitem>
<db:para>can have <db:link xlink:href="properties.xml">new properties</db:link> added to it at runtime that are not declared in the C++ class. If we copy a Qt Object, should the copy include the properties that were added to the original?</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For these reasons, Qt Objects should be treated as identities, not as values. Identities are cloned, not copied or assigned, and cloning an identity is a more complex operation than copying or assigning a value. Therefore, QObject and all subclasses of QObject (direct or indirect) have their <db:link xlink:href="">copy constructor and assignment operator</db:link> disabled.</db:para>
</db:section>
</db:article>
