<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>StringLiterals Namespace</db:title>
<db:subtitle>Qt::Literals::StringLiterals</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qt-literals-stringliterals.xml">StringLiterals</db:link> namespace declares string literal operators for Qt types.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QString</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The inline <db:link xlink:href="qt-literals-stringliterals.xml">Qt::Literals::StringLiterals</db:link> namespace declares string literal operators for Qt types. Because both <db:code>Literals</db:code> and <db:code>StringLiterals</db:code> namespaces are declared as inline, the symbols from this namespace can be accessed by adding one of the following to your code:</db:para>
<db:programlisting language="cpp">// Makes visible only the literal operators declared in StringLiterals
using namespace Qt::Literals::StringLiterals;

// Makes visible literal operators declared in all inline namespaces
// inside Literals
using namespace Qt::Literals;

// Makes visible all symbols (including all literal operators) declared
// in the Qt namespace
using namespace Qt;
</db:programlisting>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="operator-22-22_L1">
<db:title>[constexpr, since 6.4] QLatin1Char operator&quot;&quot;_L1(char <db:emphasis>ch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QLatin1Char</db:type>
<db:methodname>operator&quot;&quot;_L1</db:methodname>
<db:methodparam>
<db:type>char</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1Char operator&quot;&quot;_L1(char ch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Literal operator that creates a <db:link xlink:href="qlatin1char.xml">QLatin1Char</db:link> out of <db:code role="parameter">ch</db:code>.</db:para>
<db:para>The following code creates a <db:link xlink:href="qlatin1char.xml">QLatin1Char</db:link>:</db:para>
<db:programlisting language="cpp">using namespace Qt::Literals::StringLiterals;

auto ch = 'a'_L1;
</db:programlisting>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-literals-stringliterals.xml">Qt::Literals::StringLiterals</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-22-22_L1">
<db:title>[constexpr, since 6.4] QLatin1StringView operator&quot;&quot;_L1(const char *<db:emphasis>str</db:emphasis>, size_t <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QLatin1StringView</db:type>
<db:methodname>operator&quot;&quot;_L1</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>size_t</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLatin1StringView operator&quot;&quot;_L1(const char *str, size_t size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Literal operator that creates a <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link> out of the first <db:code role="parameter">size</db:code> characters in the char string literal <db:code role="parameter">str</db:code>.</db:para>
<db:para>The following code creates a <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link>:</db:para>
<db:programlisting language="cpp">using namespace Qt::Literals::StringLiterals;

auto str = &quot;hello&quot;_L1;
</db:programlisting>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-literals-stringliterals.xml">Qt::Literals::StringLiterals</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-22-22_ba">
<db:title>[since 6.4] QByteArray operator&quot;&quot;_ba(const char *<db:emphasis>str</db:emphasis>, size_t <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QByteArray</db:type>
<db:methodname>operator&quot;&quot;_ba</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>size_t</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray operator&quot;&quot;_ba(const char *str, size_t size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Literal operator that creates a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> out of the first <db:code role="parameter">size</db:code> characters in the char string literal <db:code role="parameter">str</db:code>.</db:para>
<db:para>The <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is created at compile time, and the generated string data is stored in the read-only segment of the compiled object file. Duplicate literals may share the same read-only memory. This functionality is interchangeable with <db:link xlink:href="qbytearray.xml#QByteArrayLiteral">QByteArrayLiteral</db:link>, but saves typing when many string literals are present in the code.</db:para>
<db:para>The following code creates a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>:</db:para>
<db:programlisting language="cpp">using namespace Qt::Literals::StringLiterals;

auto str = &quot;hello&quot;_ba;
</db:programlisting>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-literals-stringliterals.xml">Qt::Literals::StringLiterals</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-22-22_s">
<db:title>[since 6.4] QString operator&quot;&quot;_s(const char16_t *<db:emphasis>str</db:emphasis>, size_t <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>operator&quot;&quot;_s</db:methodname>
<db:methodparam>
<db:type>const char16_t *</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>size_t</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString operator&quot;&quot;_s(const char16_t *str, size_t size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Literal operator that creates a <db:link xlink:href="qstring.xml">QString</db:link> out of the first <db:code role="parameter">size</db:code> characters in the char16_t string literal <db:code role="parameter">str</db:code>.</db:para>
<db:para>The <db:link xlink:href="qstring.xml">QString</db:link> is created at compile time, and the generated string data is stored in the read-only segment of the compiled object file. Duplicate literals may share the same read-only memory. This functionality is interchangeable with <db:link xlink:href="qstring.xml#QStringLiteral">QStringLiteral</db:link>, but saves typing when many string literals are present in the code.</db:para>
<db:para>The following code creates a <db:link xlink:href="qstring.xml">QString</db:link>:</db:para>
<db:programlisting language="cpp">using namespace Qt::Literals::StringLiterals;

auto str = u&quot;hello&quot;_s;
</db:programlisting>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-literals-stringliterals.xml">Qt::Literals::StringLiterals</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
