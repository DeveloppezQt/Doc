<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBitmap Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbitmap.xml">QBitmap</db:link> class provides monochrome (1-bit depth) pixmaps.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBitmap</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpixmap.xml" xlink:role="class">QPixmap</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QBitmap is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qbitmap.xml">QBitmap</db:link> class is a monochrome off-screen paint device used mainly for creating custom <db:link xlink:href="qcursor.xml">QCursor</db:link> and <db:link xlink:href="qbrush.xml">QBrush</db:link> objects, constructing <db:link xlink:href="qregion.xml">QRegion</db:link> objects, and for setting masks for pixmaps and widgets.</db:para>
<db:para><db:link xlink:href="qbitmap.xml">QBitmap</db:link> is a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> subclass ensuring a depth of 1, except for null objects which have a depth of 0. If a pixmap with a depth greater than 1 is assigned to a bitmap, the bitmap will be dithered automatically.</db:para>
<db:para>Use the <db:link xlink:href="qcolor.xml">QColor</db:link> objects <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::color0</db:link> and <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::color1</db:link> when drawing on a <db:link xlink:href="qbitmap.xml">QBitmap</db:link> object (or a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> object with depth 1).</db:para>
<db:para>Painting with <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::color0</db:link> sets the bitmap bits to 0, and painting with <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::color1</db:link> sets the bits to 1. For a bitmap, 0-bits indicate background (or transparent pixels) and 1-bits indicate foreground (or opaque pixels). Use the <db:link xlink:href="qbitmap.xml#clear">clear</db:link>() function to set all the bits to <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::color0</db:link>. Note that using the <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::black</db:link> and <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::white</db:link> colors make no sense because the QColor::pixel() value is not necessarily 0 for black and 1 for white.</db:para>
<db:para>The <db:link xlink:href="qbitmap.xml">QBitmap</db:link> class provides the <db:link xlink:href="qbitmap.xml#transformed">transformed</db:link>() function returning a transformed copy of the bitmap; use the <db:link xlink:href="qtransform.xml">QTransform</db:link> argument to translate, scale, shear, and rotate the bitmap. In addition, <db:link xlink:href="qbitmap.xml">QBitmap</db:link> provides the static <db:link xlink:href="qbitmap.xml#fromData">fromData</db:link>() function which returns a bitmap constructed from the given <db:code>uchar</db:code> data, and the static <db:link xlink:href="qbitmap.xml#fromImage">fromImage</db:link>() function returning a converted copy of a <db:link xlink:href="qimage.xml">QImage</db:link> object.</db:para>
<db:para>Just like the <db:link xlink:href="qpixmap.xml">QPixmap</db:link> class, <db:link xlink:href="qbitmap.xml">QBitmap</db:link> is optimized by the use of implicit data sharing. For more information, see the <db:link xlink:href="implicit-sharing.xml">Implicit Data Sharing</db:link> documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml">QPixmap</db:link></db:member>
<db:member><db:link xlink:href="qimage.xml">QImage</db:link></db:member>
<db:member><db:link xlink:href="qimagereader.xml">QImageReader</db:link></db:member>
<db:member><db:link xlink:href="qimagewriter.xml">QImageWriter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBitmap">
<db:title>QBitmap::QBitmap()</db:title>
<db:para>Constructs a null bitmap.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#isNull">QPixmap::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBitmap-1">
<db:title>QBitmap::QBitmap(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>Constructs a bitmap that is a copy of the given <db:code role="parameter">pixmap</db:code>.</db:para>
<db:para>If the pixmap has a depth greater than 1, the resulting bitmap will be dithered automatically.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#depth">QPixmap::depth</db:link>()</db:member>
<db:member><db:link xlink:href="qbitmap.xml#fromImage">fromImage</db:link>()</db:member>
<db:member><db:link xlink:href="qbitmap.xml#fromData">fromData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBitmap-2">
<db:title>[explicit] QBitmap::QBitmap(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Constructs a bitmap with the given <db:code role="parameter">size</db:code>. The pixels in the bitmap are uninitialized.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitmap.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBitmap-3">
<db:title>[explicit] QBitmap::QBitmap(const QString &amp;<db:emphasis>fileName</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a bitmap from the file specified by the given <db:code role="parameter">fileName</db:code>. If the file does not exist, or has an unknown format, the bitmap becomes a null bitmap.</db:para>
<db:para>The <db:code role="parameter">fileName</db:code> and <db:code role="parameter">format</db:code> parameters are passed on to the <db:link xlink:href="qpixmap.xml#load">QPixmap::load</db:link>() function. If the file format uses more than 1 bit per pixel, the resulting bitmap will be dithered automatically.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#isNull">QPixmap::isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qimagereader.xml#imageFormat">QImageReader::imageFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBitmap-4">
<db:title>QBitmap::QBitmap(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Constructs a bitmap with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>. The pixels inside are uninitialized.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitmap.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QBitmap">
<db:title>[virtual noexcept] QBitmap::~QBitmap()</db:title>
<db:para>Destroys the bitmap.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QBitmap::clear()</db:title>
<db:para>Clears the bitmap, setting all its bits to <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::color0</db:link>.</db:para>
</db:section>
<db:section xml:id="fromData">
<db:title>[static] QBitmap QBitmap::fromData(const QSize &amp;<db:emphasis>size</db:emphasis>, const uchar *<db:emphasis>bits</db:emphasis>, QImage::Format <db:emphasis>monoFormat</db:emphasis> = QImage::Format_MonoLSB)</db:title>
<db:para>Constructs a bitmap with the given <db:code role="parameter">size</db:code>, and sets the contents to the <db:code role="parameter">bits</db:code> supplied.</db:para>
<db:para>The bitmap data has to be byte aligned and provided in in the bit order specified by <db:code role="parameter">monoFormat</db:code>. The mono format must be either <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_Mono</db:link> or <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_MonoLSB</db:link>. Use <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_Mono</db:link> to specify data on the XBM format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitmap.xml#fromImage">fromImage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromImage">
<db:title>[static] QBitmap QBitmap::fromImage(const QImage &amp;<db:emphasis>image</db:emphasis>, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:para>Returns a copy of the given <db:code role="parameter">image</db:code> converted to a bitmap using the specified image conversion <db:code role="parameter">flags</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitmap.xml#fromData">fromData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 4.8] void QBitmap::swap(QBitmap &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps bitmap <db:code role="parameter">other</db:code> with this bitmap. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="transformed">
<db:title>QBitmap QBitmap::transformed(const QTransform &amp;<db:emphasis>matrix</db:emphasis>) const</db:title>
<db:para>Returns a copy of this bitmap, transformed according to the given <db:code role="parameter">matrix</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#transformed">QPixmap::transformed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QBitmap::operator QVariant() const</db:title>
<db:para>Returns the bitmap as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq-2">
<db:title>QBitmap &amp;QBitmap::operator=(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Assigns the given <db:code role="parameter">pixmap</db:code> to this bitmap and returns a reference to this bitmap.</db:para>
<db:para>If the pixmap has a depth greater than 1, the resulting bitmap will be dithered automatically.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#depth">QPixmap::depth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QBitmap</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qbitmap.xml">QBitmap</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="transformed-1">
<db:title>[deprecated] QBitmap QBitmap::transformed(const QMatrix &amp;<db:emphasis>matrix</db:emphasis>) const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function converts the <db:code role="parameter">matrix</db:code> to a <db:link xlink:href="qtransform.xml">QTransform</db:link> and calls the overloaded function.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
