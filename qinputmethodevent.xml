<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QInputMethodEvent Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qinputmethodevent.xml">QInputMethodEvent</db:link> class provides parameters for input method events.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QInputMethodEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qevent.xml" xlink:role="class">QEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QInputMethodEvent is part of <db:simplelist><db:member>events</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Input method events are sent to widgets when an input method is used to enter text into a widget. Input methods are widely used to enter text for languages with non-Latin alphabets.</db:para>
<db:para>Note that when creating custom text editing widgets, the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_InputMethodEnabled</db:link> window attribute must be set explicitly (using the QWidget::setAttribute() function) in order to receive input method events.</db:para>
<db:para>The events are of interest to authors of keyboard entry widgets who want to be able to correctly handle languages with complex character input. Text input in such languages is usually a three step process:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para><db:emphasis role="bold">Starting to Compose</db:emphasis></db:para>
<db:para>When the user presses the first key on a keyboard, an input context is created. This input context will contain a string of the typed characters.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Composing</db:emphasis></db:para>
<db:para>With every new key pressed, the input method will try to create a matching string for the text typed so far called preedit string. While the input context is active, the user can only move the cursor inside the string belonging to this input context.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Completing</db:emphasis></db:para>
<db:para>At some point, the user will activate a user interface component (perhaps using a particular key) where they can choose from a number of strings matching the text they have typed so far. The user can either confirm their choice cancel the input; in either case the input context will be closed.</db:para>
</db:listitem>
</db:orderedlist>
<db:para><db:link xlink:href="qinputmethodevent.xml">QInputMethodEvent</db:link> models these three stages, and transfers the information needed to correctly render the intermediate result. A <db:link xlink:href="qinputmethodevent.xml">QInputMethodEvent</db:link> has two main parameters: <db:link xlink:href="qinputmethodevent.xml#preeditString">preeditString</db:link>() and <db:link xlink:href="qinputmethodevent.xml#commitString">commitString</db:link>(). The <db:link xlink:href="qinputmethodevent.xml#preeditString">preeditString</db:link>() parameter gives the currently active preedit string. The <db:link xlink:href="qinputmethodevent.xml#commitString">commitString</db:link>() parameter gives a text that should get added to (or replace parts of) the text of the editor widget. It usually is a result of the input operations and has to be inserted to the widgets text directly before the preedit string.</db:para>
<db:para>If the <db:link xlink:href="qinputmethodevent.xml#commitString">commitString</db:link>() should replace parts of the of the text in the editor, <db:link xlink:href="qinputmethodevent.xml#replacementLength">replacementLength</db:link>() will contain the number of characters to be replaced. <db:link xlink:href="qinputmethodevent.xml#replacementStart">replacementStart</db:link>() contains the position at which characters are to be replaced relative from the start of the preedit string.</db:para>
<db:para>A number of attributes control the visual appearance of the preedit string (the visual appearance of text outside the preedit string is controlled by the widget only). The <db:link xlink:href="qinputmethodevent.xml#AttributeType-enum">AttributeType</db:link> enum describes the different attributes that can be set.</db:para>
<db:para>A class implementing QWidget::inputMethodEvent() or QGraphicsItem::inputMethodEvent() should at least understand and honor the <db:link xlink:href="qinputmethodevent.xml#AttributeType-enum">TextFormat</db:link> and <db:link xlink:href="qinputmethodevent.xml#AttributeType-enum">Cursor</db:link> attributes.</db:para>
<db:para>Since input methods need to be able to query certain properties from the widget or graphics item, subclasses must also implement QWidget::inputMethodQuery() and QGraphicsItem::inputMethodQuery(), respectively.</db:para>
<db:para>When receiving an input method event, the text widget has to performs the following steps:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>If the widget has selected text, the selected text should get removed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Remove the text starting at <db:link xlink:href="qinputmethodevent.xml#replacementStart">replacementStart</db:link>() with length <db:link xlink:href="qinputmethodevent.xml#replacementLength">replacementLength</db:link>() and replace it by the <db:link xlink:href="qinputmethodevent.xml#commitString">commitString</db:link>(). If <db:link xlink:href="qinputmethodevent.xml#replacementLength">replacementLength</db:link>() is 0, <db:link xlink:href="qinputmethodevent.xml#replacementStart">replacementStart</db:link>() gives the insertion position for the <db:link xlink:href="qinputmethodevent.xml#commitString">commitString</db:link>().</db:para>
<db:para>When doing replacement the area of the preedit string is ignored, thus a replacement starting at -1 with a length of 2 will remove the last character before the preedit string and the first character afterwards, and insert the commit string directly before the preedit string.</db:para>
<db:para>If the widget implements undo/redo, this operation gets added to the undo stack.</db:para>
</db:listitem>
<db:listitem>
<db:para>If there is no current preedit string, insert the <db:link xlink:href="qinputmethodevent.xml#preeditString">preeditString</db:link>() at the current cursor position; otherwise replace the previous <db:link xlink:href="qinputmethodevent.xml#preeditString">preeditString</db:link> with the one received from this event.</db:para>
<db:para>If the widget implements undo/redo, the <db:link xlink:href="qinputmethodevent.xml#preeditString">preeditString</db:link>() should not influence the undo/redo stack in any way.</db:para>
<db:para>The widget should examine the list of attributes to apply to the preedit string. It has to understand at least the <db:link xlink:href="qinputmethodevent.xml#AttributeType-enum">TextFormat</db:link> and Cursor attributes and render them as specified.</db:para>
</db:listitem>
</db:orderedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethod.xml">QInputMethod</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AttributeType-enum">
<db:title>enum QInputMethodEvent::AttributeType</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputmethodevent.xml">QInputMethodEvent</db:link></db:emphasis>::TextFormat</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link> for the part of the preedit string specified by start and length. value contains a <db:link xlink:href="qvariant.xml">QVariant</db:link> of type <db:link xlink:href="qtextformat.xml">QTextFormat</db:link> specifying rendering of this part of the preedit string. There should be at most one format for every part of the preedit string. If several are specified for any character in the string the behaviour is undefined. A conforming implementation has to at least honor the backgroundColor, textColor and fontUnderline properties of the format.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputmethodevent.xml">QInputMethodEvent</db:link></db:emphasis>::Cursor</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>If set, a cursor should be shown inside the preedit string at position start. The length variable determines whether the cursor is visible or not. If the length is 0 the cursor is invisible. If value is a <db:link xlink:href="qvariant.xml">QVariant</db:link> of type <db:link xlink:href="qcolor.xml">QColor</db:link> this color will be used for rendering the cursor, otherwise the color of the surrounding text will be used. There should be at most one Cursor attribute per event. If several are specified the behaviour is undefined.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputmethodevent.xml">QInputMethodEvent</db:link></db:emphasis>::Language</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The variant contains a <db:link xlink:href="qlocale.xml">QLocale</db:link> object specifying the language of a certain part of the preedit string. There should be at most one language set for every part of the preedit string. If several are specified for any character in the string the behavior is undefined.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputmethodevent.xml">QInputMethodEvent</db:link></db:emphasis>::Ruby</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The ruby text for a part of the preedit string. There should be at most one ruby text set for every part of the preedit string. If several are specified for any character in the string the behaviour is undefined.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputmethodevent.xml">QInputMethodEvent</db:link></db:emphasis>::Selection</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>If set, the edit cursor should be moved to the specified position in the editor text contents. In contrast with <db:code>Cursor</db:code>, this attribute does not work on the preedit text, but on the surrounding text. The cursor will be moved after the commit string has been committed, and the preedit string will be located at the new edit position. The start position specifies the new position and the length variable can be used to set a selection starting from that point. The value is unused.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethodevent-attribute.xml">Attribute</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QInputMethodEvent">
<db:title>QInputMethodEvent::QInputMethodEvent()</db:title>
<db:para>Constructs an event of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::InputMethod</db:link>. The <db:link xlink:href="qinputmethodevent.xml#attributes">attributes</db:link>(), <db:link xlink:href="qinputmethodevent.xml#preeditString">preeditString</db:link>(), <db:link xlink:href="qinputmethodevent.xml#commitString">commitString</db:link>(), <db:link xlink:href="qinputmethodevent.xml#replacementStart">replacementStart</db:link>(), and <db:link xlink:href="qinputmethodevent.xml#replacementLength">replacementLength</db:link>() are initialized to default values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethodevent.xml#setCommitString">setCommitString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QInputMethodEvent-2">
<db:title>QInputMethodEvent::QInputMethodEvent(const QString &amp;<db:emphasis>preeditText</db:emphasis>, const QList&lt;QInputMethodEvent::Attribute&gt; &amp;<db:emphasis>attributes</db:emphasis>)</db:title>
<db:para>Constructs an event of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::InputMethod</db:link>. The preedit text is set to <db:code role="parameter">preeditText</db:code>, the attributes to <db:code role="parameter">attributes</db:code>.</db:para>
<db:para>The <db:link xlink:href="qinputmethodevent.xml#commitString">commitString</db:link>(), <db:link xlink:href="qinputmethodevent.xml#replacementStart">replacementStart</db:link>(), and <db:link xlink:href="qinputmethodevent.xml#replacementLength">replacementLength</db:link>() values can be set using <db:link xlink:href="qinputmethodevent.xml#setCommitString">setCommitString</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethodevent.xml#preeditString">preeditString</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethodevent.xml#attributes">attributes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QInputMethodEvent-1">
<db:title>QInputMethodEvent::QInputMethodEvent(const QInputMethodEvent &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="attributes">
<db:title>const QList&lt;QInputMethodEvent::Attribute&gt; &amp;QInputMethodEvent::attributes() const</db:title>
<db:para>Returns the list of attributes passed to the <db:link xlink:href="qinputmethodevent.xml">QInputMethodEvent</db:link> constructor. The attributes control the visual appearance of the preedit string (the visual appearance of text outside the preedit string is controlled by the widget only).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethodevent.xml#preeditString">preeditString</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethodevent-attribute.xml">Attribute</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="commitString">
<db:title>const QString &amp;QInputMethodEvent::commitString() const</db:title>
<db:para>Returns the text that should get added to (or replace parts of) the text of the editor widget. It usually is a result of the input operations and has to be inserted to the widgets text directly before the preedit string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethodevent.xml#setCommitString">setCommitString</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethodevent.xml#preeditString">preeditString</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethodevent.xml#replacementStart">replacementStart</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethodevent.xml#replacementLength">replacementLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preeditString">
<db:title>const QString &amp;QInputMethodEvent::preeditString() const</db:title>
<db:para>Returns the preedit text, i.e. the text before the user started editing it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethodevent.xml#commitString">commitString</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethodevent.xml#attributes">attributes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replacementLength">
<db:title>int QInputMethodEvent::replacementLength() const</db:title>
<db:para>Returns the number of characters to be replaced in the preedit string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethodevent.xml#replacementStart">replacementStart</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethodevent.xml#setCommitString">setCommitString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replacementStart">
<db:title>int QInputMethodEvent::replacementStart() const</db:title>
<db:para>Returns the position at which characters are to be replaced relative from the start of the preedit string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethodevent.xml#replacementLength">replacementLength</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethodevent.xml#setCommitString">setCommitString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCommitString">
<db:title>void QInputMethodEvent::setCommitString(const QString &amp;<db:emphasis>commitString</db:emphasis>, int <db:emphasis>replaceFrom</db:emphasis> = 0, int <db:emphasis>replaceLength</db:emphasis> = 0)</db:title>
<db:para>Sets the commit string to <db:code role="parameter">commitString</db:code>.</db:para>
<db:para>The commit string is the text that should get added to (or replace parts of) the text of the editor widget. It usually is a result of the input operations and has to be inserted to the widgets text directly before the preedit string.</db:para>
<db:para>If the commit string should replace parts of the of the text in the editor, <db:code role="parameter">replaceLength</db:code> specifies the number of characters to be replaced. <db:code role="parameter">replaceFrom</db:code> specifies the position at which characters are to be replaced relative from the start of the preedit string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputmethodevent.xml#commitString">commitString</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethodevent.xml#replacementStart">replacementStart</db:link>()</db:member>
<db:member><db:link xlink:href="qinputmethodevent.xml#replacementLength">replacementLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
