<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRadioTuner Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link> class provides an interface to the systems analog radio device.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRadioTuner</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediaobject.xml" xlink:role="class">QMediaObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRadioTuner is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_radio</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>You can control the systems analog radio device using this interface, for example:</db:para>
<db:programlisting language="cpp">radio = new QRadioTuner;
connect(radio, SIGNAL(frequencyChanged(int)), this, SLOT(freqChanged(int)));
if (radio-&gt;isBandSupported(QRadioTuner::FM)) {
    radio-&gt;setBand(QRadioTuner::FM);
    radio-&gt;setFrequency(yourRadioStationFrequency);
    radio-&gt;setVolume(100);
    radio-&gt;start();
}
</db:programlisting>
<db:para>The radio object will emit signals for any changes in state such as: <db:link xlink:href="qradiotuner.xml#bandChanged">bandChanged</db:link>(), <db:link xlink:href="qradiotuner.xml#frequencyChanged">frequencyChanged</db:link>(), <db:link xlink:href="qradiotuner.xml#stereoStatusChanged">stereoStatusChanged</db:link>(), <db:link xlink:href="qradiotuner.xml#searchingChanged">searchingChanged</db:link>(), <db:link xlink:href="qradiotuner.xml#signalStrengthChanged">signalStrengthChanged</db:link>(), <db:link xlink:href="qradiotuner.xml#volumeChanged">volumeChanged</db:link>(), <db:link xlink:href="qradiotuner.xml#mutedChanged">mutedChanged</db:link>().</db:para>
<db:para>You can change between the frequency bands using <db:link xlink:href="qradiotuner.xml#setBand">setBand</db:link>() however it is recommended that you check to make sure the band is available first using <db:link xlink:href="qradiotuner.xml#isBandSupported">isBandSupported</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiodata.xml">QRadioData</db:link></db:member>
<db:member><db:link xlink:href="radiooverview.xml">Radio Overview</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Band-enum">
<db:title>enum QRadioTuner::Band</db:title>
<db:para>Enumerates radio frequency bands.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::AM</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>520 to 1610 kHz, 9 or 10kHz channel spacing, extended 1610 to 1710 kHz</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::FM</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>87.5 to 108.0 MHz, except Japan 76-90 MHz</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::SW</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>1.711 to 30.0 MHz, divided into 15 bands. 5kHz channel spacing</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::LW</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>148.5 to 283.5 kHz, 9kHz channel spacing (Europe, Africa, Asia)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::FM2</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>range not defined, used when area supports more than one FM range.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Error-enum">
<db:title>enum QRadioTuner::Error</db:title>
<db:para>Enumerates radio tuner error conditions.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No errors have occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::ResourceError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>There is no radio service available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::OpenError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Unable to open radio device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::OutOfRangeError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An attempt to set a frequency or band that is not supported by radio device.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="SearchMode-enum">
<db:title>enum QRadioTuner::SearchMode</db:title>
<db:para>Enumerates how the radio tuner should search for stations.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::SearchFast</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Use only signal strength when searching.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::SearchGetStationId</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>After finding a strong signal, wait for the RDS station id (PI) before continuing.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="State-enum">
<db:title>enum QRadioTuner::State</db:title>
<db:para>Enumerates radio tuner states.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::ActiveState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The tuner is started and active.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::StoppedState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The tuner device is stopped.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="StereoMode-enum">
<db:title>enum QRadioTuner::StereoMode</db:title>
<db:para>Enumerates radio tuner policy for receiving stereo signals.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::ForceStereo</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Provide stereo mode, converting if required.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::ForceMono</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Provide mono mode, converting if required.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:emphasis>::Auto</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Uses the stereo mode matching the station.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="antennaConnected-prop">
<db:title>[read-only] antennaConnected : const bool</db:title>
<db:para>This property holds whether there is an antenna connected</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isAntennaConnected</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">antennaConnectedChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>connectionStatus</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="band-prop">
<db:title>band : Band</db:title>
<db:para>This property holds the frequency band a radio tuner is tuned to.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qradiotuner.xml#Band-enum">QRadioTuner::Band</db:link></db:type> <db:emphasis role="bold">band</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml#setBand">setBand</db:link></db:emphasis>(<db:type><db:link xlink:href="qradiotuner.xml#Band-enum">QRadioTuner::Band</db:link></db:type> <db:emphasis>band</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml#bandChanged">bandChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qradiotuner.xml#Band-enum">QRadioTuner::Band</db:link></db:type> <db:emphasis>band</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotuner.xml#Band-enum">QRadioTuner::Band</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frequency-prop">
<db:title>frequency : int</db:title>
<db:para>This property holds the frequency in Hertz a radio tuner is tuned to.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">frequency</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml#setFrequency">setFrequency</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>frequency</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml#frequencyChanged">frequencyChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>frequency</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="muted-prop">
<db:title>muted : bool</db:title>
<db:para>This property holds whether a radio tuner's audio output is muted.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isMuted</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMuted</db:emphasis>(<db:type>bool</db:type> <db:emphasis>muted</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml#mutedChanged">mutedChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>muted</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="radioData-prop">
<db:title>[read-only] radioData : QRadioData* const</db:title>
<db:para>holds an instance of <db:link xlink:href="qradiodata.xml">QRadioData</db:link></db:para>
<db:para>The instance of <db:link xlink:href="qradiodata.xml">QRadioData</db:link> is already bound to this instance of <db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qradiodata.xml">QRadioData</db:link></db:type> *<db:emphasis role="bold">radioData</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="searching-prop">
<db:title>[read-only] searching : const bool</db:title>
<db:para>This property holds whether a radio tuner is currently scanning for a signal.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSearching</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml#searchingChanged">searchingChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>searching</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotuner.xml#searchForward">searchForward</db:link>()</db:member>
<db:member><db:link xlink:href="qradiotuner.xml#searchBackward">searchBackward</db:link>()</db:member>
<db:member><db:link xlink:href="qradiotuner.xml#cancelSearch">cancelSearch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signalStrength-prop">
<db:title>[read-only] signalStrength : const int</db:title>
<db:para>This property holds the strength of the current radio signal as a percentage.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">signalStrength</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml#signalStrengthChanged">signalStrengthChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>strength</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="state-prop">
<db:title>[read-only] state : const State</db:title>
<db:para>Return the current radio tuner state.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qradiotuner.xml#State-enum">QRadioTuner::State</db:link></db:type> <db:emphasis role="bold">state</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml#stateChanged">stateChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qradiotuner.xml#State-enum">QRadioTuner::State</db:link></db:type> <db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotuner.xml#State-enum">QRadioTuner::State</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stereo-prop">
<db:title>[read-only] stereo : const bool</db:title>
<db:para>This property holds whether a radio tuner is receiving a stereo signal.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isStereo</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml#stereoStatusChanged">stereoStatusChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>stereo</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="stereoMode-prop">
<db:title>stereoMode : StereoMode</db:title>
<db:para>This property holds the stereo mode of a radio tuner.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qradiotuner.xml#StereoMode-enum">QRadioTuner::StereoMode</db:link></db:type> <db:emphasis role="bold">stereoMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setStereoMode</db:emphasis>(<db:type><db:link xlink:href="qradiotuner.xml#StereoMode-enum">QRadioTuner::StereoMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="volume-prop">
<db:title>volume : int</db:title>
<db:para>This property holds the volume of a radio tuner's audio output as a percentage.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">volume</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVolume</db:emphasis>(<db:type>int</db:type> <db:emphasis>volume</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qradiotuner.xml#volumeChanged">volumeChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>volume</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRadioTuner">
<db:title>[explicit] QRadioTuner::QRadioTuner(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a radio tuner based on a media service allocated by the default media service provider.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QRadioTuner">
<db:title>[virtual noexcept] QRadioTuner::~QRadioTuner()</db:title>
<db:para>Destroys a radio tuner.</db:para>
</db:section>
<db:section xml:id="availability">
<db:title>[override virtual] QMultimedia::AvailabilityStatus QRadioTuner::availability() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qmediaobject.xml#availability" role="function">QMediaObject::availability() const</db:link>.</db:para>
<db:para>Returns the availability of the radio tuner.</db:para>
</db:section>
<db:section xml:id="bandChanged">
<db:title>void QRadioTuner::bandChanged(QRadioTuner::Band <db:emphasis>band</db:emphasis>)</db:title>
<db:para>Signals a radio tuner's <db:code role="parameter">band</db:code> has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qradiotuner.xml#band-prop">band</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="cancelSearch">
<db:title>void QRadioTuner::cancelSearch()</db:title>
<db:para>Stops scanning for a signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotuner.xml#searchForward">searchForward</db:link>()</db:member>
<db:member><db:link xlink:href="qradiotuner.xml#searchBackward">searchBackward</db:link>()</db:member>
<db:member><db:link xlink:href="qradiotuner.xml#searching-prop">searching</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QRadioTuner::Error QRadioTuner::error() const</db:title>
<db:para>Returns the error state of a radio tuner.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotuner.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error-1">
<db:title>void QRadioTuner::error(QRadioTuner::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:para>Signals that an <db:code role="parameter">error</db:code> occurred.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QRadioTuner::errorString() const</db:title>
<db:para>Returns a description of a radio tuner's error state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotuner.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frequencyChanged">
<db:title>void QRadioTuner::frequencyChanged(int <db:emphasis>frequency</db:emphasis>)</db:title>
<db:para>Signals that the <db:code role="parameter">frequency</db:code> a radio tuner is tuned to has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qradiotuner.xml#frequency-prop">frequency</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="frequencyRange">
<db:title>QPair&lt;int, int&gt; QRadioTuner::frequencyRange(QRadioTuner::Band <db:emphasis>band</db:emphasis>) const</db:title>
<db:para>Returns a frequency <db:code role="parameter">band</db:code>'s minimum and maximum frequency.</db:para>
</db:section>
<db:section xml:id="frequencyStep">
<db:title>int QRadioTuner::frequencyStep(QRadioTuner::Band <db:emphasis>band</db:emphasis>) const</db:title>
<db:para>Returns the number of Hertz to increment the frequency by when stepping through frequencies within a given <db:code role="parameter">band</db:code>.</db:para>
</db:section>
<db:section xml:id="isBandSupported">
<db:title>bool QRadioTuner::isBandSupported(QRadioTuner::Band <db:emphasis>band</db:emphasis>) const</db:title>
<db:para>Identifies if a frequency <db:code role="parameter">band</db:code> is supported by a radio tuner.</db:para>
<db:para>Returns true if the band is supported, and false if it is not.</db:para>
</db:section>
<db:section xml:id="mutedChanged">
<db:title>void QRadioTuner::mutedChanged(bool <db:emphasis>muted</db:emphasis>)</db:title>
<db:para>Signals that the <db:code role="parameter">muted</db:code> state of a radio tuner's audio output has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qradiotuner.xml#muted-prop">muted</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="searchAllStations">
<db:title>void QRadioTuner::searchAllStations(QRadioTuner::SearchMode <db:emphasis>searchMode</db:emphasis> = QRadioTuner::SearchFast)</db:title>
<db:para>Search all stations in current band</db:para>
<db:para>Emits <db:link xlink:href="qradiotuner.xml#stationFound">QRadioTuner::stationFound</db:link>(int, <db:link xlink:href="qstring.xml">QString</db:link>) for every found station. After searching is completed, <db:link xlink:href="qradiotuner.xml#searchingChanged">QRadioTuner::searchingChanged</db:link>(bool) is emitted (false). If <db:code role="parameter">searchMode</db:code> is set to <db:link xlink:href="qradiotuner.xml#SearchMode-enum">SearchGetStationId</db:link>, searching waits for station id (PI) on each frequency.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotuner.xml#searchForward">searchForward</db:link>()</db:member>
<db:member><db:link xlink:href="qradiotuner.xml#searchBackward">searchBackward</db:link>()</db:member>
<db:member><db:link xlink:href="qradiotuner.xml#searching-prop">searching</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="searchBackward">
<db:title>void QRadioTuner::searchBackward()</db:title>
<db:para>Starts a backwards scan for a signal, starting from the current <db:link xlink:href="qradiotuner.xml#frequency-prop">frequency</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotuner.xml#searchForward">searchForward</db:link>()</db:member>
<db:member><db:link xlink:href="qradiotuner.xml#cancelSearch">cancelSearch</db:link>()</db:member>
<db:member><db:link xlink:href="qradiotuner.xml#searching-prop">searching</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="searchForward">
<db:title>void QRadioTuner::searchForward()</db:title>
<db:para>Starts a forward scan for a signal, starting from the current <db:link xlink:href="qradiotuner.xml#frequency-prop">frequency</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotuner.xml#searchBackward">searchBackward</db:link>()</db:member>
<db:member><db:link xlink:href="qradiotuner.xml#cancelSearch">cancelSearch</db:link>()</db:member>
<db:member><db:link xlink:href="qradiotuner.xml#searching-prop">searching</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="searchingChanged">
<db:title>void QRadioTuner::searchingChanged(bool <db:emphasis>searching</db:emphasis>)</db:title>
<db:para>Signals that the <db:code role="parameter">searching</db:code> state of a radio tuner has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qradiotuner.xml#searching-prop">searching</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="setBand">
<db:title>void QRadioTuner::setBand(QRadioTuner::Band <db:emphasis>band</db:emphasis>)</db:title>
<db:para>Sets a radio tuner's frequency <db:code role="parameter">band</db:code>.</db:para>
<db:para>Changing the band will reset the <db:link xlink:href="qradiotuner.xml#frequency-prop">frequency</db:link> to the new band's minimum frequency.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qradiotuner.xml#band-prop">band</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotuner.xml#band-prop">band</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFrequency">
<db:title>void QRadioTuner::setFrequency(int <db:emphasis>frequency</db:emphasis>)</db:title>
<db:para>Sets a radio tuner's <db:code role="parameter">frequency</db:code>.</db:para>
<db:para>If the tuner is set to a frequency outside the current <db:link xlink:href="qradiotuner.xml#band-prop">band</db:link>, the band will be changed to one occupied by the new frequency.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qradiotuner.xml#frequency-prop">frequency</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotuner.xml#frequency-prop">frequency</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signalStrengthChanged">
<db:title>void QRadioTuner::signalStrengthChanged(int <db:emphasis>strength</db:emphasis>)</db:title>
<db:para>Signals that the <db:code role="parameter">strength</db:code> of the signal received by a radio tuner has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qradiotuner.xml#signalStrength-prop">signalStrength</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="start">
<db:title>void QRadioTuner::start()</db:title>
<db:para>Activate the radio device.</db:para>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QRadioTuner::stateChanged(QRadioTuner::State <db:emphasis>state</db:emphasis>)</db:title>
<db:para>This signal is emitted when the state changes to <db:code role="parameter">state</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qradiotuner.xml#state-prop">state</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="stationFound">
<db:title>void QRadioTuner::stationFound(int <db:emphasis>frequency</db:emphasis>, QString <db:emphasis>stationId</db:emphasis>)</db:title>
<db:para>Signals that a station was found in <db:code role="parameter">frequency</db:code> with <db:code role="parameter">stationId</db:code> Program Identification code.</db:para>
</db:section>
<db:section xml:id="stereoStatusChanged">
<db:title>void QRadioTuner::stereoStatusChanged(bool <db:emphasis>stereo</db:emphasis>)</db:title>
<db:para>Signals that the <db:code role="parameter">stereo</db:code> state of a radio tuner has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qradiotuner.xml#stereo-prop">stereo</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="stop">
<db:title>void QRadioTuner::stop()</db:title>
<db:para>Deactivate the radio device.</db:para>
</db:section>
<db:section xml:id="volumeChanged">
<db:title>void QRadioTuner::volumeChanged(int <db:emphasis>volume</db:emphasis>)</db:title>
<db:para>Signals that the <db:code role="parameter">volume</db:code> of a radio tuner's audio output has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qradiotuner.xml#volume-prop">volume</db:link>. </db:para>
</db:note>
</db:section>
</db:section>
</db:article>
