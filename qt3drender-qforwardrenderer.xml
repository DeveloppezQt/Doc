<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QForwardRenderer Class</db:title>
<db:subtitle>Qt3DRender::QForwardRenderer</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qt3drender-qforwardrenderer.xml">Qt3DRender::QForwardRenderer</db:link> provides a default <db:link xlink:href="qt3drender-qframegraph.xml">FrameGraph</db:link> implementation of a forward renderer.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QForwardRenderer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qtechniquefilter.xml" xlink:role="class">Qt3DRender::QTechniqueFilter</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Forward rendering is how OpenGL is traditionally. It renders directly to the backbuffer one object at a time shading each one as it goes.</db:para>
<db:para>Internally the <db:link xlink:href="qt3drender-qforwardrenderer.xml">Qt3DRender::QForwardRenderer</db:link> is a subclass of Qt3DRender::QTechniqueFilter. This a is a single leaf Framegraph tree which contains a Qt3DRender::QViewport, a <db:link xlink:href="qt3drender-qcameraselector.xml">Qt3DRender::QCameraSelector</db:link> and a Qt3DRender::QClearBuffer. The <db:link xlink:href="qt3drender-qforwardrenderer.xml">Qt3DRender::QForwardRenderer</db:link> has a default requirement annotation whose name is &quot;renderingStyle&quot; and value &quot;forward&quot;. If you need to filter out your techniques, you should do so based on that annotation.</db:para>
<db:para>By default the viewport occupies the whole screen and the clear color is white. Frustum culling is also enabled.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="camera-prop">
<db:title>camera : Qt3DCore::QEntity*</db:title>
<db:para>Holds the current QEntity camera used to render the scene.</db:para>
<db:note>
<db:para>A camera is a QEntity that has a QCameraLens as one of its components.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link></db:type> *<db:emphasis role="bold">camera</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qforwardrenderer.xml#setCamera">setCamera</db:link></db:emphasis>(<db:type><db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link></db:type> *<db:emphasis>camera</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">cameraChanged</db:emphasis>(<db:type><db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link></db:type> *<db:emphasis>camera</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="clearColor-prop">
<db:title>clearColor : QColor</db:title>
<db:para>Holds the current clearColor.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">clearColor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setClearColor</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>clearColor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">clearColorChanged</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>clearColor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="viewportRect-prop">
<db:title>viewportRect : QRectF</db:title>
<db:para>Holds the current viewport rect.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> <db:emphasis role="bold">viewportRect</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setViewportRect</db:emphasis>(const <db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> &amp;<db:emphasis>viewportRect</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">viewportRectChanged</db:emphasis>(const <db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> &amp;<db:emphasis>viewportRect</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QForwardRenderer">
<db:title>[explicit] QForwardRenderer::QForwardRenderer(Qt3DCore::QNode *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new <db:link xlink:href="qt3drender-qforwardrenderer.xml">Qt3DRender::QForwardRenderer</db:link> instance with parent object <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QForwardRenderer">
<db:title>[virtual noexcept] QForwardRenderer::~QForwardRenderer()</db:title>
<db:para>Destroys the <db:link xlink:href="qt3drender-qforwardrenderer.xml">QForwardRenderer</db:link> instance.</db:para>
</db:section>
<db:section xml:id="setCamera">
<db:title>void QForwardRenderer::setCamera(Qt3DCore::QEntity *<db:emphasis>camera</db:emphasis>)</db:title>
<db:para>Sets the camera which should be used to render the scene to <db:code role="parameter">camera</db:code>.</db:para>
<db:note>
<db:para>A camera is a QEntity having a QCameraLens as one of its components.</db:para>
</db:note>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qt3drender-qforwardrenderer.xml#camera-prop">camera</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qforwardrenderer.xml#camera-prop">camera</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
