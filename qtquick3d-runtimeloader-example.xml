<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - RuntimeLoader Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how assets can be loaded at runtime.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/runtimeloader-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example shows how to implement a simple asset viewer using the <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml">RuntimeLoader</db:link>.</db:para>
<db:para>See the <db:link xlink:href="qtquick3d-intro-example.xml">introductory example documentation</db:link> for an explanation of how to set up a basic scene. Once we have the scene set up we can add the <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml">RuntimeLoader</db:link> item:</db:para>
<db:programlisting language="qml">RuntimeLoader {
    id: importNode
    source: importUrl
    instancing: instancingButton.checked ? instancing : null
    onBoundsChanged: helper.updateBounds(bounds)
}
</db:programlisting>
<db:para>Loading an asset is done by setting the <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml">RuntimeLoader</db:link>'s <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml#source-prop">source</db:link> property. In this example the <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml#source-prop">source</db:link> is bound to the <db:code>importUrl</db:code> which will be changed when the user selects a file in the file-dialog.</db:para>
<db:para>Assuming the asset can be loaded, the content will be created as children of the <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml">RuntimeLoader</db:link> <db:code>importNode</db:code>. Note that the <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml">RuntimeLoader</db:link> is a <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link> type, and since it is also the root node for the loaded asset, any transforms applied to the <db:code>importNode</db:code> will also affect its children.</db:para>
<db:section xml:id="error-handling">
<db:title>Error handling</db:title>
<db:para>If an asset fails to load then the <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml">RuntimeLoader</db:link>'s <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml#status-prop">status</db:link> property will be set to <db:code>Error</db:code>. The <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml">RuntimeLoader</db:link>'s <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml#errorString-prop">errorString</db:link> can then be queried to get a more detailed description of the error.</db:para>
<db:para>In this example we will be displaying the error message in a red message box in the middle of the screen, like this:</db:para>
<db:programlisting language="qml">Rectangle {
    id: messageBox
    visible: importNode.status !== RuntimeLoader.Success
    color: &quot;red&quot;
    width: parent.width * 0.8
    height: parent.height * 0.8
    anchors.centerIn: parent
    radius: Math.min(width, height) / 10
    opacity: 0.6
    Text {
        anchors.fill: parent
        font.pixelSize: 36
        text: &quot;Status: &quot; + importNode.errorString + &quot;\nPress \&quot;Import...\&quot; to import a model&quot;
        color: &quot;white&quot;
        wrapMode: Text.Wrap
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="moving-the-camera">
<db:title>Moving the camera</db:title>
<db:para>To make it possible to change the position of the camera we use the <db:link xlink:href="qml-qtquick3d-helpers-wasdcontroller.xml">WasdController</db:link> from the <db:link xlink:href="qtquick3d-helpers-qmlmodule.xml">Helpers</db:link> module and bind it to our camera, like this:</db:para>
<db:programlisting language="qml">OrbitCameraController {
    id: orbitController
    origin: orbitCameraNode
    camera: orbitCamera
    enabled: helper.orbitControllerEnabled
}
WasdController {
    id: wasdController
    controlledObject: wasdCamera
    enabled: !helper.orbitControllerEnabled
}
</db:programlisting>
<db:para>In addition to the <db:link xlink:href="qml-qtquick3d-helpers-wasdcontroller.xml">WasdController</db:link>, the example uses a <db:link xlink:href="qtquick-qmlmodule.xml">WheelHandler</db:link> and a <db:link xlink:href="qtquick-qmlmodule.xml">PointerHandler</db:link> to scale and rotate the model.</db:para>
</db:section>
<db:section xml:id="instancing">
<db:title>Instancing</db:title>
<db:para>The <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml">RuntimeLoader</db:link> item can also be used in combination with instancing, as shown here:</db:para>
<db:programlisting language="qml">RandomInstancing {
    id: instancing
    instanceCount: 30
    position: InstanceRange {
        property alias boundsDiameter: helper.boundsDiameter
        from: Qt.vector3d(-3*boundsDiameter, -3*boundsDiameter, -3*boundsDiameter);
        to: Qt.vector3d(3*boundsDiameter, 3*boundsDiameter, 3*boundsDiameter)
    }
    color: InstanceRange { from: &quot;black&quot;; to: &quot;white&quot; }
}
</db:programlisting>
<db:para><db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml">RuntimeLoader</db:link> does not inherit from Model, but it has its own <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml#instancing-prop">instancing</db:link> property which allows us to instance a complex imported asset as if it were a simple model. In this case we use the <db:link xlink:href="qml-qtquick3d-helpers-randominstancing.xml">RandomInstancing</db:link> component from the <db:link xlink:href="qtquick3d-helpers-qmlmodule.xml">Helpers</db:link> module to randomly position items within a fixed area and with a random color.</db:para>
</db:section>
<db:section xml:id="material-overrides">
<db:title>Material Overrides</db:title>
<db:para>Sometimes when loading an asset, it is possible that it may not look as expected. The <db:link xlink:href="qml-qtquick3d-debugsettings.xml#materialOverride-prop">materialOverride</db:link> property will change how each material in the scene is rendered to display a particular contribution to the overall rendering. This can be useful for determining what exactly about the asset is not correct so that the original asset can be adjusted if necessary.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/runtimeloader-normals.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="runtimeloader/CMakeLists.txt">runtimeloader/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="runtimeloader/main.cpp">runtimeloader/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="runtimeloader/main.qml">runtimeloader/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="runtimeloader/qml.qrc">runtimeloader/qml.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="runtimeloader/runtimeloader.pro">runtimeloader/runtimeloader.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
