<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>NodeInstantiator QML Type</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Dynamically creates nodes.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Qt3D.Core 2.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qml-qt3d-core-nodeinstantiator.xml">NodeInstantiator</db:link> can be used to control the dynamic creation of nodes, or to dynamically create multiple objects from a template.</db:para>
<db:para>The <db:link xlink:href="qml-qt3d-core-nodeinstantiator.xml">NodeInstantiator</db:link> element will manage the objects it creates. Those objects are parented to the Instantiator and can also be deleted by the <db:link xlink:href="qml-qt3d-core-nodeinstantiator.xml">NodeInstantiator</db:link> if the <db:link xlink:href="qml-qt3d-core-nodeinstantiator.xml">NodeInstantiator</db:link>'s properties change. Nodes can also be destroyed dynamically through other means, and the <db:link xlink:href="qml-qt3d-core-nodeinstantiator.xml">NodeInstantiator</db:link> will not recreate them unless the properties of the <db:link xlink:href="qml-qt3d-core-nodeinstantiator.xml">NodeInstantiator</db:link> change.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="active-prop">
<db:title>active : bool</db:title>
<db:para>When active is <db:code>true</db:code>, and the delegate component is ready, the Instantiator will create objects according to the model. When active is <db:code>false</db:code>, no objects will be created and any previously created objects will be destroyed.</db:para>
<db:para>Default is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="asynchronous-prop">
<db:title>asynchronous : bool</db:title>
<db:para>When asynchronous is true the Instantiator will attempt to create objects asynchronously. This means that objects may not be available immediately, even if active is set to true.</db:para>
<db:para>You can use the <db:link xlink:href="qml-qt3d-core-nodeinstantiator.xml#objectAdded-signal">objectAdded</db:link> signal to respond to items being created.</db:para>
<db:para>Default is <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:para>The number of objects the Instantiator is currently managing.</db:para>
</db:section>
<db:section xml:id="delegate-prop">
<db:title>[default] delegate : QtQml::Component</db:title>
<db:para>The component used to create all objects.</db:para>
<db:para>Note that an extra variable, index, will be available inside instances of the delegate. This variable refers to the index of the instance inside the Instantiator, and can be used to obtain the object through the itemAt method of the Instantiator.</db:para>
<db:para>If this property is changed, all instances using the old delegate will be destroyed and new instances will be created using the new delegate.</db:para>
</db:section>
<db:section xml:id="model-prop">
<db:title>model : variant</db:title>
<db:para>This property can be set to any of the supported <db:link xlink:href="">data models</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A number that indicates the number of delegates to be created by the repeater</db:para>
</db:listitem>
<db:listitem>
<db:para>A model (for example, a ListModel item or a QAbstractItemModel subclass)</db:para>
</db:listitem>
<db:listitem>
<db:para>A string list</db:para>
</db:listitem>
<db:listitem>
<db:para>An object list</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The type of model affects the properties that are exposed to the <db:link xlink:href="qml-qt3d-core-nodeinstantiator.xml#delegate-prop">delegate</db:link>.</db:para>
<db:para>Default value is 1, which creates a single delegate instance.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Data Models</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="object-prop">
<db:title>[read-only] object : QtQml::QtObject</db:title>
<db:para>This is a reference to the first created object, intended as a convenience for the case where only one object has been created.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="objectAdded-signal">
<db:title>objectAdded(int <db:emphasis>index</db:emphasis>, QtObject <db:emphasis>object</db:emphasis>)</db:title>
<db:para>This signal is emitted when a node is added to the <db:link xlink:href="qml-qt3d-core-nodeinstantiator.xml">NodeInstantiator</db:link>. The <db:code role="parameter">index</db:code> parameter holds the index which the node has been given, and the <db:code role="parameter">object</db:code> parameter holds the <db:link xlink:href="qml-qt3d-core-node.xml">Node</db:link> that has been added.</db:para>
<db:para>The corresponding handler is <db:code>onNodeAdded</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onObjectAdded</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="objectRemoved-signal">
<db:title>objectRemoved(int <db:emphasis>index</db:emphasis>, QtObject <db:emphasis>object</db:emphasis>)</db:title>
<db:para>This signal is emitted when an object is removed from the Instantiator. The <db:code role="parameter">index</db:code> parameter holds the index which the object had been given, and the <db:code role="parameter">object</db:code> parameter holds the QtObject that has been removed.</db:para>
<db:para>Do not keep a reference to <db:code role="parameter">object</db:code> if it was created by this Instantiator, as in these cases it will be deleted shortly after the signal is handled.</db:para>
<db:para>The corresponding handler is <db:code>onObjectRemoved</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onObjectRemoved</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="objectAt-method">
<db:title>QtQml::QtObject objectAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns a reference to the object with the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
