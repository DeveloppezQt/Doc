<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWGLNativeContext Class</db:title>
<db:productname>QtPlatformHeaders</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Platform Headers Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A class encapsulating a WGL context on Windows with desktop OpenGL (opengl32.dll).</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWGLNativeContext</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:note>
<db:para>There is no binary compatibility guarantee for this class, meaning that an application using it is only guaranteed to work with the Qt version it was developed against.</db:para>
</db:note>
<db:para><db:link xlink:href="qwglnativecontext.xml">QWGLNativeContext</db:link> is a value class that can be passed to <db:link xlink:href="qopenglcontext.xml#setNativeHandle">QOpenGLContext::setNativeHandle</db:link>(). When creating a <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> with the native handle set, no new context will get created. Instead, the provided handles are used, without taking ownership. This allows wrapping a context created by an external framework or rendering engine. The typical usage will be similar to the following snippet:</db:para>
<db:programlisting language="cpp">#include &lt;QtPlatformSupport/QWGLNativeContext&gt;
...create and retrieve the WGL context and the corresponding window...
QOpenGLContext *context = new QOpenGLContext;
QWGLNativeContext nativeContext(hglrc, hwnd);
context-&gt;setNativeHandle(QVariant::fromValue(nativeContext));
context-&gt;create();
...
</db:programlisting>
<db:para>The window is needed because the its pixel format will be queried. When the adoption is successful, <db:link xlink:href="qopenglcontext.xml#format">QOpenGLContext::format</db:link>() will return a <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> describing this pixel format.</db:para>
<db:para>It is recommended to restrict the usage of QOpenGLContexts created this way. Various platform-specific behavior and issues may prevent such contexts to be made current with windows (surfaces) created by Qt due to non-matching pixel formats for example. A potentially safer solution is to use the wrapped context only to set up sharing and perform Qt-based rendering offscreen, using a separate, dedicated <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>. The resulting textures are then accessible in the foreign context too.</db:para>
<db:programlisting language="cpp">...like above...
QOpenGLContext *qtcontext = new QOpenGLContext;
qtcontext-&gt;setShareContext(context);
qtcontext-&gt;setFormat(context-&gt;format());
qtcontext-&gt;create();
...use qtcontext for rendering with Qt...
</db:programlisting>
<db:para>In addition to being used with <db:link xlink:href="qopenglcontext.xml#setNativeHandle">QOpenGLContext::setNativeHandle</db:link>(), this class is used also to retrieve the native context handle, that is, a HGLRC value, from a <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>. Calling <db:link xlink:href="qopenglcontext.xml#nativeHandle">QOpenGLContext::nativeHandle</db:link>() returns a <db:link xlink:href="qvariant.xml">QVariant</db:link> which, on Windows with opengl32.dll at least, will contain a <db:link xlink:href="qwglnativecontext.xml">QWGLNativeContext</db:link>:</db:para>
<db:programlisting language="cpp">QVariant nativeHandle = context-&gt;nativeHandle();
if (!nativeHandle.isNull() &amp;&amp; nativeHandle.canConvert&lt;QWGLNativeContext&gt;()) {
    QWGLNativeContext nativeContext = nativeHandle.value&lt;QWGLNativeContext&gt;();
    HGLRC hglrc = nativeContext.context();
    ...
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#setNativeHandle">QOpenGLContext::setNativeHandle</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglcontext.xml#nativeHandle">QOpenGLContext::nativeHandle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWGLNativeContext">
<db:title>QWGLNativeContext::QWGLNativeContext()</db:title>
<db:para>Construct a new instance with no handles.</db:para>
</db:section>
<db:section xml:id="QWGLNativeContext-1">
<db:title>QWGLNativeContext::QWGLNativeContext(HGLRC <db:emphasis>ctx</db:emphasis>, HWND <db:emphasis>wnd</db:emphasis>)</db:title>
<db:para>Constructs a new instance with the provided <db:code role="parameter">ctx</db:code> context handle and <db:code role="parameter">wnd</db:code> window handle.</db:para>
<db:note>
<db:para>The window specified by <db:code role="parameter">wnd</db:code> must have its pixel format set to a format compatible with the context's. If no SetPixelFormat() call was made on any device context belonging to the window, adopting the context will fail.</db:para>
</db:note>
</db:section>
<db:section xml:id="context">
<db:title>HGLRC QWGLNativeContext::context() const</db:title>
<db:para>Returns the WGL context.</db:para>
</db:section>
<db:section xml:id="window">
<db:title>HWND QWGLNativeContext::window() const</db:title>
<db:note>
<db:para>The window handle is not available when the <db:link xlink:href="qwglnativecontext.xml">QWGLNativeContext</db:link> is queried from a regular, non-adopted <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> using <db:link xlink:href="qopenglcontext.xml#nativeHandle">QOpenGLContext::nativeHandle</db:link>(). This is because the <db:emphasis>windows</db:emphasis> platform plugin creates WGL contexts using a dummy window that is not available afterwards. Instead, the native window handle (HWND) is queriable from a <db:link xlink:href="qwindow.xml">QWindow</db:link> via QPlatformNativeInterface::nativeResourceForWindow() using the <db:emphasis>&quot;handle&quot;</db:emphasis> resource key. Note however that the window will not have its pixel format set until it is first associated with a context via <db:link xlink:href="qopenglcontext.xml#makeCurrent">QOpenGLContext::makeCurrent</db:link>().</db:para>
</db:note>
<db:para>Returns handle for the window for which the context was created.</db:para>
</db:section>
</db:section>
</db:article>
