<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Topic Commands</db:title>
<db:productname>QDoc</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="27-qdoc-commands-alphabetical.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Command Index"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="14-qdoc-commands-contextcommands.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Context Commands"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>A topic command tells QDoc which source code element is being documented. Some topic commands allow you to create documentation pages that aren't tied to any underlying source code element.</db:para>
<db:para>When QDoc processes a QDoc comment, it tries to connect the comment to an element in the source code by first looking for a topic command that names the source code element. If there is no topic command, QDoc tries to connect the comment to the source code element that immediately follows the comment. If it can't do either of these and if there is no topic command that indicates the comment does not have an underlying source code element (e.g. <db:link xlink:href="13-qdoc-commands-topics.xml#page-command">\page</db:link>), then the comment is discarded.</db:para>
<db:anchor xml:id="topic-argument"/>
<db:para>The name of the entity being documented is usually the only argument for a topic command. Use the complete name. Sometimes there can be a second parameter in the argument. See e.g. <db:link xlink:href="13-qdoc-commands-topics.xml#page-command">\page</db:link>.</db:para>
<db:programlisting language="cpp">\enum QComboBox::InsertPolicy
</db:programlisting>
<db:para>The <db:link xlink:href="13-qdoc-commands-topics.xml#fn-command">\fn</db:link> command is a special case. For the <db:link xlink:href="13-qdoc-commands-topics.xml#fn-command">\fn</db:link> command, use the function's signature including the class qualifier.</db:para>
<db:programlisting language="cpp">\fn void QGraphicsWidget::setWindowFlags(Qt::WindowFlags wFlags)
</db:programlisting>
<db:para>A topic command can appear anywhere in a comment but must stand alone on its own line. It is good practice is to let the topic command be the first line of the comment. If the argument spans several lines, make sure that each line (except the last one) is ended with a backslash. Moreover, QDoc counts parentheses, which means that if it encounters a '(' it considers everything until the closing ')' as its argument.</db:para>
<db:para>If a topic command is repeated with different arguments, the same documentation will appear for both the units.</db:para>
<db:programlisting language="cpp">/ *!
    \fn void PreviewWindow::setWindowFlags()
    \fn void ControllerWindow::setWindowFlags()

    Sets the widgets flags using the QWidget::setWindowFlags()
    function.

    Then runs through the available window flags, creating a text
    that contains the names of the flags that matches the flags
    parameter, displaying the text in the widgets text editor.
* /
</db:programlisting>
<db:para>The PreviewWindow::setWindowFlags() and ControllerWindow::setWindowFlags() functions will get the same documentation.</db:para>
<db:anchor xml:id="class-command"/>
<db:section xml:id="class">
<db:title>\class</db:title>
<db:para>The \class command is for documenting a C++ class. The argument is the complete name of the class. The command tells QDoc that a class is part of the public API, and lets you enter a detailed description.</db:para>
<db:programlisting language="cpp">/ *!
    \class QMap::iterator

    \brief The QMap::iterator class provides an STL-style
    non-const iterator for QMap and QMultiMap.

    QMap features both \l{STL-style iterators} and
    \l{Java-style iterators}. The STL-style iterators ...
* /
</db:programlisting>
<db:para>The HTML documentation for the named class is written to a .html file named from the class name, in lower case, and with the double colon qualifier(s) replaced with '-'. For example, the documentation for the QMap::Iterator class is written to qmap-iterator.html.</db:para>
<db:anchor xml:id="framework"/>
<db:para>The file contains the class description from the \class comment, plus the documentation generated from QDoc comments for all the class members: a list of the class's types, properties, functions, signals, and slots.</db:para>
<db:para>In addition to the detailed description of the class, the \class comment typically contains a <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief-command">\brief</db:link> command and one or more <db:link xlink:href="03-qdoc-commands-markup.xml">Markup Commands</db:link>. See the \class command for any of the Qt class for examples. Here is a very simple example:</db:para>
<db:programlisting language="cpp">/ *!
    \class PreviewWindow
    \brief The PreviewWindow class is a custom widget.
           displaying the names of its currently set
           window flags in a read-only text editor.

    \ingroup miscellaneous

    The PreviewWindow class inherits QWidget. The widget
    displays the names of its window flags set with the \l
    {function} {setWindowFlags()} function. It is also
    provided with a QPushButton that closes the window.

    ...

    \sa QWidget
* /
</db:programlisting>
<db:para>The way QDoc renders this \class will depend a lot on your style.css file, but the general outline of the class reference page will look like this:</db:para>
<db:blockquote><db:bridgehead renderas="sect1">PreviewWindow Class Reference</db:bridgehead><db:para>The PreviewWindow class is a custom widget displaying the names of its currently set window flags in a read-only text editor. <db:link xlink:href="13-qdoc-commands-topics.xml#preview-window">More...</db:link></db:para>
<db:bridgehead renderas="sect3">Properties</db:bridgehead><db:itemizedlist>
<db:listitem>
<db:para>52 properties inherited from <db:link xlink:href="qwidget.xml">QWidget</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>1 property inherited from <db:link xlink:href="qobject.xml">QObject</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:bridgehead renderas="sect3">Public Functions</db:bridgehead><db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#constructor">PreviewWindow</db:link>(<db:link xlink:href="qwidget.xml">QWidget</db:link> *parent = 0)</db:para>
</db:listitem>
<db:listitem>
<db:para>void <db:link xlink:href="13-qdoc-commands-topics.xml#function">setWindowFlags</db:link>(<db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowFlags</db:link> flags)</db:para>
</db:listitem>
</db:itemizedlist>
<db:itemizedlist>
<db:listitem>
<db:para>183 public functions inherited from <db:link xlink:href="qwidget.xml">QWidget</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>28 public functions inherited from <db:link xlink:href="qobject.xml">QObject</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:bridgehead renderas="sect3">Public Slots</db:bridgehead><db:itemizedlist>
<db:listitem>
<db:para>17 public slots inherited from <db:link xlink:href="qwidget.xml">QWidget</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>1 public slot inherited from <db:link xlink:href="qobject.xml">QObject</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:bridgehead renderas="sect3">Additional Inherited Members</db:bridgehead><db:itemizedlist>
<db:listitem>
<db:para>1 signal inherited from <db:link xlink:href="qwidget.xml">QWidget</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>1 signal inherited from <db:link xlink:href="qobject.xml">QObject</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>4 static public members inherited from <db:link xlink:href="qwidget.xml">QWidget</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>4 static public members inherited from <db:link xlink:href="qobject.xml">QObject</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>39 protected functions inherited from <db:link xlink:href="qwidget.xml">QWidget</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>7 protected functions inherited from <db:link xlink:href="qobject.xml">QObject</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:anchor xml:id="preview-window"/>
<db:programlisting role="raw-html"><![CDATA[<hr />
            <h2>Detailed Description</h2>]]></db:programlisting>
<db:para>The PreviewWindow class is a custom widget displaying the names of its currently set window flags in a read-only text editor.</db:para>
<db:para>The PreviewWindow class inherits <db:link xlink:href="qwidget.xml">QWidget</db:link>. The widget displays the names of its window flags set with the <db:link xlink:href="13-qdoc-commands-topics.xml#function">setWindowFlags()</db:link> function. It is also provided with a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> that closes the window.</db:para>
<db:para>...</db:para>
<db:para>See also <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
<db:programlisting role="raw-html"><![CDATA[<hr />
            <h2>Member Function Documentation</h2>]]></db:programlisting>
<db:anchor xml:id="constructor"/>
<db:bridgehead renderas="sect3">PreviewWindow(QWidget *parent = 0)</db:bridgehead><db:para>Constructs a preview window widget with <db:emphasis>parent</db:emphasis>.</db:para>
<db:anchor xml:id="function"/>
<db:bridgehead renderas="sect3">setWindowFlags(Qt::WindowFlags flags)</db:bridgehead><db:para>Sets the widgets flags using the <db:link xlink:href="qwidget.xml#windowFlags-prop">QWidget::setWindowFlags</db:link>() function.</db:para>
<db:para>Then runs through the available window flags, creating a text that contains the names of the flags that matches the flags parameter, displaying the text in the widgets text editor.</db:para>
</db:blockquote>
<db:anchor xml:id="enum-command"/>
</db:section>
<db:section xml:id="enum">
<db:title>\enum</db:title>
<db:para>The \enum command is for documenting a C++ enum type. The argument is the full name of the enum type.</db:para>
<db:para>The enum values are documented in the \enum comment using the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#value-command">\value</db:link> command. If an enum value is not documented with \value, QDoc emits a warning. These warnings can be avoided using the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#omitvalue-command">\omitvalue</db:link> command to tell QDoc that an enum value should not be documented. The enum documentation will be included on the class reference page, header file page, or namespace page where the enum type is defined. For example, consider the enum type Corner in the Qt namespace:</db:para>
<db:programlisting language="cpp">enum Corner {
    TopLeftCorner = 0x00000,
    TopRightCorner = 0x00001,
    BottomLeftCorner = 0x00002,
    BottomRightCorner = 0x00003
#if defined(QT3_SUPPORT) &amp;amp;&amp;amp; !defined(Q_MOC_RUN)
    ,TopLeft = TopLeftCorner,
    TopRight = TopRightCorner,
    BottomLeft = BottomLeftCorner,
    BottomRight = BottomRightCorner
#endif
};
</db:programlisting>
<db:para>This enum can be cocumented this way:</db:para>
<db:programlisting language="cpp">/ *!
    \enum Qt::Corner

    This enum type specifies a corner in a rectangle:

    \value TopLeftCorner
           The top-left corner of the rectangle.
    \value TopRightCorner
           The top-right corner of the rectangle.
    \value BottomLeftCorner
           The bottom-left corner of the rectangle.
    \value BottomRightCorner
           The bottom-right corner of the rectangle.

    \omitvalue TopLeft
    \omitvalue TopRight
    \omitvalue BottomLeft
    \omitvalue BottomRight
               Bottom-right (omitted; not documented).
* /
</db:programlisting>
<db:para>Note the inclusion of the namespace qualifier. QDoc will render this enum type in qt.html like this:</db:para>
<db:blockquote><db:programlisting role="raw-html"><![CDATA[<h3 class="fn"><a name="Corner-enum"></a>enum Qt::Corner</h3>

               <p>This enum type specifies a corner in a rectangle:</p>

               <table border="1" cellpadding="2" cellspacing="1" width="100%">
               <tr>
               <th width="25%">Constant</th>
               <th width="15%">Value</th>
               <th width="60%">Description</th>
               </tr>

               <tr>
               <td valign="top"><tt>Qt::TopLeftCorner</tt></td>
               <td align="center" valign="top"><tt>0x00000</tt></td>
               <td valign="top">The top-left corner of the rectangle.</td>
               </tr>

               <tr>
               <td valign="top"><tt>Qt::TopRightCorner</tt></td>
               <td align="center" valign="top"><tt>0x00001</tt></td>
               <td valign="top">The top-right corner of the rectangle.</td>
               </tr>

               <tr>
               <td valign="top"><tt>Qt::BottomLeftCorner</tt></td>
               <td align="center" valign="top"><tt>0x00002</tt></td>
               <td valign="top">The bottom-left corner of the rectangle.</td>
               </tr>

               <tr>
               <td valign="top"><tt>Qt::BottomRightCorner</tt></td>
               <td align="center" valign="top"><tt>0x00003</tt></td>
               <td valign="top">The bottom-right corner of the rectangle.</td>
               </tr>

               </table>]]></db:programlisting>
</db:blockquote>
<db:para>See also <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#value-command">\value</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#omitvalue-command">\omitvalue</db:link>.</db:para>
<db:anchor xml:id="example-command"/>
</db:section>
<db:section xml:id="example">
<db:title>\example</db:title>
<db:para>The \example command is for documenting an example. The argument is the example's path relative to one of the paths listed in the <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs-variable">exampledirs</db:link> variable in the QDoc configuration file.</db:para>
<db:para>The documentation page will be output to modulename-path-to-example.html. QDoc will add a list of all the example's source and images files at the end of the page, unless <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#noautolist-command">\noautolist</db:link> command is used or the configuration variable <db:link xlink:href="25-qdoc-configuration-derivedprojects.xml#url-examples-variable">url.examples</db:link> is defined for the project.</db:para>
<db:para>For example, if <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs-variable">exampledirs</db:link> contains $QTDIR/examples/widgets/imageviewer, then</db:para>
<db:programlisting language="cpp">/ *!
    \example widgets/imageviewer
    \title ImageViewer Example
    \subtitle

    The example shows how to combine QLabel and QScrollArea
    to display an image.

    ...
* /
</db:programlisting>
<db:para>QDoc renders this example in widgets-imageviewer.html:</db:para>
<db:blockquote><db:programlisting role="raw-html"><![CDATA[        <center><h1>Image Viewer Example</h1></center>
        ]]></db:programlisting>
<db:para>The example shows how to combine <db:link xlink:href="qlabel.xml">QLabel</db:link> and <db:link xlink:href="qscrollarea.xml">QScrollArea</db:link> to display an image.</db:para>
<db:para>Files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://doc.qt.io/qt-5/qtwidgets-widgets-imageviewer-imageviewer-cpp.html">widgets/imageviewer/imageviewer.cpp</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://doc.qt.io/qt-5/qtwidgets-widgets-imageviewer-imageviewer-h.html">widgets/imageviewer/imageviewer.h</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://doc.qt.io/qt-5/qtwidgets-widgets-imageviewer-main-cpp.html">widgets/imageviewer/main.cpp</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>...</db:para>
</db:blockquote>
<db:para><db:emphasis role="bold">See also:</db:emphasis> <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#generatelist-command">\generatelist examplefiles</db:link>, <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#noautolist-command">\noautolist</db:link>, <db:link xlink:href="25-qdoc-configuration-derivedprojects.xml#url-examples-variable">url.examples</db:link>, <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#meta-command">\meta</db:link></db:para>
<db:anchor xml:id="externalpage-command"/>
</db:section>
<db:section xml:id="externalpage">
<db:title>\externalpage</db:title>
<db:para>The \externalpage command assigns a title to an external URL.</db:para>
<db:programlisting language="cpp">/ *!
    \externalpage http://doc.qt.io/
    \title Qt Documentation Site
* /
</db:programlisting>
<db:para>This allows you to include a link to the external page in your documentation this way:</db:para>
<db:programlisting language="cpp">/ *!
    At the \l {Qt Documentation Site} you can find the latest
    documentation for Qt, Qt Creator, the Qt SDK and much more.
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:para>At the <db:link xlink:href="http://doc.qt.io/">Qt Documentation Site</db:link> you can find the latest documentation for Qt, Qt Creator, the Qt SDK and much more.</db:para>
</db:blockquote>
<db:para>To achieve the same result without using the \externalpage command, you would have to hard-code the address into your documentation:</db:para>
<db:programlisting language="cpp">/ *!
    At the \l {http://doc.qt.io/}{Qt Documentation Site}
    you can find the latest documentation for Qt, Qt Creator, the Qt SDK
    and much more.
* /
</db:programlisting>
<db:para>The \externalpage command makes it easier to maintain the documentation. If the address changes, you only need to change the argument of the \externalpage command.</db:para>
<db:anchor xml:id="fn-command"/>
</db:section>
<db:section xml:id="fn-function">
<db:title>\fn (function)</db:title>
<db:para>The \fn command is for documenting a function. The argument is the function's signature, including its template parameters (if any), return type, const-ness, and list of formal arguments with types. If the named function doesn't exist, QDoc emits a warning.</db:para>
<db:para>Since QDoc version 6.0, the \fn command can be used for documenting class members that are not explicitly declared in the header, but are implicitly generated by the compiler; default constructor and destructor, copy constructor and move-copy constructor, assignment operator, and move-assignment operator.</db:para>
<db:note>
<db:para>The \fn command is QDoc's default command: when no topic command can be found in a QDoc comment, QDoc tries to tie the documentation to the following code as if it is the documentation for a function. Hence, it is normally not necessary to include this command when documenting a function, if the function's QDoc comment is written immediately above the function implementation in the .cpp file. But it must be present when documenting an inline function in the .cpp file that is implemented in the .h file.</db:para>
</db:note>
<db:programlisting language="cpp">/ *!
    \fn bool QToolBar::isAreaAllowed(Qt::ToolBarArea area) const

    Returns \c true if this toolbar is dockable in the given
    \a area; otherwise returns \c false.
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:bridgehead renderas="sect3">bool QToolBar::isAreaAllowed(Qt::ToolBarArea area) const
           </db:bridgehead><db:para>Returns true if this toolbar is dockable in the given <db:code role="parameter">area</db:code>; otherwise returns false.</db:para>
</db:blockquote>
<db:note>
<db:para>Running in debug mode (pass the -debug command line option or set the QDOC_DEBUG environment variable before invoking QDoc) can help troubleshoot \fn commands that QDoc fails to parse. In debug mode, additional diagnostic information is available.</db:para>
</db:note>
<db:para>See also <db:link xlink:href="18-qdoc-commands-relating.xml#overload-command">\overload</db:link>.</db:para>
<db:anchor xml:id="group-command"/>
</db:section>
<db:section xml:id="group">
<db:title>\group</db:title>
<db:para>The \group command creates a separate page that lists the classes belonging to the group. The argument is the group name.</db:para>
<db:para>A class is included in a group by using the <db:link xlink:href="19-qdoc-commands-grouping.xml#ingroup-command">\ingroup</db:link> command. Overview pages can also be related to a group using the same command, but the list of overview pages must be requested explicitly using the <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#generatelist-command">\generatelist</db:link> command (see example below).</db:para>
<db:para>The \group command is typically followed by a <db:link xlink:href="20-qdoc-commands-namingthings.xml#title-command">\title</db:link> command and a short introduction to the group. The HTML page for the group is written to a .html file put in &lt;lower-case&gt;<db:emphasis>group</db:emphasis>.html.</db:para>
<db:para>Each class name is listed as a link to the class reference page followed by the text from the class's <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief-command">\brief</db:link> texts.</db:para>
<db:programlisting language="cpp">/ *!
    \group io

    \title Input/Output and Networking

    These classes are used to handle input and output to
    and from external devices, processes, files etc., as
    well as manipulating files and directories.
* /
</db:programlisting>
<db:para>QDoc generates a group page in io.html that will look like this:</db:para>
<db:blockquote><db:programlisting role="raw-html"><![CDATA[<h1>Input/Output and Networking</h1>

         <p>These classes are used to handle input and output
         to and from external devices, processes, files etc., as
         well as manipulating files and directories.</p>

         <p>
         <table width="100%">
             <tr valign="top" bgcolor="#e0e0e0">
             <td><b>
             <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a>
             </b></td>
             <td>
             The base functionality common to all socket types
             </td></tr>

             <tr valign="top" bgcolor="#e0e0e0">
             <td><b>
             <a href="http://doc.qt.io/qt-5/qbuffer.html">QBuffer</a>
             </b></td>
             <td>
             QIODevice interface for a QByteArray
             </td></tr>

             <tr valign="top" bgcolor="#e0e0e0">
             <td><b>
             <a href="http://doc.qt.io/qt-5/qclipboard.html">QClipboard</a>
             </b></td>
             <td>
             Access to the window system clipboard
             </td></tr>
         </table>]]></db:programlisting>
</db:blockquote>
<db:para>Note that overview pages related to the group, must be listed explicitly using the <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#generatelist-command">\generatelist</db:link> command with the related argument.</db:para>
<db:programlisting language="cpp">/ *!
    \group architecture

    \title Architecture

    These documents describe aspects of Qt's architecture
    and design, including overviews of core Qt features and
    technologies.

    \generatelist{related}
* /
</db:programlisting>
<db:para>See also <db:link xlink:href="19-qdoc-commands-grouping.xml#ingroup-command">\ingroup</db:link> and <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#generatelist-command">\generatelist</db:link>.</db:para>
<db:anchor xml:id="headerfile-command"/>
</db:section>
<db:section xml:id="headerfile">
<db:title>\headerfile</db:title>
<db:para>The \headerfile command is for documenting the global functions, types and macros that are declared in a header file, but not in a namespace. The argument is the name of the header file. The HTML page is written to a .html file constructed from the header file argument.</db:para>
<db:para>The documentation for a function, type, or macro that is declared in the header file being documented, is included in the header file page using the <db:link xlink:href="18-qdoc-commands-relating.xml#relates-command">\relates</db:link> command.</db:para>
<db:para>If the argument doesn't exist as a header file, the \headerfile command creates a documentation page for the header file anyway.</db:para>
<db:programlisting language="cpp">/ *!
    \headerfile &amp;lt;QtAlgorithms&amp;gt;

    \title Generic Algorithms

    \brief The &amp;lt;QtAlgorithms&amp;gt; header file provides
     generic template-based algorithms.

    Qt provides a number of global template functions in \c
    &amp;lt;QtAlgorithms&amp;gt; that work on containers and perform
    well-know algorithms.
* /
</db:programlisting>
<db:para>QDoc generates a header file page qtalgorithms.html that looks like this:</db:para>
<db:blockquote><db:programlisting role="raw-html"><![CDATA[               <center><h1>&lt;QtAlgorithms&gt; -
                           Generic Algorithms</h1></center>
               <p>The <QtAlgorithms> header file provides generic
               template-based algorithms.
               <a href="13-qdoc-commands-topics.html#header-command">More...</a>
               </p>

               <h3>Functions</h3>
               <ul>
               <li>RandomAccessIterator
               <a href="http://doc.qt.io/qt-5/qtalgorithms-obsolete.html#qBinaryFind">qBinaryFind</a></b>
               (RandomAccessIterator begin, RandomAccessIterator end,
               const T & value)</li>
               <li>...</li></ul>
               <hr />
               ]]></db:programlisting>
<db:anchor xml:id="header"/>
<db:programlisting role="raw-html"><![CDATA[<h2>Detailed Description</h2>
               <p>The <QtAlgorithms> header file provides generic
               template-based algorithms. </p>]]></db:programlisting>
<db:para>Qt provides a number of global template functions in &lt;QtAlgorithms&gt; that work on containers and perform well-know algorithms.</db:para>
<db:para>...</db:para>
</db:blockquote>
<db:para>See also <db:link xlink:href="16-qdoc-commands-status.xml#inheaderfile-command">\inheaderfile</db:link>.</db:para>
<db:anchor xml:id="macro-command"/>
</db:section>
<db:section xml:id="macro">
<db:title>\macro</db:title>
<db:para>The \macro command is for documenting a C++ macro. The argument is the macro in one of three styles: function-like macros like <db:link xlink:href="qtglobal.xml#Q_ASSERT">Q_ASSERT</db:link>(), declaration-style macros like <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>(), and macros without parentheses like <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link>.</db:para>
<db:para>The \macro comment must contain a <db:link xlink:href="18-qdoc-commands-relating.xml#relates-command">\relates</db:link> command that attaches the macro comment to a class, header file, or namespace. Otherwise, the documentation will be lost. Here are three example macro comments followed by what they might look like in qtglobal.html or qobject.html:</db:para>
<db:programlisting language="cpp">/ *!
    \macro void Q_ASSERT(bool test)
    \relates &amp;lt;QtGlobal&amp;gt;

    Prints a warning message containing the source code
    file name and line number if \a test is false.

    ...

    \sa Q_ASSERT_X(), qFatal(), {Debugging Techniques}
* /
</db:programlisting>
<db:blockquote><db:bridgehead renderas="sect3">void Q_ASSERT ( bool &lt;i&gt;test&lt;/i&gt; )</db:bridgehead><db:para>Prints a warning message containing the source code file name and line number if <db:code role="parameter">test</db:code> is false.</db:para>
<db:para>...</db:para>
<db:para>See also <db:link xlink:href="qtglobal.xml#Q_ASSERT_X">Q_ASSERT_X</db:link>(), <db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>() and <db:link xlink:href="debug.xml">Debugging Techniques</db:link>.</db:para>
</db:blockquote>
<db:programlisting language="cpp">/ *!
    \macro Q_PROPERTY(...)
    \relates QObject

    This macro declares a QObject property. The syntax is:

    ...

    \sa {Qt's Property System}
* /
</db:programlisting>
<db:blockquote><db:bridgehead renderas="sect3">Q_PROPERTY ( ... )</db:bridgehead><db:para>This macro declares a <db:link xlink:href="qobject.xml">QObject</db:link> property. The syntax is:</db:para>
<db:para>...</db:para>
<db:para>See also <db:link xlink:href="properties.xml">Qt's Property System</db:link>.</db:para>
</db:blockquote>
<db:programlisting language="cpp">/ *!
    \macro Q_OBJECT
    \relates QObject

    The Q_OBJECT macro must appear in the private section
    of a class definition that declares its own signals and
    slots, or that uses other services provided by Qt's
    meta-object system.

    ...

    \sa {Meta-Object System}, {Signals and Slots}, {Qt's
    Property System}
* /
</db:programlisting>
<db:blockquote><db:bridgehead renderas="sect3">Q_OBJECT</db:bridgehead><db:para>The <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro must appear in the private section of a class definition that declares its own signals and slots or that uses other services provided by Qt's meta-object system.</db:para>
<db:para>...</db:para>
<db:para>See also <db:link xlink:href="metaobjects.xml">Meta-Object System</db:link>, <db:link xlink:href="signalsandslots.xml">Signals &amp; Slots</db:link> and <db:link xlink:href="properties.xml">Qt's Property System</db:link>.</db:para>
</db:blockquote>
<db:anchor xml:id="module-command"/>
</db:section>
<db:section xml:id="module">
<db:title>\module</db:title>
<db:para>The \module creates a page that lists the classes belonging to the module specified by the command's argument. A class included in the module by including the <db:link xlink:href="19-qdoc-commands-grouping.xml#inmodule-command">\inmodule</db:link> command in the \class comment.</db:para>
<db:para>The \module command is typically followed by a <db:link xlink:href="20-qdoc-commands-namingthings.xml#title-command">\title</db:link> and a <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief-command">\brief</db:link> command. Each class is listed as a link to the class reference page followed by the text from the class's <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief-command">\brief</db:link> command. For example:</db:para>
<db:programlisting language="cpp">/ *!
    \module QtNetwork

    \title Qt Network Module

    \brief Contains classes for writing TCP/IP clients and servers.

    The network module provides classes to make network
    programming easier and portable. It offers both
    high-level classes such as QNetworkAccessManager that
    implements application-level protocols, and
    lower-level classes such as QTcpSocket, QTcpServer, and
    QUdpSocket.
* /
</db:programlisting>
<db:para>QDoc renders this in qtnetwork.html like this:</db:para>
<db:blockquote><db:bridgehead renderas="sect1">&lt;center&gt;Qt Network Module&lt;/center&gt;</db:bridgehead><db:para>The Qt Network module offers classes that allow you to write TCP/IP clients and servers.<db:link xlink:href="13-qdoc-commands-topics.xml#module-details">More...</db:link></db:para>
<db:programlisting role="raw-html"><![CDATA[               <p>
               <table width="100%">
                   <tr valign="top" bgcolor="#d0d0d0">
                   <td><b>
                   <a href="https://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a>
                   </b></td>
                   <td>
                   The base functionality common to all socket types
                   </td></tr>

                   <tr valign="top" bgcolor="#d0d0d0">
                   <td>...</td>
                   <td>...</td>
                   </tr>
               </table>

               <p><hr /></p>
               ]]></db:programlisting>
<db:anchor xml:id="module-details"/>
<db:programlisting role="raw-html"><![CDATA[<h2>Detailed Description</h2>

               <p>
               The Qt Network module offers classes that allow you to
               write TCP/IP clients and servers.
               </p>

               <p>
               The network module provides classes to make network
               programming easier and portable. It offers both
               high-level classes such as QNetworkAccessManager that
               implements application-level protocols, and
               lower-level classes such as QTcpSocket, QTcpServer, and
               QUdpSocket.
               </p>]]></db:programlisting>
<db:para>...</db:para>
</db:blockquote>
<db:para>The <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#noautolist-command">\noautolist</db:link> command can be used here to omit the automatically generated list of classes at the end.</db:para>
<db:para>See also <db:link xlink:href="19-qdoc-commands-grouping.xml#inmodule-command">\inmodule</db:link></db:para>
<db:anchor xml:id="namespace-command"/>
</db:section>
<db:section xml:id="namespace">
<db:title>\namespace</db:title>
<db:para>The \namespace command is for documenting the contents of the C++ namespace named as its argument. The reference page QDoc generates for a namespace is similar to the reference page it generates for a C++ class.</db:para>
<db:programlisting language="cpp">/ *!
    \namespace Qt

    \brief Contains miscellaneous identifiers used throughout the Qt library.
* /
</db:programlisting>
<db:para>QDoc renders this in qt.html like this:</db:para>
<db:blockquote><db:programlisting role="raw-html"><![CDATA[               <center><h1>Qt Namespace</h1></center>
               <p>The Qt namespace contains miscellaneous
               identifiers used throughout the Qt library.
               <a href="13-qdoc-commands-topics.html#name">More...</a>
               </p>

               <pre>#include &lt;Qt&gt;</pre>
               <ul>
               <li>
               <a href="https://doc.qt.io/qt-5/qt-obsolete.html">
                   Obsolete members</a></li>
               </ul>


               <h3>Types</h3>
               <ul>
               <li>flags
               <a href="https://doc.qt.io/qt-5/qt.html#AlignmentFlag-enum">Alignment</a></b></li>
               <li>...</li></ul>
               <hr />
               ]]></db:programlisting>
<db:anchor xml:id="name"/>
<db:programlisting role="raw-html"><![CDATA[<h2>Detailed Description</h2>
               <p>Contains miscellaneous identifiers
               used throughout the Qt library.</p>]]></db:programlisting>
<db:para>...</db:para>
</db:blockquote>
<db:para>Note that in C++, a particular namespace can be used in more than one module, but when C++ elements from different modules are declared in the same namespace, the namespace itself must be documented in one module only. For example, namespace Qt in the example above contains types and functions from both <db:link xlink:href="qtcore-module.xml">QtCore</db:link> and <db:link xlink:href="qtgui-module.xml">QtGui</db:link>, but it is documented with the \namespace command only in <db:link xlink:href="qtcore-module.xml">QtCore</db:link>.</db:para>
<db:anchor xml:id="page-command"/>
</db:section>
<db:section xml:id="page">
<db:title>\page</db:title>
<db:para>The \page command is for creating a stand-alone documentation page. The argument can consist of two parts separated by a space. The first part is the name of the file where QDoc should store the page. The second part, if present, is a word that specifies the page type. Currently, the second part can be one of the following list of words:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>api - This is the type of page used for C++ class references and QML type references. You should never use this one for the pages you write, because this one is reserved for QDoc.</db:para>
</db:listitem>
<db:listitem>
<db:para>attribution - A page describing (code) attributions.</db:para>
</db:listitem>
<db:listitem>
<db:para>example - A page that describes a working example.</db:para>
</db:listitem>
<db:listitem>
<db:para>faq - A frequently asked question.</db:para>
</db:listitem>
<db:listitem>
<db:para>howto - A user guide on how to use some components of the software.</db:para>
</db:listitem>
<db:listitem>
<db:para>overview - For text pages that provide an overview of some important subject.</db:para>
</db:listitem>
<db:listitem>
<db:para>tutorial - For text pages that are part of a tutorial.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The page title is set using the <db:link xlink:href="20-qdoc-commands-namingthings.xml#title-command">\title</db:link> command.</db:para>
<db:programlisting language="cpp">/ *!
    \page aboutqt.html

    \title About Qt

    Qt is a C++ toolkit for cross-platform GUI
    application development. Qt provides single-source
    portability across Microsoft Windows, macOS, Linux,
    and all major commercial Unix variants.

    Qt provides application developers with all the
    functionality needed to build applications with
    state-of-the-art graphical user interfaces. Qt is fully
    object-oriented, easily extensible, and allows true
    component programming.

    ...
 * /
 </db:programlisting>
<db:para>QDoc renders this page in aboutqt.html.</db:para>
<db:anchor xml:id="property-command"/>
</db:section>
<db:section xml:id="property">
<db:title>\property</db:title>
<db:para>The \property command is for documenting a Qt property. The argument is the full property name.</db:para>
<db:para>A property is defined using the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>() macro. The macro takes as arguments the property's name and its set, reset and get functions.</db:para>
<db:programlisting language="cpp">Q_PROPERTY(QString state READ state WRITE setState)
</db:programlisting>
<db:para>The set, reset and get functions don't need to be documented, documenting the property is sufficient. QDoc will generate a list of the access function that will appear in the property documentation which in turn will be located in the documentation of the class that defines the property.</db:para>
<db:para>The \property command comment typically includes a <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief-command">\brief</db:link> command. For properties the <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief-command">\brief</db:link> command's argument is a sentence fragment that will be included in a one line description of the property. The command follows the same rules for the <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief-property">description</db:link> as the <db:link xlink:href="13-qdoc-commands-topics.xml#variable-command">\variable</db:link> command.</db:para>
<db:programlisting language="cpp">/ *!
    \property QPushButton::flat
    \brief Whether the border is disabled.

    This property's default is false.
* /
</db:programlisting>
<db:para>QDoc includes this in qpushbutton.html like this:</db:para>
<db:blockquote><db:bridgehead renderas="sect3">flat : bool</db:bridgehead><db:para>This property holds whether the border is disabled.</db:para>
<db:para>This property's default is false.</db:para>
<db:para>Access functions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold"> bool isFlat () const</db:emphasis></db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold"> void setFlat ( bool )</db:emphasis></db:para>
</db:listitem>
</db:itemizedlist>
</db:blockquote>
<db:programlisting language="cpp">/ *!
    \property QWidget::width
    \brief The width of the widget excluding any window frame.

    See the \l {Window Geometry} documentation for an
    overview of window geometry.

    \sa geometry, height, size
* /
</db:programlisting>
<db:para>QDoc includes this in qwidget.html like this:</db:para>
<db:blockquote><db:bridgehead renderas="sect3">width : const int</db:bridgehead><db:para>This property holds the width of the widget excluding any window frame.</db:para>
<db:para>See the <db:link xlink:href="application-windows.xml#window-geometry">Window Geometry</db:link> documentation for an overview of window geometry.</db:para>
<db:para>Access functions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold"> int width () const</db:emphasis></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>See also <db:link xlink:href="qwidget.xml#geometry-prop">geometry</db:link>, <db:link xlink:href="qwidget.xml#height-prop">height</db:link>, and <db:link xlink:href="qwidget.xml#size-prop">size</db:link>.</db:para>
</db:blockquote>
<db:anchor xml:id="qmlattachedproperty-command"/>
</db:section>
<db:section xml:id="qmlattachedproperty">
<db:title>\qmlattachedproperty</db:title>
<db:para>The \qmlattachedproperty command is for documenting a QML property that will be attached to some QML type. See <db:link xlink:href="http://doc.qt.io/qt-5/qtqml-syntax-objectattributes.html#attached-properties-and-attached-signal-handlers">Attached Properties</db:link>. The argument is the rest of the line. The argument text should be the property type, followed by the QML element name where the property is being declared, the :: qualifier, and finally the property name. If we have a QML attached property named isCurrentItem in QML ListView, and the property has type bool, the \qmlattachedproperty for it would look like this:</db:para>
<db:programlisting language="cpp">/ *!
    \qmlattachedproperty bool ListView::isCurrentItem
    This attached property is \c true if this delegate is the current
item; otherwise false.

    It is attached to each instance of the delegate.

    This property may be used to adjust the appearance of the current
item, for example:

    \snippet doc/src/snippets/declarative/listview/listview.qml isCurrentItem
* /
</db:programlisting>
<db:para>QDoc includes this attached property on the QML reference page for the <db:link xlink:href="http://doc.qt.io/qt-5/qml-qtquick-listview.html#isCurrentItem-attached-prop">ListView</db:link> element.</db:para>
<db:anchor xml:id="qmlattachedsignal-command"/>
</db:section>
<db:section xml:id="qmlattachedsignal">
<db:title>\qmlattachedsignal</db:title>
<db:para>The \qmlattachedsignal command is for documenting an attachable <db:link xlink:href="qtqml-syntax-signals.xml">signal</db:link>. The \qmlattachedsignal command is used just like the <db:link xlink:href="13-qdoc-commands-topics.xml#qmlsignal-command">\qmlsignal</db:link> command.</db:para>
<db:para>The argument is the rest of the line. It should be the name of the QML type where the signal is declared, the :: qualifier, and finally the signal name. For example, a QML attached signal named add() in the GridView element is documented like this:</db:para>
<db:programlisting language="cpp">/ *!
    \qmlattachedsignal GridView::add()
    This attached signal is emitted immediately after an item is added to the view.
* /
</db:programlisting>
<db:para>QDoc includes this documentation on the QML reference page for the <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> element.</db:para>
<db:anchor xml:id="qmlbasictype-command"/>
</db:section>
<db:section xml:id="qmlbasictype">
<db:title>\qmlbasictype</db:title>
<db:para>The \qmlbasictype command is for documenting a basic type for QML. The argument is the type name. The type must be included in the QML basic types group using the <db:link xlink:href="19-qdoc-commands-grouping.xml#ingroup-command">\ingroup</db:link> command as shown below. This will cause QDoc to include the documentation for the type on the <db:link xlink:href="http://doc.qt.io/qt-5/qtqml-typesystem-basictypes.html">QML Basic Types</db:link> page. The <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief-command">\brief</db:link> command is also required, because it appears on the <db:link xlink:href="http://doc.qt.io/qt-5/qtqml-typesystem-basictypes.html">QML Basic Types</db:link> page as well.</db:para>
<db:programlisting language="cpp">/ *!
    \qmlbasictype int
    \ingroup qmlbasictypes

    \brief An integer is a whole number, for example 0, 10, or -20.

    An integer is a whole number, e.g. 0, 10, or -20. The possible
    \c int values range from around -2000000000 to around
    2000000000, although most elements will only accept a reduced
    range (which they mention in their documentation).

    Example:
    \qml
    Item { width: 100; height: 200 }
    \endqml

    \sa {QML Basic Types}
* /
</db:programlisting>
<db:para>QDoc outputs this as <db:link xlink:href="http://doc.qt.io/qt-5/qml-int.html">qml-int.html</db:link>.</db:para>
<db:anchor xml:id="qmlclass-command"/>
</db:section>
<db:section xml:id="qmlclass">
<db:title>\qmlclass</db:title>
<db:para>This command is deprecated. Use <db:link xlink:href="13-qdoc-commands-topics.xml#qmltype-command">\qmltype</db:link> instead.</db:para>
<db:para>The \qmlclass command is for documenting a QML type that is instantiated by a C++ class. The command has two arguments. The first argument is the name of the QML type. The second argument is the name of the C++ class that instantiates the QML type.</db:para>
<db:programlisting language="cpp">/ *!
    \qmlclass Transform QGraphicsTransform
    \ingroup qml-transform-elements
    \since 4.7
    \brief Provides a way of building advanced transformations on Items.

    The Transform element is a base type which cannot be
    instantiated directly. The following concrete Transform types
    are available:

    \list
      \li \l Rotation
      \li \l Scale
      \li \l Translate
    \endlist

    The Transform elements let you create and control advanced
    transformations that can be configured independently using
    specialized properties.

    You can assign any number of Transform elements to an \l
    Item. Each Transform is applied in order, one at a time.

* /
</db:programlisting>
<db:para>This example generates the <db:link xlink:href="https://doc.qt.io/qt-5/qml-qtquick-transform.html">QML Transform</db:link> page. The \qmlclass comment should include the <db:link xlink:href="16-qdoc-commands-status.xml#since-command">\since</db:link> command, because all QML types are new. It should also include the <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief-command">\brief</db:link> command. If a type is a member of a group of QML types, it should also include one or more <db:link xlink:href="19-qdoc-commands-grouping.xml#ingroup-command">\ingroup</db:link> commands.</db:para>
<db:anchor xml:id="qmlmethod-command"/>
</db:section>
<db:section xml:id="qmlmethod">
<db:title>\qmlmethod</db:title>
<db:para>The \qmlmethod command is for documenting a QML method. The argument is the complete method signature, including return type and parameter names and types.</db:para>
<db:programlisting language="cpp">/ *!
    \qmlmethod void TextInput::select(int start, int end)

    Causes the text from \a start to \a end to be selected.

    If either start or end is out of range, the selection is not changed.

    After having called this, selectionStart will become the lesser, and
    selectionEnd the greater (regardless of the order passed to this method).

   \sa selectionStart, selectionEnd
* /
</db:programlisting>
<db:para>QDoc includes this documentation on the element reference page for the <db:link xlink:href="http://doc.qt.io/qt-5/qml-qtquick-textinput.html#select-method">TextInput</db:link> element.</db:para>
<db:anchor xml:id="qmltype-command"/>
</db:section>
<db:section xml:id="qmltype">
<db:title>\qmltype</db:title>
<db:para>The \qmltype command is for documenting a QML type. The command has one argument, which is the name of the QML type.</db:para>
<db:para>If the QML type is instantiated by a C++ class, that class must be specified using the <db:link xlink:href="13-qdoc-commands-topics.xml#instantiates-command">\instantiates</db:link> context command.</db:para>
<db:programlisting language="cpp">/ *!
    \qmltype Transform
    \instantiates QGraphicsTransform
    \inqmlmodule QtQuick

    \brief Provides a way to build advanced transformations on Items.

    The Transform element is a base type which cannot be
    instantiated directly.
* /
</db:programlisting>
<db:para>Here, the <db:emphasis>\qmltype</db:emphasis> comment includes <db:link xlink:href="13-qdoc-commands-topics.xml#instantiates-command">\instantiates</db:link> to specify that a Transform is instantiated by the C++ class <db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link>. A \qmltype comment should always include a <db:link xlink:href="16-qdoc-commands-status.xml#since-command">\since</db:link> command, because all QML types are new. It should also include a <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief-command">\brief</db:link> description. If a QML type is a member of a QML type group, the \qmltype comment should include one or more <db:link xlink:href="19-qdoc-commands-grouping.xml#ingroup-command">\ingroup</db:link> commands.</db:para>
<db:anchor xml:id="qmlproperty-command"/>
</db:section>
<db:section xml:id="qmlproperty">
<db:title>\qmlproperty</db:title>
<db:para>The \qmlproperty command is for documenting a QML property. The argument is the rest of the line. The argument text should be the property type, followed by the QML type name, the :: qualifier, and finally the property name. If we have a QML property named x in QML type Translate, and the property has type real, the \qmlproperty for it would look like this:</db:para>
<db:programlisting language="cpp">/ *!
    \qmlproperty real Translate::x

    The translation along the X axis.
* /
</db:programlisting>
<db:para>QDoc includes this QML property on the QML reference page for the <db:link xlink:href="http://doc.qt.io/qt-5/qml-qtquick-translate.html">Translate</db:link> element.</db:para>
<db:para>If the QML property is of enumeration type, or it holds a bit-wise combination of flags, the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#value-command">\value</db:link> command can be used to document the acceptable values.</db:para>
<db:anchor xml:id="qmlsignal-command"/>
</db:section>
<db:section xml:id="qmlsignal">
<db:title>\qmlsignal</db:title>
<db:para>The \qmlsignal command is for documenting a QML signal. The argument is the rest of the line. The arguments should be: the QML type where the signal is declared, the :: qualifier, and finally the signal name. If we have a QML signal named clicked(), the documentation for it would look like this:</db:para>
<db:programlisting language="cpp">/ *!
\qmlsignal QtQuick::MouseArea::clicked(MouseEvent mouse)
This signal is emitted when there is a click. A click is defined as a
press followed by a release, both inside the MouseArea.
* /
</db:programlisting>
<db:para>QDoc includes this documentation on the QML reference page for the <db:link xlink:href="http://doc.qt.io/qt-5/qml-qtquick-mousearea.html#clicked-signal">MouseArea</db:link> element.</db:para>
<db:anchor xml:id="qmlmodule-command"/>
</db:section>
<db:section xml:id="qmlmodule">
<db:title>\qmlmodule</db:title>
<db:para>Insert the \\qmlmodule command to create a QML module page. A QML module is a collection of QML types or any related material. This command is similar to the <db:link xlink:href="13-qdoc-commands-topics.xml#group-command">group-command</db:link>.</db:para>
<db:para>A QML class may belong to a module by inserting the <db:link xlink:href="13-qdoc-commands-topics.xml#inqmlmodule-command">\inqmlmodule</db:link> command as a topic command. Every member of a group must be linked to using the module name and two colons (::).</db:para>
<db:programlisting language="cpp">\beginqdoc
    A link to the TabWidget of the UI Component is \l {UIComponent::TabWidget}.
\endqdoc
</db:programlisting>
<db:para>QDoc will generate a page for the module with a listing of the members of the module.</db:para>
<db:programlisting language="cpp">\qmlmodule ClickableComponents

This is a list of the Clickable Components set. A Clickable component
responds to a \c clicked() event.
</db:programlisting>
<db:anchor xml:id="inqmlmodule-command"/>
</db:section>
<db:section xml:id="inqmlmodule">
<db:title>\inqmlmodule</db:title>
<db:para>A QML class may belong to a <db:link xlink:href="13-qdoc-commands-topics.xml#qmlmodule-command">QML module</db:link> by inserting the <db:link xlink:href="13-qdoc-commands-topics.xml#inqmlmodule-command">\inqmlmodule</db:link> command as a topic command, with the module name (without a version number) as the only argument. Every member of a group must be linked to using the module name and two colons (::).</db:para>
<db:programlisting language="cpp">\qmltype ClickableButton
\inqmlmodule ClickableComponents

A clickable button that responds to the \c click() event.
</db:programlisting>
<db:para>To link to the ClickableButton, use the \l ClickableComponents::ClickableButton format.</db:para>
<db:para>The <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#noautolist-command">\noautolist</db:link> command can be used here to omit the automatically generated list of types at the end.</db:para>
<db:anchor xml:id="instantiates-command"/>
</db:section>
<db:section xml:id="instantiates">
<db:title>\instantiates</db:title>
<db:para>The \instantiates command is used in the <db:link xlink:href="13-qdoc-commands-topics.xml#qmltype-command">QML type</db:link> comment of an elemental QML type to specify the name of the C++ class that instantiates the QML type.</db:para>
<db:para>If the QML type is not instantiated by a C++ class, this command is not used.</db:para>
<db:programlisting language="cpp">/ *!
    \qmltype Transform
    \instantiates QGraphicsTransform
    \inqmlmodule QtQuick

    \brief Provides a way to build advanced transformations on Items.

    The Transform element is a base type which cannot be
    instantiated directly.
* /
</db:programlisting>
<db:para>Here, the <db:emphasis>\qmltype</db:emphasis> comment includes <db:link xlink:href="13-qdoc-commands-topics.xml#instantiates-command">\instantiates</db:link> to specify that a Transform is instantiated by the C++ class <db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link>.</db:para>
<db:anchor xml:id="typealias-command"/>
</db:section>
<db:section xml:id="typealias">
<db:title>\typealias</db:title>
<db:para>The \typealias command is similar to <db:link xlink:href="13-qdoc-commands-topics.xml#typedef-command">\typedef</db:link>, but specific to documenting a C++ type alias:</db:para>
<db:programlisting language="cpp">class Foo
{
public:
    using ptr = void*;
// ...
}
</db:programlisting>
<db:para>This can be documented as</db:para>
<db:programlisting language="cpp" role="bad">/*!
    \typealias Foo::ptr
*/
</db:programlisting>
<db:para>QDoc will automatically generate a sentence in the documentation describing the alias:</db:para>
<db:blockquote><db:para>This is a type alias for void*.</db:para>
</db:blockquote>
<db:para>The \typealias command was introduced in QDoc 5.15.</db:para>
<db:para>See also <db:link xlink:href="13-qdoc-commands-topics.xml#typedef-command">\typedef</db:link>.</db:para>
<db:anchor xml:id="typedef-command"/>
</db:section>
<db:section xml:id="typedef">
<db:title>\typedef</db:title>
<db:para>The \typedef command is for documenting a C++ typedef. The argument is the name of the typedef. The documentation for the typedef will be included in the reference documentation for the class, namespace, or header file in which the typedef is declared. To relate the \typedef to a class, namespace, or header file, the \typedef comment must contain a <db:link xlink:href="18-qdoc-commands-relating.xml#relates-command">\relates</db:link> command.</db:para>
<db:programlisting language="cpp">/ *!
    \typedef QObjectList
    \relates QObject

    Synonym for QList&amp;lt;QObject&amp;gt;.
* /
</db:programlisting>
<db:para>QDoc includes this in qobject.html as:</db:para>
<db:blockquote><db:bridgehead renderas="sect3">typedef QObjectList</db:bridgehead><db:para>Synonym for <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qobject.xml">QObject</db:link>&gt;.</db:para>
</db:blockquote>
<db:para>Another, although more rare, example:</db:para>
<db:programlisting language="cpp">/ *!
    \typedef QMsgHandler
    \relates QtGlobal

    This is a typedef for a pointer to a function with the
    following signature:

    \code
        void myMsgHandler(QtMsgType, const char *);
    \ endcode

    \sa QtMsgType, qInstallMessageHandler()
* /
</db:programlisting>
<db:para>QDoc includes this in qtglobal.html as:</db:para>
<db:blockquote><db:bridgehead renderas="sect3">typedef QtMsgHandler</db:bridgehead><db:para>This is a typedef for a pointer to a function with the following signature:</db:para>
<db:programlisting role="raw-html"><![CDATA[        <tt>
        <pre>    void myMsgHandler(QtMsgType, const char *);</pre>
        </tt>
        ]]></db:programlisting>
<db:para>See also <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtMsgType</db:link> and <db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>().</db:para>
</db:blockquote>
<db:para>Other typedefs are located on the reference page for the class that defines them.</db:para>
<db:programlisting language="cpp">/ *!
    \typedef QList::Iterator

    Qt-style synonym for QList::iterator.
* /
</db:programlisting>
<db:para>QDoc includes this one on the reference page for class <db:link xlink:href="qlist.xml">QList</db:link> as:</db:para>
<db:blockquote><db:bridgehead renderas="sect3">typedef QList::Iterator</db:bridgehead><db:para>Qt-style synonym for <db:link xlink:href="qlist-iterator.xml">QList::iterator</db:link>.</db:para>
</db:blockquote>
<db:para>See also <db:link xlink:href="13-qdoc-commands-topics.xml#typealias-command">\typealias</db:link>.</db:para>
<db:anchor xml:id="variable-command"/>
</db:section>
<db:section xml:id="variable">
<db:title>\variable</db:title>
<db:para>The \variable command is for documenting a class member variable or a constant. The argument is the variable or constant name. The \variable command comment includes a <db:link xlink:href="11-qdoc-commands-specialcontent.xml#brief-command">\brief</db:link> command. QDoc generates the documentation based on the text from \brief command.</db:para>
<db:para>The documentation will be located in the in the associated class, header file, or namespace documentation.</db:para>
<db:para>In case of a member variable:</db:para>
<db:programlisting language="cpp">/ *!
    \variable QStyleOption::palette
    \brief The palette that should be used when painting
           the control
* /
</db:programlisting>
<db:para>QDoc includes this in qstyleoption.html as:</db:para>
<db:blockquote><db:bridgehead renderas="sect3">
            &lt;a href=&quot;http://doc.qt.io/qt-5/qpalette.html&quot;&gt;
                QPalette
            &lt;/a&gt;
            QStyleOption::palette
        </db:bridgehead><db:para>This variable holds the palette that should be used when painting the control.</db:para>
</db:blockquote>
<db:para>You can also document constants with the \variable command. For example, suppose you have the Type and UserType constants in the <db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link> class:</db:para>
<db:programlisting language="cpp">enum { Type = 0, UserType = 1000 };
</db:programlisting>
<db:para>For these, the \variable command can be used this way:</db:para>
<db:programlisting language="cpp">/ *!
    \variable QTreeWidgetItem::Type

    The default type for tree widget items.

    \sa UserType, type()
* /
</db:programlisting>
<db:programlisting language="cpp">/ *!
    \variable QTreeWidgetItem::UserType

    The minimum value for custom types. Values below
    UserType are reserved by Qt.

    \sa Type, type()
* /
</db:programlisting>
<db:para>QDoc includes these in qtreewidget.html as:</db:para>
<db:blockquote><db:bridgehead renderas="sect3">
        const int QTreeWidgetItem::Type
        </db:bridgehead><db:para>The default type for tree widget items.</db:para>
<db:para>See also <db:link xlink:href="qtreewidgetitem.xml#ItemType-enum">UserType</db:link> and <db:link xlink:href="qtreewidgetitem.xml#type">type</db:link>().</db:para>
<db:bridgehead renderas="sect3">
        const int QTreeWidgetItem::UserType
        </db:bridgehead><db:para>The minimum value for custom types. Values below UserType are reserved by Qt.</db:para>
<db:para>See also <db:link xlink:href="qtreewidgetitem.xml#ItemType-enum">Type</db:link> and <db:link xlink:href="qtreewidgetitem.xml#type">type</db:link>().</db:para>
</db:blockquote>
</db:section>
</db:article>
