<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Wayland Compositor Examples - Multi Output</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt Wayland Compositor | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Multi Output is an example that demonstrates a compositor with multiple outputs.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>The Multi Output example demonstrates how to display the same clients on different <db:link xlink:href="qml-qtwayland-compositor-waylandoutput.xml">WaylandOutputs</db:link> with different types of composition. One output shows the clients in a uniform grid, scaled to the same size. The other output is a normal desktop-style interactive compositor window.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/multi-output.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>For an introduction to the basic principles of creating a <db:link xlink:href="qtwaylandcompositor-index.xml">Qt Wayland Compositor</db:link> with Qt, see the <db:link xlink:href="qtwaylandcompositor-minimal-qml-example.xml">Minimal QML example</db:link>.</db:para>
</db:section>
<db:section xml:id="multiple-outputs">
<db:title>Multiple Outputs</db:title>
<db:para>The example creates two different windows, one for each output. For the grid view, we connect to the <db:link xlink:href="qml-qtwayland-compositor-waylandcompositor.xml#surfaceRequested-signal">surfaceRequested</db:link> signal. This signal is emitted for every surface that the client creates. This allows the application to override the default response to the request and create a custom <db:link xlink:href="qml-qtwayland-compositor-waylandsurface.xml">WaylandSurface</db:link>.</db:para>
<db:programlisting language="qml">onSurfaceRequested: {
    var surface = surfaceComponent.createObject(comp, { } );
    surface.initialize(comp, client, id, version);
}
</db:programlisting>
<db:para>Upon receiving the signal, the example creates a <db:link xlink:href="qml-qtwayland-compositor-waylandquickitem.xml">WaylandQuickItem</db:link> as a view of the surface. This can be added to the Qt Quick scene like any other item. In the example, we add it to a <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.</db:para>
<db:para>For the desktop-style window, we use the features of the <db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgshell.xml">XdgShell</db:link> extension. When the surface has been created, the <db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgshell.xml">XdgShell</db:link> emits a <db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgshell.xml#toplevelCreated-signal">toplevelCreated</db:link> signal.</db:para>
<db:programlisting language="qml">XdgShell {
    onToplevelCreated: {
        var item = chromeComponent.createObject(defaultOutput.surfaceArea, { &quot;shellSurface&quot;: xdgSurface } );
        item.surface.activated.connect(item.raise);
    }
}
</db:programlisting>
<db:para>We create a <db:link xlink:href="qml-qtwayland-compositor-shellsurfaceitem.xml">ShellSurfaceItem</db:link> to add the <db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgtoplevel.xml">XdgToplevel</db:link> to the second output. This enables desktop-style interaction with the surface.</db:para>
<db:para>When these steps are done, the client's contents are visible in both windows. The buffers containing the client's contents are the same for both the outputs, but are visualized in two different ways, and provide different ways for the user to interact with them.</db:para>
<db:note>
<db:para>In order to support multiple Wayland outputs in the same compositor, the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_ShareOpenGLContexts</db:link> attribute must be set before the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> object is constructed.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwayland.git/tree/examples/wayland/multi-output?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwaylandcompositor-multi-screen-example.xml">Qt Wayland Compositor Examples - Multi Screen</db:link></db:member>
<db:member><db:link xlink:href="qtwaylandcompositor-overview-compositor-example.xml">Qt Wayland Compositor Examples - Overview Compositor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
