<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_deploy_translations</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Deploy Qt translations needed by an executable.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Deploy Qt translations needed by an executable.</db:para>
<db:para>The command is defined in the Core component of the Qt6 package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
</db:programlisting>
<db:para>Unlike most other CMake commands provided by Qt, qt_deploy_translations() can only be called from a deployment script. It cannot be called directly by the project during the configure stage.</db:para>
<db:para>This command was introduced in Qt 6.5.</db:para>
<db:note>
<db:para>This command is in technology preview and may change in future releases.</db:para>
</db:note>
<db:note>
<db:para>This command does not usually need to be called directly. It is used internally by other higher level commands, but projects wishing to implement more customized deployment logic may find it useful.</db:para>
</db:note>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_deploy_translations(
    [CATALOGS catalogs]
    [LOCALES locales]
    [LCONVERT lconvert_executable]
    [VERBOSE]
)
</db:programlisting>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>When installing an application, it may be desirable to also install the translations that belong to the used Qt modules. The qt_deploy_translations command collects the necessary .qm file from the Qt installation and compiles them into one qt_${language}.qm file per language. The .qm files are installed into QT_DEPLOY_TRANSLATIONS_DIR.</db:para>
</db:section>
<db:section xml:id="arguments">
<db:title>Arguments</db:title>
<db:para>The LOCALES argument specifies for which locales translations should be deployed. This is a list of language/region combinations as described in <db:link xlink:href="linguist-translating-strings.xml#changing-the-target-locale">Qt Linguist's manual for translators</db:link>. Examples for valid locales are: de, pl, or pt_BR.</db:para>
<db:para>If LOCALES is omitted, then all available locales are deployed.</db:para>
<db:para>The CATALOGS argument specifies a list of <db:link xlink:href="localization.xml#available-catalogs">translation catalogs</db:link> to be deployed. If this argument is omitted, then all catalogs are deployed that belong to any Qt module that is used in the project via find_package.</db:para>
<db:para>The LCONVERT argument specifies the lconvert executable that is used to combine the catalogs. By default, the Qt installation's lconvert is used.</db:para>
<db:para>For debugging purposes, the VERBOSE argument can be set to turn on diagnostic messages.</db:para>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:para>The following example deploys Danish and German translations of the Qt libraries.</db:para>
<db:programlisting language="cpp" role="bad">qt_deploy_translations(
    LOCALES da de
)
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="cmake-variable-qt-deploy-translations-dir.xml">QT_DEPLOY_TRANSLATIONS_DIR</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
