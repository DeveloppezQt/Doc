<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Sensors - ShakeIt QML Example</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The sensor gesture example demonstrates the steps for creating a QML application that uses sensor gestures and the included shake sensor.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/shakeit.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="shakeit-in-qml">
<db:title>ShakeIt in QML</db:title>
<db:para>Writing a QML application that uses the Shake QML sensorgestures type requires the following steps:</db:para>
<db:para>Import the Sensors Declarative module.</db:para>
<db:programlisting language="qml">import QtSensors 5.0
</db:programlisting>
<db:para>Add a <db:link xlink:href="qml-qtsensors-sensorgesture.xml">SensorGesture</db:link> QML type.</db:para>
<db:programlisting language="qml">    SensorGesture {
</db:programlisting>
<db:para>In the <db:link xlink:href="qml-qtsensors-sensorgesture.xml">SensorGesture</db:link> type, specify which gesture to be used. Note that this can be a comma separated list. Here we are only interested in one gesture recognizer.</db:para>
<db:programlisting language="qml">        gestures : [&quot;QtSensors.shake&quot;, &quot;QtSensors.whip&quot;, &quot;QtSensors.twist&quot;, &quot;QtSensors.cover&quot;,
            &quot;QtSensors.hover&quot;, &quot;QtSensors.turnover&quot;, &quot;QtSensors.pickup&quot;, &quot;QtSensors.slam&quot; , &quot;QtSensors.doubletap&quot;]
</db:programlisting>
<db:para>Use the 'enabled' property to start the sensor gesture.</db:para>
<db:programlisting language="qml">        enabled: true
</db:programlisting>
<db:para>Use the onDetected signal to do stuff.</db:para>
<db:programlisting language="qml">        onDetected:{
            console.debug(gesture)
            label.text = gesture

            if (gesture == &quot;shake&quot;) {
                window.state == &quot;rotated&quot; ? window.state = &quot;default&quot; : window.state = &quot;rotated&quot;
                timer.start()
            }
            if (gesture == &quot;whip&quot;) {
                window.state == &quot;whipped&quot; ? window.state = &quot;default&quot; : window.state = &quot;whipped&quot;
                timer.start()
            }
            if (gesture == &quot;twistRight&quot;) {
                window.state == &quot;twistedR&quot; ? window.state = &quot;default&quot; : window.state = &quot;twistedR&quot;
                timer.start()
            }
            if (gesture == &quot;twistLeft&quot;) {
                window.state == &quot;twistedL&quot; ? window.state = &quot;default&quot; : window.state = &quot;twistedL&quot;
                timer.start()
            }
            if (gesture == &quot;cover&quot;) {
                window.state == &quot;covered&quot; ? window.state = &quot;default&quot; : window.state = &quot;covered&quot;
                timer.start()
            }
            if (gesture == &quot;hover&quot;) {
                window.state == &quot;hovered&quot; ? window.state = &quot;default&quot; : window.state = &quot;hovered&quot;
                timer.start()
            }
            if (gesture == &quot;turnover&quot;) {
                window.state = &quot;default&quot;
                loopy2a_mono.play();
                timer.start()
            }
            if (gesture == &quot;pickup&quot;) {
                window.state = &quot;default&quot;
                phone.play()
                timer.start()
            }
            if (gesture == &quot;slam&quot;) {
                window.state == &quot;slammed&quot; ? window.state = &quot;default&quot; : window.state = &quot;slammed&quot;
                timer.start()
            }
            if (gesture == &quot;doubletap&quot;) {
                window.state == &quot;doubletapped&quot; ? window.state = &quot;default&quot; : window.state = &quot;doubletapped&quot;
                timer.start()
            }
        }
</db:programlisting>
<db:para>There are additional gestures to shake which are supported: whip, twistRight, hover, cover, turnover and pickup.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="shakeit/main.cpp">shakeit/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="shakeit/shakeit.pro">shakeit/shakeit.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="shakeit/shakeit.qml">shakeit/shakeit.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="shakeit/shakeit.qrc">shakeit/shakeit.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="shakeit/content/triangle.png">shakeit/content/triangle.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="shakeit/content/triangle2.png">shakeit/content/triangle2.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="shakeit/content/triangle3.png">shakeit/content/triangle3.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
