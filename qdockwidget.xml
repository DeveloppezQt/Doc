<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QDockWidget Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> class provides a widget that can be docked inside a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> or floated as a top-level window on the desktop.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDockWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDockWidget is part of <db:simplelist><db:member>mainwindow-classes</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> provides the concept of dock widgets, also know as tool palettes or utility windows. Dock windows are secondary windows placed in the <db:emphasis>dock widget area</db:emphasis> around the <db:link xlink:href="qmainwindow.xml#centralWidget">central widget</db:link> in a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/mainwindow-docks.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Dock windows can be moved inside their current area, moved into new areas and floated (e.g., undocked) by the end-user. The <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> API allows the programmer to restrict the dock widgets ability to move, float and close, as well as the areas in which they can be placed.</db:para>
<db:section xml:id="appearance">
<db:title>Appearance</db:title>
<db:para>A <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> consists of a title bar and the content area. The title bar displays the dock widgets <db:link xlink:href="">window title</db:link>, a <db:emphasis>float</db:emphasis> button and a <db:emphasis>close</db:emphasis> button. Depending on the state of the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>, the <db:emphasis>float</db:emphasis> and <db:emphasis>close</db:emphasis> buttons may be either disabled or not shown at all.</db:para>
<db:para>The visual appearance of the title bar and buttons is dependent on the <db:link xlink:href="qstyle.xml">style</db:link> in use.</db:para>
<db:para>A <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> acts as a wrapper for its child widget, set with <db:link xlink:href="qdockwidget.xml#setWidget">setWidget</db:link>(). Custom size hints, minimum and maximum sizes and size policies should be implemented in the child widget. <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> will respect them, adjusting its own constraints to include the frame and title. Size constraints should not be set on the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> itself, because they change depending on whether it is docked; a docked <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> has no frame and a smaller title bar.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-dockwidgets-example.xml">Dock Widgets Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DockWidgetFeature-enum">
<db:title>enum QDockWidget::DockWidgetFeature</db:title>
<db:bridgehead renderas="sect2">flags QDockWidget::DockWidgetFeatures</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link></db:emphasis>::DockWidgetClosable</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>The dock widget can be closed. On some systems the dock widget always has a close button when it's floating (for example on MacOS 10.5).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link></db:emphasis>::DockWidgetMovable</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>The dock widget can be moved between docks by the user.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link></db:emphasis>::DockWidgetFloatable</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>The dock widget can be detached from the main window, and floated as an independent window.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link></db:emphasis>::DockWidgetVerticalTitleBar</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>The dock widget displays a vertical title bar on its left side. This can be used to increase the amount of vertical space in a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link></db:emphasis>::AllDockWidgetFeatures</db:code></db:para>
</db:td>
<db:td><db:code>DockWidgetClosable|DockWidgetMovable|DockWidgetFloatable</db:code></db:td>
<db:td>
<db:para>(Deprecated) The dock widget can be closed, moved, and floated. Since new features might be added in future releases, the look and behavior of dock widgets might change if you use this flag. Please specify individual flags instead.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link></db:emphasis>::NoDockWidgetFeatures</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
<db:td>
<db:para>The dock widget cannot be closed, moved, or floated.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>DockWidgetFeatures</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;DockWidgetFeature&gt;. </db:code>It stores an OR combination of <db:code>DockWidgetFeature</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDockWidget">
<db:title>[explicit] QDockWidget::QDockWidget(QWidget *<db:emphasis>parent</db:emphasis> = 0, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> with parent <db:code role="parameter">parent</db:code> and window flags <db:code role="parameter">flags</db:code>. The dock widget will be placed in the left dock widget area.</db:para>
</db:section>
<db:section xml:id="QDockWidget-1">
<db:title>[explicit] QDockWidget::QDockWidget(const QString &amp;<db:emphasis>title</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = 0, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> with parent <db:code role="parameter">parent</db:code> and window flags <db:code role="parameter">flags</db:code>. The dock widget will be placed in the left dock widget area.</db:para>
<db:para>The window title is set to <db:code role="parameter">title</db:code>. This title is used when the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> is docked and undocked. It is also used in the context menu provided by <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setWindowTitle()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QDockWidget">
<db:title>[virtual noexcept] QDockWidget::~QDockWidget()</db:title>
<db:para>Destroys the dock widget.</db:para>
</db:section>
<db:section xml:id="allowedAreasChanged">
<db:title>void QDockWidget::allowedAreasChanged(Qt::DockWidgetAreas <db:emphasis>allowedAreas</db:emphasis>)</db:title>
<db:para>This signal is emitted when the allowedAreas property changes. The <db:code role="parameter">allowedAreas</db:code> parameter gives the new value of the property.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QDockWidget::changeEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="closeEvent">
<db:title>[override virtual protected] void QDockWidget::closeEvent(QCloseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#closeEvent" role="function">QWidget::closeEvent(QCloseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dockLocationChanged">
<db:title>[since 4.3] void QDockWidget::dockLocationChanged(Qt::DockWidgetArea <db:emphasis>area</db:emphasis>)</db:title>
<db:para>This signal is emitted when the dock widget is moved to another dock <db:code role="parameter">area</db:code>, or is moved to a different location in its current dock area. This happens when the dock widget is moved programmatically or is dragged to a new location by the user.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QDockWidget::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="featuresChanged">
<db:title>void QDockWidget::featuresChanged(QDockWidget::DockWidgetFeatures <db:emphasis>features</db:emphasis>)</db:title>
<db:para>This signal is emitted when the features property changes. The <db:code role="parameter">features</db:code> parameter gives the new value of the property.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[protected] void QDockWidget::initStyleOption(QStyleOptionDockWidget *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptiondockwidget.xml">QStyleOptionDockWidget</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAreaAllowed">
<db:title>bool QDockWidget::isAreaAllowed(Qt::DockWidgetArea <db:emphasis>area</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this dock widget can be placed in the given <db:code role="parameter">area</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QDockWidget::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="setTitleBarWidget">
<db:title>[since 4.3] void QDockWidget::setTitleBarWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets an arbitrary <db:code role="parameter">widget</db:code> as the dock widget's title bar. If <db:code role="parameter">widget</db:code> is 0, any custom title bar widget previously set on the dock widget is removed, but not deleted, and the default title bar will be used instead.</db:para>
<db:para>If a title bar widget is set, <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> will not use native window decorations when it is floated.</db:para>
<db:para>Here are some tips for implementing custom title bars:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Mouse events that are not explicitly handled by the title bar widget must be ignored by calling <db:link xlink:href="qevent.xml#ignore">QMouseEvent::ignore</db:link>(). These events then propagate to the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> parent, which handles them in the usual manner, moving when the title bar is dragged, docking and undocking when it is double-clicked, etc.</db:para>
</db:listitem>
<db:listitem>
<db:para>When <db:link xlink:href="qdockwidget.xml#DockWidgetFeature-enum">DockWidgetVerticalTitleBar</db:link> is set on <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>, the title bar widget is repositioned accordingly. In <db:link xlink:href="qwidget.xml#resizeEvent">resizeEvent</db:link>(), the title bar should check what orientation it should assume:</db:para>
<db:programlisting language="cpp">QDockWidget *dockWidget = qobject_cast&lt;QDockWidget*&gt;(parentWidget());
if (dockWidget-&gt;features() &amp; QDockWidget::DockWidgetVerticalTitleBar) {
    // I need to be vertical
} else {
    // I need to be horizontal
}
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>The title bar widget must have a valid QWidget::sizeHint() and QWidget::minimumSizeHint(). These functions should take into account the current orientation of the title bar.</db:para>
</db:listitem>
<db:listitem>
<db:para>It is not possible to remove a title bar from a dock widget. However, a similar effect can be achieved by setting a default constructed <db:link xlink:href="qwidget.xml">QWidget</db:link> as the title bar widget.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Using qobject_cast() as shown above, the title bar widget has full access to its parent <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>. Hence it can perform such operations as docking and hiding in response to user actions.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdockwidget.xml#titleBarWidget">titleBarWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdockwidget.xml#DockWidgetFeature-enum">DockWidgetVerticalTitleBar</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWidget">
<db:title>void QDockWidget::setWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets the widget for the dock widget to <db:code role="parameter">widget</db:code>.</db:para>
<db:para>If the dock widget is visible when <db:code role="parameter">widget</db:code> is added, you must <db:link xlink:href="qwidget.xml#show">show</db:link>() it explicitly.</db:para>
<db:para>Note that you must add the layout of the <db:code role="parameter">widget</db:code> before you call this function; if not, the <db:code role="parameter">widget</db:code> will not be visible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdockwidget.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="titleBarWidget">
<db:title>[since 4.3] QWidget *QDockWidget::titleBarWidget() const</db:title>
<db:para>Returns the custom title bar widget set on the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>, or 0 if no custom title bar has been set.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdockwidget.xml#setTitleBarWidget">setTitleBarWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toggleViewAction">
<db:title>QAction *QDockWidget::toggleViewAction() const</db:title>
<db:para>Returns a checkable action that can be used to show or close this dock widget.</db:para>
<db:para>The action's text is set to the dock widget's window title.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QAction::text</db:link></db:member>
<db:member><db:link xlink:href="">QWidget::windowTitle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="topLevelChanged">
<db:title>void QDockWidget::topLevelChanged(bool <db:emphasis>topLevel</db:emphasis>)</db:title>
<db:para>This signal is emitted when the floating property changes. The <db:code role="parameter">topLevel</db:code> parameter is true if the dock widget is now floating; otherwise it is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#isWindow">isWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visibilityChanged">
<db:title>[since 4.3] void QDockWidget::visibilityChanged(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:para>This signal is emitted when the dock widget becomes <db:code role="parameter">visible</db:code> (or invisible). This happens when the widget is hidden or shown, as well as when it is docked in a tabbed dock area and its tab becomes selected or unselected.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QDockWidget::widget() const</db:title>
<db:para>Returns the widget for the dock widget. This function returns zero if the widget has not been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdockwidget.xml#setWidget">setWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
