<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDockWidget Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> class provides a widget that can be docked inside a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> or floated as a top-level window on the desktop.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDockWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDockWidget is part of <db:simplelist><db:member>mainwindow-classes</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> provides the concept of dock widgets, also know as tool palettes or utility windows. Dock windows are secondary windows placed in the <db:emphasis>dock widget area</db:emphasis> around the <db:link xlink:href="qmainwindow.xml#centralWidget">central widget</db:link> in a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/mainwindow-docks.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Dock windows can be moved inside their current area, moved into new areas and floated (e.g., undocked) by the end-user. The <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> API allows the programmer to restrict the dock widgets ability to move, float and close, as well as the areas in which they can be placed.</db:para>
<db:section xml:id="appearance">
<db:title>Appearance</db:title>
<db:para>A <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> consists of a title bar and the content area. The title bar displays the dock widgets <db:link xlink:href="qwidget.xml#windowTitle-prop">window title</db:link>, a <db:emphasis>float</db:emphasis> button and a <db:emphasis>close</db:emphasis> button. Depending on the state of the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>, the <db:emphasis>float</db:emphasis> and <db:emphasis>close</db:emphasis> buttons may be either disabled or not shown at all.</db:para>
<db:para>The visual appearance of the title bar and buttons is dependent on the <db:link xlink:href="qstyle.xml">style</db:link> in use.</db:para>
<db:para>A <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> acts as a wrapper for its child widget, set with <db:link xlink:href="qdockwidget.xml#setWidget">setWidget</db:link>(). Custom size hints, minimum and maximum sizes and size policies should be implemented in the child widget. <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> will respect them, adjusting its own constraints to include the frame and title. Size constraints should not be set on the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> itself, because they change depending on whether it is docked; a docked <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> has no frame and a smaller title bar.</db:para>
<db:note>
<db:para>On macOS, if the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> has a native window handle (for example, if <db:link xlink:href="qwidget.xml#winId">winId</db:link>() is called on it or the child widget), then due to a limitation it will not be possible to drag the dock widget when undocking. Starting the drag will undock the dock widget, but a second drag will be needed to move the dock widget itself.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DockWidgetFeature-enum">
<db:title>enum QDockWidget::DockWidgetFeature</db:title>
<db:bridgehead renderas="sect2">flags QDockWidget::DockWidgetFeatures</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link></db:emphasis>::DockWidgetClosable</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>The dock widget can be closed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link></db:emphasis>::DockWidgetMovable</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>The dock widget can be moved between docks by the user.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link></db:emphasis>::DockWidgetFloatable</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>The dock widget can be detached from the main window, and floated as an independent window.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link></db:emphasis>::DockWidgetVerticalTitleBar</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>The dock widget displays a vertical title bar on its left side. This can be used to increase the amount of vertical space in a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml">QDockWidget</db:link></db:emphasis>::NoDockWidgetFeatures</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
<db:td>
<db:para>The dock widget cannot be closed, moved, or floated.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>DockWidgetFeatures</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;DockWidgetFeature&gt;. </db:code>It stores an OR combination of <db:code>DockWidgetFeature</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="allowedAreas-prop">
<db:title>allowedAreas : Qt::DockWidgetAreas</db:title>
<db:para>areas where the dock widget may be placed</db:para>
<db:para>The default is <db:link xlink:href="qt.xml#DockWidgetArea-enum">Qt::AllDockWidgetAreas</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#DockWidgetArea-enum">Qt::DockWidgetAreas</db:link></db:type> <db:emphasis role="bold">allowedAreas</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAllowedAreas</db:emphasis>(<db:type><db:link xlink:href="qt.xml#DockWidgetArea-enum">Qt::DockWidgetAreas</db:link></db:type> <db:emphasis>areas</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml#allowedAreasChanged">allowedAreasChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qt.xml#DockWidgetArea-enum">Qt::DockWidgetAreas</db:link></db:type> <db:emphasis>allowedAreas</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#DockWidgetArea-enum">Qt::DockWidgetArea</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dockLocation-prop">
<db:title>[since 6.9] dockLocation : Qt::DockWidgetArea</db:title>
<db:para>This property holds the current dock location, or Qt::NoDockLocation if this dock widget is floating or has no mainwindow parent.</db:para>
<db:para>This property was introduced in Qt 6.9.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#DockWidgetArea-enum">Qt::DockWidgetArea</db:link></db:type> <db:emphasis role="bold">dockLocation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml#setDockLocation">setDockLocation</db:link></db:emphasis>(<db:type><db:link xlink:href="qt.xml#DockWidgetArea-enum">Qt::DockWidgetArea</db:link></db:type> <db:emphasis>area</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml#dockLocationChanged">dockLocationChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qt.xml#DockWidgetArea-enum">Qt::DockWidgetArea</db:link></db:type> <db:emphasis>area</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="features-prop">
<db:title>features : DockWidgetFeatures</db:title>
<db:para>This property holds whether the dock widget is movable, closable, and floatable</db:para>
<db:para>By default, this property is set to a combination of <db:link xlink:href="qdockwidget.xml#DockWidgetFeature-enum">DockWidgetClosable</db:link>, <db:link xlink:href="qdockwidget.xml#DockWidgetFeature-enum">DockWidgetMovable</db:link> and <db:link xlink:href="qdockwidget.xml#DockWidgetFeature-enum">DockWidgetFloatable</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdockwidget.xml#DockWidgetFeature-enum">QDockWidget::DockWidgetFeatures</db:link></db:type> <db:emphasis role="bold">features</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFeatures</db:emphasis>(<db:type><db:link xlink:href="qdockwidget.xml#DockWidgetFeature-enum">QDockWidget::DockWidgetFeatures</db:link></db:type> <db:emphasis>features</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml#featuresChanged">featuresChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qdockwidget.xml#DockWidgetFeature-enum">QDockWidget::DockWidgetFeatures</db:link></db:type> <db:emphasis>features</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdockwidget.xml#DockWidgetFeature-enum">DockWidgetFeature</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="floating-prop">
<db:title>floating : bool</db:title>
<db:para>This property holds whether the dock widget is floating</db:para>
<db:para>A floating dock widget is presented to the user as a single, independent window &quot;on top&quot; of its parent <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>, instead of being docked either in the <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>, or in a group of tabbed dock widgets.</db:para>
<db:para>Floating dock widgets can be individually positioned and resized, both programmatically or by mouse interaction.</db:para>
<db:para>By default, this property is <db:code>true</db:code>.</db:para>
<db:para>When this property changes, the <db:code>topLevelChanged()</db:code> signal is emitted.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isFloating</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFloating</db:emphasis>(<db:type>bool</db:type> <db:emphasis>floating</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qdockwidget.xml#topLevelChanged">topLevelChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>topLevel</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#isWindow">isWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qdockwidget.xml#topLevelChanged">topLevelChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowTitle-prop">
<db:title>windowTitle : QString</db:title>
<db:para>This property holds the dock widget title (caption)</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qwidget.xml#windowTitle-prop">windowTitle</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qwidget.xml#windowTitle-prop">setWindowTitle</db:link></db:emphasis>(<db:emphasis>const QString &amp;</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qwidget.xml#windowTitleChanged">windowTitleChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>title</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDockWidget">
<db:title>[explicit] QDockWidget::QDockWidget(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>Constructs a <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> with parent <db:code role="parameter">parent</db:code> and window flags <db:code role="parameter">flags</db:code>. The dock widget will be placed in the left dock widget area.</db:para>
</db:section>
<db:section xml:id="QDockWidget-1">
<db:title>[explicit] QDockWidget::QDockWidget(const QString &amp;<db:emphasis>title</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = Qt::WindowFlags())</db:title>
<db:para>Constructs a <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> with parent <db:code role="parameter">parent</db:code> and window flags <db:code role="parameter">flags</db:code>. The dock widget will be placed in the left dock widget area.</db:para>
<db:para>The window title is set to <db:code role="parameter">title</db:code>. This title is used when the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> is docked and undocked. It is also used in the context menu provided by <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#windowTitle-prop">setWindowTitle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QDockWidget">
<db:title>[virtual noexcept] QDockWidget::~QDockWidget()</db:title>
<db:para>Destroys the dock widget.</db:para>
</db:section>
<db:section xml:id="allowedAreasChanged">
<db:title>void QDockWidget::allowedAreasChanged(Qt::DockWidgetAreas <db:emphasis>allowedAreas</db:emphasis>)</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qdockwidget.xml#allowedAreas-prop">allowedAreas</db:link> property changes. The <db:code role="parameter">allowedAreas</db:code> parameter gives the new value of the property.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qdockwidget.xml#allowedAreas-prop">allowedAreas</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QDockWidget::changeEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="closeEvent">
<db:title>[override virtual protected] void QDockWidget::closeEvent(QCloseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#closeEvent" role="function">QWidget::closeEvent(QCloseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dockLocationChanged">
<db:title>void QDockWidget::dockLocationChanged(Qt::DockWidgetArea <db:emphasis>area</db:emphasis>)</db:title>
<db:para>This signal is emitted when the dock widget is moved to another dock <db:code role="parameter">area</db:code>, or is moved to a different location in its current dock area. This happens when the dock widget is moved programmatically or is dragged to a new location by the user.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qdockwidget.xml#dockLocation-prop">dockLocation</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdockwidget.xml#dockLocation-prop">dockLocation</db:link>()</db:member>
<db:member><db:link xlink:href="qdockwidget.xml#setDockLocation">setDockLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QDockWidget::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="featuresChanged">
<db:title>void QDockWidget::featuresChanged(QDockWidget::DockWidgetFeatures <db:emphasis>features</db:emphasis>)</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qdockwidget.xml#features-prop">features</db:link> property changes. The <db:code role="parameter">features</db:code> parameter gives the new value of the property.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qdockwidget.xml#features-prop">features</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[virtual protected] void QDockWidget::initStyleOption(QStyleOptionDockWidget *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptiondockwidget.xml">QStyleOptionDockWidget</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAreaAllowed">
<db:title>bool QDockWidget::isAreaAllowed(Qt::DockWidgetArea <db:emphasis>area</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this dock widget can be placed in the given <db:code role="parameter">area</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QDockWidget::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="setDockLocation">
<db:title>[since 6.9] void QDockWidget::setDockLocation(Qt::DockWidgetArea <db:emphasis>area</db:emphasis>)</db:title>
<db:para>Assigns this dock widget to <db:code role="parameter">area</db:code>. If docked at another dock location, it will move to <db:code role="parameter">area</db:code>. If floating or part of floating tabs, the next call of <db:link xlink:href="qdockwidget.xml#floating-prop">setFloating</db:link>(false) will dock it at <db:code role="parameter">area</db:code>.</db:para>
<db:note>
<db:para>setDockLocation(Qt::NoDockLocation) is equivalent to <db:link xlink:href="qdockwidget.xml#floating-prop">setFloating</db:link>(true).</db:para>
</db:note>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qdockwidget.xml#dockLocation-prop">dockLocation</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 6.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdockwidget.xml#dockLocation-prop">dockLocation</db:link>()</db:member>
<db:member><db:link xlink:href="qdockwidget.xml#dockLocationChanged">dockLocationChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTitleBarWidget">
<db:title>void QDockWidget::setTitleBarWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets an arbitrary <db:code role="parameter">widget</db:code> as the dock widget's title bar. If <db:code role="parameter">widget</db:code> is <db:code>nullptr</db:code>, any custom title bar widget previously set on the dock widget is removed, but not deleted, and the default title bar will be used instead.</db:para>
<db:para>If a title bar widget is set, <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> will not use native window decorations when it is floated.</db:para>
<db:para>Here are some tips for implementing custom title bars:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Mouse events that are not explicitly handled by the title bar widget must be ignored by calling <db:link xlink:href="qevent.xml#ignore">QMouseEvent::ignore</db:link>(). These events then propagate to the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> parent, which handles them in the usual manner, moving when the title bar is dragged, docking and undocking when it is double-clicked, etc.</db:para>
</db:listitem>
<db:listitem>
<db:para>When <db:link xlink:href="qdockwidget.xml#DockWidgetFeature-enum">DockWidgetVerticalTitleBar</db:link> is set on <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>, the title bar widget is repositioned accordingly. In <db:link xlink:href="qwidget.xml#resizeEvent">resizeEvent</db:link>(), the title bar should check what orientation it should assume:</db:para>
<db:programlisting language="cpp">QDockWidget *dockWidget = qobject_cast&lt;QDockWidget*&gt;(parentWidget());
if (dockWidget-&gt;features() &amp; QDockWidget::DockWidgetVerticalTitleBar) {
    // I need to be vertical
} else {
    // I need to be horizontal
}
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>The title bar widget must have a valid <db:link xlink:href="qwidget.xml#sizeHint-prop">QWidget::sizeHint</db:link>() and <db:link xlink:href="qwidget.xml#minimumSizeHint-prop">QWidget::minimumSizeHint</db:link>(). These functions should take into account the current orientation of the title bar.</db:para>
</db:listitem>
<db:listitem>
<db:para>It is not possible to remove a title bar from a dock widget. However, a similar effect can be achieved by setting a default constructed <db:link xlink:href="qwidget.xml">QWidget</db:link> as the title bar widget.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Using <db:link xlink:href="qobject.xml#qobject_cast">qobject_cast</db:link>() as shown above, the title bar widget has full access to its parent <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>. Hence it can perform such operations as docking and hiding in response to user actions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdockwidget.xml#titleBarWidget">titleBarWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdockwidget.xml#DockWidgetFeature-enum">DockWidgetVerticalTitleBar</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWidget">
<db:title>void QDockWidget::setWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets the widget for the dock widget to <db:code role="parameter">widget</db:code>.</db:para>
<db:para>If the dock widget is visible when <db:code role="parameter">widget</db:code> is added, you must <db:link xlink:href="qwidget.xml#show">show</db:link>() it explicitly.</db:para>
<db:para>Note that you must add the layout of the <db:code role="parameter">widget</db:code> before you call this function; if not, the <db:code role="parameter">widget</db:code> will not be visible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdockwidget.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="titleBarWidget">
<db:title>QWidget *QDockWidget::titleBarWidget() const</db:title>
<db:para>Returns the custom title bar widget set on the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>, or <db:code>nullptr</db:code> if no custom title bar has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdockwidget.xml#setTitleBarWidget">setTitleBarWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toggleViewAction">
<db:title>QAction *QDockWidget::toggleViewAction() const</db:title>
<db:para>Returns a checkable action that can be added to menus and toolbars so that the user can show or close this dock widget.</db:para>
<db:para>The action's text is set to the dock widget's window title.</db:para>
<db:para>The <db:link xlink:href="qaction.xml">QAction</db:link> object is owned by the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link>. It will be automatically deleted when the <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> is destroyed.</db:para>
<db:note>
<db:para>The action can not be used to programmatically show or hide the dock widget. Use the <db:link xlink:href="qwidget.xml#visible-prop">visible</db:link> property for that.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#text-prop">QAction::text</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml#windowTitle-prop">QWidget::windowTitle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="topLevelChanged">
<db:title>void QDockWidget::topLevelChanged(bool <db:emphasis>topLevel</db:emphasis>)</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qdockwidget.xml#floating-prop">floating</db:link> property changes. The <db:code role="parameter">topLevel</db:code> parameter is true if the dock widget is now floating; otherwise it is false.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qdockwidget.xml#floating-prop">floating</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#isWindow">isWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visibilityChanged">
<db:title>void QDockWidget::visibilityChanged(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:para>This signal is emitted when the dock widget becomes <db:code role="parameter">visible</db:code> (or invisible). This happens when the widget is hidden or shown, as well as when it is docked in a tabbed dock area and its tab becomes selected or unselected.</db:para>
<db:note>
<db:para>The signal can differ from <db:link xlink:href="qwidget.xml#visible-prop">QWidget::isVisible</db:link>(). This can be the case, if a dock widget is minimized or tabified and associated to a non-selected or inactive tab.</db:para>
</db:note>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QDockWidget::widget() const</db:title>
<db:para>Returns the widget for the dock widget. This function returns zero if the widget has not been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdockwidget.xml#setWidget">setWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
