<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt OPC UA Viewer Example</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para>Using the model/view approach to display all nodes of an OPC UA server in a tree view.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2018 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt OPC UA module.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;opcuamodel.h&quot;
#include &quot;treeitem.h&quot;
#include &amp;lt;QOpcUaClient&amp;gt;
#include &amp;lt;QOpcUaNode&amp;gt;
#include &amp;lt;QIcon&amp;gt;

OpcUaModel::OpcUaModel(QObject *parent) : QAbstractItemModel(parent)
{
}

void OpcUaModel::setOpcUaClient(QOpcUaClient *client)
{
    beginResetModel();
    mOpcUaClient = client;
    if (mOpcUaClient)
        mRootItem.reset(new TreeItem(client-&amp;gt;node(&quot;ns=0;i=84&quot;), this /* model */, nullptr /* parent */));
    else
        mRootItem.reset(nullptr);
    endResetModel();
}

QOpcUaClient *OpcUaModel::opcUaClient() const
{
    return mOpcUaClient;
}

QVariant OpcUaModel::data(const QModelIndex &amp;amp;index, int role) const
{
    if (!index.isValid())
        return QVariant();

    auto item = static_cast&amp;lt;TreeItem *&amp;gt;(index.internalPointer());

    switch (role) {
    case Qt::DisplayRole:
        return item-&amp;gt;data(index.column());
    case Qt::DecorationRole:
        if (index.column() == 0)
            return item-&amp;gt;icon(index.column());
        break;
    default:
        break;
    }

    return QVariant();
}

QVariant OpcUaModel::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (role != Qt::DisplayRole)
        return QVariant();

    if (orientation == Qt::Vertical)
        return QStringLiteral(&quot;Row %1&quot;).arg(section);

    switch (section) {
    case 0:
        return QStringLiteral(&quot;BrowseName&quot;);
    case 1:
        return QStringLiteral(&quot;Value&quot;);
    case 2:
        return QStringLiteral(&quot;NodeClass&quot;);
    case 3:
        return QStringLiteral(&quot;DataType&quot;);
    case 4:
        return QStringLiteral(&quot;NodeId&quot;);
    case 5:
        return QStringLiteral(&quot;DisplayName&quot;);
    case 6:
        return QStringLiteral(&quot;Description&quot;);
    default:
        break;
    }
    return QStringLiteral(&quot;Column %1&quot;).arg(section);
}

QModelIndex OpcUaModel::index(int row, int column, const QModelIndex &amp;amp;parent) const
{
    if (!hasIndex(row, column, parent))
        return QModelIndex();

    TreeItem *item = parent.isValid()
        ? static_cast&amp;lt;TreeItem*&amp;gt;(parent.internalPointer())-&amp;gt;child(row)
        : mRootItem.get();

    return item ? createIndex(row, column, item) : QModelIndex();
}

QModelIndex OpcUaModel::parent(const QModelIndex &amp;amp;index) const
{
    if (!index.isValid())
        return QModelIndex();

    auto childItem = static_cast&amp;lt;TreeItem*&amp;gt;(index.internalPointer());
    auto parentItem = childItem-&amp;gt;parentItem();

    if (childItem == mRootItem.get() || !parentItem)
        return QModelIndex();

    return createIndex(parentItem-&amp;gt;row(), 0, parentItem);
}

int OpcUaModel::rowCount(const QModelIndex &amp;amp;parent) const
{

    if (!mOpcUaClient)
        return 0;

    if (parent.column() &amp;gt; 0)
        return 0;

    if (!parent.isValid())
        return 1; // only one root item

    auto parentItem = static_cast&amp;lt;TreeItem*&amp;gt;(parent.internalPointer());
    return parentItem ? parentItem-&amp;gt;childCount() : 0;
}

int OpcUaModel::columnCount(const QModelIndex &amp;amp;parent) const
{
    if (parent.isValid())
        return static_cast&amp;lt;TreeItem*&amp;gt;(parent.internalPointer())-&amp;gt;columnCount();
    return mRootItem ? mRootItem-&amp;gt;columnCount() : 0;
}


</db:programlisting>
</db:article>
