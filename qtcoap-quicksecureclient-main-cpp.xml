<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Quick Secure CoAP Client Example</db:title>
<db:productname>QtCoap</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt CoAP Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Securing the CoAP client and using it with a Qt Quick user interface.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2019 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#include &quot;qmlcoapsecureclient.h&quot;

#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QNetworkInterface&amp;gt;
#include &amp;lt;QQmlApplicationEngine&amp;gt;
#include &amp;lt;QQmlContext&amp;gt;

static QStringList availableHosts()
{
    QStringList hosts;

    const auto networkInterfaces = QNetworkInterface::allInterfaces();
    for (const auto &amp;amp;interface : networkInterfaces)
        for (const auto &amp;amp;address : interface.addressEntries())
            hosts.push_back(address.ip().toString());

    return hosts;
}

int main(int argc, char *argv[])
{
    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
    QCoreApplication::setOrganizationName(&quot;Qt CoAP Example&quot;);

    QGuiApplication app(argc, argv);
    QQmlApplicationEngine engine;

    qmlRegisterType&amp;lt;QmlCoapSecureClient&amp;gt;(&quot;CoapSecureClient&quot;, 1, 0, &quot;CoapSecureClient&quot;);

    // Register the QtCoap namespace
    qmlRegisterUncreatableMetaObject(QtCoap::staticMetaObject, &quot;qtcoap.example.namespace&quot;, 1, 0,
                                     &quot;QtCoap&quot;, &quot;Access to enums is read-only&quot;);

    const QUrl url(QStringLiteral(&quot;qrc:/main.qml&quot;));
    QObject::connect(&amp;amp;engine, &amp;amp;QQmlApplicationEngine::objectCreated,
                     &amp;amp;app, [url](QObject *obj, const QUrl &amp;amp;objUrl) {
        // Exit with error, if the object for main.qml could not be loaded.
        if (!obj &amp;amp;&amp;amp; url == objUrl)
            QCoreApplication::exit(-1);
    }, Qt::QueuedConnection);

    engine.rootContext()-&amp;gt;setContextProperty(&quot;hostsModel&quot;, availableHosts());

    engine.load(url);

    return app.exec();
}

</db:programlisting>
</db:article>
