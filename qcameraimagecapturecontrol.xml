<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCameraImageCaptureControl Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcameraimagecapturecontrol.xml">QCameraImageCaptureControl</db:link> class provides a control interface for image capture services.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCameraImageCaptureControl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediacontrol.xml" xlink:role="class">QMediaControl</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCameraImageCaptureControl is part of <db:simplelist><db:member>multimedia_control</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The interface name of <db:link xlink:href="qcameraimagecapturecontrol.xml">QCameraImageCaptureControl</db:link> is <db:code>org.qt-project.qt.cameraimagecapturecontrol/5.0</db:code> as defined in <db:link xlink:href="qcameraimagecapturecontrol.xml#QCameraImageCaptureControl_iid">QCameraImageCaptureControl_iid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaservice.xml#requestControl-1">QMediaService::requestControl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCameraImageCaptureControl">
<db:title>[explicit protected] QCameraImageCaptureControl::QCameraImageCaptureControl(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCameraImageCaptureControl</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCameraImageCaptureControl(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new image capture control object with the given <db:code role="parameter">parent</db:code></db:para>
</db:section>
<db:section xml:id="dtor.QCameraImageCaptureControl">
<db:title>[virtual] QCameraImageCaptureControl::~QCameraImageCaptureControl()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QCameraImageCaptureControl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCameraImageCaptureControl()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys an image capture control.</db:para>
</db:section>
<db:section xml:id="cancelCapture">
<db:title>[pure virtual] void QCameraImageCaptureControl::cancelCapture()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>cancelCapture</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cancelCapture() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Cancel pending capture requests.</db:para>
</db:section>
<db:section xml:id="capture">
<db:title>[pure virtual] int QCameraImageCaptureControl::capture(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>int</db:type>
<db:methodname>capture</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int capture(const QString &amp;fileName) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initiates the capture of an image to <db:code role="parameter">fileName</db:code>. The <db:code role="parameter">fileName</db:code> can be relative or empty, in this case the service should use the system specific place and file naming scheme.</db:para>
<db:para>The Camera service should save all the capture parameters like exposure settings or image processing parameters, so changes to camera parameters after capture() is called do not affect previous capture requests.</db:para>
<db:para>Returns the capture request id number, which is used later with <db:link xlink:href="qcameraimagecapturecontrol.xml#imageExposed">imageExposed</db:link>(), <db:link xlink:href="qcameraimagecapturecontrol.xml#imageCaptured">imageCaptured</db:link>() and <db:link xlink:href="qcameraimagecapturecontrol.xml#imageSaved">imageSaved</db:link>() signals.</db:para>
</db:section>
<db:section xml:id="driveMode">
<db:title>[pure virtual] QCameraImageCapture::DriveMode QCameraImageCaptureControl::driveMode() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QCameraImageCapture::DriveMode</db:type>
<db:methodname>driveMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCameraImageCapture::DriveMode driveMode() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current camera drive mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapturecontrol.xml#setDriveMode">setDriveMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>void QCameraImageCaptureControl::error(int <db:emphasis>id</db:emphasis>, int <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>error</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>errorString</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void error(int id, int error, const QString &amp;errorString)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals the capture request <db:code role="parameter">id</db:code> failed with <db:code role="parameter">error</db:code> code and message <db:code role="parameter">errorString</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapture.xml#Error-enum">QCameraImageCapture::Error</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="imageAvailable">
<db:title>void QCameraImageCaptureControl::imageAvailable(int <db:emphasis>requestId</db:emphasis>, const QVideoFrame &amp;<db:emphasis>buffer</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>imageAvailable</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>requestId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVideoFrame &amp;</db:type>
<db:parameter>buffer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void imageAvailable(int requestId, const QVideoFrame &amp;buffer)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a captured <db:code role="parameter">buffer</db:code> with a <db:code role="parameter">requestId</db:code> is available.</db:para>
</db:section>
<db:section xml:id="imageCaptured">
<db:title>void QCameraImageCaptureControl::imageCaptured(int <db:emphasis>requestId</db:emphasis>, const QImage &amp;<db:emphasis>preview</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>imageCaptured</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>requestId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>preview</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void imageCaptured(int requestId, const QImage &amp;preview)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that an image with it <db:code role="parameter">requestId</db:code> has been captured and a <db:code role="parameter">preview</db:code> is available.</db:para>
</db:section>
<db:section xml:id="imageExposed">
<db:title>void QCameraImageCaptureControl::imageExposed(int <db:emphasis>requestId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>imageExposed</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>requestId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void imageExposed(int requestId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that an image with it <db:code role="parameter">requestId</db:code> has just been exposed. This signal can be used for the shutter sound or other indicaton.</db:para>
</db:section>
<db:section xml:id="imageMetadataAvailable">
<db:title>void QCameraImageCaptureControl::imageMetadataAvailable(int <db:emphasis>id</db:emphasis>, const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>imageMetadataAvailable</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void imageMetadataAvailable(int id, const QString &amp;key, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a metadata for an image with request <db:code role="parameter">id</db:code> is available. Signal also contains the <db:code role="parameter">key</db:code> and <db:code role="parameter">value</db:code> of the metadata.</db:para>
<db:para>This signal should be emitted between <db:link xlink:href="qcameraimagecapturecontrol.xml#imageExposed">imageExposed</db:link> and <db:link xlink:href="qcameraimagecapturecontrol.xml#imageSaved">imageSaved</db:link> signals.</db:para>
</db:section>
<db:section xml:id="imageSaved">
<db:title>void QCameraImageCaptureControl::imageSaved(int <db:emphasis>requestId</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>imageSaved</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>requestId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void imageSaved(int requestId, const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a captured image with a <db:code role="parameter">requestId</db:code> has been saved to <db:code role="parameter">fileName</db:code>.</db:para>
</db:section>
<db:section xml:id="isReadyForCapture">
<db:title>[pure virtual] bool QCameraImageCaptureControl::isReadyForCapture() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isReadyForCapture</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isReadyForCapture() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies if a capture control is ready to perform a capture immediately (all the resources necessary for image capture are allocated, hardware initialized, flash is charged, etc).</db:para>
<db:para>Returns true if the camera is ready for capture; and false if it is not.</db:para>
<db:para>It's permissible to call <db:link xlink:href="qcameraimagecapturecontrol.xml#capture">capture</db:link>() while the camera status is <db:link xlink:href="qcamera.xml#Status-enum">QCamera::ActiveStatus</db:link> regardless of isReadyForCapture property value. If camera is not ready to capture image immediately, the capture request is queued with all the related camera settings to be executed as soon as possible.</db:para>
</db:section>
<db:section xml:id="readyForCaptureChanged">
<db:title>void QCameraImageCaptureControl::readyForCaptureChanged(bool <db:emphasis>ready</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>readyForCaptureChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>ready</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void readyForCaptureChanged(bool ready)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a capture control's <db:code role="parameter">ready</db:code> state has changed.</db:para>
</db:section>
<db:section xml:id="setDriveMode">
<db:title>[pure virtual] void QCameraImageCaptureControl::setDriveMode(QCameraImageCapture::DriveMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setDriveMode</db:methodname>
<db:methodparam>
<db:type>QCameraImageCapture::DriveMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDriveMode(QCameraImageCapture::DriveMode mode) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current camera drive <db:code role="parameter">mode</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameraimagecapturecontrol.xml#driveMode">driveMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QCameraImageCaptureControl_iid">
<db:title>QCameraImageCaptureControl_iid</db:title>
<db:methodsynopsis>
<db:methodname>QCameraImageCaptureControl_iid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QCameraImageCaptureControl_iid</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:code>org.qt-project.qt.cameraimagecapturecontrol/5.0</db:code></db:para>
<db:para>Defines the interface name of the <db:link xlink:href="qcameraimagecapturecontrol.xml">QCameraImageCaptureControl</db:link> class.</db:para>
</db:section>
</db:section>
</db:article>
