<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPlaceSearchRequest Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qplacesearchrequest.xml">QPlaceSearchRequest</db:link> class represents the set of parameters for a search request.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPlaceSearchRequest</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPlaceSearchRequest is part of <db:simplelist><db:member>QtLocation-places</db:member><db:member>QtLocation-places-requests</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A typical search request may look like the following:</db:para>
<db:programlisting language="cpp">QPlaceSearchRequest searchRequest;
searchRequest.setSearchTerm(&quot;Fast food&quot;); //search term for what we are interested in

//set a search center
searchRequest.setSearchArea(QGeoCircle(QGeoCoordinate(2.3, 48.87)));

//set a distance hint as a relevancy hint.
//closer places have greater weighting in the ranking of results.
searchRequest.setRelevanceHint(QPlaceSearchRequest::DistanceHint);

//use limit to adjust pagination.
//this limits the number of place results to 5 per page.
searchRequest.setLimit(5);

//provide some categories to narrow down search
QList&amp;lt;QPlaceCategory&amp;gt; categories;
categories &amp;lt;&amp;lt; diner &amp;lt;&amp;lt; restaurant;
searchRequest.setCategories(categories);
</db:programlisting>
<db:para>Note that specifying a search center can be done by setting a circular search area that has a center but no radius. The default radius is set to -1, which indicates an undefined radius. The provider will interpret this as being free to choose its own default radius.</db:para>
<db:para>The <db:link xlink:href="qplacesearchrequest.xml">QPlaceSearchRequest</db:link> is primarily used with the <db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link> to <db:link xlink:href="qplacemanager.xml#search">search for places</db:link>, however it is also used to provide parameters for <db:link xlink:href="qplacemanager.xml#searchSuggestions">generating search term suggestions</db:link>. Note that in this context only some of the parameters may be relevant. For example, the search area is useful in narrowing down relevant search suggestions, while other parameters such as relevance hint are not so applicable.</db:para>
<db:para>Also be aware that providers may vary by which parameters they support for example some providers may not support paging while others do, some providers may honor relevance hints while others may completely ignore them, see the <db:link xlink:href="qtlocation-index.xml#plugin-references-and-parameters">plugin documentation</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RelevanceHint-enum">
<db:title>enum QPlaceSearchRequest::RelevanceHint</db:title>
<db:enumsynopsis>
<db:enumname>RelevanceHint</db:enumname>
<db:enumitem>
<db:enumidentifier>UnspecifiedHint</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DistanceHint</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LexicalPlaceNameHint</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Defines hints to help rank place results.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacesearchrequest.xml">QPlaceSearchRequest</db:link></db:emphasis>::UnspecifiedHint</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No explicit hint has been specified.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacesearchrequest.xml">QPlaceSearchRequest</db:link></db:emphasis>::DistanceHint</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Distance to a search center is relevant for the user. Closer places are more highly weighted. This hint is only useful if a circular search area is used in the query.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacesearchrequest.xml">QPlaceSearchRequest</db:link></db:emphasis>::LexicalPlaceNameHint</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Alphabetic ordering of places according to name is relevant to the user.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPlaceSearchRequest">
<db:title>QPlaceSearchRequest::QPlaceSearchRequest()</db:title>
<db:constructorsynopsis>
<db:methodname>QPlaceSearchRequest</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceSearchRequest()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Default constructor. Constructs an new request object.</db:para>
</db:section>
<db:section xml:id="QPlaceSearchRequest-1">
<db:title>QPlaceSearchRequest::QPlaceSearchRequest(const QPlaceSearchRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPlaceSearchRequest</db:methodname>
<db:methodparam>
<db:type>const QPlaceSearchRequest &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceSearchRequest(const QPlaceSearchRequest &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPlaceSearchRequest">
<db:title>QPlaceSearchRequest::~QPlaceSearchRequest()</db:title>
<db:destructorsynopsis>
<db:methodname>~QPlaceSearchRequest</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPlaceSearchRequest()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the request object.</db:para>
</db:section>
<db:section xml:id="categories">
<db:title>QList&lt;QPlaceCategory&gt; QPlaceSearchRequest::categories() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPlaceCategory&gt;</db:type>
<db:methodname>categories</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPlaceCategory&gt; categories() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the categories to be used in the search request. Places need only to belong to one of the categories to be considered a match by the request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#setCategories">setCategories</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QPlaceSearchRequest::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the search request.</db:para>
</db:section>
<db:section xml:id="limit">
<db:title>int QPlaceSearchRequest::limit() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>limit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int limit() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum number of search results to retrieve.</db:para>
<db:para>A negative value for limit means that it is undefined. It is left up to the backend provider to choose an appropriate number of results to return. The default limit is -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#setLimit">setLimit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="recommendationId">
<db:title>QString QPlaceSearchRequest::recommendationId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>recommendationId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString recommendationId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the place id which will be used to search for recommendations for similar places.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#setRecommendationId">setRecommendationId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="relevanceHint">
<db:title>QPlaceSearchRequest::RelevanceHint QPlaceSearchRequest::relevanceHint() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceSearchRequest::RelevanceHint</db:type>
<db:methodname>relevanceHint</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceSearchRequest::RelevanceHint relevanceHint() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the relevance hint of the request. The hint is given to the provider to help but not dictate the ranking of results. For example providing a distance hint may give closer places a higher ranking but it doesn't necessarily mean that he results will be ordered strictly according to distance.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#setRelevanceHint">setRelevanceHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="searchArea">
<db:title>QGeoShape QPlaceSearchRequest::searchArea() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoShape</db:type>
<db:methodname>searchArea</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoShape searchArea() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the search area which will be used to limit search results. The default search area is an invalid <db:link xlink:href="qgeoshape.xml">QGeoShape</db:link>, indicating that no specific search area is defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#setSearchArea">setSearchArea</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="searchContext">
<db:title>QVariant QPlaceSearchRequest::searchContext() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>searchContext</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant searchContext() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns backend specific additional search context associated with this place search request. The search context is typically set as part of a <db:link xlink:href="qplacesearchresult.xml#SearchResultType-enum">proposed search results</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#setSearchContext">setSearchContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="searchTerm">
<db:title>QString QPlaceSearchRequest::searchTerm() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>searchTerm</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString searchTerm() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the search term.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#setSearchTerm">setSearchTerm</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCategories">
<db:title>void QPlaceSearchRequest::setCategories(const QList&lt;QPlaceCategory&gt; &amp;<db:emphasis>categories</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCategories</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QPlaceCategory&gt; &amp;</db:type>
<db:parameter>categories</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCategories(const QList&lt;QPlaceCategory&gt; &amp;categories)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the search request to search from the list of given <db:code role="parameter">categories</db:code>. Any places returned during the search will match at least one of the <db:code role="parameter">categories</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#categories">categories</db:link>()</db:member>
<db:member><db:link xlink:href="qplacesearchrequest.xml#setCategory">setCategory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCategory">
<db:title>void QPlaceSearchRequest::setCategory(const QPlaceCategory &amp;<db:emphasis>category</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCategory</db:methodname>
<db:methodparam>
<db:type>const QPlaceCategory &amp;</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCategory(const QPlaceCategory &amp;category)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the search request to search by a single <db:code role="parameter">category</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#setCategories">setCategories</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLimit">
<db:title>void QPlaceSearchRequest::setLimit(int <db:emphasis>limit</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLimit</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>limit</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLimit(int limit)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the maximum number of search results to retrieve to <db:code role="parameter">limit</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#limit">limit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRecommendationId">
<db:title>void QPlaceSearchRequest::setRecommendationId(const QString &amp;<db:emphasis>placeId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRecommendationId</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>placeId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRecommendationId(const QString &amp;placeId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">placeId</db:code> which will be used to search for recommendations.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#recommendationId">recommendationId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRelevanceHint">
<db:title>void QPlaceSearchRequest::setRelevanceHint(QPlaceSearchRequest::RelevanceHint <db:emphasis>hint</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRelevanceHint</db:methodname>
<db:methodparam>
<db:type>QPlaceSearchRequest::RelevanceHint</db:type>
<db:parameter>hint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRelevanceHint(QPlaceSearchRequest::RelevanceHint hint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the relevance <db:code role="parameter">hint</db:code> to be used when searching for a place.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#relevanceHint">relevanceHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSearchArea">
<db:title>void QPlaceSearchRequest::setSearchArea(const QGeoShape &amp;<db:emphasis>area</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSearchArea</db:methodname>
<db:methodparam>
<db:type>const QGeoShape &amp;</db:type>
<db:parameter>area</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSearchArea(const QGeoShape &amp;area)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the search request to search within the given <db:code role="parameter">area</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#searchArea">searchArea</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSearchContext">
<db:title>void QPlaceSearchRequest::setSearchContext(const QVariant &amp;<db:emphasis>context</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSearchContext</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSearchContext(const QVariant &amp;context)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the search context to <db:code role="parameter">context</db:code>.</db:para>
<db:note>
<db:para>This method is intended to be used by geo service plugins when returning search results of type <db:link xlink:href="qplacesearchresult.xml#SearchResultType-enum">QPlaceSearchResult::ProposedSearchResult</db:link>.</db:para>
</db:note>
<db:para>The search context is used by backends to store additional search context related to the search request. Other relevant fields should also be filled in. For example, if the search context encodes a text search the search term should also be set with <db:link xlink:href="qplacesearchrequest.xml#setSearchTerm">setSearchTerm</db:link>(). The search context allows additional search context to be kept which is not directly accessible via the Qt Location API.</db:para>
<db:para>The search context can be of any type storable in a <db:link xlink:href="qvariant.xml">QVariant</db:link>. The value of the search context is not intended to be use directly by applications.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#searchContext">searchContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSearchTerm">
<db:title>void QPlaceSearchRequest::setSearchTerm(const QString &amp;<db:emphasis>term</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSearchTerm</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>term</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSearchTerm(const QString &amp;term)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the search <db:code role="parameter">term</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#searchTerm">searchTerm</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisibilityScope">
<db:title>void QPlaceSearchRequest::setVisibilityScope(QLocation::VisibilityScope <db:emphasis>scope</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVisibilityScope</db:methodname>
<db:methodparam>
<db:type>QLocation::VisibilityScope</db:type>
<db:parameter>scope</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVisibilityScope(QLocation::VisibilityScope scope)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the visibility <db:code role="parameter">scope</db:code> used when searching for places.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#visibilityScope">visibilityScope</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visibilityScope">
<db:title>QLocation::VisibilityScope QPlaceSearchRequest::visibilityScope() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLocation::VisibilityScope</db:type>
<db:methodname>visibilityScope</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLocation::VisibilityScope visibilityScope() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the visibility scope used when searching for places. The default value is <db:link xlink:href="qlocation.xml#Visibility-enum">QLocation::UnspecifiedVisibility</db:link> meaning that no explicit scope has been assigned. Places of any scope may be returned during the search.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchrequest.xml#setVisibilityScope">setVisibilityScope</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QPlaceSearchRequest &amp;QPlaceSearchRequest::operator=(const QPlaceSearchRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPlaceSearchRequest &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QPlaceSearchRequest &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceSearchRequest &amp; operator=(const QPlaceSearchRequest &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this search request and returns a reference to this search request.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QPlaceSearchRequest &amp;<db:emphasis>lhs</db:emphasis>, const QPlaceSearchRequest &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QPlaceSearchRequest &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPlaceSearchRequest &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QPlaceSearchRequest &amp;lhs, const QPlaceSearchRequest &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is not equal to <db:code role="parameter">rhs</db:code>, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QPlaceSearchRequest &amp;<db:emphasis>lhs</db:emphasis>, const QPlaceSearchRequest &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QPlaceSearchRequest &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPlaceSearchRequest &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QPlaceSearchRequest &amp;lhs, const QPlaceSearchRequest &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is equal to <db:code role="parameter">rhs</db:code>, otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
