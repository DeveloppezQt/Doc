<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPixmapCache Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpixmapcache.xml">QPixmapCache</db:link> class provides an application-wide cache for pixmaps.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPixmapCache</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is a tool for optimized drawing with <db:link xlink:href="qpixmap.xml">QPixmap</db:link>. You can use it to store temporary pixmaps that are expensive to generate without using more storage space than <db:link xlink:href="qpixmapcache.xml#cacheLimit">cacheLimit</db:link>(). Use <db:link xlink:href="qpixmapcache.xml#insert">insert</db:link>() to insert pixmaps, <db:link xlink:href="qpixmapcache.xml#find">find</db:link>() to find them, and <db:link xlink:href="qpixmapcache.xml#clear">clear</db:link>() to empty the cache.</db:para>
<db:para><db:link xlink:href="qpixmapcache.xml">QPixmapCache</db:link> contains no member data, only static functions to access the global pixmap cache. It creates an internal <db:link xlink:href="qcache.xml">QCache</db:link> object for caching the pixmaps.</db:para>
<db:para>The cache associates a pixmap with a user-provided string as a key, or with a <db:link xlink:href="qpixmapcache-key.xml">QPixmapCache::Key</db:link> that the cache generates. Using <db:link xlink:href="qpixmapcache-key.xml">QPixmapCache::Key</db:link> for keys is faster than using strings. The string API is very convenient for complex keys but the <db:link xlink:href="qpixmapcache-key.xml">QPixmapCache::Key</db:link> API will be very efficient and convenient for a one-to-one object-to-pixmap mapping - in this case, you can store the keys as members of an object.</db:para>
<db:para>If two pixmaps are inserted into the cache using equal keys then the last pixmap will replace the first pixmap in the cache. This follows the behavior of the <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link> and <db:link xlink:href="qcache.xml">QCache</db:link> classes.</db:para>
<db:para>The cache becomes full when the total size of all pixmaps in the cache exceeds <db:link xlink:href="qpixmapcache.xml#cacheLimit">cacheLimit</db:link>(). The initial cache limit is 10240 KB (10 MB); you can change this by calling <db:link xlink:href="qpixmapcache.xml#setCacheLimit">setCacheLimit</db:link>() with the required value. A pixmap takes roughly (<db:emphasis>width</db:emphasis> * <db:emphasis>height</db:emphasis> * <db:emphasis>depth</db:emphasis>)/8 bytes of memory.</db:para>
<db:para>The <db:emphasis>Qt Quarterly</db:emphasis> article <db:link xlink:href="http://doc.qt.io/archives/qq/qq12-qpixmapcache.html">Optimizing with QPixmapCache</db:link> explains how to use <db:link xlink:href="qpixmapcache.xml">QPixmapCache</db:link> to speed up applications by caching the results of painting.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcache.xml">QCache</db:link></db:member>
<db:member><db:link xlink:href="qpixmap.xml">QPixmap</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="cacheLimit">
<db:title>[static] int QPixmapCache::cacheLimit()</db:title>
<db:para>Returns the cache limit (in kilobytes).</db:para>
<db:para>The default cache limit is 10240 KB.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmapcache.xml#setCacheLimit">setCacheLimit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>[static] void QPixmapCache::clear()</db:title>
<db:para>Removes all pixmaps from the cache.</db:para>
</db:section>
<db:section xml:id="find">
<db:title>[static, since 4.6] bool QPixmapCache::find(const QPixmapCache::Key &amp;<db:emphasis>key</db:emphasis>, QPixmap *<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>Looks for a cached pixmap associated with the given <db:code role="parameter">key</db:code> in the cache. If the pixmap is found, the function sets <db:code role="parameter">pixmap</db:code> to that pixmap and returns <db:code>true</db:code>; otherwise it leaves <db:code role="parameter">pixmap</db:code> alone and returns <db:code>false</db:code>. If the pixmap is not found, it means that the <db:code role="parameter">key</db:code> is no longer valid, so it will be released for the next insertion.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="find-2">
<db:title>[static, since 4.6] bool QPixmapCache::find(const QString &amp;<db:emphasis>key</db:emphasis>, QPixmap *<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>Looks for a cached pixmap associated with the given <db:code role="parameter">key</db:code> in the cache. If the pixmap is found, the function sets <db:code role="parameter">pixmap</db:code> to that pixmap and returns <db:code>true</db:code>; otherwise it leaves <db:code role="parameter">pixmap</db:code> alone and returns <db:code>false</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QPixmap pm;
if (!QPixmapCache::find(&quot;my_big_image&quot;, &amp;pm)) {
    pm.load(&quot;bigimage.png&quot;);
    QPixmapCache::insert(&quot;my_big_image&quot;, pm);
}
painter-&gt;drawPixmap(0, 0, pm);
</db:programlisting>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="insert">
<db:title>[static, since 4.6] QPixmapCache::Key QPixmapCache::insert(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>Inserts a copy of the given <db:code role="parameter">pixmap</db:code> into the cache and returns a key that can be used to retrieve it.</db:para>
<db:para>When a pixmap is inserted and the cache is about to exceed its limit, it removes pixmaps until there is enough room for the pixmap to be inserted.</db:para>
<db:para>The oldest pixmaps (least recently accessed in the cache) are deleted when more space is needed.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmapcache.xml#setCacheLimit">setCacheLimit</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmapcache.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert-1">
<db:title>[static] bool QPixmapCache::insert(const QString &amp;<db:emphasis>key</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>Inserts a copy of the pixmap <db:code role="parameter">pixmap</db:code> associated with the <db:code role="parameter">key</db:code> into the cache.</db:para>
<db:para>All pixmaps inserted by the Qt library have a key starting with &quot;$qt&quot;, so your own pixmap keys should never begin &quot;$qt&quot;.</db:para>
<db:para>When a pixmap is inserted and the cache is about to exceed its limit, it removes pixmaps until there is enough room for the pixmap to be inserted.</db:para>
<db:para>The oldest pixmaps (least recently accessed in the cache) are deleted when more space is needed.</db:para>
<db:para>The function returns <db:code>true</db:code> if the object was inserted into the cache; otherwise it returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmapcache.xml#setCacheLimit">setCacheLimit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove">
<db:title>[static, since 4.6] void QPixmapCache::remove(const QPixmapCache::Key &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:para>Removes the pixmap associated with <db:code role="parameter">key</db:code> from the cache and releases the key for a future insertion.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="remove-1">
<db:title>[static] void QPixmapCache::remove(const QString &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:para>Removes the pixmap associated with <db:code role="parameter">key</db:code> from the cache.</db:para>
</db:section>
<db:section xml:id="replace">
<db:title>[static, since 4.6] bool QPixmapCache::replace(const QPixmapCache::Key &amp;<db:emphasis>key</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>Replaces the pixmap associated with the given <db:code role="parameter">key</db:code> with the <db:code role="parameter">pixmap</db:code> specified. Returns <db:code>true</db:code> if the <db:code role="parameter">pixmap</db:code> has been correctly inserted into the cache; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmapcache.xml#setCacheLimit">setCacheLimit</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmapcache.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCacheLimit">
<db:title>[static] void QPixmapCache::setCacheLimit(int <db:emphasis>n</db:emphasis>)</db:title>
<db:para>Sets the cache limit to <db:code role="parameter">n</db:code> kilobytes.</db:para>
<db:para>The default setting is 10240 KB.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmapcache.xml#cacheLimit">cacheLimit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QPixmapCache</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qpixmapcache.xml">QPixmapCache</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="find-1">
<db:title>[static, deprecated] bool QPixmapCache::find(const QString &amp;<db:emphasis>key</db:emphasis>, QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use bool find(const <db:link xlink:href="qstring.xml">QString</db:link>&amp;, <db:link xlink:href="qpixmap.xml">QPixmap</db:link>*) instead.</db:para>
</db:section>
<db:section xml:id="find-3">
<db:title>[static, deprecated] QPixmap *QPixmapCache::find(const QString &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the pixmap associated with the <db:code role="parameter">key</db:code> in the cache, or null if there is no such pixmap.</db:para>
<db:warning>
<db:para>If valid, you should copy the pixmap immediately (this is fast). Subsequent insertions into the cache could cause the pointer to become invalid. For this reason, we recommend you use bool find(const <db:link xlink:href="qstring.xml">QString</db:link>&amp;, <db:link xlink:href="qpixmap.xml">QPixmap</db:link>*) instead.</db:para>
</db:warning>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QPixmap* pp;
QPixmap p;
if ((pp=QPixmapCache::find(&quot;my_big_image&quot;, pm))) {
    p = *pp;
} else {
    p.load(&quot;bigimage.png&quot;);
    QPixmapCache::insert(&quot;my_big_image&quot;, new QPixmap(p));
}
painter-&gt;drawPixmap(0, 0, p);
</db:programlisting>
</db:section>
</db:section>
</db:section>
</db:article>
