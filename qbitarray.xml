<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBitArray Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbitarray.xml">QBitArray</db:link> class provides an array of bits.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBitArray</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QBitArray is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qbitarray.xml">QBitArray</db:link> is an array that gives access to individual bits and provides operators (<db:link xlink:href="qbitarray.xml#operator-and">AND</db:link>, <db:link xlink:href="qbitarray.xml#operator-7c">OR</db:link>, <db:link xlink:href="qbitarray.xml#operator-5e">XOR</db:link>, and <db:link xlink:href="qbitarray.xml#operator-7e">NOT</db:link>) that work on entire arrays of bits. It uses <db:link xlink:href="implicit-sharing.xml">implicit sharing</db:link> (copy-on-write) to reduce memory usage and to avoid the needless copying of data.</db:para>
<db:para>The following code constructs a <db:link xlink:href="qbitarray.xml">QBitArray</db:link> containing 200 bits initialized to false (0):</db:para>
<db:programlisting language="cpp">QBitArray ba(200);
</db:programlisting>
<db:para>To initialize the bits to true, either pass true as second argument to the constructor, or call <db:link xlink:href="qbitarray.xml#fill">fill</db:link>() later on.</db:para>
<db:para><db:link xlink:href="qbitarray.xml">QBitArray</db:link> uses 0-based indexes, just like C++ arrays. To access the bit at a particular index position, you can use operator[](). On non-const bit arrays, operator[]() returns a reference to a bit that can be used on the left side of an assignment. For example:</db:para>
<db:programlisting language="cpp">QBitArray ba;
ba.resize(3);
ba[0] = true;
ba[1] = false;
ba[2] = true;
</db:programlisting>
<db:para>For technical reasons, it is more efficient to use <db:link xlink:href="qbitarray.xml#testBit">testBit</db:link>() and <db:link xlink:href="qbitarray.xml#setBit">setBit</db:link>() to access bits in the array than operator[](). For example:</db:para>
<db:programlisting language="cpp">QBitArray ba(3);
ba.setBit(0, true);
ba.setBit(1, false);
ba.setBit(2, true);
</db:programlisting>
<db:para><db:link xlink:href="qbitarray.xml">QBitArray</db:link> supports &amp; (<db:link xlink:href="qbitarray.xml#operator-and">AND</db:link>), | (<db:link xlink:href="qbitarray.xml#operator-7c">OR</db:link>), ^ (<db:link xlink:href="qbitarray.xml#operator-5e">XOR</db:link>), ~ (<db:link xlink:href="qbitarray.xml#operator-7e">NOT</db:link>), as well as &amp;=, |=, and ^=. These operators work in the same way as the built-in C++ bitwise operators of the same name. For example:</db:para>
<db:programlisting language="cpp">QBitArray x(5);
x.setBit(3, true);
// x: [ 0, 0, 0, 1, 0 ]

QBitArray y(5);
y.setBit(4, true);
// y: [ 0, 0, 0, 0, 1 ]

x |= y;
// x: [ 0, 0, 0, 1, 1 ]
</db:programlisting>
<db:para>For historical reasons, <db:link xlink:href="qbitarray.xml">QBitArray</db:link> distinguishes between a null bit array and an empty bit array. A <db:emphasis>null</db:emphasis> bit array is a bit array that is initialized using <db:link xlink:href="qbitarray.xml">QBitArray</db:link>'s default constructor. An <db:emphasis>empty</db:emphasis> bit array is any bit array with size 0. A null bit array is always empty, but an empty bit array isn't necessarily null:</db:para>
<db:programlisting language="cpp">QBitArray().isNull();           // returns true
QBitArray().isEmpty();          // returns true

QBitArray(0).isNull();          // returns false
QBitArray(0).isEmpty();         // returns true

QBitArray(3).isNull();          // returns false
QBitArray(3).isEmpty();         // returns false
</db:programlisting>
<db:para>All functions except <db:link xlink:href="qbitarray.xml#isNull">isNull</db:link>() treat null bit arrays the same as empty bit arrays; for example, <db:link xlink:href="qbitarray.xml#QBitArray">QBitArray</db:link>() compares equal to <db:link xlink:href="qbitarray.xml">QBitArray</db:link>(0). We recommend that you always use <db:link xlink:href="qbitarray.xml#isEmpty">isEmpty</db:link>() and avoid <db:link xlink:href="qbitarray.xml#isNull">isNull</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:member>
<db:member><db:link xlink:href="qlist.xml">QList</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBitArray">
<db:title>QBitArray::QBitArray()</db:title>
<db:constructorsynopsis>
<db:methodname>QBitArray</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty bit array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBitArray-1">
<db:title>[explicit] QBitArray::QBitArray(qsizetype <db:emphasis>size</db:emphasis>, bool <db:emphasis>value</db:emphasis> = false)</db:title>
<db:constructorsynopsis>
<db:methodname>QBitArray</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>value</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray(qsizetype size, bool value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a bit array containing <db:code role="parameter">size</db:code> bits. The bits are initialized with <db:code role="parameter">value</db:code>, which defaults to false (0).</db:para>
</db:section>
<db:section xml:id="QBitArray-2">
<db:title>QBitArray::QBitArray(const QBitArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QBitArray</db:methodname>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray(const QBitArray &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>This operation takes <db:link xlink:href="containers.xml#constant-time">constant time</db:link>, because <db:link xlink:href="qbitarray.xml">QBitArray</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>. This makes returning a <db:link xlink:href="qbitarray.xml">QBitArray</db:link> from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <db:link xlink:href="containers.xml#linear-time">linear time</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBitArray-3">
<db:title>QBitArray::QBitArray(QBitArray &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QBitArray</db:methodname>
<db:methodparam>
<db:type>QBitArray &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray(QBitArray &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qbitarray.xml">QBitArray</db:link> instance, making it point at the same object that <db:code role="parameter">other</db:code> was pointing to.</db:para>
</db:section>
<db:section xml:id="at">
<db:title>bool QBitArray::at(qsizetype <db:emphasis>i</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>at</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool at(qsizetype i) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the bit at index position <db:code role="parameter">i</db:code>.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the bit array (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bits">
<db:title>const char *QBitArray::bits() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const char *</db:type>
<db:methodname>bits</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const char * bits() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to a dense bit array for this <db:link xlink:href="qbitarray.xml">QBitArray</db:link>. Bits are counted upwards from the least significant bit in each byte. The number of bits relevant in the last byte is given by size() % 8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#fromBits">fromBits</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QBitArray::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the contents of the bit array and makes it empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#resize">resize</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearBit">
<db:title>void QBitArray::clearBit(qsizetype <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearBit</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearBit(qsizetype i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the bit at index position <db:code role="parameter">i</db:code> to 0.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the bit array (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#setBit">setBit</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#toggleBit">toggleBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>qsizetype QBitArray::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qbitarray.xml#size">size</db:link>().</db:para>
</db:section>
<db:section xml:id="count-1">
<db:title>qsizetype QBitArray::count(bool <db:emphasis>on</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>count</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype count(bool on) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">on</db:code> is true, this function returns the number of 1-bits stored in the bit array; otherwise the number of 0-bits is returned.</db:para>
</db:section>
<db:section xml:id="fill">
<db:title>bool QBitArray::fill(bool <db:emphasis>value</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>fill</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool fill(bool value, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets every bit in the bit array to <db:code role="parameter">value</db:code>, returning true if successful; otherwise returns false. If <db:code role="parameter">size</db:code> is different from -1 (the default), the bit array is resized to <db:code role="parameter">size</db:code> beforehand.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray ba(8);
ba.fill(true);
// ba: [ 1, 1, 1, 1, 1, 1, 1, 1 ]

ba.fill(false, 2);
// ba: [ 0, 0 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fill-1">
<db:title>void QBitArray::fill(bool <db:emphasis>value</db:emphasis>, qsizetype <db:emphasis>begin</db:emphasis>, qsizetype <db:emphasis>end</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fill</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>begin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void fill(bool value, qsizetype begin, qsizetype end)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets bits at index positions <db:code role="parameter">begin</db:code> up to (but not including) <db:code role="parameter">end</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:para><db:code role="parameter">begin</db:code> must be a valid index position in the bit array (0 &lt;= <db:code role="parameter">begin</db:code> &lt; <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:para><db:code role="parameter">end</db:code> must be either a valid index position or equal to <db:link xlink:href="qbitarray.xml#size">size</db:link>(), in which case the fill operation runs until the end of the array (0 &lt;= <db:code role="parameter">end</db:code> &lt;= <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray ba(4);
ba.fill(true, 1, 2);            // ba: [ 0, 1, 0, 0 ]
ba.fill(true, 1, 3);            // ba: [ 0, 1, 1, 0 ]
ba.fill(true, 1, 4);            // ba: [ 0, 1, 1, 1 ]
</db:programlisting>
</db:section>
<db:section xml:id="fromBits">
<db:title>[static] QBitArray QBitArray::fromBits(const char *<db:emphasis>data</db:emphasis>, qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QBitArray</db:type>
<db:methodname>fromBits</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray fromBits(const char *data, qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:link xlink:href="qbitarray.xml">QBitArray</db:link> with the dense bit array located at <db:code role="parameter">data</db:code>, with <db:code role="parameter">size</db:code> bits. The byte array at <db:code role="parameter">data</db:code> must be at least <db:code role="parameter">size</db:code> / 8 (rounded up) bytes long.</db:para>
<db:para>If <db:code role="parameter">size</db:code> is not a multiple of 8, this function will include the lowest <db:code role="parameter">size</db:code> % 8 bits from the last byte in <db:code role="parameter">data</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#bits">bits</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QBitArray::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this bit array has size 0; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QBitArray::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this bit array is null; otherwise returns false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray().isNull();           // returns true
QBitArray(0).isNull();          // returns false
QBitArray(3).isNull();          // returns false
</db:programlisting>
<db:para>Qt makes a distinction between null bit arrays and empty bit arrays for historical reasons. For most applications, what matters is whether or not a bit array contains any data, and this can be determined using <db:link xlink:href="qbitarray.xml#isEmpty">isEmpty</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resize">
<db:title>void QBitArray::resize(qsizetype <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resize</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resize(qsizetype size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resizes the bit array to <db:code role="parameter">size</db:code> bits.</db:para>
<db:para>If <db:code role="parameter">size</db:code> is greater than the current size, the bit array is extended to make it <db:code role="parameter">size</db:code> bits with the extra bits added to the end. The new bits are initialized to false (0).</db:para>
<db:para>If <db:code role="parameter">size</db:code> is less than the current size, bits are removed from the end.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBit">
<db:title>void QBitArray::setBit(qsizetype <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBit</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBit(qsizetype i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the bit at index position <db:code role="parameter">i</db:code> to 1.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the bit array (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#clearBit">clearBit</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#toggleBit">toggleBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBit-1">
<db:title>void QBitArray::setBit(qsizetype <db:emphasis>i</db:emphasis>, bool <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBit</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBit(qsizetype i, bool value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the bit at index position <db:code role="parameter">i</db:code> to <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="size">
<db:title>qsizetype QBitArray::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of bits stored in the bit array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QBitArray::swap(QBitArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QBitArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QBitArray &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps bit array <db:code role="parameter">other</db:code> with this bit array. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="testBit">
<db:title>bool QBitArray::testBit(qsizetype <db:emphasis>i</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>testBit</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool testBit(qsizetype i) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the bit at index position <db:code role="parameter">i</db:code> is 1; otherwise returns false.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the bit array (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#setBit">setBit</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#clearBit">clearBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUInt32">
<db:title>[since 6.0] quint32 QBitArray::toUInt32(QSysInfo::Endian <db:emphasis>endianness</db:emphasis>, bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint32</db:type>
<db:methodname>toUInt32</db:methodname>
<db:methodparam>
<db:type>QSysInfo::Endian</db:type>
<db:parameter>endianness</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint32 toUInt32(QSysInfo::Endian endianness, bool *ok) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the array of bit converted to an int. The conversion is based on <db:code role="parameter">endianness</db:code>. Converts up to the first 32 bits of the array to quint32 and returns it, obeying <db:code role="parameter">endianness</db:code>. If <db:code role="parameter">ok</db:code> is not a null pointer, and the array has more than 32 bits, <db:code role="parameter">ok</db:code> is set to false and this function returns zero; otherwise, it's set to true.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="toggleBit">
<db:title>bool QBitArray::toggleBit(qsizetype <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>toggleBit</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool toggleBit(qsizetype i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inverts the value of the bit at index position <db:code role="parameter">i</db:code>, returning the previous value of that bit as either true (if it was set) or false (if it was unset).</db:para>
<db:para>If the previous value was 0, the new value will be 1. If the previous value was 1, the new value will be 0.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the bit array (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#setBit">setBit</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#clearBit">clearBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="truncate">
<db:title>void QBitArray::truncate(qsizetype <db:emphasis>pos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>truncate</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void truncate(qsizetype pos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Truncates the bit array at index position <db:code role="parameter">pos</db:code>.</db:para>
<db:para>If <db:code role="parameter">pos</db:code> is beyond the end of the array, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QBitArray::operator!=(const QBitArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QBitArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">other</db:code> is not equal to this bit array; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-and-eq">
<db:title>QBitArray &amp;QBitArray::operator&amp;=(const QBitArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QBitArray &amp;</db:type>
<db:methodname>operator&amp;=</db:methodname>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray &amp; operator&amp;=(const QBitArray &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the AND operation between all bits in this bit array and <db:code role="parameter">other</db:code>. Assigns the result to this bit array, and returns a reference to it.</db:para>
<db:para>The result has the length of the longest of the two bit arrays, with any missing bits (if one array is shorter than the other) taken to be 0.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b(2);
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b[0] = 1; b[1] = 1;             // b: [ 1, 1 ]
a &amp;amp;= b;                         // a: [ 1, 0, 0 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7c-eq">operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-5e-eq">operator^=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7e">operator~</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QBitArray &amp;QBitArray::operator=(const QBitArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QBitArray &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray &amp; operator=(const QBitArray &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this bit array and returns a reference to this bit array.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QBitArray &amp;QBitArray::operator=(QBitArray &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QBitArray &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QBitArray &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray &amp; operator=(QBitArray &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves <db:code role="parameter">other</db:code> to this bit array and returns a reference to this bit array.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QBitArray::operator==(const QBitArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QBitArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">other</db:code> is equal to this bit array; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>QBitRef QBitArray::operator[](qsizetype <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QBitRef</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitRef operator[](qsizetype i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bit at index position <db:code role="parameter">i</db:code> as a modifiable reference.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the bit array (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
a[0] = false;
a[1] = true;
a[2] = a[0] ^ a[1];
</db:programlisting>
<db:para>The return value is of type QBitRef, a helper class for <db:link xlink:href="qbitarray.xml">QBitArray</db:link>. When you get an object of type QBitRef, you can assign to it, and the assignment will apply to the bit in the <db:link xlink:href="qbitarray.xml">QBitArray</db:link> from which you got the reference.</db:para>
<db:para>The functions <db:link xlink:href="qbitarray.xml#testBit">testBit</db:link>(), <db:link xlink:href="qbitarray.xml#setBit">setBit</db:link>(), and <db:link xlink:href="qbitarray.xml#clearBit">clearBit</db:link>() are slightly faster.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#testBit">testBit</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#setBit">setBit</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#clearBit">clearBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d-1">
<db:title>bool QBitArray::operator[](qsizetype <db:emphasis>i</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator[](qsizetype i) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-5e-eq">
<db:title>QBitArray &amp;QBitArray::operator^=(const QBitArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QBitArray &amp;</db:type>
<db:methodname>operator^=</db:methodname>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray &amp; operator^=(const QBitArray &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the XOR operation between all bits in this bit array and <db:code role="parameter">other</db:code>. Assigns the result to this bit array, and returns a reference to it.</db:para>
<db:para>The result has the length of the longest of the two bit arrays, with any missing bits (if one array is shorter than the other) taken to be 0.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b(2);
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b[0] = 1; b[1] = 1;             // b: [ 1, 1 ]
a ^= b;                         // a: [ 0, 1, 1 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-5e">operator^</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7c-eq">operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7e">operator~</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c-eq">
<db:title>QBitArray &amp;QBitArray::operator|=(const QBitArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QBitArray &amp;</db:type>
<db:methodname>operator|=</db:methodname>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray &amp; operator|=(const QBitArray &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the OR operation between all bits in this bit array and <db:code role="parameter">other</db:code>. Assigns the result to this bit array, and returns a reference to it.</db:para>
<db:para>The result has the length of the longest of the two bit arrays, with any missing bits (if one array is shorter than the other) taken to be 0.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b(2);
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b[0] = 1; b[1] = 1;             // b: [ 1, 1 ]
a |= b;                         // a: [ 1, 1, 1 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-5e-eq">operator^=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7e">operator~</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7e">
<db:title>QBitArray QBitArray::operator~() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBitArray</db:type>
<db:methodname>operator~</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray operator~() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a bit array that contains the inverted bits of this bit array.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b;
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b = ~a;                         // b: [ 0, 1, 0 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-5e">operator^</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-and">
<db:title>QBitArray operator&amp;(const QBitArray &amp;<db:emphasis>a1</db:emphasis>, const QBitArray &amp;<db:emphasis>a2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QBitArray</db:type>
<db:methodname>operator&amp;</db:methodname>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>a1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>a2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray operator&amp;(const QBitArray &amp;a1, const QBitArray &amp;a2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a bit array that is the AND of the bit arrays <db:code role="parameter">a1</db:code> and <db:code role="parameter">a2</db:code>.</db:para>
<db:para>The result has the length of the longest of the two bit arrays, with any missing bits (if one array is shorter than the other) taken to be 0.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b(2);
QBitArray c;
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b[0] = 1; b[1] = 1;             // b: [ 1, 1 ]
c = a &amp;amp; b;                      // c: [ 1, 0, 0 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-5e">operator^</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QBitArray &amp;<db:emphasis>ba</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>ba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QBitArray &amp;ba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes bit array <db:code role="parameter">ba</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QBitArray &amp;<db:emphasis>ba</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBitArray &amp;</db:type>
<db:parameter>ba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QBitArray &amp;ba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a bit array into <db:code role="parameter">ba</db:code> from stream <db:code role="parameter">in</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5e">
<db:title>QBitArray operator^(const QBitArray &amp;<db:emphasis>a1</db:emphasis>, const QBitArray &amp;<db:emphasis>a2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QBitArray</db:type>
<db:methodname>operator^</db:methodname>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>a1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>a2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray operator^(const QBitArray &amp;a1, const QBitArray &amp;a2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a bit array that is the XOR of the bit arrays <db:code role="parameter">a1</db:code> and <db:code role="parameter">a2</db:code>.</db:para>
<db:para>The result has the length of the longest of the two bit arrays, with any missing bits (if one array is shorter than the other) taken to be 0.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b(2);
QBitArray c;
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b[0] = 1; b[1] = 1;             // b: [ 1, 1 ]
c = a ^ b;                      // c: [ 0, 1, 1 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml">operator^=()</db:link></db:member>
<db:member><db:link xlink:href="qbitarray.xml">operator&amp;()</db:link></db:member>
<db:member><db:link xlink:href="qbitarray.xml">operator|()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c">
<db:title>QBitArray operator|(const QBitArray &amp;<db:emphasis>a1</db:emphasis>, const QBitArray &amp;<db:emphasis>a2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QBitArray</db:type>
<db:methodname>operator|</db:methodname>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>a1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QBitArray &amp;</db:type>
<db:parameter>a2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBitArray operator|(const QBitArray &amp;a1, const QBitArray &amp;a2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a bit array that is the OR of the bit arrays <db:code role="parameter">a1</db:code> and <db:code role="parameter">a2</db:code>.</db:para>
<db:para>The result has the length of the longest of the two bit arrays, with any missing bits (if one array is shorter than the other) taken to be 0.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b(2);
QBitArray c;
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b[0] = 1; b[1] = 1;             // b: [ 1, 1 ]
c = a | b;                      // c: [ 1, 1, 1 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-7c-eq">QBitArray::operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-5e">operator^</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
