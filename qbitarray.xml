<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QBitArray Class</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbitarray.xml">QBitArray</db:link> class provides an array of bits.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBitArray</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QBitArray is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qbitarray.xml">QBitArray</db:link> is an array that gives access to individual bits and provides operators (<db:link xlink:href="qbitarray.xml#operator-and">AND</db:link>, <db:link xlink:href="qbitarray.xml#operator-7c">OR</db:link>, <db:link xlink:href="qbitarray.xml#operator-5e">XOR</db:link>, and <db:link xlink:href="qbitarray.xml#operator-7e">NOT</db:link>) that work on entire arrays of bits. It uses <db:link xlink:href="implicit-sharing.xml">implicit sharing</db:link> (copy-on-write) to reduce memory usage and to avoid the needless copying of data.</db:para>
<db:para>The following code constructs a <db:link xlink:href="qbitarray.xml">QBitArray</db:link> containing 200 bits initialized to false (0):</db:para>
<db:programlisting language="cpp">QBitArray ba(200);
</db:programlisting>
<db:para>To initialize the bits to true, either pass true as second argument to the constructor, or call <db:link xlink:href="qbitarray.xml#fill">fill</db:link>() later on.</db:para>
<db:para><db:link xlink:href="qbitarray.xml">QBitArray</db:link> uses 0-based indexes, just like C++ arrays. To access the bit at a particular index position, you can use operator[](). On non-const bit arrays, operator[]() returns a reference to a bit that can be used on the left side of an assignment. For example:</db:para>
<db:programlisting language="cpp">QBitArray ba;
ba.resize(3);
ba[0] = true;
ba[1] = false;
ba[2] = true;
</db:programlisting>
<db:para>For technical reasons, it is more efficient to use <db:link xlink:href="qbitarray.xml#testBit">testBit</db:link>() and <db:link xlink:href="qbitarray.xml#setBit">setBit</db:link>() to access bits in the array than operator[](). For example:</db:para>
<db:programlisting language="cpp">QBitArray ba(3);
ba.setBit(0, true);
ba.setBit(1, false);
ba.setBit(2, true);
</db:programlisting>
<db:para><db:link xlink:href="qbitarray.xml">QBitArray</db:link> supports &amp; (<db:link xlink:href="qbitarray.xml#operator-and">AND</db:link>), | (<db:link xlink:href="qbitarray.xml#operator-7c">OR</db:link>), ^ (<db:link xlink:href="qbitarray.xml#operator-5e">XOR</db:link>), ~ (<db:link xlink:href="qbitarray.xml#operator-7e">NOT</db:link>), as well as &amp;=, |=, and ^=. These operators work in the same way as the built-in C++ bitwise operators of the same name. For example:</db:para>
<db:programlisting language="cpp">QBitArray x(5);
x.setBit(3, true);
// x: [ 0, 0, 0, 1, 0 ]

QBitArray y(5);
y.setBit(4, true);
// y: [ 0, 0, 0, 0, 1 ]

x |= y;
// x: [ 0, 0, 0, 1, 1 ]
</db:programlisting>
<db:para>For historical reasons, <db:link xlink:href="qbitarray.xml">QBitArray</db:link> distinguishes between a null bit array and an empty bit array. A <db:emphasis>null</db:emphasis> bit array is a bit array that is initialized using <db:link xlink:href="qbitarray.xml">QBitArray</db:link>'s default constructor. An <db:emphasis>empty</db:emphasis> bit array is any bit array with size 0. A null bit array is always empty, but an empty bit array isn't necessarily null:</db:para>
<db:programlisting language="cpp">QBitArray().isNull();           // returns true
QBitArray().isEmpty();          // returns true

QBitArray(0).isNull();          // returns false
QBitArray(0).isEmpty();         // returns true

QBitArray(3).isNull();          // returns false
QBitArray(3).isEmpty();         // returns false
</db:programlisting>
<db:para>All functions except <db:link xlink:href="qbitarray.xml#isNull">isNull</db:link>() treat null bit arrays the same as empty bit arrays; for example, <db:link xlink:href="qbitarray.xml#QBitArray">QBitArray</db:link>() compares equal to <db:link xlink:href="qbitarray.xml">QBitArray</db:link>(0). We recommend that you always use <db:link xlink:href="qbitarray.xml#isEmpty">isEmpty</db:link>() and avoid <db:link xlink:href="qbitarray.xml#isNull">isNull</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:member>
<db:member><db:link xlink:href="qvector.xml">QVector</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBitArray">
<db:title>QBitArray::QBitArray()</db:title>
<db:para>Constructs an empty bit array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBitArray-2">
<db:title>[explicit] QBitArray::QBitArray(int <db:emphasis>size</db:emphasis>, bool <db:emphasis>value</db:emphasis> = false)</db:title>
<db:para>Constructs a bit array containing <db:code role="parameter">size</db:code> bits. The bits are initialized with <db:code role="parameter">value</db:code>, which defaults to false (0).</db:para>
</db:section>
<db:section xml:id="QBitArray-1">
<db:title>QBitArray::QBitArray(const QBitArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>This operation takes <db:link xlink:href="containers.xml">constant time</db:link>, because <db:link xlink:href="qbitarray.xml">QBitArray</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>. This makes returning a <db:link xlink:href="qbitarray.xml">QBitArray</db:link> from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <db:link xlink:href="containers.xml">linear time</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="at">
<db:title>bool QBitArray::at(int <db:emphasis>i</db:emphasis>) const</db:title>
<db:para>Returns the value of the bit at index position <db:code role="parameter">i</db:code>.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the bit array (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QBitArray::clear()</db:title>
<db:para>Clears the contents of the bit array and makes it empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#resize">resize</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearBit">
<db:title>void QBitArray::clearBit(int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Sets the bit at index position <db:code role="parameter">i</db:code> to 0.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the bit array (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#setBit">setBit</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#toggleBit">toggleBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>int QBitArray::count() const</db:title>
<db:para>Same as <db:link xlink:href="qbitarray.xml#size">size</db:link>().</db:para>
</db:section>
<db:section xml:id="count-1">
<db:title>int QBitArray::count(bool <db:emphasis>on</db:emphasis>) const</db:title>
<db:para>If <db:code role="parameter">on</db:code> is true, this function returns the number of 1-bits stored in the bit array; otherwise the number of 0-bits is returned.</db:para>
</db:section>
<db:section xml:id="fill">
<db:title>bool QBitArray::fill(bool <db:emphasis>value</db:emphasis>, int <db:emphasis>size</db:emphasis> = -1)</db:title>
<db:para>Sets every bit in the bit array to <db:code role="parameter">value</db:code>, returning true if successful; otherwise returns false. If <db:code role="parameter">size</db:code> is different from -1 (the default), the bit array is resized to <db:code role="parameter">size</db:code> beforehand.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray ba(8);
ba.fill(true);
// ba: [ 1, 1, 1, 1, 1, 1, 1, 1 ]

ba.fill(false, 2);
// ba: [ 0, 0 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fill-1">
<db:title>void QBitArray::fill(bool <db:emphasis>value</db:emphasis>, int <db:emphasis>begin</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets bits at index positions <db:code role="parameter">begin</db:code> up to and excluding <db:code role="parameter">end</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:para><db:code role="parameter">begin</db:code> and <db:code role="parameter">end</db:code> must be a valid index position in the bit array (i.e., 0 &lt;= <db:code role="parameter">begin</db:code> &lt;= <db:link xlink:href="qbitarray.xml#size">size</db:link>() and 0 &lt;= <db:code role="parameter">end</db:code> &lt;= <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QBitArray::isEmpty() const</db:title>
<db:para>Returns true if this bit array has size 0; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QBitArray::isNull() const</db:title>
<db:para>Returns true if this bit array is null; otherwise returns false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray().isNull();           // returns true
QBitArray(0).isNull();          // returns false
QBitArray(3).isNull();          // returns false
</db:programlisting>
<db:para>Qt makes a distinction between null bit arrays and empty bit arrays for historical reasons. For most applications, what matters is whether or not a bit array contains any data, and this can be determined using <db:link xlink:href="qbitarray.xml#isEmpty">isEmpty</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resize">
<db:title>void QBitArray::resize(int <db:emphasis>size</db:emphasis>)</db:title>
<db:para>Resizes the bit array to <db:code role="parameter">size</db:code> bits.</db:para>
<db:para>If <db:code role="parameter">size</db:code> is greater than the current size, the bit array is extended to make it <db:code role="parameter">size</db:code> bits with the extra bits added to the end. The new bits are initialized to false (0).</db:para>
<db:para>If <db:code role="parameter">size</db:code> is less than the current size, bits are removed from the end.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBit">
<db:title>void QBitArray::setBit(int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Sets the bit at index position <db:code role="parameter">i</db:code> to 1.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the bit array (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#clearBit">clearBit</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#toggleBit">toggleBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBit-1">
<db:title>void QBitArray::setBit(int <db:emphasis>i</db:emphasis>, bool <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the bit at index position <db:code role="parameter">i</db:code> to <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="size">
<db:title>int QBitArray::size() const</db:title>
<db:para>Returns the number of bits stored in the bit array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 4.8] void QBitArray::swap(QBitArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps bit array <db:code role="parameter">other</db:code> with this bit array. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="testBit">
<db:title>bool QBitArray::testBit(int <db:emphasis>i</db:emphasis>) const</db:title>
<db:para>Returns true if the bit at index position <db:code role="parameter">i</db:code> is 1; otherwise returns false.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the bit array (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#setBit">setBit</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#clearBit">clearBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toggleBit">
<db:title>bool QBitArray::toggleBit(int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Inverts the value of the bit at index position <db:code role="parameter">i</db:code>, returning the previous value of that bit as either true (if it was set) or false (if it was unset).</db:para>
<db:para>If the previous value was 0, the new value will be 1. If the previous value was 1, the new value will be 0.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the bit array (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#setBit">setBit</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#clearBit">clearBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="truncate">
<db:title>void QBitArray::truncate(int <db:emphasis>pos</db:emphasis>)</db:title>
<db:para>Truncates the bit array at index position <db:code role="parameter">pos</db:code>.</db:para>
<db:para>If <db:code role="parameter">pos</db:code> is beyond the end of the array, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QBitArray::operator!=(const QBitArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> is not equal to this bit array; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-and-eq">
<db:title>QBitArray &amp;QBitArray::operator&amp;=(const QBitArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Performs the AND operation between all bits in this bit array and <db:code role="parameter">other</db:code>. Assigns the result to this bit array, and returns a reference to it.</db:para>
<db:para>The result has the length of the longest of the two bit arrays, with any missing bits (if one array is shorter than the other) taken to be 0.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b(2);
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b[0] = 1; b[1] = 0;             // b: [ 1, 1 ]
a &amp;= b;                         // a: [ 1, 0, 0 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7c-eq">operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-5e-eq">operator^=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7e">operator~</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QBitArray &amp;QBitArray::operator=(QBitArray &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Moves <db:code role="parameter">other</db:code> to this bit array and returns a reference to this bit array.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QBitArray &amp;QBitArray::operator=(const QBitArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this bit array and returns a reference to this bit array.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QBitArray::operator==(const QBitArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> is equal to this bit array; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>QBitRef QBitArray::operator[](int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Returns the bit at index position <db:code role="parameter">i</db:code> as a modifiable reference.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index position in the bit array (i.e., 0 &lt;= <db:code role="parameter">i</db:code> &lt; <db:link xlink:href="qbitarray.xml#size">size</db:link>()).</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
a[0] = false;
a[1] = true;
a[2] = a[0] ^ a[1];
</db:programlisting>
<db:para>The return value is of type QBitRef, a helper class for <db:link xlink:href="qbitarray.xml">QBitArray</db:link>. When you get an object of type QBitRef, you can assign to it, and the assignment will apply to the bit in the <db:link xlink:href="qbitarray.xml">QBitArray</db:link> from which you got the reference.</db:para>
<db:para>The functions <db:link xlink:href="qbitarray.xml#testBit">testBit</db:link>(), <db:link xlink:href="qbitarray.xml#setBit">setBit</db:link>(), and <db:link xlink:href="qbitarray.xml#clearBit">clearBit</db:link>() are slightly faster.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#testBit">testBit</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#setBit">setBit</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#clearBit">clearBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d-1">
<db:title>QBitRef QBitArray::operator[](uint <db:emphasis>i</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d-2">
<db:title>bool QBitArray::operator[](int <db:emphasis>i</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d-3">
<db:title>bool QBitArray::operator[](uint <db:emphasis>i</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-5e-eq">
<db:title>QBitArray &amp;QBitArray::operator^=(const QBitArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Performs the XOR operation between all bits in this bit array and <db:code role="parameter">other</db:code>. Assigns the result to this bit array, and returns a reference to it.</db:para>
<db:para>The result has the length of the longest of the two bit arrays, with any missing bits (if one array is shorter than the other) taken to be 0.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b(2);
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b[0] = 1; b[1] = 0;             // b: [ 1, 1 ]
a ^= b;                         // a: [ 0, 1, 1 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-5e">operator^</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7c-eq">operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7e">operator~</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c-eq">
<db:title>QBitArray &amp;QBitArray::operator|=(const QBitArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Performs the OR operation between all bits in this bit array and <db:code role="parameter">other</db:code>. Assigns the result to this bit array, and returns a reference to it.</db:para>
<db:para>The result has the length of the longest of the two bit arrays, with any missing bits (if one array is shorter than the other) taken to be 0.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b(2);
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b[0] = 1; b[1] = 0;             // b: [ 1, 1 ]
a |= b;                         // a: [ 1, 1, 1 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-5e-eq">operator^=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7e">operator~</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7e">
<db:title>QBitArray QBitArray::operator~() const</db:title>
<db:para>Returns a bit array that contains the inverted bits of this bit array.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b;
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b = ~a;                         // b: [ 0, 1, 0 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-5e">operator^</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-and">
<db:title>QBitArray operator&amp;(const QBitArray &amp;<db:emphasis>a1</db:emphasis>, const QBitArray &amp;<db:emphasis>a2</db:emphasis>)</db:title>
<db:para>Returns a bit array that is the AND of the bit arrays <db:code role="parameter">a1</db:code> and <db:code role="parameter">a2</db:code>.</db:para>
<db:para>The result has the length of the longest of the two bit arrays, with any missing bits (if one array is shorter than the other) taken to be 0.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b(2);
QBitArray c;
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b[0] = 1; b[1] = 0;             // b: [ 1, 1 ]
c = a &amp; b;                      // c: [ 1, 0, 0 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-and-eq">QBitArray::operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-5e">operator^</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QBitArray &amp;<db:emphasis>ba</db:emphasis>)</db:title>
<db:para>Writes bit array <db:code role="parameter">ba</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QBitArray &amp;<db:emphasis>ba</db:emphasis>)</db:title>
<db:para>Reads a bit array into <db:code role="parameter">ba</db:code> from stream <db:code role="parameter">in</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5e">
<db:title>QBitArray operator^(const QBitArray &amp;<db:emphasis>a1</db:emphasis>, const QBitArray &amp;<db:emphasis>a2</db:emphasis>)</db:title>
<db:para>Returns a bit array that is the XOR of the bit arrays <db:code role="parameter">a1</db:code> and <db:code role="parameter">a2</db:code>.</db:para>
<db:para>The result has the length of the longest of the two bit arrays, with any missing bits (if one array is shorter than the other) taken to be 0.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b(2);
QBitArray c;
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b[0] = 1; b[1] = 0;             // b: [ 1, 1 ]
c = a ^ b;                      // c: [ 0, 1, 1 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-5e-eq">QBitArray::operator^=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-7c">operator|</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c">
<db:title>QBitArray operator|(const QBitArray &amp;<db:emphasis>a1</db:emphasis>, const QBitArray &amp;<db:emphasis>a2</db:emphasis>)</db:title>
<db:para>Returns a bit array that is the OR of the bit arrays <db:code role="parameter">a1</db:code> and <db:code role="parameter">a2</db:code>.</db:para>
<db:para>The result has the length of the longest of the two bit arrays, with any missing bits (if one array is shorter than the other) taken to be 0.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QBitArray a(3);
QBitArray b(2);
QBitArray c;
a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]
b[0] = 1; b[1] = 0;             // b: [ 1, 1 ]
c = a | b;                      // c: [ 1, 1, 1 ]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbitarray.xml#operator-7c-eq">QBitArray::operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qbitarray.xml#operator-5e">operator^</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
