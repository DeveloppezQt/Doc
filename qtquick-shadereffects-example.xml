<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Shader Effects</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt Quick example demonstrating the use of shader effects.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-shadereffects-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates a couple of visual effects that you can perform with shaders in Qt Quick. It applies five different effects on a text and a couple of images. For more information, visit <db:link xlink:href="qtquick-effects-topic.xml">Important Concepts In Qt Quick - Graphical Effects</db:link></db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="using-shadereffect">
<db:title>Using ShaderEffect</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> type typically operates on other types, using a <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link>:</db:para>
<db:programlisting language="qml">ShaderEffectSource {
    id: theSource
    sourceItem: theItem
}
</db:programlisting>
<db:para>In the above snippet, <db:code>theItem</db:code> is the ID of a complex QML object in the file.</db:para>
<db:para>ShaderEffects can use this <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> as a texture in their fragment shader:</db:para>
<db:programlisting language="qml">fragmentShader: &quot;qrc:shadereffects/content/shaders/wobble.frag&quot;
</db:programlisting>
<db:para>In order to support multiple graphics APIs, not just OpenGL, the shader source is not embedded into QML. When running with the graphics API independent scene graph, the actual file in use is a pre-generated shader pack containing multiple variants of the shader code. The appropriate shader is then chosen by Qt Quick, regardless of running on Vulkan, Metal, Direct 3D, or OpenGL. Qt automatically selects the file under the <db:code>qsb</db:code> selector, for example <db:code>shaders/+qsb/wobble.frag</db:code>, when present.</db:para>
<db:para>On the traditional code path, which can mean using OpenGL or Direct3D 12, file selectors are used to select the correct variant at runtime. Based on the Qt Quick backend in use, Qt will automatically select either <db:code>shaders/wobble.frag</db:code> with the GLSL source code or <db:code>shaders/+hlsl/wobble.frag</db:code> with the HLSL source code.</db:para>
<db:note>
<db:para>For simplicity shader source code is used in all variants of the files. However, with the Direct3D backend of Qt Quick pre-compiled shaders are also supported. For example, try the following commands in the <db:code>content/shaders/+hlsl</db:code> directory: <db:code>move wobble.frag wobble.frag.src</db:code> followed by <db:code>fxc /E main /T ps_5_0 /Fo wobble.frag wobble.frag.src</db:code>. Now <db:code>wobble.frag</db:code> contains Direct3D bytecode and that is what gets shipped with the application instead of the shader source. Further changes are not necessary, the application will function like before.</db:para>
</db:note>
<db:para>You can use any custom property on the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> in your shader. This makes animated shader code very easy:</db:para>
<db:programlisting language="qml">property variant source: theSource
property real bend: 0
property real minimize: 0
property real side: genieSlider.value
SequentialAnimation on bend {
    loops: Animation.Infinite
    NumberAnimation { to: 1; duration: 700; easing.type: Easing.InOutSine }
    PauseAnimation { duration: 1600 }
    NumberAnimation { to: 0; duration: 700; easing.type: Easing.InOutSine }
    PauseAnimation { duration: 1000 }
}
SequentialAnimation on minimize {
    loops: Animation.Infinite
    PauseAnimation { duration: 300 }
    NumberAnimation { to: 1; duration: 700; easing.type: Easing.InOutSine }
    PauseAnimation { duration: 1000 }
    NumberAnimation { to: 0; duration: 700; easing.type: Easing.InOutSine }
    PauseAnimation { duration: 1300 }
}
</db:programlisting>
<db:para>ShaderEffects can also have a custom vertext shader. Setting the mesh property on <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> provides more vertices for you to manipulate, enabling more effects.</db:para>
<db:programlisting language="qml">mesh: Qt.size(10, 10)
vertexShader: &quot;qrc:shadereffects/content/shaders/genie.vert&quot;
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/shadereffects?h=5.14">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
