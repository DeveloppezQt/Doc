<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWaitFence Class</db:title>
<db:subtitle>Qt3DRender::QWaitFence</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qml-qt3d-render-framegraphnode.xml">FrameGraphNode</db:link> used to wait for a fence in the graphics command stream to become signaled.</db:para>
<db:para>This class was introduced in Qt 5.13.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWaitFence</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.13</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3drender)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3drender)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qframegraphnode.xml" xlink:role="class">Qt3DRender::QFrameGraphNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Fence allow to synchronosize GPU and CPU workloads. GPU commands usually are non-blocking. When issued, commands are inserted in command buffers which will be read at a later time by the GPU. In some cases, you want to continue processing or issue specific command only when you are sure a command has been executed by the hardware. Fences are a way to do so. This is especially important when using 3rd party engines with Qt3D, Qt3D should only access shared resources when we know the other engine command are done modifying the resource.</db:para>
<db:para><db:link xlink:href="qt3drender-qwaitfence.xml">QWaitFence</db:link> is a FrameGraph node that will force to wait for it to become signaled before subsequent commands are inserted into the command stream. It can then be used in conjunction with <db:link xlink:href="qt3drender-qsetfence.xml">QSetFence</db:link> and contains properties to configure how long it should wait and whether it should block on the CPU side.</db:para>
<db:note>
<db:para>Qt 3D uploads GPU resources (Texture, Shaders, Buffers) before issuing draw calls.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="handle-prop">
<db:title>handle : QVariant</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVariant</db:type>
<db:varname>handle</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">handle</db:synopsisinfo>
<db:synopsisinfo role="setter">setHandle</db:synopsisinfo>
<db:synopsisinfo role="notifier">handleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the underlying fence handle wrapped in a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvariant.xml">QVariant</db:link></db:type> <db:emphasis role="bold">handle</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHandle</db:emphasis>(<db:type><db:link xlink:href="qvariant.xml">QVariant</db:link></db:type> <db:emphasis>handle</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">handleChanged</db:emphasis>(<db:type><db:link xlink:href="qvariant.xml">QVariant</db:link></db:type> <db:emphasis>handle</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="handleType-prop">
<db:title>handleType : HandleType</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>HandleType</db:type>
<db:varname>handleType</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">handleType</db:synopsisinfo>
<db:synopsisinfo role="setter">setHandleType</db:synopsisinfo>
<db:synopsisinfo role="notifier">handleTypeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies the type of handle being used. Currently only OpenGL Fence ids are supported.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>Qt3DRender::QWaitFence::HandleType</db:type> <db:emphasis role="bold">handleType</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHandleType</db:emphasis>(<db:type>Qt3DRender::QWaitFence::HandleType</db:type> <db:emphasis>type</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">handleTypeChanged</db:emphasis>(<db:type>Qt3DRender::QWaitFence::HandleType</db:type> <db:emphasis>handleType</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="timeout-prop">
<db:title>timeout : quint64</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>quint64</db:type>
<db:varname>timeout</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">timeout</db:synopsisinfo>
<db:synopsisinfo role="setter">setTimeout</db:synopsisinfo>
<db:synopsisinfo role="notifier">timeoutChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies the maximum amount of time in nanoseconds to wait for the fence to become signaled.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#quint64-typedef">quint64</db:link></db:type> <db:emphasis role="bold">timeout</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTimeout</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#quint64-typedef">quint64</db:link></db:type> <db:emphasis>timeout</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">timeoutChanged</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#quint64-typedef">quint64</db:link></db:type> <db:emphasis>timeoutChanged</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="waitOnCPU-prop">
<db:title>waitOnCPU : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>waitOnCPU</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">waitOnCPU</db:synopsisinfo>
<db:synopsisinfo role="setter">setWaitOnCPU</db:synopsisinfo>
<db:synopsisinfo role="notifier">waitOnCPUChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies whether the CPU should be block while waiting for the fence to become signaled. This is false by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">waitOnCPU</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWaitOnCPU</db:emphasis>(<db:type>bool</db:type> <db:emphasis>waitOnCPU</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">waitOnCPUChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>waitOnCPU</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:article>
