<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QtAssert&gt;</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="q_check_ptr">
<db:title>T *q_check_ptr(T *<db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>T *</db:type>
<db:methodname>q_check_ptr</db:methodname>
<db:methodparam>
<db:type>T *</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * q_check_ptr(T *p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Uses <db:link xlink:href="qtassert-proxy.xml#Q_CHECK_PTRx">Q_CHECK_PTR</db:link> on <db:code role="parameter">p</db:code>, then returns <db:code role="parameter">p</db:code>.</db:para>
<db:para>This can be used as an inline version of <db:link xlink:href="qtassert-proxy.xml#Q_CHECK_PTRx">Q_CHECK_PTR</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_ASSERT">
<db:title>void Q_ASSERT(bool <db:emphasis>test</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_ASSERT</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>test</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">void Q_ASSERT(bool test)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Prints a warning message containing the source code file name and line number if <db:code role="parameter">test</db:code> is false.</db:para>
<db:para>Q_ASSERT() is useful for testing pre- and post-conditions during development. It does nothing if QT_NO_DEBUG was defined during compilation.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">// File: div.cpp

#include &amp;lt;QtGlobal&amp;gt;

int divide(int a, int b)
{
    Q_ASSERT(b != 0);
    return a / b;
}
</db:programlisting>
<db:para>If b is zero, the Q_ASSERT statement will output the following message using the <db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>() function:</db:para>
<db:programlisting language="cpp">ASSERT: &quot;b != 0&quot; in file div.cpp, line 7
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtassert-proxy.xml#Q_ASSERT_X">Q_ASSERT_X</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="debug.xml">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_ASSERT_X">
<db:title>void Q_ASSERT_X(bool <db:emphasis>test</db:emphasis>, const char *<db:emphasis>where</db:emphasis>, const char *<db:emphasis>what</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_ASSERT_X</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>test</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>where</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>what</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">void Q_ASSERT_X(bool test, const char *where, const char *what)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Prints the message <db:code role="parameter">what</db:code> together with the location <db:code role="parameter">where</db:code>, the source file name and line number if <db:code role="parameter">test</db:code> is false.</db:para>
<db:para>Q_ASSERT_X is useful for testing pre- and post-conditions during development. It does nothing if QT_NO_DEBUG was defined during compilation.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">// File: div.cpp

#include &amp;lt;QtGlobal&amp;gt;

int divide(int a, int b)
{
    Q_ASSERT_X(b != 0, &quot;divide&quot;, &quot;division by zero&quot;);
    return a / b;
}
</db:programlisting>
<db:para>If b is zero, the Q_ASSERT_X statement will output the following message using the <db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>() function:</db:para>
<db:programlisting language="cpp">ASSERT failure in divide: &quot;division by zero&quot;, file div.cpp, line 7
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtassert-proxy.xml#Q_ASSERT">Q_ASSERT</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="debug.xml">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_CHECK_PTRx">
<db:title>void Q_CHECK_PTR(void *<db:emphasis>pointer</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_CHECK_PTR</db:methodname>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>pointer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">void Q_CHECK_PTR(void *pointer)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">pointer</db:code> is nullptr, prints a message containing the source code's file name and line number, saying that the program ran out of memory and aborts program execution. It throws std::bad_alloc instead if exceptions are enabled.</db:para>
<db:para>Q_CHECK_PTR does nothing if QT_NO_DEBUG and QT_NO_EXCEPTIONS were defined during compilation. Therefore you must not use Q_CHECK_PTR to check for successful memory allocations because the check will be disabled in some cases.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int *a;

Q_CHECK_PTR(a = new int[80]);   // WRONG!

a = new (nothrow) int[80];      // Right
Q_CHECK_PTR(a);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtlogging.xml#qWarning">qWarning</db:link>()</db:member>
<db:member><db:link xlink:href="debug.xml">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_UNREACHABLE">
<db:title>void Q_UNREACHABLE</db:title>
<db:methodsynopsis>
<db:methodname>Q_UNREACHABLE</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">void Q_UNREACHABLE</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Tells the compiler that the current point cannot be reached by any execution, so it may optimize any code paths leading here as dead code, as well as code continuing from here.</db:para>
<db:para>This macro is useful to mark impossible conditions. For example, given the following enum:</db:para>
<db:programlisting language="cpp">   enum Shapes {
       Rectangle,
       Triangle,
       Circle,
       NumShapes
   };
</db:programlisting>
<db:para>One can write a switch table like so:</db:para>
<db:programlisting language="cpp">   switch (shape) {
       case Rectangle:
           return rectangle();
       case Triangle:
           return triangle();
       case Circle:
           return circle();
       case NumShapes:
           Q_UNREACHABLE();
           break;
   }
</db:programlisting>
<db:para>The advantage of inserting Q_UNREACHABLE() at that point is that the compiler is told not to generate code for a shape variable containing that value. If the macro is missing, the compiler will still generate the necessary comparisons for that value. If the case label were removed, some compilers could produce a warning that some enum values were not checked.</db:para>
<db:para>By using this macro in impossible conditions, code coverage may be improved as dead code paths may be eliminated.</db:para>
<db:para>In debug builds the condition is enforced by an assert to facilitate debugging.</db:para>
<db:note>
<db:para>Use the macro <db:link xlink:href="qtassert-proxy.xml#Q_UNREACHABLE_RETURN">Q_UNREACHABLE_RETURN</db:link>() to insert return statements for compilers that need them, without causing warnings for compilers that complain about its presence.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtassert-proxy.xml#Q_ASSERT">Q_ASSERT</db:link>()</db:member>
<db:member><db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>()</db:member>
<db:member><db:link xlink:href="qtassert-proxy.xml#Q_UNREACHABLE_RETURN">Q_UNREACHABLE_RETURN</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_UNREACHABLE_RETURN">
<db:title>[since 6.5] void Q_UNREACHABLE_RETURN(<db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_UNREACHABLE_RETURN</db:methodname>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">void Q_UNREACHABLE_RETURN(...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is equivalent to</db:para>
<db:programlisting language="cpp">Q_UNREACHABLE();
return __VA_ARGS__;
</db:programlisting>
<db:para>except it omits the return on compilers that would warn about it.</db:para>
<db:para>This macro was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtassert-proxy.xml#Q_UNREACHABLE">Q_UNREACHABLE</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
