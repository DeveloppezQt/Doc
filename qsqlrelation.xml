<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSqlRelation Class</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsqlrelation.xml">QSqlRelation</db:link> class stores information about an SQL foreign key.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSqlRelation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Sql)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Sql)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sql</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsqlrelation.xml">QSqlRelation</db:link> is a helper class for <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link>. See <db:link xlink:href="qsqlrelationaltablemodel.xml#setRelation">QSqlRelationalTableModel::setRelation</db:link>() and <db:link xlink:href="qsqlrelationaltablemodel.xml#relation">QSqlRelationalTableModel::relation</db:link>() for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link></db:member>
<db:member><db:link xlink:href="qsqlrelationaldelegate.xml">QSqlRelationalDelegate</db:link></db:member>
<db:member><db:link xlink:href="qtsql-relationaltablemodel-example.xml">Relational Table Model Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSqlRelation">
<db:title>QSqlRelation::QSqlRelation()</db:title>
<db:constructorsynopsis>
<db:methodname>QSqlRelation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlRelation()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an invalid <db:link xlink:href="qsqlrelation.xml">QSqlRelation</db:link> object.</db:para>
<db:para>For such an object, the <db:link xlink:href="qsqlrelation.xml#tableName">tableName</db:link>(), <db:link xlink:href="qsqlrelation.xml#indexColumn">indexColumn</db:link>(), and <db:link xlink:href="qsqlrelation.xml#displayColumn">displayColumn</db:link>() functions return an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrelation.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSqlRelation-1">
<db:title>QSqlRelation::QSqlRelation(const QString &amp;<db:emphasis>tableName</db:emphasis>, const QString &amp;<db:emphasis>indexColumn</db:emphasis>, const QString &amp;<db:emphasis>displayColumn</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSqlRelation</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>tableName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>indexColumn</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>displayColumn</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlRelation(const QString &amp;tableName, const QString &amp;indexColumn, const QString &amp;displayColumn)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsqlrelation.xml">QSqlRelation</db:link> object, where <db:code role="parameter">tableName</db:code> is the SQL table name to which a foreign key refers, <db:code role="parameter">indexColumn</db:code> is the foreign key, and <db:code role="parameter">displayColumn</db:code> is the field that should be presented to the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrelation.xml#tableName">tableName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrelation.xml#indexColumn">indexColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrelation.xml#displayColumn">displayColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="displayColumn">
<db:title>QString QSqlRelation::displayColumn() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>displayColumn</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString displayColumn() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the column from table <db:link xlink:href="qsqlrelation.xml#tableName">tableName</db:link>() that should be presented to the user instead of a foreign key.</db:para>
</db:section>
<db:section xml:id="indexColumn">
<db:title>QString QSqlRelation::indexColumn() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>indexColumn</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString indexColumn() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index column from table <db:link xlink:href="qsqlrelation.xml#tableName">tableName</db:link>() to which a foreign key refers.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QSqlRelation::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qsqlrelation.xml">QSqlRelation</db:link> object is valid; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>void QSqlRelation::swap(QSqlRelation &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QSqlRelation &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QSqlRelation &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps <db:code>this</db:code> with <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="tableName">
<db:title>QString QSqlRelation::tableName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>tableName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString tableName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the table to which a foreign key refers.</db:para>
</db:section>
</db:section>
</db:article>
