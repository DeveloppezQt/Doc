<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMultiMap Class</db:title>
<db:subtitle>template &lt;typename Key, typename T&gt; class QMultiMap</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> class is a convenience <db:link xlink:href="qmap.xml">QMap</db:link> subclass that provides multi-valued maps.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMultiMap</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmap.xml" xlink:role="class">QMap</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMultiMap is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmultimap.xml">QMultiMap</db:link>&lt;Key, T&gt; is one of Qt's generic <db:link xlink:href="containers.xml">container classes</db:link>. It inherits <db:link xlink:href="qmap.xml">QMap</db:link> and extends it with a few functions that make it able to store multi-valued maps. A multi-valued map is a map that allows multiple values with the same key; <db:link xlink:href="qmap.xml">QMap</db:link> doesn't allow that.</db:para>
<db:para>Because <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> inherits <db:link xlink:href="qmap.xml">QMap</db:link>, all of <db:link xlink:href="qmap.xml">QMap</db:link>'s functionality also applies to <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>. For example, you can use <db:link xlink:href="qmap.xml#isEmpty">isEmpty</db:link>() to test whether the map is empty, and you can traverse a <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> using <db:link xlink:href="qmap.xml">QMap</db:link>'s iterator classes (for example, <db:link xlink:href="qmapiterator.xml">QMapIterator</db:link>). But in addition, it provides an <db:link xlink:href="qmultimap.xml#insert">insert</db:link>() function that inserts but does not overwrite any previous value if the key already exists, and a <db:link xlink:href="qmultimap.xml#replace">replace</db:link>() function that corresponds which does overwite an existing value if they key is already in the map. It also provides convenient operator+() and operator+=().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QMultiMap&amp;lt;QString, int&amp;gt; map1, map2, map3;

map1.insert(&quot;plenty&quot;, 100);
map1.insert(&quot;plenty&quot;, 2000);
// map1.size() == 2

map2.insert(&quot;plenty&quot;, 5000);
// map2.size() == 1

map3 = map1 + map2;
// map3.size() == 3
</db:programlisting>
<db:para>Unlike <db:link xlink:href="qmap.xml">QMap</db:link>, <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> provides no operator[]. Use <db:link xlink:href="qmap.xml#value">value</db:link>() or <db:link xlink:href="qmultimap.xml#replace">replace</db:link>() if you want to access the most recently inserted item with a certain key.</db:para>
<db:para>If you want to retrieve all the values for a single key, you can use values(const Key &amp;key), which returns a <db:link xlink:href="qlist.xml">QList</db:link>&lt;T&gt;:</db:para>
<db:programlisting language="cpp">QList&amp;lt;int&amp;gt; values = map.values(&quot;plenty&quot;);
for (int i = 0; i &amp;lt; values.size(); ++i)
    cout &amp;lt;&amp;lt; values.at(i) &amp;lt;&amp;lt; Qt::endl;
</db:programlisting>
<db:para>The items that share the same key are available from most recently to least recently inserted.</db:para>
<db:para>If you prefer the STL-style iterators, you can call <db:link xlink:href="qmultimap.xml#find">find</db:link>() to get the iterator for the first item with a key and iterate from there:</db:para>
<db:programlisting language="cpp">QMultiMap&amp;lt;QString, int&amp;gt;::iterator i = map.find(&quot;plenty&quot;);
while (i != map.end() &amp;amp;&amp;amp; i.key() == &quot;plenty&quot;) {
    cout &amp;lt;&amp;lt; i.value() &amp;lt;&amp;lt; Qt::endl;
    ++i;
}
</db:programlisting>
<db:para><db:link xlink:href="qmultimap.xml">QMultiMap</db:link>'s key and value data types must be <db:link xlink:href="containers.xml#assignable-data-types">assignable data types</db:link>. This covers most data types you are likely to encounter, but the compiler won't let you, for example, store a <db:link xlink:href="qwidget.xml">QWidget</db:link> as a value; instead, store a <db:link xlink:href="qwidget.xml">QWidget</db:link> *. In addition, <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>'s key type must provide operator&lt;(). See the <db:link xlink:href="qmap.xml">QMap</db:link> documentation for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap.xml">QMap</db:link></db:member>
<db:member><db:link xlink:href="qmapiterator.xml">QMapIterator</db:link></db:member>
<db:member><db:link xlink:href="qmutablemapiterator.xml">QMutableMapIterator</db:link></db:member>
<db:member><db:link xlink:href="qmultihash.xml">QMultiHash</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMultiMap">
<db:title>QMultiMap::QMultiMap()</db:title>
<db:constructorsynopsis>
<db:methodname>QMultiMap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty map.</db:para>
</db:section>
<db:section xml:id="QMultiMap-1">
<db:title>[since 5.1] QMultiMap::QMultiMap(std::initializer_list&lt;std::pair&lt;Key, T&gt;&gt; <db:emphasis>list</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMultiMap</db:methodname>
<db:methodparam>
<db:type>std::initializer_list&lt;std::pair&lt;Key, T&gt;&gt;</db:type>
<db:parameter>list</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap(std::initializer_list&lt;std::pair&lt;Key, T&gt;&gt; list)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a multi-map with a copy of each of the elements in the initializer list <db:code role="parameter">list</db:code>.</db:para>
<db:para>This function is only available if the program is being compiled in C++11 mode.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="QMultiMap-2">
<db:title>QMultiMap::QMultiMap(const QMap&lt;Key, T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMultiMap</db:methodname>
<db:methodparam>
<db:type>const QMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap(const QMap&lt;Key, T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code> (which can be a <db:link xlink:href="qmap.xml">QMap</db:link> or a <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constFind">
<db:title>[since 4.3] typename QMap&lt;Key, T&gt;::const_iterator QMultiMap::constFind(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>typename QMap&lt;Key, T&gt;::const_iterator</db:type>
<db:methodname>constFind</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">typename QMap&lt;Key, T&gt;::const_iterator constFind(const Key &amp;key, const T &amp;value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an iterator pointing to the item with key <db:code role="parameter">key</db:code> and the value <db:code role="parameter">value</db:code> in the map.</db:para>
<db:para>If the map contains no such item, the function returns <db:link xlink:href="qmap.xml#constEnd">constEnd</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap.xml#constFind">QMap::constFind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>[since 4.3] bool QMultiMap::contains(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const Key &amp;key, const T &amp;value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the map contains an item with key <db:code role="parameter">key</db:code> and value <db:code role="parameter">value</db:code>; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap.xml#contains">QMap::contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>[since 4.3] int QMultiMap::count(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count(const Key &amp;key, const T &amp;value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of items with key <db:code role="parameter">key</db:code> and value <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap.xml#count-1">QMap::count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="find">
<db:title>[since 4.3] typename QMap&lt;Key, T&gt;::iterator QMultiMap::find(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>typename QMap&lt;Key, T&gt;::iterator</db:type>
<db:methodname>find</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">typename QMap&lt;Key, T&gt;::iterator find(const Key &amp;key, const T &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an iterator pointing to the item with key <db:code role="parameter">key</db:code> and value <db:code role="parameter">value</db:code> in the map.</db:para>
<db:para>If the map contains no such item, the function returns <db:link xlink:href="qmap.xml#end">end</db:link>().</db:para>
<db:para>If the map contains multiple items with key <db:code role="parameter">key</db:code>, this function returns an iterator that points to the most recently inserted value.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap.xml#find">QMap::find</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="find-1">
<db:title>[since 4.3] typename QMap&lt;Key, T&gt;::const_iterator QMultiMap::find(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>typename QMap&lt;Key, T&gt;::const_iterator</db:type>
<db:methodname>find</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">typename QMap&lt;Key, T&gt;::const_iterator find(const Key &amp;key, const T &amp;value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a const iterator pointing to the item with the given <db:code role="parameter">key</db:code> and <db:code role="parameter">value</db:code> in the map.</db:para>
<db:para>If the map contains no such item, the function returns <db:link xlink:href="qmap.xml#end">end</db:link>().</db:para>
<db:para>If the map contains multiple items with the specified <db:code role="parameter">key</db:code>, this function returns a const iterator that points to the most recently inserted value.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap.xml#find">QMap::find</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert">
<db:title>typename QMap&lt;Key, T&gt;::iterator QMultiMap::insert(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>typename QMap&lt;Key, T&gt;::iterator</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">typename QMap&lt;Key, T&gt;::iterator insert(const Key &amp;key, const T &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a new item with the key <db:code role="parameter">key</db:code> and a value of <db:code role="parameter">value</db:code>.</db:para>
<db:para>If there is already an item with the same key in the map, this function will simply create a new one. (This behavior is different from <db:link xlink:href="qmultimap.xml#replace">replace</db:link>(), which overwrites the value of an existing item.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert-1">
<db:title>[since 5.1] typename QMap&lt;Key, T&gt;::iterator QMultiMap::insert(typename QMap&lt;Key, T&gt;::const_iterator <db:emphasis>pos</db:emphasis>, const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>typename QMap&lt;Key, T&gt;::iterator</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>typename QMap&lt;Key, T&gt;::const_iterator</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">typename QMap&lt;Key, T&gt;::iterator insert(typename QMap&lt;Key, T&gt;::const_iterator pos, const Key &amp;key, const T &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a new item with the key <db:code role="parameter">key</db:code> and value <db:code role="parameter">value</db:code> and with hint <db:code role="parameter">pos</db:code> suggesting where to do the insert.</db:para>
<db:para>If <db:link xlink:href="qmap.xml#constBegin">constBegin</db:link>() is used as hint it indicates that the <db:code role="parameter">key</db:code> is less than any key in the map while <db:link xlink:href="qmap.xml#constEnd">constEnd</db:link>() suggests that the <db:code role="parameter">key</db:code> is larger than any key in the map. Otherwise the hint should meet the condition (<db:code role="parameter">pos</db:code> - 1).<db:link xlink:href="qmap.xml#key">key</db:link>() &lt; <db:code role="parameter">key</db:code> &lt;= pos.<db:link xlink:href="qmap.xml#key">key</db:link>(). If the hint <db:code role="parameter">pos</db:code> is wrong it is ignored and a regular insert is done.</db:para>
<db:para>If there is already an item with the same key in the map, this function will simply create a new one.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Be careful with the hint. Providing an iterator from an older shared instance might crash but there is also a risk that it will silently corrupt both the map and the <db:code role="parameter">pos</db:code> map.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>[since 4.3] int QMultiMap::remove(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int remove(const Key &amp;key, const T &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all the items that have the key <db:code role="parameter">key</db:code> and the value <db:code role="parameter">value</db:code> from the map. Returns the number of items removed.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap.xml#remove">QMap::remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace">
<db:title>typename QMap&lt;Key, T&gt;::iterator QMultiMap::replace(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>typename QMap&lt;Key, T&gt;::iterator</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">typename QMap&lt;Key, T&gt;::iterator replace(const Key &amp;key, const T &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a new item with the key <db:code role="parameter">key</db:code> and a value of <db:code role="parameter">value</db:code>.</db:para>
<db:para>If there is already an item with the key <db:code role="parameter">key</db:code>, that item's value is replaced with <db:code role="parameter">value</db:code>.</db:para>
<db:para>If there are multiple items with the key <db:code role="parameter">key</db:code>, the most recently inserted item's value is replaced with <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 4.8] void QMultiMap::swap(QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QMultiMap&lt;Key, T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps map <db:code role="parameter">other</db:code> with this map. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="uniqueKeys">
<db:title>[since 4.2] QList&lt;Key&gt; QMultiMap::uniqueKeys() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;Key&gt;</db:type>
<db:methodname>uniqueKeys</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;Key&gt; uniqueKeys() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list containing all the keys in the map in ascending order. Keys that occur multiple times in the map occur only once in the returned list.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="unite">
<db:title>QMultiMap&lt;K, V&gt; &amp;QMultiMap::unite(const QMultiMap&lt;K, V&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap&lt;K, V&gt; &amp;</db:type>
<db:methodname>unite</db:methodname>
<db:methodparam>
<db:type>const QMultiMap&lt;K, V&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap&lt;K, V&gt; &amp; unite(const QMultiMap&lt;K, V&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts all the items in the <db:code role="parameter">other</db:code> map into this map. If a key is common to both maps, the resulting map will contain the key multiple times.</db:para>
</db:section>
<db:section xml:id="values">
<db:title>QList&lt;T&gt; QMultiMap::values(const Key &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;T&gt;</db:type>
<db:methodname>values</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;T&gt; values(const Key &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list containing all the values associated with key <db:code role="parameter">key</db:code>, from the most recently inserted to the least recently inserted one.</db:para>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QMultiMap&lt;K, V&gt; QMultiMap::operator+(const QMultiMap&lt;K, V&gt; &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap&lt;K, V&gt;</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>const QMultiMap&lt;K, V&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap&lt;K, V&gt; operator+(const QMultiMap&lt;K, V&gt; &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a map that contains all the items in this map in addition to all the items in <db:code role="parameter">other</db:code>. If a key is common to both maps, the resulting map will contain the key multiple times.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QMultiMap&lt;K, V&gt; &amp;QMultiMap::operator+=(const QMultiMap&lt;K, V&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap&lt;K, V&gt; &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>const QMultiMap&lt;K, V&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap&lt;K, V&gt; &amp; operator+=(const QMultiMap&lt;K, V&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts all the items in the <db:code role="parameter">other</db:code> map into this map and returns a reference to this map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
