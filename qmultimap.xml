<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMultiMap Class</db:title>
<db:subtitle>template &lt;typename Key, typename T&gt; class QMultiMap</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> class is a template class that provides an associative array with multiple equivalent keys.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMultiMap</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMultiMap is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmultimap.xml">QMultiMap</db:link>&lt;Key, T&gt; is one of Qt's generic <db:link xlink:href="containers.xml">container classes</db:link>. It stores (key, value) pairs and provides fast lookup by key.</db:para>
<db:para><db:link xlink:href="qmultimap.xml">QMultiMap</db:link> and <db:link xlink:href="qmultihash.xml">QMultiHash</db:link> provide very similar functionality. The differences are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmultihash.xml">QMultiHash</db:link> provides average faster lookups than <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>. (See <db:link xlink:href="containers.xml#algorithmic-complexity">Algorithmic Complexity</db:link> for details.)</db:para>
</db:listitem>
<db:listitem>
<db:para>When iterating over a <db:link xlink:href="qmultihash.xml">QMultiHash</db:link>, the items are arbitrarily ordered. With <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>, the items are always sorted by key.</db:para>
</db:listitem>
<db:listitem>
<db:para>The key type of a <db:link xlink:href="qmultihash.xml">QMultiHash</db:link> must provide operator==() and a global <db:link xlink:href="qhash.xml#qhash">qHash</db:link>(Key) function. The key type of a <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> must provide operator&lt;() specifying a total order. Since Qt 5.8.1 it is also safe to use a pointer type as key, even if the underlying operator&lt;() does not provide a total order.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Here's an example <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> with <db:link xlink:href="qstring.xml">QString</db:link> keys and int values:</db:para>
<db:programlisting language="cpp">QMultiMap&amp;lt;QString, int&amp;gt; multimap;
</db:programlisting>
<db:para>To insert a (key, value) pair into the multi map, you can use <db:link xlink:href="qmultimap.xml#insert">insert</db:link>():</db:para>
<db:programlisting language="cpp">multimap.insert(&quot;a&quot;, 1);
multimap.insert(&quot;b&quot;, 3);
multimap.insert(&quot;c&quot;, 7);
multimap.insert(&quot;c&quot;, -5);
</db:programlisting>
<db:para>This inserts the following three (key, value) pairs into the <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>: (&quot;a&quot;, 1), (&quot;b&quot;, 3), (&quot;c&quot;, 7), and (&quot;c&quot;, -5); note that duplicate keys are allowed.</db:para>
<db:para>To look up a value, use <db:link xlink:href="qmultimap.xml#find">find</db:link>() or <db:link xlink:href="qmultimap.xml#value">value</db:link>():</db:para>
<db:programlisting language="cpp">int num2 = multimap.value(&quot;a&quot;); // 1
int num3 = multimap.value(&quot;thirteen&quot;); // not found; 0
int num3 = 0;
auto it = multimap.value(&quot;b&quot;);
if (it != multimap.end()) {
    num3 = it.value();
}
</db:programlisting>
<db:para>If there is no item with the specified key in the map, these functions return a <db:link xlink:href="containers.xml#default-constructed-value">default-constructed value</db:link>.</db:para>
<db:para>If you want to check whether the map contains a certain key, use <db:link xlink:href="qmultimap.xml#contains">contains</db:link>():</db:para>
<db:programlisting language="cpp">int timeout = 30;
if (multimap.contains(&quot;TIMEOUT&quot;))
    timeout = multimap.value(&quot;TIMEOUT&quot;);

// better:
auto it = multimap.find(&quot;TIMEOUT&quot;);
if (it != multimap.end())
    timeout = it.value();
</db:programlisting>
<db:para>There is also a <db:link xlink:href="qmultimap.xml#value">value</db:link>() overload that uses its second argument as a default value if there is no item with the specified key:</db:para>
<db:programlisting language="cpp">int timeout = multimap.value(&quot;TIMEOUT&quot;, 30);
</db:programlisting>
<db:para>If you want to navigate through all the (key, value) pairs stored in a <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>, you can use an iterator. <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> provides both <db:link xlink:href="java-style-iterators.xml#java-style-iterators">Java-style iterators</db:link> (<db:link xlink:href="qmultimapiterator.xml">QMultiMapIterator</db:link> and <db:link xlink:href="qmutablemultimapiterator.xml">QMutableMultiMapIterator</db:link>) and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> (<db:link xlink:href="qmultimap-const-iterator.xml">QMultiMap::const_iterator</db:link> and <db:link xlink:href="qmultimap-iterator.xml">QMultiMap::iterator</db:link>). Here's how to iterate over a <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>, int&gt; using a Java-style iterator:</db:para>
<db:programlisting language="cpp">QMultiMapIterator&amp;lt;QString, int&amp;gt; i(multimap);
while (i.hasNext()) {
    i.next();
    cout &amp;lt;&amp;lt; i.key() &amp;lt;&amp;lt; &quot;: &quot; &amp;lt;&amp;lt; i.value() &amp;lt;&amp;lt; Qt::endl;
}
</db:programlisting>
<db:para>Here's the same code, but using an STL-style iterator this time:</db:para>
<db:programlisting language="cpp">auto i = multimap.constBegin();
while (i != multimap.constEnd()) {
    cout &amp;lt;&amp;lt; i.key() &amp;lt;&amp;lt; &quot;: &quot; &amp;lt;&amp;lt; i.value() &amp;lt;&amp;lt; Qt::endl;
    ++i;
}
</db:programlisting>
<db:para>The items are traversed in ascending key order.</db:para>
<db:para>A <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> allows multiple values per key. If you call <db:link xlink:href="qmultimap.xml#insert">insert</db:link>() with a key that already exists in the map, a new (key, value) pair will be inserted. For example:</db:para>
<db:programlisting language="cpp">multimap.insert(&quot;plenty&quot;, 100);
multimap.insert(&quot;plenty&quot;, 2000);
// multimap.size() == 2
</db:programlisting>
<db:para>If you want to retrieve all the values for a single key, you can use values(const Key &amp;key), which returns a <db:link xlink:href="qlist.xml">QList</db:link>&lt;T&gt;:</db:para>
<db:programlisting language="cpp">QList&amp;lt;int&amp;gt; values = multimap.values(&quot;plenty&quot;);
for (int i = 0; i &amp;lt; values.size(); ++i)
    cout &amp;lt;&amp;lt; values.at(i) &amp;lt;&amp;lt; Qt::endl;
</db:programlisting>
<db:para>The items that share the same key are available from most recently to least recently inserted. Another approach is to call <db:link xlink:href="qmultimap.xml#find">find</db:link>() to get the STL-style iterator for the first item with a key and iterate from there:</db:para>
<db:programlisting language="cpp">QMultiMap&amp;lt;QString, int&amp;gt;::iterator i = multimap.find(&quot;plenty&quot;);
while (i != map.end() &amp;amp;&amp;amp; i.key() == &quot;plenty&quot;) {
    cout &amp;lt;&amp;lt; i.value() &amp;lt;&amp;lt; Qt::endl;
    ++i;
}

// better:
auto [i, end] = multimap.equal_range(&quot;plenty&quot;);
while (i != end) {
    cout &amp;lt;&amp;lt; i.value() &amp;lt;&amp;lt; Qt::endl;
    ++i;
}
</db:programlisting>
<db:para>If you only need to extract the values from a map (not the keys), you can also use <db:link xlink:href="containers.xml#foreach">foreach</db:link>:</db:para>
<db:programlisting language="cpp">QMap&amp;lt;QString, int&amp;gt; multimap;
...
foreach (int value, multimap)
    cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; Qt::endl;
</db:programlisting>
<db:para>Items can be removed from the multi map in several ways. One way is to call <db:link xlink:href="qmultimap.xml#remove">remove</db:link>(); this will remove any item with the given key. Another way is to use <db:link xlink:href="qmutablemultimapiterator.xml#remove">QMutableMultiMapIterator::remove</db:link>(). In addition, you can clear the entire map using <db:link xlink:href="qmultimap.xml#clear">clear</db:link>().</db:para>
<db:para>It is possible to merge two multi maps by calling <db:link xlink:href="qmultimap.xml#unite">unite</db:link>(), by using operator+(), and by using operator+=(). Example:</db:para>
<db:programlisting language="cpp">QMultiMap&amp;lt;QString, int&amp;gt; map1, map2, map3;

map1.insert(&quot;plenty&quot;, 100);
map1.insert(&quot;plenty&quot;, 2000);
// map1.size() == 2

map2.insert(&quot;plenty&quot;, 5000);
// map2.size() == 1

map3 = map1 + map2;
// map3.size() == 3
</db:programlisting>
<db:para><db:link xlink:href="qmultimap.xml">QMultiMap</db:link>'s key and value data types must be <db:link xlink:href="containers.xml#assignable-data-types">assignable data types</db:link>. This covers most data types you are likely to encounter, but the compiler won't let you, for example, store a QWidget as a value; instead, store a QWidget *. In addition, <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>'s key type must provide operator&lt;(). <db:link xlink:href="qmap.xml">QMap</db:link> uses it to keep its items sorted, and assumes that two keys x and y are equal if neither x &lt; y nor y &lt; x is true.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">#ifndef EMPLOYEE_H
#define EMPLOYEE_H

class Employee
{
public:
    Employee() {}
    Employee(const QString &amp;amp;name, QDate dateOfBirth);
    ...

private:
    QString myName;
    QDate myDateOfBirth;
};

inline bool operator&amp;lt;(const Employee &amp;amp;e1, const Employee &amp;amp;e2)
{
    if (e1.name() != e2.name())
        return e1.name() &amp;lt; e2.name();
    return e1.dateOfBirth() &amp;lt; e2.dateOfBirth();
}

#endif // EMPLOYEE_H
</db:programlisting>
<db:para>In the example, we start by comparing the employees' names. If they're equal, we compare their dates of birth to break the tie.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimapiterator.xml">QMultiMapIterator</db:link></db:member>
<db:member><db:link xlink:href="qmutablemultimapiterator.xml">QMutableMultiMapIterator</db:link></db:member>
<db:member><db:link xlink:href="qmultihash.xml">QMultiHash</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ConstIterator-typedef">
<db:title>QMultiMap::ConstIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>ConstIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Qt-style synonym for <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>&lt;Key, T&gt;::const_iterator.</db:para>
</db:section>
<db:section xml:id="Iterator-typedef">
<db:title>QMultiMap::Iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>Iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Qt-style synonym for <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>&lt;Key, T&gt;::iterator.</db:para>
</db:section>
<db:section xml:id="const_key_value_iterator-typedef">
<db:title>[since 5.10] QMultiMap::const_key_value_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_key_value_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="module">QtCore</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QMultiMap::const_key_value_iterator typedef provides an STL-style iterator for <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>.</db:para>
<db:para>QMultiMap::const_key_value_iterator is essentially the same as <db:link xlink:href="qmultimap-const-iterator.xml">QMultiMap::const_iterator</db:link> with the difference that operator*() returns a key/value pair instead of a value.</db:para>
<db:para>This typedef was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeyvalueiterator.xml">QKeyValueIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="difference_type-typedef">
<db:title>[alias] QMultiMap::difference_type</db:title>
<db:typedefsynopsis>
<db:typedefname>difference_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for ptrdiff_t. Provided for STL compatibility.</db:para>
</db:section>
<db:section xml:id="key_type-typedef">
<db:title>[alias] QMultiMap::key_type</db:title>
<db:typedefsynopsis>
<db:typedefname>key_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for Key. Provided for STL compatibility.</db:para>
</db:section>
<db:section xml:id="key_value_iterator-typedef">
<db:title>[since 5.10] QMultiMap::key_value_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>key_value_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="module">QtCore</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QMultiMap::key_value_iterator typedef provides an STL-style iterator for <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>.</db:para>
<db:para>QMultiMap::key_value_iterator is essentially the same as <db:link xlink:href="qmultimap-iterator.xml">QMultiMap::iterator</db:link> with the difference that operator*() returns a key/value pair instead of a value.</db:para>
<db:para>This typedef was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeyvalueiterator.xml">QKeyValueIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapped_type-typedef">
<db:title>[alias] QMultiMap::mapped_type</db:title>
<db:typedefsynopsis>
<db:typedefname>mapped_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for T. Provided for STL compatibility.</db:para>
</db:section>
<db:section xml:id="size_type-typedef">
<db:title>[alias] QMultiMap::size_type</db:title>
<db:typedefsynopsis>
<db:typedefname>size_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for int. Provided for STL compatibility.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMultiMap">
<db:title>QMultiMap::QMultiMap()</db:title>
<db:constructorsynopsis>
<db:methodname>QMultiMap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty multi map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMultiMap-1">
<db:title>[since 5.1] QMultiMap::QMultiMap(std::initializer_list&lt;std::pair&lt;Key, T&gt;&gt; <db:emphasis>list</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMultiMap</db:methodname>
<db:methodparam>
<db:type>std::initializer_list&lt;std::pair&lt;Key, T&gt;&gt;</db:type>
<db:parameter>list</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap(std::initializer_list&lt;std::pair&lt;Key, T&gt;&gt; list)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a multi map with a copy of each of the elements in the initializer list <db:code role="parameter">list</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="QMultiMap-2">
<db:title>[explicit, since 6.0] QMultiMap::QMultiMap(const QMap&lt;Key, T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMultiMap</db:methodname>
<db:methodparam>
<db:type>const QMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap(const QMap&lt;Key, T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a multi map as a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="QMultiMap-3">
<db:title>[explicit, since 6.0] QMultiMap::QMultiMap(QMap&lt;Key, T&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMultiMap</db:methodname>
<db:methodparam>
<db:type>QMap&lt;Key, T&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap(QMap&lt;Key, T&gt; &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>If <db:code role="parameter">other</db:code> is shared, constructs a multi map as a copy of <db:code role="parameter">other</db:code>. Otherwise, constructs a multi map by moving the elements from <db:code role="parameter">other</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="QMultiMap-4">
<db:title>[explicit] QMultiMap::QMultiMap(const std::multimap&lt;Key, T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMultiMap</db:methodname>
<db:methodparam>
<db:type>const std::multimap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap(const std::multimap&lt;Key, T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#toStdMultiMap">toStdMultiMap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMultiMap-5">
<db:title>[explicit] QMultiMap::QMultiMap(std::multimap&lt;Key, T&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMultiMap</db:methodname>
<db:methodparam>
<db:type>std::multimap&lt;Key, T&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap(std::multimap&lt;Key, T&gt; &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a multi map by moving from <db:code role="parameter">other</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#toStdMultiMap">toStdMultiMap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMultiMap-6">
<db:title>[default, since 5.2] QMultiMap::QMultiMap(QMultiMap&lt;Key, T&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMultiMap</db:methodname>
<db:methodparam>
<db:type>QMultiMap&lt;Key, T&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap(QMultiMap&lt;Key, T&gt; &amp;&amp;other) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> instance, making it point at the same object that <db:code role="parameter">other</db:code> was pointing to.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="QMultiMap-7">
<db:title>[default] QMultiMap::QMultiMap(const QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMultiMap</db:methodname>
<db:methodparam>
<db:type>const QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap(const QMultiMap&lt;Key, T&gt; &amp;other) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>This operation occurs in <db:link xlink:href="containers.xml#constant-time">constant time</db:link>, because <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>. This makes returning a <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and this takes <db:link xlink:href="containers.xml#linear-time">linear time</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QMultiMap">
<db:title>[default] QMultiMap::~QMultiMap()</db:title>
<db:destructorsynopsis>
<db:methodname>~QMultiMap</db:methodname>
<db:void/>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMultiMap() = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the multi map. References to the values in the multi map, and all iterators over this multi map, become invalid.</db:para>
</db:section>
<db:section xml:id="begin">
<db:title>QMultiMap::iterator QMultiMap::begin()</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::iterator</db:type>
<db:methodname>begin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::iterator begin()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first item in the multi map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin-1">
<db:title>QMultiMap::const_iterator QMultiMap::begin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_iterator</db:type>
<db:methodname>begin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_iterator begin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="cbegin">
<db:title>[since 5.0] QMultiMap::const_iterator QMultiMap::cbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_iterator</db:type>
<db:methodname>cbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_iterator cbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first item in the multi map.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#cend">cend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cend">
<db:title>[since 5.0] QMultiMap::const_iterator QMultiMap::cend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_iterator</db:type>
<db:methodname>cend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_iterator cend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the imaginary item after the last item in the multi map.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QMultiMap::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all items from the multi map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constBegin">
<db:title>QMultiMap::const_iterator QMultiMap::constBegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_iterator</db:type>
<db:methodname>constBegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_iterator constBegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first item in the multi map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constEnd">
<db:title>QMultiMap::const_iterator QMultiMap::constEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_iterator</db:type>
<db:methodname>constEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_iterator constEnd() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the imaginary item after the last item in the multi map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constFind">
<db:title>QMultiMap::const_iterator QMultiMap::constFind(const Key &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_iterator</db:type>
<db:methodname>constFind</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_iterator constFind(const Key &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an const iterator pointing to the item with key <db:code role="parameter">key</db:code> in the multi map.</db:para>
<db:para>If the multi map contains no item with key <db:code role="parameter">key</db:code>, the function returns <db:link xlink:href="qmultimap.xml#constEnd">constEnd</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#find">find</db:link>()</db:member>
<db:member><db:link xlink:href="">QMultiMap::constFind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constFind-1">
<db:title>QMultiMap::const_iterator QMultiMap::constFind(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_iterator</db:type>
<db:methodname>constFind</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_iterator constFind(const Key &amp;key, const T &amp;value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an iterator pointing to the item with key <db:code role="parameter">key</db:code> and the value <db:code role="parameter">value</db:code> in the map.</db:para>
<db:para>If the map contains no such item, the function returns <db:link xlink:href="qmultimap.xml#constEnd">constEnd</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap.xml#constFind">QMap::constFind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constKeyValueBegin">
<db:title>[since 5.10] QMultiMap::const_key_value_iterator QMultiMap::constKeyValueBegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_key_value_iterator</db:type>
<db:methodname>constKeyValueBegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_key_value_iterator constKeyValueBegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first entry in the multi map.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#keyValueBegin">keyValueBegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constKeyValueEnd">
<db:title>[since 5.10] QMultiMap::const_key_value_iterator QMultiMap::constKeyValueEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_key_value_iterator</db:type>
<db:methodname>constKeyValueEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_key_value_iterator constKeyValueEnd() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the imaginary entry after the last entry in the multi map.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#constKeyValueBegin">constKeyValueBegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QMultiMap::contains(const Key &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const Key &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the multi map contains an item with key <db:code role="parameter">key</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#count-2">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-1">
<db:title>bool QMultiMap::contains(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const Key &amp;key, const T &amp;value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the multi map contains an item with key <db:code role="parameter">key</db:code> and value <db:code role="parameter">value</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#count-2">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>QMultiMap::size_type QMultiMap::count(const Key &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::size_type</db:type>
<db:methodname>count</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::size_type count(const Key &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of items associated with key <db:code role="parameter">key</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#count-2">QMultiMap::count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-1">
<db:title>QMultiMap::size_type QMultiMap::count(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::size_type</db:type>
<db:methodname>count</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::size_type count(const Key &amp;key, const T &amp;value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of items with key <db:code role="parameter">key</db:code> and value <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#count-2">QMultiMap::count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-2">
<db:title>QMultiMap::size_type QMultiMap::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::size_type</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::size_type count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Same as <db:link xlink:href="qmultimap.xml#size">size</db:link>().</db:para>
</db:section>
<db:section xml:id="empty">
<db:title>bool QMultiMap::empty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>empty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool empty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is provided for STL compatibility. It is equivalent to <db:link xlink:href="qmultimap.xml#isEmpty">isEmpty</db:link>(), returning true if the map is empty; otherwise returning false.</db:para>
</db:section>
<db:section xml:id="end">
<db:title>QMultiMap::iterator QMultiMap::end()</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::iterator</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::iterator end()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the imaginary item after the last item in the multi map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end-1">
<db:title>QMultiMap::const_iterator QMultiMap::end() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_iterator</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_iterator end() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="equal_range">
<db:title>QPair&lt;QMultiMap::iterator, QMultiMap::iterator&gt; QMultiMap::equal_range(const Key &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPair&lt;QMultiMap::iterator, QMultiMap::iterator&gt;</db:type>
<db:methodname>equal_range</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair&lt;QMultiMap::iterator, QMultiMap::iterator&gt; equal_range(const Key &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pair of iterators delimiting the range of values [first, second), that are stored under <db:code role="parameter">key</db:code>.</db:para>
</db:section>
<db:section xml:id="equal_range-1">
<db:title>[since 5.6] QPair&lt;QMultiMap::const_iterator, QMultiMap::const_iterator&gt; QMultiMap::equal_range(const Key &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPair&lt;QMultiMap::const_iterator, QMultiMap::const_iterator&gt;</db:type>
<db:methodname>equal_range</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair&lt;QMultiMap::const_iterator, QMultiMap::const_iterator&gt; equal_range(const Key &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="erase">
<db:title>QMultiMap::iterator QMultiMap::erase(QMultiMap::const_iterator <db:emphasis>pos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::iterator</db:type>
<db:methodname>erase</db:methodname>
<db:methodparam>
<db:type>QMultiMap::const_iterator</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::iterator erase(QMultiMap::const_iterator pos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the (key, value) pair pointed to by the iterator <db:code role="parameter">pos</db:code> from the multi map, and returns an iterator to the next item in the map.</db:para>
<db:note>
<db:para>The iterator <db:code role="parameter">pos</db:code> must be valid and dereferenceable.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="erase-1">
<db:title>[since 6.0] QMultiMap::iterator QMultiMap::erase(QMultiMap::const_iterator <db:emphasis>first</db:emphasis>, QMultiMap::const_iterator <db:emphasis>last</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::iterator</db:type>
<db:methodname>erase</db:methodname>
<db:methodparam>
<db:type>QMultiMap::const_iterator</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMultiMap::const_iterator</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::iterator erase(QMultiMap::const_iterator first, QMultiMap::const_iterator last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the (key, value) pairs pointed to by the iterator range [<db:code role="parameter">first</db:code>, <db:code role="parameter">last</db:code>) from the multi map. Returns an iterator to the item in the multi map following the last removed element.</db:para>
<db:note>
<db:para>The range [first, last) <db:emphasis>must</db:emphasis> be a valid range in *this.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="find">
<db:title>QMultiMap::iterator QMultiMap::find(const Key &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::iterator</db:type>
<db:methodname>find</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::iterator find(const Key &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an iterator pointing to the item with key <db:code role="parameter">key</db:code> in the multi map.</db:para>
<db:para>If the multi map contains no item with key <db:code role="parameter">key</db:code>, the function returns <db:link xlink:href="qmultimap.xml#end">end</db:link>().</db:para>
<db:para>If the map contains multiple items with key <db:code role="parameter">key</db:code>, this function returns an iterator that points to the most recently inserted value. The other values are accessible by incrementing the iterator. For example, here's some code that iterates over all the items with the same key:</db:para>
<db:programlisting language="cpp">QMultiMap&amp;lt;QString, int&amp;gt;::iterator i = multimap.find(&quot;plenty&quot;);
while (i != map.end() &amp;amp;&amp;amp; i.key() == &quot;plenty&quot;) {
    cout &amp;lt;&amp;lt; i.value() &amp;lt;&amp;lt; Qt::endl;
    ++i;
}

// better:
auto [i, end] = multimap.equal_range(&quot;plenty&quot;);
while (i != end) {
    cout &amp;lt;&amp;lt; i.value() &amp;lt;&amp;lt; Qt::endl;
    ++i;
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#constFind">constFind</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#values">values</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#lowerBound">lowerBound</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#upperBound">upperBound</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="find-1">
<db:title>QMultiMap::const_iterator QMultiMap::find(const Key &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_iterator</db:type>
<db:methodname>find</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_iterator find(const Key &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="find-3">
<db:title>QMultiMap::const_iterator QMultiMap::find(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_iterator</db:type>
<db:methodname>find</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_iterator find(const Key &amp;key, const T &amp;value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a const iterator pointing to the item with the given <db:code role="parameter">key</db:code> and <db:code role="parameter">value</db:code> in the map.</db:para>
<db:para>If the map contains no such item, the function returns <db:link xlink:href="qmultimap.xml#end">end</db:link>().</db:para>
<db:para>If the map contains multiple items with the specified <db:code role="parameter">key</db:code>, this function returns a const iterator that points to the most recently inserted value.</db:para>
</db:section>
<db:section xml:id="first">
<db:title>[since 5.2] T &amp;QMultiMap::first()</db:title>
<db:methodsynopsis>
<db:type>T &amp;</db:type>
<db:methodname>first</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; first()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the first value in the multi map, that is the value mapped to the smallest key. This function assumes that the multi map is not empty.</db:para>
<db:para>When unshared (or const version is called), this executes in <db:link xlink:href="containers.xml#constant-time">constant time</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#firstKey">firstKey</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="first-1">
<db:title>[since 5.2] const T &amp;QMultiMap::first() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const T &amp;</db:type>
<db:methodname>first</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const T &amp; first() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="firstKey">
<db:title>[since 5.2] const Key &amp;QMultiMap::firstKey() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const Key &amp;</db:type>
<db:methodname>firstKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const Key &amp; firstKey() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the smallest key in the multi map. This function assumes that the multi map is not empty.</db:para>
<db:para>This executes in <db:link xlink:href="containers.xml#constant-time">constant time</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#lastKey">lastKey</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#keyBegin">keyBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert">
<db:title>QMultiMap::iterator QMultiMap::insert(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::iterator</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::iterator insert(const Key &amp;key, const T &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a new item with the key <db:code role="parameter">key</db:code> and a value of <db:code role="parameter">value</db:code>.</db:para>
<db:para>If there is already an item with the same key in the map, this function will simply create a new one. (This behavior is different from <db:link xlink:href="qmultimap.xml#replace">replace</db:link>(), which overwrites the value of an existing item.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert-1">
<db:title>[since 5.1] QMultiMap::iterator QMultiMap::insert(QMultiMap::const_iterator <db:emphasis>pos</db:emphasis>, const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::iterator</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>QMultiMap::const_iterator</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::iterator insert(QMultiMap::const_iterator pos, const Key &amp;key, const T &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts a new item with the key <db:code role="parameter">key</db:code> and value <db:code role="parameter">value</db:code> and with hint <db:code role="parameter">pos</db:code> suggesting where to do the insert.</db:para>
<db:para>If <db:link xlink:href="qmultimap.xml#constBegin">constBegin</db:link>() is used as hint it indicates that the <db:code role="parameter">key</db:code> is less than any key in the multi map while <db:link xlink:href="qmultimap.xml#constEnd">constEnd</db:link>() suggests that the <db:code role="parameter">key</db:code> is (strictly) larger than any key in the multi map. Otherwise the hint should meet the condition (<db:code role="parameter">pos</db:code> - 1).<db:link xlink:href="qmultimap.xml#key">key</db:link>() &lt; <db:code role="parameter">key</db:code> &lt;= pos.<db:link xlink:href="qmultimap.xml#key">key</db:link>(). If the hint <db:code role="parameter">pos</db:code> is wrong it is ignored and a regular insert is done.</db:para>
<db:para>If the hint is correct and the multi map is unshared, the insert executes in amortized <db:link xlink:href="containers.xml#constant-time">constant time</db:link>.</db:para>
<db:para>If there is already an item with the same key in the map, this function will simply create a new one.</db:para>
<db:para>When creating a multi map from sorted data inserting the largest key first with <db:link xlink:href="qmultimap.xml#constBegin">constBegin</db:link>() is faster than inserting in sorted order with <db:link xlink:href="qmultimap.xml#constEnd">constEnd</db:link>(), since <db:link xlink:href="qmultimap.xml#constEnd">constEnd</db:link>() - 1 (which is needed to check if the hint is valid) needs <db:link xlink:href="containers.xml#logarithmic-time">logarithmic time</db:link>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Be careful with the hint. Providing an iterator from an older shared instance might crash but there is also a risk that it will silently corrupt both the multi map and the <db:code role="parameter">pos</db:code> multi map.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QMultiMap::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the multi map contains no items; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="key">
<db:title>Key QMultiMap::key(const T &amp;<db:emphasis>value</db:emphasis>, const Key &amp;<db:emphasis>defaultKey</db:emphasis> = Key()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Key</db:type>
<db:methodname>key</db:methodname>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>defaultKey</db:parameter>
<db:initializer>Key()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Key key(const T &amp;value, const Key &amp;defaultKey) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the first key with value <db:code role="parameter">value</db:code>, or <db:code role="parameter">defaultKey</db:code> if the multi map contains no item with value <db:code role="parameter">value</db:code>. If no <db:code role="parameter">defaultKey</db:code> is provided the function returns a <db:link xlink:href="containers.xml#default-constructed-value">default-constructed key</db:link>.</db:para>
<db:para>This function can be slow (<db:link xlink:href="containers.xml#linear-time">linear time</db:link>), because <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>'s internal data structure is optimized for fast lookup by key, not by value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#keys">keys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyBegin">
<db:title>[since 5.6] QMultiMap::key_iterator QMultiMap::keyBegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::key_iterator</db:type>
<db:methodname>keyBegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::key_iterator keyBegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first key in the multi map.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#keyEnd">keyEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#firstKey">firstKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyEnd">
<db:title>[since 5.6] QMultiMap::key_iterator QMultiMap::keyEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::key_iterator</db:type>
<db:methodname>keyEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::key_iterator keyEnd() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the imaginary item after the last key in the multi map.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#keyBegin">keyBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#lastKey">lastKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyValueBegin">
<db:title>[since 5.10] QMultiMap::key_value_iterator QMultiMap::keyValueBegin()</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::key_value_iterator</db:type>
<db:methodname>keyValueBegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::key_value_iterator keyValueBegin()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first entry in the multi map.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#keyValueEnd">keyValueEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyValueBegin-1">
<db:title>[since 5.10] QMultiMap::const_key_value_iterator QMultiMap::keyValueBegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_key_value_iterator</db:type>
<db:methodname>keyValueBegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_key_value_iterator keyValueBegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first entry in the multi map.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#keyValueEnd">keyValueEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyValueEnd">
<db:title>[since 5.10] QMultiMap::key_value_iterator QMultiMap::keyValueEnd()</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::key_value_iterator</db:type>
<db:methodname>keyValueEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::key_value_iterator keyValueEnd()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the imaginary entry after the last entry in the multi map.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#keyValueBegin">keyValueBegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyValueEnd-1">
<db:title>[since 5.10] QMultiMap::const_key_value_iterator QMultiMap::keyValueEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_key_value_iterator</db:type>
<db:methodname>keyValueEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_key_value_iterator keyValueEnd() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the imaginary entry after the last entry in the multi map.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#keyValueBegin">keyValueBegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keys">
<db:title>QList&lt;Key&gt; QMultiMap::keys() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;Key&gt;</db:type>
<db:methodname>keys</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;Key&gt; keys() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list containing all the keys in the multi map in ascending order. Keys that occur multiple times in the multi map also occur multiple times in the list.</db:para>
<db:para>The order is guaranteed to be the same as that used by <db:link xlink:href="qmultimap.xml#values">values</db:link>().</db:para>
<db:para>This function creates a new list, in <db:link xlink:href="containers.xml#linear-time">linear time</db:link>. The time and memory use that entails can be avoided by iterating from <db:link xlink:href="qmultimap.xml#keyBegin">keyBegin</db:link>() to <db:link xlink:href="qmultimap.xml#keyEnd">keyEnd</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#values">values</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#key">key</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keys-1">
<db:title>QList&lt;Key&gt; QMultiMap::keys(const T &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;Key&gt;</db:type>
<db:methodname>keys</db:methodname>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;Key&gt; keys(const T &amp;value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list containing all the keys associated with value <db:code role="parameter">value</db:code> in ascending order.</db:para>
<db:para>This function can be slow (<db:link xlink:href="containers.xml#linear-time">linear time</db:link>), because <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>'s internal data structure is optimized for fast lookup by key, not by value.</db:para>
</db:section>
<db:section xml:id="last">
<db:title>[since 5.2] T &amp;QMultiMap::last()</db:title>
<db:methodsynopsis>
<db:type>T &amp;</db:type>
<db:methodname>last</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; last()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the last value in the multi map, that is the value mapped to the largest key. This function assumes that the map is not empty.</db:para>
<db:para>When unshared (or const version is called), this executes in <db:link xlink:href="containers.xml#logarithmic-time">logarithmic time</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#lastKey">lastKey</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="last-1">
<db:title>[since 5.2] const T &amp;QMultiMap::last() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const T &amp;</db:type>
<db:methodname>last</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const T &amp; last() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="lastKey">
<db:title>[since 5.2] const Key &amp;QMultiMap::lastKey() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const Key &amp;</db:type>
<db:methodname>lastKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const Key &amp; lastKey() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the largest key in the multi map. This function assumes that the multi map is not empty.</db:para>
<db:para>This executes in <db:link xlink:href="containers.xml#logarithmic-time">logarithmic time</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#firstKey">firstKey</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#keyEnd">keyEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lowerBound">
<db:title>QMultiMap::iterator QMultiMap::lowerBound(const Key &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::iterator</db:type>
<db:methodname>lowerBound</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::iterator lowerBound(const Key &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an iterator pointing to the first item with key <db:code role="parameter">key</db:code> in the map. If the map contains no item with key <db:code role="parameter">key</db:code>, the function returns an iterator to the nearest item with a greater key.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QMultiMap&amp;lt;int, QString&amp;gt; multimap;
multimap.insert(1, &quot;one&quot;);
multimap.insert(5, &quot;five&quot;);
multimap.insert(5, &quot;five (2)&quot;);
multimap.insert(10, &quot;ten&quot;);

multimap.lowerBound(0);      // returns iterator to (1, &quot;one&quot;)
multimap.lowerBound(1);      // returns iterator to (1, &quot;one&quot;)
multimap.lowerBound(2);      // returns iterator to (5, &quot;five&quot;)
multimap.lowerBound(5);      // returns iterator to (5, &quot;five&quot;)
multimap.lowerBound(6);      // returns iterator to (10, &quot;ten&quot;)
multimap.lowerBound(10);     // returns iterator to (10, &quot;ten&quot;)
multimap.lowerBound(999);    // returns end()
</db:programlisting>
<db:para>If the map contains multiple items with key <db:code role="parameter">key</db:code>, this function returns an iterator that points to the most recently inserted value. The other values are accessible by incrementing the iterator. For example, here's some code that iterates over all the items with the same key:</db:para>
<db:programlisting language="cpp">QMap&amp;lt;QString, int&amp;gt; multimap;
...
QMap&amp;lt;QString, int&amp;gt;::const_iterator i = multimap.lowerBound(&quot;HDR&quot;);
QMap&amp;lt;QString, int&amp;gt;::const_iterator upperBound = multimap.upperBound(&quot;HDR&quot;);
while (i != upperBound) {
    cout &amp;lt;&amp;lt; i.value() &amp;lt;&amp;lt; Qt::endl;
    ++i;
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#upperBound">upperBound</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#find">find</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lowerBound-1">
<db:title>QMultiMap::const_iterator QMultiMap::lowerBound(const Key &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_iterator</db:type>
<db:methodname>lowerBound</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_iterator lowerBound(const Key &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>QMultiMap::size_type QMultiMap::remove(const Key &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::size_type</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::size_type remove(const Key &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all the items that have the key <db:code role="parameter">key</db:code> from the multi map. Returns the number of items removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#clear">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#take">take</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-1">
<db:title>QMultiMap::size_type QMultiMap::remove(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::size_type</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::size_type remove(const Key &amp;key, const T &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all the items that have the key <db:code role="parameter">key</db:code> and value <db:code role="parameter">value</db:code> from the multi map. Returns the number of items removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#clear">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#take">take</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeIf">
<db:title>[since 6.1] QMultiMap::size_type QMultiMap::removeIf(Predicate <db:emphasis>pred</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::size_type</db:type>
<db:methodname>removeIf</db:methodname>
<db:methodparam>
<db:type>Predicate</db:type>
<db:parameter>pred</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::size_type removeIf(Predicate pred)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all elements for which the predicate <db:code role="parameter">pred</db:code> returns true from the multi map.</db:para>
<db:para>The function supports predicates which take either an argument of type QMultiMap&lt;Key, T&gt;::iterator, or an argument of type std::pair&lt;const Key &amp;, T &amp;&gt;.</db:para>
<db:para>Returns the number of elements removed, if any.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#clear">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#take">take</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace">
<db:title>QMultiMap::iterator QMultiMap::replace(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::iterator</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::iterator replace(const Key &amp;key, const T &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a new item with the key <db:code role="parameter">key</db:code> and a value of <db:code role="parameter">value</db:code>.</db:para>
<db:para>If there is already an item with the key <db:code role="parameter">key</db:code>, that item's value is replaced with <db:code role="parameter">value</db:code>.</db:para>
<db:para>If there are multiple items with the key <db:code role="parameter">key</db:code>, the most recently inserted item's value is replaced with <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>QMultiMap::size_type QMultiMap::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::size_type</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::size_type size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of (key, value) pairs in the multi map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#count-2">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QMultiMap::swap(QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QMultiMap&lt;Key, T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps multi map <db:code role="parameter">other</db:code> with this multi map. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="take">
<db:title>T QMultiMap::take(const Key &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>T</db:type>
<db:methodname>take</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T take(const Key &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the item with the key <db:code role="parameter">key</db:code> from the multi map and returns the value associated with it.</db:para>
<db:para>If the item does not exist in the multi map, the function simply returns a <db:link xlink:href="containers.xml#default-constructed-value">default-constructed value</db:link>. If there are multiple items for <db:code role="parameter">key</db:code> in the map, only the most recently inserted one is removed and returned.</db:para>
<db:para>If you don't use the return value, <db:link xlink:href="qmultimap.xml#remove">remove</db:link>() is more efficient.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toStdMultiMap">
<db:title>std::multimap&lt;Key, T&gt; QMultiMap::toStdMultiMap() const &amp;</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::multimap&lt;Key, T&gt;</db:type>
<db:methodname>toStdMultiMap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="refness">1</db:synopsisinfo>
<db:synopsisinfo role="signature">std::multimap&lt;Key, T&gt; toStdMultiMap() const &amp;</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an STL multi map equivalent to this <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>.</db:para>
</db:section>
<db:section xml:id="uniqueKeys">
<db:title>QList&lt;Key&gt; QMultiMap::uniqueKeys() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;Key&gt;</db:type>
<db:methodname>uniqueKeys</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;Key&gt; uniqueKeys() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list containing all the keys in the map in ascending order. Keys that occur multiple times in the map occur only once in the returned list.</db:para>
</db:section>
<db:section xml:id="unite">
<db:title>QMultiMap&lt;Key, T&gt; &amp;QMultiMap::unite(const QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:methodname>unite</db:methodname>
<db:methodparam>
<db:type>const QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap&lt;Key, T&gt; &amp; unite(const QMultiMap&lt;Key, T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts all the items in the <db:code role="parameter">other</db:code> map into this map. If a key is common to both maps, the resulting map will contain the key multiple times.</db:para>
</db:section>
<db:section xml:id="unite-1">
<db:title>QMultiMap&lt;Key, T&gt; &amp;QMultiMap::unite(QMultiMap&lt;Key, T&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:methodname>unite</db:methodname>
<db:methodparam>
<db:type>QMultiMap&lt;Key, T&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap&lt;Key, T&gt; &amp; unite(QMultiMap&lt;Key, T&gt; &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves all the items from the <db:code role="parameter">other</db:code> map into this map. If a key is common to both maps, the resulting map will contain the key multiple times.</db:para>
<db:para>If <db:code role="parameter">other</db:code> is shared, then the items will be copied instead.</db:para>
</db:section>
<db:section xml:id="upperBound">
<db:title>QMultiMap::iterator QMultiMap::upperBound(const Key &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::iterator</db:type>
<db:methodname>upperBound</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::iterator upperBound(const Key &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an iterator pointing to the item that immediately follows the last item with key <db:code role="parameter">key</db:code> in the map. If the map contains no item with key <db:code role="parameter">key</db:code>, the function returns an iterator to the nearest item with a greater key.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QMultiMap&amp;lt;int, QString&amp;gt; multimap;
multimap.insert(1, &quot;one&quot;);
multimap.insert(5, &quot;five&quot;);
multimap.insert(5, &quot;five (2)&quot;);
multimap.insert(10, &quot;ten&quot;);

multimap.upperBound(0);      // returns iterator to (1, &quot;one&quot;)
multimap.upperBound(1);      // returns iterator to (5, &quot;five&quot;)
multimap.upperBound(2);      // returns iterator to (5, &quot;five&quot;)
multimap.lowerBound(5);      // returns iterator to (5, &quot;five (2)&quot;)
multimap.lowerBound(6);      // returns iterator to (10, &quot;ten&quot;)
multimap.upperBound(10);     // returns end()
multimap.upperBound(999);    // returns end()
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#lowerBound">lowerBound</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#find">find</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="upperBound-1">
<db:title>QMultiMap::const_iterator QMultiMap::upperBound(const Key &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultiMap::const_iterator</db:type>
<db:methodname>upperBound</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::const_iterator upperBound(const Key &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>T QMultiMap::value(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>defaultValue</db:emphasis> = T()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>defaultValue</db:parameter>
<db:initializer>T()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T value(const Key &amp;key, const T &amp;defaultValue) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value associated with the key <db:code role="parameter">key</db:code>.</db:para>
<db:para>If the multi map contains no item with key <db:code role="parameter">key</db:code>, the function returns <db:code role="parameter">defaultValue</db:code>. If no <db:code role="parameter">defaultValue</db:code> is specified, the function returns a <db:link xlink:href="containers.xml#default-constructed-value">default-constructed value</db:link>. If there are multiple items for <db:code role="parameter">key</db:code> in the multi map, the value of the most recently inserted one is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#key">key</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#values">values</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="values">
<db:title>QList&lt;T&gt; QMultiMap::values() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;T&gt;</db:type>
<db:methodname>values</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;T&gt; values() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list containing all the values in the map, in ascending order of their keys. If a key is associated with multiple values, all of its values will be in the list, and not just the most recently inserted one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#keys">keys</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="values-1">
<db:title>QList&lt;T&gt; QMultiMap::values(const Key &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;T&gt;</db:type>
<db:methodname>values</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;T&gt; values(const Key &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list containing all the values associated with key <db:code role="parameter">key</db:code>, from the most recently inserted to the least recently inserted one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#keys">keys</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimap.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[default] QMultiMap&lt;Key, T&gt; &amp;QMultiMap::operator=(const QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap&lt;Key, T&gt; &amp; operator=(const QMultiMap&lt;Key, T&gt; &amp;other) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this multi map and returns a reference to this multi map.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[default, since 5.2] QMultiMap&lt;Key, T&gt; &amp;QMultiMap::operator=(QMultiMap&lt;Key, T&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QMultiMap&lt;Key, T&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap&lt;Key, T&gt; &amp; operator=(QMultiMap&lt;Key, T&gt; &amp;&amp;other) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="erase_if">
<db:title>[since 6.1] qsizetype erase_if(QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>map</db:emphasis>, Predicate <db:emphasis>pred</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>qsizetype</db:type>
<db:methodname>erase_if</db:methodname>
<db:methodparam>
<db:type>QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>map</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Predicate</db:type>
<db:parameter>pred</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype erase_if(QMultiMap&lt;Key, T&gt; &amp;map, Predicate pred)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all elements for which the predicate <db:code role="parameter">pred</db:code> returns true from the multi map <db:code role="parameter">map</db:code>.</db:para>
<db:para>The function supports predicates which take either an argument of type QMultiMap&lt;Key, T&gt;::iterator, or an argument of type std::pair&lt;const Key &amp;, T &amp;&gt;.</db:para>
<db:para>Returns the number of elements removed, if any.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>lhs</db:emphasis>, const QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QMultiMap&lt;Key, T&gt; &amp;lhs, const QMultiMap&lt;Key, T&gt; &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is not equal to <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:para>Two multi maps are considered equal if they contain the same (key, value) pairs, in the same order (which matters for duplicate keys).</db:para>
<db:para>This function requires the key and the value types to implement operator==().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>map</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>map</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QMultiMap&lt;Key, T&gt; &amp;map)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the multi map <db:code role="parameter">map</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:para>This function requires the key and value types to implement operator&lt;&lt;().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>lhs</db:emphasis>, const QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QMultiMap&lt;Key, T&gt; &amp;lhs, const QMultiMap&lt;Key, T&gt; &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is equal to <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:para>Two multi maps are considered equal if they contain the same (key, value) pairs, in the same order (which matters for duplicate keys).</db:para>
<db:para>This function requires the key and the value types to implement operator==().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmultimap.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>map</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>map</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QMultiMap&lt;Key, T&gt; &amp;map)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a map from stream <db:code role="parameter">in</db:code> into <db:code role="parameter">map</db:code>.</db:para>
<db:para>This function requires the key and value types to implement operator&gt;&gt;().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QMultiMap</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="insert-2">
<db:title>[since 5.15] void QMultiMap::insert(const QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>map</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>const QMultiMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>map</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void insert(const QMultiMap&lt;Key, T&gt; &amp;map)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qmultimap.xml#unite">unite</db:link>() instead.</db:para>
<db:para>Inserts all the items in <db:code role="parameter">map</db:code> into this map.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="insert-3">
<db:title>[since 5.15] void QMultiMap::insert(QMultiMap&lt;Key, T&gt; &amp;&amp;<db:emphasis>map</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>QMultiMap&lt;Key, T&gt; &amp;&amp;</db:type>
<db:parameter>map</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void insert(QMultiMap&lt;Key, T&gt; &amp;&amp;map)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qmultimap.xml#unite">unite</db:link>() instead.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Moves all the items from <db:code role="parameter">map</db:code> into this map.</db:para>
<db:para>If <db:code role="parameter">map</db:code> is shared, then the items will be copied instead.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="insertMulti">
<db:title>QMultiMap::iterator QMultiMap::insertMulti(const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::iterator</db:type>
<db:methodname>insertMulti</db:methodname>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::iterator insertMulti(const Key &amp;key, const T &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qmultimap.xml#insert">insert</db:link>() instead.</db:para>
<db:para>Inserts a new item with the key <db:code role="parameter">key</db:code> and a value of <db:code role="parameter">value</db:code>, and returns an iterator pointing to the new item.</db:para>
</db:section>
<db:section xml:id="insertMulti-1">
<db:title>QMultiMap::iterator QMultiMap::insertMulti(QMultiMap::const_iterator <db:emphasis>pos</db:emphasis>, const Key &amp;<db:emphasis>key</db:emphasis>, const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMultiMap::iterator</db:type>
<db:methodname>insertMulti</db:methodname>
<db:methodparam>
<db:type>QMultiMap::const_iterator</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const Key &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultiMap::iterator insertMulti(QMultiMap::const_iterator pos, const Key &amp;key, const T &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qmultimap.xml#insert">insert</db:link>() instead.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts a new item with the key <db:code role="parameter">key</db:code> and value <db:code role="parameter">value</db:code> and with hint <db:code role="parameter">pos</db:code> suggesting where to do the insert.</db:para>
</db:section>
<db:section xml:id="toStdMap">
<db:title>std::multimap&lt;Key, T&gt; QMultiMap::toStdMap() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::multimap&lt;Key, T&gt;</db:type>
<db:methodname>toStdMap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::multimap&lt;Key, T&gt; toStdMap() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qmultimap.xml#toStdMultiMap">toStdMultiMap</db:link>() instead.</db:para>
<db:para>Returns an STL multi map equivalent to this <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
