<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMultiMap Class</db:title>
<db:subtitle>template &lt;typename Key, typename T&gt; class QMultiMap</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> class is a convenience <db:link xlink:href="qmap.xml">QMap</db:link> subclass that provides multi-valued maps.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMultiMap</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmap.xml" xlink:role="class">QMap</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMultiMap is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmultimap.xml">QMultiMap</db:link>&lt;Key, T&gt; is one of Qt's generic <db:link xlink:href="containers.xml">container classes</db:link>. It inherits <db:link xlink:href="qmap.xml">QMap</db:link> and extends it with a few convenience functions that make it more suitable than <db:link xlink:href="qmap.xml">QMap</db:link> for storing multi-valued maps. A multi-valued map is a map that allows multiple values with the same key; <db:link xlink:href="qmap.xml">QMap</db:link> normally doesn't allow that, unless you call QMap::insertMulti().</db:para>
<db:para>Because <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> inherits <db:link xlink:href="qmap.xml">QMap</db:link>, all of <db:link xlink:href="qmap.xml">QMap</db:link>'s functionality also applies to <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>. For example, you can use <db:link xlink:href="qml-geoshape.xml#isempty">isEmpty()</db:link> to test whether the map is empty, and you can traverse a <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> using <db:link xlink:href="qmap.xml">QMap</db:link>'s iterator classes (for example, <db:link xlink:href="qmapiterator.xml">QMapIterator</db:link>). But in addition, it provides an insert() function that corresponds to QMap::insertMulti(), and a replace() function that corresponds to QMap::insert(). It also provides convenient operator+() and operator+=().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QMultiMap&lt;QString, int&gt; map1, map2, map3;

map1.insert(&quot;plenty&quot;, 100);
map1.insert(&quot;plenty&quot;, 2000);
// map1.size() == 2

map2.insert(&quot;plenty&quot;, 5000);
// map2.size() == 1

map3 = map1 + map2;
// map3.size() == 3
</db:programlisting>
<db:para>Unlike <db:link xlink:href="qmap.xml">QMap</db:link>, <db:link xlink:href="qmultimap.xml">QMultiMap</db:link> provides no operator[]. Use value() or replace() if you want to access the most recently inserted item with a certain key.</db:para>
<db:para>If you want to retrieve all the values for a single key, you can use values(const Key &amp;key), which returns a <db:link xlink:href="qlist.xml">QList</db:link>&lt;T&gt;:</db:para>
<db:programlisting language="cpp">QList&lt;int&gt; values = map.values(&quot;plenty&quot;);
for (int i = 0; i &lt; values.size(); ++i)
    cout &lt;&lt; values.at(i) &lt;&lt; endl;
</db:programlisting>
<db:para>The items that share the same key are available from most recently to least recently inserted.</db:para>
<db:para>If you prefer the STL-style iterators, you can call find() to get the iterator for the first item with a key and iterate from there:</db:para>
<db:programlisting language="cpp">QMultiMap&lt;QString, int&gt;::iterator i = map.find(&quot;plenty&quot;);
while (i != map.end() &amp;&amp; i.key() == &quot;plenty&quot;) {
    cout &lt;&lt; i.value() &lt;&lt; endl;
    ++i;
}
</db:programlisting>
<db:para><db:link xlink:href="qmultimap.xml">QMultiMap</db:link>'s key and value data types must be <db:link xlink:href="containers.xml#assignable-data-types">assignable data types</db:link>. This covers most data types you are likely to encounter, but the compiler won't let you, for example, store a <db:link xlink:href="qwidget.xml">QWidget</db:link> as a value; instead, store a <db:link xlink:href="qwidget.xml">QWidget</db:link> *. In addition, <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>'s key type must provide operator&lt;(). See the <db:link xlink:href="qmap.xml">QMap</db:link> documentation for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap.xml">QMap</db:link></db:member>
<db:member><db:link xlink:href="qmapiterator.xml">QMapIterator</db:link></db:member>
<db:member><db:link xlink:href="qmutablemapiterator.xml">QMutableMapIterator</db:link></db:member>
<db:member><db:link xlink:href="qmultihash.xml">QMultiHash</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
