<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Drop Site Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to distinguish the various MIME formats available in a drag and drop operation.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;droparea.h&quot;
#include &quot;dropsitewindow.h&quot;

DropSiteWindow::DropSiteWindow()
{
    abstractLabel = new QLabel(tr(&quot;This example accepts drags from other &quot;
                                  &quot;applications and displays the MIME types &quot;
                                  &quot;provided by the drag object.&quot;));
    abstractLabel-&gt;setWordWrap(true);
    abstractLabel-&gt;adjustSize();

    dropArea = new DropArea;
    connect(dropArea, &amp;DropArea::changed,
            this, &amp;DropSiteWindow::updateFormatsTable);

    QStringList labels;
    labels &lt;&lt; tr(&quot;Format&quot;) &lt;&lt; tr(&quot;Content&quot;);

    formatsTable = new QTableWidget;
    formatsTable-&gt;setColumnCount(2);
    formatsTable-&gt;setEditTriggers(QAbstractItemView::NoEditTriggers);
    formatsTable-&gt;setHorizontalHeaderLabels(labels);
    formatsTable-&gt;horizontalHeader()-&gt;setStretchLastSection(true);

    clearButton = new QPushButton(tr(&quot;Clear&quot;));
    quitButton = new QPushButton(tr(&quot;Quit&quot;));

    buttonBox = new QDialogButtonBox;
    buttonBox-&gt;addButton(clearButton, QDialogButtonBox::ActionRole);
    buttonBox-&gt;addButton(quitButton, QDialogButtonBox::RejectRole);

    connect(quitButton, &amp;QAbstractButton::pressed, this, &amp;QWidget::close);
    connect(clearButton, &amp;QAbstractButton::pressed, dropArea, &amp;DropArea::clear);

    QVBoxLayout *mainLayout = new QVBoxLayout(this);
    mainLayout-&gt;addWidget(abstractLabel);
    mainLayout-&gt;addWidget(dropArea);
    mainLayout-&gt;addWidget(formatsTable);
    mainLayout-&gt;addWidget(buttonBox);

    setWindowTitle(tr(&quot;Drop Site&quot;));
    setMinimumSize(350, 500);
}

void DropSiteWindow::updateFormatsTable(const QMimeData *mimeData)
{
    formatsTable-&gt;setRowCount(0);
    if (!mimeData)
        return;

    foreach (QString format, mimeData-&gt;formats()) {
        QTableWidgetItem *formatItem = new QTableWidgetItem(format);
        formatItem-&gt;setFlags(Qt::ItemIsEnabled);
        formatItem-&gt;setTextAlignment(Qt::AlignTop | Qt::AlignLeft);

        QString text;
        if (format == QLatin1String(&quot;text/plain&quot;)) {
            text = mimeData-&gt;text().simplified();
        } else if (format == QLatin1String(&quot;text/html&quot;)) {
            text = mimeData-&gt;html().simplified();
        } else if (format == QLatin1String(&quot;text/uri-list&quot;)) {
            QList&lt;QUrl&gt; urlList = mimeData-&gt;urls();
            for (int i = 0; i &lt; urlList.size() &amp;&amp; i &lt; 32; ++i)
                text.append(urlList.at(i).toString() + QLatin1Char(' '));
        } else {
            QByteArray data = mimeData-&gt;data(format);
            for (int i = 0; i &lt; data.size() &amp;&amp; i &lt; 32; ++i)
                text.append(QStringLiteral(&quot;%1 &quot;).arg(uchar(data[i]), 2, 16, QLatin1Char('0')).toUpper());
        }

        int row = formatsTable-&gt;rowCount();
        formatsTable-&gt;insertRow(row);
        formatsTable-&gt;setItem(row, 0, new QTableWidgetItem(format));
        formatsTable-&gt;setItem(row, 1, new QTableWidgetItem(text));
    }

    formatsTable-&gt;resizeColumnToContents(0);
}

</db:programlisting>
</db:article>
