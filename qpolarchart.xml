<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPolarChart Class</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpolarchart.xml">QPolarChart</db:link> presents data in polar charts.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPolarChart</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qchart.xml" xlink:role="class">QChart</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Polar charts present data in a circular graph, where the placement of data is based on the angle and distance from the center of the graph, the <db:emphasis>pole</db:emphasis>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_polarchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A polar chart is a specialization of <db:link xlink:href="qchart.xml">QChart</db:link> that supports line, spline, area, and scatter series, and all axis types supported by them. Each axis can be used either as a radial or an angular axis.</db:para>
<db:para>The first and last tick mark on an angular <db:link xlink:href="qvalueaxis.xml">QValueAxis</db:link> are co-located at a 0/360 degree angle.</db:para>
<db:para>If the angular distance between two consecutive points in a series is more than 180 degrees, any direct line connecting the two points becomes meaningless, and will not be drawn. Instead, a line will be drawn to and from the center of the chart. Therefore, the axis ranges must be chosen accordingly when displaying line, spline, or area series.</db:para>
<db:para>Polar charts draw all axes of the same orientation in the same position, so using multiple axes of the same orientation can be confusing, unless the extra axes are only used to customize the grid. For example, you can display a highlighted range with a secondary shaded <db:link xlink:href="qcategoryaxis.xml">QCategoryAxis</db:link> or provide unlabeled subticks with a secondary <db:link xlink:href="qvalueaxis.xml">QValueAxis</db:link> thas has hidden labels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml">QChart</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PolarOrientation-enum">
<db:title>enum QPolarChart::PolarOrientation</db:title>
<db:bridgehead renderas="sect2">flags QPolarChart::PolarOrientations</db:bridgehead>
<db:enumsynopsis>
<db:enumname>PolarOrientation</db:enumname>
<db:enumitem>
<db:enumidentifier>PolarOrientationRadial</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PolarOrientationAngular</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QPolarChart::PolarOrientations</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum type specifies the polar orientation of an axis.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpolarchart.xml">QPolarChart</db:link></db:emphasis>::PolarOrientationRadial</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>A radial axis, where the values are placed along the radius of the chart, starting at the pole.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpolarchart.xml">QPolarChart</db:link></db:emphasis>::PolarOrientationAngular</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>An angular axis, where the values are placed around the chart.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PolarOrientations</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PolarOrientation&gt;. </db:code>It stores an OR combination of <db:code>PolarOrientation</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPolarChart">
<db:title>[explicit] QPolarChart::QPolarChart(QGraphicsItem *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>wFlags</db:emphasis> = Qt::WindowFlags())</db:title>
<db:constructorsynopsis>
<db:methodname>QPolarChart</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>wFlags</db:parameter>
<db:initializer>Qt::WindowFlags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolarChart(QGraphicsItem *parent, Qt::WindowFlags wFlags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a polar chart as a child of <db:code role="parameter">parent</db:code>. The properties specified by <db:code role="parameter">wFlags</db:code> are passed to the <db:link xlink:href="qchart.xml">QChart</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QPolarChart">
<db:title>[virtual] QPolarChart::~QPolarChart()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPolarChart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPolarChart()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes the polar chart object and its children, such as the series and axis objects added to it.</db:para>
</db:section>
<db:section xml:id="addAxis">
<db:title>void QPolarChart::addAxis(QAbstractAxis *<db:emphasis>axis</db:emphasis>, QPolarChart::PolarOrientation <db:emphasis>polarOrientation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addAxis</db:methodname>
<db:methodparam>
<db:type>QAbstractAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPolarChart::PolarOrientation</db:type>
<db:parameter>polarOrientation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addAxis(QAbstractAxis *axis, QPolarChart::PolarOrientation polarOrientation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience method adds the axis <db:code role="parameter">axis</db:code> to the polar chart with the polar orientation <db:code role="parameter">polarOrientation</db:code>. The chart takes the ownership of the axis.</db:para>
<db:note>
<db:para>Axes can be added to a polar chart also with <db:link xlink:href="qchart.xml#addAxis">QChart::addAxis</db:link>(). The specified alignment determines the polar orientation: horizontal alignments indicate an angular axis and vertical alignments indicate a radial axis.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#removeAxis">QChart::removeAxis</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#createDefaultAxes">QChart::createDefaultAxes</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractseries.xml#attachAxis">QAbstractSeries::attachAxis</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#addAxis">QChart::addAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="axes">
<db:title>QList&lt;QAbstractAxis *&gt; QPolarChart::axes(QPolarChart::PolarOrientations <db:emphasis>polarOrientation</db:emphasis> = PolarOrientations(PolarOrientationRadial | PolarOrientationAngular), QAbstractSeries *<db:emphasis>series</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAbstractAxis *&gt;</db:type>
<db:methodname>axes</db:methodname>
<db:methodparam>
<db:type>QPolarChart::PolarOrientations</db:type>
<db:parameter>polarOrientation</db:parameter>
<db:initializer>PolarOrientations(PolarOrientationRadial | PolarOrientationAngular)</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractSeries *</db:type>
<db:parameter>series</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAbstractAxis *&gt; axes(QPolarChart::PolarOrientations polarOrientation, QAbstractSeries *series) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the axes added for the series <db:code role="parameter">series</db:code> with the polar orientation <db:code role="parameter">polarOrientation</db:code>. If no series is provided, any axis with the specified polar orientation is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolarchart.xml#addAxis">addAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="axisPolarOrientation">
<db:title>[static] QPolarChart::PolarOrientation QPolarChart::axisPolarOrientation(QAbstractAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QPolarChart::PolarOrientation</db:type>
<db:methodname>axisPolarOrientation</db:methodname>
<db:methodparam>
<db:type>QAbstractAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPolarChart::PolarOrientation axisPolarOrientation(QAbstractAxis *axis)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The angular axes of a polar chart report horizontal orientation and the radial axes report vertical orientation. This function is a convenience function for converting the orientation of the axis <db:code role="parameter">axis</db:code> to the corresponding polar orientation. If the <db:code role="parameter">axis</db:code> is null or not added to a polar chart, the return value is meaningless.</db:para>
</db:section>
</db:section>
</db:article>
