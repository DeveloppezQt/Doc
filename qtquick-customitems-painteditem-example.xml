<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scene Graph - Painted Item</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to implement <db:link xlink:href="qpainter.xml">QPainter</db:link>-based custom scenegraph items.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Painted Item example shows how to use the QML Scene Graph framework to implement custom scenegraph items using <db:link xlink:href="qpainter.xml">QPainter</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-textballoons_example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> class is a class derived from <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> for implementing custom QML Scene Graph items using the <db:link xlink:href="qpainter.xml">QPainter</db:link> interfaces.</db:para>
<db:para>The example consists of an item class and a QML file to use the item. The <db:code>TextBalloon</db:code> class represents the individual text balloons extending <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> and the <db:code>textballoons.qml</db:code> file is used to load the module containing the TextBalloon QML type and display the text balloons.</db:para>
<db:para>We will focus on the <db:code>TextBalloon</db:code> class first and continue with the <db:code>textballoons.qml</db:code> file. For an example on how to implement a plugin for a QML module please look at <db:link xlink:href="qtqml-tutorials-extending-qml-example.xml#chapter-6-writing-an-extension-plugin">Writing an Extension Plugin</db:link></db:para>
<db:section xml:id="textballoon-class-declaration">
<db:title>TextBalloon Class Declaration</db:title>
<db:para>The <db:code>TextBalloon</db:code> class inherits from <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link>. <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> is the base class for all <db:link xlink:href="qpainter.xml">QPainter</db:link> based items in the QML Scene Graph framework.</db:para>
<db:programlisting language="cpp">class TextBalloon : public QQuickPaintedItem
{
    Q_OBJECT
    Q_PROPERTY(bool rightAligned READ isRightAligned WRITE setRightAligned NOTIFY rightAlignedChanged)
    QML_ELEMENT

    public:
        TextBalloon(QQuickItem *parent = nullptr);
        void paint(QPainter *painter) override;

        bool isRightAligned() const;
        void setRightAligned(bool rightAligned);

    private:
        bool rightAligned;

    signals:
        void rightAlignedChanged();
};
</db:programlisting>
<db:para>To implement a <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> you must implement QQuickPaintedIem's pure virtual function <db:link xlink:href="qquickpainteditem.xml#paint">paint</db:link>() which implements the painting of the type.</db:para>
</db:section>
<db:section xml:id="textballoon-class-definition">
<db:title>TextBalloon Class Definition</db:title>
<db:para>We have to be sure to initialize the rightAligned property for a TextBalloon item.</db:para>
<db:programlisting language="cpp">TextBalloon::TextBalloon(QQuickItem *parent)
    : QQuickPaintedItem(parent)
    , rightAligned(false)
{
}
</db:programlisting>
<db:para>Then we implement the <db:code>paint()</db:code> function which is automatically called by the Scene Graph framework to paint the contents of the item. The function paints the item in local coordinates.</db:para>
<db:programlisting language="cpp">void TextBalloon::paint(QPainter *painter)
{
    QBrush brush(QColor(&quot;#007430&quot;));

    painter-&gt;setBrush(brush);
    painter-&gt;setPen(Qt::NoPen);
    painter-&gt;setRenderHint(QPainter::Antialiasing);

    QSizeF itemSize = size();
    painter-&gt;drawRoundedRect(0, 0, itemSize.width(), itemSize.height() - 10, 10, 10);

    if (rightAligned)
    {
        const QPointF points[3] = {
            QPointF(itemSize.width() - 10.0, itemSize.height() - 10.0),
            QPointF(itemSize.width() - 20.0, itemSize.height()),
            QPointF(itemSize.width() - 30.0, itemSize.height() - 10.0),
        };
        painter-&gt;drawConvexPolygon(points, 3);
    }
    else
    {
        const QPointF points[3] = {
            QPointF(10.0, itemSize.height() - 10.0),
            QPointF(20.0, itemSize.height()),
            QPointF(30.0, itemSize.height() - 10.0),
        };
        painter-&gt;drawConvexPolygon(points, 3);
    }
}
</db:programlisting>
<db:para>We start with setting the pen and brush on the item to define the look of the item. After that we start drawing. Note that the <db:link xlink:href="qquickpainteditem.xml#contentsBoundingRect" role="deprecated">contentsBoundingRect</db:link>() item is called to draw depending on the size of the item. The rectangle returned by the <db:link xlink:href="qquickpainteditem.xml#contentsBoundingRect" role="deprecated">contentsBoundingRect</db:link>() function is the size of the item as defined in the QML file.</db:para>
</db:section>
<db:section xml:id="textballoons-qml-file">
<db:title>textballoons.qml File</db:title>
<db:para>The Interface consists of two main parts. The scrollable area with the textballoons and the controls button to add new balloons.</db:para>
<db:section xml:id="balloonview">
<db:title>BalloonView</db:title>
<db:programlisting language="qml">ListModel {
    id: balloonModel
    ListElement {
        balloonWidth: 200
    }
    ListElement {
        balloonWidth: 120
    }
}

ListView {
    id: balloonView
    anchors.bottom: controls.top
    anchors.bottomMargin: 2
    anchors.top: parent.top
    delegate: TextBalloon {
        anchors.right: index % 2 !== 0 ? parent?.right : undefined
        height: 60
        rightAligned: index % 2 !== 0
        width: balloonWidth
    }
    model: balloonModel
    spacing: 5
    width: parent.width
}
</db:programlisting>
<db:para>The balloonModel contains two types at application start which will be displayed by the balloonView. The balloonView alernates the TextBalloon delegate items between left-aligned and right-aligned.</db:para>
</db:section>
<db:section xml:id="controls">
<db:title>Controls</db:title>
<db:programlisting language="qml">Rectangle {
    id: controls

    anchors.bottom: parent.bottom
    anchors.left: parent.left
    anchors.margins: 1
    anchors.right: parent.right
    border.width: 2
    color: &quot;white&quot;
    height: parent.height * 0.15

    Text {
        anchors.centerIn: parent
        text: qsTr(&quot;Add another balloon&quot;)
    }

    MouseArea {
        anchors.fill: parent
        hoverEnabled: true
        onClicked: {
            balloonModel.append({&quot;balloonWidth&quot;: Math.floor(Math.random() * 200 + 100)})
            balloonView.positionViewAtIndex(balloonView.count -1, ListView.End)
        }
        onEntered: {
            parent.color = &quot;#8ac953&quot;
        }
        onExited: {
            parent.color = &quot;white&quot;
        }
    }
}
</db:programlisting>
<db:para>The controls part of the UI contains a rectangle with a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> which changes color when the mouse hovers over it. This control 'button' adds a new object to the end of the model with a random width.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/customitems/painteditem?h=6.8">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
