<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMdiArea Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> widget provides an area in which MDI windows are displayed.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMdiArea</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractscrollarea.xml" xlink:role="class">QAbstractScrollArea</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMdiArea is part of <db:simplelist><db:member>mainwindow-classes</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> functions, essentially, like a window manager for MDI windows. For instance, it draws the windows it manages on itself and arranges them in a cascading or tile pattern. <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> is commonly used as the center widget in a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> to create MDI applications, but can also be placed in any layout. The following code adds an area to a main window:</db:para>
<db:programlisting language="cpp">    QMainWindow *mainWindow = new QMainWindow;
    mainWindow-&amp;gt;setCentralWidget(mdiArea);
</db:programlisting>
<db:para>Unlike the window managers for top-level windows, all window flags (<db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowFlags</db:link>) are supported by <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> as long as the flags are supported by the current widget style. If a specific flag is not supported by the style (e.g., the <db:link xlink:href="qt.xml#WindowType-enum">WindowShadeButtonHint</db:link>), you can still shade the window with showShaded().</db:para>
<db:para>Subwindows in <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> are instances of <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link>. They are added to an MDI area with <db:link xlink:href="qmdiarea.xml#addSubWindow">addSubWindow</db:link>(). It is common to pass a <db:link xlink:href="qwidget.xml">QWidget</db:link>, which is set as the internal widget, to this function, but it is also possible to pass a <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> directly. The class inherits <db:link xlink:href="qwidget.xml">QWidget</db:link>, and you can use the same API as with a normal top-level window when programming. <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> also has behavior that is specific to MDI windows. See the <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> class description for more details.</db:para>
<db:para>A subwindow becomes active when it gets the keyboard focus, or when <db:link xlink:href="qwidget.xml#setFocus-1">setFocus</db:link>() is called. The user activates a window by moving focus in the usual ways. The MDI area emits the <db:link xlink:href="qmdiarea.xml#subWindowActivated">subWindowActivated</db:link>() signal when the active window changes, and the <db:link xlink:href="qmdiarea.xml#activeSubWindow">activeSubWindow</db:link>() function returns the active subwindow.</db:para>
<db:para>The convenience function <db:link xlink:href="qmdiarea.xml#subWindowList">subWindowList</db:link>() returns a list of all subwindows. This information could be used in a popup menu containing a list of windows, for example.</db:para>
<db:para>The subwindows are sorted by the current <db:link xlink:href="qmdiarea.xml#WindowOrder-enum">WindowOrder</db:link>. This is used for the <db:link xlink:href="qmdiarea.xml#subWindowList">subWindowList</db:link>() and for <db:link xlink:href="qmdiarea.xml#activateNextSubWindow">activateNextSubWindow</db:link>() and <db:link xlink:href="qmdiarea.xml#activatePreviousSubWindow">activatePreviousSubWindow</db:link>(). Also, it is used when cascading or tiling the windows with <db:link xlink:href="qmdiarea.xml#cascadeSubWindows">cascadeSubWindows</db:link>() and <db:link xlink:href="qmdiarea.xml#tileSubWindows">tileSubWindows</db:link>().</db:para>
<db:para><db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> provides two built-in layout strategies for subwindows: <db:link xlink:href="qmdiarea.xml#cascadeSubWindows">cascadeSubWindows</db:link>() and <db:link xlink:href="qmdiarea.xml#tileSubWindows">tileSubWindows</db:link>(). Both are slots and are easily connected to menu entries.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/mdi-cascade.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/mdi-tile.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>The default scroll bar property for <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> is <db:link xlink:href="qt.xml#ScrollBarPolicy-enum">Qt::ScrollBarAlwaysOff</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AreaOption-enum">
<db:title>enum QMdiArea::AreaOption</db:title>
<db:bridgehead renderas="sect2">flags QMdiArea::AreaOptions</db:bridgehead>
<db:enumsynopsis>
<db:enumname>AreaOption</db:enumname>
<db:enumitem>
<db:enumidentifier>DontMaximizeSubWindowOnActivation</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QMdiArea::AreaOptions</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes options that customize the behavior of the <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmdiarea.xml">QMdiArea</db:link></db:emphasis>::DontMaximizeSubWindowOnActivation</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>When the active subwindow is maximized, the default behavior is to maximize the next subwindow that is activated. Set this option if you do not want this behavior.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>AreaOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;AreaOption&gt;. </db:code>It stores an OR combination of <db:code>AreaOption</db:code> values.</db:para>
</db:section>
<db:section xml:id="ViewMode-enum">
<db:title>enum QMdiArea::ViewMode</db:title>
<db:enumsynopsis>
<db:enumname>ViewMode</db:enumname>
<db:enumitem>
<db:enumidentifier>SubWindowView</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TabbedView</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the view mode of the area; i.e. how sub-windows will be displayed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmdiarea.xml">QMdiArea</db:link></db:emphasis>::SubWindowView</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Display sub-windows with window frames (default).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmdiarea.xml">QMdiArea</db:link></db:emphasis>::TabbedView</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Display sub-windows with tabs in a tab bar.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#viewMode-prop">setViewMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="WindowOrder-enum">
<db:title>enum QMdiArea::WindowOrder</db:title>
<db:enumsynopsis>
<db:enumname>WindowOrder</db:enumname>
<db:enumitem>
<db:enumidentifier>CreationOrder</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StackingOrder</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ActivationHistoryOrder</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies the criteria to use for ordering the list of child windows returned by <db:link xlink:href="qmdiarea.xml#subWindowList">subWindowList</db:link>(). The functions <db:link xlink:href="qmdiarea.xml#cascadeSubWindows">cascadeSubWindows</db:link>() and <db:link xlink:href="qmdiarea.xml#tileSubWindows">tileSubWindows</db:link>() follow this order when arranging the windows.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmdiarea.xml">QMdiArea</db:link></db:emphasis>::CreationOrder</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The windows are returned in the order of their creation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmdiarea.xml">QMdiArea</db:link></db:emphasis>::StackingOrder</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The windows are returned in the order in which they are stacked, with the top-most window being last in the list.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmdiarea.xml">QMdiArea</db:link></db:emphasis>::ActivationHistoryOrder</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The windows are returned in the order in which they were activated.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#subWindowList">subWindowList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="activationOrder-prop">
<db:title>activationOrder : WindowOrder</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>WindowOrder</db:type>
<db:varname>activationOrder</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">activationOrder</db:synopsisinfo>
<db:synopsisinfo role="setter">setActivationOrder</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the ordering criteria for subwindow lists</db:para>
<db:para>This property specifies the ordering criteria for the list of subwindows returned by <db:link xlink:href="qmdiarea.xml#subWindowList">subWindowList</db:link>(). By default, it is the window creation order.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmdiarea.xml#WindowOrder-enum">QMdiArea::WindowOrder</db:link></db:type> <db:emphasis role="bold">activationOrder</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setActivationOrder</db:emphasis>(<db:type><db:link xlink:href="qmdiarea.xml#WindowOrder-enum">QMdiArea::WindowOrder</db:link></db:type> <db:emphasis>order</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#subWindowList">subWindowList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="background-prop">
<db:title>background : QBrush</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QBrush</db:type>
<db:varname>background</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">background</db:synopsisinfo>
<db:synopsisinfo role="setter">setBackground</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the background brush for the workspace</db:para>
<db:para>This property sets the background brush for the workspace area itself. By default, it is a gray color, but can be any brush (e.g., colors, gradients or pixmaps).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbrush.xml">QBrush</db:link></db:type> <db:emphasis role="bold">background</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBackground</db:emphasis>(const <db:type><db:link xlink:href="qbrush.xml">QBrush</db:link></db:type> &amp;<db:emphasis>background</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="documentMode-prop">
<db:title>documentMode : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>documentMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">documentMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setDocumentMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the tab bar is set to document mode in tabbed view mode.</db:para>
<db:para>Document mode is disabled by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">documentMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDocumentMode</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#documentMode-prop">QTabBar::documentMode</db:link></db:member>
<db:member><db:link xlink:href="qmdiarea.xml#viewMode-prop">setViewMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabPosition-prop">
<db:title>tabPosition : QTabWidget::TabPosition</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QTabWidget::TabPosition</db:type>
<db:varname>tabPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">tabPosition</db:synopsisinfo>
<db:synopsisinfo role="setter">setTabPosition</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the position of the tabs in tabbed view mode.</db:para>
<db:para>Possible values for this property are described by the <db:link xlink:href="qtabwidget.xml#TabPosition-enum">QTabWidget::TabPosition</db:link> enum.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtabwidget.xml#TabPosition-enum">QTabWidget::TabPosition</db:link></db:type> <db:emphasis role="bold">tabPosition</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTabPosition</db:emphasis>(<db:type><db:link xlink:href="qtabwidget.xml#TabPosition-enum">QTabWidget::TabPosition</db:link></db:type> <db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#TabPosition-enum">QTabWidget::TabPosition</db:link></db:member>
<db:member><db:link xlink:href="qmdiarea.xml#viewMode-prop">setViewMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabShape-prop">
<db:title>tabShape : QTabWidget::TabShape</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QTabWidget::TabShape</db:type>
<db:varname>tabShape</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">tabShape</db:synopsisinfo>
<db:synopsisinfo role="setter">setTabShape</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the shape of the tabs in tabbed view mode.</db:para>
<db:para>Possible values for this property are <db:link xlink:href="qtabwidget.xml#TabShape-enum">QTabWidget::Rounded</db:link> (default) or <db:link xlink:href="qtabwidget.xml#TabShape-enum">QTabWidget::Triangular</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtabwidget.xml#TabShape-enum">QTabWidget::TabShape</db:link></db:type> <db:emphasis role="bold">tabShape</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTabShape</db:emphasis>(<db:type><db:link xlink:href="qtabwidget.xml#TabShape-enum">QTabWidget::TabShape</db:link></db:type> <db:emphasis>shape</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml#TabShape-enum">QTabWidget::TabShape</db:link></db:member>
<db:member><db:link xlink:href="qmdiarea.xml#viewMode-prop">setViewMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabsClosable-prop">
<db:title>tabsClosable : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>tabsClosable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">tabsClosable</db:synopsisinfo>
<db:synopsisinfo role="setter">setTabsClosable</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the tab bar should place close buttons on each tab in tabbed view mode.</db:para>
<db:para>Tabs are not closable by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">tabsClosable</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTabsClosable</db:emphasis>(<db:type>bool</db:type> <db:emphasis>closable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#tabsClosable-prop">QTabBar::tabsClosable</db:link></db:member>
<db:member><db:link xlink:href="qmdiarea.xml#viewMode-prop">setViewMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabsMovable-prop">
<db:title>tabsMovable : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>tabsMovable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">tabsMovable</db:synopsisinfo>
<db:synopsisinfo role="setter">setTabsMovable</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the user can move the tabs within the tabbar area in tabbed view mode.</db:para>
<db:para>Tabs are not movable by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">tabsMovable</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTabsMovable</db:emphasis>(<db:type>bool</db:type> <db:emphasis>movable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#movable-prop">QTabBar::movable</db:link></db:member>
<db:member><db:link xlink:href="qmdiarea.xml#viewMode-prop">setViewMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewMode-prop">
<db:title>viewMode : ViewMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ViewMode</db:type>
<db:varname>viewMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">viewMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setViewMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the way sub-windows are displayed in the <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link>.</db:para>
<db:para>By default, the <db:link xlink:href="qmdiarea.xml#ViewMode-enum">SubWindowView</db:link> is used to display sub-windows.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmdiarea.xml#ViewMode-enum">QMdiArea::ViewMode</db:link></db:type> <db:emphasis role="bold">viewMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setViewMode</db:emphasis>(<db:type><db:link xlink:href="qmdiarea.xml#ViewMode-enum">QMdiArea::ViewMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#ViewMode-enum">ViewMode</db:link></db:member>
<db:member><db:link xlink:href="qmdiarea.xml#tabShape-prop">setTabShape</db:link>()</db:member>
<db:member><db:link xlink:href="qmdiarea.xml#tabPosition-prop">setTabPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMdiArea">
<db:title>QMdiArea::QMdiArea(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QMdiArea</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMdiArea(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty mdi area. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qwidget.xml">QWidget</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QMdiArea">
<db:title>[virtual] QMdiArea::~QMdiArea()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QMdiArea</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMdiArea()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the MDI area.</db:para>
</db:section>
<db:section xml:id="activateNextSubWindow">
<db:title>void QMdiArea::activateNextSubWindow()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>activateNextSubWindow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void activateNextSubWindow()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Gives the keyboard focus to another window in the list of child windows. The window activated will be the next one determined by the current <db:link xlink:href="qmdiarea.xml#WindowOrder-enum">activation order</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#activatePreviousSubWindow">activatePreviousSubWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qmdiarea.xml#WindowOrder-enum">QMdiArea::WindowOrder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activatePreviousSubWindow">
<db:title>void QMdiArea::activatePreviousSubWindow()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>activatePreviousSubWindow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void activatePreviousSubWindow()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Gives the keyboard focus to another window in the list of child windows. The window activated will be the previous one determined by the current <db:link xlink:href="qmdiarea.xml#WindowOrder-enum">activation order</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#activateNextSubWindow">activateNextSubWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qmdiarea.xml#WindowOrder-enum">QMdiArea::WindowOrder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activeSubWindow">
<db:title>QMdiSubWindow *QMdiArea::activeSubWindow() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMdiSubWindow *</db:type>
<db:methodname>activeSubWindow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMdiSubWindow * activeSubWindow() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the current active subwindow. If no window is currently active, nullptr is returned.</db:para>
<db:para>Subwindows are treated as top-level windows with respect to window state, i.e., if a widget outside the MDI area is the active window, no subwindow will be active. Note that if a widget in the window in which the MDI area lives gains focus, the window will be activated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#setActiveSubWindow">setActiveSubWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#WindowState-enum">Qt::WindowState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSubWindow">
<db:title>QMdiSubWindow *QMdiArea::addSubWindow(QWidget *<db:emphasis>widget</db:emphasis>, Qt::WindowFlags <db:emphasis>windowFlags</db:emphasis> = Qt::WindowFlags())</db:title>
<db:methodsynopsis>
<db:type>QMdiSubWindow *</db:type>
<db:methodname>addSubWindow</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>windowFlags</db:parameter>
<db:initializer>Qt::WindowFlags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMdiSubWindow * addSubWindow(QWidget *widget, Qt::WindowFlags windowFlags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">widget</db:code> as a new subwindow to the MDI area. If <db:code role="parameter">windowFlags</db:code> are non-zero, they will override the flags set on the widget.</db:para>
<db:para>The <db:code role="parameter">widget</db:code> can be either a <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> or another <db:link xlink:href="qwidget.xml">QWidget</db:link> (in which case the MDI area will create a subwindow and set the <db:code role="parameter">widget</db:code> as the internal widget).</db:para>
<db:note>
<db:para>Once the subwindow has been added, its parent will be the <db:emphasis>viewport widget</db:emphasis> of the <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link>.</db:para>
</db:note>
<db:programlisting language="cpp">    QMdiArea mdiArea;
    QMdiSubWindow *subWindow1 = new QMdiSubWindow;
    subWindow1-&amp;gt;setWidget(internalWidget1);
    subWindow1-&amp;gt;setAttribute(Qt::WA_DeleteOnClose);
    mdiArea.addSubWindow(subWindow1);

    QMdiSubWindow *subWindow2 =
        mdiArea.addSubWindow(internalWidget2);
</db:programlisting>
<db:para>When you create your own subwindow, you must set the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_DeleteOnClose</db:link> widget attribute if you want the window to be deleted when closed in the MDI area. If not, the window will be hidden and the MDI area will not activate the next subwindow.</db:para>
<db:para>Returns the <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> that is added to the MDI area.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#removeSubWindow">removeSubWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cascadeSubWindows">
<db:title>void QMdiArea::cascadeSubWindows()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cascadeSubWindows</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cascadeSubWindows()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Arranges all the child windows in a cascade pattern.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#tileSubWindows">tileSubWindows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childEvent">
<db:title>[override virtual protected] void QMdiArea::childEvent(QChildEvent *<db:emphasis>childEvent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>childEvent</db:methodname>
<db:methodparam>
<db:type>QChildEvent *</db:type>
<db:parameter>childEvent</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void childEvent(QChildEvent *childEvent) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#childEvent" role="function">QObject::childEvent(QChildEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="closeActiveSubWindow">
<db:title>void QMdiArea::closeActiveSubWindow()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>closeActiveSubWindow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void closeActiveSubWindow()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the active subwindow.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#closeAllSubWindows">closeAllSubWindows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closeAllSubWindows">
<db:title>void QMdiArea::closeAllSubWindows()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>closeAllSubWindows</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void closeAllSubWindows()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes all subwindows by sending a <db:link xlink:href="qcloseevent.xml">QCloseEvent</db:link> to each window. You may receive <db:link xlink:href="qmdiarea.xml#subWindowActivated">subWindowActivated</db:link>() signals from subwindows before they are closed (if the MDI area activates the subwindow when another is closing).</db:para>
<db:para>Subwindows that ignore the close event will remain open.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#closeActiveSubWindow">closeActiveSubWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentSubWindow">
<db:title>QMdiSubWindow *QMdiArea::currentSubWindow() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMdiSubWindow *</db:type>
<db:methodname>currentSubWindow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMdiSubWindow * currentSubWindow() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the current subwindow, or nullptr if there is no current subwindow.</db:para>
<db:para>This function will return the same as <db:link xlink:href="qmdiarea.xml#activeSubWindow">activeSubWindow</db:link>() if the <db:link xlink:href="qapplication.xml">QApplication</db:link> containing <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> is active.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#activeSubWindow">activeSubWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#activeWindow">QApplication::activeWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QMdiArea::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#event" role="function">QAbstractScrollArea::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual protected] bool QMdiArea::eventFilter(QObject *<db:emphasis>object</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>eventFilter</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool eventFilter(QObject *object, QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *watched, QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QMdiArea::minimumSizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>minimumSizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize minimumSizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#minimumSizeHint" role="function">QAbstractScrollArea::minimumSizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QMdiArea::paintEvent(QPaintEvent *<db:emphasis>paintEvent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>paintEvent</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *paintEvent) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#paintEvent" role="function">QAbstractScrollArea::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="removeSubWindow">
<db:title>void QMdiArea::removeSubWindow(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeSubWindow</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeSubWindow(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">widget</db:code> from the MDI area. The <db:code role="parameter">widget</db:code> must be either a <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> or a widget that is the internal widget of a subwindow. Note <db:code role="parameter">widget</db:code> is never actually deleted by <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link>. If a <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> is passed in, its parent is set to nullptr and it is removed; but if an internal widget is passed in, the child widget is set to nullptr and the <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> is <db:emphasis>not</db:emphasis> removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#addSubWindow">addSubWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QMdiArea::resizeEvent(QResizeEvent *<db:emphasis>resizeEvent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter>resizeEvent</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *resizeEvent) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#resizeEvent" role="function">QAbstractScrollArea::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="scrollContentsBy">
<db:title>[override virtual protected] void QMdiArea::scrollContentsBy(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>scrollContentsBy</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scrollContentsBy(int dx, int dy) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#scrollContentsBy" role="function">QAbstractScrollArea::scrollContentsBy(int dx, int dy)</db:link>.</db:para>
</db:section>
<db:section xml:id="setActiveSubWindow">
<db:title>void QMdiArea::setActiveSubWindow(QMdiSubWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setActiveSubWindow</db:methodname>
<db:methodparam>
<db:type>QMdiSubWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setActiveSubWindow(QMdiSubWindow *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Activates the subwindow <db:code role="parameter">window</db:code>. If <db:code role="parameter">window</db:code> is nullptr, any current active window is deactivated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#activeSubWindow">activeSubWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOption">
<db:title>void QMdiArea::setOption(QMdiArea::AreaOption <db:emphasis>option</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOption</db:methodname>
<db:methodparam>
<db:type>QMdiArea::AreaOption</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOption(QMdiArea::AreaOption option, bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">on</db:code> is true, <db:code role="parameter">option</db:code> is enabled on the MDI area; otherwise it is disabled. See <db:link xlink:href="qmdiarea.xml#AreaOption-enum">AreaOption</db:link> for the effect of each option.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#AreaOption-enum">AreaOption</db:link></db:member>
<db:member><db:link xlink:href="qmdiarea.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setupViewport">
<db:title>[override virtual protected] void QMdiArea::setupViewport(QWidget *<db:emphasis>viewport</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setupViewport</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>viewport</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setupViewport(QWidget *viewport) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#setupViewport" role="function">QAbstractScrollArea::setupViewport(QWidget *viewport)</db:link>.</db:para>
<db:para>This slot is called by <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link> after <db:link xlink:href="qabstractscrollarea.xml#setViewport">setViewport</db:link>() has been called. Reimplement this function in a subclass of <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> to initialize the new <db:code role="parameter">viewport</db:code> before it is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#setViewport">setViewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QMdiArea::showEvent(QShowEvent *<db:emphasis>showEvent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>showEvent</db:methodname>
<db:methodparam>
<db:type>QShowEvent *</db:type>
<db:parameter>showEvent</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showEvent(QShowEvent *showEvent) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QMdiArea::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#sizeHint" role="function">QAbstractScrollArea::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="subWindowActivated">
<db:title>void QMdiArea::subWindowActivated(QMdiSubWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>subWindowActivated</db:methodname>
<db:methodparam>
<db:type>QMdiSubWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void subWindowActivated(QMdiSubWindow *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> emits this signal after <db:code role="parameter">window</db:code> has been activated. When <db:code role="parameter">window</db:code> is nullptr, <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> has just deactivated its last active window, and there are no active windows on the workspace.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#activeSubWindow">QMdiArea::activeSubWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subWindowList">
<db:title>QList&lt;QMdiSubWindow *&gt; QMdiArea::subWindowList(QMdiArea::WindowOrder <db:emphasis>order</db:emphasis> = CreationOrder) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QMdiSubWindow *&gt;</db:type>
<db:methodname>subWindowList</db:methodname>
<db:methodparam>
<db:type>QMdiArea::WindowOrder</db:type>
<db:parameter>order</db:parameter>
<db:initializer>CreationOrder</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QMdiSubWindow *&gt; subWindowList(QMdiArea::WindowOrder order) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all subwindows in the MDI area. If <db:code role="parameter">order</db:code> is <db:link xlink:href="qmdiarea.xml#WindowOrder-enum">CreationOrder</db:link> (the default), the windows are sorted in the order in which they were inserted into the workspace. If <db:code role="parameter">order</db:code> is <db:link xlink:href="qmdiarea.xml#WindowOrder-enum">StackingOrder</db:link>, the windows are listed in their stacking order, with the topmost window as the last item in the list. If <db:code role="parameter">order</db:code> is <db:link xlink:href="qmdiarea.xml#WindowOrder-enum">ActivationHistoryOrder</db:link>, the windows are listed according to their recent activation history.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#WindowOrder-enum">WindowOrder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="testOption">
<db:title>bool QMdiArea::testOption(QMdiArea::AreaOption <db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>testOption</db:methodname>
<db:methodparam>
<db:type>QMdiArea::AreaOption</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool testOption(QMdiArea::AreaOption option) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">option</db:code> is enabled; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#AreaOption-enum">AreaOption</db:link></db:member>
<db:member><db:link xlink:href="qmdiarea.xml#setOption">setOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tileSubWindows">
<db:title>void QMdiArea::tileSubWindows()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>tileSubWindows</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void tileSubWindows()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Arranges all child windows in a tile pattern.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#cascadeSubWindows">cascadeSubWindows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QMdiArea::timerEvent(QTimerEvent *<db:emphasis>timerEvent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>timerEvent</db:methodname>
<db:methodparam>
<db:type>QTimerEvent *</db:type>
<db:parameter>timerEvent</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void timerEvent(QTimerEvent *timerEvent) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="viewportEvent">
<db:title>[override virtual protected] bool QMdiArea::viewportEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>viewportEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool viewportEvent(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#viewportEvent" role="function">QAbstractScrollArea::viewportEvent(QEvent *event)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
