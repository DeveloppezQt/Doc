<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Widgets Simple Browser Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A simple browser based on Qt WebEngine Widgets.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/simplebrowser.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Simple Browser</db:emphasis> demonstrates how to use the <db:link xlink:href="qtwebenginewidgets-module.xml">Qt WebEngine C++ classes</db:link> to develop a small Web browser application that contains the following elements:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Menu bar for opening stored pages and managing windows and tabs.</db:para>
</db:listitem>
<db:listitem>
<db:para>Navigation bar for entering a URL and for moving backward and forward in the web page browsing history.</db:para>
</db:listitem>
<db:listitem>
<db:para>Multi-tab area for displaying web content within tabs.</db:para>
</db:listitem>
<db:listitem>
<db:para>Status bar for displaying hovered links.</db:para>
</db:listitem>
<db:listitem>
<db:para>A simple download manager.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The web content can be opened in new tabs or separate windows. HTTP and proxy authentication can be used for accessing web pages.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="class-hierarchy">
<db:title>Class Hierarchy</db:title>
<db:para>We start with sketching a diagram of the main classes that we are going to implement:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/simplebrowser-model.png"/>
</db:imageobject>
</db:mediaobject>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Browser</db:code> is a class managing the application windows.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>BrowserWindow</db:code> is a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> showing the menu, a navigation bar, <db:code>TabWidget</db:code>, and a status bar.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>TabWidget</db:code> is a <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> and contains one or multiple browser tabs.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>WebView</db:code> is a <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link>, provides a view for <db:code>WebPage</db:code>, and is added as a tab in <db:code>TabWidget</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>WebPage</db:code> is a <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> that represents website content.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Additionally, we will implement some auxiliary classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>WebPopupWindow</db:code> is a <db:link xlink:href="qwidget.xml">QWidget</db:link> for showing popup windows.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>DownloadManagerWidget</db:code> is a <db:link xlink:href="qwidget.xml">QWidget</db:link> implementing the downloads list.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="creating-the-browser-main-window">
<db:title>Creating the Browser Main Window</db:title>
<db:para>This example supports multiple main windows that are owned by a <db:code>Browser</db:code> object. This class also owns the <db:code>DownloadManagerWidget</db:code> and could be used for further functionality, such as bookmarks and history managers.</db:para>
<db:para>In <db:code>main.cpp</db:code>, we create the first <db:code>BrowserWindow</db:code> instance and add it to the <db:code>Browser</db:code> object. If no arguments are passed on the command line, we open the <db:link xlink:href="http://qt.io/">Qt Homepage</db:link>:</db:para>
<db:programlisting language="cpp">int main(int argc, char **argv)
{
    QCoreApplication::setOrganizationName(&quot;QtExamples&quot;);

    QApplication app(argc, argv);
    app.setWindowIcon(QIcon(QStringLiteral(&quot;:AppLogoColor.png&quot;)));

    QWebEngineProfile::defaultProfile()-&amp;gt;settings()-&amp;gt;setAttribute(QWebEngineSettings::PluginsEnabled, true);
    QWebEngineProfile::defaultProfile()-&amp;gt;settings()-&amp;gt;setAttribute(QWebEngineSettings::DnsPrefetchEnabled, true);

    QUrl url = commandLineUrlArgument();

    Browser browser;
    BrowserWindow *window = browser.createHiddenWindow();
    window-&amp;gt;tabWidget()-&amp;gt;setUrl(url);
    window-&amp;gt;show();
    return app.exec();
}
</db:programlisting>
<db:para>To suppress flicker when switching the window to OpenGL rendering, we call show after the first browser tab has been added.</db:para>
</db:section>
<db:section xml:id="creating-tabs">
<db:title>Creating Tabs</db:title>
<db:para>The <db:code>BrowserWindow</db:code> constructor initializes all the necessary user interface related objects. The <db:code>centralWidget</db:code> of <db:code>BrowserWindow</db:code> contains an instance of <db:code>TabWidget</db:code>. The <db:code>TabWidget</db:code> contains one or several <db:code>WebView</db:code> instances as tabs, and delegates it's signals and slots to the currently selected one:</db:para>
<db:programlisting language="cpp">class TabWidget : public QTabWidget
{
    ...
signals:
    // current tab/page signals
    void linkHovered(const QString &amp;amp;link);
    void loadProgress(int progress);
    void titleChanged(const QString &amp;amp;title);
    void urlChanged(const QUrl &amp;amp;url);
    void favIconChanged(const QIcon &amp;amp;icon);
    void webActionEnabledChanged(QWebEnginePage::WebAction action, bool enabled);
    void devToolsRequested(QWebEnginePage *source);
    void findTextFinished(const QWebEngineFindTextResult &amp;amp;result);

public slots:
    // current tab/page slots
    void setUrl(const QUrl &amp;amp;url);
    void triggerWebPageAction(QWebEnginePage::WebAction action);
    ...
};
</db:programlisting>
<db:para>Each tab contains an instance of <db:code>WebView</db:code>:</db:para>
<db:programlisting language="cpp">WebView *TabWidget::createTab()
{
    WebView *webView = createBackgroundTab();
    setCurrentWidget(webView);
    return webView;
}

WebView *TabWidget::createBackgroundTab()
{
    WebView *webView = new WebView;
    WebPage *webPage = new WebPage(m_profile, webView);
    webView-&amp;gt;setPage(webPage);
    setupView(webView);
    int index = addTab(webView, tr(&quot;(Untitled)&quot;));
    setTabIcon(index, webView-&amp;gt;favIcon());
    // Workaround for QTBUG-61770
    webView-&amp;gt;resize(currentWidget()-&amp;gt;size());
    webView-&amp;gt;show();
    return webView;
}
</db:programlisting>
<db:para>In <db:code>TabWidget::setupView()</db:code>, we make sure that the <db:code>TabWidget</db:code> always forwards the signals of the currently selected <db:code>WebView</db:code>:</db:para>
<db:programlisting language="cpp">void TabWidget::setupView(WebView *webView)
{
    QWebEnginePage *webPage = webView-&amp;gt;page();

    connect(webView, &amp;amp;QWebEngineView::titleChanged, [this, webView](const QString &amp;amp;title) {
        int index = indexOf(webView);
        if (index != -1) {
            setTabText(index, title);
            setTabToolTip(index, title);
        }
        if (currentIndex() == index)
            emit titleChanged(title);
    });
    connect(webView, &amp;amp;QWebEngineView::urlChanged, [this, webView](const QUrl &amp;amp;url) {
        int index = indexOf(webView);
        if (index != -1)
            tabBar()-&amp;gt;setTabData(index, url);
        if (currentIndex() == index)
            emit urlChanged(url);
    });
    connect(webView, &amp;amp;QWebEngineView::loadProgress, [this, webView](int progress) {
        if (currentIndex() == indexOf(webView))
            emit loadProgress(progress);
    });
    connect(webPage, &amp;amp;QWebEnginePage::linkHovered, [this, webView](const QString &amp;amp;url) {
        if (currentIndex() == indexOf(webView))
            emit linkHovered(url);
    });
    connect(webView, &amp;amp;WebView::favIconChanged, [this, webView](const QIcon &amp;amp;icon) {
        int index = indexOf(webView);
        if (index != -1)
            setTabIcon(index, icon);
        if (currentIndex() == index)
            emit favIconChanged(icon);
    });
    connect(webView, &amp;amp;WebView::webActionEnabledChanged, [this, webView](QWebEnginePage::WebAction action, bool enabled) {
        if (currentIndex() ==  indexOf(webView))
            emit webActionEnabledChanged(action,enabled);
    });
    connect(webPage, &amp;amp;QWebEnginePage::windowCloseRequested, [this, webView]() {
        int index = indexOf(webView);
        if (webView-&amp;gt;page()-&amp;gt;inspectedPage())
            window()-&amp;gt;close();
        else if (index &amp;gt;= 0)
            closeTab(index);
    });
    connect(webView, &amp;amp;WebView::devToolsRequested, this, &amp;amp;TabWidget::devToolsRequested);
    connect(webPage, &amp;amp;QWebEnginePage::findTextFinished, [this, webView](const QWebEngineFindTextResult &amp;amp;result) {
        if (currentIndex() == indexOf(webView))
            emit findTextFinished(result);
    });
}
</db:programlisting>
</db:section>
<db:section xml:id="implementing-webview-functionality">
<db:title>Implementing WebView Functionality</db:title>
<db:para>The <db:code>WebView</db:code> is derived from <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> to support the following functionality:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Displaying error messages in case <db:code>renderProcess</db:code> dies</db:para>
</db:listitem>
<db:listitem>
<db:para>Handling <db:code>createWindow</db:code> requests</db:para>
</db:listitem>
<db:listitem>
<db:para>Adding custom menu items to context menus</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>First, we create the <db:link xlink:href="qml-qtwebview-webview.xml">WebView</db:link> with the necessary methods and signals:</db:para>
<db:programlisting language="cpp">class WebView : public QWebEngineView
{
    Q_OBJECT

public:
    WebView(QWidget *parent = nullptr);
    ...
protected:
    void contextMenuEvent(QContextMenuEvent *event) override;
    QWebEngineView *createWindow(QWebEnginePage::WebWindowType type) override;

signals:
    void webActionEnabledChanged(QWebEnginePage::WebAction webAction, bool enabled);
    ...
};
</db:programlisting>
<db:section xml:id="displaying-error-messages">
<db:title>Displaying Error Messages</db:title>
<db:para>If the render process is terminated, we display a <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> with an error code, and then we reload the page:</db:para>
<db:programlisting language="cpp">WebView::WebView(QWidget *parent)
    : QWebEngineView(parent)
    , m_loadProgress(100)
{
    ...
    connect(this, &amp;amp;QWebEngineView::renderProcessTerminated,
            [this](QWebEnginePage::RenderProcessTerminationStatus termStatus, int statusCode) {
        QString status;
        switch (termStatus) {
        case QWebEnginePage::NormalTerminationStatus:
            status = tr(&quot;Render process normal exit&quot;);
            break;
        case QWebEnginePage::AbnormalTerminationStatus:
            status = tr(&quot;Render process abnormal exit&quot;);
            break;
        case QWebEnginePage::CrashedTerminationStatus:
            status = tr(&quot;Render process crashed&quot;);
            break;
        case QWebEnginePage::KilledTerminationStatus:
            status = tr(&quot;Render process killed&quot;);
            break;
        }
        QMessageBox::StandardButton btn = QMessageBox::question(window(), status,
                                                   tr(&quot;Render process exited with code: %1\n&quot;
                                                      &quot;Do you want to reload the page ?&quot;).arg(statusCode));
        if (btn == QMessageBox::Yes)
            QTimer::singleShot(0, [this] { reload(); });
    });
}
</db:programlisting>
</db:section>
<db:section xml:id="managing-webwindows">
<db:title>Managing WebWindows</db:title>
<db:para>The loaded page might want to create windows of the type <db:link xlink:href="qwebenginepage.xml#WebWindowType-enum">QWebEnginePage::WebWindowType</db:link>, for example, when a JavaScript program requests to open a document in a new window or dialog. This is handled by overriding <db:code>QWebView::createWindow()</db:code>:</db:para>
<db:programlisting language="cpp">QWebEngineView *WebView::createWindow(QWebEnginePage::WebWindowType type)
{
    BrowserWindow *mainWindow = qobject_cast&amp;lt;BrowserWindow*&amp;gt;(window());
    if (!mainWindow)
        return nullptr;

    switch (type) {
    case QWebEnginePage::WebBrowserTab: {
        return mainWindow-&amp;gt;tabWidget()-&amp;gt;createTab();
    }
</db:programlisting>
<db:para>In case of <db:code>QWebEnginePage::WebDialog</db:code>, we create an instance of a custom <db:code>WebPopupWindow</db:code> class:</db:para>
<db:programlisting language="cpp">class WebPopupWindow : public QWidget
{
    Q_OBJECT

public:
    WebPopupWindow(QWebEngineProfile *profile);
    WebView *view() const;

private slots:
    void handleGeometryChangeRequested(const QRect &amp;amp;newGeometry);

private:
    QLineEdit *m_urlLineEdit;
    QAction *m_favAction;
    WebView *m_view;
};
</db:programlisting>
</db:section>
<db:section xml:id="adding-context-menu-items">
<db:title>Adding Context Menu Items</db:title>
<db:para>We add a menu item to the context menu, so that users can right-click to have an inspector opened in a new window. We override <db:link xlink:href="qwebengineview.xml#contextMenuEvent">QWebEngineView::contextMenuEvent</db:link> and use QWebEnginePage::createStandardContextMenu to create a default <db:link xlink:href="qmenu.xml">QMenu</db:link> with a default list of <db:link xlink:href="qwebenginepage.xml#WebAction-enum">QWebEnginePage::WebAction</db:link> actions.</db:para>
<db:para>The default name for <db:link xlink:href="qwebenginepage.xml#WebAction-enum">QWebEnginePage::InspectElement</db:link> action is <db:guilabel>Inspect</db:guilabel>. For clarity, we rename it to <db:guilabel>Open Inspector In New Window</db:guilabel> when there is no Inspector present yet, and <db:guilabel>Inspect Element</db:guilabel> when it's already created.</db:para>
<db:para>We also check if the <db:link xlink:href="qwebenginepage.xml#WebAction-enum">QWebEnginePage::ViewSource</db:link> action is in the menu, because if it's not we have to add a separator as well.</db:para>
<db:programlisting language="cpp">void WebView::contextMenuEvent(QContextMenuEvent *event)
{
    QMenu *menu = createStandardContextMenu();
    const QList&amp;lt;QAction *&amp;gt; actions = menu-&amp;gt;actions();
    auto inspectElement = std::find(actions.cbegin(), actions.cend(), page()-&amp;gt;action(QWebEnginePage::InspectElement));
    if (inspectElement == actions.cend()) {
        auto viewSource = std::find(actions.cbegin(), actions.cend(), page()-&amp;gt;action(QWebEnginePage::ViewSource));
        if (viewSource == actions.cend())
            menu-&amp;gt;addSeparator();

        QAction *action = new QAction(menu);
        action-&amp;gt;setText(&quot;Open inspector in new window&quot;);
        connect(action, &amp;amp;QAction::triggered, [this]() { emit devToolsRequested(page()); });

        QAction *before(inspectElement == actions.cend() ? nullptr : *inspectElement);
        menu-&amp;gt;insertAction(before, action);
    } else {
        (*inspectElement)-&amp;gt;setText(tr(&quot;Inspect element&quot;));
    }
    menu-&amp;gt;popup(event-&amp;gt;globalPos());
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="implementing-webpage-and-webview-functionality">
<db:title>Implementing WebPage and WebView Functionality</db:title>
<db:para>We implement <db:code>WebPage</db:code> as a subclass of <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> and <db:code>WebView</db:code> as as subclass of <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> to enable HTTP, proxy authentication, as well as ignoring SSL certificate errors when accessing web pages:</db:para>
<db:programlisting language="cpp">class WebPage : public QWebEnginePage
{
    Q_OBJECT

public:
    WebPage(QWebEngineProfile *profile, QObject *parent = nullptr);

signals:
    void createCertificateErrorDialog(QWebEngineCertificateError error);

private slots:
    void handleCertificateError(QWebEngineCertificateError error);
    void handleSelectClientCertificate(QWebEngineClientCertificateSelection clientCertSelection);
};

class WebView : public QWebEngineView
{
    Q_OBJECT

public:
    WebView(QWidget *parent = nullptr);
    void setPage(WebPage *page);

    int loadProgress() const;
    bool isWebActionEnabled(QWebEnginePage::WebAction webAction) const;
    QIcon favIcon() const;

protected:
    void contextMenuEvent(QContextMenuEvent *event) override;
    QWebEngineView *createWindow(QWebEnginePage::WebWindowType type) override;

signals:
    void webActionEnabledChanged(QWebEnginePage::WebAction webAction, bool enabled);
    void favIconChanged(const QIcon &amp;amp;icon);
    void devToolsRequested(QWebEnginePage *source);
private slots:
    void handleCertificateError(QWebEngineCertificateError error);
    void handleAuthenticationRequired(const QUrl &amp;amp;requestUrl, QAuthenticator *auth);
    void handleFeaturePermissionRequested(const QUrl &amp;amp;securityOrigin,
                                          QWebEnginePage::Feature feature);
    void handleProxyAuthenticationRequired(const QUrl &amp;amp;requestUrl, QAuthenticator *auth,
                                           const QString &amp;amp;proxyHost);
    void handleRegisterProtocolHandlerRequested(QWebEngineRegisterProtocolHandlerRequest request);
#if QT_VERSION &amp;gt;= QT_VERSION_CHECK(6, 4, 0)
    void handleFileSystemAccessRequested(QWebEngineFileSystemAccessRequest request);
#endif

private:
    void createWebActionTrigger(QWebEnginePage *page, QWebEnginePage::WebAction);

private:
    int m_loadProgress;
};
</db:programlisting>
<db:para>In all the cases above, we display the appropriate dialog to the user. In case of authentication, we need to set the correct credential values on the <db:link xlink:href="qauthenticator.xml">QAuthenticator</db:link> object:</db:para>
<db:programlisting language="cpp">void WebView::handleAuthenticationRequired(const QUrl &amp;amp;requestUrl, QAuthenticator *auth)
{
    QDialog dialog(window());
    dialog.setModal(true);
    dialog.setWindowFlags(dialog.windowFlags() &amp;amp; ~Qt::WindowContextHelpButtonHint);

    Ui::PasswordDialog passwordDialog;
    passwordDialog.setupUi(&amp;amp;dialog);

    passwordDialog.m_iconLabel-&amp;gt;setText(QString());
    QIcon icon(window()-&amp;gt;style()-&amp;gt;standardIcon(QStyle::SP_MessageBoxQuestion, 0, window()));
    passwordDialog.m_iconLabel-&amp;gt;setPixmap(icon.pixmap(32, 32));

    QString introMessage(tr(&quot;Enter username and password for \&quot;%1\&quot; at %2&quot;)
                                 .arg(auth-&amp;gt;realm())
                                 .arg(requestUrl.toString().toHtmlEscaped()));
    passwordDialog.m_infoLabel-&amp;gt;setText(introMessage);
    passwordDialog.m_infoLabel-&amp;gt;setWordWrap(true);

    if (dialog.exec() == QDialog::Accepted) {
        auth-&amp;gt;setUser(passwordDialog.m_userNameLineEdit-&amp;gt;text());
        auth-&amp;gt;setPassword(passwordDialog.m_passwordLineEdit-&amp;gt;text());
    } else {
        // Set authenticator null if dialog is cancelled
        *auth = QAuthenticator();
    }
}
</db:programlisting>
<db:para>The <db:code>handleProxyAuthenticationRequired</db:code> signal handler implements the very same steps for the authentication of HTTP proxies.</db:para>
<db:para>In case of SSL errors, we just need to return a boolean value indicating whether the certificate should be ignored.</db:para>
<db:programlisting language="cpp">void WebPage::handleCertificateError(QWebEngineCertificateError error)
{
    error.defer();
    QTimer::singleShot(0, this,
                       [this, error]() mutable { emit createCertificateErrorDialog(error); });
}
</db:programlisting>
</db:section>
<db:section xml:id="opening-a-web-page">
<db:title>Opening a Web Page</db:title>
<db:para>This section describes the workflow for opening a new page. When the user enters a URL in the navigation bar and presses <db:guilabel>Enter</db:guilabel>, the <db:code>QLineEdit::returnPressed</db:code> signal is emitted and the new URL is then handed over to <db:code>TabWidget::setUrl</db:code>:</db:para>
<db:programlisting language="cpp">BrowserWindow::BrowserWindow(Browser *browser, QWebEngineProfile *profile, bool forDevTools)
{
    ...
        connect(m_urlLineEdit, &amp;amp;QLineEdit::returnPressed, [this]() {
            m_tabWidget-&amp;gt;setUrl(QUrl::fromUserInput(m_urlLineEdit-&amp;gt;text()));
        });
    ...
}
</db:programlisting>
<db:para>The call is forwarded to the currently selected tab:</db:para>
<db:programlisting language="cpp">void TabWidget::setUrl(const QUrl &amp;amp;url)
{
    if (WebView *view = currentWebView()) {
        view-&amp;gt;setUrl(url);
        view-&amp;gt;setFocus();
    }
}
</db:programlisting>
<db:para>The <db:code>setUrl()</db:code> method of <db:code>WebView</db:code> just forwards the <db:code>url</db:code> to the associated <db:code>WebPage</db:code>, which in turn starts the downloading of the page's content in the background.</db:para>
</db:section>
<db:section xml:id="implementing-private-browsing">
<db:title>Implementing Private Browsing</db:title>
<db:para><db:emphasis>Private browsing</db:emphasis>, <db:emphasis>incognito mode</db:emphasis>, or <db:emphasis>off-the-record mode</db:emphasis> is a feature of many browsers where normally persistent data, such as cookies, the HTTP cache, or browsing history, is kept only in memory, leaving no trace on disk. In this example we will implement private browsing on the window level with tabs in one window all in either normal or private mode. Alternatively we could implement private browsing on the tab-level, with some tabs in a window in normal mode, others in private mode.</db:para>
<db:para>Implementing private browsing is quite easy using Qt WebEngine. All one has to do is to create a new <db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link> and use it in the <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> instead of the default profile. In the example this new profile is owned by the <db:code>Browser</db:code> object:</db:para>
<db:programlisting language="cpp">class Browser
{
public:
    ...
    BrowserWindow *createHiddenWindow(bool offTheRecord = false);
    BrowserWindow *createWindow(bool offTheRecord = false);
private:
    ...
    QScopedPointer&amp;lt;QWebEngineProfile&amp;gt; m_profile;
};
</db:programlisting>
<db:para>Required profile for <db:emphasis>private browsing</db:emphasis> is created together with its first window. The default constructor for <db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link> already puts it in <db:emphasis>off-the-record</db:emphasis> mode.</db:para>
<db:programlisting language="cpp">BrowserWindow *Browser::createHiddenWindow(bool offTheRecord)
{
    if (!offTheRecord &amp;amp;&amp;amp; !m_profile) {
        m_profile.reset(new QWebEngineProfile(
    ...
</db:programlisting>
<db:para>All that is left to do is to pass the appropriate profile down to the appropriate <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> objects. The <db:code>Browser</db:code> object will hand to each new <db:code>BrowserWindow</db:code> either the global default profile (see <db:link xlink:href="qwebengineprofile.xml#defaultProfile">QWebEngineProfile::defaultProfile</db:link>) or one shared <db:emphasis>off-the-record</db:emphasis> profile instance:</db:para>
<db:programlisting language="cpp">    ...
        QObject::connect(m_profile.get(), &amp;amp;QWebEngineProfile::downloadRequested,
                         &amp;amp;m_downloadManagerWidget, &amp;amp;DownloadManagerWidget::downloadRequested);
    }
    auto profile = !offTheRecord ? m_profile.get() : QWebEngineProfile::defaultProfile();
    auto mainWindow = new BrowserWindow(this, profile, false);
    return mainWindow;
}
</db:programlisting>
<db:para>The <db:code>BrowserWindow</db:code> and <db:code>TabWidget</db:code> objects will then ensure that all <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> objects contained in a window will use this profile.</db:para>
</db:section>
<db:section xml:id="managing-downloads">
<db:title>Managing Downloads</db:title>
<db:para>Downloads are associated with a <db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link>. Whenever a download is triggered on a web page the <db:link xlink:href="qwebengineprofile.xml#downloadRequested">QWebEngineProfile::downloadRequested</db:link> signal is emitted with a <db:link xlink:href="qwebenginedownloadrequest.xml">QWebEngineDownloadRequest</db:link>, which in this example is forwarded to <db:code>DownloadManagerWidget::downloadRequested</db:code>:</db:para>
<db:programlisting language="cpp">Browser::Browser()
{
    // Quit application if the download manager window is the only remaining window
    m_downloadManagerWidget.setAttribute(Qt::WA_QuitOnClose, false);

    QObject::connect(
        QWebEngineProfile::defaultProfile(), &amp;amp;QWebEngineProfile::downloadRequested,
        &amp;amp;m_downloadManagerWidget, &amp;amp;DownloadManagerWidget::downloadRequested);
}
</db:programlisting>
<db:para>This method prompts the user for a file name (with a pre-filled suggestion) and starts the download (unless the user cancels the <db:guilabel>Save As</db:guilabel> dialog):</db:para>
<db:programlisting language="cpp">void DownloadManagerWidget::downloadRequested(QWebEngineDownloadRequest *download)
{
    Q_ASSERT(download &amp;amp;&amp;amp; download-&amp;gt;state() == QWebEngineDownloadRequest::DownloadRequested);

    QString path = QFileDialog::getSaveFileName(this, tr(&quot;Save as&quot;), QDir(download-&amp;gt;downloadDirectory()).filePath(download-&amp;gt;downloadFileName()));
    if (path.isEmpty())
        return;

    download-&amp;gt;setDownloadDirectory(QFileInfo(path).path());
    download-&amp;gt;setDownloadFileName(QFileInfo(path).fileName());
    download-&amp;gt;accept();
    add(new DownloadWidget(download));

    show();
}
</db:programlisting>
<db:para>The <db:link xlink:href="qwebenginedownloadrequest.xml">QWebEngineDownloadRequest</db:link> object will periodically emit the <db:link xlink:href="qwebenginedownloadrequest.xml#receivedBytes-prop">receivedBytesChanged</db:link> signal to notify potential observers of the download progress and the <db:link xlink:href="qwebenginedownloadrequest.xml#stateChanged">stateChanged</db:link> signal when the download is finished or when an error occurs. See <db:code>downloadmanagerwidget.cpp</db:code> for an example of how these signals can be handled.</db:para>
</db:section>
<db:section xml:id="files-and-attributions">
<db:title>Files and Attributions</db:title>
<db:para>The example uses icons from the Tango Icon Library:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="">Tango Icon Library</db:link></db:para>
</db:td>
<db:td>
<db:para>Public Domain</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwebengine.git/tree/examples/webenginewidgets/simplebrowser?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
