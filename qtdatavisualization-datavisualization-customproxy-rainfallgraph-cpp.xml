<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Custom Proxy Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using <db:link xlink:href="q3dbars.xml">Q3DBars</db:link> with a custom proxy.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;rainfallgraph.h&quot;
#include &amp;lt;QtDataVisualization/qcategory3daxis.h&amp;gt;
#include &amp;lt;QtDataVisualization/qvalue3daxis.h&amp;gt;
#include &amp;lt;QtDataVisualization/q3dscene.h&amp;gt;
#include &amp;lt;QtDataVisualization/q3dcamera.h&amp;gt;
#include &amp;lt;QtDataVisualization/qbar3dseries.h&amp;gt;
#include &amp;lt;QtDataVisualization/q3dtheme.h&amp;gt;
#include &amp;lt;QtGui/QGuiApplication&amp;gt;
#include &amp;lt;QtGui/QFont&amp;gt;
#include &amp;lt;QtCore/QDebug&amp;gt;
#include &amp;lt;QtCore/QTextStream&amp;gt;
#include &amp;lt;QtCore/QFile&amp;gt;

using namespace QtDataVisualization;

RainfallGraph::RainfallGraph(Q3DBars *rainfall)
    : m_graph(rainfall)
{
    // In data file the months are in numeric format, so create custom list
    for (int i = 1; i &amp;lt;= 12; i++)
        m_numericMonths &amp;lt;&amp;lt; QString::number(i);

    m_columnCount = m_numericMonths.size();

    m_proxy = new VariantBarDataProxy;
    QBar3DSeries *series = new QBar3DSeries(m_proxy);
    m_graph-&amp;gt;addSeries(series);

    updateYearsList(2000, 2012);

    // Set up bar specifications; make the bars as wide as they are deep,
    // and add a small space between the bars
    m_graph-&amp;gt;setBarThickness(1.0f);
    m_graph-&amp;gt;setBarSpacing(QSizeF(1.1, 1.1));

    // Set axis labels and titles
    QStringList months;
    months &amp;lt;&amp;lt; &quot;January&quot; &amp;lt;&amp;lt; &quot;February&quot; &amp;lt;&amp;lt; &quot;March&quot; &amp;lt;&amp;lt; &quot;April&quot; &amp;lt;&amp;lt; &quot;May&quot; &amp;lt;&amp;lt; &quot;June&quot; &amp;lt;&amp;lt; &quot;July&quot; &amp;lt;&amp;lt; &quot;August&quot; &amp;lt;&amp;lt; &quot;September&quot; &amp;lt;&amp;lt; &quot;October&quot; &amp;lt;&amp;lt; &quot;November&quot; &amp;lt;&amp;lt; &quot;December&quot;;
    m_graph-&amp;gt;rowAxis()-&amp;gt;setTitle(&quot;Year&quot;);
    m_graph-&amp;gt;columnAxis()-&amp;gt;setTitle(&quot;Month&quot;);
    m_graph-&amp;gt;valueAxis()-&amp;gt;setTitle(&quot;rainfall&quot;);
    m_graph-&amp;gt;valueAxis()-&amp;gt;setLabelFormat(&quot;%d mm&quot;);
    m_graph-&amp;gt;valueAxis()-&amp;gt;setSegmentCount(5);
    m_graph-&amp;gt;rowAxis()-&amp;gt;setLabels(m_years);
    m_graph-&amp;gt;columnAxis()-&amp;gt;setLabels(months);

    // Set bar type to cylinder
    series-&amp;gt;setMesh(QAbstract3DSeries::MeshCylinder);

    // Set shadows to medium
    m_graph-&amp;gt;setShadowQuality(QAbstract3DGraph::ShadowQualityMedium);

    // Set selection mode to bar and column
    m_graph-&amp;gt;setSelectionMode(QAbstract3DGraph::SelectionItemAndColumn | QAbstract3DGraph::SelectionSlice);

    // Set theme
    m_graph-&amp;gt;activeTheme()-&amp;gt;setType(Q3DTheme::ThemeArmyBlue);

    // Override font in theme
    m_graph-&amp;gt;activeTheme()-&amp;gt;setFont(QFont(&quot;Century Gothic&quot;, 30));

    // Override label background for theme
    m_graph-&amp;gt;activeTheme()-&amp;gt;setLabelBackgroundEnabled(false);

    // Set camera position and zoom
    m_graph-&amp;gt;scene()-&amp;gt;activeCamera()-&amp;gt;setCameraPreset(Q3DCamera::CameraPresetIsometricRightHigh);

    // Set window title
    m_graph-&amp;gt;setTitle(QStringLiteral(&quot;Monthly rainfall in Northern Finland&quot;));

    // Set reflections on
    m_graph-&amp;gt;setReflection(true);
}

RainfallGraph::~RainfallGraph()
{
    delete m_mapping;
    delete m_dataSet;
    delete m_graph;
}

void RainfallGraph::start()
{
    addDataSet();
}

void RainfallGraph::updateYearsList(int start, int end)
{
    m_years.clear();
    for (int i = start; i &amp;lt;= end; i++)
        m_years &amp;lt;&amp;lt; QString::number(i);

    m_rowCount = m_years.size();
}

void RainfallGraph::addDataSet()
{
    // Create a new variant data set and data item list
    m_dataSet =  new VariantDataSet;
    VariantDataItemList *itemList = new VariantDataItemList;

    // Read data from a data file into the data item list
    QTextStream stream;
    QFile dataFile(&quot;:/data/raindata.txt&quot;);
    if (dataFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
        stream.setDevice(&amp;amp;dataFile);
        while (!stream.atEnd()) {
            QString line = stream.readLine();
            if (line.startsWith(&quot;#&quot;)) // Ignore comments
                continue;
            QStringList strList = line.split(&quot;,&quot;, QString::SkipEmptyParts);
            // Each line has three data items: Year, month, and rainfall value
            if (strList.size() &amp;lt; 3) {
                qWarning() &amp;lt;&amp;lt; &quot;Invalid row read from data:&quot; &amp;lt;&amp;lt; line;
                continue;
            }
            // Store year and month as strings, and rainfall value as double
            // into a variant data item and add the item to the item list.
            VariantDataItem *newItem = new VariantDataItem;
            for (int i = 0; i &amp;lt; 2; i++)
                newItem-&amp;gt;append(strList.at(i).trimmed());
            newItem-&amp;gt;append(strList.at(2).trimmed().toDouble());
            itemList-&amp;gt;append(newItem);
        }
    } else {
        qWarning() &amp;lt;&amp;lt; &quot;Unable to open data file:&quot; &amp;lt;&amp;lt; dataFile.fileName();
    }

    // Add items to the data set and set it to the proxy
    m_dataSet-&amp;gt;addItems(itemList);
    m_proxy-&amp;gt;setDataSet(m_dataSet);

    // Create new mapping for the data and set it to the proxy
    m_mapping =  new VariantBarDataMapping(0, 1, 2, m_years, m_numericMonths);
    m_proxy-&amp;gt;setMapping(m_mapping);
}

</db:programlisting>
</db:article>
