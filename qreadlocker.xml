<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QReadLocker Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qreadlocker.xml">QReadLocker</db:link> class is a convenience class that simplifies locking and unlocking read-write locks for read access.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QReadLocker</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QReadLocker is part of <db:simplelist><db:member>thread</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The purpose of <db:link xlink:href="qreadlocker.xml">QReadLocker</db:link> (and <db:link xlink:href="qwritelocker.xml">QWriteLocker</db:link>) is to simplify <db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link> locking and unlocking. Locking and unlocking statements or in exception handling code is error-prone and difficult to debug. <db:link xlink:href="qreadlocker.xml">QReadLocker</db:link> can be used in such situations to ensure that the state of the lock is always well-defined.</db:para>
<db:para>Here's an example that uses <db:link xlink:href="qreadlocker.xml">QReadLocker</db:link> to lock and unlock a read-write lock for reading:</db:para>
<db:programlisting language="cpp">QReadWriteLock lock;

QByteArray readData()
{
    QReadLocker locker(&amp;lock);
    ...
    return data;
}
</db:programlisting>
<db:para>It is equivalent to the following code:</db:para>
<db:programlisting language="cpp">QReadWriteLock lock;

QByteArray readData()
{
    lock.lockForRead();
    ...
    lock.unlock();
    return data;
}
</db:programlisting>
<db:para>The <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> documentation shows examples where the use of a locker object greatly simplifies programming.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwritelocker.xml">QWriteLocker</db:link></db:member>
<db:member><db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QReadLocker">
<db:title>QReadLocker::QReadLocker(QReadWriteLock *<db:emphasis>lock</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qreadlocker.xml">QReadLocker</db:link> and locks <db:code role="parameter">lock</db:code> for reading. The lock will be unlocked when the <db:link xlink:href="qreadlocker.xml">QReadLocker</db:link> is destroyed. If lock is zero, <db:link xlink:href="qreadlocker.xml">QReadLocker</db:link> does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadwritelock.xml#lockForRead">QReadWriteLock::lockForRead</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QReadLocker">
<db:title>[noexcept] QReadLocker::~QReadLocker()</db:title>
<db:para>Destroys the <db:link xlink:href="qreadlocker.xml">QReadLocker</db:link> and unlocks the lock that was passed to the constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadwritelock.xml#unlock">QReadWriteLock::unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readWriteLock">
<db:title>QReadWriteLock *QReadLocker::readWriteLock() const</db:title>
<db:para>Returns a pointer to the read-write lock that was passed to the constructor.</db:para>
</db:section>
<db:section xml:id="relock">
<db:title>void QReadLocker::relock()</db:title>
<db:para>Relocks an unlocked lock.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadlocker.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unlock">
<db:title>void QReadLocker::unlock()</db:title>
<db:para>Unlocks the lock associated with this locker.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qreadwritelock.xml#unlock">QReadWriteLock::unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
