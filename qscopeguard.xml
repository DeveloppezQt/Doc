<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScopeGuard Class</db:title>
<db:subtitle>template &lt;typename F&gt; class QScopeGuard</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a scope guard for calling a function at the end of a scope.</db:para>
<db:para>This class was introduced in Qt 5.12.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScopeGuard</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qscopeguard.xml">QScopeGuard</db:link>&lt;F&gt; is a class of which the sole purpose is to run the function <db:code role="parameter">f</db:code> in its destructor. This is useful for guaranteeing your cleanup code is executed, whether the function is exited normally, exited early by a return statement, or exited by an exception.</db:para>
<db:note>
<db:para>Exceptions are not supported. The callable shouldn't throw when executed, copied or moved.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscopedvaluerollback.xml">QScopedValueRollback</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScopeGuard">
<db:title>[explicit, since 5.15] QScopeGuard::QScopeGuard(F &amp;&amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="QScopeGuard-1">[explicit, since 5.15] QScopeGuard::QScopeGuard(const F &amp;<db:emphasis>f</db:emphasis>)</db:bridgehead>
<db:para>Create a scope guard that will execute <db:code role="parameter">f</db:code> at the end of the scope.</db:para>
<db:para>If <db:emphasis>F</db:emphasis> is a lambda, its type cannot be written. In that case you need to either rely on class template argument deduction (C++17 feature) and leave the template parameter out completely or use the helper function <db:link xlink:href="qscopeguard.xml#qScopeGuardx">qScopeGuard</db:link>() instead of this constructor.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="dismiss">
<db:title>void QScopeGuard::dismiss()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>dismiss</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dismiss()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disarms the scope guard, so that the function <db:emphasis>F</db:emphasis> will not be called at the end of the scope.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qScopeGuardx">
<db:title>QScopeGuard&lt;typename std::decay&lt;F&gt;::type&gt; qScopeGuard(F &amp;&amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QScopeGuard&lt;typename std::decay&lt;F&gt;::type&gt;</db:type>
<db:methodname>qScopeGuard</db:methodname>
<db:methodparam>
<db:type>F &amp;&amp;</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QScopeGuard&lt;typename std::decay&lt;F&gt;::type&gt; qScopeGuard(F &amp;&amp;f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="module">QtCore</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The qScopeGuard function can be used to call a function at the end of the scope.</db:para>
<db:para>Create a scope guard that will execute <db:code role="parameter">f</db:code> at the end of the scope.</db:para>
<db:para>This helper function is provided so that you can easily construct a <db:link xlink:href="qscopeguard.xml">QScopeGuard</db:link> without having to name the template parameter for the type of the callable. If <db:emphasis>F</db:emphasis> is a lambda then you cannot write its type and relying on this helper or class template argument deduction is necessary.</db:para>
<db:para>Example usage is as follows:</db:para>
<db:programlisting language="cpp">void myComplexCodeWithMultipleReturnPoints(int v)
{
    // The lambda will be executed right before your function returns
    auto cleanup = qScopeGuard([] { code you want executed goes HERE; });

    if (v == -1)
        return;

    int v2 = code_that_might_throw_exceptions();

    if (v2 == -1)
        return;

    (...)
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
