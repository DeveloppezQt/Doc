<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDomImplementation Class</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdomimplementation.xml">QDomImplementation</db:link> class provides information about the features of the DOM implementation.</db:para>
<db:note>
<db:para>All functions in this class are reentrant with the following exceptions:</db:para>
<db:para>These functions are not reentrant:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qdomimplementation.xml#invalidDataPolicy">invalidDataPolicy()</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdomimplementation.xml#setInvalidDataPolicy">setInvalidDataPolicy(QDomImplementation::InvalidDataPolicy policy)</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDomImplementation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Xml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Xml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDomImplementation is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class describes the features that are supported by the DOM implementation. Currently the XML subset of DOM Level 1 and DOM Level 2 Core are supported.</db:para>
<db:para>Normally you will use the function <db:link xlink:href="qdomdocument.xml#implementation">QDomDocument::implementation</db:link>() to get the implementation object.</db:para>
<db:para>You can create a new document type with <db:link xlink:href="qdomimplementation.xml#createDocumentType">createDocumentType</db:link>() and a new document with <db:link xlink:href="qdomimplementation.xml#createDocument">createDocument</db:link>().</db:para>
<db:para>For further information about the Document Object Model see <db:link xlink:href="http://www.w3.org/TR/REC-DOM-Level-1/">Level 1</db:link> and <db:link xlink:href="http://www.w3.org/TR/DOM-Level-2-Core/">Level 2 Core</db:link>. For a more general introduction of the DOM implementation see the <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> documentation.</db:para>
<db:para>The QDom classes have a few issues of nonconformance with the XML specifications that cannot be fixed in Qt 4 without breaking backward compatibility. The Qt XML Patterns module and the <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> and <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> classes have a higher degree of a conformance.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomimplementation.xml#hasFeature">hasFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="InvalidDataPolicy-enum">
<db:title>enum QDomImplementation::InvalidDataPolicy</db:title>
<db:para>This enum specifies what should be done when a factory function in <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> is called with invalid data.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomimplementation.xml">QDomImplementation</db:link></db:emphasis>::AcceptInvalidChars</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The data should be stored in the DOM object anyway. In this case the resulting XML document might not be well-formed. This is the default value and QDom's behavior in Qt &lt; 4.1.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomimplementation.xml">QDomImplementation</db:link></db:emphasis>::DropInvalidChars</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The invalid characters should be removed from the data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdomimplementation.xml">QDomImplementation</db:link></db:emphasis>::ReturnNullNode</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The factory function should return a null node.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomimplementation.xml#setInvalidDataPolicy">setInvalidDataPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qdomimplementation.xml#invalidDataPolicy">invalidDataPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDomImplementation">
<db:title>QDomImplementation::QDomImplementation()</db:title>
<db:para>Constructs a <db:link xlink:href="qdomimplementation.xml">QDomImplementation</db:link> object.</db:para>
</db:section>
<db:section xml:id="QDomImplementation-1">
<db:title>QDomImplementation::QDomImplementation(const QDomImplementation &amp;<db:emphasis>implementation</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">implementation</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDomImplementation">
<db:title>[noexcept] QDomImplementation::~QDomImplementation()</db:title>
<db:para>Destroys the object and frees its resources.</db:para>
</db:section>
<db:section xml:id="createDocument">
<db:title>QDomDocument QDomImplementation::createDocument(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>qName</db:emphasis>, const QDomDocumentType &amp;<db:emphasis>doctype</db:emphasis>)</db:title>
<db:para>Creates a DOM document with the document type <db:code role="parameter">doctype</db:code>. This function also adds a root element node with the qualified name <db:code role="parameter">qName</db:code> and the namespace URI <db:code role="parameter">nsURI</db:code>.</db:para>
</db:section>
<db:section xml:id="createDocumentType">
<db:title>QDomDocumentType QDomImplementation::createDocumentType(const QString &amp;<db:emphasis>qName</db:emphasis>, const QString &amp;<db:emphasis>publicId</db:emphasis>, const QString &amp;<db:emphasis>systemId</db:emphasis>)</db:title>
<db:para>Creates a document type node for the name <db:code role="parameter">qName</db:code>.</db:para>
<db:para><db:code role="parameter">publicId</db:code> specifies the public identifier of the external subset. If you specify an empty string (QString()) as the <db:code role="parameter">publicId</db:code>, this means that the document type has no public identifier.</db:para>
<db:para><db:code role="parameter">systemId</db:code> specifies the system identifier of the external subset. If you specify an empty string as the <db:code role="parameter">systemId</db:code>, this means that the document type has no system identifier.</db:para>
<db:para>Since you cannot have a public identifier without a system identifier, the public identifier is set to an empty string if there is no system identifier.</db:para>
<db:para>DOM level 2 does not support any other document type declaration features.</db:para>
<db:para>The only way you can use a document type that was created this way, is in combination with the <db:link xlink:href="qdomimplementation.xml#createDocument">createDocument</db:link>() function to create a <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> with this document type.</db:para>
<db:para>In the DOM specification, this is the only way to create a non-null document. For historical reasons, Qt also allows to create the document using the default empty constructor. The resulting document is null, but becomes non-null when a factory function, for example <db:link xlink:href="qdomdocument.xml#createElement">QDomDocument::createElement</db:link>(), is called. The document also becomes non-null when setContent() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomimplementation.xml#createDocument">createDocument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasFeature">
<db:title>bool QDomImplementation::hasFeature(const QString &amp;<db:emphasis>feature</db:emphasis>, const QString &amp;<db:emphasis>version</db:emphasis>) const</db:title>
<db:para>The function returns <db:code>true</db:code> if QDom implements the requested <db:code role="parameter">version</db:code> of a <db:code role="parameter">feature</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The currently supported features and their versions:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Feature</db:para>
</db:th>
<db:th>
<db:para>Version</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>XML</db:para>
</db:td>
<db:td>
<db:para>1.0</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="invalidDataPolicy">
<db:title>[static] QDomImplementation::InvalidDataPolicy QDomImplementation::invalidDataPolicy()</db:title>
<db:para>Returns the invalid data policy, which specifies what should be done when a factory function in <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> is passed invalid data.</db:para>
<db:warning>
<db:para>This function is not reentrant.</db:para>
</db:warning><db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomimplementation.xml#setInvalidDataPolicy">setInvalidDataPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qdomimplementation.xml#InvalidDataPolicy-enum">InvalidDataPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QDomImplementation::isNull()</db:title>
<db:para>Returns <db:code>false</db:code> if the object was created by <db:link xlink:href="qdomdocument.xml#implementation">QDomDocument::implementation</db:link>(); otherwise returns <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="setInvalidDataPolicy">
<db:title>[static] void QDomImplementation::setInvalidDataPolicy(QDomImplementation::InvalidDataPolicy <db:emphasis>policy</db:emphasis>)</db:title>
<db:para>Sets the invalid data policy, which specifies what should be done when a factory function in <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> is passed invalid data.</db:para>
<db:para>The <db:code role="parameter">policy</db:code> is set for all instances of <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> which already exist and which will be created in the future.</db:para>
<db:programlisting language="cpp">void XML_snippet_main()
{
QDomDocument doc;
QDomImplementation impl;
// This will create the element, but the resulting XML document will
// be invalid, because '~' is not a valid character in a tag name.
impl.setInvalidDataPolicy(QDomImplementation::AcceptInvalidChars);
QDomElement elt1 = doc.createElement(&quot;foo~bar&quot;);

// This will create an element with the tag name &quot;foobar&quot;.
impl.setInvalidDataPolicy(QDomImplementation::DropInvalidChars);
QDomElement elt2 = doc.createElement(&quot;foo~bar&quot;);

// This will create a null element.
impl.setInvalidDataPolicy(QDomImplementation::ReturnNullNode);
QDomElement elt3 = doc.createElement(&quot;foo~bar&quot;);
}
</db:programlisting>
<db:warning>
<db:para>This function is not reentrant.</db:para>
</db:warning><db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomimplementation.xml#invalidDataPolicy">invalidDataPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qdomimplementation.xml#InvalidDataPolicy-enum">InvalidDataPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QDomImplementation::operator!=(const QDomImplementation &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> and this DOM implementation object were created from different QDomDocuments; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDomImplementation &amp;QDomImplementation::operator=(const QDomImplementation &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this DOM implementation.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QDomImplementation::operator==(const QDomImplementation &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> and this DOM implementation object were created from the same <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
