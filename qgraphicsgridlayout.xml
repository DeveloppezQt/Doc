<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsGridLayout Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicsgridlayout.xml">QGraphicsGridLayout</db:link> class provides a grid layout for managing widgets in Graphics View.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsGridLayout</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicslayout.xml" xlink:role="class">QGraphicsLayout</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsGridLayout is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The most common way to use <db:link xlink:href="qgraphicsgridlayout.xml">QGraphicsGridLayout</db:link> is to construct an object on the heap, passing a parent widget to the constructor, then add widgets and layouts by calling <db:link xlink:href="qgraphicsgridlayout.xml#addItem">addItem</db:link>(). <db:link xlink:href="qgraphicsgridlayout.xml">QGraphicsGridLayout</db:link> automatically computes the dimensions of the grid as you add items.</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;
QGraphicsWidget *textEdit = scene.addWidget(new QTextEdit);
QGraphicsWidget *pushButton = scene.addWidget(new QPushButton);

QGraphicsWidget *form = new QGraphicsWidget;
scene.addItem(form);

QGraphicsGridLayout *layout = new QGraphicsGridLayout(form);
layout-&amp;gt;addItem(textEdit, 0, 0);
layout-&amp;gt;addItem(pushButton, 0, 1);
</db:programlisting>
<db:para>Alternatively, if you do not pass a parent widget to the layout's constructor, you will need to call <db:link xlink:href="qgraphicswidget.xml#setLayout">QGraphicsWidget::setLayout</db:link>() to set this layout as the top-level layout for that widget, the widget will take ownership of the layout.</db:para>
<db:para>The layout takes ownership of the items. In some cases when the layout item also inherits from <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> (such as <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link>) there will be a ambiguity in ownership because the layout item belongs to two ownership hierarchies. See the documentation of <db:link xlink:href="qgraphicslayoutitem.xml#setOwnedByLayout">QGraphicsLayoutItem::setOwnedByLayout</db:link>() how to handle this. You can access each item in the layout by calling <db:link xlink:href="qgraphicsgridlayout.xml#count">count</db:link>() and <db:link xlink:href="qgraphicsgridlayout.xml#itemAt">itemAt</db:link>(). Calling <db:link xlink:href="qgraphicsgridlayout.xml#removeAt">removeAt</db:link>() will remove an item from the layout, without destroying it.</db:para>
<db:section xml:id="size-hints-and-size-policies-in-qgraphicsgridlayout">
<db:title>Size Hints and Size Policies in QGraphicsGridLayout</db:title>
<db:para><db:link xlink:href="qgraphicsgridlayout.xml">QGraphicsGridLayout</db:link> respects each item's size hints and size policies, and when a cell in the grid has more space than the items can fill, each item is arranged according to the layout's alignment for that item. You can set an alignment for each item by calling <db:link xlink:href="qgraphicsgridlayout.xml#setAlignment">setAlignment</db:link>(), and check the alignment for any item by calling <db:link xlink:href="qgraphicsgridlayout.xml#alignment">alignment</db:link>(). You can also set the alignment for an entire row or column by calling <db:link xlink:href="qgraphicsgridlayout.xml#setRowAlignment">setRowAlignment</db:link>() and <db:link xlink:href="qgraphicsgridlayout.xml#setColumnAlignment">setColumnAlignment</db:link>() respectively. By default, items are aligned to the top left.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml">QGraphicsLinearLayout</db:link></db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsGridLayout">
<db:title>QGraphicsGridLayout::QGraphicsGridLayout(QGraphicsLayoutItem *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGraphicsGridLayout</db:methodname>
<db:methodparam>
<db:type>QGraphicsLayoutItem *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsGridLayout(QGraphicsLayoutItem *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qgraphicsgridlayout.xml">QGraphicsGridLayout</db:link> instance. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QGraphicsGridLayout">
<db:title>[virtual] QGraphicsGridLayout::~QGraphicsGridLayout()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGraphicsGridLayout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGraphicsGridLayout()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qgraphicsgridlayout.xml">QGraphicsGridLayout</db:link> object.</db:para>
</db:section>
<db:section xml:id="addItem">
<db:title>void QGraphicsGridLayout::addItem(QGraphicsLayoutItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, int <db:emphasis>rowSpan</db:emphasis>, int <db:emphasis>columnSpan</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis> = Qt::Alignment())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addItem</db:methodname>
<db:methodparam>
<db:type>QGraphicsLayoutItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rowSpan</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columnSpan</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
<db:initializer>Qt::Alignment()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addItem(QGraphicsLayoutItem *item, int row, int column, int rowSpan, int columnSpan, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">item</db:code> to the grid on <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code>. You can specify a <db:code role="parameter">rowSpan</db:code> and <db:code role="parameter">columnSpan</db:code> and an optional <db:code role="parameter">alignment</db:code>.</db:para>
</db:section>
<db:section xml:id="addItem-1">
<db:title>void QGraphicsGridLayout::addItem(QGraphicsLayoutItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis> = Qt::Alignment())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addItem</db:methodname>
<db:methodparam>
<db:type>QGraphicsLayoutItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
<db:initializer>Qt::Alignment()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void addItem(QGraphicsLayoutItem *item, int row, int column, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">item</db:code> to the grid on <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code>. You can specify an optional <db:code role="parameter">alignment</db:code> for <db:code role="parameter">item</db:code>.</db:para>
</db:section>
<db:section xml:id="alignment">
<db:title>Qt::Alignment QGraphicsGridLayout::alignment(QGraphicsLayoutItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::Alignment</db:type>
<db:methodname>alignment</db:methodname>
<db:methodparam>
<db:type>QGraphicsLayoutItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Alignment alignment(QGraphicsLayoutItem *item) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the alignment for <db:code role="parameter">item</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setAlignment">setAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnAlignment">
<db:title>Qt::Alignment QGraphicsGridLayout::columnAlignment(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::Alignment</db:type>
<db:methodname>columnAlignment</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Alignment columnAlignment(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the alignment for <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setColumnAlignment">setColumnAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnCount">
<db:title>int QGraphicsGridLayout::columnCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columnCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columnCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of columns in the grid layout. This is always one more than the index of the last column that is occupied by a layout item (empty columns are counted except for those at the end).</db:para>
</db:section>
<db:section xml:id="columnMaximumWidth">
<db:title>qreal QGraphicsGridLayout::columnMaximumWidth(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>columnMaximumWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal columnMaximumWidth(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum width for <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setColumnMaximumWidth">setColumnMaximumWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnMinimumWidth">
<db:title>qreal QGraphicsGridLayout::columnMinimumWidth(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>columnMinimumWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal columnMinimumWidth(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum width for <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setColumnMinimumWidth">setColumnMinimumWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnPreferredWidth">
<db:title>qreal QGraphicsGridLayout::columnPreferredWidth(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>columnPreferredWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal columnPreferredWidth(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the preferred width for <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setColumnPreferredWidth">setColumnPreferredWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnSpacing">
<db:title>qreal QGraphicsGridLayout::columnSpacing(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>columnSpacing</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal columnSpacing(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the column spacing for <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setColumnSpacing">setColumnSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnStretchFactor">
<db:title>int QGraphicsGridLayout::columnStretchFactor(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columnStretchFactor</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columnStretchFactor(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the stretch factor for <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setColumnStretchFactor">setColumnStretchFactor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>[override virtual] int QGraphicsGridLayout::count() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayout.xml#count" role="function">QGraphicsLayout::count() const</db:link>.</db:para>
<db:para>Returns the number of layout items in this grid layout.</db:para>
</db:section>
<db:section xml:id="horizontalSpacing">
<db:title>qreal QGraphicsGridLayout::horizontalSpacing() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>horizontalSpacing</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal horizontalSpacing() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default horizontal spacing for the grid layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setHorizontalSpacing">setHorizontalSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invalidate">
<db:title>[override virtual] void QGraphicsGridLayout::invalidate()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>invalidate</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void invalidate() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayout.xml#invalidate" role="function">QGraphicsLayout::invalidate()</db:link>.</db:para>
</db:section>
<db:section xml:id="itemAt">
<db:title>QGraphicsLayoutItem *QGraphicsGridLayout::itemAt(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGraphicsLayoutItem *</db:type>
<db:methodname>itemAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsLayoutItem * itemAt(int row, int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the layout item at (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>).</db:para>
</db:section>
<db:section xml:id="itemAt-1">
<db:title>[override virtual] QGraphicsLayoutItem *QGraphicsGridLayout::itemAt(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QGraphicsLayoutItem *</db:type>
<db:methodname>itemAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsLayoutItem * itemAt(int index) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayout.xml#itemAt" role="function">QGraphicsLayout::itemAt(int i) const</db:link>.</db:para>
<db:para>Returns the layout item at <db:code role="parameter">index</db:code>, or <db:code>nullptr</db:code> if there is no layout item at this index.</db:para>
</db:section>
<db:section xml:id="removeAt">
<db:title>[override virtual] void QGraphicsGridLayout::removeAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>removeAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeAt(int index) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayout.xml#removeAt" role="function">QGraphicsLayout::removeAt(int index)</db:link>.</db:para>
<db:para>Removes the layout item at <db:code role="parameter">index</db:code> without destroying it. Ownership of the item is transferred to the caller.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#addItem">addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeItem">
<db:title>void QGraphicsGridLayout::removeItem(QGraphicsLayoutItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeItem</db:methodname>
<db:methodparam>
<db:type>QGraphicsLayoutItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeItem(QGraphicsLayoutItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the layout item <db:code role="parameter">item</db:code> without destroying it. Ownership of the item is transferred to the caller.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#addItem">addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowAlignment">
<db:title>Qt::Alignment QGraphicsGridLayout::rowAlignment(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::Alignment</db:type>
<db:methodname>rowAlignment</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Alignment rowAlignment(int row) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the alignment of <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setRowAlignment">setRowAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowCount">
<db:title>int QGraphicsGridLayout::rowCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rowCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rowCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of rows in the grid layout. This is always one more than the index of the last row that is occupied by a layout item (empty rows are counted except for those at the end).</db:para>
</db:section>
<db:section xml:id="rowMaximumHeight">
<db:title>qreal QGraphicsGridLayout::rowMaximumHeight(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>rowMaximumHeight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal rowMaximumHeight(int row) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum height for row, <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setRowMaximumHeight">setRowMaximumHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowMinimumHeight">
<db:title>qreal QGraphicsGridLayout::rowMinimumHeight(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>rowMinimumHeight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal rowMinimumHeight(int row) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum height for row, <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setRowMinimumHeight">setRowMinimumHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowPreferredHeight">
<db:title>qreal QGraphicsGridLayout::rowPreferredHeight(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>rowPreferredHeight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal rowPreferredHeight(int row) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the preferred height for row, <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setRowPreferredHeight">setRowPreferredHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowSpacing">
<db:title>qreal QGraphicsGridLayout::rowSpacing(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>rowSpacing</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal rowSpacing(int row) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the row spacing for <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setRowSpacing">setRowSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowStretchFactor">
<db:title>int QGraphicsGridLayout::rowStretchFactor(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rowStretchFactor</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rowStretchFactor(int row) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the stretch factor for <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setRowStretchFactor">setRowStretchFactor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAlignment">
<db:title>void QGraphicsGridLayout::setAlignment(QGraphicsLayoutItem *<db:emphasis>item</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAlignment</db:methodname>
<db:methodparam>
<db:type>QGraphicsLayoutItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAlignment(QGraphicsLayoutItem *item, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the alignment for <db:code role="parameter">item</db:code> to <db:code role="parameter">alignment</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#alignment">alignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColumnAlignment">
<db:title>void QGraphicsGridLayout::setColumnAlignment(int <db:emphasis>column</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumnAlignment</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumnAlignment(int column, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the alignment for <db:code role="parameter">column</db:code> to <db:code role="parameter">alignment</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#columnAlignment">columnAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColumnFixedWidth">
<db:title>void QGraphicsGridLayout::setColumnFixedWidth(int <db:emphasis>column</db:emphasis>, qreal <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumnFixedWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumnFixedWidth(int column, qreal width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the fixed width of <db:code role="parameter">column</db:code> to <db:code role="parameter">width</db:code>.</db:para>
</db:section>
<db:section xml:id="setColumnMaximumWidth">
<db:title>void QGraphicsGridLayout::setColumnMaximumWidth(int <db:emphasis>column</db:emphasis>, qreal <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumnMaximumWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumnMaximumWidth(int column, qreal width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum width of <db:code role="parameter">column</db:code> to <db:code role="parameter">width</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#columnMaximumWidth">columnMaximumWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColumnMinimumWidth">
<db:title>void QGraphicsGridLayout::setColumnMinimumWidth(int <db:emphasis>column</db:emphasis>, qreal <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumnMinimumWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumnMinimumWidth(int column, qreal width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the minimum width for <db:code role="parameter">column</db:code> to <db:code role="parameter">width</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#columnMinimumWidth">columnMinimumWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColumnPreferredWidth">
<db:title>void QGraphicsGridLayout::setColumnPreferredWidth(int <db:emphasis>column</db:emphasis>, qreal <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumnPreferredWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumnPreferredWidth(int column, qreal width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the preferred width for <db:code role="parameter">column</db:code> to <db:code role="parameter">width</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#columnPreferredWidth">columnPreferredWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColumnSpacing">
<db:title>void QGraphicsGridLayout::setColumnSpacing(int <db:emphasis>column</db:emphasis>, qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumnSpacing</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumnSpacing(int column, qreal spacing)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the spacing for <db:code role="parameter">column</db:code> to <db:code role="parameter">spacing</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#columnSpacing">columnSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColumnStretchFactor">
<db:title>void QGraphicsGridLayout::setColumnStretchFactor(int <db:emphasis>column</db:emphasis>, int <db:emphasis>stretch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumnStretchFactor</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumnStretchFactor(int column, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the stretch factor for <db:code role="parameter">column</db:code> to <db:code role="parameter">stretch</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#columnStretchFactor">columnStretchFactor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry">
<db:title>[override virtual] void QGraphicsGridLayout::setGeometry(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setGeometry</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGeometry(const QRectF &amp;rect) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayoutitem.xml#setGeometry" role="function">QGraphicsLayoutItem::setGeometry(const QRectF &amp;rect)</db:link>.</db:para>
<db:para>Sets the bounding geometry of the grid layout to <db:code role="parameter">rect</db:code>.</db:para>
</db:section>
<db:section xml:id="setHorizontalSpacing">
<db:title>void QGraphicsGridLayout::setHorizontalSpacing(qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHorizontalSpacing</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHorizontalSpacing(qreal spacing)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the default horizontal spacing for the grid layout to <db:code role="parameter">spacing</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#horizontalSpacing">horizontalSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowAlignment">
<db:title>void QGraphicsGridLayout::setRowAlignment(int <db:emphasis>row</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRowAlignment</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRowAlignment(int row, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the alignment of <db:code role="parameter">row</db:code> to <db:code role="parameter">alignment</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#rowAlignment">rowAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowFixedHeight">
<db:title>void QGraphicsGridLayout::setRowFixedHeight(int <db:emphasis>row</db:emphasis>, qreal <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRowFixedHeight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRowFixedHeight(int row, qreal height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the fixed height for row, <db:code role="parameter">row</db:code>, to <db:code role="parameter">height</db:code>.</db:para>
</db:section>
<db:section xml:id="setRowMaximumHeight">
<db:title>void QGraphicsGridLayout::setRowMaximumHeight(int <db:emphasis>row</db:emphasis>, qreal <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRowMaximumHeight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRowMaximumHeight(int row, qreal height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum height for row, <db:code role="parameter">row</db:code>, to <db:code role="parameter">height</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#rowMaximumHeight">rowMaximumHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowMinimumHeight">
<db:title>void QGraphicsGridLayout::setRowMinimumHeight(int <db:emphasis>row</db:emphasis>, qreal <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRowMinimumHeight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRowMinimumHeight(int row, qreal height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the minimum height for row, <db:code role="parameter">row</db:code>, to <db:code role="parameter">height</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#rowMinimumHeight">rowMinimumHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowPreferredHeight">
<db:title>void QGraphicsGridLayout::setRowPreferredHeight(int <db:emphasis>row</db:emphasis>, qreal <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRowPreferredHeight</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRowPreferredHeight(int row, qreal height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the preferred height for row, <db:code role="parameter">row</db:code>, to <db:code role="parameter">height</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#rowPreferredHeight">rowPreferredHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowSpacing">
<db:title>void QGraphicsGridLayout::setRowSpacing(int <db:emphasis>row</db:emphasis>, qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRowSpacing</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRowSpacing(int row, qreal spacing)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the spacing for <db:code role="parameter">row</db:code> to <db:code role="parameter">spacing</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#rowSpacing">rowSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRowStretchFactor">
<db:title>void QGraphicsGridLayout::setRowStretchFactor(int <db:emphasis>row</db:emphasis>, int <db:emphasis>stretch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRowStretchFactor</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRowStretchFactor(int row, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the stretch factor for <db:code role="parameter">row</db:code> to <db:code role="parameter">stretch</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#rowStretchFactor">rowStretchFactor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSpacing">
<db:title>void QGraphicsGridLayout::setSpacing(qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSpacing</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSpacing(qreal spacing)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the grid layout's default spacing, both vertical and horizontal, to <db:code role="parameter">spacing</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#rowSpacing">rowSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#columnSpacing">columnSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalSpacing">
<db:title>void QGraphicsGridLayout::setVerticalSpacing(qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVerticalSpacing</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVerticalSpacing(qreal spacing)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the default vertical spacing for the grid layout to <db:code role="parameter">spacing</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#verticalSpacing">verticalSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSizeF QGraphicsGridLayout::sizeHint(Qt::SizeHint <db:emphasis>which</db:emphasis>, const QSizeF &amp;<db:emphasis>constraint</db:emphasis> = QSizeF()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSizeF</db:type>
<db:methodname>sizeHint</db:methodname>
<db:methodparam>
<db:type>Qt::SizeHint</db:type>
<db:parameter>which</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSizeF &amp;</db:type>
<db:parameter>constraint</db:parameter>
<db:initializer>QSizeF()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizeF sizeHint(Qt::SizeHint which, const QSizeF &amp;constraint) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayoutitem.xml#sizeHint" role="function">QGraphicsLayoutItem::sizeHint(Qt::SizeHint which, const QSizeF &amp;constraint) const</db:link>.</db:para>
</db:section>
<db:section xml:id="verticalSpacing">
<db:title>qreal QGraphicsGridLayout::verticalSpacing() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>verticalSpacing</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal verticalSpacing() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default vertical spacing for the grid layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setVerticalSpacing">setVerticalSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
