<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Wireframe QML Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt 3D QML application that implements a single-pass wireframe rendering method.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2014 Klaralvdalens Datakonsult AB (KDAB).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the Qt3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL3$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file. Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

import Qt3D.Core 2.0
import Qt3D.Render 2.0

Effect {
    id: root

    parameters: [
        Parameter { name: &quot;ambient&quot;;   value: Qt.vector3d( 0.1, 0.1, 0.1 ) },
        Parameter { name: &quot;diffuse&quot;;   value: Qt.vector3d( 0.7, 0.7, 0.7 ) },
        Parameter { name: &quot;specular&quot;;  value: Qt.vector3d( 0.95, 0.95, 0.95 ) },
        Parameter { name: &quot;shininess&quot;; value: 150.0 }
    ]

    techniques: [
        Technique {
            graphicsApiFilter {
                api: GraphicsApiFilter.OpenGL
                profile: GraphicsApiFilter.CoreProfile
                majorVersion: 3
                minorVersion: 1
            }

            annotations: [ Annotation { name: &quot;renderingStyle&quot;; value: &quot;forward&quot; } ]

            parameters: [
                Parameter { name: &quot;light.position&quot;; value: Qt.vector4d( 0.0, 0.0, 0.0, 1.0 ) },
                Parameter { name: &quot;light.intensity&quot;; value: Qt.vector3d( 1.0, 1.0, 1.0 ) },
                Parameter { name: &quot;line.width&quot;; value: 1.0 },
                Parameter { name: &quot;line.color&quot;; value: Qt.vector4d( 1.0, 1.0, 1.0, 1.0 ) }
            ]

            renderPasses: [
                RenderPass {

                    bindings: [
                        ParameterMapping { parameterName: &quot;ambient&quot;;  shaderVariableName: &quot;ka&quot;; bindingType: ParameterMapping.Uniform },
                        ParameterMapping { parameterName: &quot;diffuse&quot;;  shaderVariableName: &quot;kd&quot;; bindingType: ParameterMapping.Uniform },
                        ParameterMapping { parameterName: &quot;specular&quot;; shaderVariableName: &quot;ks&quot;; bindingType: ParameterMapping.Uniform }
                    ]

                    shaderProgram: ShaderProgram {
                        vertexShaderCode:   loadSource(&quot;qrc:/shaders/robustwireframe.vert&quot;)
                        geometryShaderCode: loadSource(&quot;qrc:/shaders/robustwireframe.geom&quot;)
                        fragmentShaderCode: loadSource(&quot;qrc:/shaders/robustwireframe.frag&quot;)
                    }
                }
            ]
        }
    ]
}

</db:programlisting>
</db:article>
