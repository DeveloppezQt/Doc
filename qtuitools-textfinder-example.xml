<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Text Finder Example</db:title>
<db:productname>QtUiTools</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt UI Tools Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Dynamically loading .ui files using <db:link xlink:href="quiloader.xml">QUiLoader</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The TextFinder example shows how to load and setup a <db:code>.ui</db:code> file dynamically using the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class that is part of the <db:link xlink:href="qtuitools-index.xml">Qt UI Tools</db:link> library.</db:para>
<db:para>The program allows the user to look up a particular word within the contents of a text. The visual elements and layout of the user interface is loaded at runtime, from a the program resources.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/textfinder-example-find.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/textfinder-example-find2.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="setting-up-the-resource-file">
<db:title>Setting Up The Resource File</db:title>
<db:para>The resources required for the example are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>textfinder.ui</db:code> - the user interface file created in <db:link xlink:href="qtdesigner-index.xml">Qt Designer</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>input.txt</db:code> - a text file containing some text to be displayed in a <db:link xlink:href="qtextedit.xml">QTextEdit</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:code>textfinder.ui</db:code> contains all the necessary <db:link xlink:href="qwidget.xml">QWidget</db:link> objects for the Text Finder. A <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> is used for the user input, a <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> is used to display the contents of <db:code>input.txt</db:code>, a <db:link xlink:href="qlabel.xml">QLabel</db:link> is used to display the text &quot;Keyword&quot;, and a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> is used for the <db:guilabel>Find</db:guilabel> button. Note that all the widgets have sensible <db:code>objectName</db:code>'s assigned. These are used in code to identify them.</db:para>
<db:para>The screenshot below shows the preview obtained in <db:link xlink:href="qtdesigner-index.xml">Qt Designer</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/textfinder-example-userinterface.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In this example, we store both resources in the applicaton's executable by including the <db:code>textfinder.qrc</db:code> file. Alternatively, the files could also be loaded at runtime from the file system, or from an external binary resource <db:code>.rcc</db:code> file. For more information on resource files, see <db:link xlink:href="resources.xml">The Qt Resource System</db:link>.</db:para>
<db:para>The <db:code>textfinder.qrc</db:code> file lists all files that should be included as a resource:</db:para>
<db:programlisting language="cpp">&amp;lt;!DOCTYPE RCC&amp;gt;&amp;lt;RCC version=&quot;1.0&quot;&amp;gt;
&amp;lt;qresource&amp;gt;
    &amp;lt;file&amp;gt;forms/textfinder.ui&amp;lt;/file&amp;gt;
    &amp;lt;file&amp;gt;forms/input.txt&amp;lt;/file&amp;gt;
&amp;lt;/qresource&amp;gt;
&amp;lt;/RCC&amp;gt;
</db:programlisting>
<db:para>To generate a form at run-time, the example is linked against the <db:link xlink:href="qtuitools-index.xml">Qt Ui Tools</db:link> library. This is done in the <db:code>textfinder.pro</db:code> file:</db:para>
<db:programlisting language="cpp">QT += widgets uitools

HEADERS = textfinder.h
SOURCES = textfinder.cpp main.cpp
RESOURCES = textfinder.qrc
</db:programlisting>
</db:section>
<db:section xml:id="textfinder-class-definition">
<db:title>TextFinder Class Definition</db:title>
<db:para>The <db:code>TextFinder</db:code> class contains the main user interface. It declares pointers to the <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>, <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> and <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> elements described above. The <db:link xlink:href="qlabel.xml">QLabel</db:link> in the user interface is not declared here as we do not need to access it from code.</db:para>
<db:programlisting language="cpp">class TextFinder : public QWidget
{
    Q_OBJECT

public:
    explicit TextFinder(QWidget *parent = nullptr);

private slots:
    void on_findButton_clicked();

private:
    QPushButton *ui_findButton;
    QTextEdit *ui_textEdit;
    QLineEdit *ui_lineEdit;
};
</db:programlisting>
<db:para>The slot <db:code>on_findButton_clicked()</db:code> is a slot named according to the <db:link xlink:href="designer-using-a-ui-file.xml#automatic-connections">Automatic Connection</db:link> naming convention required by <db:code>uic</db:code>.</db:para>
</db:section>
<db:section xml:id="loading-the-resources">
<db:title>Loading the Resources</db:title>
<db:para>We use <db:link xlink:href="qfile.xml">QFile</db:link> to load the data from the program resources at runtime. The code for this is in two method methods on top of <db:code>textfinder.cpp</db:code>: <db:code>loadUiFile</db:code> and <db:code>loadTextFile</db:code>.</db:para>
<db:para>The <db:code>loadUiFile</db:code> function loads the user interface file previously created in <db:link xlink:href="qtdesigner-index.xml">Qt Designer</db:link>. First, the content of the <db:code>textfinder.ui</db:code> file is loaded from the resource system. Then a <db:link xlink:href="quiloader.xml">QUiLoader</db:link> instance is created, and the <db:link xlink:href="quiloader.xml#load">QUiLoader::load</db:link>() function is called, with the first argument being the open file, and the second argument being the pointer of the widget that should be set as the parent. The created <db:link xlink:href="qwidget.xml">QWidget</db:link> is returned.</db:para>
<db:programlisting language="cpp">static QWidget *loadUiFile(QWidget *parent)
{
    QFile file(&quot;:/forms/textfinder.ui&quot;);
    file.open(QIODevice::ReadOnly);

    QUiLoader loader;
    return loader.load(&amp;amp;file, parent);
}
</db:programlisting>
<db:para>In a similar vein, the <db:code>loadTextFile</db:code> function loads <db:code>input.txt</db:code> from the resources. Data is read using <db:link xlink:href="qtextstream.xml">QTextStream</db:link> into a <db:link xlink:href="qstring.xml">QString</db:link> with the <db:link xlink:href="qtextstream.xml#readAll">QTextStream::readAll</db:link>() function. We explicitly set the encoding to <db:emphasis>UTF-8</db:emphasis>, because <db:link xlink:href="qtextstream.xml">QTextStream</db:link> by default uses the current system locale. Finally, the loaded text is returned.</db:para>
<db:programlisting language="cpp">static QString loadTextFile()
{
    QFile inputFile(&quot;:/forms/input.txt&quot;);
    inputFile.open(QIODevice::ReadOnly);
    QTextStream in(&amp;amp;inputFile);
    return in.readAll();
}
</db:programlisting>
</db:section>
<db:section xml:id="textfinder-class-implementation">
<db:title>TextFinder Class Implementation</db:title>
<db:para>The <db:code>TextFinder</db:code> class's constructor does not instantiate any child widgets directly. Instead, it calls the <db:code>loadUiFile()</db:code> function, and then uses <db:link xlink:href="qobject.xml#findChild">QObject::findChild</db:link>() to locate the created <db:link xlink:href="qwidget.xml">QWidget</db:link>s by object name.</db:para>
<db:programlisting language="cpp">TextFinder::TextFinder(QWidget *parent)
    : QWidget(parent)
{
    QWidget *formWidget = loadUiFile(this);

    ui_findButton = findChild&amp;lt;QPushButton*&amp;gt;(&quot;findButton&quot;);
    ui_textEdit = findChild&amp;lt;QTextEdit*&amp;gt;(&quot;textEdit&quot;);
    ui_lineEdit = findChild&amp;lt;QLineEdit*&amp;gt;(&quot;lineEdit&quot;);
</db:programlisting>
<db:para>We then use <db:link xlink:href="qmetaobject.xml#connectSlotsByName">QMetaObject::connectSlotsByName</db:link>() to enable the automatic calling of the <db:code>on_findButton_clicked()</db:code> slot.</db:para>
<db:programlisting language="cpp">    QMetaObject::connectSlotsByName(this);
</db:programlisting>
<db:para>The <db:code>loadTextFile</db:code> function is called to get the text to be shown in the <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>.</db:para>
<db:programlisting language="cpp">    ui_textEdit-&amp;gt;setText(loadTextFile());
</db:programlisting>
<db:para>The dynamically loaded user interface in <db:code>formWidget</db:code> is now properly set up. We now embed <db:code>formWidget</db:code> through a <db:code>QVBoxLayout</db:code>.</db:para>
<db:programlisting language="cpp">    QVBoxLayout *layout = new QVBoxLayout;
    layout-&amp;gt;addWidget(formWidget);
    setLayout(layout);
</db:programlisting>
<db:para>At the end of the constructor we set a window title.</db:para>
<db:programlisting language="cpp">    setWindowTitle(tr(&quot;Text Finder&quot;));
}
</db:programlisting>
<db:para>The <db:code>on_findButton_clicked()</db:code> function is a slot that is connected to <db:code>ui_findButton</db:code>'s <db:code>clicked()</db:code> signal. The <db:code>searchString</db:code> is extracted from the <db:code>ui_lineEdit</db:code> and the <db:code>document</db:code> is extracted from <db:code>ui_textEdit</db:code>. If there is an empty <db:code>searchString</db:code>, a <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> is used, requesting the user to enter a word. Otherwise, we traverse through the words in <db:code>ui_textEdit</db:code>, and highlight all ocurrences of the <db:code>searchString</db:code>. Two <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> objects are used: One to traverse through the words in <db:code>line</db:code> and another to keep track of the edit blocks.</db:para>
<db:programlisting language="cpp">void TextFinder::on_findButton_clicked()
{
    QString searchString = ui_lineEdit-&amp;gt;text();
    QTextDocument *document = ui_textEdit-&amp;gt;document();

    bool found = false;

    // undo previous change (if any)
    document-&amp;gt;undo();

    if (searchString.isEmpty()) {
        QMessageBox::information(this, tr(&quot;Empty Search Field&quot;),
                                 tr(&quot;The search field is empty. &quot;
                                    &quot;Please enter a word and click Find.&quot;));
    } else {
        QTextCursor highlightCursor(document);
        QTextCursor cursor(document);

        cursor.beginEditBlock();

        QTextCharFormat plainFormat(highlightCursor.charFormat());
        QTextCharFormat colorFormat = plainFormat;
        colorFormat.setForeground(Qt::red);

        while (!highlightCursor.isNull() &amp;amp;&amp;amp; !highlightCursor.atEnd()) {
            highlightCursor = document-&amp;gt;find(searchString, highlightCursor,
                                             QTextDocument::FindWholeWords);

            if (!highlightCursor.isNull()) {
                found = true;
                highlightCursor.movePosition(QTextCursor::WordRight,
                                             QTextCursor::KeepAnchor);
                highlightCursor.mergeCharFormat(colorFormat);
            }
        }

        cursor.endEditBlock();
</db:programlisting>
<db:para>The <db:code>found</db:code> flag is used to indicate if the <db:code>searchString</db:code> was found within the contents of <db:code>ui_textEdit</db:code>. If it was not found, a <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> is used to inform the user.</db:para>
<db:programlisting language="cpp">        if (found == false) {
            QMessageBox::information(this, tr(&quot;Word Not Found&quot;),
                                     tr(&quot;Sorry, the word cannot be found.&quot;));
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="main-function">
<db:title><db:code>main()</db:code> Function</db:title>
<db:para>The <db:code>main()</db:code> function instantiates and shows <db:code>TextFinder</db:code>.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    TextFinder textFinder;
    textFinder.show();

    return app.exec();
}
</db:programlisting>
<db:para>There are various approaches to include forms into applications. Using QUILoader is just one of them. See <db:link xlink:href="designer-using-a-ui-file.xml">Using a Designer UI File in Your Application</db:link> for more information on the other approaches available.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qttools.git/tree/examples/uitools/textfinder?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtdesigner-calculatorbuilder-example.xml">Calculator Builder Example</db:link></db:member>
<db:member><db:link xlink:href="qtdesigner-worldtimeclockbuilder-example.xml">World Time Clock Builder Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
