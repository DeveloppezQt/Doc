<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Text Finder Example</db:title>
<db:productname>QtUiTools</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt UI Tools Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Dynamically processing forms using Qt UI Tools.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Dynamic form processing enables a form to be processed at run-time only by changing the UI file for the project. The program allows the user to look up a particular word within the contents of a text file. This text file is included in the project's resource and is loaded into the display at startup.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/textfinder-example-find.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/textfinder-example-find2.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="setting-up-the-resource-file">
<db:title>Setting Up The Resource File</db:title>
<db:para>The resources required for Text Finder are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>textfinder.ui</db:emphasis> - the user interface file created in <db:link xlink:href="qtdesigner-module.xml">QtDesigner</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>input.txt</db:emphasis> - a text file containing some text to be displayed in the <db:link xlink:href="qtextedit.xml">QTextEdit</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:emphasis>textfinder.ui</db:emphasis> contains all the necessary <db:link xlink:href="qwidget.xml">QWidget</db:link> objects for the Text Finder. A <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> is used for the user input, a <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> is used to display the contents of <db:emphasis>input.txt</db:emphasis>, a <db:link xlink:href="qlabel.xml">QLabel</db:link> is used to display the text &quot;Keyword&quot;, and a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> is used for the &quot;Find&quot; button. The screenshot below shows the preview obtained in <db:link xlink:href="qtdesigner-module.xml">QtDesigner</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/textfinder-example-userinterface.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A <db:emphasis>textfinder.qrc</db:emphasis> file is used to store both the <db:emphasis>textfinder.ui</db:emphasis> and <db:emphasis>input.txt</db:emphasis> in the application's executable. The file contains the following code:</db:para>
<db:programlisting language="cpp">&lt;!DOCTYPE RCC&gt;&lt;RCC version=&quot;1.0&quot;&gt;
&lt;qresource&gt;
    &lt;file&gt;forms/textfinder.ui&lt;/file&gt;
    &lt;file&gt;forms/input.txt&lt;/file&gt;
&lt;/qresource&gt;
&lt;/RCC&gt;
</db:programlisting>
<db:para>For more information on resource files, see <db:link xlink:href="resources.xml">The Qt Resource System</db:link>.</db:para>
<db:para>To generate a form at run-time, the example is linked against the <db:link xlink:href="qtuitools-module.xml">QtUiTools</db:link> module library. This is done in the <db:code>textfinder.pro</db:code> file that contains the following lines:</db:para>
<db:programlisting language="cpp">QT          += uitools
HEADERS     = textfinder.h
RESOURCES   = textfinder.qrc
SOURCES     = textfinder.cpp main.cpp
</db:programlisting>
</db:section>
<db:section xml:id="textfinder-class-definition">
<db:title>TextFinder Class Definition</db:title>
<db:para>The <db:code>TextFinder</db:code> class is a subclass of <db:link xlink:href="qwidget.xml">QWidget</db:link> and it hosts the <db:link xlink:href="qwidget.xml">QWidget</db:link>s we need to access in the user interface. The <db:link xlink:href="qlabel.xml">QLabel</db:link> in the user interface is not declared here as we do not need to access it.</db:para>
<db:programlisting language="cpp">class TextFinder : public QWidget
{
    Q_OBJECT

public:
    TextFinder(QWidget *parent = 0);

private slots:
    void on_findButton_clicked();

private:
    QWidget* loadUiFile();
    void loadTextFile();

    QPushButton *ui_findButton;
    QTextEdit *ui_textEdit;
    QLineEdit *ui_lineEdit;
    bool isFirstTime;
};
</db:programlisting>
<db:para>The slot <db:code>on_findButton_clicked()</db:code> is a slot named according to the <db:link xlink:href="designer-using-a-ui-file.xml#automatic-connections">Automatic Connection</db:link> naming convention required by <db:code>uic</db:code>.</db:para>
</db:section>
<db:section xml:id="textfinder-class-implementation">
<db:title>TextFinder Class Implementation</db:title>
<db:para>The <db:code>TextFinder</db:code> class's constructor calls the <db:code>loadUiFile()</db:code> function and then uses <db:code>qFindChild()</db:code> to access the user interface's <db:link xlink:href="qwidget.xml">QWidget</db:link>s.</db:para>
<db:programlisting language="cpp">TextFinder::TextFinder(QWidget *parent)
    : QWidget(parent)
{
    QWidget *formWidget = loadUiFile();

    ui_findButton = findChild&lt;QPushButton*&gt;(&quot;findButton&quot;);
    ui_textEdit = findChild&lt;QTextEdit*&gt;(&quot;textEdit&quot;);
    ui_lineEdit = findChild&lt;QLineEdit*&gt;(&quot;lineEdit&quot;);
</db:programlisting>
<db:para>We then use <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>'s system to enable signal and slot connections.</db:para>
<db:programlisting language="cpp">    QMetaObject::connectSlotsByName(this);
</db:programlisting>
<db:para>The loadTextFile() function is called to load <db:code>input.txt</db:code> into <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> to displays its contents.</db:para>
<db:programlisting language="cpp">    loadTextFile();
</db:programlisting>
<db:para>The <db:code>TextFinder</db:code>'s layout is set with <db:link xlink:href="qwidget.xml#setLayout">setLayout</db:link>().</db:para>
<db:programlisting language="cpp">    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;addWidget(formWidget);
    setLayout(layout);
</db:programlisting>
<db:para>Finally, the window title is set to <db:emphasis>Text Finder</db:emphasis> and <db:code>isFirstTime</db:code> is set to true.</db:para>
<db:para><db:code>isFirstTime</db:code> is used as a flag to indicate whether the search operation has been performed more than once. This is further explained with the <db:code>on_findButton_clicked()</db:code> function.</db:para>
<db:para>The <db:code>loadUiFile()</db:code> function is used to load the user interface file previously created in <db:link xlink:href="qtdesigner-module.xml">QtDesigner</db:link>. The <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class is instantiated and its <db:code>load()</db:code> function is used to load the form into <db:code>formWidget</db:code> that acts as a place holder for the user interface. The function then returns <db:code>formWidget</db:code> to its caller.</db:para>
<db:programlisting language="cpp">QWidget* TextFinder::loadUiFile()
{
    QUiLoader loader;

    QFile file(&quot;:/forms/textfinder.ui&quot;);
    file.open(QFile::ReadOnly);

    QWidget *formWidget = loader.load(&amp;file, this);
    file.close();

    return formWidget;
}
</db:programlisting>
<db:para>As mentioned earlier, the loadTextFile() function loads <db:emphasis>input.txt</db:emphasis> into <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> to display its contents. Data is read using <db:link xlink:href="qtextstream.xml">QTextStream</db:link> into a <db:link xlink:href="qstring.xml">QString</db:link> object, <db:code>line</db:code> with the <db:link xlink:href="qtextstream.xml#readAll">QTextStream::readAll</db:link>() function. The contents of <db:code>line</db:code> are then appended to <db:code>ui_textEdit</db:code>.</db:para>
<db:programlisting language="cpp">void TextFinder::loadTextFile()
{
    QFile inputFile(&quot;:/forms/input.txt&quot;);
    inputFile.open(QIODevice::ReadOnly);
    QTextStream in(&amp;inputFile);
    QString line = in.readAll();
    inputFile.close();

    ui_textEdit-&gt;append(line);
    ui_textEdit-&gt;setUndoRedoEnabled(false);
    ui_textEdit-&gt;setUndoRedoEnabled(true);
}
</db:programlisting>
<db:para>The <db:code>on_findButton_clicked()</db:code> function is a slot that is connected to <db:code>ui_findButton</db:code>'s <db:code>clicked()</db:code> signal. The <db:code>searchString</db:code> is extracted from the <db:code>ui_lineEdit</db:code> and the <db:code>document</db:code> is extracted from <db:code>textEdit</db:code>. In event there is an empty <db:code>searchString</db:code>, a <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> is used, requesting the user to enter a word. Otherwise, we traverse through the words in <db:code>ui_textEdit</db:code>, and highlight all ocurrences of the <db:code>searchString</db:code> . Two <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> objects are used: One to traverse through the words in <db:code>line</db:code> and another to keep track of the edit blocks.</db:para>
<db:programlisting language="cpp">void TextFinder::on_findButton_clicked()
{
    QString searchString = ui_lineEdit-&gt;text();
    QTextDocument *document = ui_textEdit-&gt;document();

    bool found = false;

    if (isFirstTime == false)
        document-&gt;undo();

    if (searchString.isEmpty()) {
        QMessageBox::information(this, tr(&quot;Empty Search Field&quot;),
                &quot;The search field is empty. Please enter a word and click Find.&quot;);
    } else {

        QTextCursor highlightCursor(document);
        QTextCursor cursor(document);

        cursor.beginEditBlock();

        QTextCharFormat plainFormat(highlightCursor.charFormat());
        QTextCharFormat colorFormat = plainFormat;
        colorFormat.setForeground(Qt::red);

        while (!highlightCursor.isNull() &amp;&amp; !highlightCursor.atEnd()) {
            highlightCursor = document-&gt;find(searchString, highlightCursor, QTextDocument::FindWholeWords);

            if (!highlightCursor.isNull()) {
                found = true;
                highlightCursor.movePosition(QTextCursor::WordRight,
                                       QTextCursor::KeepAnchor);
                highlightCursor.mergeCharFormat(colorFormat);
            }
        }

        cursor.endEditBlock();
</db:programlisting>
<db:para>The <db:code>isFirstTime</db:code> flag is set to false the moment <db:code>findButton</db:code> is clicked. This is necessary to undo the previous text highlight before highlighting the user's next search string. Also, the <db:code>found</db:code> flag is used to indicate if the <db:code>searchString</db:code> was found within the contents of <db:code>ui_textEdit</db:code>. If it was not found, a <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> is used to inform the user.</db:para>
<db:programlisting language="cpp">        isFirstTime = false;

        if (found == false) {
            QMessageBox::information(this, tr(&quot;Word Not Found&quot;),
                &quot;Sorry, the word cannot be found.&quot;);
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="main-function">
<db:title><db:code>main()</db:code> Function</db:title>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    Q_INIT_RESOURCE(textfinder);
    QApplication app(argc, argv);

    TextFinder *textFinder = new TextFinder;
    textFinder-&gt;show();

    return app.exec();
}
</db:programlisting>
<db:para>The <db:code>main()</db:code> function initialises the <db:emphasis>textfinder.qrc</db:emphasis> resource file and instantiates as well as displays <db:code>TextFinder</db:code>.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="textfinder/forms/textfinder.ui">textfinder/forms/textfinder.ui</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="textfinder/main.cpp">textfinder/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="textfinder/textfinder.cpp">textfinder/textfinder.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="textfinder/textfinder.h">textfinder/textfinder.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="textfinder/textfinder.pro">textfinder/textfinder.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="textfinder/textfinder.qrc">textfinder/textfinder.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtdesigner-calculatorbuilder-example.xml">Calculator Builder Example</db:link></db:member>
<db:member><db:link xlink:href="qtdesigner-worldtimeclockbuilder-example.xml">World Time Clock Builder Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:article>
