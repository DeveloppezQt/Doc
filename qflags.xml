<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFlags Class</db:title>
<db:subtitle>template &lt;typename Enum&gt; class QFlags</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qflags.xml">QFlags</db:link> class provides a type-safe way of storing OR-combinations of enum values.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFlags</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFlags is part of <db:simplelist><db:member>tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Enum&gt; class is a template class, where Enum is an enum type. <db:link xlink:href="qflags.xml">QFlags</db:link> is used throughout Qt for storing combinations of enum values.</db:para>
<db:para>The traditional C++ approach for storing OR-combinations of enum values is to use an <db:code>int</db:code> or <db:code>uint</db:code> variable. The inconvenience with this approach is that there's no type checking at all; any enum value can be OR'd with any other enum value and passed on to a function that takes an <db:code>int</db:code> or <db:code>uint</db:code>.</db:para>
<db:para>Qt uses <db:link xlink:href="qflags.xml">QFlags</db:link> to provide type safety. For example, the <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link> type is simply a typedef for <db:link xlink:href="qflags.xml">QFlags</db:link>&lt;<db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link>&gt;. <db:link xlink:href="qlabel.xml#alignment-prop">QLabel::setAlignment</db:link>() takes a <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link> parameter, which means that any combination of <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link> values, or 0, is legal:</db:para>
<db:programlisting language="cpp">label-&amp;gt;setAlignment(Qt::AlignLeft | Qt::AlignTop);
</db:programlisting>
<db:para>If you try to pass a value from another enum or just a plain integer other than 0, the compiler will report an error. If you need to cast integer values to flags in a untyped fashion, you can use the explicit <db:link xlink:href="qflags.xml">QFlags</db:link> constructor as cast operator.</db:para>
<db:para>If you want to use <db:link xlink:href="qflags.xml">QFlags</db:link> for your own enum types, use the <db:link xlink:href="qflags.xml#Q_DECLARE_FLAGS">Q_DECLARE_FLAGS</db:link>() and <db:link xlink:href="qflags.xml#Q_DECLARE_OPERATORS_FOR_FLAGS">Q_DECLARE_OPERATORS_FOR_FLAGS</db:link>().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">class MyClass
{
public:
    enum Option {
        NoOptions = 0x0,
        ShowTabs = 0x1,
        ShowAll = 0x2,
        SqueezeBlank = 0x4
    };
    Q_DECLARE_FLAGS(Options, Option)
    ...
};

Q_DECLARE_OPERATORS_FOR_FLAGS(MyClass::Options)
</db:programlisting>
<db:para>You can then use the <db:code>MyClass::Options</db:code> type to store combinations of <db:code>MyClass::Option</db:code> values.</db:para>
<db:section xml:id="flags-and-the-meta-object-system">
<db:title>Flags and the Meta-Object System</db:title>
<db:para>The <db:link xlink:href="qflags.xml#Q_DECLARE_FLAGS">Q_DECLARE_FLAGS</db:link>() macro does not expose the flags to the meta-object system, so they cannot be used by Qt Script or edited in Qt Designer. To make the flags available for these purposes, the <db:link xlink:href="qobject.xml#Q_FLAG">Q_FLAG</db:link>() macro must be used:</db:para>
<db:programlisting language="cpp">Q_FLAG(Options)
</db:programlisting>
</db:section>
<db:section xml:id="naming-convention">
<db:title>Naming Convention</db:title>
<db:para>A sensible naming convention for enum types and associated <db:link xlink:href="qflags.xml">QFlags</db:link> types is to give a singular name to the enum type (e.g., <db:code>Option</db:code>) and a plural name to the <db:link xlink:href="qflags.xml">QFlags</db:link> type (e.g., <db:code>Options</db:code>). When a singular name is desired for the <db:link xlink:href="qflags.xml">QFlags</db:link> type (e.g., <db:code>Alignment</db:code>), you can use <db:code>Flag</db:code> as the suffix for the enum type (e.g., <db:code>AlignmentFlag</db:code>).</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflag.xml">QFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Int-typedef">
<db:title>[since 5.0] QFlags::Int</db:title>
<db:typedefsynopsis>
<db:typedefname>Int</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for the integer type used for storage as well as for implicit conversion. Either <db:code>int</db:code> or <db:code>unsigned int</db:code>, depending on whether the enum's underlying type is signed or unsigned.</db:para>
<db:para>This typedef was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="enum_type-typedef">
<db:title>QFlags::enum_type</db:title>
<db:typedefsynopsis>
<db:typedefname>enum_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for the Enum template type.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFlags">
<db:title>QFlags::QFlags(const QFlags&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFlags</db:methodname>
<db:methodparam>
<db:type>const QFlags&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags(const QFlags&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QFlags-1">
<db:title>QFlags::QFlags(Enum <db:emphasis>flags</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFlags</db:methodname>
<db:methodparam>
<db:type>Enum</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags(Enum flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qflags.xml">QFlags</db:link> object storing the <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="QFlags-2">
<db:title>QFlags::QFlags(<db:emphasis>QFlags::Zero</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFlags</db:methodname>
<db:methodparam>
<db:type>QFlags::Zero</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags(QFlags::Zero)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qflags.xml">QFlags</db:link> object with no flags set. The parameter must be a literal 0 value.</db:para>
</db:section>
<db:section xml:id="QFlags-3">
<db:title>QFlags::QFlags(QFlag <db:emphasis>flag</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFlags</db:methodname>
<db:methodparam>
<db:type>QFlag</db:type>
<db:parameter>flag</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags(QFlag flag)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qflags.xml">QFlags</db:link> object initialized with the integer <db:code role="parameter">flag</db:code>.</db:para>
<db:para>The <db:link xlink:href="qflag.xml">QFlag</db:link> type is a helper type. By using it here instead of <db:code>int</db:code>, we effectively ensure that arbitrary enum values cannot be cast to a <db:link xlink:href="qflags.xml">QFlags</db:link>, whereas untyped enum values (i.e., <db:code>int</db:code> values) can.</db:para>
</db:section>
<db:section xml:id="QFlags-4">
<db:title>[since 5.4] QFlags::QFlags(std::initializer_list&lt;Enum&gt; <db:emphasis>flags</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFlags</db:methodname>
<db:methodparam>
<db:type>std::initializer_list&lt;Enum&gt;</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags(std::initializer_list&lt;Enum&gt; flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qflags.xml">QFlags</db:link> object initialized with all <db:code role="parameter">flags</db:code> combined using the bitwise OR operator.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-7c-eq">operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7c">operator|</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlag">
<db:title>[since 5.7] QFlags&lt;T&gt; &amp;QFlags::setFlag(Enum <db:emphasis>flag</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:type>QFlags&lt;T&gt; &amp;</db:type>
<db:methodname>setFlag</db:methodname>
<db:methodparam>
<db:type>Enum</db:type>
<db:parameter>flag</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; &amp; setFlag(Enum flag, bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the flag <db:code role="parameter">flag</db:code> if <db:code role="parameter">on</db:code> is <db:code>true</db:code> or unsets it if <db:code role="parameter">on</db:code> is <db:code>false</db:code>. Returns a reference to this object.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="testFlag">
<db:title>[since 4.2] bool QFlags::testFlag(Enum <db:emphasis>flag</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>testFlag</db:methodname>
<db:methodparam>
<db:type>Enum</db:type>
<db:parameter>flag</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool testFlag(Enum flag) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the flag <db:code role="parameter">flag</db:code> is set, otherwise <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="operator-QFlags-3a-3aInt">
<db:title>QFlags::Int QFlags::operator QFlags::Int() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFlags::Int</db:type>
<db:methodname>operator QFlags::Int</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags::Int operator QFlags::Int() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value stored in the <db:link xlink:href="qflags.xml">QFlags</db:link> object as an integer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#Int-typedef">Int</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not">
<db:title>bool QFlags::operator!() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if no flag is set (i.e., if the value stored by the <db:link xlink:href="qflags.xml">QFlags</db:link> object is 0); otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-and">
<db:title>QFlags&lt;T&gt; QFlags::operator&amp;(int <db:emphasis>mask</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFlags&lt;T&gt;</db:type>
<db:methodname>operator&amp;</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mask</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; operator&amp;(int mask) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qflags.xml">QFlags</db:link> object containing the result of the bitwise AND operation on this object and <db:code role="parameter">mask</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-5e">operator^</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7e">operator~</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-and-1">
<db:title>QFlags&lt;T&gt; QFlags::operator&amp;(uint <db:emphasis>mask</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFlags&lt;T&gt;</db:type>
<db:methodname>operator&amp;</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>mask</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; operator&amp;(uint mask) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-and-2">
<db:title>QFlags&lt;T&gt; QFlags::operator&amp;(Enum <db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFlags&lt;T&gt;</db:type>
<db:methodname>operator&amp;</db:methodname>
<db:methodparam>
<db:type>Enum</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; operator&amp;(Enum other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-and-eq">
<db:title>QFlags&lt;T&gt; &amp;QFlags::operator&amp;=(int <db:emphasis>mask</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFlags&lt;T&gt; &amp;</db:type>
<db:methodname>operator&amp;=</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>mask</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; &amp; operator&amp;=(int mask)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs a bitwise AND operation with <db:code role="parameter">mask</db:code> and stores the result in this <db:link xlink:href="qflags.xml">QFlags</db:link> object. Returns a reference to this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7c-eq">operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-5e-eq">operator^=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-and-eq-1">
<db:title>QFlags&lt;T&gt; &amp;QFlags::operator&amp;=(uint <db:emphasis>mask</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFlags&lt;T&gt; &amp;</db:type>
<db:methodname>operator&amp;=</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>mask</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; &amp; operator&amp;=(uint mask)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-and-eq-2">
<db:title>QFlags&lt;T&gt; &amp;QFlags::operator&amp;=(Enum <db:emphasis>mask</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFlags&lt;T&gt; &amp;</db:type>
<db:methodname>operator&amp;=</db:methodname>
<db:methodparam>
<db:type>Enum</db:type>
<db:parameter>mask</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; &amp; operator&amp;=(Enum mask)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QFlags&lt;T&gt; &amp;QFlags::operator=(const QFlags&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFlags&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QFlags&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; &amp; operator=(const QFlags&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this object and returns a reference to this object.</db:para>
</db:section>
<db:section xml:id="operator-5e">
<db:title>QFlags&lt;T&gt; QFlags::operator^(QFlags&lt;T&gt; <db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFlags&lt;T&gt;</db:type>
<db:methodname>operator^</db:methodname>
<db:methodparam>
<db:type>QFlags&lt;T&gt;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; operator^(QFlags&lt;T&gt; other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qflags.xml">QFlags</db:link> object containing the result of the bitwise XOR operation on this object and <db:code role="parameter">other</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-5e-eq">operator^=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7e">operator~</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5e-1">
<db:title>QFlags&lt;T&gt; QFlags::operator^(Enum <db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFlags&lt;T&gt;</db:type>
<db:methodname>operator^</db:methodname>
<db:methodparam>
<db:type>Enum</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; operator^(Enum other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-5e-eq">
<db:title>QFlags&lt;T&gt; &amp;QFlags::operator^=(QFlags&lt;T&gt; <db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFlags&lt;T&gt; &amp;</db:type>
<db:methodname>operator^=</db:methodname>
<db:methodparam>
<db:type>QFlags&lt;T&gt;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; &amp; operator^=(QFlags&lt;T&gt; other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs a bitwise XOR operation with <db:code role="parameter">other</db:code> and stores the result in this <db:link xlink:href="qflags.xml">QFlags</db:link> object. Returns a reference to this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-5e">operator^</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7c-eq">operator|=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5e-eq-1">
<db:title>QFlags&lt;T&gt; &amp;QFlags::operator^=(Enum <db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFlags&lt;T&gt; &amp;</db:type>
<db:methodname>operator^=</db:methodname>
<db:methodparam>
<db:type>Enum</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; &amp; operator^=(Enum other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-7c">
<db:title>QFlags&lt;T&gt; QFlags::operator|(QFlags&lt;T&gt; <db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFlags&lt;T&gt;</db:type>
<db:methodname>operator|</db:methodname>
<db:methodparam>
<db:type>QFlags&lt;T&gt;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; operator|(QFlags&lt;T&gt; other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qflags.xml">QFlags</db:link> object containing the result of the bitwise OR operation on this object and <db:code role="parameter">other</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-7c-eq">operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-5e">operator^</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7e">operator~</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c-1">
<db:title>QFlags&lt;T&gt; QFlags::operator|(Enum <db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFlags&lt;T&gt;</db:type>
<db:methodname>operator|</db:methodname>
<db:methodparam>
<db:type>Enum</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; operator|(Enum other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-7c-eq">
<db:title>QFlags&lt;T&gt; &amp;QFlags::operator|=(QFlags&lt;T&gt; <db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFlags&lt;T&gt; &amp;</db:type>
<db:methodname>operator|=</db:methodname>
<db:methodparam>
<db:type>QFlags&lt;T&gt;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; &amp; operator|=(QFlags&lt;T&gt; other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs a bitwise OR operation with <db:code role="parameter">other</db:code> and stores the result in this <db:link xlink:href="qflags.xml">QFlags</db:link> object. Returns a reference to this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-5e-eq">operator^=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c-eq-1">
<db:title>QFlags&lt;T&gt; &amp;QFlags::operator|=(Enum <db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QFlags&lt;T&gt; &amp;</db:type>
<db:methodname>operator|=</db:methodname>
<db:methodparam>
<db:type>Enum</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; &amp; operator|=(Enum other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-7e">
<db:title>QFlags&lt;T&gt; QFlags::operator~() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFlags&lt;T&gt;</db:type>
<db:methodname>operator~</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFlags&lt;T&gt; operator~() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qflags.xml">QFlags</db:link> object that contains the bitwise negation of this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-5e">operator^</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_DECLARE_FLAGS">
<db:title>Q_DECLARE_FLAGS(<db:emphasis>Flags</db:emphasis>, <db:emphasis>Enum</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_DECLARE_FLAGS</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>Flags</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>Enum</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_DECLARE_FLAGS(Flags, Enum)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The Q_DECLARE_FLAGS() macro expands to</db:para>
<db:programlisting language="cpp">typedef QFlags&amp;lt;Enum&amp;gt; Flags;
</db:programlisting>
<db:para><db:code role="parameter">Enum</db:code> is the name of an existing enum type, whereas <db:code role="parameter">Flags</db:code> is the name of the <db:link xlink:href="qflags.xml">QFlags</db:link>&lt;<db:emphasis>Enum</db:emphasis>&gt; typedef.</db:para>
<db:para>See the <db:link xlink:href="qflags.xml">QFlags</db:link> documentation for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#Q_DECLARE_OPERATORS_FOR_FLAGS">Q_DECLARE_OPERATORS_FOR_FLAGS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECLARE_OPERATORS_FOR_FLAGS">
<db:title>Q_DECLARE_OPERATORS_FOR_FLAGS(<db:emphasis>Flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_DECLARE_OPERATORS_FOR_FLAGS</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>Flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_DECLARE_OPERATORS_FOR_FLAGS(Flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The Q_DECLARE_OPERATORS_FOR_FLAGS() macro declares global <db:code>operator|()</db:code> functions for <db:code role="parameter">Flags</db:code>, which is of type <db:link xlink:href="qflags.xml">QFlags</db:link>&lt;T&gt;.</db:para>
<db:para>See the <db:link xlink:href="qflags.xml">QFlags</db:link> documentation for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#Q_DECLARE_FLAGS">Q_DECLARE_FLAGS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
