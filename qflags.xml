<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QFlags Class</db:title>
<db:subtitle>template &lt;typename Enum&gt; class QFlags</db:subtitle>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qflags.xml">QFlags</db:link> class provides a type-safe way of storing OR-combinations of enum values.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFlags</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFlags is part of <db:simplelist><db:member>tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Enum&gt; class is a template class, where Enum is an enum type. <db:link xlink:href="qflags.xml">QFlags</db:link> is used throughout Qt for storing combinations of enum values.</db:para>
<db:para>The traditional C++ approach for storing OR-combinations of enum values is to use an <db:code>int</db:code> or <db:code>uint</db:code> variable. The inconvenience with this approach is that there's no type checking at all; any enum value can be OR'd with any other enum value and passed on to a function that takes an <db:code>int</db:code> or <db:code>uint</db:code>.</db:para>
<db:para>Qt uses <db:link xlink:href="qflags.xml">QFlags</db:link> to provide type safety. For example, the <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link> type is simply a typedef for <db:link xlink:href="qflags.xml">QFlags</db:link>&lt;<db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link>&gt;. QLabel::setAlignment() takes a <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link> parameter, which means that any combination of <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link> values, or 0, is legal:</db:para>
<db:programlisting language="cpp">label-&gt;setAlignment(Qt::AlignLeft | Qt::AlignTop);
</db:programlisting>
<db:para>If you try to pass a value from another enum or just a plain integer other than 0, the compiler will report an error. If you need to cast integer values to flags in a untyped fashion, you can use the explicit <db:link xlink:href="qflags.xml">QFlags</db:link> constructor as cast operator.</db:para>
<db:para>If you want to use <db:link xlink:href="qflags.xml">QFlags</db:link> for your own enum types, use the <db:link xlink:href="qflags.xml#Q_DECLARE_FLAGS">Q_DECLARE_FLAGS</db:link>() and <db:link xlink:href="qflags.xml#Q_DECLARE_OPERATORS_FOR_FLAGS">Q_DECLARE_OPERATORS_FOR_FLAGS</db:link>().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">class MyClass
{
public:
    enum Option {
        NoOptions = 0x0,
        ShowTabs = 0x1,
        ShowAll = 0x2,
        SqueezeBlank = 0x4
    };
    Q_DECLARE_FLAGS(Options, Option)
    ...
};

Q_DECLARE_OPERATORS_FOR_FLAGS(MyClass::Options)
</db:programlisting>
<db:para>You can then use the <db:code>MyClass::Options</db:code> type to store combinations of <db:code>MyClass::Option</db:code> values.</db:para>
<db:section xml:id="flags-and-the-meta-object-system">
<db:title>Flags and the Meta-Object System</db:title>
<db:para>The <db:link xlink:href="qflags.xml#Q_DECLARE_FLAGS">Q_DECLARE_FLAGS</db:link>() macro does not expose the flags to the meta-object system, so they cannot be used by Qt Script or edited in Qt Designer. To make the flags available for these purposes, the <db:link xlink:href="qobject.xml#Q_FLAGS">Q_FLAGS</db:link>() macro must be used:</db:para>
<db:programlisting language="cpp">Q_FLAGS(Options)
</db:programlisting>
</db:section>
<db:section xml:id="naming-convention">
<db:title>Naming Convention</db:title>
<db:para>A sensible naming convention for enum types and associated <db:link xlink:href="qflags.xml">QFlags</db:link> types is to give a singular name to the enum type (e.g., <db:code>Option</db:code>) and a plural name to the <db:link xlink:href="qflags.xml">QFlags</db:link> type (e.g., <db:code>Options</db:code>). When a singular name is desired for the <db:link xlink:href="qflags.xml">QFlags</db:link> type (e.g., <db:code>Alignment</db:code>), you can use <db:code>Flag</db:code> as the suffix for the enum type (e.g., <db:code>AlignmentFlag</db:code>).</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflag.xml">QFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Int-typedef">
<db:title>[since 5.0] QFlags::Int</db:title>
<db:para>Typedef for the integer type used for storage as well as for implicit conversion. Either <db:code>int</db:code> or <db:code>unsigned int</db:code>, depending on whether the enum's underlying type is signed or unsigned.</db:para>
<db:para>This typedef was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="enum_type-typedef">
<db:title>QFlags::enum_type</db:title>
<db:para>Typedef for the Enum template type.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_DECLARE_FLAGS">
<db:title>Q_DECLARE_FLAGS(<db:emphasis>Flags</db:emphasis>, <db:emphasis>Enum</db:emphasis>)</db:title>
<db:para>The Q_DECLARE_FLAGS() macro expands to</db:para>
<db:programlisting language="cpp">typedef QFlags&lt;Enum&gt; Flags;
</db:programlisting>
<db:para><db:code role="parameter">Enum</db:code> is the name of an existing enum type, whereas <db:code role="parameter">Flags</db:code> is the name of the <db:link xlink:href="qflags.xml">QFlags</db:link>&lt;<db:emphasis>Enum</db:emphasis>&gt; typedef.</db:para>
<db:para>See the <db:link xlink:href="qflags.xml">QFlags</db:link> documentation for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#Q_DECLARE_OPERATORS_FOR_FLAGS">Q_DECLARE_OPERATORS_FOR_FLAGS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECLARE_OPERATORS_FOR_FLAGS">
<db:title>Q_DECLARE_OPERATORS_FOR_FLAGS(<db:emphasis>Flags</db:emphasis>)</db:title>
<db:para>The Q_DECLARE_OPERATORS_FOR_FLAGS() macro declares global <db:code>operator|()</db:code> functions for <db:code role="parameter">Flags</db:code>, which is of type <db:link xlink:href="qflags.xml">QFlags</db:link>&lt;T&gt;.</db:para>
<db:para>See the <db:link xlink:href="qflags.xml">QFlags</db:link> documentation for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#Q_DECLARE_FLAGS">Q_DECLARE_FLAGS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
