<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFlags Class</db:title>
<db:subtitle>template &lt;typename Enum&gt; class QFlags</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qflags.xml">QFlags</db:link> class provides a type-safe way of storing OR-combinations of enum values.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFlags</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFlags is part of <db:simplelist><db:member>tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Enum&gt; class is a template class, where Enum is an enum type. <db:link xlink:href="qflags.xml">QFlags</db:link> is used throughout Qt for storing combinations of enum values.</db:para>
<db:para>The traditional C++ approach for storing OR-combinations of enum values is to use an <db:code>int</db:code> or <db:code>uint</db:code> variable. The inconvenience with this approach is that there's no type checking at all; any enum value can be OR'd with any other enum value and passed on to a function that takes an <db:code>int</db:code> or <db:code>uint</db:code>.</db:para>
<db:para>Qt uses <db:link xlink:href="qflags.xml">QFlags</db:link> to provide type safety. For example, the <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link> type is simply a typedef for <db:link xlink:href="qflags.xml">QFlags</db:link>&lt;<db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link>&gt;. QLabel::setAlignment() takes a <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link> parameter, which means that any combination of <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link> values, or <db:code>{ }</db:code>, is legal:</db:para>
<db:programlisting language="cpp">label-&gt;setAlignment(Qt::AlignLeft | Qt::AlignTop);
label-&gt;setAlignment({ });
</db:programlisting>
<db:para>If you try to pass a value from another enum or just a plain integer other than 0, the compiler will report an error. If you need to cast integer values to flags in a untyped fashion, you can use the explicit <db:link xlink:href="qflags.xml">QFlags</db:link> constructor as cast operator.</db:para>
<db:para>If you want to use <db:link xlink:href="qflags.xml">QFlags</db:link> for your own enum types, use the <db:link xlink:href="qflags.xml#Q_DECLARE_FLAGS">Q_DECLARE_FLAGS</db:link>() and <db:link xlink:href="qflags.xml#Q_DECLARE_OPERATORS_FOR_FLAGS">Q_DECLARE_OPERATORS_FOR_FLAGS</db:link>().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">class MyClass
{
public:
    enum Option {
        NoOptions = 0x0,
        ShowTabs = 0x1,
        ShowAll = 0x2,
        SqueezeBlank = 0x4
    };
    Q_DECLARE_FLAGS(Options, Option)
    ...
};

Q_DECLARE_OPERATORS_FOR_FLAGS(MyClass::Options)
</db:programlisting>
<db:para>You can then use the <db:code>MyClass::Options</db:code> type to store combinations of <db:code>MyClass::Option</db:code> values.</db:para>
<db:section xml:id="flags-and-the-meta-object-system">
<db:title>Flags and the Meta-Object System</db:title>
<db:para>The <db:link xlink:href="qflags.xml#Q_DECLARE_FLAGS">Q_DECLARE_FLAGS</db:link>() macro does not expose the flags to the meta-object system, so they cannot be used by Qt Script or edited in Qt Widgets Designer. To make the flags available for these purposes, the <db:link xlink:href="qobject.xml#Q_FLAG">Q_FLAG</db:link>() macro must be used:</db:para>
<db:programlisting language="cpp">Q_FLAG(Options)
</db:programlisting>
</db:section>
<db:section xml:id="naming-convention">
<db:title>Naming Convention</db:title>
<db:para>A sensible naming convention for enum types and associated <db:link xlink:href="qflags.xml">QFlags</db:link> types is to give a singular name to the enum type (e.g., <db:code>Option</db:code>) and a plural name to the <db:link xlink:href="qflags.xml">QFlags</db:link> type (e.g., <db:code>Options</db:code>). When a singular name is desired for the <db:link xlink:href="qflags.xml">QFlags</db:link> type (e.g., <db:code>Alignment</db:code>), you can use <db:code>Flag</db:code> as the suffix for the enum type (e.g., <db:code>AlignmentFlag</db:code>).</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflag.xml">QFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Int-typedef">
<db:title>QFlags::Int</db:title>
<db:para>Typedef for the integer type used for storage as well as for implicit conversion. Either <db:code>int</db:code> or <db:code>unsigned int</db:code>, depending on whether the enum's underlying type is signed or unsigned.</db:para>
</db:section>
<db:section xml:id="enum_type-typedef">
<db:title>QFlags::enum_type</db:title>
<db:para>Typedef for the Enum template type.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFlags">
<db:title>[constexpr noexcept] QFlags::QFlags()</db:title>
<db:para>Constructs a <db:link xlink:href="qflags.xml">QFlags</db:link> object with no flags set.</db:para>
</db:section>
<db:section xml:id="QFlags-1">
<db:title>[constexpr noexcept] QFlags::QFlags(Enum <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qflags.xml">QFlags</db:link> object storing the <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="QFlags-2">
<db:title>[constexpr noexcept] QFlags::QFlags(QFlag <db:emphasis>flag</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qflags.xml">QFlags</db:link> object initialized with the integer <db:code role="parameter">flag</db:code>.</db:para>
<db:para>The <db:link xlink:href="qflag.xml">QFlag</db:link> type is a helper type. By using it here instead of <db:code>int</db:code>, we effectively ensure that arbitrary enum values cannot be cast to a <db:link xlink:href="qflags.xml">QFlags</db:link>, whereas untyped enum values (i.e., <db:code>int</db:code> values) can.</db:para>
</db:section>
<db:section xml:id="QFlags-4">
<db:title>[constexpr noexcept] QFlags::QFlags(std::initializer_list&lt;Enum&gt; <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qflags.xml">QFlags</db:link> object initialized with all <db:code role="parameter">flags</db:code> combined using the bitwise OR operator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-7c-eq">operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7c">operator|</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFlags-3">
<db:title>[default] QFlags::QFlags(const QFlags&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="fromInt">
<db:title>[static constexpr noexcept, since 6.2] QFlags&lt;T&gt; QFlags::fromInt(QFlags&lt;T&gt;::Int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qflags.xml">QFlags</db:link> object representing the integer value <db:code role="parameter">i</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="setFlag">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; &amp;QFlags::setFlag(Enum <db:emphasis>flag</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:para>Sets the flag <db:code role="parameter">flag</db:code> if <db:code role="parameter">on</db:code> is <db:code>true</db:code> or unsets it if <db:code role="parameter">on</db:code> is <db:code>false</db:code>. Returns a reference to this object.</db:para>
</db:section>
<db:section xml:id="testAnyFlag">
<db:title>[constexpr noexcept, since 6.2] bool QFlags::testAnyFlag(Enum <db:emphasis>flag</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:emphasis role="bold">any</db:emphasis> flag set in <db:code role="parameter">flag</db:code> is also set in this flags object, otherwise <db:code>false</db:code>. If <db:code role="parameter">flag</db:code> has no flags set, the return will always be <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#testFlag">testFlag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="testAnyFlags">
<db:title>[constexpr noexcept, since 6.2] bool QFlags::testAnyFlags(QFlags&lt;T&gt; <db:emphasis>flags</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if <db:emphasis role="bold">any</db:emphasis> flag set in <db:code role="parameter">flags</db:code> is also set in this flags object, otherwise <db:code>false</db:code>. If <db:code role="parameter">flags</db:code> has no flags set, the return will always be <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#testFlags">testFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="testFlag">
<db:title>[constexpr noexcept] bool QFlags::testFlag(Enum <db:emphasis>flag</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the flag <db:code role="parameter">flag</db:code> is set, otherwise <db:code>false</db:code>.</db:para>
<db:note>
<db:para>if <db:code role="parameter">flag</db:code> contains multiple bits set to 1 (for instance, if it's an enumerator equal to the bitwise-OR of other enumerators) then this function will return <db:code>true</db:code> if and only if all the bits are set in this flags object. On the other hand, if <db:code role="parameter">flag</db:code> contains no bits set to 1 (that is, its value as a integer is 0), then this function will return <db:code>true</db:code> if and only if this flags object also has no bits set to 1.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#testAnyFlag">testAnyFlag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="testFlags">
<db:title>[constexpr noexcept, since 6.2] bool QFlags::testFlags(QFlags&lt;T&gt; <db:emphasis>flags</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this flags object matches the given <db:code role="parameter">flags</db:code>.</db:para>
<db:para>If <db:code role="parameter">flags</db:code> has any flags set, this flags object matches precisely if all flags set in <db:code role="parameter">flags</db:code> are also set in this flags object. Otherwise, when <db:code role="parameter">flags</db:code> has no flags set, this flags object only matches if it also has no flags set.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#testAnyFlags">testAnyFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toInt">
<db:title>[constexpr noexcept, since 6.2] QFlags&lt;T&gt;::Int QFlags::toInt() const</db:title>
<db:para>Returns the value stored in the <db:link xlink:href="qflags.xml">QFlags</db:link> object as an integer. Note that the returned integer may be signed or unsigned, depending on whether the enum's underlying type is signed or unsigned.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#Int-typedef">Int</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QFlags-ltT-gt-3a-3aInt">
<db:title>[constexpr noexcept] QFlags&lt;T&gt;::Int QFlags::operator QFlags&lt;T&gt;::Int() const</db:title>
<db:para>Returns the value stored in the <db:link xlink:href="qflags.xml">QFlags</db:link> object as an integer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#Int-typedef">Int</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not">
<db:title>[constexpr noexcept] bool QFlags::operator!() const</db:title>
<db:para>Returns <db:code>true</db:code> if no flag is set (i.e., if the value stored by the <db:link xlink:href="qflags.xml">QFlags</db:link> object is 0); otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-and">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; QFlags::operator&amp;(int <db:emphasis>mask</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qflags.xml">QFlags</db:link> object containing the result of the bitwise AND operation on this object and <db:code role="parameter">mask</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-5e">operator^</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7e">operator~</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-and-1">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; QFlags::operator&amp;(Enum <db:emphasis>mask</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-and-2">
<db:title>[constexpr noexcept, since 6.2] QFlags&lt;T&gt; QFlags::operator&amp;(QFlags&lt;T&gt; <db:emphasis>mask</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="operator-and-3">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; QFlags::operator&amp;(uint <db:emphasis>mask</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-and-eq">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; &amp;QFlags::operator&amp;=(int <db:emphasis>mask</db:emphasis>)</db:title>
<db:para>Performs a bitwise AND operation with <db:code role="parameter">mask</db:code> and stores the result in this <db:link xlink:href="qflags.xml">QFlags</db:link> object. Returns a reference to this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7c-eq">operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-5e-eq">operator^=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-and-eq-1">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; &amp;QFlags::operator&amp;=(Enum <db:emphasis>mask</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-and-eq-2">
<db:title>[constexpr noexcept, since 6.2] QFlags&lt;T&gt; &amp;QFlags::operator&amp;=(QFlags&lt;T&gt; <db:emphasis>mask</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="operator-and-eq-3">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; &amp;QFlags::operator&amp;=(uint <db:emphasis>mask</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[default] int &amp;QFlags::operator=(const QFlags&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this object and returns a reference to this object.</db:para>
</db:section>
<db:section xml:id="operator-5e">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; QFlags::operator^(QFlags&lt;T&gt; <db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qflags.xml">QFlags</db:link> object containing the result of the bitwise XOR operation on this object and <db:code role="parameter">other</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-5e-eq">operator^=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7e">operator~</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5e-1">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; QFlags::operator^(Enum <db:emphasis>other</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-5e-eq">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; &amp;QFlags::operator^=(QFlags&lt;T&gt; <db:emphasis>other</db:emphasis>)</db:title>
<db:para>Performs a bitwise XOR operation with <db:code role="parameter">other</db:code> and stores the result in this <db:link xlink:href="qflags.xml">QFlags</db:link> object. Returns a reference to this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-5e">operator^</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7c-eq">operator|=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5e-eq-1">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; &amp;QFlags::operator^=(Enum <db:emphasis>other</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-7c">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; QFlags::operator|(QFlags&lt;T&gt; <db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qflags.xml">QFlags</db:link> object containing the result of the bitwise OR operation on this object and <db:code role="parameter">other</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-7c-eq">operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-5e">operator^</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7e">operator~</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c-1">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; QFlags::operator|(Enum <db:emphasis>other</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-7c-eq">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; &amp;QFlags::operator|=(QFlags&lt;T&gt; <db:emphasis>other</db:emphasis>)</db:title>
<db:para>Performs a bitwise OR operation with <db:code role="parameter">other</db:code> and stores the result in this <db:link xlink:href="qflags.xml">QFlags</db:link> object. Returns a reference to this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-5e-eq">operator^=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c-eq-1">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; &amp;QFlags::operator|=(Enum <db:emphasis>other</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-7e">
<db:title>[constexpr noexcept] QFlags&lt;T&gt; QFlags::operator~() const</db:title>
<db:para>Returns a <db:link xlink:href="qflags.xml">QFlags</db:link> object that contains the bitwise negation of this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qflags.xml#operator-5e">operator^</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash-2">
<db:title>[constexpr noexcept, since 6.2] size_t qHash(QFlags&lt;Enum&gt; <db:emphasis>key</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:para>Returns the hash value for <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_DECLARE_FLAGS">
<db:title>Q_DECLARE_FLAGS(<db:emphasis>Flags</db:emphasis>, <db:emphasis>Enum</db:emphasis>)</db:title>
<db:para>The Q_DECLARE_FLAGS() macro expands to</db:para>
<db:programlisting language="cpp">typedef QFlags&lt;Enum&gt; Flags;
</db:programlisting>
<db:para><db:code role="parameter">Enum</db:code> is the name of an existing enum type, whereas <db:code role="parameter">Flags</db:code> is the name of the <db:link xlink:href="qflags.xml">QFlags</db:link>&lt;<db:emphasis>Enum</db:emphasis>&gt; typedef.</db:para>
<db:para>See the <db:link xlink:href="qflags.xml">QFlags</db:link> documentation for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#Q_DECLARE_OPERATORS_FOR_FLAGS">Q_DECLARE_OPERATORS_FOR_FLAGS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECLARE_OPERATORS_FOR_FLAGS">
<db:title>Q_DECLARE_OPERATORS_FOR_FLAGS(<db:emphasis>Flags</db:emphasis>)</db:title>
<db:para>The Q_DECLARE_OPERATORS_FOR_FLAGS() macro declares global <db:code>operator|()</db:code> functions for <db:code role="parameter">Flags</db:code>, which is of type <db:link xlink:href="qflags.xml">QFlags</db:link>&lt;T&gt;.</db:para>
<db:para>See the <db:link xlink:href="qflags.xml">QFlags</db:link> documentation for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qflags.xml#Q_DECLARE_FLAGS">Q_DECLARE_FLAGS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
