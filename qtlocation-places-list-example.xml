<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Places List (QML)</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Places List example demonstrates how to search for and display a list of places using a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/places_list.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
<db:para>The <db:code>Places List</db:code> example demonstrates how to search for a list of places in a certain area and displays the result using a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>. In this particular case, a search for places associated with the term <db:code>food</db:code> is performed.</db:para>
</db:section>
<db:section xml:id="performing-a-place-search">
<db:title>Performing a Place Search</db:title>
<db:para>To write a QML application that will show places in a list, we start by making the following import declarations.</db:para>
<db:programlisting language="qml">import QtQuick
import QtPositioning
import QtLocation
</db:programlisting>
<db:para>Instantiate a <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> instance. The <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> is effectively the backend from where places are sourced from. Depending on the type of the plugin, some mandatory parameters may be need to be filled in. The most likely type of <db:link xlink:href="qml-qtlocation-pluginparameter.xml">PluginParameter</db:link> are some form of service access token which are documented in the service plugin. In this snippet the <db:code>osm</db:code> plugin is used which does not require any further parameter:</db:para>
<db:programlisting language="qml">Plugin {
    id: myPlugin
    name: &quot;osm&quot;
    //specify plugin parameters as necessary
    //PluginParameter {...}
    //PluginParameter {...}
    //...
}
</db:programlisting>
<db:para>Next we instantiate a <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> which we can use to specify search parameters and perform a places search operation. For illustrative purposes, <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#update-method">update</db:link>() is invoked once construction of the model is complete. Typically <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#update-method">update</db:link>() would be invoked in response to a user action such as a button click.</db:para>
<db:programlisting language="qml">PlaceSearchModel {
    id: searchModel

    plugin: myPlugin

    searchTerm: &quot;food&quot;
    searchArea: QtPositioning.circle(startCoordinate, 5000 /* 5 km radius */);

    Component.onCompleted: update()

}
</db:programlisting>
<db:para>Finally we instantiate a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> to show the search results found by the model. An inline delegate has been used and we have assumed that every search result is of <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#search-result-types">type</db:link> <db:code>PlaceSearchesult</db:code>. Consequently it is assumed that we always have access to the <db:emphasis>place</db:emphasis> <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#placesearchmodel-roles">role</db:link>, other search result types may not have a <db:emphasis>place</db:emphasis> <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#placesearchmodel-roles">role</db:link>.</db:para>
<db:programlisting language="qml">ListView {
    anchors.fill: parent
    model: searchModel
    delegate: Component {
        Row {
            spacing: 5
            Marker { height: parent.height }
            Column {
                Text { text: title; font.bold: true }
                Text { text: place.location.address.text }
            }
        }
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtlocation.git/tree/examples/location/places_list?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
