<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D Render QML Types</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides Qt 3D QML types for rendering.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>To import and use the module's QML types, use the following statement:</db:para>
<db:programlisting language="cpp" role="bad">import Qt3D.Render 2.0
</db:programlisting>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-abstracttextureimage.xml" xlink:role="">AbstractTextureImage</db:link></db:term>
<db:listitem>
<db:para>Encapsulates the necessary information to create an OpenGL texture image.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-attribute.xml" xlink:role="">Attribute</db:link></db:term>
<db:listitem>
<db:para>Defines an attribute and how data should be read from a Buffer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-blendequation.xml" xlink:role="">BlendEquation</db:link></db:term>
<db:listitem>
<db:para>The BlendEquation class specifies the equation used for both the RGB blend equation and the Alpha blend equation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-blendequationarguments.xml" xlink:role="">BlendEquationArguments</db:link></db:term>
<db:listitem>
<db:para>Encapsulates blending information: specifies how the incoming values (what's going to be drawn) are going to affect the existing values (what is already drawn).</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-buffer.xml" xlink:role="">Buffer</db:link></db:term>
<db:listitem>
<db:para>Provides a data store for raw data to later be used as vertices or uniforms.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-camera.xml" xlink:role="">Camera</db:link></db:term>
<db:listitem>
<db:para>Defines a view point through which the scene will be rendered.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-cameralens.xml" xlink:role="">CameraLens</db:link></db:term>
<db:listitem>
<db:para>Provides the projection matrix that is used to define a Camera for 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-cameraselector.xml" xlink:role="">CameraSelector</db:link></db:term>
<db:listitem>
<db:para>Class to allow for selection of camera to be used</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-clearbuffers.xml" xlink:role="">ClearBuffers</db:link></db:term>
<db:listitem>
<db:para>Class to clear buffers</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-clipplane.xml" xlink:role="">ClipPlane</db:link></db:term>
<db:listitem>
<db:para>Enables an additional OpenGL clipping plane that can be in shaders using gl_ClipDistance</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-directionallight.xml" xlink:role="">DirectionalLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Directional Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-dispatchcompute.xml" xlink:role="">DispatchCompute</db:link></db:term>
<db:listitem>
<db:para></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-effect.xml" xlink:role="">Effect</db:link></db:term>
<db:listitem>
<db:para>The base class for effects in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-filterkey.xml" xlink:role="">FilterKey</db:link></db:term>
<db:listitem>
<db:para>Stores filter keys and their values.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-framegraphnode.xml" xlink:role="">FrameGraphNode</db:link></db:term>
<db:listitem>
<db:para>Base class of all FrameGraph configuration nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-frustumculling.xml" xlink:role="">FrustumCulling</db:link></db:term>
<db:listitem>
<db:para></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-geometry.xml" xlink:role="">Geometry</db:link></db:term>
<db:listitem>
<db:para></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-geometryrenderer.xml" xlink:role="">GeometryRenderer</db:link></db:term>
<db:listitem>
<db:para></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-graphicsapifilter.xml" xlink:role="">GraphicsApiFilter</db:link></db:term>
<db:listitem>
<db:para>For OpenGL identifies the API required for the attached technique</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-layer.xml" xlink:role="">Layer</db:link></db:term>
<db:listitem>
<db:para>Layer provides a way of filtering which entities will be rendered.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-layerfilter.xml" xlink:role="">LayerFilter</db:link></db:term>
<db:listitem>
<db:para>Controls layers Drawn in a frame graph branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-light.xml" xlink:role="">Light</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a QAbstractLight object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-material.xml" xlink:role="">Material</db:link></db:term>
<db:listitem>
<db:para>Non-creatable abstract base for materials.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-mesh.xml" xlink:role="">Mesh</db:link></db:term>
<db:listitem>
<db:para>A custom mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-nodraw.xml" xlink:role="">NoDraw</db:link></db:term>
<db:listitem>
<db:para>When a NoDraw node is present in a FrameGraph branch, this * prevents the renderer from rendering any primitive.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-objectpicker.xml" xlink:role="">ObjectPicker</db:link></db:term>
<db:listitem>
<db:para>The ObjectPicker class instantiates a component that can be used to interact with an Entity by a process known as picking.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-parameter.xml" xlink:role="">Parameter</db:link></db:term>
<db:listitem>
<db:para>Provides storage for a name and value pair.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pickevent.xml" xlink:role="">PickEvent</db:link></db:term>
<db:listitem>
<db:para>PickEvent holds information when an object is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-picktriangleevent.xml" xlink:role="">PickTriangleEvent</db:link></db:term>
<db:listitem>
<db:para>PickTriangleEvent holds information when a triangle is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pickingsettings.xml" xlink:role="">PickingSettings</db:link></db:term>
<db:listitem>
<db:para>The PickingSettings class specifies how entity picking is handled.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pointlight.xml" xlink:role="">PointLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Point Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pointsize.xml" xlink:role="">PointSize</db:link></db:term>
<db:listitem>
<db:para>Specifies the size of rasterized points. May either be set statically or by shader programs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-renderpass.xml" xlink:role="">RenderPass</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Render Pass.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendersettings.xml" xlink:role="">RenderSettings</db:link></db:term>
<db:listitem>
<db:para>The RenderSettings type holds settings related to rendering process and host the active FrameGraph.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendersurfaceselector.xml" xlink:role="">RenderSurfaceSelector</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying the render surface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendertargetselector.xml" xlink:role="">RenderTargetSelector</db:link></db:term>
<db:listitem>
<db:para>RenderTargetSelector</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-sceneloader.xml" xlink:role="">SceneLoader</db:link></db:term>
<db:listitem>
<db:para>Provides the facility to load an existing Scene</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-shaderprogram.xml" xlink:role="">ShaderProgram</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Shader Program.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-sortpolicy.xml" xlink:role="">SortPolicy</db:link></db:term>
<db:listitem>
<db:para>Provides storage for the sort types to be used</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-spotlight.xml" xlink:role="">SpotLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Spot Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-technique.xml" xlink:role="">Technique</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Technique.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-textureimage.xml" xlink:role="">TextureImage</db:link></db:term>
<db:listitem>
<db:para>Encapsulates the necessary information to create an OpenGL texture image from an image source.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-viewport.xml" xlink:role="">Viewport</db:link></db:term>
<db:listitem>
<db:para>A viewport on the Qt3D Scene</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:article>
