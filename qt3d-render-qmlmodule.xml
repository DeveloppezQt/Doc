<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D Render QML Types</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides Qt 3D QML types for rendering.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>To import and use the module's QML types, use the following statement:</db:para>
<db:programlisting language="qml">import Qt3D.Render 2.5
</db:programlisting>
<db:section xml:id="selecting-a-rendering-backend">
<db:title>Selecting a Rendering Backend</db:title>
<db:para>The Render aspect comes with two rendering backends.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>OpenGL backend (ES 2, ES 3.2, GL 2, GL 3, GL 3.2, GL 4.3)</db:para>
</db:listitem>
<db:listitem>
<db:para>RHI backend (ES 2, GL, DirectX, Vulkan, Metal)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you are targeting OpenGL exclusively and are using specific OpenGL features, you might be better off using the OpenGL backend. This is the OpenGL backend that Qt 3D exclusively used in the Qt 5 series.</db:para>
<db:para>For cases where you are not using specific OpenGL features and want to target different platforms that might have deprecated OpenGL, using the RHI backend is a better alternative.</db:para>
<db:para>To select your rendering backend, the environment variable QT3D_RENDERER is to be set to either &quot;opengl&quot; or &quot;rhi&quot;. Defaults to the OpenGL backend.</db:para>
<db:para>When using the RHI backend, you can further force the internal RHI backend by setting the QSG_RHI_BACKEND to one of the following values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>opengl -&gt; RHI OpenGL backend</db:para>
</db:listitem>
<db:listitem>
<db:para>gl -&gt; RHI OpenGL backend</db:para>
</db:listitem>
<db:listitem>
<db:para>gles2 -&gt; RHI OpenGL backend</db:para>
</db:listitem>
<db:listitem>
<db:para>metal -&gt; RHI Metal backend</db:para>
</db:listitem>
<db:listitem>
<db:para>vulkan -&gt; RHI Vulkan backend</db:para>
</db:listitem>
<db:listitem>
<db:para>d3d11 -&gt; RHI DirectX 11 backend</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If not specified, RHI will default to what it deduces to be the best backend for the platform.</db:para>
<db:para>Alternatively, if using a <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>, <db:link xlink:href="qquickwindow.xml#setGraphicsApi">QQuickWindow::setGraphicsApi</db:link>() can be used to specify the RHI internal rendering backend.</db:para>
</db:section>
<db:section>
<db:title>Contents</db:title>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-abstractraycaster.xml" xlink:role="">AbstractRayCaster</db:link></db:term>
<db:listitem>
<db:para>An abstract base class for ray casting in 3d scenes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-abstracttexture.xml" xlink:role="">AbstractTexture</db:link></db:term>
<db:listitem>
<db:para>A base class to be used to provide textures.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-abstracttextureimage.xml" xlink:role="">AbstractTextureImage</db:link></db:term>
<db:listitem>
<db:para>Encapsulates the necessary information to create an OpenGL texture image.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-alphacoverage.xml" xlink:role="">AlphaCoverage</db:link></db:term>
<db:listitem>
<db:para>Enable alpha-to-coverage multisampling mode.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-alphatest.xml" xlink:role="">AlphaTest</db:link></db:term>
<db:listitem>
<db:para>The AlphaTest class specify alpha reference test.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-blendequation.xml" xlink:role="">BlendEquation</db:link></db:term>
<db:listitem>
<db:para>The BlendEquation class specifies the equation used for both the RGB blend equation and the Alpha blend equation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-blendequationarguments.xml" xlink:role="">BlendEquationArguments</db:link></db:term>
<db:listitem>
<db:para>Encapsulates blending information: specifies how the incoming values (what's going to be drawn) are going to affect the existing values (what is already drawn).</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-blitframebuffer.xml" xlink:role="">BlitFramebuffer</db:link></db:term>
<db:listitem>
<db:para>FrameGraph node to transfer a rectangle of pixel values from one region of a render target to another.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-buffercapture.xml" xlink:role="">BufferCapture</db:link></db:term>
<db:listitem>
<db:para>Exchanges buffer data between GPU and CPU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-camera.xml" xlink:role="">Camera</db:link></db:term>
<db:listitem>
<db:para>Defines a view point through which the scene will be rendered.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-cameralens.xml" xlink:role="">CameraLens</db:link></db:term>
<db:listitem>
<db:para>Provides the projection matrix that is used to define a Camera for 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-cameraselector.xml" xlink:role="">CameraSelector</db:link></db:term>
<db:listitem>
<db:para>Class to allow for selection of camera to be used.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-clearbuffers.xml" xlink:role="">ClearBuffers</db:link></db:term>
<db:listitem>
<db:para>Class to clear buffers.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-clipplane.xml" xlink:role="">ClipPlane</db:link></db:term>
<db:listitem>
<db:para>Enables an additional OpenGL clipping plane that can be in shaders using gl_ClipDistance.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-colormask.xml" xlink:role="">ColorMask</db:link></db:term>
<db:listitem>
<db:para>Allows specifying which color components should be written to the currently bound frame buffer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-computecommand.xml" xlink:role="">ComputeCommand</db:link></db:term>
<db:listitem>
<db:para>Component to issue work for the compute shader on GPU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-cullface.xml" xlink:role="">CullFace</db:link></db:term>
<db:listitem>
<db:para>The CullFace type specifies whether front or back face culling is enabled.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-debugoverlay.xml" xlink:role="">DebugOverlay</db:link></db:term>
<db:listitem>
<db:para>Enables a visual overlay with scene details.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-depthrange.xml" xlink:role="">DepthRange</db:link></db:term>
<db:listitem>
<db:para>Enables remapping depth values written into the depth buffer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-depthtest.xml" xlink:role="">DepthTest</db:link></db:term>
<db:listitem>
<db:para>The DepthTest type tests the fragment shader's depth value against the depth of a sample being written to.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-directionallight.xml" xlink:role="">DirectionalLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Directional Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-dispatchcompute.xml" xlink:role="">DispatchCompute</db:link></db:term>
<db:listitem>
<db:para>FrameGraph node to issue work for the compute shader on GPU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-dithering.xml" xlink:role="">Dithering</db:link></db:term>
<db:listitem>
<db:para>Enable dithering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-effect.xml" xlink:role="">Effect</db:link></db:term>
<db:listitem>
<db:para>The base class for effects in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-environmentlight.xml" xlink:role="">EnvironmentLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate an environment light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-filterkey.xml" xlink:role="">FilterKey</db:link></db:term>
<db:listitem>
<db:para>Stores filter keys and their values.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-framegraphnode.xml" xlink:role="">FrameGraphNode</db:link></db:term>
<db:listitem>
<db:para>Base class of all FrameGraph configuration nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-frontface.xml" xlink:role="">FrontFace</db:link></db:term>
<db:listitem>
<db:para>The FrontFace type defines front and back facing polygons.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-frustumculling.xml" xlink:role="">FrustumCulling</db:link></db:term>
<db:listitem>
<db:para>Enable frustum culling for the FrameGraph.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-geometryrenderer.xml" xlink:role="">GeometryRenderer</db:link></db:term>
<db:listitem>
<db:para>Encapsulates geometry rendering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-graphicsapifilter.xml" xlink:role="">GraphicsApiFilter</db:link></db:term>
<db:listitem>
<db:para>For OpenGL identifies the API required for the attached technique.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-layer.xml" xlink:role="">Layer</db:link></db:term>
<db:listitem>
<db:para>Layer provides a way of filtering which entities will be rendered.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-layerfilter.xml" xlink:role="">LayerFilter</db:link></db:term>
<db:listitem>
<db:para>Controls layers drawn in a frame graph branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-levelofdetail.xml" xlink:role="">LevelOfDetail</db:link></db:term>
<db:listitem>
<db:para>LevelOfDetail provides a way of controlling the complexity of rendered entities based on their size on the screen.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-levelofdetailboundingsphere.xml" xlink:role="">LevelOfDetailBoundingSphere</db:link></db:term>
<db:listitem>
<db:para>The LevelOfDetailBoundingSphere QML type provides a simple spherical volume, defined by its center and radius.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-levelofdetailloader.xml" xlink:role="">LevelOfDetailLoader</db:link></db:term>
<db:listitem>
<db:para>An entity loader that changes depending on distance to camera or screen size.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-levelofdetailswitch.xml" xlink:role="">LevelOfDetailSwitch</db:link></db:term>
<db:listitem>
<db:para>Provides a way of enabling child entities based on distance or screen size.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-light.xml" xlink:role="">Light</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a QAbstractLight object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-linewidth.xml" xlink:role="">LineWidth</db:link></db:term>
<db:listitem>
<db:para>Specifies the width of rasterized lines.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-material.xml" xlink:role="">Material</db:link></db:term>
<db:listitem>
<db:para>Non-creatable abstract base for materials.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-memorybarrier.xml" xlink:role="">MemoryBarrier</db:link></db:term>
<db:listitem>
<db:para>Class to place a memory barrier.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-mesh.xml" xlink:role="">Mesh</db:link></db:term>
<db:listitem>
<db:para>A custom mesh loader.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-multisampleantialiasing.xml" xlink:role="">MultiSampleAntiAliasing</db:link></db:term>
<db:listitem>
<db:para>Enable multisample antialiasing.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-nodepthmask.xml" xlink:role="">NoDepthMask</db:link></db:term>
<db:listitem>
<db:para>Disable depth write.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-nodraw.xml" xlink:role="">NoDraw</db:link></db:term>
<db:listitem>
<db:para>When a NoDraw node is present in a FrameGraph branch, this prevents the renderer from rendering any primitive.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-nopicking.xml" xlink:role="">NoPicking</db:link></db:term>
<db:listitem>
<db:para>When a NoPicking node is present in a FrameGraph branch, this prevents the render aspect from performing picking selection for the given branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-objectpicker.xml" xlink:role="">ObjectPicker</db:link></db:term>
<db:listitem>
<db:para>The ObjectPicker class instantiates a component that can be used to interact with an Entity by a process known as picking.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-parameter.xml" xlink:role="">Parameter</db:link></db:term>
<db:listitem>
<db:para>Provides storage for a name and value pair. This maps to a shader uniform.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pickevent.xml" xlink:role="">PickEvent</db:link></db:term>
<db:listitem>
<db:para>PickEvent holds information when an object is picked. This is received as a parameter in most of the QObjectPicker component signals when picking succeeds.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-picklineevent.xml" xlink:role="">PickLineEvent</db:link></db:term>
<db:listitem>
<db:para>PickLineEvent holds information when a segment of a line is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pickpointevent.xml" xlink:role="">PickPointEvent</db:link></db:term>
<db:listitem>
<db:para>PickPointEvent holds information when a segment of a point cloud is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-picktriangleevent.xml" xlink:role="">PickTriangleEvent</db:link></db:term>
<db:listitem>
<db:para>PickTriangleEvent holds information when a triangle is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pickingproxy.xml" xlink:role="">PickingProxy</db:link></db:term>
<db:listitem>
<db:para>Can be used to provide an alternate GeometryView used only for picking.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pickingsettings.xml" xlink:role="">PickingSettings</db:link></db:term>
<db:listitem>
<db:para>The PickingSettings class specifies how entity picking is handled.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pointlight.xml" xlink:role="">PointLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Point Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pointsize.xml" xlink:role="">PointSize</db:link></db:term>
<db:listitem>
<db:para>Specifies the size of rasterized points. May either be set statically or by shader programs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-polygonoffset.xml" xlink:role="">PolygonOffset</db:link></db:term>
<db:listitem>
<db:para>The PolygonOffset type sets the scale and steps to calculate depth values for polygon offsets.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-proximityfilter.xml" xlink:role="">ProximityFilter</db:link></db:term>
<db:listitem>
<db:para>Select entities which are within a distance threshold of a target entity.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rastermode.xml" xlink:role="">RasterMode</db:link></db:term>
<db:listitem>
<db:para>The RasterMode render state allows to control the type of rasterization to be performed.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-raycaster.xml" xlink:role="">RayCaster</db:link></db:term>
<db:listitem>
<db:para>used to perform ray casting tests in 3d world coordinates.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendercapabilities.xml" xlink:role="">RenderCapabilities</db:link></db:term>
<db:listitem>
<db:para>The QRenderCapabilities class holds settings related to available rendering engines.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendercapture.xml" xlink:role="">RenderCapture</db:link></db:term>
<db:listitem>
<db:para>Capture rendering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendercapturereply.xml" xlink:role="">RenderCaptureReply</db:link></db:term>
<db:listitem>
<db:para>Receives render capture result.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-renderpass.xml" xlink:role="">RenderPass</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Render Pass.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-renderpassfilter.xml" xlink:role="">RenderPassFilter</db:link></db:term>
<db:listitem>
<db:para>Provides storage for vectors of Filter Keys and Parameters.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendersettings.xml" xlink:role="">RenderSettings</db:link></db:term>
<db:listitem>
<db:para>The RenderSettings type holds settings related to rendering process and host the active FrameGraph.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-renderstate.xml" xlink:role="">RenderState</db:link></db:term>
<db:listitem>
<db:para>An abstract base type for all render states.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-renderstateset.xml" xlink:role="">RenderStateSet</db:link></db:term>
<db:listitem>
<db:para>The RenderStateSet FrameGraph node offers a way of specifying a set of RenderState objects to be applied during the execution of a framegraph branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendersurfaceselector.xml" xlink:role="">RenderSurfaceSelector</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying the render surface.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendertarget.xml" xlink:role="">RenderTarget</db:link></db:term>
<db:listitem>
<db:para>The RenderTarget class encapsulates a target (usually a frame buffer object) which the renderer can render into.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendertargetoutput.xml" xlink:role="">RenderTargetOutput</db:link></db:term>
<db:listitem>
<db:para>The RenderTargetOutput type allows the specification of an attachment of a render target (whether it is a color texture, a depth texture, etc... ).</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendertargetselector.xml" xlink:role="">RenderTargetSelector</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying a render target.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-sceneloader.xml" xlink:role="">SceneLoader</db:link></db:term>
<db:listitem>
<db:para>Provides the facility to load an existing Scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-scissortest.xml" xlink:role="">ScissorTest</db:link></db:term>
<db:listitem>
<db:para>The ScissorTest type discards fragments that fall outside of a certain rectangular portion of the screen.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-screenraycaster.xml" xlink:role="">ScreenRayCaster</db:link></db:term>
<db:listitem>
<db:para>Performe ray casting test based on screen coordinates.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-seamlesscubemap.xml" xlink:role="">SeamlessCubemap</db:link></db:term>
<db:listitem>
<db:para>Enables seamless cubemap texture filtering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-shaderimage.xml" xlink:role="">ShaderImage</db:link></db:term>
<db:listitem>
<db:para>Provides Image access to shader programs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-shaderprogram.xml" xlink:role="">ShaderProgram</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Shader Program.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-shaderprogrambuilder.xml" xlink:role="">ShaderProgramBuilder</db:link></db:term>
<db:listitem>
<db:para>Generates a Shader Program content from loaded graphs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-sharedgltexture.xml" xlink:role="">SharedGLTexture</db:link></db:term>
<db:listitem>
<db:para>Allows to use a textureId from a separate OpenGL context in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-sortpolicy.xml" xlink:role="">SortPolicy</db:link></db:term>
<db:listitem>
<db:para>Provides storage for the sort types to be used.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-spotlight.xml" xlink:role="">SpotLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Spot Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-stencilmask.xml" xlink:role="">StencilMask</db:link></db:term>
<db:listitem>
<db:para>The StencilMask type controls the front and back writing of individual bits in the stencil planes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-stenciloperation.xml" xlink:role="">StencilOperation</db:link></db:term>
<db:listitem>
<db:para>The StencilOperation type specifies stencil operation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-stenciloperationarguments.xml" xlink:role="">StencilOperationArguments</db:link></db:term>
<db:listitem>
<db:para>The StencilOperationArguments type sets the actions to be taken when stencil and depth tests fail.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-stenciltest.xml" xlink:role="">StencilTest</db:link></db:term>
<db:listitem>
<db:para>The StencilTest type specifies arguments for the stecil test.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-stenciltestarguments.xml" xlink:role="">StencilTestArguments</db:link></db:term>
<db:listitem>
<db:para>The StencilTestArguments type specifies arguments for stencil test.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-subtreeenabler.xml" xlink:role="">SubtreeEnabler</db:link></db:term>
<db:listitem>
<db:para>Enables or disables entire subtrees of frame graph nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-technique.xml" xlink:role="">Technique</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Technique.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-techniquefilter.xml" xlink:role="">TechniqueFilter</db:link></db:term>
<db:listitem>
<db:para>A FrameGraphNode used to select used Techniques.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture1d.xml" xlink:role="">Texture1D</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target1D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture1darray.xml" xlink:role="">Texture1DArray</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target1DArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture2d.xml" xlink:role="">Texture2D</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target2D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture2darray.xml" xlink:role="">Texture2DArray</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target2DArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture2dmultisample.xml" xlink:role="">Texture2DMultisample</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target2DMultisample target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture2dmultisamplearray.xml" xlink:role="">Texture2DMultisampleArray</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target2DMultisampleArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture3d.xml" xlink:role="">Texture3D</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target3D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texturebuffer.xml" xlink:role="">TextureBuffer</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a TargetBuffer target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texturecubemap.xml" xlink:role="">TextureCubeMap</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a TargetCubeMap target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texturecubemaparray.xml" xlink:role="">TextureCubeMapArray</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a TargetCubeMapArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-textureimage.xml" xlink:role="">TextureImage</db:link></db:term>
<db:listitem>
<db:para>Encapsulates the necessary information to create an OpenGL texture image from an image source.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-textureloader.xml" xlink:role="">TextureLoader</db:link></db:term>
<db:listitem>
<db:para>Handles the texture loading and setting the texture's properties.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texturerectangle.xml" xlink:role="">TextureRectangle</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a TargetRectangle target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-viewport.xml" xlink:role="">Viewport</db:link></db:term>
<db:listitem>
<db:para>A viewport on the Qt3D Scene.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
