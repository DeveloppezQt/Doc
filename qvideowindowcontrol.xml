<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVideoWindowControl Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvideowindowcontrol.xml">QVideoWindowControl</db:link> class provides a media control for rendering video to a window.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVideoWindowControl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediacontrol.xml" xlink:role="class">QMediaControl</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QVideoWindowControl is part of <db:simplelist><db:member>multimedia_control</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qvideowindowcontrol.xml#winId">winId</db:link>() property <db:link xlink:href="qvideowindowcontrol.xml">QVideoWindowControl</db:link> allows a platform specific window ID to be set as the video render target of a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link>. The <db:link xlink:href="qvideowindowcontrol.xml#displayRect">displayRect</db:link>() property is used to set the region of the window the video should be rendered to, and the <db:link xlink:href="qvideowindowcontrol.xml#aspectRatioMode">aspectRatioMode</db:link>() property indicates how the video should be scaled to fit the <db:link xlink:href="qvideowindowcontrol.xml#displayRect">displayRect</db:link>().</db:para>
<db:programlisting language="cpp">QVideoWindowControl *windowControl = mediaService-&amp;gt;requestControl&amp;lt;QVideoWindowControl *&amp;gt;();
windowControl-&amp;gt;setWinId(widget-&amp;gt;winId());
windowControl-&amp;gt;setDisplayRect(widget-&amp;gt;rect());
windowControl-&amp;gt;setAspectRatioMode(Qt::KeepAspectRatio);
</db:programlisting>
<db:para><db:link xlink:href="qvideowindowcontrol.xml">QVideoWindowControl</db:link> is one of a number of possible video output controls.</db:para>
<db:para>The interface name of <db:link xlink:href="qvideowindowcontrol.xml">QVideoWindowControl</db:link> is <db:code>org.qt-project.qt.videowindowcontrol/5.0</db:code> as defined in <db:link xlink:href="qvideowindowcontrol.xml#QVideoWindowControl_iid">QVideoWindowControl_iid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaservice.xml#requestControl-1">QMediaService::requestControl</db:link>()</db:member>
<db:member><db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QVideoWindowControl">
<db:title>[explicit protected] QVideoWindowControl::QVideoWindowControl(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QVideoWindowControl</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoWindowControl(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new video window control with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QVideoWindowControl">
<db:title>[virtual] QVideoWindowControl::~QVideoWindowControl()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QVideoWindowControl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QVideoWindowControl()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a video window control.</db:para>
</db:section>
<db:section xml:id="aspectRatioMode">
<db:title>[pure virtual] Qt::AspectRatioMode QVideoWindowControl::aspectRatioMode() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt::AspectRatioMode</db:type>
<db:methodname>aspectRatioMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::AspectRatioMode aspectRatioMode() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns how video is scaled to fit the display region with respect to its aspect ratio.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#setAspectRatioMode">setAspectRatioMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="brightness">
<db:title>[pure virtual] int QVideoWindowControl::brightness() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>brightness</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int brightness() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brightness adjustment applied to a video overlay.</db:para>
<db:para>Valid brightness values range between -100 and 100, the default is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#setBrightness">setBrightness</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="brightnessChanged">
<db:title>void QVideoWindowControl::brightnessChanged(int <db:emphasis>brightness</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>brightnessChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>brightness</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void brightnessChanged(int brightness)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a video overlay's <db:code role="parameter">brightness</db:code> adjustment has changed.</db:para>
</db:section>
<db:section xml:id="contrast">
<db:title>[pure virtual] int QVideoWindowControl::contrast() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>contrast</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int contrast() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the contrast adjustment applied to a video overlay.</db:para>
<db:para>Valid contrast values range between -100 and 100, the default is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#setContrast">setContrast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contrastChanged">
<db:title>void QVideoWindowControl::contrastChanged(int <db:emphasis>contrast</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>contrastChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>contrast</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void contrastChanged(int contrast)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a video overlay's <db:code role="parameter">contrast</db:code> adjustment has changed.</db:para>
</db:section>
<db:section xml:id="displayRect">
<db:title>[pure virtual] QRect QVideoWindowControl::displayRect() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>displayRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect displayRect() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the sub-rect of a window where video is displayed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#setDisplayRect">setDisplayRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fullScreenChanged">
<db:title>void QVideoWindowControl::fullScreenChanged(bool <db:emphasis>fullScreen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fullScreenChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>fullScreen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fullScreenChanged(bool fullScreen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">fullScreen</db:code> state of a video overlay has changed.</db:para>
</db:section>
<db:section xml:id="hue">
<db:title>[pure virtual] int QVideoWindowControl::hue() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>hue</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int hue() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hue adjustment applied to a video overlay.</db:para>
<db:para>Value hue values range between -100 and 100, the default is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#setHue">setHue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hueChanged">
<db:title>void QVideoWindowControl::hueChanged(int <db:emphasis>hue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hueChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>hue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hueChanged(int hue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a video overlay's <db:code role="parameter">hue</db:code> adjustment has changed.</db:para>
</db:section>
<db:section xml:id="isFullScreen">
<db:title>[pure virtual] bool QVideoWindowControl::isFullScreen() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFullScreen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFullScreen() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies if a video overlay is a fullScreen overlay.</db:para>
<db:para>Returns true if the video overlay is fullScreen, and false otherwise.</db:para>
</db:section>
<db:section xml:id="nativeSize">
<db:title>[pure virtual] QSize QVideoWindowControl::nativeSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>nativeSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize nativeSize() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a suggested size for the video display based on the resolution and aspect ratio of the video.</db:para>
</db:section>
<db:section xml:id="nativeSizeChanged">
<db:title>void QVideoWindowControl::nativeSizeChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>nativeSizeChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void nativeSizeChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the native dimensions of the video have changed.</db:para>
</db:section>
<db:section xml:id="repaint">
<db:title>[pure virtual] void QVideoWindowControl::repaint()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>repaint</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void repaint() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Repaints the last frame.</db:para>
</db:section>
<db:section xml:id="saturation">
<db:title>[pure virtual] int QVideoWindowControl::saturation() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>saturation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int saturation() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the saturation adjustment applied to a video overlay.</db:para>
<db:para>Value saturation values range between -100 and 100, the default is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#setSaturation">setSaturation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="saturationChanged">
<db:title>void QVideoWindowControl::saturationChanged(int <db:emphasis>saturation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>saturationChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>saturation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void saturationChanged(int saturation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that a video overlay's <db:code role="parameter">saturation</db:code> adjustment has changed.</db:para>
</db:section>
<db:section xml:id="setAspectRatioMode">
<db:title>[pure virtual] void QVideoWindowControl::setAspectRatioMode(Qt::AspectRatioMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setAspectRatioMode</db:methodname>
<db:methodparam>
<db:type>Qt::AspectRatioMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAspectRatioMode(Qt::AspectRatioMode mode) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the aspect ratio <db:code role="parameter">mode</db:code> which determines how video is scaled to the fit the display region with respect to its aspect ratio.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#aspectRatioMode">aspectRatioMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBrightness">
<db:title>[pure virtual] void QVideoWindowControl::setBrightness(int <db:emphasis>brightness</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setBrightness</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>brightness</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBrightness(int brightness) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a <db:code role="parameter">brightness</db:code> adjustment for a video overlay.</db:para>
<db:para>Valid brightness values range between -100 and 100, the default is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#brightness">brightness</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContrast">
<db:title>[pure virtual] void QVideoWindowControl::setContrast(int <db:emphasis>contrast</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setContrast</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>contrast</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContrast(int contrast) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">contrast</db:code> adjustment for a video overlay.</db:para>
<db:para>Valid contrast values range between -100 and 100, the default is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#contrast">contrast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDisplayRect">
<db:title>[pure virtual] void QVideoWindowControl::setDisplayRect(const QRect &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setDisplayRect</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDisplayRect(const QRect &amp;rect) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the sub-<db:code role="parameter">rect</db:code> of a window where video is displayed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#displayRect">displayRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFullScreen">
<db:title>[pure virtual] void QVideoWindowControl::setFullScreen(bool <db:emphasis>fullScreen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setFullScreen</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>fullScreen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFullScreen(bool fullScreen) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether a video overlay is a <db:code role="parameter">fullScreen</db:code> overlay.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#isFullScreen">isFullScreen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHue">
<db:title>[pure virtual] void QVideoWindowControl::setHue(int <db:emphasis>hue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setHue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>hue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHue(int hue) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a <db:code role="parameter">hue</db:code> adjustment for a video overlay.</db:para>
<db:para>Valid hue values range between -100 and 100, the default is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#hue">hue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSaturation">
<db:title>[pure virtual] void QVideoWindowControl::setSaturation(int <db:emphasis>saturation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setSaturation</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>saturation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSaturation(int saturation) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a <db:code role="parameter">saturation</db:code> adjustment for a video overlay.</db:para>
<db:para>Valid saturation values range between -100 and 100, the default is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#saturation">saturation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWinId">
<db:title>[pure virtual] void QVideoWindowControl::setWinId(WId <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setWinId</db:methodname>
<db:methodparam>
<db:type>WId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWinId(WId id) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">id</db:code> of the window a video overlay end point renders to.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#winId">winId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="winId">
<db:title>[pure virtual] WId QVideoWindowControl::winId() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>WId</db:type>
<db:methodname>winId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">WId winId() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the ID of the window a video overlay end point renders to.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowindowcontrol.xml#setWinId">setWinId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QVideoWindowControl_iid">
<db:title>QVideoWindowControl_iid</db:title>
<db:methodsynopsis>
<db:methodname>QVideoWindowControl_iid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoWindowControl_iid</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:code>org.qt-project.qt.videowindowcontrol/5.0</db:code></db:para>
<db:para>Defines the interface name of the <db:link xlink:href="qvideowindowcontrol.xml">QVideoWindowControl</db:link> class.</db:para>
</db:section>
</db:section>
</db:article>
