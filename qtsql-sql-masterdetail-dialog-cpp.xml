<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Master Detail Example</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Master Detail Example shows how to present data from different data sources in the same application. The album titles, and the corresponding artists and release dates, are kept in a database, while each album's tracks are stored in an XML file.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;dialog.h&quot;

int uniqueAlbumId;
int uniqueArtistId;

Dialog::Dialog(QSqlRelationalTableModel *albums, QDomDocument details,
               QFile *output, QWidget *parent)
     : QDialog(parent)
{
    model = albums;
    albumDetails = details;
    outputFile = output;

    QGroupBox *inputWidgetBox = createInputWidgets();
    QDialogButtonBox *buttonBox = createButtons();

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&amp;gt;addWidget(inputWidgetBox);
    layout-&amp;gt;addWidget(buttonBox);
    setLayout(layout);

    setWindowTitle(tr(&quot;Add Album&quot;));
}

void Dialog::submit()
{
    QString artist = artistEditor-&amp;gt;text();
    QString title = titleEditor-&amp;gt;text();

    if (artist.isEmpty() || title.isEmpty()) {
        QString message(tr(&quot;Please provide both the name of the artist &quot;
                           &quot;and the title of the album.&quot;));
        QMessageBox::information(this, tr(&quot;Add Album&quot;), message);
    } else {
        int artistId = findArtistId(artist);
        int albumId = addNewAlbum(title, artistId);

        QStringList tracks;
        tracks = tracksEditor-&amp;gt;text().split(',', QString::SkipEmptyParts);
        addTracks(albumId, tracks);

        increaseAlbumCount(indexOfArtist(artist));
        accept();
    }
}

int Dialog::findArtistId(const QString &amp;amp;artist)
{
    QSqlTableModel *artistModel = model-&amp;gt;relationModel(2);
    int row = 0;

    while (row &amp;lt; artistModel-&amp;gt;rowCount()) {
        QSqlRecord record = artistModel-&amp;gt;record(row);
        if (record.value(&quot;artist&quot;) == artist)
            return record.value(&quot;id&quot;).toInt();
        else
            row++;
    }
    return addNewArtist(artist);
}

int Dialog::addNewArtist(const QString &amp;amp;name)
{
    QSqlTableModel *artistModel = model-&amp;gt;relationModel(2);
    QSqlRecord record;

    int id = generateArtistId();

    QSqlField f1(&quot;id&quot;, QVariant::Int);
    QSqlField f2(&quot;artist&quot;, QVariant::String);
    QSqlField f3(&quot;albumcount&quot;, QVariant::Int);

    f1.setValue(QVariant(id));
    f2.setValue(QVariant(name));
    f3.setValue(QVariant(0));
    record.append(f1);
    record.append(f2);
    record.append(f3);

    artistModel-&amp;gt;insertRecord(-1, record);
    return id;
}

int Dialog::addNewAlbum(const QString &amp;amp;title, int artistId)
{
    int id = generateAlbumId();
    QSqlRecord record;

    QSqlField f1(&quot;albumid&quot;, QVariant::Int);
    QSqlField f2(&quot;title&quot;, QVariant::String);
    QSqlField f3(&quot;artistid&quot;, QVariant::Int);
    QSqlField f4(&quot;year&quot;, QVariant::Int);

    f1.setValue(QVariant(id));
    f2.setValue(QVariant(title));
    f3.setValue(QVariant(artistId));
    f4.setValue(QVariant(yearEditor-&amp;gt;value()));
    record.append(f1);
    record.append(f2);
    record.append(f3);
    record.append(f4);

    model-&amp;gt;insertRecord(-1, record);
    return id;
}

void Dialog::addTracks(int albumId, const QStringList &amp;amp;tracks)
{
    QDomElement albumNode = albumDetails.createElement(&quot;album&quot;);
    albumNode.setAttribute(&quot;id&quot;, albumId);

    for (int i = 0; i &amp;lt; tracks.count(); ++i) {
        QString trackNumber = QString::number(i);
        if (i &amp;lt; 10)
            trackNumber.prepend('0');

        QDomText textNode = albumDetails.createTextNode(tracks.at(i));

        QDomElement trackNode = albumDetails.createElement(&quot;track&quot;);
        trackNode.setAttribute(&quot;number&quot;, trackNumber);
        trackNode.appendChild(textNode);

        albumNode.appendChild(trackNode);
    }

    QDomNodeList archive = albumDetails.elementsByTagName(&quot;archive&quot;);
    archive.item(0).appendChild(albumNode);

/*
    The following code is commented out since the example uses an in
    memory database, i.e., altering the XML file will bring the data
    out of sync.

    if (!outputFile-&amp;gt;open(QIODevice::WriteOnly)) {
        return;
    } else {
        QTextStream stream(outputFile);
        archive.item(0).save(stream, 4);
        outputFile-&amp;gt;close();
    }
*/
}

void Dialog::increaseAlbumCount(QModelIndex artistIndex)
{
    QSqlTableModel *artistModel = model-&amp;gt;relationModel(2);

    QModelIndex albumCountIndex;
    albumCountIndex = artistIndex.sibling(artistIndex.row(), 2);

    int albumCount = albumCountIndex.data().toInt();
    artistModel-&amp;gt;setData(albumCountIndex, QVariant(albumCount + 1));
}

void Dialog::revert()
{
    artistEditor-&amp;gt;clear();
    titleEditor-&amp;gt;clear();
    yearEditor-&amp;gt;setValue(QDate::currentDate().year());
    tracksEditor-&amp;gt;clear();
}

QGroupBox *Dialog::createInputWidgets()
{
    QGroupBox *box = new QGroupBox(tr(&quot;Add Album&quot;));

    QLabel *artistLabel = new QLabel(tr(&quot;Artist:&quot;));
    QLabel *titleLabel = new QLabel(tr(&quot;Title:&quot;));
    QLabel *yearLabel = new QLabel(tr(&quot;Year:&quot;));
    QLabel *tracksLabel = new QLabel(tr(&quot;Tracks (separated by comma):&quot;));

    artistEditor = new QLineEdit;
    titleEditor = new QLineEdit;

    yearEditor = new QSpinBox;
    yearEditor-&amp;gt;setMinimum(1900);
    yearEditor-&amp;gt;setMaximum(QDate::currentDate().year());
    yearEditor-&amp;gt;setValue(yearEditor-&amp;gt;maximum());
    yearEditor-&amp;gt;setReadOnly(false);

    tracksEditor = new QLineEdit;

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(artistLabel, 0, 0);
    layout-&amp;gt;addWidget(artistEditor, 0, 1);
    layout-&amp;gt;addWidget(titleLabel, 1, 0);
    layout-&amp;gt;addWidget(titleEditor, 1, 1);
    layout-&amp;gt;addWidget(yearLabel, 2, 0);
    layout-&amp;gt;addWidget(yearEditor, 2, 1);
    layout-&amp;gt;addWidget(tracksLabel, 3, 0, 1, 2);
    layout-&amp;gt;addWidget(tracksEditor, 4, 0, 1, 2);
    box-&amp;gt;setLayout(layout);

    return box;
}

QDialogButtonBox *Dialog::createButtons()
{
    QPushButton *closeButton = new QPushButton(tr(&quot;&amp;amp;Close&quot;));
    QPushButton *revertButton = new QPushButton(tr(&quot;&amp;amp;Revert&quot;));
    QPushButton *submitButton = new QPushButton(tr(&quot;&amp;amp;Submit&quot;));

    closeButton-&amp;gt;setDefault(true);

    connect(closeButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Dialog::close);
    connect(revertButton, &amp;amp;QPushButton::clicked,  this, &amp;amp;Dialog::revert);
    connect(submitButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Dialog::submit);

    QDialogButtonBox *buttonBox = new QDialogButtonBox;
    buttonBox-&amp;gt;addButton(submitButton, QDialogButtonBox::ResetRole);
    buttonBox-&amp;gt;addButton(revertButton, QDialogButtonBox::ResetRole);
    buttonBox-&amp;gt;addButton(closeButton, QDialogButtonBox::RejectRole);

    return buttonBox;
}

QModelIndex Dialog::indexOfArtist(const QString &amp;amp;artist)
{
    QSqlTableModel *artistModel = model-&amp;gt;relationModel(2);

    for (int i = 0; i &amp;lt; artistModel-&amp;gt;rowCount(); ++i) {
        QSqlRecord record =  artistModel-&amp;gt;record(i);
        if (record.value(&quot;artist&quot;) == artist)
            return artistModel-&amp;gt;index(i, 1);
    }

    return QModelIndex();
}

int Dialog::generateArtistId()
{
    uniqueArtistId += 1;
    return uniqueArtistId;
}

int Dialog::generateAlbumId()
{
    uniqueAlbumId += 1;
    return uniqueAlbumId;
}

</db:programlisting>
</db:article>
