<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Models and Views in Qt Quick</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>how to display and format data in Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Most applications need to format data and display the data. Qt Quick has the notion of <db:emphasis>models</db:emphasis>, <db:emphasis>views</db:emphasis>, and <db:emphasis>delegates</db:emphasis> to display data. They modularize the visualization of data in order to give the developer or designer control over the different aspects of the data. A developer can swap a list view with a grid view with little changes to the data. Similarly, encapsulating an instance of the data in a delegate allows the developer to dictate how to present or handle the data.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-overview.png"/>
</db:imageobject>
</db:mediaobject>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Model</db:emphasis> - contains the data and its structure. There are several QML types for creating models.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">View</db:emphasis> - a container that displays the data. The view might display the data in a list or a grid.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Delegate</db:emphasis> - dictates how the data should appear in the view. The delegate takes each unit of data in the model and encapsulates it. The data is accessible through the delegate. The delegate can also write data back into editable models (e.g. in a TextField's onAccepted Handler).</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To visualize data, bind the view's <db:code>model</db:code> property to a model and the <db:code>delegate</db:code> property to a component or another compatible type.</db:para>
<db:section xml:id="displaying-data-with-views">
<db:title>Displaying Data with Views</db:title>
<db:para>Views are containers for collections of items. They are feature-rich and can be customizable to meet style or behavior requirements.</db:para>
<db:anchor xml:id="qtquick-views"/>
<db:para>A set of standard views are provided in the basic set of Qt Quick graphical types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> - arranges items in a horizontal or vertical list</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> - arranges items in a grid within the available space</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link> - arranges items on a path</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> - arranges data from a <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link> in a table</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> - arranges data from a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> in a tree</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>These types have properties and behaviors exclusive to each type. Visit their respective documentation for more information.</db:para>
<db:para>In addition, <db:link xlink:href="">Qt Quick Controls</db:link> contains some extra views and delegates that are styled according to the application style, for example HorizontalHeaderView and VerticalHeaderView.</db:para>
<db:section xml:id="decorating-views">
<db:title>Decorating Views</db:title>
<db:para>Views allow visual customization through <db:emphasis>decoration</db:emphasis> properties such as the <db:code>header</db:code>, <db:code>footer</db:code>, and <db:code>section</db:code> properties. By binding an object, usually another visual object, to these properties, the views are decoratable. A footer may include a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type showing borders or a header that displays a logo on top of the list.</db:para>
<db:para>Suppose that a specific club wants to decorate its members list with its brand colors. A member list is in a <db:code>model</db:code> and the <db:code>delegate</db:code> will display the model's content.</db:para>
<db:programlisting language="qml">ListModel {
    id: nameModel
    ListElement { name: &quot;Alice&quot; }
    ListElement { name: &quot;Bob&quot; }
    ListElement { name: &quot;Jane&quot; }
    ListElement { name: &quot;Harry&quot; }
    ListElement { name: &quot;Wendy&quot; }
}
Component {
    id: nameDelegate
    Text {
        required property string name
        text: name
        font.pixelSize: 24
    }
}
</db:programlisting>
<db:para>The club may decorate the members list by binding visual objects to the <db:code>header</db:code> and <db:code>footer</db:code> properties. The visual object may be defined inline, in another file, or in a <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> type.</db:para>
<db:programlisting language="qml">ListView {
    anchors.fill: parent
    clip: true
    model: nameModel
    delegate: nameDelegate
    header: bannercomponent
    footer: Rectangle {
        width: parent.width; height: 30;
        gradient: clubcolors
    }
    highlight: Rectangle {
        width: parent.width
        color: &quot;lightgray&quot;
    }
}

Component {     //instantiated when header is processed
    id: bannercomponent
    Rectangle {
        id: banner
        width: parent.width; height: 50
        gradient: clubcolors
        border {color: &quot;#9EDDF2&quot;; width: 2}
        Text {
            anchors.centerIn: parent
            text: &quot;Club Members&quot;
            font.pixelSize: 32
        }
    }
}
Gradient {
    id: clubcolors
    GradientStop { position: 0.0; color: &quot;#8EE2FE&quot;}
    GradientStop { position: 0.66; color: &quot;#7ED2EE&quot;}
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/listview-decorations.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="mouse-and-touch-handling">
<db:title>Mouse and Touch Handling</db:title>
<db:para>The views handle dragging and flicking of their content, however they do not handle touch interaction with the individual delegates. In order for the delegates to react to touch input, e.g. to set the <db:code>currentIndex</db:code>, a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> with the appropriate touch handling logic must be provided by the delegate.</db:para>
<db:para>Note that if <db:code>highlightRangeMode</db:code> is set to <db:code>StrictlyEnforceRange</db:code> the currentIndex will be affected by dragging/flicking the view, since the view will always ensure that the <db:code>currentIndex</db:code> is within the highlight range specified.</db:para>
</db:section>
<db:section xml:id="listview-sections">
<db:title>ListView Sections</db:title>
<db:para><db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> contents may be grouped into <db:emphasis>sections</db:emphasis>, where related list items are labeled according to their sections. Further, the sections may be decorated with <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#view-delegates">delegates</db:link>.</db:para>
<db:para>A list may contain a list indicating people's names and the team on which team the person belongs.</db:para>
<db:programlisting language="qml">ListModel {
    id: nameModel
    ListElement { name: &quot;Alice&quot;; team: &quot;Crypto&quot; }
    ListElement { name: &quot;Bob&quot;; team: &quot;Crypto&quot; }
    ListElement { name: &quot;Jane&quot;; team: &quot;QA&quot; }
    ListElement { name: &quot;Victor&quot;; team: &quot;QA&quot; }
    ListElement { name: &quot;Wendy&quot;; team: &quot;Graphics&quot; }
}
Component {
    id: nameDelegate
    Text {
        text: name;
        font.pixelSize: 24
        anchors.left: parent.left
        anchors.leftMargin: 2
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> type has the <db:code>section</db:code> <db:link xlink:href="qtqml-syntax-objectattributes.xml#attached-properties-and-attached-signal-handlers">attached property</db:link> that can combine adjacent and related types into a section. The <db:code>section.property</db:code> determines which list type property to use as sections. The <db:code>section.criteria</db:code> can dictate how the section names are displayed and the <db:code>section.delegate</db:code> is similar to the views' <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#view-delegates">delegate</db:link> property.</db:para>
<db:programlisting language="qml">ListView {
    anchors.fill: parent
    model: nameModel
    delegate: nameDelegate
    focus: true
    highlight: Rectangle {
        color: &quot;lightblue&quot;
        width: parent.width
    }
    section {
        property: &quot;team&quot;
        criteria: ViewSection.FullString
        delegate: Rectangle {
            color: &quot;#b0dfb0&quot;
            width: parent.width
            height: childrenRect.height + 4
            Text { anchors.horizontalCenter: parent.horizontalCenter
                font.pixelSize: 16
                font.bold: true
                text: section
            }
        }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/listview-section.png"/>
</db:imageobject>
</db:mediaobject>
<db:anchor xml:id="qml-view-delegate"/>
</db:section>
</db:section>
<db:section xml:id="view-delegates">
<db:title>View Delegates</db:title>
<db:para>Views need a <db:emphasis>delegate</db:emphasis> to visually represent an item in a list. A view will visualize each item list according to the template defined by the delegate. Items in a model are accessible through the <db:code>index</db:code> property as well as the item's properties.</db:para>
<db:programlisting language="qml">Component {
    id: petdelegate
    Text {
        id: label
        font.pixelSize: 24
        text: index === 0 ? type + &quot; (default)&quot; : type

        required property int index
        required property string type
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/listview-setup.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="positioning-of-view-delegates">
<db:title>Positioning of View Delegates</db:title>
<db:para>The type of view will determine how the items are positioned. <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> will position the items in a straight line, depending on the <db:link xlink:href="qml-qtquick-listview.xml#orientation-prop">orientation</db:link>, while a <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> can lay them out in a 2 dimentional grid. It's <db:emphasis role="bold">not</db:emphasis> recommended to bind directly on <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link> and <db:link xlink:href="qml-qtquick-item.xml#y-prop">y</db:link>, since the view's layouting behavior will always take precedence over any positional binding.</db:para>
</db:section>
<db:section xml:id="accessing-views-and-models-from-delegates">
<db:title>Accessing Views and Models from Delegates</db:title>
<db:para>The list view to which the delegate is bound is accessible from the delegate through the <db:code>ListView.view</db:code> property. Likewise, the <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> <db:code>GridView.view</db:code> is available to delegates. The corresponding model and its properties, therefore, are available through <db:code>ListView.view.model</db:code>. In addition, any defined signals or methods in the model are also accessible.</db:para>
<db:para>This mechanism is useful when you want to use the same delegate for a number of views, for example, but you want decorations or other features to be different for each view, and you would like these different settings to be properties of each of the views. Similarly, it might be of interest to access or show some properties of the model.</db:para>
<db:para>In the following example, the delegate shows the property <db:emphasis>language</db:emphasis> of the model, and the color of one of the fields depends on the property <db:emphasis>fruit_color</db:emphasis> of the view.</db:para>
<db:programlisting language="qml">Rectangle {
     width: 200; height: 200

    ListModel {
        id: fruitModel
        property string language: &quot;en&quot;
        ListElement {
            name: &quot;Apple&quot;
            cost: 2.45
        }
        ListElement {
            name: &quot;Orange&quot;
            cost: 3.25
        }
        ListElement {
            name: &quot;Banana&quot;
            cost: 1.95
        }
    }

    Component {
        id: fruitDelegate
        Row {
                id: fruit
                Text { text: &quot; Fruit: &quot; + name; color: fruit.ListView.view.fruit_color }
                Text { text: &quot; Cost: $&quot; + cost }
                Text { text: &quot; Language: &quot; + fruit.ListView.view.model.language }
        }
    }

    ListView {
        property color fruit_color: &quot;green&quot;
        model: fruitModel
        delegate: fruitDelegate
        anchors.fill: parent
    }
}
</db:programlisting>
<db:anchor xml:id="qml-data-models"/>
</db:section>
</db:section>
<db:section xml:id="models">
<db:title>Models</db:title>
<db:para>Data is provided to the delegate via named data roles which the delegate may bind to. Here is a ListModel with two roles, <db:emphasis>type</db:emphasis> and <db:emphasis>age</db:emphasis>, and a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> with a delegate that binds to these roles to display their values:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    width: 200
    height: 250

    ListModel {
        id: myModel
        ListElement { type: &quot;Dog&quot;; age: 8; noise: &quot;meow&quot; }
        ListElement { type: &quot;Cat&quot;; age: 5; noise: &quot;woof&quot; }
    }

    component MyDelegate : Text {
        required property string type
        required property int age
        text: type + &quot;, &quot; + age
        // WRONG: Component.onCompleted: () =&gt; console.log(noise)
        // The above line would cause a ReferenceError
        // as there is no required property noise,
        // and the presence of the required properties prevents
        // noise from being injected into the scope
    }

    ListView {
        anchors.fill: parent
        model: myModel
        delegate: MyDelegate {}
    }
}
</db:programlisting>
<db:para>In most cases you should use <db:link xlink:href="qtqml-syntax-objectattributes.xml#required-properties">required properties</db:link> to pass model data into your delegates. If a delegate contains required properties, the QML engine will check if the name of a required property matches that of a model role. If so, that property will be bound to the corresponding value from the model.</db:para>
<db:para>In rare corner cases, you may want to transfer the model properties through the QML context rather than as required properties. If no required properties are present in your delegate, the named roles are provided as context properties:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    width: 200; height: 250

    ListModel {
        id: myModel
        ListElement { type: &quot;Dog&quot;; age: 8 }
        ListElement { type: &quot;Cat&quot;; age: 5 }
    }

    Component {
        id: myDelegate
        Text { text: type + &quot;, &quot; + age }
    }

    ListView {
        anchors.fill: parent
        model: myModel
        delegate: myDelegate
    }
}
</db:programlisting>
<db:para>Context properties are invisible to tooling and prevent the <db:link xlink:href="qtquick-tools-and-utilities.xml#qt-quick-compiler">Qt Quick Compiler</db:link> from optimizing your code. They make it harder to reason about the specific data your delegate expects. There is no way to explicitly populate the QML context from QML. If your component expects data to be passed via the QML context, you can only use it in places where the right context is made available via native means. This can be your own C++ code or the specific implementations of surrounding elements. Conversely, required properties can be set in a number of ways from QML or via native means. Therefore, passing data via the QML context reduces the re-usability of your components.</db:para>
<db:para>If there is a naming clash between the model's properties and the delegate's properties, the roles can be accessed with the qualified <db:emphasis>model</db:emphasis> name instead. For example, if a <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> type had (non-required) <db:emphasis>type</db:emphasis> or <db:emphasis>age</db:emphasis> properties, the text in the above example would display those property values instead of the <db:emphasis>type</db:emphasis> and <db:emphasis>age</db:emphasis> values from the model item. In this case, the properties could have been referenced as <db:code>model.type</db:code> and <db:code>model.age</db:code> instead to ensure the delegate displays the property values from the model item. For this to work, you need to require a <db:code>model</db:code> property in your delegate (unless you are using context properties).</db:para>
<db:para>A special <db:emphasis>index</db:emphasis> role containing the index of the item in the model is also available to the delegate. Note this index is set to -1 if the item is removed from the model. If you bind to the index role, be sure that the logic accounts for the possibility of index being -1, i.e. that the item is no longer valid. (Usually the item will shortly be destroyed, but it is possible to delay delegate destruction in some views via a <db:code>delayRemove</db:code> attached property.)</db:para>
<db:para>Remember that you can use integers or arrays as model:</db:para>
<db:programlisting language="qml">Repeater {
    model: 5
    Text {
        required property int modelData
        text: modelData
    }
}
</db:programlisting>
<db:programlisting language="qml">Repeater {
    model: [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]
    Text {
        required property string modelData
        text: modelData
    }
}
</db:programlisting>
<db:para>Such models provide a singular, anonymous piece of data to each instance of the delegate. Accessing this piece of data is the primary reason to use <db:emphasis>modelData</db:emphasis>, but other models also provide <db:emphasis>modelData</db:emphasis>.</db:para>
<db:para>The object provided via the <db:emphasis>model</db:emphasis> role has a property with an empty name. This anonymous property holds the <db:emphasis>modelData</db:emphasis>. Furthermore, the object provided via the <db:emphasis>model</db:emphasis> role has another property called <db:emphasis>modelData</db:emphasis>. This property is deprecated and also holds the <db:emphasis>modelData</db:emphasis>.</db:para>
<db:para>In addition to the <db:emphasis>model</db:emphasis> role, a <db:emphasis>modelData</db:emphasis> role is provided. The <db:emphasis>modelData</db:emphasis> role holds the same data as the <db:emphasis>modelData</db:emphasis> property and the anonymous property of the object provided via the <db:emphasis>model</db:emphasis> role.</db:para>
<db:para>The differences between the <db:emphasis>model</db:emphasis> role and the various means to access <db:emphasis>modelData</db:emphasis> are as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Models that do not have named roles (such as integers or an array of strings) have their data provided via the <db:emphasis>modelData</db:emphasis> role. The <db:emphasis>modelData</db:emphasis> role does not necessarily contain an object in this case. In the case of an integer model it would contain an integer (the index of the current model item). In the case of an array of strings it would contain a string. The <db:emphasis>model</db:emphasis> role still contains an object, but without any properties for named roles. <db:emphasis>model</db:emphasis> still contains its usual <db:emphasis>modelData</db:emphasis> and anonymous properties, though.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the model has only one named role, the <db:emphasis>modelData</db:emphasis> role contains the same data as the named role. It is not necessarily an object and it does not contain the named role as a named property the way it usually would. The <db:emphasis>model</db:emphasis> role still contains an object with the named role as property, and the <db:emphasis>modelData</db:emphasis> and anonymous properties in this case.</db:para>
</db:listitem>
<db:listitem>
<db:para>For models with multiple roles, the <db:emphasis>modelData</db:emphasis> role is only provided as a required property, not as a context property. This is due to backwards compatibility with older versions of Qt.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The anonymous property on <db:emphasis>model</db:emphasis> allows you to cleanly write delegates that receive both their model data and the role name they should react to as properties from the outside. You can provide a model without or with only one named role, and an empty string as role. Then, a binding that simply accesses <db:code>model[role]</db:code> will do what you expect. You don't have to add special code for this case.</db:para>
<db:note>
<db:para>The <db:emphasis>model</db:emphasis>, <db:emphasis>index</db:emphasis>, and <db:emphasis>modelData</db:emphasis> roles are not accessible if the delegate contains required properties, unless it has also required properties with matching names.</db:para>
</db:note>
<db:para>QML provides several types of data models among the built-in set of QML types. In addition, models can be created with Qt C++ and then made available to <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> for use by QML components. For information about creating these models, visit the <db:link xlink:href="qtquick-modelviewsdata-cppmodels.xml">Using C++ Models with Qt Quick Views</db:link> and <db:link xlink:href="qtqml-typesystem-topic.xml#qml-object-types">creating QML types</db:link> articles.</db:para>
<db:para>Positioning of items from a model can be achieved using a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link>.</db:para>
<db:section xml:id="list-model">
<db:title>List Model</db:title>
<db:para>ListModel is a simple hierarchy of types specified in QML. The available roles are specified by the ListElement properties.</db:para>
<db:programlisting language="qml">ListModel {
    id: fruitModel

    ListElement {
        name: &quot;Apple&quot;
        cost: 2.45
    }
    ListElement {
        name: &quot;Orange&quot;
        cost: 3.25
    }
    ListElement {
        name: &quot;Banana&quot;
        cost: 1.95
    }
}
</db:programlisting>
<db:para>The above model has two roles, <db:emphasis>name</db:emphasis> and <db:emphasis>cost</db:emphasis>. These can be bound to by a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> delegate, for example:</db:para>
<db:programlisting language="qml">ListView {
    anchors.fill: parent
    model: fruitModel
    delegate: Row {
        id: delegate
        required property string name
        required property real cost

        Text { text: &quot;Fruit: &quot; + delegate.name }
        Text { text: &quot;Cost: $&quot; + delegate.cost }
    }
}
</db:programlisting>
<db:para>ListModel provides methods to manipulate the ListModel directly via JavaScript. In this case, the first item inserted determines the roles available to any views that are using the model. For example, if an empty ListModel is created and populated via JavaScript, the roles provided by the first insertion are the only roles that will be shown in the view:</db:para>
<db:programlisting language="qml">ListModel { id: fruitModel }
    ...
MouseArea {
    anchors.fill: parent
    onClicked: fruitModel.append({&quot;cost&quot;: 5.95, &quot;name&quot;:&quot;Pizza&quot;})
}
</db:programlisting>
<db:para>When the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is clicked, <db:code>fruitModel</db:code> will have two roles, <db:emphasis>cost</db:emphasis> and <db:emphasis>name</db:emphasis>. Even if subsequent roles are added, only the first two will be handled by views using the model. To reset the roles available in the model, call ListModel::clear().</db:para>
</db:section>
<db:section xml:id="xml-model">
<db:title>XML Model</db:title>
<db:para>XmlListModel allows construction of a model from an XML data source. The roles are specified via the XmlListModelRole type. The type needs to be imported.</db:para>
<db:programlisting language="cpp">import QtQml.XmlListModel
</db:programlisting>
<db:para>The following model has three roles, <db:emphasis>title</db:emphasis>, <db:emphasis>link</db:emphasis> and <db:emphasis>pubDate</db:emphasis>:</db:para>
<db:programlisting language="qml">XmlListModel {
     id: feedModel
     source: &quot;http://rss.news.yahoo.com/rss/oceania&quot;
     query: &quot;/rss/channel/item&quot;
     XmlListModelRole { name: &quot;title&quot;; elementName: &quot;title&quot; }
     XmlListModelRole { name: &quot;link&quot;; elementName: &quot;link&quot; }
     XmlListModelRole { name: &quot;pubDate&quot;; elementName: &quot;pubDate&quot; }
}
</db:programlisting>
<db:para>The <db:code>query</db:code> property specifies that the XmlListModel generates a model item for each <db:code>&lt;item&gt;</db:code> in the XML document.</db:para>
<db:para>The <db:link xlink:href="">RSS News demo</db:link> shows how XmlListModel can be used to display an RSS feed.</db:para>
</db:section>
<db:section xml:id="object-model">
<db:title>Object Model</db:title>
<db:para>ObjectModel contains the visual items to be used in a view. When an ObjectModel is used in a view, the view does not require a delegate because the ObjectModel already contains the visual delegate (items).</db:para>
<db:para>The example below places three colored rectangles in a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.</db:para>
<db:programlisting language="cpp">import QtQuick 2.0
import QtQml.Models 2.1

Rectangle {
    ObjectModel {
        id: itemModel
        Rectangle { height: 30; width: 80; color: &quot;red&quot; }
        Rectangle { height: 30; width: 80; color: &quot;green&quot; }
        Rectangle { height: 30; width: 80; color: &quot;blue&quot; }
    }

    ListView {
        anchors.fill: parent
        model: itemModel
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="integers-as-models">
<db:title>Integers as Models</db:title>
<db:para>An integer can be used as a model that contains a certain number of types. In this case, the model does not have any data roles.</db:para>
<db:para>The following example creates a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> with five elements:</db:para>
<db:programlisting language="qml">Item {
    width: 200; height: 250

    Component {
        id: itemDelegate

        Text {
            required property int index
            text: &quot;I am item number: &quot; + index
        }
    }

    ListView {
        anchors.fill: parent
        model: 5
        delegate: itemDelegate
    }

}
</db:programlisting>
<db:note>
<db:para>The limit on the number of items in an integer model is 100,000,000.</db:para>
</db:note>
</db:section>
<db:section xml:id="object-instances-as-models">
<db:title>Object Instances as Models</db:title>
<db:para>An object instance can be used to specify a model with a single object type. The properties of the object are provided as roles.</db:para>
<db:para>The example below creates a list with one item, showing the color of the <db:emphasis>myText</db:emphasis> text. Note the use of the fully qualified <db:emphasis>model.color</db:emphasis> property to avoid clashing with <db:emphasis>color</db:emphasis> property of the Text type in the delegate.</db:para>
<db:programlisting language="qml">Rectangle {
    width: 200; height: 250

    Text {
        id: myText
        text: &quot;Hello&quot;
        color: &quot;#dd44ee&quot;
    }

    Component {
        id: myDelegate

        Text {
            required property var model
            text: model.color
        }
    }

    ListView {
        anchors.fill: parent
        anchors.topMargin: 30
        model: myText
        delegate: myDelegate
    }
}
</db:programlisting>
<db:anchor xml:id="qml-c-models"/>
</db:section>
<db:section xml:id="c-data-models">
<db:title>C++ Data Models</db:title>
<db:para>Models can be defined in C++ and then made available to QML. This mechanism is useful for exposing existing C++ data models or otherwise complex datasets to QML.</db:para>
<db:para>For information, visit the <db:link xlink:href="qtquick-modelviewsdata-cppmodels.xml">Using C++ Models with Qt Quick Views</db:link> article.</db:para>
</db:section>
<db:section xml:id="array-models">
<db:title>Array models</db:title>
<db:para>You can use JavaScript arrays and various kinds of QML lists as models. The elements of the list will be made available as model and modelData by the rules outlined above: Singular data like integers or strings are made available as singular modelData. Structured data like JavaScript objects or QObjects are made available as structured model and modelData.</db:para>
<db:para>The individual model roles are also made available if you request them as required properties. Since we cannot know in advance what objects will appear in an array, any required property in a delegate will be populated, possibly with a coercion of <db:code>undefined</db:code> to the required type. The individual model roles are not made available via the QML context, though. They would shadow all other context properties.</db:para>
</db:section>
</db:section>
<db:section xml:id="repeaters">
<db:title>Repeaters</db:title>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/repeater-index.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:para>Repeaters create items from a template for use with positioners, using data from a model. Combining repeaters and positioners is an easy way to lay out lots of items. A <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> item is placed inside a positioner, and generates items that the enclosing positioner arranges.</db:para>
<db:para>Each Repeater creates a number of items by combining each element of data from a model, specified using the <db:link xlink:href="qml-qtquick-repeater.xml#model-prop">model</db:link> property, with the template item, defined as a child item within the Repeater. The total number of items is determined by the amount of data in the model.</db:para>
<db:para>The following example shows a repeater used with a Grid item to arrange a set of Rectangle items. The Repeater item creates a series of 24 rectangles for the Grid item to position in a 5 by 5 arrangement.</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    width: 400; height: 400; color: &quot;black&quot;

    Grid {
        x: 5; y: 5
        rows: 5; columns: 5; spacing: 10

        Repeater { model: 24
                   Rectangle { width: 70; height: 70
                               color: &quot;lightgreen&quot;

                               Text { text: index
                                      font.pointSize: 30
                                      anchors.centerIn: parent } }
        }
    }
}
</db:programlisting>
<db:para>The number of items created by a Repeater is held by its <db:link xlink:href="qml-qtquick-repeater.xml#count-prop">count</db:link> property. It is not possible to set this property to determine the number of items to be created. Instead, as in the above example, we use an integer as the model.</db:para>
<db:para>For more details, see the <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#integers-as-models">QML Data Models</db:link> document.</db:para>
<db:para>If the model is a string list, the delegate is also exposed to the usual read-only <db:code>modelData</db:code> property that holds the string. For example:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">Column {
    Repeater {
        model: [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;]
        Text {
            required property string modelData
            text: &quot;Data: &quot; + modelData
        }
    }
}
</db:programlisting>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/repeater-modeldata.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para>It is also possible to use a delegate as the template for the items created by a Repeater. This is specified using the <db:link xlink:href="qml-qtquick-repeater.xml#delegate-prop">delegate</db:link> property.</db:para>
</db:section>
<db:section xml:id="changing-model-data">
<db:title>Changing Model Data</db:title>
<db:para>To change model data, you can assign updated values to the <db:code>model</db:code> properties. The QML ListModel is editable by default whereas C++ models must implement setData() to become editable. Integer and JavaScript array models are read-only.</db:para>
<db:para>Supposed a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> based C++ model that implements the <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link> method is registered as a QML type named <db:code>EditableModel</db:code>. Data could then be written to the model like this:</db:para>
<db:programlisting language="qml">ListView {
    anchors.fill: parent
    model: EditableModel {}
    delegate: TextEdit {
        required property var model

        width: ListView.view.width
        height: 30
        text: model.edit
        Keys.onReturnPressed: model.edit = text
    }
}
</db:programlisting>
<db:note>
<db:para>The <db:code>edit</db:code> role is equal to <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link>. See <db:link xlink:href="qabstractitemmodel.xml#roleNames">roleNames</db:link>() for the built-in role names. However, real life models would usually register custom roles.</db:para>
</db:note>
<db:note>
<db:para>If a model role is bound to a <db:link xlink:href="qtqml-syntax-objectattributes.xml#required-properties">required property</db:link>, assigning to that property will not modify the model. It will instead break the binding to the model (just like assigning to any other property breaks existing bindings). If you want to use required properties and change the model data, make model also a required property and assign to <db:emphasis>model.propertyName</db:emphasis>.</db:para>
</db:note>
<db:para>For more information, visit the <db:link xlink:href="qtquick-modelviewsdata-cppmodels.xml#changing-model-data">Using C++ Models with Qt Quick Views</db:link> article.</db:para>
</db:section>
<db:section xml:id="using-transitions">
<db:title>Using Transitions</db:title>
<db:para>Transitions can be used to animate items that are added to, moved within, or removed from a positioner.</db:para>
<db:para>Transitions for adding items apply to items that are created as part of a positioner, as well as those that are reparented to become children of a positioner.</db:para>
<db:para>Transitions for removing items apply to items within a positioner that are deleted, as well as those that are removed from a positioner and given new parents in a document.</db:para>
<db:note>
<db:para>Changing the opacity of items to zero will not cause them to disappear from the positioner. They can be removed and re-added by changing the visible property.</db:para>
</db:note>
</db:section>
</db:article>
