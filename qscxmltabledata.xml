<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScxmlTableData Class</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Scxml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscxmltabledata.xml">QScxmlTableData</db:link> class is used by compiled state machines.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScxmlTableData</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += scxml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qscxmltabledata.xml">QScxmlTableData</db:link> is the interface to the compiled representation of SCXML state machines. It should only be used internally and by state machines compiled from SCXML documents.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QScxmlTableData">
<db:title>[virtual noexcept] QScxmlTableData::~QScxmlTableData()</db:title>
<db:para>Destroys the SXCML table data.</db:para>
</db:section>
<db:section xml:id="assignmentInfo">
<db:title>[pure virtual] QScxmlExecutableContent::AssignmentInfo QScxmlTableData::assignmentInfo(QScxmlExecutableContent::EvaluatorId <db:emphasis>assignmentId</db:emphasis>) const</db:title>
<db:para>Returns the <db:link xlink:href="qscxmlexecutablecontent-assignmentinfo.xml">QScxmlExecutableContent::AssignmentInfo</db:link> object for the given <db:code role="parameter">assignmentId</db:code>.</db:para>
</db:section>
<db:section xml:id="dataNames">
<db:title>[pure virtual] QScxmlExecutableContent::StringId *QScxmlTableData::dataNames(int *<db:emphasis>count</db:emphasis>) const</db:title>
<db:para>Retrieves the string IDs for the names of data items in the data model. The number of strings is saved into <db:code role="parameter">count</db:code> and a pointer to an array of string IDs is returned.</db:para>
<db:para>Returns a pointer to an array of string IDs.</db:para>
</db:section>
<db:section xml:id="evaluatorInfo">
<db:title>[pure virtual] QScxmlExecutableContent::EvaluatorInfo QScxmlTableData::evaluatorInfo(QScxmlExecutableContent::EvaluatorId <db:emphasis>evaluatorId</db:emphasis>) const</db:title>
<db:para>Returns the <db:link xlink:href="qscxmlexecutablecontent-evaluatorinfo.xml">QScxmlExecutableContent::EvaluatorInfo</db:link> object for the given <db:code role="parameter">evaluatorId</db:code>.</db:para>
</db:section>
<db:section xml:id="foreachInfo">
<db:title>[pure virtual] QScxmlExecutableContent::ForeachInfo QScxmlTableData::foreachInfo(QScxmlExecutableContent::EvaluatorId <db:emphasis>foreachId</db:emphasis>) const</db:title>
<db:para>Returns the <db:link xlink:href="qscxmlexecutablecontent-foreachinfo.xml">QScxmlExecutableContent::ForeachInfo</db:link> object for the given <db:code role="parameter">foreachId</db:code>.</db:para>
</db:section>
<db:section xml:id="initialSetup">
<db:title>[pure virtual] QScxmlExecutableContent::ContainerId QScxmlTableData::initialSetup() const</db:title>
<db:para>Initializes the table data. Returns the ID of the container with instructions to be executed when initializing the state machine.</db:para>
</db:section>
<db:section xml:id="instructions">
<db:title>[pure virtual] QScxmlExecutableContent::InstructionId *QScxmlTableData::instructions() const</db:title>
<db:para>Returns a pointer to the instructions of executable content contained in the state machine.</db:para>
</db:section>
<db:section xml:id="name">
<db:title>[pure virtual] QString QScxmlTableData::name() const</db:title>
<db:para>Returns the name of the state machine.</db:para>
</db:section>
<db:section xml:id="serviceFactory">
<db:title>[pure virtual] QScxmlInvokableServiceFactory *QScxmlTableData::serviceFactory(int <db:emphasis>id</db:emphasis>) const</db:title>
<db:para>Returns the service factory that creates invokable services for the state with the ID <db:code role="parameter">id</db:code>.</db:para>
</db:section>
<db:section xml:id="stateMachineTable">
<db:title>[pure virtual] const qint32 *QScxmlTableData::stateMachineTable() const</db:title>
<db:para>Returns a pointer to the complete state table, expressed as an opaque sequence of integers.</db:para>
</db:section>
<db:section xml:id="string">
<db:title>[pure virtual] QString QScxmlTableData::string(QScxmlExecutableContent::StringId <db:emphasis>id</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> for the given <db:code role="parameter">id</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
