<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QXmlReader Class</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlreader.xml">QXmlReader</db:link> class provides an interface for XML readers (i.e. parsers).</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlReader</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qxmlsimplereader.xml" xlink:role="class">QXmlSimpleReader</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlReader is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This abstract class provides an interface for all of Qt's XML readers. Currently there is only one implementation of a reader included in Qt's XML module: <db:link xlink:href="qxmlsimplereader.xml">QXmlSimpleReader</db:link>. In future releases there might be more readers with different properties available (e.g. a validating parser).</db:para>
<db:para>The design of the XML classes follows the <db:link xlink:href="http://www.saxproject.org/">SAX2 Java interface</db:link>, with the names adapted to fit Qt naming conventions. It should be very easy for anybody who has worked with SAX2 to get started with the Qt XML classes.</db:para>
<db:para>All readers use the class <db:link xlink:href="qxmlinputsource.xml">QXmlInputSource</db:link> to read the input document. Since you are normally interested in particular content in the XML document, the reader reports the content through special handler classes (<db:link xlink:href="qxmldtdhandler.xml">QXmlDTDHandler</db:link>, <db:link xlink:href="qxmldeclhandler.xml">QXmlDeclHandler</db:link>, <db:link xlink:href="qxmlcontenthandler.xml">QXmlContentHandler</db:link>, <db:link xlink:href="qxmlentityresolver.xml">QXmlEntityResolver</db:link>, <db:link xlink:href="qxmlerrorhandler.xml">QXmlErrorHandler</db:link> and <db:link xlink:href="qxmllexicalhandler.xml">QXmlLexicalHandler</db:link>), which you must subclass, if you want to process the contents.</db:para>
<db:para>Since the handler classes only describe interfaces you must implement all the functions. We provide the <db:link xlink:href="qxmldefaulthandler.xml">QXmlDefaultHandler</db:link> class to make this easier: it implements a default behavior (do nothing) for all functions, so you can subclass it and just implement the functions you are interested in.</db:para>
<db:para>Features and properties of the reader can be set with <db:link xlink:href="qxmlreader.xml#setFeature">setFeature</db:link>() and <db:link xlink:href="qxmlreader.xml#setProperty">setProperty</db:link>() respectively. You can set the reader to use your own subclasses with <db:link xlink:href="qxmlreader.xml#setEntityResolver">setEntityResolver</db:link>(), <db:link xlink:href="qxmlreader.xml#setDTDHandler">setDTDHandler</db:link>(), <db:link xlink:href="qxmlreader.xml#setContentHandler">setContentHandler</db:link>(), <db:link xlink:href="qxmlreader.xml#setErrorHandler">setErrorHandler</db:link>(), <db:link xlink:href="qxmlreader.xml#setLexicalHandler">setLexicalHandler</db:link>() and <db:link xlink:href="qxmlreader.xml#setDeclHandler">setDeclHandler</db:link>(). The parse itself is started with a call to parse().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlsimplereader.xml">QXmlSimpleReader</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QXmlReader">
<db:title>[virtual noexcept] QXmlReader::~QXmlReader()</db:title>
<db:para>Destroys the reader.</db:para>
</db:section>
<db:section xml:id="DTDHandler">
<db:title>[pure virtual] QXmlDTDHandler *QXmlReader::DTDHandler() const</db:title>
<db:para>Returns the DTD handler or 0 if none was set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#setDTDHandler">setDTDHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentHandler">
<db:title>[pure virtual] QXmlContentHandler *QXmlReader::contentHandler() const</db:title>
<db:para>Returns the content handler or 0 if none was set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#setContentHandler">setContentHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="declHandler">
<db:title>[pure virtual] QXmlDeclHandler *QXmlReader::declHandler() const</db:title>
<db:para>Returns the declaration handler or 0 if none was set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#setDeclHandler">setDeclHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="entityResolver">
<db:title>[pure virtual] QXmlEntityResolver *QXmlReader::entityResolver() const</db:title>
<db:para>Returns the entity resolver or 0 if none was set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#setEntityResolver">setEntityResolver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorHandler">
<db:title>[pure virtual] QXmlErrorHandler *QXmlReader::errorHandler() const</db:title>
<db:para>Returns the error handler or 0 if none is set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#setErrorHandler">setErrorHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="feature">
<db:title>[pure virtual] bool QXmlReader::feature(const QString &amp;<db:emphasis>name</db:emphasis>, bool *<db:emphasis>ok</db:emphasis> = 0) const</db:title>
<db:para>If the reader has the feature called <db:code role="parameter">name</db:code>, the feature's value is returned. If no such feature exists the return value is undefined.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not 0: *<db:code role="parameter">ok</db:code> is set to true if the reader has the feature called <db:code role="parameter">name</db:code>; otherwise *<db:code role="parameter">ok</db:code> is set to false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#setFeature">setFeature</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlreader.xml#hasFeature">hasFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasFeature">
<db:title>[pure virtual] bool QXmlReader::hasFeature(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns true if the reader has the feature called <db:code role="parameter">name</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#feature">feature</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlreader.xml#setFeature">setFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasProperty">
<db:title>[pure virtual] bool QXmlReader::hasProperty(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns true if the reader has the property <db:code role="parameter">name</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlreader.xml#setProperty">setProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lexicalHandler">
<db:title>[pure virtual] QXmlLexicalHandler *QXmlReader::lexicalHandler() const</db:title>
<db:para>Returns the lexical handler or 0 if none was set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#setLexicalHandler">setLexicalHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parse-1">
<db:title>[pure virtual] bool QXmlReader::parse(const QXmlInputSource *<db:emphasis>input</db:emphasis>)</db:title>
<db:para>Reads an XML document from <db:code role="parameter">input</db:code> and parses it. Returns true if the parsing was successful; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="property">
<db:title>[pure virtual] void *QXmlReader::property(const QString &amp;<db:emphasis>name</db:emphasis>, bool *<db:emphasis>ok</db:emphasis> = 0) const</db:title>
<db:para>If the reader has the property <db:code role="parameter">name</db:code>, this function returns the value of the property; otherwise the return value is undefined.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not 0: if the reader has the <db:code role="parameter">name</db:code> property *<db:code role="parameter">ok</db:code> is set to true; otherwise *<db:code role="parameter">ok</db:code> is set to false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlreader.xml#hasProperty">hasProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContentHandler">
<db:title>[pure virtual] void QXmlReader::setContentHandler(QXmlContentHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Sets the content handler to <db:code role="parameter">handler</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#contentHandler">contentHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDTDHandler">
<db:title>[pure virtual] void QXmlReader::setDTDHandler(QXmlDTDHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Sets the DTD handler to <db:code role="parameter">handler</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#DTDHandler">DTDHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDeclHandler">
<db:title>[pure virtual] void QXmlReader::setDeclHandler(QXmlDeclHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Sets the declaration handler to <db:code role="parameter">handler</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#declHandler">declHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEntityResolver">
<db:title>[pure virtual] void QXmlReader::setEntityResolver(QXmlEntityResolver *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Sets the entity resolver to <db:code role="parameter">handler</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#entityResolver">entityResolver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setErrorHandler">
<db:title>[pure virtual] void QXmlReader::setErrorHandler(QXmlErrorHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Sets the error handler to <db:code role="parameter">handler</db:code>. Clears the error handler if <db:code role="parameter">handler</db:code> is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#errorHandler">errorHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFeature">
<db:title>[pure virtual] void QXmlReader::setFeature(const QString &amp;<db:emphasis>name</db:emphasis>, bool <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the feature called <db:code role="parameter">name</db:code> to the given <db:code role="parameter">value</db:code>. If the reader doesn't have the feature nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#feature">feature</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlreader.xml#hasFeature">hasFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLexicalHandler">
<db:title>[pure virtual] void QXmlReader::setLexicalHandler(QXmlLexicalHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:para>Sets the lexical handler to <db:code role="parameter">handler</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#lexicalHandler">lexicalHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty">
<db:title>[pure virtual] void QXmlReader::setProperty(const QString &amp;<db:emphasis>name</db:emphasis>, void *<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the property <db:code role="parameter">name</db:code> to <db:code role="parameter">value</db:code>. If the reader doesn't have the property nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlreader.xml#hasProperty">hasProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QXmlReader</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qxmlreader.xml">QXmlReader</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="parse">
<db:title>[pure virtual, deprecated] bool QXmlReader::parse(const QXmlInputSource &amp;<db:emphasis>input</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Parses the given <db:code role="parameter">input</db:code>.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
