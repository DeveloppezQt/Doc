<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickStyle Class</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickstyle.xml">QQuickStyle</db:link> class allows configuring the application style.</db:para>
<db:para>This class was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickStyle</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quickcontrols2</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qquickstyle.xml">QQuickStyle</db:link> provides API for querying and configuring the application <db:link xlink:href="qtquickcontrols2-styles.xml">styles</db:link> of Qt Quick Controls.</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQmlApplicationEngine&amp;gt;
#include &amp;lt;QQuickStyle&amp;gt;

int main(int argc, char *argv[])
{
    QGuiApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
    QGuiApplication app(argc, argv);

    QQuickStyle::setStyle(&quot;Material&quot;);

    QQmlApplicationEngine engine;
    engine.load(QUrl(&quot;qrc:/main.qml&quot;));

    return app.exec();
}
</db:programlisting>
<db:note>
<db:para>The style must be configured <db:emphasis role="bold">before</db:emphasis> loading QML that imports Qt Quick Controls. It is not possible to change the style after the QML types have been registered.</db:para>
</db:note>
<db:para>The style can also be specified as a path to a custom style, such as <db:code>&quot;:/mystyle&quot;</db:code>. See <db:link xlink:href="qtquickcontrols2-customize.xml#creating-a-custom-style">Creating a Custom Style</db:link> for more details about building custom styles. Custom styles do not need to implement all controls. By default, the styling system uses the <db:link xlink:href="qtquickcontrols2-default.xml">Default style</db:link> as a fallback for controls that a custom style does not provide. It is possible to specify a different fallback style to customize or extend one of the built-in styles.</db:para>
<db:programlisting language="cpp">QQuickStyle::setStyle(&quot;:/mystyle&quot;);
QQuickStyle::setFallbackStyle(&quot;Material&quot;);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-styles.xml">Styling Qt Quick Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="addStylePath">
<db:title>[static, since 5.12] void QQuickStyle::addStylePath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>addStylePath</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addStylePath(const QString &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">path</db:code> as a directory where Qt Quick Controls 2 searches for available styles.</db:para>
<db:para>The <db:code role="parameter">path</db:code> may be any local filesystem directory or <db:link xlink:href="resources.xml">Qt Resource</db:link> directory. For example, the following paths are all valid:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>/path/to/styles/</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>file:///path/to/styles/</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>:/path/to/styles/</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qrc:/path/to/styles/</db:code>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:code role="parameter">path</db:code> will be converted into <db:link xlink:href="qdir.xml#canonicalPath">canonical form</db:link> before it is added to the style path list.</db:para>
<db:para>The newly added <db:code role="parameter">path</db:code> will be first in the <db:link xlink:href="qquickstyle.xml#stylePathList">stylePathList</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickstyle.xml#stylePathList">stylePathList</db:link>()</db:member>
<db:member><db:link xlink:href="qquickstyle.xml#availableStyles">availableStyles</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableStyles">
<db:title>[static, since 5.9] QStringList QQuickStyle::availableStyles()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>availableStyles</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList availableStyles()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the names of the available styles.</db:para>
<db:note>
<db:para>The method must be called <db:emphasis role="bold">after</db:emphasis> creating an instance of <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickstyle.xml#stylePathList">stylePathList</db:link>()</db:member>
<db:member><db:link xlink:href="qquickstyle.xml#addStylePath">addStylePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>[static] QString QQuickStyle::name()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the application style.</db:para>
<db:note>
<db:para>The application style can be specified by passing a <db:code>-style</db:code> command line argument. Therefore <db:code>name()</db:code> may not return a fully resolved value if called before constructing a <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="path">
<db:title>[static] QString QQuickStyle::path()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>path</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString path()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the path of an overridden application style, or an empty string if the style is one of the built-in Qt Quick Controls 2 styles.</db:para>
<db:note>
<db:para>The application style can be specified by passing a <db:code>-style</db:code> command line argument. Therefore <db:code>path()</db:code> may not return a fully resolved value if called before constructing a <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="setFallbackStyle">
<db:title>[static, since 5.8] void QQuickStyle::setFallbackStyle(const QString &amp;<db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setFallbackStyle</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFallbackStyle(const QString &amp;style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the application fallback style to <db:code role="parameter">style</db:code>.</db:para>
<db:note>
<db:para>The fallback style must be the name of one of the built-in Qt Quick Controls styles, e.g. &quot;Material&quot;.</db:para>
</db:note>
<db:note>
<db:para>The style must be configured <db:emphasis role="bold">before</db:emphasis> loading QML that imports Qt Quick Controls. It is not possible to change the style after the QML types have been registered.</db:para>
</db:note>
<db:para>The fallback style can be also specified by setting the <db:code>QT_QUICK_CONTROLS_FALLBACK_STYLE</db:code> <db:link xlink:href="qtquickcontrols2-environment.xml">environment variable</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickstyle.xml#setStyle">setStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qtquickcontrols2-styles.xml#using-styles-in-qt-quick-controls">Using Styles in Qt Quick Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStyle">
<db:title>[static] void QQuickStyle::setStyle(const QString &amp;<db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setStyle</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStyle(const QString &amp;style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the application style to <db:code role="parameter">style</db:code>.</db:para>
<db:note>
<db:para>The style must be configured <db:emphasis role="bold">before</db:emphasis> loading QML that imports Qt Quick Controls. It is not possible to change the style after the QML types have been registered.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickstyle.xml#setFallbackStyle">setFallbackStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qtquickcontrols2-styles.xml#using-styles-in-qt-quick-controls">Using Styles in Qt Quick Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stylePathList">
<db:title>[static, since 5.12] QStringList QQuickStyle::stylePathList()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>stylePathList</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList stylePathList()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of directories where Qt Quick Controls 2 searches for available styles.</db:para>
<db:para>By default, the list contains paths specified in the <db:code>QT_QUICK_CONTROLS_STYLE_PATH</db:code> environment variable, and any existing <db:code>QtQuick/Controls.2</db:code> sub-directories in <db:link xlink:href="qqmlengine.xml#importPathList">QQmlEngine::importPathList</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickstyle.xml#addStylePath">addStylePath</db:link>()</db:member>
<db:member><db:link xlink:href="qquickstyle.xml#availableStyles">availableStyles</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
