<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickStyle Class</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickstyle.xml">QQuickStyle</db:link> class allows configuring the application style.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickStyle</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS QuickControls2)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::QuickControls2)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quickcontrols2</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qquickstyle.xml">QQuickStyle</db:link> provides API for querying and configuring the application <db:link xlink:href="qtquickcontrols-styles.xml">styles</db:link> of Qt Quick Controls.</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQmlApplicationEngine&amp;gt;
#include &amp;lt;QQuickStyle&amp;gt;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    QQuickStyle::setStyle(&quot;Material&quot;);

    QQmlApplicationEngine engine;
    engine.load(QUrl(&quot;qrc:/main.qml&quot;));

    return app.exec();
}
</db:programlisting>
<db:note>
<db:para>The style must be configured <db:emphasis role="bold">before</db:emphasis> loading QML that imports Qt Quick Controls. It is not possible to change the style after the QML types have been registered.</db:para>
</db:note>
<db:note>
<db:para><db:link xlink:href="qquickstyle.xml">QQuickStyle</db:link> is not supported when using <db:link xlink:href="qtquickcontrols-styles.xml#compile-time-style-selection">compile-time style selection</db:link>.</db:para>
</db:note>
<db:para>To create your own custom style, see <db:link xlink:href="qtquickcontrols-customize.xml#creating-a-custom-style">Creating a Custom Style</db:link>. Custom styles do not need to implement all controls. By default, the styling system uses the <db:link xlink:href="qtquickcontrols-basic.xml">Basic style</db:link> as a fallback for controls that a custom style does not provide. It is possible to specify a different fallback style to customize or extend one of the built-in styles.</db:para>
<db:programlisting language="cpp">QQuickStyle::setStyle(&quot;MyStyle&quot;);
QQuickStyle::setFallbackStyle(&quot;Material&quot;);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols-styles.xml">Styling Qt Quick Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="name">
<db:title>[static] QString QQuickStyle::name()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the application style.</db:para>
<db:note>
<db:para>The application style can be specified by passing a <db:code>-style</db:code> command line argument. Therefore <db:code>name()</db:code> may not return a fully resolved value if called before constructing a <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="setFallbackStyle">
<db:title>[static] void QQuickStyle::setFallbackStyle(const QString &amp;<db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setFallbackStyle</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFallbackStyle(const QString &amp;style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the application fallback style to <db:code role="parameter">style</db:code>.</db:para>
<db:note>
<db:para>The fallback style must be the name of one of the built-in Qt Quick Controls styles, e.g. &quot;Material&quot;.</db:para>
</db:note>
<db:note>
<db:para>The style must be configured <db:emphasis role="bold">before</db:emphasis> loading QML that imports Qt Quick Controls. It is not possible to change the style after the QML types have been registered.</db:para>
</db:note>
<db:para>The fallback style can be also specified by setting the <db:code>QT_QUICK_CONTROLS_FALLBACK_STYLE</db:code> <db:link xlink:href="qtquickcontrols-environment.xml">environment variable</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickstyle.xml#setStyle">setStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qtquickcontrols-styles.xml#using-styles-in-qt-quick-controls">Using Styles in Qt Quick Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStyle">
<db:title>[static] void QQuickStyle::setStyle(const QString &amp;<db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setStyle</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStyle(const QString &amp;style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the application style to <db:code role="parameter">style</db:code>.</db:para>
<db:note>
<db:para>The style must be configured <db:emphasis role="bold">before</db:emphasis> loading QML that imports Qt Quick Controls. It is not possible to change the style after the QML types have been registered.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickstyle.xml#setFallbackStyle">setFallbackStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qtquickcontrols-styles.xml#using-styles-in-qt-quick-controls">Using Styles in Qt Quick Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
