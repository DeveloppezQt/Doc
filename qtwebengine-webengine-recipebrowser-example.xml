<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Recipe Browser</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A small hybrid application based on the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> QML type and Qt Quick Controls 2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/recipebrowser-demo.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Recipe Browser</db:emphasis> demonstrates how to use the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> item, <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> items, and <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls 2</db:link> items to develop a small hybrid web browser application. A <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>-based item is used to display a list of recipe names. Clicking on a name causes the web view to load the respective recipe page. The overall appearance of the application is provided by the <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls 2</db:link> items, which have their active style set to the <db:link xlink:href="qtquickcontrols2-material.xml">Material</db:link> style. The web content is a mix of HTML and Markdown source compiled to HTML, along with CSS and JavaScript.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="c-code">
<db:title>C++ Code</db:title>
<db:para>In <db:code>main.cpp</db:code>, we use the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> and <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> classes to set up and load the main QML file. We call <db:link xlink:href="qtwebengine.xml#initialize">QtWebEngine::initialize</db:link> so we can use <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> in our QML code. We enable high DPI screen support by setting the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_EnableHighDpiScaling</db:link> attribute. We set the default Qt Quick Controls 2 style to the Material style, so we do not have to specify it for each new item we add. Finally, we use a C++ define to check whether the application is compiled for an embedded platform. The value will be used in the main QML code to determine the window size.</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQmlApplicationEngine&amp;gt;
#include &amp;lt;QQmlContext&amp;gt;
#include &amp;lt;QQuickStyle&amp;gt;
#include &amp;lt;qtwebengineglobal.h&amp;gt;

int main(int argc, char *argv[])
{
    QCoreApplication::setOrganizationName(&quot;QtExamples&quot;);
    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
    QGuiApplication app(argc, argv);
    QtWebEngine::initialize();

    QQuickStyle::setStyle(QStringLiteral(&quot;Material&quot;));

    QQmlApplicationEngine engine;

    bool isEmbedded = false;
#ifdef QTWEBENGINE_RECIPE_BROWSER_EMBEDDED
    isEmbedded = true;
#endif
    engine.rootContext()-&amp;gt;setContextProperty(QStringLiteral(&quot;isEmbedded&quot;), isEmbedded);

    engine.load(QUrl(QStringLiteral(&quot;qrc:/qml/main.qml&quot;)));

    return app.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="qml-code">
<db:title>QML Code</db:title>
<db:para>In the <db:code>main.qml</db:code> file, we first create a top-level window and set a title for it. We also set up the size of the window depending on its primary orientation as well as the platform, so that the application is usable on both desktop and embedded platforms. On desktop, the size is constrained by a minimum of 320x480 pixels up to the maximum size that the screen supports. The default window size is 1024 pixels wide and 768 pixels high in landscape orientation. On embedded devices, the window will occupy the whole screen.</db:para>
<db:programlisting language="cpp">ApplicationWindow {
    id: appWindow
    title: qsTr(&quot;Recipe Browser&quot;)
    visible: true

    property int shorterDesktop: 768
    property int longerDesktop: 1024
    property int shorterMin: 360
    property int longerMin: 480
    property bool isPortrait: Screen.primaryOrientation === Qt.PortraitOrientation
    width: {
        if (isEmbedded)
            return Screen.width
        var potentialWidth = shorterDesktop
        if (!isPortrait)
            potentialWidth = longerDesktop
        return potentialWidth &amp;gt; Screen.width ? Screen.width : potentialWidth
    }
    height: {
        if (isEmbedded)
            return Screen.height
        var potentialHeight = longerDesktop
        if (!isPortrait)
            potentialHeight = shorterDesktop
        return potentialHeight &amp;gt; Screen.height ? Screen.height : potentialHeight
    }
    minimumWidth: isPortrait ? shorterMin : longerMin
    minimumHeight: isPortrait ? longerMin : shorterMin
</db:programlisting>
<db:para>Next, we add a <db:link xlink:href="qml-qtquick-layouts-rowlayout.xml">RowLayout</db:link> item so we can divide the window into two parts: one being a custom <db:code>RecipeList</db:code> item containing the recipe titles, and the other being the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link>, which shows the recipe details. The spacing is set to zero so the items are positioned directly next to each other.</db:para>
<db:programlisting language="cpp">    RowLayout {
        id: container
        anchors.fill: parent
        spacing: 0

        RecipeList {
                ...
            }
        }

        WebEngineView {
                ...
        }
    }
</db:programlisting>
<db:para>The <db:code>RecipeList</db:code> item has a few <db:link xlink:href="qml-qtquick-layouts-layout.xml">attached Layout properties</db:link>, in order to scale the item to a maximum of one third of the layout width. We give the item focus, so that the keyboard can be used to navigate the recipes, in addition to using mouse and touch. We also add a handler for the custom <db:code>recipeSelected</db:code> signal, to tell the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> to load the URL of the selected recipe.</db:para>
<db:programlisting language="cpp">        RecipeList {
            id: recipeList
            Layout.minimumWidth: 124
            Layout.preferredWidth: parent.width / 3
            Layout.maximumWidth: 300
            Layout.fillWidth: true
            Layout.fillHeight: true
            focus: true
            activeFocusOnTab: true
            onRecipeSelected: function(url) {
                webView.showRecipe(url)
            }
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> has similar layout properties, to make it occupy two thirds of the layout width.</db:para>
<db:programlisting language="cpp">        WebEngineView {
            id: webView
            Layout.preferredWidth: 2 * parent.width / 3
            Layout.fillWidth: true
            Layout.fillHeight: true
            // Make sure focus is not taken by the web view, so user can continue navigating
            // recipes with the keyboard.
            settings.focusOnNavigationEnabled: false

            onContextMenuRequested: function(request) {
                request.accepted = true
            }

            property bool firstLoadComplete: false
            onLoadingChanged: function(loadRequest) {
                if (loadRequest.status === WebEngineView.LoadSucceededStatus
                    &amp;amp;&amp;amp; !firstLoadComplete) {
                    // Debounce the showing of the web content, so images are more likely
                    // to have loaded completely.
                    showTimer.start()
                }
            }

            Timer {
                id: showTimer
                interval: 500
                repeat: false
                onTriggered: {
                    webView.show(true)
                    webView.firstLoadComplete = true
                    recipeList.showHelp()
                }
            }

            Rectangle {
                id: webViewPlaceholder
                anchors.fill: parent
                z: 1
                color: &quot;white&quot;

                BusyIndicator {
                    id: busy
                    anchors.centerIn: parent
                }
            }

            function showRecipe(url) {
                webView.url = url
            }

            function show(show) {
                if (show === true) {
                    busy.running = false
                    webViewPlaceholder.visible = false
                } else {
                    webViewPlaceholder.visible = true
                    busy.running = true
                }
            }
        }
    }
}
</db:programlisting>
<db:para>We then disable the <db:link xlink:href="qml-qtwebengine-webenginesettings.xml#focusOnNavigationEnabled-prop">focusOnNavigationEnabled</db:link> setting to make sure that the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> does not steal focus from the <db:code>RecipeList</db:code> item every time its URL is changed. This allows the user to continue navigating through the recipes using the keyboard. We also disable the default context menu by accepting the <db:link xlink:href="qml-qtwebengine-contextmenurequest.xml">ContextMenuRequest</db:link>.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>When the application starts, instead of directly showing the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link>, we show a placeholder <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> with a <db:link xlink:href="qml-qtquick-controls2-busyindicator.xml">BusyIndicator</db:link> to provide a nicer user experience while the application is loading. Once the first page in the view is loaded, we start a <db:link xlink:href="qml-qtqml-timer.xml">Timer</db:link> that will hide the placeholder and show the actual page. The delay provides more time for the recipe images to load, so that when the view is shown, the page is completely rendered. The timer also shows a help <db:link xlink:href="qml-qtquick-controls2-tooltip.xml">ToolTip</db:link> that informs the user on how to navigate the recipes.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>Let's see what the <db:code>RecipeList</db:code> item looks like from the inside. The root item is a <db:link xlink:href="qml-qtquick-focusscope.xml">FocusScope</db:link> to allow transferring focus to the child <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> whenever the root item receives focus. We also declare a custom <db:code>recipeSelected</db:code> signal, which will be emitted when the current item of the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> changes.</db:para>
<db:programlisting language="cpp">FocusScope {
    id: root
    signal recipeSelected(url url)
</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-layouts-columnlayout.xml">ColumnLayout</db:link> holds a header <db:link xlink:href="qml-qtquick-controls2-label.xml">Label</db:link> above the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>, and the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> itself. Again, we set the spacing to zero and make sure the layout occupies the whole space of the parent item.</db:para>
<db:programlisting language="cpp">    ColumnLayout {
        spacing: 0
        anchors.fill: parent
</db:programlisting>
<db:para>Inside the layout there is a styled <db:link xlink:href="qml-qtquick-controls2-toolbar.xml">ToolBar</db:link> item, with a <db:link xlink:href="qml-qtquick-controls2-label.xml">Label</db:link> inside of it serving as the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> header.</db:para>
<db:programlisting language="cpp">        ToolBar {
            id: headerBackground
            Layout.fillWidth: true
            implicitHeight: headerText.height + 20

            Label {
                id: headerText
                width: parent.width
                text: qsTr(&quot;Favorite recipes&quot;)
                padding: 10
                anchors.centerIn: parent
            }
        }
</db:programlisting>
<db:para>The second item inside the layout is a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>, whose contents will fill the remaining space in the layout. We set <db:link xlink:href="qml-qtquick-item.xml#clip-prop">clip</db:link> to true, so that the delegates that are scrolled up are not seen under the <db:link xlink:href="qml-qtquick-controls2-toolbar.xml">ToolBar</db:link> item. We set <db:link xlink:href="qml-qtquick-item.xml#focus-prop">focus</db:link> to true, so the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> gains focus when the <db:link xlink:href="qml-qtquick-focusscope.xml">FocusScope</db:link> does. We add a vertical scroll bar, so the user can scroll through the recipes if the window size is small. We also specify the recipe model to be used by the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> as described later in this topic.</db:para>
<db:programlisting language="cpp">        ListView {
            id: listView
            Layout.fillWidth: true
            Layout.fillHeight: true
            keyNavigationWraps: true
            clip: true
            focus: true
            ScrollBar.vertical: ScrollBar { }

            model: recipeModel
</db:programlisting>
<db:para>We have an <db:link xlink:href="qml-qtquick-controls2-itemdelegate.xml">ItemDelegate</db:link> set as the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> delegate, which displays the recipe title. The contentItem is a <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> item, customized with a few properties to adjust the visual appearance and position of the text. We create a binding to the current delegate's model URL, so we can access the respective URL outside the delegate itself. We set the <db:link xlink:href="qml-qtquick-controls2-itemdelegate.xml#highlighted-prop">highlighted</db:link> property to <db:code>true</db:code> whenever the item is the current one in the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> to provide visual feedback. And we set the focus on the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> whenever a delegate is clicked, so that keyboard navigation works in case the focus was previously in the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link>.</db:para>
<db:programlisting language="cpp">            delegate: ItemDelegate {
                width: parent.width
                text: model.name
                contentItem: Text {
                    text: parent.text
                    font: parent.font
                    color: parent.enabled ? parent.Material.primaryTextColor
                                          : parent.Material.hintTextColor
                    elide: Text.ElideRight
                    horizontalAlignment: Text.AlignLeft
                    verticalAlignment: Text.AlignVCenter
                    wrapMode: Text.Wrap
                }

                property url url: model.url
                highlighted: ListView.isCurrentItem

                onClicked: {
                    listView.forceActiveFocus()
                    listView.currentIndex = model.index
                }
            }
</db:programlisting>
<db:para>A handler is defined for the <db:code>currentItemChanged</db:code> signal to emit our own <db:code>recipeSelected</db:code> signal with the URL that the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> should load.</db:para>
<db:programlisting language="cpp">            onCurrentItemChanged: {
                root.recipeSelected(currentItem.url)
            }
</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> with seven <db:link xlink:href="qml-qtqml-models-listelement.xml">ListElement</db:link>s, each of which contains a recipe title and the URL to an HTML page contained in a resource file. The model is used to populate the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> with the recipes and to show the recipe details in the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link>.</db:para>
<db:programlisting language="cpp">            ListModel {
                id: recipeModel

                ListElement {
                    name: &quot;Pizza Diavola&quot;
                    url: &quot;qrc:///pages/pizza.html&quot;
                }
                ListElement {
                    name: &quot;Steak&quot;
                    url: &quot;qrc:///pages/steak.html&quot;
                }
                ListElement {
                    name: &quot;Burger&quot;
                    url: &quot;qrc:///pages/burger.html&quot;
                }
                ListElement {
                    name: &quot;Soup&quot;
                    url: &quot;qrc:///pages/soup.html&quot;
                }
                ListElement {
                    name: &quot;Pasta&quot;
                    url: &quot;qrc:///pages/pasta.html&quot;
                }
                ListElement {
                    name: &quot;Grilled Skewers&quot;
                    url: &quot;qrc:///pages/skewers.html&quot;
                }
                ListElement {
                    name: &quot;Cupcakes&quot;
                    url: &quot;qrc:///pages/cupcakes.html&quot;
                }
            }
</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qtquick-controls2-tooltip.xml">ToolTip</db:link> item that is displayed on application startup to inform the users how they can navigate and view the details of each recipe. The <db:link xlink:href="qml-qtquick-controls2-tooltip.xml">ToolTip</db:link> is shown using the <db:code>showHelp</db:code> method, which is invoked by the <db:link xlink:href="qml-qtqml-timer.xml">Timer</db:link> in the main.qml file.</db:para>
<db:programlisting language="cpp">            ToolTip {
                id: help
                implicitWidth: root.width - padding * 3
                y: root.y + root.height
                delay: 1000
                timeout: 5000
                text: qsTr(&quot;Use keyboard, mouse, or touch controls to navigate through the\
                            recipes.&quot;)

                contentItem: Text {
                    text: help.text
                    font: help.font
                    color: help.Material.primaryTextColor
                    wrapMode: Text.Wrap
                }
            }
        }
    }

    function showHelp() {
        help.open()
    }
}
</db:programlisting>
<db:para>An example of a recipe page can be seen below. The page uses two stylesheets and two JavaScript files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://kevinburke.bitbucket.org/markdowncss/">markdown.css</db:link> is a markdown-friendly stylesheet created by Kevin Burke</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://github.com/chjj/marked">marked.min.js</db:link> is a markdown parser and compiler designed for speed written by Christopher Jeffrey</db:para>
</db:listitem>
<db:listitem>
<db:para>custom.css makes some small styling adjustments to the final recipe page</db:para>
</db:listitem>
<db:listitem>
<db:para>custom.js is used to invoke the conversion of the recipe content (which is written in markdown syntax) into HTML</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The images on the pages are loaded from the compiled resource file.</db:para>
<db:programlisting language="cpp">&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
  &amp;lt;title&amp;gt;Soup&amp;lt;/title&amp;gt;
  &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;assets/3rdparty/markdown.css&quot;&amp;gt;
  &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;assets/custom.css&quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;placeholder&quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;content&quot;&amp;gt;

&amp;lt;img src=&quot;images/soup.jpg&quot; alt=&quot;Soup&quot; title=&quot;Soup&quot; /&amp;gt;

Soup
=============

### Ingredients

* 2 potatoes
* 2 onions
* 2 cloves of garlic
* olive oil
* 400 ml organic stock
* 3 bunches of watercress

### Instructions
* Peel and roughly chop the potatoes, onions and garlic.
* In a large saucepan, heat a little olive oil, then sauté the potato, onion and garlic until the onions are translucent.
* Add the stock and simmer until the potato is soft. Chop and add the watercress and simmer for a further 3 to 4 minutes.
* Using a hand blender, liquidise the soup until smooth.
* Serve with a swirl of crème fraîche and some Fortt’s Bath Oliver biscuits, if you like.

**Enjoy!**

  &amp;lt;/div&amp;gt;&amp;lt;!--End of content--&amp;gt;
  &amp;lt;script src=&quot;assets/3rdparty/marked.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&quot;assets/custom.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
</db:programlisting>
</db:section>
<db:section xml:id="files-and-attributions">
<db:title>Files and Attributions</db:title>
<db:para>The example bundles the following code with third-party licenses:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtwebengine-attribution-recipebrowser-marked.xml#recipebrowser-marked">Marked</db:link></db:para>
</db:td>
<db:td>
<db:para>MIT License</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtwebengine-attribution-recipebrowser-markdowncss.xml#recipebrowser-markdowncss">Markdown.css</db:link></db:para>
</db:td>
<db:td>
<db:para>Apache License 2.0</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/main.cpp">webengine/recipebrowser/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/recipebrowser.pro">webengine/recipebrowser/recipebrowser.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/assets/3rdparty/markdown.css">webengine/recipebrowser/resources/pages/assets/3rdparty/markdown.css</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/assets/3rdparty/marked.js">webengine/recipebrowser/resources/pages/assets/3rdparty/marked.js</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/assets/custom.css">webengine/recipebrowser/resources/pages/assets/custom.css</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/assets/custom.js">webengine/recipebrowser/resources/pages/assets/custom.js</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/burger.html">webengine/recipebrowser/resources/pages/burger.html</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/cupcakes.html">webengine/recipebrowser/resources/pages/cupcakes.html</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/pasta.html">webengine/recipebrowser/resources/pages/pasta.html</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/pizza.html">webengine/recipebrowser/resources/pages/pizza.html</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/skewers.html">webengine/recipebrowser/resources/pages/skewers.html</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/soup.html">webengine/recipebrowser/resources/pages/soup.html</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/steak.html">webengine/recipebrowser/resources/pages/steak.html</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/qml/RecipeList.qml">webengine/recipebrowser/resources/qml/RecipeList.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/qml/main.qml">webengine/recipebrowser/resources/qml/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/resources.qrc">webengine/recipebrowser/resources/resources.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/images/burger.jpg">webengine/recipebrowser/resources/pages/images/burger.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/images/cupcakes.jpg">webengine/recipebrowser/resources/pages/images/cupcakes.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/images/pasta.jpg">webengine/recipebrowser/resources/pages/images/pasta.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/images/pizza.jpg">webengine/recipebrowser/resources/pages/images/pizza.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/images/skewers.jpg">webengine/recipebrowser/resources/pages/images/skewers.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/images/soup.jpg">webengine/recipebrowser/resources/pages/images/soup.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/recipebrowser/resources/pages/images/steak.jpg">webengine/recipebrowser/resources/pages/images/steak.jpg</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
