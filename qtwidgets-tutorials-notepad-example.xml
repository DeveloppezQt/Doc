<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Getting Started Programming with Qt Widgets</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A tutorial for Qt Widgets based notepad application.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In this topic, we teach basic Qt knowledge by implementing a simple Notepad application using C++ and the <db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link> module. The application is a small text editor which allows you to create a text file, save it, print it, or reopen and edit it again. You can also set the font to be used.</db:para>
<db:mediaobject>
<db:alt>&quot;Notepad application&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/notepad1.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-the-notepad-project">
<db:title>Creating the Notepad Project</db:title>
<db:para>Setting up a new project in Qt Creator is aided by a wizard that guides you step-by-step through the project creation process. The wizard prompts you to enter the settings needed for that particular type of project and creates the project for you.</db:para>
<db:note>
<db:para>The UI text in Qt Creator and the contents of the generated files depend on the Qt Creator version that you use.</db:para>
</db:note>
<db:mediaobject>
<db:alt>&quot;Qt Creator New Project dialog&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/notepad2.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To create the Notepad project, select <db:guilabel>File</db:guilabel> &gt; <db:guilabel>New Project</db:guilabel> &gt; <db:guilabel>Application (Qt)</db:guilabel> &gt; <db:guilabel>Qt Widgets Application</db:guilabel> &gt; <db:guilabel>Choose</db:guilabel>, and follow the instructions of the wizard. In the <db:guilabel>Class Information</db:guilabel> dialog, type <db:emphasis>Notepad</db:emphasis> as the class name and select <db:guilabel>QMainWindow</db:guilabel> as the base class.</db:para>
<db:mediaobject>
<db:alt>&quot;Class Information Dialog&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/notepad3.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:guilabel>Qt Widgets Application</db:guilabel> wizard creates a project that contains a main source file and a set of files that specify a user interface (Notepad widget):</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>CMakeLists.txt - the project file.</db:para>
</db:listitem>
<db:listitem>
<db:para>main.cpp - the main source file for the application.</db:para>
</db:listitem>
<db:listitem>
<db:para>notepad.cpp - the source file of the notepad class of the Notepad widget.</db:para>
</db:listitem>
<db:listitem>
<db:para>notepad.h - the header file of the notepad class for the Notepad widget.</db:para>
</db:listitem>
<db:listitem>
<db:para>notepad.ui - the UI form for the Notepad widget.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The files come with the necessary boiler plate code for you to be able to build and run the project. We will take a closer look at the file contents in the following sections.</db:para>
<db:para><db:emphasis role="bold">Learn More</db:emphasis></db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>About</db:para>
</db:th>
<db:th>
<db:para>Here</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Using Qt Creator</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Creating other kind of applications with Qt Creator</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="https://doc.qt.io/qtcreator/creator-tutorials.html">Qt Creator Tutorials</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="main-source-file">
<db:title>Main Source File</db:title>
<db:para>The wizard generates the following code in the main.cpp file:</db:para>
<db:programlisting language="cpp">#include &quot;notepad.h&quot;

#include &amp;lt;QApplication&amp;gt;

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    Notepad w;
    w.show();
    return a.exec();
}
</db:programlisting>
<db:para>We will go through the code line by line. The following lines include the header files for the Notepad widget and <db:link xlink:href="qapplication.xml">QApplication</db:link>. All Qt classes have a header file named after them.</db:para>
<db:programlisting language="cpp">#include &quot;notepad.h&quot;

#include &amp;lt;QApplication&amp;gt;
</db:programlisting>
<db:para>The following line defines the main function that is the entry point for all C and C++ based applications:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
</db:programlisting>
<db:para>The following line creates a <db:link xlink:href="qapplication.xml">QApplication</db:link> object. This object manages application-wide resources and is necessary to run any Qt program that uses Qt Widgets. It constructs an application object with argc command line arguments run in argv. (For GUI applications that do not use Qt Widgets, you can use <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> instead.)</db:para>
<db:programlisting language="cpp">    QApplication a(argc, argv);
</db:programlisting>
<db:para>The following line creates the Notepad object. This is the object for which the wizard created the class and the UI file. The user interface contains visual elements that are called widgets in Qt. Examples of widgets are text edits, scroll bars, labels, and radio buttons. A widget can also be a container for other widgets; a dialog or a main application window, for example.</db:para>
<db:programlisting language="cpp">    Notepad w;
</db:programlisting>
<db:para>The following line shows the Notepad widget on the screen in its own window. Widgets can also function as containers. An example of this is <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> which often contains several types of widgets. Widgets are not visible by default; the function <db:link xlink:href="qwidget.xml#show">show</db:link>() makes the widget visible.</db:para>
<db:programlisting language="cpp">    w.show();
</db:programlisting>
<db:para>The following line makes the <db:link xlink:href="qapplication.xml">QApplication</db:link> enter its event loop. When a Qt application is running, events are generated and sent to the widgets of the application. Examples of events are mouse presses and key strokes.</db:para>
<db:programlisting language="cpp">    return a.exec();
</db:programlisting>
<db:para><db:emphasis role="bold">Learn More</db:emphasis></db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>About</db:para>
</db:th>
<db:th>
<db:para>Here</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Widgets and Window Geometry</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="application-windows.xml">Window and Dialog Widgets</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Events and event handling</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="eventsandfilters.xml">The Event System</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="designing-a-ui">
<db:title>Designing a UI</db:title>
<db:para>The wizard generates a user interface definition in XML format: notepad.ui. When you open the notepad.ui file in Qt Creator, it automatically opens in the integrated Qt Designer.</db:para>
<db:para>When you build the application, Qt Creator launches the Qt <db:link xlink:href="uic.xml">User Interface Compiler (uic)</db:link> that reads the .ui file and creates a corresponding C++ header file, ui_notepad.h.</db:para>
<db:section xml:id="using-qt-designer">
<db:title>Using Qt Designer</db:title>
<db:para>The wizard creates an application that uses a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>. It has its own layout to which you can add a menu bar, dock widgets, toolbars, and a status bar. The center area can be occupied by any kind of widget. The wizard places the Notepad widget there.</db:para>
<db:para>To add widgets in Qt Designer:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>In the Qt Creator <db:guilabel>Edit</db:guilabel> mode, double-click the notepad.ui file in the <db:guilabel>Projects</db:guilabel> view to launch the file in the integrated Qt Designer.</db:para>
</db:listitem>
<db:listitem>
<db:para>Drag and drop widgets Text Edit (<db:link xlink:href="qtextedit.xml">QTextEdit</db:link>) to the form.</db:para>
</db:listitem>
<db:listitem>
<db:para>Press <db:emphasis role="bold">Ctrl+A</db:emphasis> (or <db:emphasis role="bold">Cmd+A</db:emphasis>) to select the widgets and click <db:guilabel>Lay out Vertically</db:guilabel> (or press <db:emphasis role="bold">Ctrl+L</db:emphasis>) to apply a vertical layout (<db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link>).</db:para>
</db:listitem>
<db:listitem>
<db:para>Press <db:emphasis role="bold">Ctrl+S</db:emphasis> (or <db:emphasis role="bold">Cmd+S</db:emphasis>) to save your changes.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The UI now looks as follows in Qt Designer:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/notepad4.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>You can view the generated XML file in the code editor:</db:para>
<db:programlisting language="cpp">&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;ui version=&quot;4.0&quot;&amp;gt;
 &amp;lt;class&amp;gt;Notepad&amp;lt;/class&amp;gt;
 &amp;lt;widget class=&quot;QMainWindow&quot; name=&quot;Notepad&quot;&amp;gt;
  &amp;lt;property name=&quot;geometry&quot;&amp;gt;
   &amp;lt;rect&amp;gt;
    &amp;lt;x&amp;gt;0&amp;lt;/x&amp;gt;
    &amp;lt;y&amp;gt;0&amp;lt;/y&amp;gt;
    &amp;lt;width&amp;gt;800&amp;lt;/width&amp;gt;
    &amp;lt;height&amp;gt;400&amp;lt;/height&amp;gt;
   &amp;lt;/rect&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;property name=&quot;windowTitle&quot;&amp;gt;
   &amp;lt;string&amp;gt;Notepad&amp;lt;/string&amp;gt;
  &amp;lt;/property&amp;gt;
  &amp;lt;widget class=&quot;QWidget&quot; name=&quot;centralWidget&quot;&amp;gt;
   &amp;lt;layout class=&quot;QVBoxLayout&quot; name=&quot;verticalLayout&quot;&amp;gt;
    &amp;lt;item&amp;gt;
     &amp;lt;widget class=&quot;QTextEdit&quot; name=&quot;textEdit&quot;/&amp;gt;
    &amp;lt;/item&amp;gt;
   &amp;lt;/layout&amp;gt;
  &amp;lt;/widget&amp;gt;
  &amp;lt;widget class=&quot;QMenuBar&quot; name=&quot;menuBar&quot;&amp;gt;
    ...
</db:programlisting>
<db:para>The following line contains the XML declaration, which specifies the XML version and character encoding used in the document:</db:para>
<db:programlisting language="cpp">&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
</db:programlisting>
<db:para>The rest of the file specifies an ui element that defines a Notepad widget:</db:para>
<db:programlisting language="cpp">&amp;lt;ui version=&quot;4.0&quot;&amp;gt;
</db:programlisting>
<db:para>The UI file is used together with the header and source file of the Notepad class. We will look at the rest of the UI file in the later sections.</db:para>
</db:section>
<db:section xml:id="notepad-header-file">
<db:title>Notepad Header File</db:title>
<db:para>The wizard generated a header file for the Notepad class that has the necessary #includes, a constructor, a destructor, and the Ui object. The file looks as follows:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QMainWindow&amp;gt;

QT_BEGIN_NAMESPACE
namespace Ui {
class Notepad;
}
QT_END_NAMESPACE

class Notepad : public QMainWindow
{
    Q_OBJECT

public:
    explicit Notepad(QWidget *parent = nullptr);
    ~Notepad();

private:
    Ui::Notepad *ui;
    QString currentFile;
};
</db:programlisting>
<db:para>The following line includes <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> that provides a main application window:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QMainWindow&amp;gt;
</db:programlisting>
<db:para>The following lines declare the Notepad class in the Ui namespace, which is the standard namespace for the UI classes generated from .ui files by the uic tool:</db:para>
<db:programlisting language="cpp">namespace Ui {
class Notepad;
}
</db:programlisting>
<db:para>The class declaration contains the Q_OBJECT macro. It must come first in the class definition, and declares our class as a <db:link xlink:href="qobject.xml">QObject</db:link>. Naturally, it must also inherit from <db:link xlink:href="qobject.xml">QObject</db:link>. A <db:link xlink:href="qobject.xml">QObject</db:link> adds several abilities to a normal C++ class. Notably, the class name and slot names can be queried at runtime. It is also possible to query a slot's parameter types and invoke it.</db:para>
<db:programlisting language="cpp">class Notepad : public QMainWindow
{
    Q_OBJECT
</db:programlisting>
<db:para>The following lines declare a constructor that has a default argument called parent. The value 0 indicates that the widget has no parent (it is a top-level widget).</db:para>
<db:programlisting language="cpp">public:
    explicit Notepad(QWidget *parent = nullptr);
</db:programlisting>
<db:para>The following line declares a virtual destructor to free the resources that were acquired by the object during its life-cycle. According to the C++ naming convention, destructors have the same name as the class they are associated with, prefixed with a tilde (~). In <db:link xlink:href="qobject.xml">QObject</db:link>, destructors are virtual to ensure that the destructors of derived classes are invoked properly when an object is deleted through a pointer-to-base-class.</db:para>
<db:programlisting language="cpp">    ~Notepad();
</db:programlisting>
<db:para>The following lines declare a member variable which is a pointer to the Notepad UI class. A member variable is associated with a specific class, and accessible for all its methods.</db:para>
<db:programlisting language="cpp">private:
    Ui::Notepad *ui;
    QString currentFile;
};
</db:programlisting>
</db:section>
<db:section xml:id="notepad-source-file">
<db:title>Notepad Source File</db:title>
<db:para>The source file that the wizard generated for the Notepad class looks as follows:</db:para>
<db:programlisting language="cpp">#include &quot;notepad.h&quot;
#include &quot;ui_notepad.h&quot;

Notepad::Notepad(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::Notepad)
{
    ui-&amp;gt;setupUi(this);

}
</db:programlisting>
<db:para>The following lines include the Notepad class header file that was generated by the wizard and the UI header file that was generated by the uic tool:</db:para>
<db:programlisting language="cpp">#include &quot;notepad.h&quot;
#include &quot;ui_notepad.h&quot;
</db:programlisting>
<db:para>The following line defines the Notepad constructor:</db:para>
<db:programlisting language="cpp">Notepad::Notepad(QWidget *parent) :
</db:programlisting>
<db:para>The following line calls the <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> constructor, which is the base class for the Notepad class:</db:para>
<db:programlisting language="cpp">    QMainWindow(parent),
</db:programlisting>
<db:para>The following line creates the UI class instance and assigns it to the ui member:</db:para>
<db:programlisting language="cpp">    ui(new Ui::Notepad)
</db:programlisting>
<db:para>The following line sets up the UI:</db:para>
<db:programlisting language="cpp">{
    ui-&amp;gt;setupUi(this);
</db:programlisting>
<db:para>In the destructor, we delete the ui:</db:para>
<db:programlisting language="cpp">Notepad::~Notepad()
{
    delete ui;
}
</db:programlisting>
</db:section>
<db:section xml:id="project-file">
<db:title>Project File</db:title>
<db:para>The wizard generates the following project file, CMakeLists.txt, for us:</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.16)
project(notepad LANGUAGES CXX)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)

if(NOT DEFINED INSTALL_EXAMPLESDIR)
    set(INSTALL_EXAMPLESDIR &quot;examples&quot;)
endif()

set(INSTALL_EXAMPLEDIR &quot;${INSTALL_EXAMPLESDIR}/widgets/tutorials/notepad&quot;)

find_package(Qt6
    REQUIRED COMPONENTS Core Gui Widgets
    OPTIONAL_COMPONENTS PrintSupport
)

qt_add_executable(notepad
    main.cpp
    notepad.cpp notepad.h notepad.ui
)

set_target_properties(notepad PROPERTIES
    WIN32_EXECUTABLE TRUE
    MACOSX_BUNDLE TRUE
)

target_link_libraries(notepad PUBLIC
    Qt::Core
    Qt::Gui
    Qt::Widgets
)

# Resources:
set(notepad_resource_files
    &quot;images/bold.png&quot;
    &quot;images/copy.png&quot;
    &quot;images/create.png&quot;
    &quot;images/cut.png&quot;
    &quot;images/edit_redo.png&quot;
    &quot;images/edit_undo.png&quot;
    &quot;images/exit.png&quot;
    &quot;images/font.png&quot;
    &quot;images/info.png&quot;
    &quot;images/italic.png&quot;
    &quot;images/new.png&quot;
    &quot;images/open.png&quot;
    &quot;images/paste.png&quot;
    &quot;images/pencil.png&quot;
    &quot;images/print.png&quot;
    &quot;images/save.png&quot;
    &quot;images/save_as.png&quot;
    &quot;images/underline.png&quot;
)

qt_add_resources(notepad &quot;notepad&quot;
    PREFIX
        &quot;/&quot;
    FILES
        ${notepad_resource_files}
)

if(TARGET Qt::PrintSupport)
    target_link_libraries(notepad PUBLIC
        Qt::PrintSupport
    )
endif()

install(TARGETS notepad
    RUNTIME DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
    BUNDLE DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
    LIBRARY DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
)
</db:programlisting>
<db:para>The project file specifies the source, header, and UI files included in the project.</db:para>
<db:para><db:emphasis role="bold">Learn More</db:emphasis></db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>About</db:para>
</db:th>
<db:th>
<db:para>Here</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Using Qt Designer</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtdesigner-manual.xml">Qt Designer Manual</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Layouts</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="layout.xml">Layout Management</db:link>, <db:link xlink:href="graphicsview.xml#widgets-and-layouts">Widgets and Layouts</db:link>, <db:link xlink:href="layout.xml#layout-examples">Layout Examples</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>The widgets that come with Qt</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="gallery.xml">Qt Widget Gallery</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Main windows and main window classes</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="mainwindow.xml">Application Main Window</db:link>, <db:link xlink:href="examples-mainwindow.xml">Main Window Examples</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QObjects and the Qt Object model (This is essential to understand Qt)</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="object.xml">Object Model</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qmake and the Qt build system</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmake-manual.xml">qmake Manual</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="adding-user-interaction">
<db:title>Adding User Interaction</db:title>
<db:para>To add functionality to the editor, we start by adding menu items and buttons on a toolbar.</db:para>
<db:para>Click on &quot;Type Here&quot;, and add the options New, Open, Save, Save as, Print and Exit. This creates 5 lines in the Action Editor below. To connect the actions to slots, right-click an action and select <db:guilabel>Go to slot</db:guilabel> &gt; <db:guilabel>triggered()</db:guilabel>, and complete the code for that given slot.</db:para>
<db:para>If we also want to add the actions to a toolbar, we can assign an icon to each <db:link xlink:href="qaction.xml">QAction</db:link>, and then drag the <db:link xlink:href="qaction.xml">QAction</db:link> to the toolbar. You assign an icon by entering an icon name in the Icon property of the action concerned. When the <db:link xlink:href="qaction.xml">QAction</db:link> has been dragged to the toolbar, clicking the icon will launch the associated slot.</db:para>
<db:para>Complete the method newDocument():</db:para>
<db:programlisting language="cpp">void Notepad::newDocument()
{
    currentFile.clear();
    ui-&amp;gt;textEdit-&amp;gt;setText(QString());
}
</db:programlisting>
<db:para>The currentFile variable is a global variable containing the file presently being edited, and clear() clears the text buffer. The currentFile variable is defined in the private part of notepad.h:</db:para>
<db:programlisting language="cpp">private:
    Ui::Notepad *ui;
    QString currentFile;
</db:programlisting>
<db:section xml:id="opening-a-file">
<db:title>Opening a file</db:title>
<db:para>In notepad.ui, right click on actionOpen and select <db:guilabel>Go to Slot</db:guilabel>.</db:para>
<db:para>Complete method open().</db:para>
<db:programlisting language="cpp">void Notepad::open()
{
    QString fileName = QFileDialog::getOpenFileName(this, &quot;Open the file&quot;);
    if (fileName.isEmpty())
        return;
    QFile file(fileName);
    currentFile = fileName;
    if (!file.open(QIODevice::ReadOnly | QFile::Text)) {
        QMessageBox::warning(this, &quot;Warning&quot;, &quot;Cannot open file: &quot; + file.errorString());
        return;
    }
    setWindowTitle(fileName);
    QTextStream in(&amp;amp;file);
    QString text = in.readAll();
    ui-&amp;gt;textEdit-&amp;gt;setText(text);
    file.close();
}
</db:programlisting>
<db:para>QFileDialog::getOpenFileName opens a dialog enabling you to select a file. <db:link xlink:href="qfile.xml">QFile</db:link> object myfile has the selected file_name as parameter. We store the selected file also into the global variable currentFile for later purposes. We open the file with file.open as a readonly text file. If it cannot be opened, a warning is issued, and the program stops.</db:para>
<db:para>We define a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> instream for parameter myfile. The contents of file myfile is copied into <db:link xlink:href="qstring.xml">QString</db:link> text. setText(text) fills the buffer of our editor with text.</db:para>
</db:section>
<db:section xml:id="saving-a-file">
<db:title>Saving a file</db:title>
<db:para>We create the method for saving a file in the same way as for <db:link xlink:href="qtwidgets-tutorials-notepad-example.xml#opening-a-file">Opening a file</db:link>, by right clicking on actionSave, and selecting <db:guilabel>Go to Slot</db:guilabel>.</db:para>
<db:programlisting language="cpp">void Notepad::save()
{
    QString fileName;
    // If we don't have a filename from before, get one.
    if (currentFile.isEmpty()) {
        fileName = QFileDialog::getSaveFileName(this, &quot;Save&quot;);
        if (fileName.isEmpty())
            return;
        currentFile = fileName;
    } else {
        fileName = currentFile;
    }
    QFile file(fileName);
    if (!file.open(QIODevice::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, &quot;Warning&quot;, &quot;Cannot save file: &quot; + file.errorString());
        return;
    }
    setWindowTitle(fileName);
    QTextStream out(&amp;amp;file);
    QString text = ui-&amp;gt;textEdit-&amp;gt;toPlainText();
    out &amp;lt;&amp;lt; text;
    file.close();
}
</db:programlisting>
<db:para><db:link xlink:href="qfile.xml">QFile</db:link> object myfile is linked to global variable current_file, the variable that contains the file we were working with. If we cannot open myfile, an error message is issued and the method stops. We create a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> outstream. The contents of the editor buffer is converted to plain text, and then written to outstream.</db:para>
</db:section>
<db:section xml:id="saving-a-file-under-another-name">
<db:title>Saving a file under another name</db:title>
<db:programlisting language="cpp">void Notepad::saveAs()
{
    QString fileName = QFileDialog::getSaveFileName(this, &quot;Save as&quot;);
    if (fileName.isEmpty())
        return;
    QFile file(fileName);

    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, &quot;Warning&quot;, &quot;Cannot save file: &quot; + file.errorString());
        return;
    }
    currentFile = fileName;
    setWindowTitle(fileName);
    QTextStream out(&amp;amp;file);
    QString text = ui-&amp;gt;textEdit-&amp;gt;toPlainText();
    out &amp;lt;&amp;lt; text;
    file.close();
}
</db:programlisting>
<db:para>This is the same procedure as for <db:link xlink:href="qtwidgets-tutorials-notepad-example.xml#saving-a-file">Saving a file</db:link>, the only difference being that here you need to enter a new file name for the file to be created.</db:para>
</db:section>
<db:section xml:id="printing-a-file">
<db:title>Printing a File</db:title>
<db:para>If you want to use print functionalities, you need to add PrintSupport to the project file:</db:para>
<db:programlisting language="cpp">find_package(Qt6
    REQUIRED COMPONENTS Core Gui Widgets
    OPTIONAL_COMPONENTS PrintSupport
)
</db:programlisting>
<db:para>In notepad.cpp, we declare a <db:link xlink:href="qprinter.xml">QPrinter</db:link> object called printDev:</db:para>
<db:programlisting language="cpp">void Notepad::print()
{
#if defined(QT_PRINTSUPPORT_LIB) &amp;amp;&amp;amp; QT_CONFIG(printer)
    QPrinter printDev;
#if QT_CONFIG(printdialog)
    QPrintDialog dialog(&amp;amp;printDev, this);
    if (dialog.exec() == QDialog::Rejected)
        return;
#endif // QT_CONFIG(printdialog)
    ui-&amp;gt;textEdit-&amp;gt;print(&amp;amp;printDev);
#endif // QT_CONFIG(printer)
}
</db:programlisting>
<db:para>We launch a printer dialog box and store the selected printer in object printDev. If we clicked on Cancel and did not select a printer, the methods returns. The actual printer command is given with ui-&gt;textEdit-&gt;print with our <db:link xlink:href="qprinter.xml">QPrinter</db:link> object as parameter.</db:para>
</db:section>
<db:section xml:id="select-a-font">
<db:title>Select a Font</db:title>
<db:programlisting language="cpp">void Notepad::selectFont()
{
    bool fontSelected;
    QFont font = QFontDialog::getFont(&amp;amp;fontSelected, this);
    if (fontSelected)
        ui-&amp;gt;textEdit-&amp;gt;setFont(font);
}
</db:programlisting>
<db:para>We declare a boolean indicating if we did select a font with <db:link xlink:href="qfontdialog.xml">QFontDialog</db:link>. If so, we set the font with ui-&gt;textEdit-&gt;setFont(myfont).</db:para>
</db:section>
<db:section xml:id="copy-cut-paste-undo-and-redo">
<db:title>Copy, Cut, Paste, Undo, and Redo</db:title>
<db:para>If you select some text, and want to copy it to the clipboard, you call the appropriate method of ui-&gt;textEdit. The same counts for cut, paste, undo, and redo.</db:para>
<db:para>This table shows the method name to use.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Task</db:para>
</db:th>
<db:th>
<db:para>Method called</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Copy</db:para>
</db:td>
<db:td>
<db:para>ui-&gt;textEdit-&gt;copy()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Cut</db:para>
</db:td>
<db:td>
<db:para>ui-&gt;textEdit-&gt;cut()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Paste</db:para>
</db:td>
<db:td>
<db:para>ui-&gt;textEdit-&gt;paste()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Undo</db:para>
</db:td>
<db:td>
<db:para>ui-&gt;textEdit-&gt;undo()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Redo</db:para>
</db:td>
<db:td>
<db:para>ui-&gt;textEdit-&gt;redo()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:emphasis role="bold">Learn More</db:emphasis></db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>About</db:para>
</db:th>
<db:th>
<db:para>Here</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>MDI applications</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmdiarea.xml">QMdiArea</db:link>, <db:link xlink:href="qtwidgets-mainwindows-mdi-example.xml">MDI Example</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Files and I/O devices</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qfile.xml">QFile</db:link>, <db:link xlink:href="qiodevice.xml">QIODevice</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>tr() and internationalization</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtlinguist-index.xml">Qt Linguist Manual</db:link>, <db:link xlink:href="i18n-source-translation.xml">Writing Source Code for Translation</db:link>, <db:link xlink:href="internationalization.xml">Internationalization with Qt</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="building-and-running-from-the-command-line">
<db:title>Building and Running from the Command Line</db:title>
<db:para>To build an example application from the command line, create a build directory for it. Switch to the build directory and run qt-cmake to configure your project for building. If the project is configured successfully, the generated files enable you to build the project.</db:para>
<db:programlisting language="cpp" role="bad">md &amp;lt;build_directory&amp;gt;
cd &amp;lt;build_directory&amp;gt;
&amp;lt;qt_installation_directory&amp;gt;\bin\qt-cmake -GNinja &amp;lt;source_directory&amp;gt;
&amp;lt;generator&amp;gt;
</db:programlisting>
<db:para>The commands create an executable in the build directory. The CMake tool reads the project file and produces instructions for how to build the application. The generator then uses the instructions to produce the executable binary.</db:para>
<db:para>For example, to build the Notepad example on Windows, when using Ninja as the generator, enter the following commands:</db:para>
<db:programlisting language="cpp" role="bad">md notepad-build
cd notepad-build
C:\Qt\6.4.3\msvc2019_64\bin\qt-cmake -GNinja C:\Examples\notepad
ninja
</db:programlisting>
<db:para>If you do not use Ninja as the generator, use the generator-independent CMake command to build the application instead of ninja:</db:para>
<db:programlisting language="cpp" role="bad">cmake --build
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/tutorials/notepad?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
