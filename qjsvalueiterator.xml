<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QJSValueIterator Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qjsvalueiterator.xml">QJSValueIterator</db:link> class provides a Java-style iterator for <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QJSValueIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QJSValueIterator is part of <db:simplelist><db:member>qtjavascript</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qjsvalueiterator.xml">QJSValueIterator</db:link> constructor takes a <db:link xlink:href="qjsvalue.xml">QJSValue</db:link> as argument. After construction, the iterator is located at the very beginning of the sequence of properties. Here's how to iterate over all the properties of a <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>:</db:para>
<db:programlisting language="cpp">QJSValue object;
...
QJSValueIterator it(object);
while (it.hasNext()) {
    it.next();
    qDebug() &amp;lt;&amp;lt; it.name() &amp;lt;&amp;lt; &quot;: &quot; &amp;lt;&amp;lt; it.value().toString();
}
</db:programlisting>
<db:para>The <db:link xlink:href="qjsvalueiterator.xml#next">next</db:link>() advances the iterator. The <db:link xlink:href="qjsvalueiterator.xml#name">name</db:link>() and <db:link xlink:href="qjsvalueiterator.xml#value">value</db:link>() functions return the name and value of the last item that was jumped over.</db:para>
<db:para>Note that <db:link xlink:href="qjsvalueiterator.xml">QJSValueIterator</db:link> only iterates over the <db:link xlink:href="qjsvalue.xml">QJSValue</db:link>'s own properties; i.e. it does not follow the prototype chain. You can use a loop like this to follow the prototype chain:</db:para>
<db:programlisting language="cpp">QJSValue obj = ...; // the object to iterate over
while (obj.isObject()) {
    QJSValueIterator it(obj);
    while (it.hasNext()) {
        it.next();
        qDebug() &amp;lt;&amp;lt; it.name();
    }
    obj = obj.prototype();
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalue.xml#property">QJSValue::property</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QJSValueIterator">
<db:title>QJSValueIterator::QJSValueIterator(const QJSValue &amp;<db:emphasis>object</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJSValueIterator</db:methodname>
<db:methodparam>
<db:type>const QJSValue &amp;</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSValueIterator(const QJSValue &amp;object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an iterator for traversing <db:code role="parameter">object</db:code>. The iterator is set to be at the front of the sequence of properties (before the first property).</db:para>
</db:section>
<db:section xml:id="dtor.QJSValueIterator">
<db:title>QJSValueIterator::~QJSValueIterator()</db:title>
<db:destructorsynopsis>
<db:methodname>~QJSValueIterator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QJSValueIterator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the iterator.</db:para>
</db:section>
<db:section xml:id="hasNext">
<db:title>bool QJSValueIterator::hasNext() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasNext</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasNext() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if there is at least one item ahead of the iterator (i.e. the iterator is <db:emphasis>not</db:emphasis> at the back of the property sequence); otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalueiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QJSValueIterator::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the last property that was jumped over using <db:link xlink:href="qjsvalueiterator.xml#next">next</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalueiterator.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="next">
<db:title>bool QJSValueIterator::next()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>next</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool next()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Advances the iterator by one position. Returns true if there was at least one item ahead of the iterator (i.e. the iterator was <db:emphasis>not</db:emphasis> already at the back of the property sequence); otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalueiterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qjsvalueiterator.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>QJSValue QJSValueIterator::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJSValue</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSValue value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the last property that was jumped over using <db:link xlink:href="qjsvalueiterator.xml#next">next</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsvalueiterator.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QJSValueIterator &amp;QJSValueIterator::operator=(QJSValue &amp;<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QJSValueIterator &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QJSValue &amp;</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSValueIterator &amp; operator=(QJSValue &amp;object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes the iterator operate on <db:code role="parameter">object</db:code>. The iterator is set to be at the front of the sequence of properties (before the first property).</db:para>
</db:section>
</db:section>
</db:article>
