<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QAction Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaction.xml">QAction</db:link> class provides an abstract user interface action that can be inserted into widgets.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAction</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidgetaction.xml" xlink:role="class">QWidgetAction</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAction is part of <db:simplelist><db:member>mainwindow-classes</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In applications many common commands can be invoked via menus, toolbar buttons, and keyboard shortcuts. Since the user expects each command to be performed in the same way, regardless of the user interface used, it is useful to represent each command as an <db:emphasis>action</db:emphasis>.</db:para>
<db:para>Actions can be added to menus and toolbars, and will automatically keep them in sync. For example, in a word processor, if the user presses a Bold toolbar button, the Bold menu item will automatically be checked.</db:para>
<db:para>Actions can be created as independent objects, but they may also be created during the construction of menus; the <db:link xlink:href="qmenu.xml">QMenu</db:link> class contains convenience functions for creating actions suitable for use as menu items.</db:para>
<db:para>A <db:link xlink:href="qaction.xml">QAction</db:link> may contain an icon, menu text, a shortcut, status text, &quot;What's This?&quot; text, and a tooltip. Most of these can be set in the constructor. They can also be set independently with setIcon(), setText(), setIconText(), setShortcut(), setStatusTip(), setWhatsThis(), and setToolTip(). For menu items, it is possible to set an individual font with setFont().</db:para>
<db:para>Actions are added to widgets using <db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>() or <db:link xlink:href="qgraphicswidget.xml#addAction">QGraphicsWidget::addAction</db:link>(). Note that an action must be added to a widget before it can be used; this is also true when the shortcut should be global (i.e., <db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::ApplicationShortcut</db:link> as <db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::ShortcutContext</db:link>).</db:para>
<db:para>Once a <db:link xlink:href="qaction.xml">QAction</db:link> has been created it should be added to the relevant menu and toolbar, then connected to the slot which will perform the action. For example:</db:para>
<db:programlisting language="cpp">    openAct = new QAction(QIcon(&quot;:/images/open.png&quot;), tr(&quot;&amp;Open...&quot;), this);
    openAct-&gt;setShortcuts(QKeySequence::Open);
    openAct-&gt;setStatusTip(tr(&quot;Open an existing file&quot;));
    connect(openAct, SIGNAL(triggered()), this, SLOT(open()));

    fileMenu-&gt;addAction(openAct);
    fileToolBar-&gt;addAction(openAct);
</db:programlisting>
<db:para>We recommend that actions are created as children of the window they are used in. In most cases actions will be children of the application's main window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml">QMenu</db:link></db:member>
<db:member><db:link xlink:href="qtoolbar.xml">QToolBar</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-application-example.xml">Application Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ActionEvent-enum">
<db:title>enum QAction::ActionEvent</db:title>
<db:para>This enum type is used when calling <db:link xlink:href="qaction.xml#activate">QAction::activate</db:link>()</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::Trigger</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>this will cause the <db:link xlink:href="qaction.xml#triggered">QAction::triggered</db:link>() signal to be emitted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::Hover</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>this will cause the <db:link xlink:href="qaction.xml#hovered">QAction::hovered</db:link>() signal to be emitted.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="MenuRole-enum">
<db:title>enum QAction::MenuRole</db:title>
<db:para>This enum describes how an action should be moved into the application menu on Mac OS X.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::NoRole</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This action should not be put into the application menu</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::TextHeuristicRole</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This action should be put in the application menu based on the action's text as described in the <db:link xlink:href="qmenubar.xml">QMenuBar</db:link> documentation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::ApplicationSpecificRole</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This action should be put in the application menu with an application specific role</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::AboutQtRole</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>This action matches handles the &quot;About Qt&quot; menu item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::AboutRole</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>This action should be placed where the &quot;About&quot; menu item is in the application menu. The text of the menu item will be set to &quot;About &lt;application name&gt;&quot;. The application name is fetched from the <db:code>Info.plist</db:code> file in the application's bundle (See <db:link xlink:href="">Deploying an Application on Mac OS X</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::PreferencesRole</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>This action should be placed where the &quot;Preferences...&quot; menu item is in the application menu.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::QuitRole</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>This action should be placed where the Quit menu item is in the application menu.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Setting this value only has effect on items that are in the immediate menus of the menubar, not the submenus of those menus. For example, if you have File menu in your menubar and the File menu has a submenu, setting the MenuRole for the actions in that submenu have no effect. They will never be moved.</db:para>
</db:section>
<db:section xml:id="Priority-enum">
<db:title>[since 4.6] enum QAction::Priority</db:title>
<db:para>This enum defines priorities for actions in user interface.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::LowPriority</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The action should not be prioritized in the user interface.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::NormalPriority</db:code></db:para>
</db:td>
<db:td><db:code>128</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::HighPriority</db:code></db:para>
</db:td>
<db:td><db:code>256</db:code></db:td>
<db:td>
<db:para>The action should be prioritized in the user interface.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>priority</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAction">
<db:title>[explicit] QAction::QAction(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs an action with <db:code role="parameter">parent</db:code>. If <db:code role="parameter">parent</db:code> is an action group the action will be automatically inserted into the group.</db:para>
</db:section>
<db:section xml:id="QAction-1">
<db:title>QAction::QAction(const QString &amp;<db:emphasis>text</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs an action with some <db:code role="parameter">text</db:code> and <db:code role="parameter">parent</db:code>. If <db:code role="parameter">parent</db:code> is an action group the action will be automatically inserted into the group.</db:para>
<db:para>The action uses a stripped version of <db:code role="parameter">text</db:code> (e.g. &quot;&amp;Menu Option...&quot; becomes &quot;Menu Option&quot;) as descriptive text for tool buttons. You can override this by setting a specific description with setText(). The same text will be used for tooltips unless you specify a different text using setToolTip().</db:para>
</db:section>
<db:section xml:id="QAction-2">
<db:title>QAction::QAction(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs an action with an <db:code role="parameter">icon</db:code> and some <db:code role="parameter">text</db:code> and <db:code role="parameter">parent</db:code>. If <db:code role="parameter">parent</db:code> is an action group the action will be automatically inserted into the group.</db:para>
<db:para>The action uses a stripped version of <db:code role="parameter">text</db:code> (e.g. &quot;&amp;Menu Option...&quot; becomes &quot;Menu Option&quot;) as descriptive text for tool buttons. You can override this by setting a specific description with setText(). The same text will be used for tooltips unless you specify a different text using setToolTip().</db:para>
</db:section>
<db:section xml:id="dtor.QAction">
<db:title>[virtual noexcept] QAction::~QAction()</db:title>
<db:para>Destroys the object and frees allocated resources.</db:para>
</db:section>
<db:section xml:id="actionGroup">
<db:title>QActionGroup *QAction::actionGroup() const</db:title>
<db:para>Returns the action group for this action. If no action group manages this action then 0 will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qactiongroup.xml">QActionGroup</db:link></db:member>
<db:member><db:link xlink:href="qaction.xml#setActionGroup">QAction::setActionGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activate">
<db:title>void QAction::activate(QAction::ActionEvent <db:emphasis>event</db:emphasis>)</db:title>
<db:para>Sends the relevant signals for <db:link xlink:href="qaction.xml#ActionEvent-enum">ActionEvent</db:link> <db:code role="parameter">event</db:code>.</db:para>
<db:para>Action based widgets use this API to cause the <db:link xlink:href="qaction.xml">QAction</db:link> to emit signals as well as emitting their own.</db:para>
</db:section>
<db:section xml:id="associatedGraphicsWidgets">
<db:title>[since 4.5] QList&lt;QGraphicsWidget *&gt; QAction::associatedGraphicsWidgets() const</db:title>
<db:para>Returns a list of widgets this action has been added to.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#associatedWidgets">associatedWidgets</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="associatedWidgets">
<db:title>[since 4.2] QList&lt;QWidget *&gt; QAction::associatedWidgets() const</db:title>
<db:para>Returns a list of widgets this action has been added to.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#associatedGraphicsWidgets">associatedGraphicsWidgets</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changed">
<db:title>void QAction::changed()</db:title>
<db:para>This signal is emitted when an action has changed. If you are only interested in actions in a given widget, you can watch for <db:link xlink:href="qwidget.xml#actionEvent">QWidget::actionEvent</db:link>() sent with an <db:link xlink:href="qevent.xml#Type-enum">QEvent::ActionChanged</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#actionEvent">QWidget::actionEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>QVariant QAction::data() const</db:title>
<db:para>Returns the user data as set in <db:link xlink:href="qaction.xml#setData">QAction::setData</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAction::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="hover">
<db:title>void QAction::hover()</db:title>
<db:para>This is a convenience slot that calls activate(Hover).</db:para>
</db:section>
<db:section xml:id="hovered">
<db:title>void QAction::hovered()</db:title>
<db:para>This signal is emitted when an action is highlighted by the user; for example, when the user pauses with the cursor over a menu option, toolbar button, or presses an action's shortcut key combination.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#activate">QAction::activate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSeparator">
<db:title>bool QAction::isSeparator() const</db:title>
<db:para>Returns true if this action is a separator action; otherwise it returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setSeparator">QAction::setSeparator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="menu">
<db:title>QMenu *QAction::menu() const</db:title>
<db:para>Returns the menu contained by this action. Actions that contain menus can be used to create menu items with submenus, or inserted into toolbars to create buttons with popup menus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setMenu">setMenu</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml#addAction">QMenu::addAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parentWidget">
<db:title>QWidget *QAction::parentWidget() const</db:title>
<db:para>Returns the parent widget.</db:para>
</db:section>
<db:section xml:id="setActionGroup">
<db:title>void QAction::setActionGroup(QActionGroup *<db:emphasis>group</db:emphasis>)</db:title>
<db:para>Sets this action group to <db:code role="parameter">group</db:code>. The action will be automatically added to the group's list of actions.</db:para>
<db:para>Actions within the group will be mutually exclusive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qactiongroup.xml">QActionGroup</db:link></db:member>
<db:member><db:link xlink:href="qaction.xml#actionGroup">QAction::actionGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>void QAction::setData(const QVariant &amp;<db:emphasis>userData</db:emphasis>)</db:title>
<db:para>Sets the action's internal data to the given <db:code role="parameter">userData</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDisabled">
<db:title>void QAction::setDisabled(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:para>This is a convenience function for the enabled property, that is useful for signals–slots connections. If <db:code role="parameter">b</db:code> is true the action is disabled; otherwise it is enabled.</db:para>
</db:section>
<db:section xml:id="setMenu">
<db:title>void QAction::setMenu(QMenu *<db:emphasis>menu</db:emphasis>)</db:title>
<db:para>Sets the menu contained by this action to the specified <db:code role="parameter">menu</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#menu">menu</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSeparator">
<db:title>void QAction::setSeparator(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">b</db:code> is true then this action will be considered a separator.</db:para>
<db:para>How a separator is represented depends on the widget it is inserted into. Under most circumstances the text, submenu, and icon will be ignored for separator actions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#isSeparator">QAction::isSeparator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setShortcuts">
<db:title>[since 4.2] void QAction::setShortcuts(QKeySequence::StandardKey <db:emphasis>key</db:emphasis>)</db:title>
<db:para>Sets a platform dependent list of shortcuts based on the <db:code role="parameter">key</db:code>. The result of calling this function will depend on the currently running platform. Note that more than one shortcut can assigned by this action. If only the primary shortcut is required, use setShortcut instead.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#shortcuts">shortcuts</db:link>()</db:member>
<db:member><db:link xlink:href="qkeysequence.xml#keyBindings">QKeySequence::keyBindings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setShortcuts-1">
<db:title>[since 4.2] void QAction::setShortcuts(const QList&lt;QKeySequence&gt; &amp;<db:emphasis>shortcuts</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">shortcuts</db:code> as the list of shortcuts that trigger the action. The first element of the list is the primary shortcut.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#shortcut">shortcut</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shortcut">
<db:title>QKeySequence QAction::shortcut() const</db:title>
<db:para>Returns the primary shortcut.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setShortcuts">setShortcuts</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shortcuts">
<db:title>[since 4.2] QList&lt;QKeySequence&gt; QAction::shortcuts() const</db:title>
<db:para>Returns the list of shortcuts, with the primary shortcut as the first element of the list.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setShortcuts">setShortcuts</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showStatusText">
<db:title>bool QAction::showStatusText(QWidget *<db:emphasis>widget</db:emphasis> = 0)</db:title>
<db:para>Updates the relevant status bar for the <db:code role="parameter">widget</db:code> specified by sending a <db:link xlink:href="qstatustipevent.xml">QStatusTipEvent</db:link> to its parent widget. Returns true if an event was sent; otherwise returns false.</db:para>
<db:para>If a null widget is specified, the event is sent to the action's parent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>statusTip</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toggle">
<db:title>void QAction::toggle()</db:title>
<db:para>This is a convenience function for the checked property. Connect to it to change the checked state to its opposite state.</db:para>
</db:section>
<db:section xml:id="toggled">
<db:title>void QAction::toggled(bool <db:emphasis>checked</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a checkable action changes its isChecked() status. This can be the result of a user interaction, or because setChecked() was called.</db:para>
<db:para><db:code role="parameter">checked</db:code> is true if the action is checked, or false if the action is unchecked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#activate">QAction::activate</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#triggered">QAction::triggered</db:link>()</db:member>
<db:member>checked</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="trigger">
<db:title>void QAction::trigger()</db:title>
<db:para>This is a convenience slot that calls activate(Trigger).</db:para>
</db:section>
<db:section xml:id="triggered">
<db:title>void QAction::triggered(bool <db:emphasis>checked</db:emphasis> = false)</db:title>
<db:para>This signal is emitted when an action is activated by the user; for example, when the user clicks a menu option, toolbar button, or presses an action's shortcut key combination, or when <db:link xlink:href="qaction.xml#trigger">trigger</db:link>() was called. Notably, it is <db:emphasis>not</db:emphasis> emitted when setChecked() or <db:link xlink:href="qaction.xml#toggle">toggle</db:link>() is called.</db:para>
<db:para>If the action is checkable, <db:code role="parameter">checked</db:code> is true if the action is checked, or false if the action is unchecked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#activate">QAction::activate</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#toggled">QAction::toggled</db:link>()</db:member>
<db:member>checked</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
