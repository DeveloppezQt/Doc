<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAction Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaction.xml">QAction</db:link> class provides an abstract user interface action that can be inserted into widgets.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAction</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidgetaction.xml" xlink:role="class">QWidgetAction</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAction is part of <db:simplelist><db:member>mainwindow-classes</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In applications many common commands can be invoked via menus, toolbar buttons, and keyboard shortcuts. Since the user expects each command to be performed in the same way, regardless of the user interface used, it is useful to represent each command as an <db:emphasis>action</db:emphasis>.</db:para>
<db:para>Actions can be added to menus and toolbars, and will automatically keep them in sync. For example, in a word processor, if the user presses a Bold toolbar button, the Bold menu item will automatically be checked.</db:para>
<db:para>Actions can be created as independent objects, but they may also be created during the construction of menus; the <db:link xlink:href="qmenu.xml">QMenu</db:link> class contains convenience functions for creating actions suitable for use as menu items.</db:para>
<db:para>A <db:link xlink:href="qaction.xml">QAction</db:link> may contain an icon, menu text, a shortcut, status text, &quot;What's This?&quot; text, and a tooltip. Most of these can be set in the constructor. They can also be set independently with <db:link xlink:href="qaction.xml#icon-prop">setIcon</db:link>(), <db:link xlink:href="qaction.xml#text-prop">setText</db:link>(), <db:link xlink:href="qaction.xml#iconText-prop">setIconText</db:link>(), <db:link xlink:href="qaction.xml#shortcut-prop">setShortcut</db:link>(), <db:link xlink:href="qaction.xml#statusTip-prop">setStatusTip</db:link>(), <db:link xlink:href="qaction.xml#whatsThis-prop">setWhatsThis</db:link>(), and <db:link xlink:href="qaction.xml#toolTip-prop">setToolTip</db:link>(). For menu items, it is possible to set an individual font with <db:link xlink:href="qaction.xml#font-prop">setFont</db:link>().</db:para>
<db:para>Actions are added to widgets using <db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>() or <db:link xlink:href="qgraphicswidget.xml#addAction">QGraphicsWidget::addAction</db:link>(). Note that an action must be added to a widget before it can be used; this is also true when the shortcut should be global (i.e., <db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::ApplicationShortcut</db:link> as <db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::ShortcutContext</db:link>).</db:para>
<db:para>Once a <db:link xlink:href="qaction.xml">QAction</db:link> has been created it should be added to the relevant menu and toolbar, then connected to the slot which will perform the action. For example:</db:para>
<db:programlisting language="cpp">    const QIcon openIcon = QIcon::fromTheme(&quot;document-open&quot;, QIcon(&quot;:/images/open.png&quot;));
    QAction *openAct = new QAction(openIcon, tr(&quot;&amp;Open...&quot;), this);
    openAct-&gt;setShortcuts(QKeySequence::Open);
    openAct-&gt;setStatusTip(tr(&quot;Open an existing file&quot;));
    connect(openAct, &amp;QAction::triggered, this, &amp;MainWindow::open);
    fileMenu-&gt;addAction(openAct);
    fileToolBar-&gt;addAction(openAct);

</db:programlisting>
<db:programlisting language="cpp">fileMenu-&gt;addAction(openAct);
</db:programlisting>
<db:para>We recommend that actions are created as children of the window they are used in. In most cases actions will be children of the application's main window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml">QMenu</db:link></db:member>
<db:member><db:link xlink:href="qtoolbar.xml">QToolBar</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-application-example.xml">Application Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ActionEvent-enum">
<db:title>enum QAction::ActionEvent</db:title>
<db:para>This enum type is used when calling <db:link xlink:href="qaction.xml#activate">QAction::activate</db:link>()</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::Trigger</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>this will cause the <db:link xlink:href="qaction.xml#triggered">QAction::triggered</db:link>() signal to be emitted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::Hover</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>this will cause the <db:link xlink:href="qaction.xml#hovered">QAction::hovered</db:link>() signal to be emitted.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="MenuRole-enum">
<db:title>enum QAction::MenuRole</db:title>
<db:para>This enum describes how an action should be moved into the application menu on macOS.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::NoRole</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This action should not be put into the application menu</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::TextHeuristicRole</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This action should be put in the application menu based on the action's text as described in the <db:link xlink:href="qmenubar.xml">QMenuBar</db:link> documentation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::ApplicationSpecificRole</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This action should be put in the application menu with an application specific role</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::AboutQtRole</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>This action handles the &quot;About Qt&quot; menu item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::AboutRole</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>This action should be placed where the &quot;About&quot; menu item is in the application menu. The text of the menu item will be set to &quot;About &lt;application name&gt;&quot;. The application name is fetched from the Info.plist file in the application's bundle (See <db:link xlink:href="osx-deployment.xml">Qt for macOS - Deployment</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::PreferencesRole</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>This action should be placed where the &quot;Preferences...&quot; menu item is in the application menu.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::QuitRole</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>This action should be placed where the Quit menu item is in the application menu.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Setting this value only has effect on items that are in the immediate menus of the menubar, not the submenus of those menus. For example, if you have File menu in your menubar and the File menu has a submenu, setting the MenuRole for the actions in that submenu have no effect. They will never be moved.</db:para>
</db:section>
<db:section xml:id="Priority-enum">
<db:title>[since 4.6] enum QAction::Priority</db:title>
<db:para>This enum defines priorities for actions in user interface.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::LowPriority</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The action should not be prioritized in the user interface.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::NormalPriority</db:code></db:para>
</db:td>
<db:td><db:code>128</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaction.xml">QAction</db:link></db:emphasis>::HighPriority</db:code></db:para>
</db:td>
<db:td><db:code>256</db:code></db:td>
<db:td>
<db:para>The action should be prioritized in the user interface.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#priority-prop">priority</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoRepeat-prop">
<db:title>[since 4.2] autoRepeat : bool</db:title>
<db:para>This property holds whether the action can auto repeat</db:para>
<db:para>If true, the action will auto repeat when the keyboard shortcut combination is held down, provided that keyboard auto repeat is enabled on the system. The default value is true.</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoRepeat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoRepeat</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="checkable-prop">
<db:title>checkable : bool</db:title>
<db:para>This property holds whether the action is a checkable action</db:para>
<db:para>A checkable action is one which has an on/off state. For example, in a word processor, a Bold toolbar button may be either on or off. An action which is not a toggle action is a command action; a command action is simply executed, e.g. file save. By default, this property is false.</db:para>
<db:para>In some situations, the state of one toggle action should depend on the state of others. For example, &quot;Left Align&quot;, &quot;Center&quot; and &quot;Right Align&quot; toggle actions are mutually exclusive. To achieve exclusive toggling, add the relevant toggle actions to a <db:link xlink:href="qactiongroup.xml">QActionGroup</db:link> with the <db:link xlink:href="qactiongroup.xml#exclusive-prop">QActionGroup::exclusive</db:link> property set to true.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isCheckable</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCheckable</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#checked-prop">QAction::setChecked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checked-prop">
<db:title>checked : bool</db:title>
<db:para>This property holds whether the action is checked.</db:para>
<db:para>Only checkable actions can be checked. By default, this is false (the action is unchecked).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isChecked</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setChecked</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#toggled">toggled</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>checked</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#checkable-prop">checkable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:para>This property holds whether the action is enabled</db:para>
<db:para>Disabled actions cannot be chosen by the user. They do not disappear from menus or toolbars, but they are displayed in a way which indicates that they are unavailable. For example, they might be displayed using only shades of gray.</db:para>
<db:para><db:guilabel>What's This?</db:guilabel> help on disabled actions is still available, provided that the <db:link xlink:href="qaction.xml#whatsThis-prop">QAction::whatsThis</db:link> property is set.</db:para>
<db:para>An action will be disabled when all widgets to which it is added (with <db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()) are disabled or not visible. When an action is disabled, it is not possible to trigger it through its shortcut.</db:para>
<db:para>By default, this property is true (actions are enabled).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setEnabled</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#text-prop">text</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font-prop">
<db:title>font : QFont</db:title>
<db:para>This property holds the action's font</db:para>
<db:para>The font property is used to render the text set on the <db:link xlink:href="qaction.xml">QAction</db:link>. The font will can be considered a hint as it will not be consulted in all cases based upon application and style.</db:para>
<db:para>By default, this property contains the application's default font.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> <db:emphasis role="bold">font</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFont</db:emphasis>(const <db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> &amp;<db:emphasis>font</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#text-prop">QAction::setText</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml">QStyle</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="icon-prop">
<db:title>icon : QIcon</db:title>
<db:para>This property holds the action's icon</db:para>
<db:para>In toolbars, the icon is used as the tool button icon; in menus, it is displayed to the left of the menu text. There is no default icon.</db:para>
<db:para>If a null icon (<db:link xlink:href="qicon.xml#isNull">QIcon::isNull</db:link>() is passed into this function, the icon of the action is cleared.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qicon.xml">QIcon</db:link></db:type> <db:emphasis role="bold">icon</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIcon</db:emphasis>(const <db:type><db:link xlink:href="qicon.xml">QIcon</db:link></db:type> &amp;<db:emphasis>icon</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="iconText-prop">
<db:title>iconText : QString</db:title>
<db:para>This property holds the action's descriptive icon text</db:para>
<db:para>If <db:link xlink:href="qtoolbar.xml#toolButtonStyle-prop">QToolBar::toolButtonStyle</db:link> is set to a value that permits text to be displayed, the text defined held in this property appears as a label in the relevant tool button.</db:para>
<db:para>It also serves as the default text in menus and tooltips if the action has not been defined with <db:link xlink:href="qaction.xml#text-prop">setText</db:link>() or <db:link xlink:href="qaction.xml#toolTip-prop">setToolTip</db:link>(), and will also be used in toolbar buttons if no icon has been defined using <db:link xlink:href="qaction.xml#icon-prop">setIcon</db:link>().</db:para>
<db:para>If the icon text is not explicitly set, the action's normal text will be used for the icon text.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">iconText</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIconText</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>text</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#toolTip-prop">setToolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#statusTip-prop">setStatusTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iconVisibleInMenu-prop">
<db:title>[since 4.4] iconVisibleInMenu : bool</db:title>
<db:para>This property holds whether or not an action should show an icon in a menu</db:para>
<db:para>In some applications, it may make sense to have actions with icons in the toolbar, but not in menus. If true, the icon (if valid) is shown in the menu, when it is false, it is not shown.</db:para>
<db:para>The default is to follow whether the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_DontShowIconsInMenus</db:link> attribute is set for the application. Explicitly settings this property overrides the presence (or abscence) of the attribute.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">QApplication app(argc, argv);
app.setAttribute(Qt::AA_DontShowIconsInMenus);  // Icons are *no longer shown* in menus
// ...
QAction *myAction = new QAction();
// ...
myAction-&gt;setIcon(SomeIcon);
myAction-&gt;setIconVisibleInMenu(true);   // Icon *will* be shown in menus for *this* action.
</db:programlisting>
<db:para>This property was introduced in Qt 4.4.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isIconVisibleInMenu</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIconVisibleInMenu</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#icon-prop">QAction::icon</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#setAttribute">QCoreApplication::setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="menuRole-prop">
<db:title>[since 4.2] menuRole : MenuRole</db:title>
<db:para>This property holds the action's menu role</db:para>
<db:para>This indicates what role the action serves in the application menu on macOS. By default all actions have the <db:link xlink:href="qaction.xml#MenuRole-enum">TextHeuristicRole</db:link>, which means that the action is added based on its text (see <db:link xlink:href="qmenubar.xml">QMenuBar</db:link> for more information).</db:para>
<db:para>The menu role can only be changed before the actions are put into the menu bar in macOS (usually just before the first application window is shown).</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qaction.xml#MenuRole-enum">QAction::MenuRole</db:link></db:type> <db:emphasis role="bold">menuRole</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMenuRole</db:emphasis>(<db:type><db:link xlink:href="qaction.xml#MenuRole-enum">QAction::MenuRole</db:link></db:type> <db:emphasis>menuRole</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="priority-prop">
<db:title>[since 4.6] priority : Priority</db:title>
<db:para>This property holds the actions's priority in the user interface.</db:para>
<db:para>This property can be set to indicate how the action should be prioritized in the user interface.</db:para>
<db:para>For instance, when toolbars have the <db:link xlink:href="qt.xml#ToolButtonStyle-enum">Qt::ToolButtonTextBesideIcon</db:link> mode set, then actions with <db:link xlink:href="qaction.xml#Priority-enum">LowPriority</db:link> will not show the text labels.</db:para>
<db:para>This property was introduced in Qt 4.6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qaction.xml#Priority-enum">QAction::Priority</db:link></db:type> <db:emphasis role="bold">priority</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPriority</db:emphasis>(<db:type><db:link xlink:href="qaction.xml#Priority-enum">QAction::Priority</db:link></db:type> <db:emphasis>priority</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="shortcut-prop">
<db:title>shortcut : QKeySequence</db:title>
<db:para>This property holds the action's primary shortcut key</db:para>
<db:para>Valid keycodes for this property can be found in <db:link xlink:href="qt.xml#Key-enum">Qt::Key</db:link> and <db:link xlink:href="qt.xml#Modifier-enum">Qt::Modifier</db:link>. There is no default shortcut key.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qkeysequence.xml">QKeySequence</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#shortcut">shortcut</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setShortcut</db:emphasis>(const <db:type><db:link xlink:href="qkeysequence.xml">QKeySequence</db:link></db:type> &amp;<db:emphasis>shortcut</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="shortcutContext-prop">
<db:title>shortcutContext : Qt::ShortcutContext</db:title>
<db:para>This property holds the context for the action's shortcut</db:para>
<db:para>Valid values for this property can be found in <db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::ShortcutContext</db:link>. The default value is <db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::WindowShortcut</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::ShortcutContext</db:link></db:type> <db:emphasis role="bold">shortcutContext</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setShortcutContext</db:emphasis>(<db:type><db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::ShortcutContext</db:link></db:type> <db:emphasis>context</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="statusTip-prop">
<db:title>statusTip : QString</db:title>
<db:para>This property holds the action's status tip</db:para>
<db:para>The status tip is displayed on all status bars provided by the action's top-level parent widget.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">statusTip</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setStatusTip</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>statusTip</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#toolTip-prop">setToolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#showStatusText">showStatusText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : QString</db:title>
<db:para>This property holds the action's descriptive text</db:para>
<db:para>If the action is added to a menu, the menu option will consist of the icon (if there is one), the text, and the shortcut (if there is one). If the text is not explicitly set in the constructor, or by using setText(), the action's description icon text will be used as text. There is no default text.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">text</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setText</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>text</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#iconText-prop">iconText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toolTip-prop">
<db:title>toolTip : QString</db:title>
<db:para>This property holds the action's tooltip</db:para>
<db:para>This text is used for the tooltip. If no tooltip is specified, the action's text is used.</db:para>
<db:para>By default, this property contains the action's text.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">toolTip</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setToolTip</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>tip</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#statusTip-prop">setStatusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#shortcut-prop">setShortcut</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visible-prop">
<db:title>visible : bool</db:title>
<db:para>This property holds whether the action can be seen (e.g. in menus and toolbars)</db:para>
<db:para>If <db:emphasis>visible</db:emphasis> is true the action can be seen (e.g. in menus and toolbars) and chosen by the user; if <db:emphasis>visible</db:emphasis> is false the action cannot be seen or chosen by the user.</db:para>
<db:para>Actions which are not visible are <db:emphasis>not</db:emphasis> grayed out; they do not appear at all.</db:para>
<db:para>By default, this property is true (actions are visible).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVisible</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="whatsThis-prop">
<db:title>whatsThis : QString</db:title>
<db:para>This property holds the action's &quot;What's This?&quot; help text</db:para>
<db:para>The &quot;What's This?&quot; text is used to provide a brief description of the action. The text may contain rich text. There is no default &quot;What's This?&quot; text.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">whatsThis</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWhatsThis</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>what</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaction.xml#changed">changed</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwhatsthis.xml">QWhatsThis</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAction">
<db:title>[explicit] QAction::QAction(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs an action with <db:code role="parameter">parent</db:code>. If <db:code role="parameter">parent</db:code> is an action group the action will be automatically inserted into the group.</db:para>
</db:section>
<db:section xml:id="QAction-1">
<db:title>QAction::QAction(const QString &amp;<db:emphasis>text</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs an action with some <db:code role="parameter">text</db:code> and <db:code role="parameter">parent</db:code>. If <db:code role="parameter">parent</db:code> is an action group the action will be automatically inserted into the group.</db:para>
<db:para>The action uses a stripped version of <db:code role="parameter">text</db:code> (e.g. &quot;&amp;Menu Option...&quot; becomes &quot;Menu Option&quot;) as descriptive text for tool buttons. You can override this by setting a specific description with <db:link xlink:href="qaction.xml#text-prop">setText</db:link>(). The same text will be used for tooltips unless you specify a different text using <db:link xlink:href="qaction.xml#toolTip-prop">setToolTip</db:link>().</db:para>
</db:section>
<db:section xml:id="QAction-2">
<db:title>QAction::QAction(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs an action with an <db:code role="parameter">icon</db:code> and some <db:code role="parameter">text</db:code> and <db:code role="parameter">parent</db:code>. If <db:code role="parameter">parent</db:code> is an action group the action will be automatically inserted into the group.</db:para>
<db:para>The action uses a stripped version of <db:code role="parameter">text</db:code> (e.g. &quot;&amp;Menu Option...&quot; becomes &quot;Menu Option&quot;) as descriptive text for tool buttons. You can override this by setting a specific description with <db:link xlink:href="qaction.xml#text-prop">setText</db:link>(). The same text will be used for tooltips unless you specify a different text using <db:link xlink:href="qaction.xml#toolTip-prop">setToolTip</db:link>().</db:para>
</db:section>
<db:section xml:id="dtor.QAction">
<db:title>[virtual noexcept] QAction::~QAction()</db:title>
<db:para>Destroys the object and frees allocated resources.</db:para>
</db:section>
<db:section xml:id="actionGroup">
<db:title>QActionGroup *QAction::actionGroup() const</db:title>
<db:para>Returns the action group for this action. If no action group manages this action then 0 will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qactiongroup.xml">QActionGroup</db:link></db:member>
<db:member><db:link xlink:href="qaction.xml#setActionGroup">QAction::setActionGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activate">
<db:title>void QAction::activate(QAction::ActionEvent <db:emphasis>event</db:emphasis>)</db:title>
<db:para>Sends the relevant signals for <db:link xlink:href="qaction.xml#ActionEvent-enum">ActionEvent</db:link> <db:code role="parameter">event</db:code>.</db:para>
<db:para>Action based widgets use this API to cause the <db:link xlink:href="qaction.xml">QAction</db:link> to emit signals as well as emitting their own.</db:para>
</db:section>
<db:section xml:id="associatedGraphicsWidgets">
<db:title>[since 4.5] QList&lt;QGraphicsWidget *&gt; QAction::associatedGraphicsWidgets() const</db:title>
<db:para>Returns a list of widgets this action has been added to.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#associatedWidgets">associatedWidgets</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="associatedWidgets">
<db:title>[since 4.2] QList&lt;QWidget *&gt; QAction::associatedWidgets() const</db:title>
<db:para>Returns a list of widgets this action has been added to.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#associatedGraphicsWidgets">associatedGraphicsWidgets</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changed">
<db:title>void QAction::changed()</db:title>
<db:para>This signal is emitted when an action has changed. If you are only interested in actions in a given widget, you can watch for <db:link xlink:href="qwidget.xml#actionEvent">QWidget::actionEvent</db:link>() sent with an <db:link xlink:href="qevent.xml#Type-enum">QEvent::ActionChanged</db:link>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#autoRepeat-prop">autoRepeat</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#checkable-prop">checkable</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#enabled-prop">enabled</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#font-prop">font</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#icon-prop">icon</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#iconText-prop">iconText</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#iconVisibleInMenu-prop">iconVisibleInMenu</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#menuRole-prop">menuRole</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#shortcut-prop">shortcut</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#shortcutContext-prop">shortcutContext</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#statusTip-prop">statusTip</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#text-prop">text</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#toolTip-prop">toolTip</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#visible-prop">visible</db:link>. </db:para>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#whatsThis-prop">whatsThis</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#actionEvent">QWidget::actionEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>QVariant QAction::data() const</db:title>
<db:para>Returns the user data as set in <db:link xlink:href="qaction.xml#setData">QAction::setData</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAction::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="hover">
<db:title>void QAction::hover()</db:title>
<db:para>This is a convenience slot that calls activate(Hover).</db:para>
</db:section>
<db:section xml:id="hovered">
<db:title>void QAction::hovered()</db:title>
<db:para>This signal is emitted when an action is highlighted by the user; for example, when the user pauses with the cursor over a menu option, toolbar button, or presses an action's shortcut key combination.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#activate">QAction::activate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSeparator">
<db:title>bool QAction::isSeparator() const</db:title>
<db:para>Returns true if this action is a separator action; otherwise it returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setSeparator">QAction::setSeparator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="menu">
<db:title>QMenu *QAction::menu() const</db:title>
<db:para>Returns the menu contained by this action. Actions that contain menus can be used to create menu items with submenus, or inserted into toolbars to create buttons with popup menus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setMenu">setMenu</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml#addAction">QMenu::addAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parentWidget">
<db:title>QWidget *QAction::parentWidget() const</db:title>
<db:para>Returns the parent widget.</db:para>
</db:section>
<db:section xml:id="setActionGroup">
<db:title>void QAction::setActionGroup(QActionGroup *<db:emphasis>group</db:emphasis>)</db:title>
<db:para>Sets this action group to <db:code role="parameter">group</db:code>. The action will be automatically added to the group's list of actions.</db:para>
<db:para>Actions within the group will be mutually exclusive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qactiongroup.xml">QActionGroup</db:link></db:member>
<db:member><db:link xlink:href="qaction.xml#actionGroup">QAction::actionGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>void QAction::setData(const QVariant &amp;<db:emphasis>userData</db:emphasis>)</db:title>
<db:para>Sets the action's internal data to the given <db:code role="parameter">userData</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDisabled">
<db:title>void QAction::setDisabled(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:para>This is a convenience function for the <db:link xlink:href="qaction.xml#enabled-prop">enabled</db:link> property, that is useful for signals–slots connections. If <db:code role="parameter">b</db:code> is true the action is disabled; otherwise it is enabled.</db:para>
</db:section>
<db:section xml:id="setMenu">
<db:title>void QAction::setMenu(QMenu *<db:emphasis>menu</db:emphasis>)</db:title>
<db:para>Sets the menu contained by this action to the specified <db:code role="parameter">menu</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#menu">menu</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSeparator">
<db:title>void QAction::setSeparator(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">b</db:code> is true then this action will be considered a separator.</db:para>
<db:para>How a separator is represented depends on the widget it is inserted into. Under most circumstances the text, submenu, and icon will be ignored for separator actions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#isSeparator">QAction::isSeparator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setShortcuts">
<db:title>[since 4.2] void QAction::setShortcuts(QKeySequence::StandardKey <db:emphasis>key</db:emphasis>)</db:title>
<db:para>Sets a platform dependent list of shortcuts based on the <db:code role="parameter">key</db:code>. The result of calling this function will depend on the currently running platform. Note that more than one shortcut can assigned by this action. If only the primary shortcut is required, use <db:link xlink:href="qaction.xml#shortcut-prop">setShortcut</db:link> instead.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#shortcuts">shortcuts</db:link>()</db:member>
<db:member><db:link xlink:href="qkeysequence.xml#keyBindings">QKeySequence::keyBindings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setShortcuts-1">
<db:title>[since 4.2] void QAction::setShortcuts(const QList&lt;QKeySequence&gt; &amp;<db:emphasis>shortcuts</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">shortcuts</db:code> as the list of shortcuts that trigger the action. The first element of the list is the primary shortcut.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#shortcut">shortcut</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shortcut">
<db:title>QKeySequence QAction::shortcut() const</db:title>
<db:para>Returns the primary shortcut.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qaction.xml#shortcut-prop">shortcut</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setShortcuts">setShortcuts</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shortcuts">
<db:title>[since 4.2] QList&lt;QKeySequence&gt; QAction::shortcuts() const</db:title>
<db:para>Returns the list of shortcuts, with the primary shortcut as the first element of the list.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#setShortcuts">setShortcuts</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showStatusText">
<db:title>bool QAction::showStatusText(QWidget *<db:emphasis>widget</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Updates the relevant status bar for the <db:code role="parameter">widget</db:code> specified by sending a <db:link xlink:href="qstatustipevent.xml">QStatusTipEvent</db:link> to its parent widget. Returns true if an event was sent; otherwise returns false.</db:para>
<db:para>If a null widget is specified, the event is sent to the action's parent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#statusTip-prop">statusTip</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toggle">
<db:title>void QAction::toggle()</db:title>
<db:para>This is a convenience function for the <db:link xlink:href="qaction.xml#checked-prop">checked</db:link> property. Connect to it to change the checked state to its opposite state.</db:para>
</db:section>
<db:section xml:id="toggled">
<db:title>void QAction::toggled(bool <db:emphasis>checked</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a checkable action changes its <db:link xlink:href="qaction.xml#checked-prop">isChecked</db:link>() status. This can be the result of a user interaction, or because <db:link xlink:href="qaction.xml#checked-prop">setChecked</db:link>() was called.</db:para>
<db:para><db:code role="parameter">checked</db:code> is true if the action is checked, or false if the action is unchecked.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qaction.xml#checked-prop">checked</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#activate">QAction::activate</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#triggered">QAction::triggered</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#checked-prop">checked</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="trigger">
<db:title>void QAction::trigger()</db:title>
<db:para>This is a convenience slot that calls activate(Trigger).</db:para>
</db:section>
<db:section xml:id="triggered">
<db:title>void QAction::triggered(bool <db:emphasis>checked</db:emphasis> = false)</db:title>
<db:para>This signal is emitted when an action is activated by the user; for example, when the user clicks a menu option, toolbar button, or presses an action's shortcut key combination, or when <db:link xlink:href="qaction.xml#trigger">trigger</db:link>() was called. Notably, it is <db:emphasis>not</db:emphasis> emitted when <db:link xlink:href="qaction.xml#checked-prop">setChecked</db:link>() or <db:link xlink:href="qaction.xml#toggle">toggle</db:link>() is called.</db:para>
<db:para>If the action is checkable, <db:code role="parameter">checked</db:code> is true if the action is checked, or false if the action is unchecked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaction.xml#activate">QAction::activate</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#toggled">QAction::toggled</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#checked-prop">checked</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
