<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGrpcCallReply Class</db:title>
<db:productname>QtGrpc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GRPC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgrpccallreply.xml">QGrpcCallReply</db:link> class implements logic to handle gRPC calls from the gRPC client side.</db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGrpcCallReply</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Grpc)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Grpc)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgrpcoperation.xml" xlink:role="class">QGrpcOperation</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qgrpccallreply.xml">QGrpcCallReply</db:link> object is owned by the client object that created it.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="subscribe">
<db:title>void QGrpcCallReply::subscribe(QObject *<db:emphasis>receiver</db:emphasis>, Func1 &amp;&amp;<db:emphasis>finishCallback</db:emphasis>, Func2 &amp;&amp;<db:emphasis>errorCallback</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis> = Qt::AutoConnection)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>subscribe</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Func1 &amp;&amp;</db:type>
<db:parameter>finishCallback</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Func2 &amp;&amp;</db:type>
<db:parameter>errorCallback</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ConnectionType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Qt::AutoConnection</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void subscribe(QObject *receiver, Func1 &amp;&amp;finishCallback, Func2 &amp;&amp;errorCallback, Qt::ConnectionType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to connect the <db:code role="parameter">finishCallback</db:code> and <db:code role="parameter">errorCallback</db:code> of <db:code role="parameter">receiver</db:code> to the QGrpcCallReply::finished and the QGrpcCallReply::errorOccurred signals with the given connection <db:code role="parameter">type</db:code>.</db:para>
<db:para>Calling this function is equivalent to the following:</db:para>
<db:programlisting language="cpp">QObject::connect(this, &amp;amp;QGrpcCallReply::finished, receiver,
                 std::forward&amp;lt;Func1&amp;gt;(finishCallback), type);
QObject::connect(this, &amp;amp;QGrpcCallReply::errorOccurred, receiver,
                 std::forward&amp;lt;Func2&amp;gt;(errorCallback), type);
</db:programlisting>
</db:section>
<db:section xml:id="subscribe-1">
<db:title>void QGrpcCallReply::subscribe(QObject *<db:emphasis>receiver</db:emphasis>, Func1 &amp;&amp;<db:emphasis>finishCallback</db:emphasis>, Qt::ConnectionType <db:emphasis>type</db:emphasis> = Qt::AutoConnection)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>subscribe</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Func1 &amp;&amp;</db:type>
<db:parameter>finishCallback</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ConnectionType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Qt::AutoConnection</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void subscribe(QObject *receiver, Func1 &amp;&amp;finishCallback, Qt::ConnectionType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to connect the <db:code role="parameter">finishCallback</db:code> of <db:code role="parameter">receiver</db:code> to the QGrpcCallReply::finished signal with given connection <db:code role="parameter">type</db:code>.</db:para>
<db:para>Calling this function is equivalent to the following:</db:para>
<db:programlisting language="cpp">QObject::connect(this, &amp;amp;QGrpcCallReply::finished, receiver,
                 std::forward&amp;lt;Func1&amp;gt;(finishCallback), type);
</db:programlisting>
</db:section>
</db:section>
</db:article>
