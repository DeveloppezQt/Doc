<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextLine Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextline.xml">QTextLine</db:link> class represents a line of text inside a <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextLine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextLine is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A text line is usually created by <db:link xlink:href="qtextlayout.xml#createLine">QTextLayout::createLine</db:link>().</db:para>
<db:para>After being created, the line can be filled using the <db:link xlink:href="qtextline.xml#setLineWidth">setLineWidth</db:link>() or <db:link xlink:href="qtextline.xml#setNumColumns">setNumColumns</db:link>() functions. A line has a number of attributes including the rectangle it occupies, <db:link xlink:href="qtextline.xml#rect">rect</db:link>(), its coordinates, <db:link xlink:href="qtextline.xml#x">x</db:link>() and <db:link xlink:href="qtextline.xml#y">y</db:link>(), its <db:link xlink:href="qtextline.xml#textLength">textLength</db:link>(), <db:link xlink:href="qtextline.xml#width">width</db:link>() and <db:link xlink:href="qtextline.xml#naturalTextWidth">naturalTextWidth</db:link>(), and its <db:link xlink:href="qtextline.xml#ascent">ascent</db:link>() and <db:link xlink:href="qtextline.xml#descent">descent</db:link>() relative to the text. The position of the cursor in terms of the line is available from <db:link xlink:href="qtextline.xml#cursorToX">cursorToX</db:link>() and its inverse from <db:link xlink:href="qtextline.xml#xToCursor">xToCursor</db:link>(). A line can be moved with <db:link xlink:href="qtextline.xml#setPosition">setPosition</db:link>().</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CursorPosition-enum">
<db:title>enum QTextLine::CursorPosition</db:title>
<db:enumsynopsis>
<db:enumname>CursorPosition</db:enumname>
<db:enumitem>
<db:enumidentifier>CursorBetweenCharacters</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CursorOnCharacter</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextline.xml">QTextLine</db:link></db:emphasis>::CursorBetweenCharacters</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextline.xml">QTextLine</db:link></db:emphasis>::CursorOnCharacter</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Edge-enum">
<db:title>enum QTextLine::Edge</db:title>
<db:enumsynopsis>
<db:enumname>Edge</db:enumname>
<db:enumitem>
<db:enumidentifier>Leading</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Trailing</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextline.xml">QTextLine</db:link></db:emphasis>::Leading</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextline.xml">QTextLine</db:link></db:emphasis>::Trailing</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextLine">
<db:title>QTextLine::QTextLine()</db:title>
<db:constructorsynopsis>
<db:methodname>QTextLine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextLine()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an invalid line.</db:para>
</db:section>
<db:section xml:id="ascent">
<db:title>qreal QTextLine::ascent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>ascent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal ascent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the line's ascent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#descent">descent</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#height">height</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorToX">
<db:title>qreal QTextLine::cursorToX(int *<db:emphasis>cursorPos</db:emphasis>, QTextLine::Edge <db:emphasis>edge</db:emphasis> = Leading) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>cursorToX</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>cursorPos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextLine::Edge</db:type>
<db:parameter>edge</db:parameter>
<db:initializer>Leading</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal cursorToX(int *cursorPos, QTextLine::Edge edge) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the cursor position <db:code role="parameter">cursorPos</db:code> to the corresponding x position inside the line, taking account of the <db:code role="parameter">edge</db:code>.</db:para>
<db:para>If <db:code role="parameter">cursorPos</db:code> is not a valid cursor position, the nearest valid cursor position will be used instead, and <db:code role="parameter">cursorPos</db:code> will be modified to point to this valid cursor position.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#xToCursor">xToCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorToX-1">
<db:title>qreal QTextLine::cursorToX(int <db:emphasis>cursorPos</db:emphasis>, QTextLine::Edge <db:emphasis>edge</db:emphasis> = Leading) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>cursorToX</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>cursorPos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextLine::Edge</db:type>
<db:parameter>edge</db:parameter>
<db:initializer>Leading</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal cursorToX(int cursorPos, QTextLine::Edge edge) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="descent">
<db:title>qreal QTextLine::descent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>descent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal descent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the line's descent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#ascent">ascent</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#height">height</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="draw">
<db:title>void QTextLine::draw(QPainter *<db:emphasis>painter</db:emphasis>, const QPointF &amp;<db:emphasis>position</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>draw</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void draw(QPainter *painter, const QPointF &amp;position) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws a line on the given <db:code role="parameter">painter</db:code> at the specified <db:code role="parameter">position</db:code>.</db:para>
</db:section>
<db:section xml:id="glyphRuns">
<db:title>[since 6.5] QList&lt;QGlyphRun&gt; QTextLine::glyphRuns(int <db:emphasis>from</db:emphasis>, int <db:emphasis>length</db:emphasis>, QTextLayout::GlyphRunRetrievalFlags <db:emphasis>retrievalFlags</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGlyphRun&gt;</db:type>
<db:methodname>glyphRuns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextLayout::GlyphRunRetrievalFlags</db:type>
<db:parameter>retrievalFlags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGlyphRun&gt; glyphRuns(int from, int length, QTextLayout::GlyphRunRetrievalFlags retrievalFlags) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the glyph indexes and positions for all glyphs in this <db:link xlink:href="qtextline.xml">QTextLine</db:link> for characters in the range defined by <db:code role="parameter">from</db:code> and <db:code role="parameter">length</db:code>. The <db:code role="parameter">from</db:code> index is relative to the beginning of the text in the containing <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link>, and the range must be within the range of <db:link xlink:href="qtextline.xml">QTextLine</db:link> as given by functions <db:link xlink:href="qtextline.xml#textStart">textStart</db:link>() and <db:link xlink:href="qtextline.xml#textLength">textLength</db:link>().</db:para>
<db:para>The <db:code role="parameter">retrievalFlags</db:code> specifies which properties of the <db:link xlink:href="qglyphrun.xml">QGlyphRun</db:link> will be retrieved from the layout. To minimize allocations and memory consumption, this should be set to include only the properties that you need to access later.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is negative, it will default to <db:link xlink:href="qtextline.xml#textStart">textStart</db:link>(), and if <db:code role="parameter">length</db:code> is negative it will default to the return value of <db:link xlink:href="qtextline.xml#textLength">textLength</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#glyphRuns">QTextLayout::glyphRuns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="glyphRuns-1">
<db:title>QList&lt;QGlyphRun&gt; QTextLine::glyphRuns(int <db:emphasis>from</db:emphasis> = -1, int <db:emphasis>length</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGlyphRun&gt;</db:type>
<db:methodname>glyphRuns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>length</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGlyphRun&gt; glyphRuns(int from, int length) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the glyph indexes and positions for all glyphs in this <db:link xlink:href="qtextline.xml">QTextLine</db:link> for characters in the range defined by <db:code role="parameter">from</db:code> and <db:code role="parameter">length</db:code>. The <db:code role="parameter">from</db:code> index is relative to the beginning of the text in the containing <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link>, and the range must be within the range of <db:link xlink:href="qtextline.xml">QTextLine</db:link> as given by functions <db:link xlink:href="qtextline.xml#textStart">textStart</db:link>() and <db:link xlink:href="qtextline.xml#textLength">textLength</db:link>().</db:para>
<db:para>If <db:code role="parameter">from</db:code> is negative, it will default to <db:link xlink:href="qtextline.xml#textStart">textStart</db:link>(), and if <db:code role="parameter">length</db:code> is negative it will default to the return value of <db:link xlink:href="qtextline.xml#textLength">textLength</db:link>().</db:para>
<db:note>
<db:para>This is equivalent to calling <db:link xlink:href="qtextline.xml#glyphRuns">glyphRuns</db:link>(from, length, QTextLayout::GlyphRunRetrievalFlag::GlyphIndexes | QTextLayout::GlyphRunRetrievalFlag::GlyphPositions).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml#glyphRuns">QTextLayout::glyphRuns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="height">
<db:title>qreal QTextLine::height() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>height</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal height() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the line's height. This is equal to <db:link xlink:href="qtextline.xml#ascent">ascent</db:link>() + <db:link xlink:href="qtextline.xml#descent">descent</db:link>() if leading is not included. If leading is included, this equals to <db:link xlink:href="qtextline.xml#ascent">ascent</db:link>() + <db:link xlink:href="qtextline.xml#descent">descent</db:link>() + <db:link xlink:href="qtextline.xml#leading">leading</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#ascent">ascent</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#descent">descent</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#leading">leading</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#setLeadingIncluded">setLeadingIncluded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalAdvance">
<db:title>qreal QTextLine::horizontalAdvance() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>horizontalAdvance</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal horizontalAdvance() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal advance of the text. The advance of the text is the distance from its position to the next position at which text would naturally be drawn.</db:para>
<db:para>By adding the advance to the position of the text line and using this as the position of a second text line, you will be able to position the two lines side-by-side without gaps in-between.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QTextLine::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this text line is valid; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="leading">
<db:title>qreal QTextLine::leading() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>leading</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal leading() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the line's leading.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#ascent">ascent</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#descent">descent</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#height">height</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="leadingIncluded">
<db:title>bool QTextLine::leadingIncluded() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>leadingIncluded</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool leadingIncluded() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if positive leading is included into the line's height; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>By default, leading is not included.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#setLeadingIncluded">setLeadingIncluded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineNumber">
<db:title>int QTextLine::lineNumber() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>lineNumber</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int lineNumber() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the line in the text engine.</db:para>
</db:section>
<db:section xml:id="naturalTextRect">
<db:title>QRectF QTextLine::naturalTextRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>naturalTextRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF naturalTextRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the rectangle covered by the line.</db:para>
</db:section>
<db:section xml:id="naturalTextWidth">
<db:title>qreal QTextLine::naturalTextWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>naturalTextWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal naturalTextWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of the line that is occupied by text. This is always &lt;= to <db:link xlink:href="qtextline.xml#width">width</db:link>(), and is the minimum width that could be used by layout() without changing the line break position.</db:para>
</db:section>
<db:section xml:id="position">
<db:title>QPointF QTextLine::position() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>position</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF position() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the line's position relative to the text layout's position.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#setPosition">setPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rect">
<db:title>QRectF QTextLine::rect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>rect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF rect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the line's bounding rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#textLength">textLength</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#width">width</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLeadingIncluded">
<db:title>void QTextLine::setLeadingIncluded(bool <db:emphasis>included</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLeadingIncluded</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>included</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLeadingIncluded(bool included)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Includes positive leading into the line's height if <db:code role="parameter">included</db:code> is true; otherwise does not include leading.</db:para>
<db:para>By default, leading is not included.</db:para>
<db:para>Note that negative leading is ignored, it must be handled in the code using the text lines by letting the lines overlap.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#leadingIncluded">leadingIncluded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLineWidth">
<db:title>void QTextLine::setLineWidth(qreal <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLineWidth</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLineWidth(qreal width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Lays out the line with the given <db:code role="parameter">width</db:code>. The line is filled from its starting position with as many characters as will fit into the line. In case the text cannot be split at the end of the line, it will be filled with additional characters to the next whitespace or end of the text.</db:para>
</db:section>
<db:section xml:id="setNumColumns">
<db:title>void QTextLine::setNumColumns(int <db:emphasis>numColumns</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNumColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>numColumns</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNumColumns(int numColumns)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Lays out the line. The line is filled from its starting position with as many characters as are specified by <db:code role="parameter">numColumns</db:code>. In case the text cannot be split until <db:code role="parameter">numColumns</db:code> characters, the line will be filled with as many characters to the next whitespace or end of the text.</db:para>
</db:section>
<db:section xml:id="setNumColumns-1">
<db:title>void QTextLine::setNumColumns(int <db:emphasis>numColumns</db:emphasis>, qreal <db:emphasis>alignmentWidth</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNumColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>numColumns</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>alignmentWidth</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNumColumns(int numColumns, qreal alignmentWidth)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Lays out the line. The line is filled from its starting position with as many characters as are specified by <db:code role="parameter">numColumns</db:code>. In case the text cannot be split until <db:code role="parameter">numColumns</db:code> characters, the line will be filled with as many characters to the next whitespace or end of the text. The provided <db:code role="parameter">alignmentWidth</db:code> is used as reference width for alignment.</db:para>
</db:section>
<db:section xml:id="setPosition">
<db:title>void QTextLine::setPosition(const QPointF &amp;<db:emphasis>pos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPosition</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPosition(const QPointF &amp;pos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the line to position <db:code role="parameter">pos</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#position">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textLength">
<db:title>int QTextLine::textLength() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>textLength</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int textLength() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the length of the text in the line.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#naturalTextWidth">naturalTextWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textStart">
<db:title>int QTextLine::textStart() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>textStart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int textStart() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the start of the line from the beginning of the string passed to the <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link>.</db:para>
</db:section>
<db:section xml:id="width">
<db:title>qreal QTextLine::width() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>width</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal width() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the line's width as specified by the layout() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#naturalTextWidth">naturalTextWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#textLength">textLength</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#rect">rect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="x">
<db:title>qreal QTextLine::x() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>x</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal x() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the line's x position.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#rect">rect</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#textLength">textLength</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#width">width</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="xToCursor">
<db:title>int QTextLine::xToCursor(qreal <db:emphasis>x</db:emphasis>, QTextLine::CursorPosition <db:emphasis>cpos</db:emphasis> = CursorBetweenCharacters) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>xToCursor</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextLine::CursorPosition</db:type>
<db:parameter>cpos</db:parameter>
<db:initializer>CursorBetweenCharacters</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int xToCursor(qreal x, QTextLine::CursorPosition cpos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the x-coordinate <db:code role="parameter">x</db:code>, to the nearest matching cursor position, depending on the cursor position type, <db:code role="parameter">cpos</db:code>. Note that result cursor position includes possible preedit area text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#cursorToX">cursorToX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y">
<db:title>qreal QTextLine::y() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>y</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal y() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the line's y position.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextline.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#rect">rect</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#textLength">textLength</db:link>()</db:member>
<db:member><db:link xlink:href="qtextline.xml#width">width</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
