<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDomNodeList Class</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdomnodelist.xml">QDomNodeList</db:link> class is a list of <db:link xlink:href="qdomnode.xml">QDomNode</db:link> objects.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDomNodeList</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Xml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Xml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDomNodeList is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Lists can be obtained by <db:link xlink:href="qdomdocument.xml#elementsByTagName">QDomDocument::elementsByTagName</db:link>() and <db:link xlink:href="qdomnode.xml#childNodes">QDomNode::childNodes</db:link>(). The Document Object Model (DOM) requires these lists to be &quot;live&quot;: whenever you change the underlying document, the contents of the list will get updated.</db:para>
<db:para>You can get a particular node from the list with <db:link xlink:href="qdomnodelist.xml#item">item</db:link>(). The number of items in the list is returned by <db:link xlink:href="qdomnodelist.xml#length">length</db:link>().</db:para>
<db:para>For further information about the Document Object Model see <db:link xlink:href="http://www.w3.org/TR/REC-DOM-Level-1/">Level 1</db:link> and <db:link xlink:href="http://www.w3.org/TR/DOM-Level-2-Core/">Level 2 Core</db:link>. For a more general introduction of the DOM implementation see the <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnode.xml#childNodes">QDomNode::childNodes</db:link>()</db:member>
<db:member><db:link xlink:href="qdomdocument.xml#elementsByTagName">QDomDocument::elementsByTagName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="const_iterator-typedef">
<db:title>[alias, since 6.9] QDomNodeList::const_iterator</db:title>
<db:bridgehead renderas="sect2" xml:id="const_reverse_iterator-typedef">[alias, since 6.9] QDomNodeList::const_reverse_iterator</db:bridgehead>
<db:para>Typedefs for an opaque class that implements a bidirectional iterator over a <db:link xlink:href="qdomnodelist.xml">QDomNodeList</db:link>.</db:para>
<db:note>
<db:para><db:link xlink:href="qdomnodelist.xml">QDomNodeList</db:link> does not support modifying nodes in-place, so there is no mutable iterator.</db:para>
</db:note>
<db:para>This typedef was introduced in Qt 6.9.</db:para>
</db:section>
<db:section xml:id="const_pointer-typedef">
<db:title>[alias, since 6.9] QDomNodeList::const_pointer</db:title>
<db:bridgehead renderas="sect2" xml:id="const_reference-typedef">[alias, since 6.9] QDomNodeList::const_reference</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="difference_type-typedef">[alias, since 6.9] QDomNodeList::difference_type</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="pointer-typedef">[alias, since 6.9] QDomNodeList::pointer</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="reference-typedef">[alias, since 6.9] QDomNodeList::reference</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="value_type-typedef">[alias, since 6.9] QDomNodeList::value_type</db:bridgehead>
<db:para>Provided for STL-compatibility.</db:para>
<db:note>
<db:para><db:link xlink:href="qdomnodelist.xml">QDomNodeList</db:link> does not support modifying nodes in-place, so reference and <db:link xlink:href="qdomnodelist.xml#const_reference-typedef">const_reference</db:link> are the same type, as are pointer and <db:link xlink:href="qdomnodelist.xml#const_pointer-typedef">const_pointer</db:link>.</db:para>
</db:note>
<db:para>This typedef was introduced in Qt 6.9.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="begin">
<db:title>[noexcept, since 6.9] QDomNodeList::const_iterator QDomNodeList::begin() const</db:title>
<db:bridgehead renderas="sect2" xml:id="cbegin">[noexcept, since 6.9] QDomNodeList::const_iterator QDomNodeList::cbegin() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="cend">[noexcept, since 6.9] QDomNodeList::const_iterator QDomNodeList::cend() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="constBegin">[noexcept, since 6.9] QDomNodeList::const_iterator QDomNodeList::constBegin() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="constEnd">[noexcept, since 6.9] QDomNodeList::const_iterator QDomNodeList::constEnd() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="end">[noexcept, since 6.9] QDomNodeList::const_iterator QDomNodeList::end() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="crbegin">[noexcept, since 6.9] QDomNodeList::const_reverse_iterator QDomNodeList::crbegin() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="crend">[noexcept, since 6.9] QDomNodeList::const_reverse_iterator QDomNodeList::crend() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="rbegin">[noexcept, since 6.9] QDomNodeList::const_reverse_iterator QDomNodeList::rbegin() const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="rend">[noexcept, since 6.9] QDomNodeList::const_reverse_iterator QDomNodeList::rend() const</db:bridgehead>
<db:para>Returns a <db:link xlink:href="qdomnodelist.xml#const_iterator-typedef">const_iterator</db:link> or <db:link xlink:href="qdomnodelist.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link>, respectively, pointing to the first or one past the last item in the list.</db:para>
<db:note>
<db:para><db:link xlink:href="qdomnodelist.xml">QDomNodeList</db:link> does not support modifying nodes in-place, so there is no mutable iterator.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.9.</db:para>
</db:section>
<db:section xml:id="QDomNodeList">
<db:title>QDomNodeList::QDomNodeList()</db:title>
<db:para>Creates an empty node list.</db:para>
</db:section>
<db:section xml:id="QDomNodeList-1">
<db:title>QDomNodeList::QDomNodeList(const QDomNodeList &amp;<db:emphasis>nodeList</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">nodeList</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDomNodeList">
<db:title>[noexcept] QDomNodeList::~QDomNodeList()</db:title>
<db:para>Destroys the object and frees its resources.</db:para>
</db:section>
<db:section xml:id="at">
<db:title>QDomNode QDomNodeList::at(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>This function is provided for Qt API consistency. It is equivalent to <db:link xlink:href="qdomnodelist.xml#item">item</db:link>().</db:para>
<db:para>If <db:code role="parameter">index</db:code> is negative or if <db:code role="parameter">index</db:code> &gt;= <db:link xlink:href="qdomnodelist.xml#length">length</db:link>() then a null node is returned (i.e. a node for which <db:link xlink:href="qdomnode.xml#isNull">QDomNode::isNull</db:link>() returns true).</db:para>
</db:section>
<db:section xml:id="count">
<db:title>int QDomNodeList::count() const</db:title>
<db:para>This function is provided for Qt API consistency. It is equivalent to <db:link xlink:href="qdomnodelist.xml#length">length</db:link>().</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QDomNodeList::isEmpty() const</db:title>
<db:para>Returns <db:code>true</db:code> if the list contains no items; otherwise returns <db:code>false</db:code>. This function is provided for Qt API consistency.</db:para>
</db:section>
<db:section xml:id="item">
<db:title>QDomNode QDomNodeList::item(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the node at position <db:code role="parameter">index</db:code>.</db:para>
<db:para>If <db:code role="parameter">index</db:code> is negative or if <db:code role="parameter">index</db:code> &gt;= <db:link xlink:href="qdomnodelist.xml#length">length</db:link>() then a null node is returned (i.e. a node for which <db:link xlink:href="qdomnode.xml#isNull">QDomNode::isNull</db:link>() returns true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomnodelist.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>int QDomNodeList::length() const</db:title>
<db:para>Returns the number of nodes in the list.</db:para>
</db:section>
<db:section xml:id="size">
<db:title>int QDomNodeList::size() const</db:title>
<db:para>This function is provided for Qt API consistency. It is equivalent to <db:link xlink:href="qdomnodelist.xml#length">length</db:link>().</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDomNodeList &amp;QDomNodeList::operator=(const QDomNodeList &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this node list.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QDomNodeList &amp;<db:emphasis>lhs</db:emphasis>, const QDomNodeList &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the node lists <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are not equal; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool operator==(const QDomNodeList &amp;<db:emphasis>lhs</db:emphasis>, const QDomNodeList &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the node lists <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are equal; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
