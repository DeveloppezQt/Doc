<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QListWidgetItem Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link> class provides an item for use with the <db:link xlink:href="qlistwidget.xml">QListWidget</db:link> item view class.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QListWidgetItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QListWidgetItem is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link> represents a single item in a <db:link xlink:href="qlistwidget.xml">QListWidget</db:link>. Each item can hold several pieces of information, and will display them appropriately.</db:para>
<db:para>The item view convenience classes use a classic item-based interface rather than a pure model/view approach. For a more flexible list view widget, consider using the <db:link xlink:href="qlistview.xml">QListView</db:link> class with a standard model.</db:para>
<db:para>List items can be inserted automatically into a list, when they are constructed, by specifying the list widget:</db:para>
<db:programlisting language="cpp">    new QListWidgetItem(tr(&quot;Hazel&quot;), listWidget);
</db:programlisting>
<db:para>Alternatively, list items can also be created without a parent widget, and later inserted into a list using <db:link xlink:href="qlistwidget.xml#insertItem">QListWidget::insertItem</db:link>().</db:para>
<db:para>List items are typically used to display <db:link xlink:href="qlistwidgetitem.xml#text">text</db:link>() and an <db:link xlink:href="qlistwidgetitem.xml#icon">icon</db:link>(). These are set with the <db:link xlink:href="qlistwidgetitem.xml#setText">setText</db:link>() and <db:link xlink:href="qlistwidgetitem.xml#setIcon">setIcon</db:link>() functions. The appearance of the text can be customized with <db:link xlink:href="qlistwidgetitem.xml#setFont">setFont</db:link>(), <db:link xlink:href="qlistwidgetitem.xml#setForeground">setForeground</db:link>(), and <db:link xlink:href="qlistwidgetitem.xml#setBackground">setBackground</db:link>(). Text in list items can be aligned using the <db:link xlink:href="qlistwidgetitem.xml#setTextAlignment">setTextAlignment</db:link>() function. Tooltips, status tips and &quot;What's This?&quot; help can be added to list items with <db:link xlink:href="qlistwidgetitem.xml#setToolTip">setToolTip</db:link>(), <db:link xlink:href="qlistwidgetitem.xml#setStatusTip">setStatusTip</db:link>(), and <db:link xlink:href="qlistwidgetitem.xml#setWhatsThis">setWhatsThis</db:link>().</db:para>
<db:para>By default, items are enabled, selectable, checkable, and can be the source of drag and drop operations.</db:para>
<db:para>Each item's flags can be changed by calling <db:link xlink:href="qlistwidgetitem.xml#setFlags">setFlags</db:link>() with the appropriate value (see <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemFlags</db:link>). Checkable items can be checked, unchecked and partially checked with the <db:link xlink:href="qlistwidgetitem.xml#setCheckState">setCheckState</db:link>() function. The corresponding <db:link xlink:href="qlistwidgetitem.xml#checkState">checkState</db:link>() function indicates the item's current check state.</db:para>
<db:para>The <db:link xlink:href="qlistwidgetitem.xml#isHidden">isHidden</db:link>() function can be used to determine whether the item is hidden. To hide an item, use <db:link xlink:href="qlistwidgetitem.xml#setHidden">setHidden</db:link>().</db:para>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>When subclassing <db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link> to provide custom items, it is possible to define new types for them enabling them to be distinguished from standard items. For subclasses that require this feature, ensure that you call the base class constructor with a new type value equal to or greater than <db:link xlink:href="qlistwidgetitem.xml#ItemType-enum">UserType</db:link>, within <db:emphasis>your</db:emphasis> constructor.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidget.xml">QListWidget</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link></db:member>
<db:member><db:link xlink:href="qtablewidgetitem.xml">QTableWidgetItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ItemType-enum">
<db:title>enum QListWidgetItem::ItemType</db:title>
<db:para>This enum describes the types that are used to describe list widget items.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link></db:emphasis>::Type</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The default type for list widget items.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link></db:emphasis>::UserType</db:code></db:para>
</db:td>
<db:td><db:code>1000</db:code></db:td>
<db:td>
<db:para>The minimum value for custom types. Values below UserType are reserved by Qt.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>You can define new user types in <db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link> subclasses to ensure that custom items are treated specially.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QListWidgetItem-1">
<db:title>[explicit] QListWidgetItem::QListWidgetItem(QListWidget *<db:emphasis>parent</db:emphasis> = 0, int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:para>Constructs an empty list widget item of the specified <db:code role="parameter">type</db:code> with the given <db:code role="parameter">parent</db:code>. If <db:code role="parameter">parent</db:code> is not specified, the item will need to be inserted into a list widget with <db:link xlink:href="qlistwidget.xml#insertItem">QListWidget::insertItem</db:link>().</db:para>
<db:para>This constructor inserts the item into the model of the parent that is passed to the constructor. If the model is sorted then the behavior of the insert is undetermined since the model will call the <db:code>'&lt;'</db:code> operator method on the item which, at this point, is not yet constructed. To avoid the undetermined behavior, we recommend not to specify the parent and use <db:link xlink:href="qlistwidget.xml#insertItem">QListWidget::insertItem</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QListWidgetItem-2">
<db:title>[explicit] QListWidgetItem::QListWidgetItem(const QString &amp;<db:emphasis>text</db:emphasis>, QListWidget *<db:emphasis>parent</db:emphasis> = 0, int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:para>Constructs an empty list widget item of the specified <db:code role="parameter">type</db:code> with the given <db:code role="parameter">text</db:code> and <db:code role="parameter">parent</db:code>. If the parent is not specified, the item will need to be inserted into a list widget with <db:link xlink:href="qlistwidget.xml#insertItem">QListWidget::insertItem</db:link>().</db:para>
<db:para>This constructor inserts the item into the model of the parent that is passed to the constructor. If the model is sorted then the behavior of the insert is undetermined since the model will call the <db:code>'&lt;'</db:code> operator method on the item which, at this point, is not yet constructed. To avoid the undetermined behavior, we recommend not to specify the parent and use <db:link xlink:href="qlistwidget.xml#insertItem">QListWidget::insertItem</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QListWidgetItem-3">
<db:title>[explicit] QListWidgetItem::QListWidgetItem(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, QListWidget *<db:emphasis>parent</db:emphasis> = 0, int <db:emphasis>type</db:emphasis> = Type)</db:title>
<db:para>Constructs an empty list widget item of the specified <db:code role="parameter">type</db:code> with the given <db:code role="parameter">icon</db:code>, <db:code role="parameter">text</db:code> and <db:code role="parameter">parent</db:code>. If the parent is not specified, the item will need to be inserted into a list widget with <db:link xlink:href="qlistwidget.xml#insertItem">QListWidget::insertItem</db:link>().</db:para>
<db:para>This constructor inserts the item into the model of the parent that is passed to the constructor. If the model is sorted then the behavior of the insert is undetermined since the model will call the <db:code>'&lt;'</db:code> operator method on the item which, at this point, is not yet constructed. To avoid the undetermined behavior, we recommend not to specify the parent and use <db:link xlink:href="qlistwidget.xml#insertItem">QListWidget::insertItem</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QListWidgetItem">
<db:title>[since 4.1] QListWidgetItem::QListWidgetItem(const QListWidgetItem &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>. Note that <db:link xlink:href="qlistwidgetitem.xml#type">type</db:link>() and <db:link xlink:href="qlistwidgetitem.xml#listWidget">listWidget</db:link>() are not copied.</db:para>
<db:para>This function is useful when reimplementing <db:link xlink:href="qlistwidgetitem.xml#clone">clone</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QListWidgetItem">
<db:title>[virtual noexcept] QListWidgetItem::~QListWidgetItem()</db:title>
<db:para>Destroys the list item.</db:para>
</db:section>
<db:section xml:id="background">
<db:title>[since 4.2] QBrush QListWidgetItem::background() const</db:title>
<db:para>Returns the brush used to display the list item's background.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setBackground">setBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#foreground">foreground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkState">
<db:title>Qt::CheckState QListWidgetItem::checkState() const</db:title>
<db:para>Returns the checked state of the list item (see <db:link xlink:href="qt.xml#CheckState-enum">Qt::CheckState</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setCheckState">setCheckState</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clone">
<db:title>[virtual] QListWidgetItem *QListWidgetItem::clone() const</db:title>
<db:para>Creates an exact copy of the item.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[virtual] QVariant QListWidgetItem::data(int <db:emphasis>role</db:emphasis>) const</db:title>
<db:para>Returns the item's data for a given <db:code role="parameter">role</db:code>. Reimplement this function if you need extra roles or special behavior for certain roles.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>Qt::ItemFlags QListWidgetItem::flags() const</db:title>
<db:para>Returns the item flags for this item (see <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemFlags</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setFlags">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font">
<db:title>QFont QListWidgetItem::font() const</db:title>
<db:para>Returns the font used to display this list item's text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setFont">setFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="foreground">
<db:title>[since 4.2] QBrush QListWidgetItem::foreground() const</db:title>
<db:para>Returns the brush used to display the list item's foreground (e.g. text).</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setForeground">setForeground</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#background">background</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="icon">
<db:title>QIcon QListWidgetItem::icon() const</db:title>
<db:para>Returns the list item's icon.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setIcon">setIcon</db:link>()</db:member>
<db:member>iconSize</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isHidden">
<db:title>[since 4.2] bool QListWidgetItem::isHidden() const</db:title>
<db:para>Returns true if the item is hidden; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setHidden">setHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSelected">
<db:title>[since 4.2] bool QListWidgetItem::isSelected() const</db:title>
<db:para>Returns true if the item is selected; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setSelected">setSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="listWidget">
<db:title>QListWidget *QListWidgetItem::listWidget() const</db:title>
<db:para>Returns the list widget containing the item.</db:para>
</db:section>
<db:section xml:id="read">
<db:title>[virtual] void QListWidgetItem::read(QDataStream &amp;<db:emphasis>in</db:emphasis>)</db:title>
<db:para>Reads the item from stream <db:code role="parameter">in</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#write">write</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBackground">
<db:title>[since 4.2] void QListWidgetItem::setBackground(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:para>Sets the background brush of the list item to the given <db:code role="parameter">brush</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#background">background</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#setForeground">setForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCheckState">
<db:title>void QListWidgetItem::setCheckState(Qt::CheckState <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Sets the check state of the list item to <db:code role="parameter">state</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#checkState">checkState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>[virtual] void QListWidgetItem::setData(int <db:emphasis>role</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the data for a given <db:code role="parameter">role</db:code> to the given <db:code role="parameter">value</db:code>. Reimplement this function if you need extra roles or special behavior for certain roles.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlags">
<db:title>void QListWidgetItem::setFlags(Qt::ItemFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Sets the item flags for the list item to <db:code role="parameter">flags</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#flags">flags</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFont">
<db:title>void QListWidgetItem::setFont(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>Sets the font used when painting the item to the given <db:code role="parameter">font</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#font">font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setForeground">
<db:title>[since 4.2] void QListWidgetItem::setForeground(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:para>Sets the foreground brush of the list item to the given <db:code role="parameter">brush</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#foreground">foreground</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#setBackground">setBackground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHidden">
<db:title>[since 4.2] void QListWidgetItem::setHidden(bool <db:emphasis>hide</db:emphasis>)</db:title>
<db:para>Hides the item if <db:code role="parameter">hide</db:code> is true; otherwise shows the item.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#isHidden">isHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIcon">
<db:title>void QListWidgetItem::setIcon(const QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:para>Sets the icon for the list item to the given <db:code role="parameter">icon</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#icon">icon</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#text">text</db:link>()</db:member>
<db:member>iconSize</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelected">
<db:title>[since 4.2] void QListWidgetItem::setSelected(bool <db:emphasis>select</db:emphasis>)</db:title>
<db:para>Sets the selected state of the item to <db:code role="parameter">select</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#isSelected">isSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSizeHint">
<db:title>[since 4.1] void QListWidgetItem::setSizeHint(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the size hint for the list item to be <db:code role="parameter">size</db:code>. If no size hint is set, the item delegate will compute the size hint based on the item data.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#sizeHint">sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStatusTip">
<db:title>void QListWidgetItem::setStatusTip(const QString &amp;<db:emphasis>statusTip</db:emphasis>)</db:title>
<db:para>Sets the status tip for the list item to the text specified by <db:code role="parameter">statusTip</db:code>. <db:link xlink:href="qlistwidget.xml">QListWidget</db:link> mouseTracking needs to be enabled for this feature to work.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#statusTip">statusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#setToolTip">setToolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#setWhatsThis">setWhatsThis</db:link>()</db:member>
<db:member><db:link xlink:href="">QWidget::setMouseTracking()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setText">
<db:title>void QListWidgetItem::setText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the text for the list widget item's to the given <db:code role="parameter">text</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#text">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextAlignment">
<db:title>void QListWidgetItem::setTextAlignment(int <db:emphasis>alignment</db:emphasis>)</db:title>
<db:para>Sets the list item's text alignment to <db:code role="parameter">alignment</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#textAlignment">textAlignment</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setToolTip">
<db:title>void QListWidgetItem::setToolTip(const QString &amp;<db:emphasis>toolTip</db:emphasis>)</db:title>
<db:para>Sets the tooltip for the list item to the text specified by <db:code role="parameter">toolTip</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#toolTip">toolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#setStatusTip">setStatusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#setWhatsThis">setWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWhatsThis">
<db:title>void QListWidgetItem::setWhatsThis(const QString &amp;<db:emphasis>whatsThis</db:emphasis>)</db:title>
<db:para>Sets the &quot;What's This?&quot; help for the list item to the text specified by <db:code role="parameter">whatsThis</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#whatsThis">whatsThis</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#setStatusTip">setStatusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#setToolTip">setToolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[since 4.1] QSize QListWidgetItem::sizeHint() const</db:title>
<db:para>Returns the size hint set for the list item.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setSizeHint">setSizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="statusTip">
<db:title>QString QListWidgetItem::statusTip() const</db:title>
<db:para>Returns the list item's status tip.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setStatusTip">setStatusTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text">
<db:title>QString QListWidgetItem::text() const</db:title>
<db:para>Returns the list item's text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setText">setText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textAlignment">
<db:title>int QListWidgetItem::textAlignment() const</db:title>
<db:para>Returns the text alignment for the list item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setTextAlignment">setTextAlignment</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toolTip">
<db:title>QString QListWidgetItem::toolTip() const</db:title>
<db:para>Returns the list item's tooltip.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setToolTip">setToolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#statusTip">statusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#whatsThis">whatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>int QListWidgetItem::type() const</db:title>
<db:para>Returns the type passed to the <db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="whatsThis">
<db:title>QString QListWidgetItem::whatsThis() const</db:title>
<db:para>Returns the list item's &quot;What's This?&quot; help text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setWhatsThis">setWhatsThis</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#statusTip">statusTip</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#toolTip">toolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="write">
<db:title>[virtual] void QListWidgetItem::write(QDataStream &amp;<db:emphasis>out</db:emphasis>) const</db:title>
<db:para>Writes the item to stream <db:code role="parameter">out</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#read">read</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[virtual] bool QListWidgetItem::operator&lt;(const QListWidgetItem &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this item's text is less then <db:code role="parameter">other</db:code> item's text; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QListWidgetItem &amp;QListWidgetItem::operator=(const QListWidgetItem &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code>'s data and flags to this item. Note that <db:link xlink:href="qlistwidgetitem.xml#type">type</db:link>() and <db:link xlink:href="qlistwidgetitem.xml#listWidget">listWidget</db:link>() are not copied.</db:para>
<db:para>This function is useful when reimplementing <db:link xlink:href="qlistwidgetitem.xml#clone">clone</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qlistwidgetitem.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QListWidgetItem &amp;<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Writes the list widget item <db:code role="parameter">item</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:para>This operator uses <db:link xlink:href="qlistwidgetitem.xml#write">QListWidgetItem::write</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QListWidgetItem &amp;<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Reads a list widget item from stream <db:code role="parameter">in</db:code> into <db:code role="parameter">item</db:code>.</db:para>
<db:para>This operator uses <db:link xlink:href="qlistwidgetitem.xml#read">QListWidgetItem::read</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QListWidgetItem</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qlistwidgetitem.xml">QListWidgetItem</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="backgroundColor">
<db:title>[deprecated] QColor QListWidgetItem::backgroundColor() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This function is deprecated. Use <db:link xlink:href="qlistwidgetitem.xml#background">background</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setBackgroundColor">setBackgroundColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBackgroundColor">
<db:title>[virtual, deprecated] void QListWidgetItem::setBackgroundColor(const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This function is deprecated. Use <db:link xlink:href="qlistwidgetitem.xml#setBackground">setBackground</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#backgroundColor">backgroundColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextColor">
<db:title>[deprecated] void QListWidgetItem::setTextColor(const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This function is deprecated. Use <db:link xlink:href="qlistwidgetitem.xml#setForeground">setForeground</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#textColor">textColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textColor">
<db:title>[deprecated] QColor QListWidgetItem::textColor() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the color used to display the list item's text.</db:para>
<db:para>This function is deprecated. Use <db:link xlink:href="qlistwidgetitem.xml#foreground">foreground</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistwidgetitem.xml#setTextColor">setTextColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
