<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Wayland Compositor Examples - QWindow Compositor</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qwindow.xml">QWindow</db:link> Compositor is an example that demonstrates how to write a Wayland compositor in C++.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Wayland module
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;window.h&quot;

#include &lt;QMouseEvent&gt;
#include &lt;QOpenGLWindow&gt;
#include &lt;QOpenGLTexture&gt;
#include &lt;QOpenGLFunctions&gt;
#include &lt;QMatrix4x4&gt;

#include &quot;compositor.h&quot;
#include &lt;QtWaylandCompositor/qwaylandseat.h&gt;

Window::Window()
    : m_backgroundTexture(0)
    , m_compositor(0)
    , m_grabState(NoGrab)
    , m_dragIconView(0)
{
}

void Window::setCompositor(Compositor *comp) {
    m_compositor = comp;
    connect(m_compositor, &amp;Compositor::startMove, this, &amp;Window::startMove);
    connect(m_compositor, &amp;Compositor::startResize, this, &amp;Window::startResize);
    connect(m_compositor, &amp;Compositor::dragStarted, this, &amp;Window::startDrag);
}

void Window::initializeGL()
{
    QImage backgroundImage = QImage(QLatin1String(&quot;:/background.jpg&quot;)).rgbSwapped();
    backgroundImage.invertPixels();
    m_backgroundTexture = new QOpenGLTexture(backgroundImage, QOpenGLTexture::DontGenerateMipMaps);
    m_backgroundTexture-&gt;setMinificationFilter(QOpenGLTexture::Nearest);
    m_backgroundImageSize = backgroundImage.size();
    m_textureBlitter.create();
}

void Window::drawBackground()
{
    for (int y = 0; y &lt; height(); y += m_backgroundImageSize.height()) {
        for (int x = 0; x &lt; width(); x += m_backgroundImageSize.width()) {
            QMatrix4x4 targetTransform = QOpenGLTextureBlitter::targetTransform(QRect(QPoint(x,y), m_backgroundImageSize), QRect(QPoint(0,0), size()));
            m_textureBlitter.blit(m_backgroundTexture-&gt;textureId(),
                              targetTransform,
                              QOpenGLTextureBlitter::OriginTopLeft);
        }
    }
}

QPointF Window::getAnchorPosition(const QPointF &amp;position, int resizeEdge, const QSize &amp;windowSize)
{
    float y = position.y();
    if (resizeEdge &amp; QWaylandXdgSurfaceV5::ResizeEdge::TopEdge)
        y += windowSize.height();

    float x = position.x();
    if (resizeEdge &amp; QWaylandXdgSurfaceV5::ResizeEdge::LeftEdge)
        x += windowSize.width();

    return QPointF(x, y);
}

QPointF Window::getAnchoredPosition(const QPointF &amp;anchorPosition, int resizeEdge, const QSize &amp;windowSize)
{
    return anchorPosition - getAnchorPosition(QPointF(), resizeEdge, windowSize);
}

void Window::paintGL()
{
    m_compositor-&gt;startRender();
    QOpenGLFunctions *functions = context()-&gt;functions();
    functions-&gt;glClearColor(1.f, .6f, .0f, 0.5f);
    functions-&gt;glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    m_textureBlitter.bind();
    drawBackground();

    functions-&gt;glEnable(GL_BLEND);
    functions-&gt;glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    GLenum currentTarget = GL_TEXTURE_2D;
    Q_FOREACH (View *view, m_compositor-&gt;views()) {
        if (view-&gt;isCursor())
            continue;
        auto texture = view-&gt;getTexture();
        if (!texture)
            continue;
        if (texture-&gt;target() != currentTarget) {
            currentTarget = texture-&gt;target();
            m_textureBlitter.bind(currentTarget);
        }
        QWaylandSurface *surface = view-&gt;surface();
        if (surface &amp;&amp; surface-&gt;hasContent()) {
            QSize s = surface-&gt;size();
            if (!s.isEmpty()) {
                if (m_mouseView == view &amp;&amp; m_grabState == ResizeGrab &amp;&amp; m_resizeAnchored)
                    view-&gt;setPosition(getAnchoredPosition(m_resizeAnchorPosition, m_resizeEdge, s));
                QPointF pos = view-&gt;position() + view-&gt;parentPosition();
                QRectF surfaceGeometry(pos, s);
                QOpenGLTextureBlitter::Origin surfaceOrigin =
                    view-&gt;currentBuffer().origin() == QWaylandSurface::OriginTopLeft
                    ? QOpenGLTextureBlitter::OriginTopLeft
                    : QOpenGLTextureBlitter::OriginBottomLeft;
                QMatrix4x4 targetTransform = QOpenGLTextureBlitter::targetTransform(surfaceGeometry, QRect(QPoint(), size()));
                m_textureBlitter.blit(texture-&gt;textureId(), targetTransform, surfaceOrigin);
            }
        }
    }
    functions-&gt;glDisable(GL_BLEND);

    m_textureBlitter.release();
    m_compositor-&gt;endRender();
}

View *Window::viewAt(const QPointF &amp;point)
{
    View *ret = 0;
    Q_FOREACH (View *view, m_compositor-&gt;views()) {
        if (view == m_dragIconView)
            continue;
        QPointF topLeft = view-&gt;position();
        QWaylandSurface *surface = view-&gt;surface();
        QRectF geo(topLeft, surface-&gt;size());
        if (geo.contains(point))
            ret = view;
    }
    return ret;
}

void Window::startMove()
{
    m_grabState = MoveGrab;
}

void Window::startResize(int edge, bool anchored)
{
    m_initialSize = m_mouseView-&gt;windowSize();
    m_grabState = ResizeGrab;
    m_resizeEdge = edge;
    m_resizeAnchored = anchored;
    m_resizeAnchorPosition = getAnchorPosition(m_mouseView-&gt;position(), edge, m_mouseView-&gt;surface()-&gt;size());
}

void Window::startDrag(View *dragIcon)
{
    m_grabState = DragGrab;
    m_dragIconView = dragIcon;
    m_compositor-&gt;raise(dragIcon);
}

void Window::mousePressEvent(QMouseEvent *e)
{
    if (mouseGrab())
        return;
    if (m_mouseView.isNull()) {
        m_mouseView = viewAt(e-&gt;localPos());
        if (!m_mouseView) {
            m_compositor-&gt;closePopups();
            return;
        }
        if (e-&gt;modifiers() == Qt::AltModifier || e-&gt;modifiers() == Qt::MetaModifier)
            m_grabState = MoveGrab; //start move
        else
            m_compositor-&gt;raise(m_mouseView);
        m_initialMousePos = e-&gt;localPos();
        m_mouseOffset = e-&gt;localPos() - m_mouseView-&gt;position();

        QMouseEvent moveEvent(QEvent::MouseMove, e-&gt;localPos(), e-&gt;globalPos(), Qt::NoButton, Qt::NoButton, e-&gt;modifiers());
        sendMouseEvent(&amp;moveEvent, m_mouseView);
    }
    sendMouseEvent(e, m_mouseView);
}

void Window::mouseReleaseEvent(QMouseEvent *e)
{
    if (!mouseGrab())
        sendMouseEvent(e, m_mouseView);
    if (e-&gt;buttons() == Qt::NoButton) {
        if (m_grabState == DragGrab) {
            View *view = viewAt(e-&gt;localPos());
            m_compositor-&gt;handleDrag(view, e);
        }
        m_mouseView = 0;
        m_grabState = NoGrab;
    }
}

void Window::mouseMoveEvent(QMouseEvent *e)
{
    switch (m_grabState) {
    case NoGrab: {
        View *view = m_mouseView ? m_mouseView.data() : viewAt(e-&gt;localPos());
        sendMouseEvent(e, view);
        if (!view)
            setCursor(Qt::ArrowCursor);
    }
        break;
    case MoveGrab: {
        m_mouseView-&gt;setPosition(e-&gt;localPos() - m_mouseOffset);
        update();
    }
        break;
    case ResizeGrab: {
        QPoint delta = (e-&gt;localPos() - m_initialMousePos).toPoint();
        m_compositor-&gt;handleResize(m_mouseView, m_initialSize, delta, m_resizeEdge);
    }
        break;
    case DragGrab: {
        View *view = viewAt(e-&gt;localPos());
        m_compositor-&gt;handleDrag(view, e);
        if (m_dragIconView) {
            m_dragIconView-&gt;setPosition(e-&gt;localPos() + m_dragIconView-&gt;offset());
            update();
        }
    }
        break;
    }
}

void Window::sendMouseEvent(QMouseEvent *e, View *target)
{
    QPointF mappedPos = e-&gt;localPos();
    if (target)
        mappedPos -= target-&gt;position();
    QMouseEvent viewEvent(e-&gt;type(), mappedPos, e-&gt;localPos(), e-&gt;button(), e-&gt;buttons(), e-&gt;modifiers());
    m_compositor-&gt;handleMouseEvent(target, &amp;viewEvent);
}

void Window::keyPressEvent(QKeyEvent *e)
{
    m_compositor-&gt;defaultSeat()-&gt;sendKeyPressEvent(e-&gt;nativeScanCode());
}

void Window::keyReleaseEvent(QKeyEvent *e)
{
    m_compositor-&gt;defaultSeat()-&gt;sendKeyReleaseEvent(e-&gt;nativeScanCode());
}

</db:programlisting>
</db:article>
