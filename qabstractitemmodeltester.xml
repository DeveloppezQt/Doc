<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractItemModelTester Class</db:title>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link> class helps testing <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> subclasses.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractItemModelTester</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Test)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Test)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += testlib</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link> class is a utility class to test item models.</db:para>
<db:para>When implementing an item model (that is, a concrete <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> subclass) one must abide to a very strict set of rules that ensure consistency for users of the model (views, proxy models, and so on).</db:para>
<db:para>For instance, for a given index, a model's reimplementation of <db:link xlink:href="qabstractitemmodel.xml#hasChildren">hasChildren</db:link>() must be consistent with the values returned by <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>().</db:para>
<db:para><db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link> helps catching the most common errors in custom item model classes. By performing a series of tests, it will try to check that the model status is consistent at all times. The tests will be repeated automatically every time the model is modified.</db:para>
<db:para><db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link> employs non-destructive tests, which typically consist in reading data and metadata out of a given item model. <db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link> will also attempt illegal modifications of the model. In models which are properly implemented, such attempts should be rejected, and no data should be changed as a consequence.</db:para>
<db:section xml:id="usage">
<db:title>Usage</db:title>
<db:para>Using <db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link> is straightforward. In a <db:link xlink:href="qtest-overview.xml">test case</db:link> it is sufficient to create an instance, passing the model that needs to be tested to the constructor:</db:para>
<db:programlisting language="cpp">MyModel *modelToBeTested = ...;
auto tester = new QAbstractItemModelTester(modelToBeTested);
</db:programlisting>
<db:para><db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link> will report testing failures through the Qt Test logging mechanisms.</db:para>
<db:para>It is also possible to use <db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link> outside of a test case. For instance, it may be useful to test an item model used by an application without the need of building an explicit unit test for such a model (which might be challenging). In order to use <db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link> outside of a test case, pass one of the <db:code>QAbstractItemModelTester::FailureReportingMode</db:code> enumerators to its constructor, therefore specifying how failures should be logged.</db:para>
<db:para><db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link> may also report additional debugging information as logging messages under the <db:code>qt.modeltest</db:code> logging category. Such debug logging is disabled by default; refer to the <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> documentation to learn how to enable it.</db:para>
<db:note>
<db:para>While <db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link> is a valid help for development and testing of custom item models, it does not (and cannot) catch all possible problems in <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> subclasses. Notably, it will never perform meaningful destructive testing of a model, which must be therefore tested separately.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FailureReportingMode-enum">
<db:title>enum QAbstractItemModelTester::FailureReportingMode</db:title>
<db:enumsynopsis>
<db:enumname>FailureReportingMode</db:enumname>
<db:enumitem>
<db:enumidentifier>QtTest</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Warning</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Fatal</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enumeration specifies how <db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link> should report a failure when it tests a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> subclass.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link></db:emphasis>::<db:emphasis role="bold">FailureReportingMode</db:emphasis>::QtTest</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The failures will be reported as <db:link xlink:href="qttest-module.xml">QtTest</db:link> test failures.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link></db:emphasis>::<db:emphasis role="bold">FailureReportingMode</db:emphasis>::Warning</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The failures will be reported as warning messages in the <db:code>qt.modeltest</db:code> logging category.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemmodeltester.xml">QAbstractItemModelTester</db:link></db:emphasis>::<db:emphasis role="bold">FailureReportingMode</db:emphasis>::Fatal</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A failure will cause immediate and abnormal program termination. The reason for the failure will be reported using <db:code>qFatal()</db:code>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractItemModelTester">
<db:title>QAbstractItemModelTester::QAbstractItemModelTester(QAbstractItemModel *<db:emphasis>model</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractItemModelTester</db:methodname>
<db:methodparam>
<db:type>QAbstractItemModel *</db:type>
<db:parameter>model</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemModelTester(QAbstractItemModel *model, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a model tester instance, with the given <db:code role="parameter">parent</db:code>, that will test the model <db:code role="parameter">model</db:code>.</db:para>
</db:section>
<db:section xml:id="QAbstractItemModelTester-1">
<db:title>QAbstractItemModelTester::QAbstractItemModelTester(QAbstractItemModel *<db:emphasis>model</db:emphasis>, QAbstractItemModelTester::FailureReportingMode <db:emphasis>mode</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractItemModelTester</db:methodname>
<db:methodparam>
<db:type>QAbstractItemModel *</db:type>
<db:parameter>model</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractItemModelTester::FailureReportingMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemModelTester(QAbstractItemModel *model, QAbstractItemModelTester::FailureReportingMode mode, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a model tester instance, with the given <db:code role="parameter">parent</db:code>, that will test the model <db:code role="parameter">model</db:code>, using the specified <db:code role="parameter">mode</db:code> to report test failures.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodeltester.xml#FailureReportingMode-enum">QAbstractItemModelTester::FailureReportingMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="failureReportingMode">
<db:title>QAbstractItemModelTester::FailureReportingMode QAbstractItemModelTester::failureReportingMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractItemModelTester::FailureReportingMode</db:type>
<db:methodname>failureReportingMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemModelTester::FailureReportingMode failureReportingMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the mode that this instancing is using to report test failures.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodeltester.xml#FailureReportingMode-enum">QAbstractItemModelTester::FailureReportingMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="model">
<db:title>QAbstractItemModel *QAbstractItemModelTester::model() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractItemModel *</db:type>
<db:methodname>model</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemModel * model() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the model that this instance is testing.</db:para>
</db:section>
<db:section xml:id="setUseFetchMore">
<db:title>[since 6.4] void QAbstractItemModelTester::setUseFetchMore(bool <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUseFetchMore</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUseFetchMore(bool value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">value</db:code> is true, enables dynamic population of the tested model, which is the default. If <db:code role="parameter">value</db:code> is false, it disables it.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#fetchMore">QAbstractItemModel::fetchMore</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
