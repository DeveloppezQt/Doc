<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Shared Image Provider</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Adds an image provider which utilizes shared CPU memory.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:section xml:id="summary">
<db:title>Summary</db:title>
<db:para>This module provides functionality to save memory in use cases where several Qt Quick applications use the same local image files. It does this by placing the decoded <db:link xlink:href="qimage.xml">QImage</db:link> data in shared system memory, making it accessible to all the processes (see <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link>).</db:para>
<db:para>This module only shares CPU memory. It does not provide sharing of GPU memory or textures.</db:para>
</db:section>
<db:section xml:id="usage">
<db:title>Usage</db:title>
<db:para>To use this module, import it like this:</db:para>
<db:programlisting language="cpp">import Qt.labs.sharedimage
</db:programlisting>
<db:para>The sharing functionality is provided through a <db:link xlink:href="qquickimageprovider.xml">QQuickImageProvider</db:link>. Use the &quot;image:&quot; scheme for the URL source of the image, followed by the identifier <db:emphasis>shared</db:emphasis>, followed by the image file path. For example:</db:para>
<db:programlisting language="cpp">Image { source: &quot;image://shared/usr/share/wallpapers/mybackground.jpg&quot; }
</db:programlisting>
<db:para>This will look for the file <db:emphasis>/usr/share/wallpapers/mybackground.jpg</db:emphasis>. The first process that does this will read the image file using normal Qt image loading. The decoded image data will then be placed in shared memory, using the full file path as key. Later processes requesting the same image will discover that the data is already available in shared memory. They will then use that instead of loading the image file again.</db:para>
<db:para>The shared image data will be kept available until the last process has deleted its last reference to the shared image, at which point it is automatically released.</db:para>
<db:para>If system memory sharing is not available, the shared image provider falls back to normal, unshared image loading.</db:para>
<db:para>The file path must be absolute. To use a relative path, make it absolute using <db:emphasis>Qt.resolvedUrl()</db:emphasis> and replace the URL scheme. For example:</db:para>
<db:programlisting language="cpp">...
property string imagePrefix: Qt.resolvedUrl(&quot;../myimages/&quot;).replace(&quot;file://&quot;, &quot;image://shared/&quot;)
Image { source: imagePrefix + &quot;myimage.png&quot; }
</db:programlisting>
<db:para>The shared image module does not provide any directly usable QML types.</db:para>
</db:section>
</db:article>
