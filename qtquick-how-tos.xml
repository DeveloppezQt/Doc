<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick How-tos</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This page aims to provide an easily discoverable, useful reference that shows the simplest and best way of performing specific tasks in Qt Quick. Each solution provides QML and/or C++ code snippets where applicable, and every snippet is automatically tested by Qt to ensure they remain functional.</db:para>
<db:para>How do I:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-how-tos.xml#call-a-c-function-from-qml-when-a-button-is-clicked">Call a C++ function from QML when a Button is clicked</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-how-tos.xml#see-which-item-has-active-focus">See which item has active focus</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-how-tos.xml#create-a-time-picker-like-android-s-timepickerdialog">Create a time picker like Android's TimePickerDialog</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-how-tos.xml#use-a-c-enum-in-javascript">Use a C++ enum in JavaScript</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="call-a-c-function-from-qml-when-a-button-is-clicked">
<db:title>Call a C++ function from QML when a Button is clicked</db:title>
<db:para>Assuming that the C++ type should be globally available to the QML files in the application, the simplest way is to make it a QML singleton with <db:link xlink:href="qqmlengine.xml#QML_SINGLETON">QML_SINGLETON</db:link>. For example, in the header file, <db:code>backend.h</db:code>:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QObject&amp;gt;
#include &amp;lt;QQmlEngine&amp;gt;

class Backend : public QObject
{
    Q_OBJECT
    QML_ELEMENT
    QML_SINGLETON

public:
    Q_INVOKABLE void doStuff();
};
</db:programlisting>
<db:para><db:code>backend.cpp</db:code>:</db:para>
<db:programlisting language="cpp">#include &quot;backend.h&quot;

#include &amp;lt;QDebug&amp;gt;

void Backend::doStuff()
{
    qDebug() &amp;lt;&amp;lt; &quot;Did stuff!&quot;;
}
</db:programlisting>
<db:para>You can then call that function from any QML file:</db:para>
<db:programlisting language="qml">import QtQuick.Controls

import MyModule

ApplicationWindow {
    width: 400
    height: 400
    title: qsTr(&quot;C++ Button example&quot;)

    Button {
        text: qsTr(&quot;Click me&quot;)
        onClicked: Backend.doStuff()
    }
}
</db:programlisting>
<db:para>If the C++ type only needs to be available to a small set of QML files, consider using <db:link xlink:href="qqmlengine.xml#QML_ELEMENT">QML_ELEMENT</db:link>. For more ways of exposing C++ types to QML, see <db:link xlink:href="qtqml-cppintegration-overview.xml#choosing-the-correct-integration-method-between-c-and-qml">Choosing the Correct Integration Method Between C++ and QML</db:link>.</db:para>
<db:para>This example assumes that the <db:code>Backend</db:code> type is available in a QML module. With CMake, this is done via <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link>. For an example that demonstrates this in detail, see <db:link xlink:href="cmake-build-qml-application.xml">Building a QML application</db:link>.</db:para>
</db:section>
<db:section xml:id="see-which-item-has-active-focus">
<db:title>See which item has active focus</db:title>
<db:para>Write a <db:link xlink:href="qtqml-syntax-signals.xml#property-change-signal-handlers">property change signal handler</db:link> for the window's <db:link xlink:href="qml-qtquick-window.xml#activeFocusItem-attached-prop">activeFocusItem</db:link> property:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls

ApplicationWindow {
    width: 400
    height: 400
    visible: true
    title: qsTr(&quot;Active focus debugging example&quot;)

    onActiveFocusItemChanged: print(&quot;activeFocusItem: &quot; + activeFocusItem)

    Row {
        TextField {
            objectName: &quot;textField1&quot;
        }
        TextField {
            objectName: &quot;textField2&quot;
        }
    }
}
</db:programlisting>
<db:para>This will print the item which currently has active focus to the console. To ensure that the output is useful, give each item a descriptive <db:link xlink:href="qml-qtqml-qtobject.xml#objectName-prop">objectName</db:link>.</db:para>
</db:section>
<db:section xml:id="create-a-time-picker-like-android-s-timepickerdialog">
<db:title>Create a time picker like Android's TimePickerDialog</db:title>
<db:para>We've prepared an example that consists of a few <db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/tests/auto/quick/doc/how-tos/how-to-qml/time-picker/TimeComponentLabel.qml?h=6.5">QML files</db:link> which demonstrate how to do this. They can be used in your application in the following manner:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Layouts
import QtQuick.Controls.Material

ApplicationWindow {
    id: window
    width: 600
    height: 600
    visible: true
    title: qsTr(&quot;Time Picker Example&quot;)

    Material.theme: darkThemeSwitch.checked ? Material.Dark : Material.Light

    // Shows the selected time and opens the dialog.
    TimeComponentLabel {
        id: openDialogLabel
        width: parent.width - 80
        anchors.centerIn: parent
        font.pixelSize: Qt.application.font.pixelSize * 8
        renderTypeQuality: Text.VeryHighRenderTypeQuality
        interactive: !timePickerDialog.opened

        text: Qt.formatTime(new Date(1970, 1, 1, timePickerDialog.hours, timePickerDialog.minutes), &quot;hh:mm&quot;)

        onTapped: timePickerDialog.openWithMode(TimePicker.Mode.Hours)
    }

    ColumnLayout {
        // We always want the openDialogLabel to be centered in the window, not us.
        // For that reason, we use anchors rather than putting the root items into a ColumnLayout.
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: openDialogLabel.bottom
        anchors.topMargin: 24
        spacing: 12

        Switch {
            id: is24HourSwitch
            text: qsTr(&quot;24 Hour&quot;)
            checked: timePickerDialog.is24Hour
        }
        Switch {
            id: darkThemeSwitch
            text: qsTr(&quot;Dark&quot;)
        }
    }

    TimePickerDialog {
        id: timePickerDialog
        anchors.centerIn: parent
        is24Hour: is24HourSwitch.checked

        onTimeAccepted: print(&quot;A time was chosen - do something here!&quot;)
    }
}
</db:programlisting>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:figure>
<db:title>TimePickerDialog in its light theme.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/how-to-time-picker-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
<db:td>
<db:figure>
<db:title>TimePickerDialog in its dark theme.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/how-to-time-picker-dark.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="use-a-c-enum-in-javascript">
<db:title>Use a C++ enum in JavaScript</db:title>
<db:para>To expose a C++ enum to JavaScript (that is, <db:link xlink:href="qjsengine.xml">QJSEngine</db:link>, not <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> or <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link>), use <db:link xlink:href="qjsengine.xml#newQMetaObject-1">QJSEngine::newQMetaObject</db:link>():</db:para>
<db:programlisting language="cpp">    QJSEngine engine;
    engine.installExtensions(QJSEngine::AllExtensions);

    QJSValue backendJsMetaObject = engine.newQMetaObject(&amp;amp;Backend::staticMetaObject);
    engine.globalObject().setProperty(&quot;Backend&quot;, backendJsMetaObject);

    Backend backend(&amp;amp;engine);
    const bool loaded = backend.load();
</db:programlisting>
<db:para>The enum can then be used from JavaScript:</db:para>
<db:programlisting language="cpp">export function backendStatusUpdate(backendStatus) {
    if (backendStatus === Backend.Error) {
        console.warn(&quot;Error!&quot;)
        return
    }

    console.log(&quot;Backend loaded successfully&quot;)
}
</db:programlisting>
<db:para>When using <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> or <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link>, there are easier options; see <db:link xlink:href="qtqml-cppintegration-overview.xml#choosing-the-correct-integration-method-between-c-and-qml">Choosing the Correct Integration Method Between C++ and QML</db:link> for more information.</db:para>
<db:para><db:code>backend.h</db:code>:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QObject&amp;gt;
#include &amp;lt;QJSEngine&amp;gt;

class Backend : public QObject
{
    Q_OBJECT

public:
    Backend(QJSEngine *engine);

    enum Status {
        Unknown,
        Error,
        Loading,
        Loaded
    };

    Q_ENUM(Status)

    bool load();

private:
    QJSEngine *mEngine = nullptr;
};
</db:programlisting>
<db:para><db:code>backend.cpp</db:code>:</db:para>
<db:programlisting language="cpp">#include &quot;backend.h&quot;

Backend::Backend(QJSEngine *engine) :
    mEngine(engine)
{
}

bool Backend::load()
{
    // Do some loading here...

    const QJSValue module = mEngine-&amp;gt;importModule(&quot;:/script.mjs&quot;);
    if (module.isError()) {
        qWarning() &amp;lt;&amp;lt; &quot;Error loading script.mjs:&quot; &amp;lt;&amp;lt; module.toString();
        return false;
    }

    const QJSValue function = module.property(&quot;backendStatusUpdate&quot;);
    if (!function.isCallable()) {
        qWarning() &amp;lt;&amp;lt; &quot;backendStatusUpdate script function is not callable!&quot;;
        return false;
    }

    const QJSValue functionResult = function.call(QJSValueList() &amp;lt;&amp;lt; Loaded);
    if (functionResult.isError()) {
        qWarning() &amp;lt;&amp;lt; &quot;backendStatusUpdate script function had errors:&quot; &amp;lt;&amp;lt; functionResult.toString();
        return false;
    }

    return true;
}
</db:programlisting>
<db:para>For more information, see <db:link xlink:href="qjsengine.xml#qobject-integration">QObject Integration</db:link>.</db:para>
</db:section>
</db:article>
