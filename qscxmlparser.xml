<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScxmlParser Class</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Scxml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscxmlparser.xml">QScxmlParser</db:link> class is a parser for SCXML files.</db:para>
<db:para>This class was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScxmlParser</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += scxml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Parses an <db:link xlink:href="http://www.w3.org/TR/scxml/">SCXML</db:link> file. It can also dynamically instantiate a state machine for a successfully parsed SCXML file. If parsing failed and <db:link xlink:href="qscxmlparser.xml#instantiateStateMachine">instantiateStateMachine</db:link>() is called, the new state machine cannot start. All errors are returned by <db:link xlink:href="qscxmlstatemachine.xml#parseErrors">QScxmlStateMachine::parseErrors</db:link>().</db:para>
<db:para>To load an SCXML file, <db:link xlink:href="qscxmlstatemachine.xml#fromFile">QScxmlStateMachine::fromFile</db:link> or <db:link xlink:href="qscxmlstatemachine.xml#fromData">QScxmlStateMachine::fromData</db:link> should be used. Using <db:link xlink:href="qscxmlparser.xml">QScxmlParser</db:link> directly is only needed when the parser needs to use a custom <db:link xlink:href="qscxmlparser-loader.xml">QScxmlParser::Loader</db:link>.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="QtMode-enum">
<db:title>enum QScxmlParser::QtMode</db:title>
<db:para>This enum specifies if the document should be parsed in Qt mode. In Qt mode, event and state names have to be valid C++ identifiers. If that is the case some additional convenience methods are generated. If not, the parser will reject the document. Qt mode can be enabled in the document itself by adding an XML comment of the form:</db:para>
<db:para><db:code>&lt;!-- enable-qt-mode: yes --&gt;</db:code></db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscxmlparser.xml">QScxmlParser</db:link></db:emphasis>::QtModeDisabled</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Ignore the XML comment and do not generate additional methods.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscxmlparser.xml">QScxmlParser</db:link></db:emphasis>::QtModeEnabled</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Force parsing in Qt mode and try to generate the additional methods, no matter if the XML comment is present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscxmlparser.xml">QScxmlParser</db:link></db:emphasis>::QtModeFromInputFile</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Enable Qt mode only if the XML comment is present in the document.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScxmlParser">
<db:title>QScxmlParser::QScxmlParser(QXmlStreamReader *<db:emphasis>reader</db:emphasis>)</db:title>
<db:para>Creates a new SCXML parser for the specified <db:code role="parameter">reader</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QScxmlParser">
<db:title>[noexcept] QScxmlParser::~QScxmlParser()</db:title>
<db:para>Destroys the SCXML parser.</db:para>
</db:section>
<db:section xml:id="addError">
<db:title>void QScxmlParser::addError(const QString &amp;<db:emphasis>msg</db:emphasis>)</db:title>
<db:para>Adds the error message <db:code role="parameter">msg</db:code>.</db:para>
<db:para>The line and column numbers for the error message are the current line and column numbers of the <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link>.</db:para>
</db:section>
<db:section xml:id="errors">
<db:title>QVector&lt;QScxmlError&gt; QScxmlParser::errors() const</db:title>
<db:para>Returns the list of parse errors.</db:para>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QScxmlParser::fileName() const</db:title>
<db:para>Returns the file name associated with the current input.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlparser.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="instantiateDataModel">
<db:title>void QScxmlParser::instantiateDataModel(QScxmlStateMachine *<db:emphasis>stateMachine</db:emphasis>) const</db:title>
<db:para>Instantiates the data model as described in the SCXML file.</db:para>
<db:para>After instantiation, the <db:code role="parameter">stateMachine</db:code> takes ownership of the data model.</db:para>
</db:section>
<db:section xml:id="instantiateStateMachine">
<db:title>QScxmlStateMachine *QScxmlParser::instantiateStateMachine() const</db:title>
<db:para>Instantiates a new state machine from the parsed SCXML.</db:para>
<db:para>If parsing is successful, the returned state machine can be initialized and started. If parsing fails, <db:link xlink:href="qscxmlstatemachine.xml#parseErrors">QScxmlStateMachine::parseErrors</db:link>() can be used to retrieve a list of errors.</db:para>
<db:note>
<db:para>The instantiated state machine will not have an associated data model set.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlparser.xml#instantiateDataModel">QScxmlParser::instantiateDataModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loader">
<db:title>QScxmlParser::Loader *QScxmlParser::loader() const</db:title>
<db:para>Returns the loader that is currently used to resolve and load URIs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlparser.xml#setLoader">setLoader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parse">
<db:title>void QScxmlParser::parse()</db:title>
<db:para>Parses an SCXML file.</db:para>
</db:section>
<db:section xml:id="qtMode">
<db:title>QScxmlParser::QtMode QScxmlParser::qtMode() const</db:title>
<db:para>Returns how the parser decides if the SCXML document should conform to Qt mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlparser.xml#setQtMode">setQtMode</db:link>()</db:member>
<db:member><db:link xlink:href="qscxmlparser.xml#QtMode-enum">QtMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>void QScxmlParser::setFileName(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Sets the file name for the current input to <db:code role="parameter">fileName</db:code>.</db:para>
<db:para>The file name is used for error reporting and for resolving relative path URIs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlparser.xml#fileName">fileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLoader">
<db:title>void QScxmlParser::setLoader(QScxmlParser::Loader *<db:emphasis>newLoader</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">newLoader</db:code> to be used for resolving and loading URIs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlparser.xml#loader">loader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQtMode">
<db:title>void QScxmlParser::setQtMode(QScxmlParser::QtMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the <db:code>qtMode</db:code> to <db:code role="parameter">mode</db:code>. This property overrides the XML comment. You can force Qt mode to be used by setting it to <db:code>QtModeEnabled</db:code> or force any XML comments to be ignored and Qt mode to be used by setting it to <db:code>QtModeDisabled</db:code>. The default is <db:code>QtModeFromInputFile</db:code>, which will switch Qt mode on if the XML comment is present in the source file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlparser.xml#qtMode">qtMode</db:link>()</db:member>
<db:member><db:link xlink:href="qscxmlparser.xml#QtMode-enum">QtMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
