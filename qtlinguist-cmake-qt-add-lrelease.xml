<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_add_lrelease</db:title>
<db:productname>QtLinguist</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Linguist Manual</db:titleabbrev>
<db:abstract>
<db:para>Add targets to transform Qt Linguist .ts files into .qm files.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-add-lrelease"/>
<db:para>Add targets to transform Qt Linguist .ts files into .qm files.</db:para>
<db:para>The command is defined in the <db:code>LinguistTools</db:code> component of the <db:code>Qt6</db:code> package. Load the package with:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS LinguistTools)
</db:programlisting>
<db:para>This command was introduced in Qt 6.2.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_add_lrelease(target TS_FILES file1.ts [file2.ts ...]
                [NO_TARGET_DEPENDENCY]
                [NO_GLOBAL_TARGET]
                [QM_FILES_OUTPUT_VARIABLE variable-name]
                [OPTIONS ...])
</db:programlisting>
<db:para>If <db:link xlink:href="cmake-qt5-and-qt6-compatibility.xml#versionless-commands">versionless commands</db:link> are disabled, use <db:code>qt6_add_lrelease()</db:code> instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>Creates a target <db:code>${target}_lrelease</db:code> to transform <db:code>.ts</db:code> files into <db:code>.qm</db:code> files with <db:link xlink:href="linguist-manager.xml#lrelease">lrelease</db:link>.</db:para>
<db:para>The parameter <db:code>target</db:code> is an existing executable or library target that contains sources with translatable strings.</db:para>
<db:para>The <db:code>.ts</db:code> files must be specified with the argument <db:code>TS_FILES</db:code>.</db:para>
<db:para>This function is designed to be used in conjunction with <db:link xlink:href="qtlinguist-cmake-qt-add-lupdate.xml#qt6-add-lupdate">qt_add_lupdate</db:link>. See also the convenience wrapper <db:link xlink:href="qtlinguist-cmake-qt-add-translations.xml#qt6-add-translations">qt_add_translations</db:link>.</db:para>
</db:section>
<db:section xml:id="options">
<db:title>Options</db:title>
<db:para>You can set additional <db:code>OPTIONS</db:code> that should be passed when <db:code>lrelease</db:code> is invoked. You can find possible options in the <db:link xlink:href="linguist-manager.xml#lrelease">lrelease documentation</db:link>.</db:para>
<db:para>By default, the <db:code>.qm</db:code> files will be placed in the current build directory (<db:code>CMAKE_CURRENT_BINARY_DIR</db:code>). To change this, you can set <db:code>OUTPUT_LOCATION</db:code> as a property of the source <db:code>.ts</db:code> file.</db:para>
<db:para>For example, with the following code, the <db:code>.qm</db:code> files are generated in a <db:code>translations</db:code> directory below the current build directory.</db:para>
<db:programlisting language="cpp">set_source_files_properties(app_en.ts app_de.ts
    PROPERTIES OUTPUT_LOCATION &quot;${CMAKE_CURRENT_BINARY_DIR}/translations&quot;)
</db:programlisting>
</db:section>
<db:section xml:id="processing-generated-qm-files">
<db:title>Processing Generated .qm Files</db:title>
<db:para>To further process the generated <db:code>.qm</db:code> files, for example to create install rules, <db:code>qt_add_lrelease</db:code> can store the paths of the <db:code>.qm</db:code> files in a variable. Pass <db:code>QM_FILES_OUTPUT_VARIABLE &lt;variable-name&gt;</db:code> to the function for that.</db:para>
</db:section>
<db:section xml:id="build-by-default">
<db:title>Build by Default</db:title>
<db:para>By default, the command makes <db:code>${target}</db:code> depend on <db:code>${target}_lrelease</db:code>. This ensures that the <db:code>.qm</db:code> files are always up-to-date when <db:code>${target}</db:code> is built. This behavior can be turned off with <db:code>NO_TARGET_DEPENDENCY</db:code>. In this case, the user must build the <db:code>${target}_lrelease</db:code> target manually.</db:para>
</db:section>
<db:section xml:id="umbrella-target">
<db:title>Umbrella Target</db:title>
<db:para>In addition to the target <db:code>${target}_lrelease</db:code>, an umbrella target <db:code>release_translations</db:code> is created. This target will build all <db:code>${target}_lrelease</db:code> targets that were created with <db:code>qt_add_lrelease</db:code>.</db:para>
<db:para>Pass <db:code>NO_GLOBAL_TARGET</db:code> to <db:code>qt_add_lrelease</db:code> to prevent this behavior.</db:para>
<db:para>The name of this target can be overridden by setting the variable <db:code>QT_GLOBAL_LRELEASE_TARGET</db:code> before calling <db:code>qt_add_lrelease</db:code>.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>Add the targets <db:code>myapp_lrelease</db:code> and <db:code>update_translations</db:code> for updating the <db:code>.ts</db:code> file of an application <db:code>myapp</db:code>. Also, install the generated <db:code>.qm</db:code> files.</db:para>
<db:programlisting language="cpp">qt_add_lrelease(myapp
    TS_FILES myapp_de.ts
    QM_FILES_OUTPUT_VARIABLE qm_files)
install(FILES ${qm_files} DESTINATION &quot;translations&quot;)
</db:programlisting>
</db:section>
</db:article>
