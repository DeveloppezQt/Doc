<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Hello Speak Example</db:title>
<db:productname>QtSpeech</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Text-To-Speech library</db:titleabbrev>
<db:abstract>
<db:para>The Hello Speak example reads out a small piece of text.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;mainwindow.h&quot;
#include &amp;lt;QLoggingCategory&amp;gt;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent),
    m_speech(0)
{
    ui.setupUi(this);
    QLoggingCategory::setFilterRules(QStringLiteral(&quot;qt.speech.tts=true \n qt.speech.tts.*=true&quot;));

    // Populate engine selection list
    ui.engine-&amp;gt;addItem(&quot;Default&quot;, QString(&quot;default&quot;));
    foreach (QString engine, QTextToSpeech::availableEngines())
        ui.engine-&amp;gt;addItem(engine, engine);
    ui.engine-&amp;gt;setCurrentIndex(0);
    engineSelected(0);

    connect(ui.speakButton, &amp;amp;QPushButton::clicked, this, &amp;amp;MainWindow::speak);
    connect(ui.pitch, &amp;amp;QSlider::valueChanged, this, &amp;amp;MainWindow::setPitch);
    connect(ui.rate, &amp;amp;QSlider::valueChanged, this, &amp;amp;MainWindow::setRate);
    connect(ui.volume, &amp;amp;QSlider::valueChanged, this, &amp;amp;MainWindow::setVolume);
    connect(ui.engine, static_cast&amp;lt;void (QComboBox::*)(int)&amp;gt;(&amp;amp;QComboBox::currentIndexChanged), this, &amp;amp;MainWindow::engineSelected);
}

void MainWindow::speak()
{
    m_speech-&amp;gt;say(ui.plainTextEdit-&amp;gt;toPlainText());
}
void MainWindow::stop()
{
    m_speech-&amp;gt;stop();
}

void MainWindow::setRate(int rate)
{
    m_speech-&amp;gt;setRate(rate / 10.0);
}

void MainWindow::setPitch(int pitch)
{
    m_speech-&amp;gt;setPitch(pitch / 10.0);
}

void MainWindow::setVolume(int volume)
{
    m_speech-&amp;gt;setVolume(volume / 100.0);
}

void MainWindow::stateChanged(QTextToSpeech::State state)
{
    if (state == QTextToSpeech::Speaking) {
        ui.statusbar-&amp;gt;showMessage(&quot;Speech started...&quot;);
    } else if (state == QTextToSpeech::Ready)
        ui.statusbar-&amp;gt;showMessage(&quot;Speech stopped...&quot;, 2000);
    else if (state == QTextToSpeech::Paused)
        ui.statusbar-&amp;gt;showMessage(&quot;Speech paused...&quot;);
    else
        ui.statusbar-&amp;gt;showMessage(&quot;Speech error!&quot;);

    ui.pauseButton-&amp;gt;setEnabled(state == QTextToSpeech::Speaking);
    ui.resumeButton-&amp;gt;setEnabled(state == QTextToSpeech::Paused);
    ui.stopButton-&amp;gt;setEnabled(state == QTextToSpeech::Speaking || state == QTextToSpeech::Paused);
}

void MainWindow::engineSelected(int index)
{
    QString engineName = ui.engine-&amp;gt;itemData(index).toString();
    delete m_speech;
    if (engineName == &quot;default&quot;)
        m_speech = new QTextToSpeech(this);
    else
        m_speech = new QTextToSpeech(engineName, this);
    disconnect(ui.language, static_cast&amp;lt;void (QComboBox::*)(int)&amp;gt;(&amp;amp;QComboBox::currentIndexChanged), this, &amp;amp;MainWindow::languageSelected);
    ui.language-&amp;gt;clear();
    // Populate the languages combobox before connecting its signal.
    QVector&amp;lt;QLocale&amp;gt; locales = m_speech-&amp;gt;availableLocales();
    QLocale current = m_speech-&amp;gt;locale();
    foreach (const QLocale &amp;amp;locale, locales) {
        QString name(QString(&quot;%1 (%2)&quot;)
                     .arg(QLocale::languageToString(locale.language()))
                     .arg(QLocale::countryToString(locale.country())));
        QVariant localeVariant(locale);
        ui.language-&amp;gt;addItem(name, localeVariant);
        if (locale.name() == current.name())
            current = locale;
    }
    setRate(ui.rate-&amp;gt;value());
    setPitch(ui.pitch-&amp;gt;value());
    setVolume(ui.volume-&amp;gt;value());
    connect(ui.stopButton, &amp;amp;QPushButton::clicked, m_speech, &amp;amp;QTextToSpeech::stop);
    connect(ui.pauseButton, &amp;amp;QPushButton::clicked, m_speech, &amp;amp;QTextToSpeech::pause);
    connect(ui.resumeButton, &amp;amp;QPushButton::clicked, m_speech, &amp;amp;QTextToSpeech::resume);

    connect(m_speech, &amp;amp;QTextToSpeech::stateChanged, this, &amp;amp;MainWindow::stateChanged);
    connect(m_speech, &amp;amp;QTextToSpeech::localeChanged, this, &amp;amp;MainWindow::localeChanged);

    connect(ui.language, static_cast&amp;lt;void (QComboBox::*)(int)&amp;gt;(&amp;amp;QComboBox::currentIndexChanged), this, &amp;amp;MainWindow::languageSelected);
    localeChanged(current);
}

void MainWindow::languageSelected(int language)
{
    QLocale locale = ui.language-&amp;gt;itemData(language).toLocale();
    m_speech-&amp;gt;setLocale(locale);
}

void MainWindow::voiceSelected(int index)
{
    m_speech-&amp;gt;setVoice(m_voices.at(index));
}

void MainWindow::localeChanged(const QLocale &amp;amp;locale)
{
    QVariant localeVariant(locale);
    ui.language-&amp;gt;setCurrentIndex(ui.language-&amp;gt;findData(localeVariant));

    disconnect(ui.voice, static_cast&amp;lt;void (QComboBox::*)(int)&amp;gt;(&amp;amp;QComboBox::currentIndexChanged), this, &amp;amp;MainWindow::voiceSelected);
    ui.voice-&amp;gt;clear();

    m_voices = m_speech-&amp;gt;availableVoices();
    QVoice currentVoice = m_speech-&amp;gt;voice();
    foreach (const QVoice &amp;amp;voice, m_voices) {
        ui.voice-&amp;gt;addItem(QString(&quot;%1 - %2 - %3&quot;).arg(voice.name())
                          .arg(QVoice::genderName(voice.gender()))
                          .arg(QVoice::ageName(voice.age())));
        if (voice.name() == currentVoice.name())
            ui.voice-&amp;gt;setCurrentIndex(ui.voice-&amp;gt;count() - 1);
    }
    connect(ui.voice, static_cast&amp;lt;void (QComboBox::*)(int)&amp;gt;(&amp;amp;QComboBox::currentIndexChanged), this, &amp;amp;MainWindow::voiceSelected);
}

</db:programlisting>
</db:article>
