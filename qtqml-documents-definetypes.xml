<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Defining Object Types through QML Documents</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Description of how a QML document is a reusable type definition.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>One of the core features of QML is that it enables QML object types to be easily defined in a lightweight manner through QML documents to suit the needs of individual QML applications. The standard <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> module provides various types like <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>, <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> and <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> for building a QML application; beyond these, you can easily define your own QML types to be reused within your application. This ability to create your own types forms the building blocks of any QML application.</db:para>
<db:section xml:id="defining-an-object-type-with-a-qml-file">
<db:title>Defining an Object Type with a QML File</db:title>
<db:section xml:id="naming-custom-qml-object-types">
<db:title>Naming Custom QML Object Types</db:title>
<db:para>To create an object type, a QML document should be placed into a text file named as <db:emphasis>&lt;TypeName&gt;.qml</db:emphasis> where <db:emphasis>&lt;TypeName&gt;</db:emphasis> is the desired name of the type. The type name has the following requirements:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>It must be comprised of alphanumeric characters or underscores.</db:para>
</db:listitem>
<db:listitem>
<db:para>It must begin with an uppercase letter.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This document is then automatically recognized by the engine as a definition of a QML type. Additionally, a type defined in this manner is automatically made available to other QML files within the same local directory as the engine searches within the immediate directory when resolving QML type names.</db:para>
<db:note>
<db:para>The QML engine does not automatically search remote directories this way. You have to add a qmldir file if your documents are loaded over the network. See <db:link xlink:href="qtqml-syntax-directoryimports.xml">Importing QML Document Directories</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="custom-qml-type-definition">
<db:title>Custom QML Type Definition</db:title>
<db:para>For example, below is a document that declares a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> with a child <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>. The document has been saved to file named SquareButton.qml:</db:para>
<db:programlisting language="qml">// SquareButton.qml
import QtQuick 2.0

Rectangle {
    property int side: 100
    width: side; height: side
    color: &quot;red&quot;

    MouseArea {
        anchors.fill: parent
        onClicked: console.log(&quot;Button clicked!&quot;)
    }
}
</db:programlisting>
<db:para>Since the file is named SquareButton.qml, <db:emphasis role="bold">this can now be used as a type named SquareButton by any other QML file within the same directory</db:emphasis>. For example, if there was a myapplication.qml file in the same directory, it could refer to the SquareButton type:</db:para>
<db:programlisting language="qml">// myapplication.qml
import QtQuick 2.0

SquareButton {}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/documents-definetypes-simple.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This creates a 100 x 100 red <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> with an inner <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>, as defined in SquareButton.qml. When this myapplication.qml document is loaded by the engine, it loads the SquareButton.qml document as a component and instantiates it to create a SquareButton object.</db:para>
<db:para>The SquareButton type encapsulates the tree of QML objects declared in SquareButton.qml. When the QML engine instantiates a SquareButton object from this type, it is instantiating an object from the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> tree declared in SquareButton.qml.</db:para>
<db:note>
<db:para>the letter case of the file name is significant on some (notably UNIX) filesystems. It is recommended the file name case matches the case of the desired QML type name exactly - for example, Box.qml and not BoX.qml - regardless of the platform to which the QML type will be deployed.</db:para>
</db:note>
</db:section>
<db:section xml:id="inline-components">
<db:title>Inline Components</db:title>
<db:para>Sometimes, it can be inconvenient to create a new file for a type, for instance when reusing a small delegate in multiple views. If you don't actually need to expose the type, but only need to create an instance, <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> is an option. But if you want to declare properties with the component types, or if you want to use it in multiple files, Component is not an option. In that case, you can use <db:emphasis>inline components</db:emphasis>. Inline components declare a new component inside of a file. The syntax for that is</db:para>
<db:programlisting language="cpp">component &amp;lt;component name&amp;gt; : BaseType {
    // declare properties and bindings here
}
</db:programlisting>
<db:para>Inside the file which declares the inline component, the type can be referenced simply by its name.</db:para>
<db:programlisting language="qml">// Images.qml
import QtQuick

Item {
    component LabeledImage: Column {
        property alias source: image.source
        property alias caption: text.text

        Image {
            id: image
            width: 50
            height: 50
        }
        Text {
            id: text
            font.bold: true
        }
    }

    Row {
        LabeledImage {
            id: before
            source: &quot;before.png&quot;
            caption: &quot;Before&quot;
        }
        LabeledImage {
            id: after
            source: &quot;after.png&quot;
            caption: &quot;After&quot;
        }
    }
    property LabeledImage selectedImage: before
}
</db:programlisting>
<db:para>In other files, it has to be prefixed with the name of its containing component.</db:para>
<db:programlisting language="qml">// LabeledImageBox.qml
import QtQuick

Rectangle {
    property alias caption: image.caption
    property alias source: image.source
    border.width: 2
    border.color: &quot;black&quot;
    Images.LabeledImage {
        id: image
    }
}
</db:programlisting>
<db:note>
<db:para>Inline components don't share their scope with the component they are declared in. In the following example, when A.MyInlineComponent in file B.qml gets created, a ReferenceError will occur, as root does not exist as an id in B.qml. It is therefore advisable not to reference objects in an inline component which are not part of it.</db:para>
</db:note>
<db:programlisting language="qml">// A.qml
import QtQuick

Item {
    id: root
    property string message: &quot;From A&quot;
    component MyInlineComponent : Item {
        Component.onCompleted: console.log(root.message)
    }
}
// B.qml
import QtQuick

Item {
    A.MyInlineComponent {}
}
</db:programlisting>
<db:note>
<db:para>Inline components cannot be nested.</db:para>
</db:note>
</db:section>
<db:section xml:id="importing-types-defined-outside-the-current-directory">
<db:title>Importing Types Defined Outside the Current Directory</db:title>
<db:para>If SquareButton.qml was not in the same directory as myapplication.qml, the SquareButton type would need to be specifically made available through an <db:emphasis>import</db:emphasis> statement in myapplication.qml. It could be imported from a relative path on the file system, or as an installed module; see <db:link xlink:href="qtqml-modules-topic.xml">module</db:link> for more details.</db:para>
</db:section>
</db:section>
<db:section xml:id="accessible-attributes-of-custom-types">
<db:title>Accessible Attributes of Custom Types</db:title>
<db:para>The <db:emphasis role="bold">root object</db:emphasis> definition in a .qml file <db:emphasis role="bold">defines the attributes that are available for a QML type</db:emphasis>. All properties, signals and methods that belong to this root object - whether they are custom declared, or come from the QML type of the root object - are externally accessible and can be read and modified for objects of this type.</db:para>
<db:para>For example, the root object type in the SquareButton.qml file above is <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>. This means any properties defined by the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type can be modified for a SquareButton object. The code below defines three SquareButton objects with customized values for some of the properties of the root <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> object of the SquareButton type:</db:para>
<db:programlisting language="qml">// application.qml
import QtQuick 2.0

Column {
    SquareButton { side: 50 }
    SquareButton { x: 50; color: &quot;blue&quot; }
    SquareButton { radius: 10 }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/documents-definetypes-attributes.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The attributes that are accessible to objects of the custom QML type include any <db:link xlink:href="qtqml-syntax-objectattributes.xml#defining-property-attributes">custom properties</db:link>, <db:link xlink:href="qtqml-syntax-objectattributes.xml#defining-method-attributes">methods</db:link> and <db:link xlink:href="qtqml-syntax-objectattributes.xml#defining-signal-attributes">signals</db:link> that have additionally been defined for an object. For example, suppose the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> in SquareButton.qml had been defined as follows, with additional properties, methods and signals:</db:para>
<db:programlisting language="qml">// SquareButton.qml
import QtQuick 2.0

Rectangle {
    id: root

    property bool pressed: mouseArea.pressed

    signal buttonClicked(real xPos, real yPos)

    function randomizeColor() {
        root.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1)
    }

    property int side: 100
    width: side; height: side
    color: &quot;red&quot;

    MouseArea {
        id: mouseArea
        anchors.fill: parent
        onClicked: (mouse)=&amp;gt; root.buttonClicked(mouse.x, mouse.y)
    }
}
</db:programlisting>
<db:para>Any SquareButton object could make use of the pressed property, buttonClicked signal and randomizeColor() method that have been added to the root <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>:</db:para>
<db:programlisting language="qml">// application.qml
import QtQuick 2.0

SquareButton {
    id: squareButton

    onButtonClicked: (xPos, yPos)=&amp;gt; {
        console.log(&quot;Clicked&quot;, xPos, yPos)
        randomizeColor()
    }

    Text { text: squareButton.pressed ? &quot;Down&quot; : &quot;Up&quot; }
}
</db:programlisting>
<db:para>Note that any of the id values defined in SquareButton.qml are not accessible to SquareButton objects, as id values are only accessible from within the component scope in which a component is declared. The SquareButton object definition above cannot refer to mouseArea in order to refer to the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> child, and if it had an id of root rather than squareButton, this would not conflict with the id of the same value for the root object defined in SquareButton.qml as the two would be declared within separate scopes.</db:para>
</db:section>
<db:section xml:id="pragmas">
<db:title>Pragmas</db:title>
<db:para>You can prepend global instructions to a QML document using the pragma keyword. The following pragmas are supported:</db:para>
<db:section xml:id="singleton">
<db:title>Singleton</db:title>
<db:para>pragma Singleton declares the component defined in the QML document as singleton. Singletons are created only once per QML engine. In order to use a QML-declared singleton you also have to register it with its module. See <db:link xlink:href="qt-target-qml-sources.xml">qt_target_qml_sources</db:link> for how to do this with CMake.</db:para>
</db:section>
<db:section xml:id="listpropertyassignbehavior">
<db:title>ListPropertyAssignBehavior</db:title>
<db:para>With this pragma you can define how assignments to list properties shall be handled in components defined in the QML document. By default, assigning to a list property appends to the list. You can explicitly request this behavior using the value Append. Alternatively, you can request the contents of list properties to always be replaced using Replace, or replaced if the property is not the default property using ReplaceIfNotDefault. For example:</db:para>
<db:programlisting language="qml">pragma ListPropertyAssignBehavior: ReplaceIfNotDefault
</db:programlisting>
<db:para>The same declaration can also be given for C++-defined types. See <db:link xlink:href="qqmllistproperty.xml#QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_APPEND">QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_APPEND</db:link>, <db:link xlink:href="qqmllistproperty.xml#QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE">QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE</db:link>, and <db:link xlink:href="qqmllistproperty.xml#QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE_IF_NOT_DEFAULT">QML_LIST_PROPERTY_ASSIGN_BEHAVIOR_REPLACE_IF_NOT_DEFAULT</db:link></db:para>
</db:section>
<db:section xml:id="componentbehavior">
<db:title>ComponentBehavior</db:title>
<db:para>With this pragma you can restrict components defined in this file to only create objects within their original context. This holds for inline components as well as Component elements explicitly or implicitly created as properties. If a component is bound to its context, you can safely use IDs from the rest of the file within the component. Otherwise, the engine and the QML tooling cannot know in advance what type, if any, such IDs will resolve to at run time.</db:para>
<db:para>In order to bind the components to their context specify the Bound argument:</db:para>
<db:programlisting language="qml">pragma ComponentBehavior: Bound
</db:programlisting>
<db:para>The default is Unbound. You can also specify it explicitly. In a future version of Qt the default will change to Bound.</db:para>
<db:para>Delegate components bound to their context don't receive their own private contexts on instantiation. This means that model data can only be passed via <db:link xlink:href="qtqml-syntax-objectattributes.xml#required-properties">required properties</db:link> in this case. Passing model data via context properties will not work. This concerns delegates to e.g. <db:link xlink:href="qml-qtqml-models-instantiator.xml">Instantiator</db:link>, <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link>, <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>, <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>, <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>, <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> and in general anything that uses <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> internally.</db:para>
<db:para>For example, the following will <db:emphasis>not</db:emphasis> work:</db:para>
<db:programlisting language="qml">pragma ComponentBehavior: Bound
import QtQuick

ListView {
    delegate: Rectangle {
        color: model.myColor
    }
}
</db:programlisting>
<db:para>The delegate property of <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> is a component. Therefore, a <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> is implicitly created around the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> here. That component is bound to its context. It doesn't receive the context property model provided by <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>. To make it work, you'd have to write it this way:</db:para>
<db:programlisting language="qml">pragma ComponentBehavior: Bound
import QtQuick

ListView {
    delegate: Rectangle {
        required property color myColor
        color: myColor
    }
}
</db:programlisting>
<db:para>You can nest components in a QML file. The pragma holds for all components in the file, no matter how deeply nested.</db:para>
</db:section>
<db:section xml:id="functionsignaturebehavior">
<db:title>FunctionSignatureBehavior</db:title>
<db:para>With this pragma you can change the way type annotations on functions are handled. By default the interpreter and JIT ignore type annotations, but the <db:link xlink:href="qtqml-qml-script-compiler.xml">QML script compiler</db:link> enforces them when compiling to C++.</db:para>
<db:para>Specifying Enforced as value makes sure the type annotations are always enforced. The resulting type coercions increase the overhead of calling typed JavaScript functions.</db:para>
<db:para>Specifying Ignored as value makes the <db:link xlink:href="qtqml-qml-script-compiler.xml">QML script compiler</db:link> ignore any JavaScript functions when compiling the document to C++. This means less code is compiled to C++ ahead of time, and more code has to be interpreted or JIT-compiled.</db:para>
</db:section>
<db:section xml:id="valuetypebehavior">
<db:title>ValueTypeBehavior</db:title>
<db:para>With this pragma you can change the way value types and sequences are handled.</db:para>
<db:para>Value types and sequences are generally treated as references. This means, if you retrieve a value type instance from a property into a local value, and then change the local value, the original property is also changed. Furthermore, if you write the original property explicitly, the local value is also updated. This behavior is rather unintuitive in many places, and you should not rely on it. The Copy and Reference values for the ValueTypeBehavior pragma are experimental options to change this behavior. You should not use them. Specifying Copy causes all value types to be treated as actual copies. Specifying Reference explicitly states the default behavior.</db:para>
<db:para>Rather than using Copy you should explicitly re-load references to value types and sequences any time they can have been affected by side effects. Side effects can happen whenever you call a function or imperatively set a property. <db:link xlink:href="qtquick-tool-qmllint.xml">qmllint</db:link> provides guidance on this. For example, in the following code the variable f is affected by side effects after writing width. This is because there may be a binding in a derived type or in a Binding element that updates font when width is changed.</db:para>
<db:programlisting language="qml">import QtQuick
Text {
    function a() : real {
        var f = font;
        width = f.pixelSize;
        return f.pointSize;
    }
}
</db:programlisting>
<db:para>In order to address this, you can avoid holding f across the write operation on width:</db:para>
<db:programlisting language="qml">import QtQuick
Text {
    function a() : real {
        var f = font;
        width = f.pixelSize;
        f = font;
        return f.pointSize;
    }
}
</db:programlisting>
<db:para>This, in turn can be shortened to:</db:para>
<db:programlisting language="qml">import QtQuick
Text {
    function a() : real {
        width = font.pixelSize;
        return font.pointSize;
    }
}
</db:programlisting>
<db:para>You might assume that re-retrieving the font property is costly, but actually the QML engine automatically refreshes value type references each time you read from them. So this is not more expensive than the first version, but a clearer way to express the same operations.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-javascript-hostenvironment.xml#type-annotations-and-assertions">Type annotations and assertions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
