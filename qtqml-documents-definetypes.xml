<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Defining Object Types through QML Documents</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Description of how a QML document is a reusable type definition.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>One of the core features of QML is that it enables QML object types to be easily defined in a lightweight manner through QML documents to suit the needs of individual QML applications. The standard <db:link xlink:href="">Qt Quick</db:link> module provides various types like Rectangle, Text and <db:link xlink:href="09-qdoc-commands-includingimages.xml#image">Image</db:link> for building a QML application; beyond these, you can easily define your own QML types to be reused within your application. This ability to create your own types forms the building blocks of any QML application.</db:para>
<db:section xml:id="defining-an-object-type-with-a-qml-file">
<db:title>Defining an Object Type with a QML File</db:title>
<db:para>To create an object type, a QML document should be placed into a text file named as <db:emphasis>&lt;TypeName&gt;.qml</db:emphasis> where <db:emphasis>&lt;TypeName&gt;</db:emphasis> is the desired name of the type, which must be comprised of alphanumeric characters or underscores and beginning with an uppercase letter. This document is then automatically recognized by the engine as a definition of a QML type. Additionally, a type defined in this manner is automatically made available to other QML files within the same directory as the engine searches within the immediate directory when resolving QML type names.</db:para>
<db:para>For example, below is a document that declares a Rectangle with a child MouseArea. The document has been saved to file named SquareButton.qml:</db:para>
<db:programlisting language="qml">// SquareButton.qml
import QtQuick 2.0

Rectangle {
    width: 100; height: 100
    color: &quot;red&quot;

    MouseArea {
        anchors.fill: parent
        onClicked: console.log(&quot;Button clicked!&quot;)
    }
}
</db:programlisting>
<db:para>Since the file is named SquareButton.qml, <db:emphasis role="bold">this can now be used as a type named SquareButton by any other QML file within the same directory</db:emphasis>. For example, if there was a myapplication.qml file in the same directory, it could refer to the SquareButton type:</db:para>
<db:programlisting language="qml">// myapplication.qml
import QtQuick 2.0

SquareButton {}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/documents-definetypes-simple.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This creates a 100 x 100 red Rectangle with an inner MouseArea, as defined in SquareButton.qml. When this myapplication.qml document is loaded by the engine, it loads the SquareButton.qml document as a component and instantiates it to create a SquareButton object.</db:para>
<db:para>The SquareButton type encapsulates the tree of QML objects declared in SquareButton.qml. When the QML engine instantiates a SquareButton object from this type, it is instantiating an object from the Rectangle tree declared in SquareButton.qml.</db:para>
<db:note>
<db:para>the letter case of the file name is significant on some (notably UNIX) filesystems. It is recommended the file name case matches the case of the desired QML type name exactly - for example, Box.qml and not BoX.qml - regardless of the platform to which the QML type will be deployed.</db:para>
</db:note>
<db:section xml:id="importing-types-defined-outside-the-current-directory">
<db:title>Importing Types Defined Outside the Current Directory</db:title>
<db:para>If SquareButton.qml was not in the same directory as myapplication.qml, the SquareButton type would need to be specifically made available through an <db:emphasis>import</db:emphasis> statement in myapplication.qml. It could be imported from a relative path on the file system, or as an installed module; see <db:link xlink:href="qtqml-modules-topic.xml">module</db:link> for more details.</db:para>
</db:section>
</db:section>
<db:section xml:id="accessible-attributes-of-custom-types">
<db:title>Accessible Attributes of Custom Types</db:title>
<db:para>The <db:emphasis role="bold">root object</db:emphasis> definition in a .qml file <db:emphasis role="bold">defines the attributes that are available for a QML type</db:emphasis>. All properties, signals and methods that belong to this root object - whether they are custom declared, or come from the QML type of the root object - are externally accessible and can be read and modified for objects of this type.</db:para>
<db:para>For example, the root object type in the SquareButton.qml file above is Rectangle. This means any properties defined by the Rectangle type can be modified for a SquareButton object. The code below defines three SquareButton objects with customized values for some of the properties of the root Rectangle object of the SquareButton type:</db:para>
<db:programlisting language="qml">// application.qml
import QtQuick 2.0

Column {
    SquareButton { width: 50; height: 50 }
    SquareButton { x: 50; color: &quot;blue&quot; }
    SquareButton { radius: 10 }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/documents-definetypes-attributes.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The attributes that are accessible to objects of the custom QML type include any <db:link xlink:href="qtqml-syntax-objectattributes.xml#defining-property-attributes">custom properties</db:link>, <db:link xlink:href="qtqml-syntax-objectattributes.xml#defining-method-attributes">methods</db:link> and <db:link xlink:href="qtqml-syntax-objectattributes.xml#defining-signal-attributes">signals</db:link> that have additionally been defined for an object. For example, suppose the Rectangle in SquareButton.qml had been defined as follows, with additional properties, methods and signals:</db:para>
<db:programlisting language="qml">// SquareButton.qml
import QtQuick 2.0

Rectangle {
    id: root

    property bool pressed: mouseArea.pressed

    signal buttonClicked(real xPos, real yPos)

    function randomizeColor() {
        root.color = Qt.rgba(Math.random(), Math.random(), Math.random(), 1)
    }

    width: 100; height: 100
    color: &quot;red&quot;

    MouseArea {
        id: mouseArea
        anchors.fill: parent
        onClicked: root.buttonClicked(mouse.x, mouse.y)
    }
}
</db:programlisting>
<db:para>Any SquareButton object could make use of the pressed property, buttonClicked signal and randomizeColor() method that have been added to the root Rectangle:</db:para>
<db:programlisting language="qml">// application.qml
import QtQuick 2.0

SquareButton {
    id: squareButton

    onButtonClicked: {
        console.log(&quot;Clicked&quot;, xPos, yPos)
        randomizeColor()
    }

    Text { text: squareButton.pressed ? &quot;Down&quot; : &quot;Up&quot; }
}
</db:programlisting>
<db:para>Note that any of the id values defined in SquareButton.qml are not accessible to SquareButton objects, as id values are only accessible from within the component scope in which a component is declared. The SquareButton object definition above cannot refer to mouseArea in order to refer to the MouseArea child, and if it had an id of root rather than squareButton, this would not conflict with the id of the same value for the root object defined in SquareButton.qml as the two would be declared within separate scopes.</db:para>
</db:section>
</db:article>
