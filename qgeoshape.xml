<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoShape Class</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeoshape.xml">QGeoShape</db:link> class defines a geographic area.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoShape</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += positioning</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgeocircle.xml" xlink:role="class">QGeoCircle</db:link> and <db:link xlink:href="qgeorectangle.xml" xlink:role="class">QGeoRectangle</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoShape is part of <db:simplelist><db:member>QtPositioning-positioning</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is the base class for classes which specify a geographic area.</db:para>
<db:para>For the sake of consistency, subclasses should describe the specific details of the associated areas in terms of <db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link> instances and distances in meters.</db:para>
<db:para>This class is a <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link> since Qt 5.5. It can be <db:link xlink:href="positioning-cpp-qml.xml#direct-c-value-integration-in-qtpositioning">directly used from C++ and QML</db:link>.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ShapeType-enum">
<db:title>enum QGeoShape::ShapeType</db:title>
<db:para>Describes the type of the shape.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoshape.xml">QGeoShape</db:link></db:emphasis>::UnknownType</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A shape of unknown type.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoshape.xml">QGeoShape</db:link></db:emphasis>::RectangleType</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A rectangular shape.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoshape.xml">QGeoShape</db:link></db:emphasis>::CircleType</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A circular shape.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="isEmpty-prop">
<db:title>[read-only, since 5.5] isEmpty : const bool</db:title>
<db:para>This property defines whether this geo shape is empty.</db:para>
<db:para>An empty geo shape is a region which has a geometrical area of 0.</db:para>
<db:para>While this property is introduced in Qt 5.5, the related accessor functions exist since the first version of this class.</db:para>
<db:para>This property was introduced in Qt 5.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qgeoshape.xml#isEmpty">isEmpty</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="isValid-prop">
<db:title>[read-only, since 5.5] isValid : const bool</db:title>
<db:para>This property holds the validity of the geo shape.</db:para>
<db:para>A geo shape is considered to be invalid if some of the data that is required to unambiguously describe the geo shape has not been set or has been set to an unsuitable value depending on the subclass of this object. The default constructed objects of this type are invalid.</db:para>
<db:para>While this property is introduced in Qt 5.5, the related accessor functions exist since the first version of this class.</db:para>
<db:para>This property was introduced in Qt 5.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qgeoshape.xml#isValid">isValid</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="type-prop">
<db:title>[read-only, since 5.5] type : const ShapeType</db:title>
<db:para>This property holds the type of this geo shape.</db:para>
<db:para>While this property is introduced in Qt 5.5, the related accessor functions exist since the first version of this class.</db:para>
<db:para>This property was introduced in Qt 5.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qgeoshape.xml#ShapeType-enum">QGeoShape::ShapeType</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qgeoshape.xml#type">type</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoShape">
<db:title>QGeoShape::QGeoShape()</db:title>
<db:para>Constructs a new invalid geo shape of <db:link xlink:href="qgeoshape.xml#ShapeType-enum">UnknownType</db:link>.</db:para>
</db:section>
<db:section xml:id="QGeoShape-1">
<db:title>QGeoShape::QGeoShape(const QGeoShape &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a new geo shape which is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoShape">
<db:title>[noexcept] QGeoShape::~QGeoShape()</db:title>
<db:para>Destroys this geo shape.</db:para>
</db:section>
<db:section xml:id="center">
<db:title>[since 5.5] QGeoCoordinate QGeoShape::center() const</db:title>
<db:para>Returns the coordinate located at the geometric center of the geo shape.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>bool QGeoShape::contains(const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>) const</db:title>
<db:para>Returns whether the coordinate <db:code role="parameter">coordinate</db:code> is contained within this geo shape.</db:para>
</db:section>
<db:section xml:id="extendShape">
<db:title>void QGeoShape::extendShape(const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:para>Extends the geo shape to also cover the coordinate <db:code role="parameter">coordinate</db:code></db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QGeoShape::isEmpty() const</db:title>
<db:para>Returns whether this geo shape is empty.</db:para>
<db:para>An empty geo shape is a region which has a geometrical area of 0.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qgeoshape.xml#isEmpty-prop">isEmpty</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QGeoShape::isValid() const</db:title>
<db:para>Returns whether this geo shape is valid.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qgeoshape.xml#isValid-prop">isValid</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="toString">
<db:title>[since 5.5] QString QGeoShape::toString() const</db:title>
<db:para>Returns a string representation of this geo shape.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>QGeoShape::ShapeType QGeoShape::type() const</db:title>
<db:para>Returns the type of this geo shape.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qgeoshape.xml#type-prop">type</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QGeoShape::operator!=(const QGeoShape &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if the <db:code role="parameter">other</db:code> geo shape is not equivalent to this geo shape, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGeoShape &amp;QGeoShape::operator=(const QGeoShape &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this geo shape and returns a reference to this geo shape.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QGeoShape::operator==(const QGeoShape &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if the <db:code role="parameter">other</db:code> geo shape is equivalent to this geo shape, otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
