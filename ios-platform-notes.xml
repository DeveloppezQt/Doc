<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Platform Notes - iOS</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This page contains information about building Qt applications for and running them on the iOS platform.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="deployment">
<db:title>Deployment</db:title>
<db:para>Developing, building, running, and debugging a Qt for iOS application can all be done with Qt Creator on macOS. The toolchain is provided by Apple's Xcode, and running qmake on a project targeted for iOS will also generate an Xcode project file (.xcodeproj), with initial application settings. As Qt Creator does not provide an interface for managing all of the settings specific to iOS platform, it is sometimes necessary to adjust them in Xcode directly. Checking that the application is configured correctly is especially important before submitting an application for publishing in Apple's App Store.</db:para>
<db:anchor xml:id="info-plist"/>
<db:section xml:id="information-property-list-files">
<db:title>Information Property List Files</db:title>
<db:para>Information property list file (Info.plist) on iOS and macOS is used for configuring an application bundle. These configuration settings include:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Application display name and identifier</db:para>
</db:listitem>
<db:listitem>
<db:para>Required device capabilities</db:para>
</db:listitem>
<db:listitem>
<db:para>Supported user interface orientations</db:para>
</db:listitem>
<db:listitem>
<db:para>Icons and launch images</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>See the documentation on <db:link xlink:href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html">Information Property List File</db:link> in iOS Developer Library for details.</db:para>
<db:para>When qmake is run, an Info.plist file is generated with appropriate default values.</db:para>
<db:para>It is advisable to replace the generated Info.plist with your own copy, to prevent it from being overwritten the next time qmake is run. You can define a custom information property list with <db:link xlink:href="qmake-variable-reference.xml#qmake-info-plist">QMAKE_INFO_PLIST</db:link> variable in your .pro file.</db:para>
<db:programlisting language="cpp" role="bad">ios {
    QMAKE_INFO_PLIST = ios/Info.plist
}
</db:programlisting>
</db:section>
<db:section xml:id="application-assets">
<db:title>Application Assets</db:title>
<db:para>For files that cannot be bundled into Qt resources, <db:link xlink:href="qmake-variable-reference.xml#qmake-bundle-data">QMAKE_BUNDLE_DATA</db:link> qmake variable provides a way to specify a set of files to be copied into the application bundle. For example:</db:para>
<db:programlisting language="cpp" role="bad">ios {
    fontFiles.files = $$files(fonts/*.ttf)
    fontFiles.path = fonts
    QMAKE_BUNDLE_DATA += fontFiles
}
</db:programlisting>
<db:para>For image resources, an alternative way is to make use of <db:link xlink:href="http://help.apple.com/xcode/mac/8.0/#/dev10510b1f7">asset catalogs</db:link> in Xcode, which can be added in a similar way:</db:para>
<db:programlisting language="cpp" role="bad">ios {
    QMAKE_ASSET_CATALOGS += ios/Assets.xcassets
}
</db:programlisting>
</db:section>
<db:section xml:id="icons">
<db:title>Icons</db:title>
<db:para>Icons need to be set in the Info.plist and copied to the application bundle. Xcode has special support for icons, but when using Qt, it is usually better to set them in the .pro file.</db:para>
<db:para>To support all resolutions and devices, several images should be created. A detailed list of what is required is available at <db:link xlink:href="https://developer.apple.com/library/content/qa/qa1686/_index.html">Icon files</db:link>. The filename is not important, but the actual pixel size is. Just a few icons are required. However, to support both iPhone and iPad, the following images are required:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>AppIcon29x29.png: 29 x 29</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon29x29@2x.png: 58 x 58</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon29x29@2x~ipad.png: 58 x 58</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon29x29~ipad.png: 29 x 29</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon40x40@2x.png: 80 x 80</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon40x40@2x~ipad.png: 80 x 80</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon40x40~ipad.png: 40 x 40</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon50x50@2x~ipad.png: 100 x 100</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon50x50~ipad.png: 50 x 50</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon57x57.png: 57 x 57</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon57x57@2x.png: 114 x 114</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon60x60@2x.png: 120 x 120</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon72x72@2x~ipad.png: 144 x 144</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon72x72~ipad.png: 72 x 72</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon76x76@2x~ipad.png: 152 x 152</db:para>
</db:listitem>
<db:listitem>
<db:para>AppIcon76x76~ipad.png: 76 x 76</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>These files should be copied to the application bundle by adding something like the following code snippet to the .pro file:</db:para>
<db:programlisting language="cpp" role="bad">ios {
    ios_icon.files = $$files($$PWD/ios/AppIcon*.png)
    QMAKE_BUNDLE_DATA += ios_icon
}
</db:programlisting>
<db:para>For the icons to be used, the filenames also have to be listed in the Info.plist. The best way is to list all icon files using the CFBundleIconFiles key. The iPad specific version can be given using the CFBundleIcons~ipad key, by adding something like the following code snippet to Info.plist:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;key&amp;gt;CFBundleIcons&amp;lt;/key&amp;gt;
&amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;CFBundlePrimaryIcon&amp;lt;/key&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;CFBundleIconFiles&amp;lt;/key&amp;gt;
        &amp;lt;array&amp;gt;
            &amp;lt;string&amp;gt;AppIcon29x29.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon29x29@2x.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon40x40@2x.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon57x57.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon57x57@2x.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon60x60@2x.png&amp;lt;/string&amp;gt;
        &amp;lt;/array&amp;gt;
    &amp;lt;/dict&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;key&amp;gt;CFBundleIcons~ipad&amp;lt;/key&amp;gt;
&amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;CFBundlePrimaryIcon&amp;lt;/key&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;CFBundleIconFiles&amp;lt;/key&amp;gt;
        &amp;lt;array&amp;gt;
            &amp;lt;string&amp;gt;AppIcon29x29.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon29x29@2x.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon40x40@2x.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon57x57.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon57x57@2x.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon60x60@2x.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon29x29~ipad.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon29x29@2x~ipad.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon40x40~ipad.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon40x40@2x~ipad.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon50x50~ipad.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon50x50@2x~ipad.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon72x72~ipad.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon72x72@2x~ipad.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon76x76~ipad.png&amp;lt;/string&amp;gt;
            &amp;lt;string&amp;gt;AppIcon76x76@2x~ipad.png&amp;lt;/string&amp;gt;
        &amp;lt;/array&amp;gt;
    &amp;lt;/dict&amp;gt;
&amp;lt;/dict&amp;gt;
</db:programlisting>
<db:para>This ensures that the appropriate files are copied to the right place and the correct icons are used as required by the Apple App Store. Ad-hoc distributions should also include the following filenames in the application bundle to visualize the application in iTunes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>iTunesArtwork 512x512</db:para>
</db:listitem>
<db:listitem>
<db:para>iTunesArtwork@2x 1024x1024</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="launch-images">
<db:title>Launch Images</db:title>
<db:para>Like icons, launch images consist of images that need to be copied to the application bundle and keys that have to be set in the Info.plist.</db:para>
<db:para>To support the iPhone 6, a launch file (an interface builder .xib file or a storyboard file) should be provided. For more information, see <db:link xlink:href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/launch-screen/">Launch Screen</db:link>. Assuming that you called the launch file Launch.xib, it can be added to the Info.plist as follows:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;key&amp;gt;UILaunchStoryboardName&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;Launch&amp;lt;/string&amp;gt;
</db:programlisting>
<db:para>It is possible to use launch images (PNG files), as described below, to support the iPhone 6, but it is not recommended. Qmake generates a default LaunchScreen.xib, so it is better to use another name for a custom launch screen to avoid clashes.</db:para>
<db:para>Starting with iOS 7, the launch images are defined using the UILaunchImages key. To support these devices, you need to prepare the following images:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>LaunchImage-iOS7-568h@2x.png: 640 x 1136</db:para>
</db:listitem>
<db:listitem>
<db:para>LaunchImage-iOS7-Landscape.png: 1024 x 768</db:para>
</db:listitem>
<db:listitem>
<db:para>LaunchImage-iOS7-Landscape@2x.png: 2048 x 1536</db:para>
</db:listitem>
<db:listitem>
<db:para>LaunchImage-iOS7-Portrait.png: 768 x 1024</db:para>
</db:listitem>
<db:listitem>
<db:para>LaunchImage-iOS7-Portrait@2x.png: 1536 x 2048</db:para>
</db:listitem>
<db:listitem>
<db:para>LaunchImage-iOS7@2x.png: 640 x 960</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The images can be added to the Info.plist as follows:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;key&amp;gt;UILaunchImages&amp;lt;/key&amp;gt;
&amp;lt;array&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageMinimumOSVersion&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;7.0&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageName&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;LaunchImage-iOS7&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageOrientation&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;Portrait&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageSize&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;{320, 568}&amp;lt;/string&amp;gt;
    &amp;lt;/dict&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageMinimumOSVersion&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;7.0&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageName&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;LaunchImage-iOS7&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageOrientation&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;Portrait&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageSize&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;{320, 480}&amp;lt;/string&amp;gt;
    &amp;lt;/dict&amp;gt;
&amp;lt;/array&amp;gt;
&amp;lt;key&amp;gt;UILaunchImages~ipad&amp;lt;/key&amp;gt;
&amp;lt;array&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageMinimumOSVersion&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;7.0&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageName&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;LaunchImage-iOS7-Landscape&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageOrientation&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;Landscape&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageSize&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;{768, 1024}&amp;lt;/string&amp;gt;
    &amp;lt;/dict&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageMinimumOSVersion&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;7.0&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageName&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;LaunchImage-iOS7-Portrait&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageOrientation&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;Portrait&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageSize&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;{768, 1024}&amp;lt;/string&amp;gt;
    &amp;lt;/dict&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageMinimumOSVersion&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;7.0&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageName&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;LaunchImage-iOS7&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageOrientation&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;Portrait&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageSize&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;{320, 568}&amp;lt;/string&amp;gt;
    &amp;lt;/dict&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageMinimumOSVersion&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;7.0&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageName&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;LaunchImage-iOS7&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageOrientation&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;Portrait&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;UILaunchImageSize&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;{320, 480}&amp;lt;/string&amp;gt;
    &amp;lt;/dict&amp;gt;
&amp;lt;/array&amp;gt;
</db:programlisting>
<db:para>To support earlier iOS versions, one can use the UILaunchImageFile string in the Info.plist:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;key&amp;gt;UILaunchImageFile&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;LaunchImage&amp;lt;/string&amp;gt;
</db:programlisting>
<db:para>The name defaults to Default, but qmake generates some of the images, so it is easier to use another name (for example LaunchImage as we did) to avoid clashes.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>LaunchImage.png: 320 x 480</db:para>
</db:listitem>
<db:listitem>
<db:para>LaunchImage@2x.png: 640 x 960</db:para>
</db:listitem>
<db:listitem>
<db:para>LaunchImage-568h@2x.png: 640 x 1136</db:para>
</db:listitem>
<db:listitem>
<db:para>LaunchImage-Landscape.png: 1024 x 748</db:para>
</db:listitem>
<db:listitem>
<db:para>LaunchImage-Landscape@2x.png: 2048 x 1496</db:para>
</db:listitem>
<db:listitem>
<db:para>LaunchImage-Portrait.png: 768 x 1004</db:para>
</db:listitem>
<db:listitem>
<db:para>LaunchImage-Portrait@2x.png: 1536 x 2008</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You can change the filenames as long as the Info.plist and filenames stay in sync.</db:para>
<db:para>Finally, all these files have to be copied to the application bundle by adding something like the following code snippet to the .pro file:</db:para>
<db:programlisting language="cpp" role="bad">ios {
    app_launch_images.files = $$PWD/ios/Launch.xib $$files($$PWD/ios/LaunchImage*.png)
    QMAKE_BUNDLE_DATA += app_launch_images
}
</db:programlisting>
<db:para>This allows you to produce universal applications with valid LaunchImages as required by the Apple App Store.</db:para>
<db:important>
<db:para>&quot;launch_images&quot; is used internally by Qt, so it will be overwritten if used in your .pro file.</db:para>
</db:important>
</db:section>
<db:section xml:id="native-image-picker">
<db:title>Native Image Picker</db:title>
<db:para>If your Info.plist file contains an entry for NSPhotoLibraryUsageDescription, qmake will automatically include an extra plugin which enables access to the native image picker. If the directory in your <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> is set to:</db:para>
<db:programlisting language="cpp" role="bad">QStandardPaths::standardLocations(QStandardPaths::PicturesLocation).last();
</db:programlisting>
<db:para>or alternatively the folder in a <db:link xlink:href="qml-qt-labs-platform-filedialog.xml">FileDialog</db:link> in QML to:</db:para>
<db:programlisting language="cpp" role="bad">shortcuts.pictures
</db:programlisting>
<db:para>then the native image picker is shown to allow access to the user's photo album.</db:para>
</db:section>
<db:section xml:id="expressing-supported-ios-versions">
<db:title>Expressing Supported iOS Versions</db:title>
<db:para>Apple platforms have a built-in way to express the OS versions that an application supports, which allows older versions of the platforms to automatically display a user friendly error message prompting the user to update their OS, as opposed to crashing and displaying a stack trace.</db:para>
<db:para>The main concepts involved in expressing support for a particular range of OS versions are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>Deployment target</db:emphasis> specifies the <db:emphasis>hard</db:emphasis> minimum version of macOS, iOS, tvOS, or watchOS that your application supports.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>SDK version</db:emphasis> specifies the <db:emphasis>soft</db:emphasis> maximum version of macOS, iOS, tvOS, or watchOS that your application supports.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When you develop an application for an Apple platform, you should always use the latest version of Xcode and the latest SDK available at the time of development. On some platforms, like iOS, you will actually be rejected from the App Store if you do not. Therefore, the SDK version is always greater than or equal to the deployment target.</db:para>
<db:para>When you develop an application for an Apple platform, you must set the deployment target. Various build tools within the Xcode toolchain all have a flag which you can use to set this value, including but not limited to the compiler and linker. By setting the deployment target value, you are explicitly declaring that your application must work on at least that version, and will not work with any earlier versions of the OS. It is then up to you to ensure that your use of the system APIs matches what you have declared. Since the compiler knows what you have declared, it can help in enforcing that.</db:para>
<db:para>The SDK version is considered a <db:emphasis>soft</db:emphasis> maximum version of the OS that an application is compatible with in the way that if the application is built with an SDK, it will continue to use the behaviors of that SDK even on newer OS versions, because the OS checks the binary's load commands and emulates backwards compatibility with the older OS. For example, if an application is built with the macOS 10.12 SDK, it will continue to use 10.12 behaviors even on 10.13 and above.</db:para>
<db:para>However, Mach-O binaries are inherently forward compatible. For example, an application built with the iOS 9 SDK will run just fine on iOS 10, but might not be opted into whatever behavior changes may have been made to certain functionality on the new release, until that application is recompiled against that newer SDK.</db:para>
<db:para>The minimum OS version can be expressed to the system by the compiler and linker flags that embed it into the Mach-O binary. In addition, the LSMinimumSystemVersion key must be set in the application's app bundle. This value must be equal to the value passed to the compiler and linker, because on macOS it will allow the OS to display a user friendly error dialog that says the application requires a newer version of the OS as opposed to a crash dialog. The LSMinimumSystemVersion is also the key that the App Store uses to display the required OS version; the compiler and linker flags have no power there.</db:para>
<db:para>For the most part, Qt applications will work without problems. For example, in qmake, the Qt mkspecs set <db:link xlink:href="qmake-variable-reference.xml#qmake-ios-deployment-target">QMAKE_IOS_DEPLOYMENT_TARGET</db:link>, <db:link xlink:href="qmake-variable-reference.xml#qmake-macosx-deployment-target">QMAKE_MACOSX_DEPLOYMENT_TARGET</db:link>, <db:link xlink:href="qmake-variable-reference.xml#qmake-tvos-deployment-target">QMAKE_TVOS_DEPLOYMENT_TARGET</db:link>, or <db:link xlink:href="qmake-variable-reference.xml#qmake-watchos-deployment-target">QMAKE_WATCHOS_DEPLOYMENT_TARGET</db:link> to the minimum version that Qt itself supports. Similarly, in Qbs, the Qt modules set cpp.minimumIosVersion, cpp.minimumMacosVersion, cpp.minimumTvosVersion, or cpp.minimumWatchosVersion to the minimum version that Qt itself supports.</db:para>
<db:para>However, you must take care when you manually set your own target version. If you set it to a value higher than what Qt requires and supply your own Info.plist file, you must add an LSMinimumSystemVersion entry to the Info.plist that matches the value of the deployment target, because the OS will use the LSMinimumSystemVersion value as the authoritative one.</db:para>
<db:para>If you specify a deployment target value lower than what Qt requires, the application will almost certainly crash somewhere in the Qt libraries when run on an older version than Qt supports. Therefore, make sure that the actual build system code reflects the minimum OS version that is actually required.</db:para>
</db:section>
</db:section>
<db:section xml:id="publishing-to-apple-app-store">
<db:title>Publishing to Apple App Store</db:title>
<db:para>Verifying that your Qt for iOS application is ready for publishing to App Store can be done as described in <db:link xlink:href="https://developer.apple.com/Library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/SubmittingTheApp.html">Submitting the Application</db:link>. To submit the application, you can use Xcode, or the Application Loader (installed with Xcode). Qt Creator does not provide an interface for managing all of the settings in an Xcode project configuration.</db:para>
<db:para>The application should be tested on the iOS versions and devices that it is targeted to support. The minimum deployment target for Qt applications varies by Qt version. For more information, see <db:link xlink:href="ios.xml#ios-supported-configurations">supported configurations</db:link>.</db:para>
<db:para>The actual publishing process involves creating a distribution certificate and a provision profile, creating a signed archive of your application, and running a set of validation tests on it.</db:para>
<db:para>See the <db:link xlink:href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/SubmittingYourApp/SubmittingYourApp.html">App Distribution Guide</db:link> in iOS Developer Library for more information.</db:para>
</db:section>
</db:article>
