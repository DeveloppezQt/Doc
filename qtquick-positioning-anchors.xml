<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Positioning with Anchors</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>placing items with anchor properties.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In addition to the more traditional <db:link xlink:href="qml-qtquick-grid.xml">Grid</db:link>, <db:link xlink:href="qml-qtquick-row.xml">Row</db:link>, and <db:link xlink:href="qml-qtquick-column.xml">Column</db:link>, Qt Quick also provides a way to layout items using the concept of <db:emphasis>anchors</db:emphasis>. Each item can be thought of as having a set of 7 invisible &quot;anchor lines&quot;: <db:link xlink:href="qml-qtquick-item.xml#anchors.left-prop">left</db:link>, <db:link xlink:href="qml-qtquick-item.xml#anchors.horizontalCenter-prop">horizontalCenter</db:link>, <db:link xlink:href="qml-qtquick-item.xml#anchors.right-prop">right</db:link>, <db:link xlink:href="qml-qtquick-item.xml#anchors.top-prop">top</db:link>, <db:link xlink:href="qml-qtquick-item.xml#anchors.verticalCenter-prop">verticalCenter</db:link>, <db:link xlink:href="qml-qtquick-item.xml#anchors.baseline-prop">baseline</db:link>, and <db:link xlink:href="qml-qtquick-item.xml#anchors.bottom-prop">bottom</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/edges_qml.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The baseline (not pictured above) corresponds to the imaginary line on which text would sit. For items with no text it is the same as <db:emphasis>top</db:emphasis>.</db:para>
<db:para>The Qt Quick anchoring system allows you to define relationships between the anchor lines of different items. For example, you can write:</db:para>
<db:programlisting language="cpp">Rectangle { id: rect1; ... }
Rectangle { id: rect2; anchors.left: rect1.right; ... }
</db:programlisting>
<db:para>In this case, the left edge of <db:emphasis>rect2</db:emphasis> is bound to the right edge of <db:emphasis>rect1</db:emphasis>, producing the following:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/edge1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>You can specify multiple anchors. For example:</db:para>
<db:programlisting language="cpp">Rectangle { id: rect1; ... }
Rectangle { id: rect2; anchors.left: rect1.right; anchors.top: rect1.bottom; ... }
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/edge3.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>By specifying multiple horizontal or vertical anchors you can control the size of an item. Below, <db:emphasis>rect2</db:emphasis> is anchored to the right of <db:emphasis>rect1</db:emphasis> and the left of <db:emphasis>rect3</db:emphasis>. If either of the blue rectangles are moved, <db:emphasis>rect2</db:emphasis> will stretch and shrink as necessary:</db:para>
<db:programlisting language="cpp">Rectangle { id: rect1; x: 0; ... }
Rectangle { id: rect2; anchors.left: rect1.right; anchors.right: rect3.left; ... }
Rectangle { id: rect3; x: 150; ... }
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/edge4.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>There are also some convenience anchors. anchors.fill is a convenience that is the same as setting the left,right,top and bottom anchors to the left,right,top and bottom of the target item. anchors.centerIn is another convenience anchor, and is the same as setting the verticalCenter and horizontalCenter anchors to the verticalCenter and horizontalCenter of the target item.</db:para>
<db:section xml:id="anchor-margins-and-offsets">
<db:title>Anchor Margins and Offsets</db:title>
<db:para>The anchoring system also allows <db:emphasis>margins</db:emphasis> and <db:emphasis>offsets</db:emphasis> to be specified for an item's anchors. Margins specify the amount of empty space to leave to the outside of an item's anchor, while offsets allow positioning to be manipulated using the center anchor lines. An item can specify its anchor margins individually through <db:link xlink:href="qml-qtquick-item.xml#anchors.leftMargin-prop">leftMargin</db:link>, <db:link xlink:href="qml-qtquick-item.xml#anchors.rightMargin-prop">rightMargin</db:link>, <db:link xlink:href="qml-qtquick-item.xml#anchors.topMargin-prop">topMargin</db:link> and <db:link xlink:href="qml-qtquick-item.xml#anchors.bottomMargin-prop">bottomMargin</db:link>, or use <db:link xlink:href="qml-qtquick-item.xml#anchors.margins-prop">anchors.margins</db:link> to specify the same margin value for all four edges. Anchor offsets are specified using <db:link xlink:href="qml-qtquick-item.xml#anchors.horizontalCenterOffset-prop">horizontalCenterOffset</db:link>, <db:link xlink:href="qml-qtquick-item.xml#anchors.verticalCenterOffset-prop">verticalCenterOffset</db:link> and <db:link xlink:href="qml-qtquick-item.xml#anchors.baselineOffset-prop">baselineOffset</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/margins_qml.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The following example specifies a left margin:</db:para>
<db:programlisting language="cpp">Rectangle { id: rect1; ... }
Rectangle { id: rect2; anchors.left: rect1.right; anchors.leftMargin: 5; ... }
</db:programlisting>
<db:para>In this case, a margin of 5 pixels is reserved to the left of <db:emphasis>rect2</db:emphasis>, producing the following:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/edge2.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>Anchor margins only apply to anchors; they are <db:emphasis>not</db:emphasis> a generic means of applying margins to an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>. If an anchor margin is specified for an edge but the item is not anchored to any item on that edge, the margin is not applied.</db:para>
</db:note>
</db:section>
<db:section xml:id="changing-anchors">
<db:title>Changing Anchors</db:title>
<db:para>Qt Quick provides the <db:link xlink:href="qml-qtquick-anchorchanges.xml">AnchorChanges</db:link> type for specifying the anchors in a state.</db:para>
<db:programlisting language="qml">State {
    name: &quot;anchorRight&quot;
    AnchorChanges {
        target: rect2
        anchors.right: parent.right
        anchors.left: undefined  //remove the left anchor
    }
}
</db:programlisting>
<db:para><db:link xlink:href="qml-qtquick-anchorchanges.xml">AnchorChanges</db:link> can be animated using the <db:link xlink:href="qml-qtquick-anchoranimation.xml">AnchorAnimation</db:link> type.</db:para>
<db:programlisting language="qml">Transition {
    AnchorAnimation {}  //animates any AnchorChanges in the corresponding state change
}
</db:programlisting>
<db:para>Anchors can also be changed imperatively within JavaScript. However, these changes should be carefully ordered, or they may produce unexpected outcomes. The following example illustrates the issue:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:programlisting language="cpp">//bad code
Rectangle {
    width: 50
    anchors.left: parent.left

    function reanchorToRight() {
        anchors.right = parent.right
        anchors.left = undefined
    }
}
</db:programlisting>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/anchor_ordering_bad.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para>When <db:code>reanchorToRight</db:code> is called, the function first sets the right anchor. At that point, both left and right anchors are set, and the item will be stretched horizontally to fill its parent. When the left anchor is unset, the new width will remain. Thus when updating anchors within JavaScript, you should first unset any anchors that are no longer required, and only then set any new anchors that are required, as shown below:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">Rectangle {
    width: 50
    anchors.left: parent.left

    function reanchorToRight() {
        anchors.left = undefined
        anchors.right = parent.right
    }
}
</db:programlisting>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/anchor_ordering.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Because the evaluation order of bindings is not defined, it is not recommended to change anchors via conditional bindings, as this can lead to the ordering issue described above. In the following example the Rectangle will eventually grow to the full width of its parent, because both left and right anchors will be simultaneously set during binding update.</db:para>
<db:programlisting language="cpp">//bad code
Rectangle {
    width: 50; height: 50
    anchors.left: state == &quot;right&quot; ? undefined : parent.left;
    anchors.right: state == &quot;right&quot; ? parent.right : undefined;
}
</db:programlisting>
<db:para>This should be rewritten to use <db:link xlink:href="qml-qtquick-anchorchanges.xml">AnchorChanges</db:link> instead, as <db:link xlink:href="qml-qtquick-anchorchanges.xml">AnchorChanges</db:link> will automatically handle ordering issues internally.</db:para>
</db:section>
<db:section xml:id="restrictions">
<db:title>Restrictions</db:title>
<db:para>For performance reasons, you can only anchor an item to its siblings and direct parent. For example, the following anchor is invalid and would produce a warning:</db:para>
<db:programlisting language="cpp">//bad code
Item {
    id: group1
    Rectangle { id: rect1; ... }
}
Item {
    id: group2
    Rectangle { id: rect2; anchors.left: rect1.right; ... }    // invalid anchor!
}
</db:programlisting>
<db:para>Also, anchor-based layouts cannot be mixed with absolute positioning. If an item specifies its <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link> position and also sets <db:link xlink:href="qml-qtquick-item.xml#anchors.left-prop">anchors.left</db:link>, or anchors its left and right edges but additionally sets a <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link>, the result is undefined, as it would not be clear whether the item should use anchoring or absolute positioning. The same can be said for setting an item's <db:link xlink:href="qml-qtquick-item.xml#y-prop">y</db:link> and <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> with <db:link xlink:href="qml-qtquick-item.xml#anchors.top-prop">anchors.top</db:link> and <db:link xlink:href="qml-qtquick-item.xml#anchors.bottom-prop">anchors.bottom</db:link>, or setting <db:link xlink:href="qml-qtquick-item.xml#anchors.fill-prop">anchors.fill</db:link> as well as <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> or <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link>. The same applies when using positioners such as Row and Grid, which may set the item's <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link> and <db:link xlink:href="qml-qtquick-item.xml#y-prop">y</db:link> properties. If you wish to change from using anchor-based to absolute positioning, you can clear an anchor value by setting it to <db:code>undefined</db:code>.</db:para>
</db:section>
</db:article>
