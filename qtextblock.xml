<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QTextBlock Class</db:title>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextblock.xml">QTextBlock</db:link> class provides a container for text fragments in a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextBlock</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextBlock is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A text block encapsulates a block or paragraph of text in a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>. <db:link xlink:href="qtextblock.xml">QTextBlock</db:link> provides read-only access to the block/paragraph structure of QTextDocuments. It is mainly of use if you want to implement your own layouts for the visual representation of a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>, or if you want to iterate over a document and write out the contents in your own custom format.</db:para>
<db:para>Text blocks are created by their parent documents. If you need to create a new text block, or modify the contents of a document while examining its contents, use the cursor-based interface provided by <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> instead.</db:para>
<db:para>Each text block is located at a specific <db:link xlink:href="qtextblock.xml#position">position</db:link>() in a <db:link xlink:href="qtextblock.xml#document">document</db:link>(). The contents of the block can be obtained by using the <db:link xlink:href="qtextblock.xml#text">text</db:link>() function. The <db:link xlink:href="qtextblock.xml#length">length</db:link>() function determines the block's size within the document (including formatting characters). The visual properties of the block are determined by its text <db:link xlink:href="qtextblock.xml#layout">layout</db:link>(), its <db:link xlink:href="qtextblock.xml#charFormat">charFormat</db:link>(), and its <db:link xlink:href="qtextblock.xml#blockFormat">blockFormat</db:link>().</db:para>
<db:para>The <db:link xlink:href="qtextblock.xml#next">next</db:link>() and <db:link xlink:href="qtextblock.xml#previous">previous</db:link>() functions enable iteration over consecutive valid blocks in a document under the condition that the document is not modified by other means during the iteration process. Note that, although blocks are returned in sequence, adjacent blocks may come from different places in the document structure. The validity of a block can be determined by calling <db:link xlink:href="qtextblock.xml#isValid">isValid</db:link>().</db:para>
<db:para><db:link xlink:href="qtextblock.xml">QTextBlock</db:link> provides comparison operators to make it easier to work with blocks: <db:link xlink:href="qtextblock.xml#operator-eq-eq">operator==</db:link>() compares two block for equality, <db:link xlink:href="qtextblock.xml#operator-not-eq">operator!=</db:link>() compares two blocks for inequality, and <db:link xlink:href="qtextblock.xml#operator-lt">operator&lt;</db:link>() determines whether a block precedes another in the same document.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtextblock-sequence.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link></db:member>
<db:member><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:member>
<db:member><db:link xlink:href="qtextfragment.xml">QTextFragment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Iterator-typedef">
<db:title>QTextBlock::Iterator</db:title>
<db:para>Qt-style synonym for <db:link xlink:href="qtextblock-iterator.xml">QTextBlock::iterator</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextBlock">
<db:title>QTextBlock::QTextBlock(const QTextBlock &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copies the <db:code role="parameter">other</db:code> text block's attributes to this text block.</db:para>
</db:section>
<db:section xml:id="begin">
<db:title>QTextBlock::iterator QTextBlock::begin() const</db:title>
<db:para>Returns a text block iterator pointing to the beginning of the text block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockFormat">
<db:title>QTextBlockFormat QTextBlock::blockFormat() const</db:title>
<db:para>Returns the <db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link> that describes block-specific properties.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#charFormat">charFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockFormatIndex">
<db:title>int QTextBlock::blockFormatIndex() const</db:title>
<db:para>Returns an index into the document's internal list of block formats for the text block's format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#allFormats">QTextDocument::allFormats</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockNumber">
<db:title>[since 4.4] int QTextBlock::blockNumber() const</db:title>
<db:para>Returns the number of this block, or -1 if the block is invalid.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#blockNumber">QTextCursor::blockNumber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="charFormat">
<db:title>QTextCharFormat QTextBlock::charFormat() const</db:title>
<db:para>Returns the <db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link> that describes the block's character format. The block's character format is used when inserting text into an empty block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#blockFormat">blockFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="charFormatIndex">
<db:title>int QTextBlock::charFormatIndex() const</db:title>
<db:para>Returns an index into the document's internal list of character formats for the text block's character format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#allFormats">QTextDocument::allFormats</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearLayout">
<db:title>[since 4.4] void QTextBlock::clearLayout()</db:title>
<db:para>Clears the <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> that is used to lay out and display the block's contents.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#layout">layout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QTextBlock::contains(int <db:emphasis>position</db:emphasis>) const</db:title>
<db:para>Returns true if the given <db:code role="parameter">position</db:code> is located within the text block; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="document">
<db:title>const QTextDocument *QTextBlock::document() const</db:title>
<db:para>Returns the text document this text block belongs to, or 0 if the text block does not belong to any document.</db:para>
</db:section>
<db:section xml:id="end">
<db:title>QTextBlock::iterator QTextBlock::end() const</db:title>
<db:para>Returns a text block iterator pointing to the end of the text block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblock.xml#next">next</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblock.xml#previous">previous</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="firstLineNumber">
<db:title>[since 4.5] int QTextBlock::firstLineNumber() const</db:title>
<db:para>Returns the first line number of this block, or -1 if the block is invalid. Unless the layout supports it, the line number is identical to the block number.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#blockNumber">QTextBlock::blockNumber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QTextBlock::isValid() const</db:title>
<db:para>Returns true if this text block is valid; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isVisible">
<db:title>[since 4.4] bool QTextBlock::isVisible() const</db:title>
<db:para>Returns true if the block is visible; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#setVisible">setVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layout">
<db:title>QTextLayout *QTextBlock::layout() const</db:title>
<db:para>Returns the <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> that is used to lay out and display the block's contents.</db:para>
<db:para>Note that the returned <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> object can only be modified from the documentChanged implementation of a <db:link xlink:href="qabstracttextdocumentlayout.xml">QAbstractTextDocumentLayout</db:link> subclass. Any changes applied from the outside cause undefined behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#clearLayout">clearLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>int QTextBlock::length() const</db:title>
<db:para>Returns the length of the block in characters.</db:para>
<db:note>
<db:para>The length returned includes all formatting characters, for example, newline.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#text">text</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblock.xml#charFormat">charFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblock.xml#blockFormat">blockFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineCount">
<db:title>[since 4.5] int QTextBlock::lineCount() const</db:title>
<db:para>Returns the line count. Not all document layouts support this feature.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#setLineCount">setLineCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="next">
<db:title>QTextBlock QTextBlock::next() const</db:title>
<db:para>Returns the text block in the document after this block, or an empty text block if this is the last one.</db:para>
<db:para>Note that the next block may be in a different frame or table to this block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#previous">previous</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblock.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblock.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="position">
<db:title>int QTextBlock::position() const</db:title>
<db:para>Returns the index of the block's first character within the document.</db:para>
</db:section>
<db:section xml:id="previous">
<db:title>QTextBlock QTextBlock::previous() const</db:title>
<db:para>Returns the text block in the document before this block, or an empty text block if this is the first one.</db:para>
<db:para>Note that the next block may be in a different frame or table to this block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#next">next</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblock.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblock.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="revision">
<db:title>[since 4.4] int QTextBlock::revision() const</db:title>
<db:para>Returns the blocks revision.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#setRevision">setRevision</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#revision">QTextDocument::revision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLineCount">
<db:title>[since 4.5] void QTextBlock::setLineCount(int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Sets the line count to <db:code role="parameter">count</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#lineCount">lineCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRevision">
<db:title>[since 4.4] void QTextBlock::setRevision(int <db:emphasis>rev</db:emphasis>)</db:title>
<db:para>Sets a blocks revision to <db:code role="parameter">rev</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#revision">revision</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#revision">QTextDocument::revision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUserData">
<db:title>[since 4.1] void QTextBlock::setUserData(QTextBlockUserData *<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Attaches the given <db:code role="parameter">data</db:code> object to the text block.</db:para>
<db:para><db:link xlink:href="qtextblockuserdata.xml">QTextBlockUserData</db:link> can be used to store custom settings. The ownership is passed to the underlying text document, i.e. the provided <db:link xlink:href="qtextblockuserdata.xml">QTextBlockUserData</db:link> object will be deleted if the corresponding text block gets deleted. The user data object is not stored in the undo history, so it will not be available after undoing the deletion of a text block.</db:para>
<db:para>For example, if you write a programming editor in an IDE, you may want to let your user set breakpoints visually in your code for an integrated debugger. In a programming editor a line of text usually corresponds to one <db:link xlink:href="qtextblock.xml">QTextBlock</db:link>. The <db:link xlink:href="qtextblockuserdata.xml">QTextBlockUserData</db:link> interface allows the developer to store data for each <db:link xlink:href="qtextblock.xml">QTextBlock</db:link>, like for example in which lines of the source code the user has a breakpoint set. Of course this could also be stored externally, but by storing it inside the <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>, it will for example be automatically deleted when the user deletes the associated line. It's really just a way to store custom information in the <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> without using custom properties in <db:link xlink:href="qtextformat.xml">QTextFormat</db:link> which would affect the undo/redo stack.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#userData">userData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUserState">
<db:title>[since 4.1] void QTextBlock::setUserState(int <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Stores the specified <db:code role="parameter">state</db:code> integer value in the text block. This may be useful for example in a syntax highlighter to store a text parsing state.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#userState">userState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[since 4.4] void QTextBlock::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:para>Sets the block's visibility to <db:code role="parameter">visible</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#isVisible">isVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text">
<db:title>QString QTextBlock::text() const</db:title>
<db:para>Returns the block's contents as plain text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblock.xml#charFormat">charFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblock.xml#blockFormat">blockFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textDirection">
<db:title>[since 4.7] Qt::LayoutDirection QTextBlock::textDirection() const</db:title>
<db:para>Returns the resolved text direction.</db:para>
<db:para>If the block has no explicit direction set, it will resolve the direction from the blocks content. Returns either <db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LeftToRight</db:link> or <db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::RightToLeft</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextformat.xml#layoutDirection">QTextFormat::layoutDirection</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#isRightToLeft">QString::isRightToLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#LayoutDirection-enum">Qt::LayoutDirection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textList">
<db:title>QTextList *QTextBlock::textList() const</db:title>
<db:para>If the block represents a list item, returns the list that the item belongs to; otherwise returns 0.</db:para>
</db:section>
<db:section xml:id="userData">
<db:title>[since 4.1] QTextBlockUserData *QTextBlock::userData() const</db:title>
<db:para>Returns a pointer to a <db:link xlink:href="qtextblockuserdata.xml">QTextBlockUserData</db:link> object if previously set with <db:link xlink:href="qtextblock.xml#setUserData">setUserData</db:link>() or a null pointer.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#setUserData">setUserData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="userState">
<db:title>[since 4.1] int QTextBlock::userState() const</db:title>
<db:para>Returns the integer value previously set with <db:link xlink:href="qtextblock.xml#setUserState">setUserState</db:link>() or -1.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#setUserState">setUserState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QTextBlock::operator!=(const QTextBlock &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this text block is different from the <db:code role="parameter">other</db:code> text block.</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>bool QTextBlock::operator&lt;(const QTextBlock &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this text block occurs before the <db:code role="parameter">other</db:code> text block in the document.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QTextBlock &amp;QTextBlock::operator=(const QTextBlock &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the <db:code role="parameter">other</db:code> text block to this text block.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QTextBlock::operator==(const QTextBlock &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this text block is the same as the <db:code role="parameter">other</db:code> text block.</db:para>
</db:section>
</db:section>
</db:article>
