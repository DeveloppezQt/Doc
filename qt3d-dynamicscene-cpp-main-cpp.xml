<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Dynamic Scene C++ Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt 3D Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 Klaralvdalens Datakonsult AB (KDAB).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the Qt3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL3$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file. Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QGuiApplication&gt;

#include &lt;window.h&gt;
#include &lt;Qt3DCore/QAspectEngine&gt;
#include &lt;Qt3DCore/QCamera&gt;

#include &lt;Qt3DInput/QInputAspect&gt;

#include &lt;Qt3DRender/QRenderAspect&gt;
#include &lt;Qt3DRender/QFrameGraph&gt;
#include &lt;Qt3DRender/QForwardRenderer&gt;

#include &quot;forwardrenderer.h&quot;
#include &quot;examplescene.h&quot;

int main(int argc, char* argv[])
{
    QGuiApplication app(argc, argv);

    Window view;
    Qt3DCore::QAspectEngine engine;
    engine.registerAspect(new Qt3DRender::QRenderAspect());
    Qt3DInput::QInputAspect *input = new Qt3DInput::QInputAspect;
    engine.registerAspect(input);
    QVariantMap data;
    data.insert(QStringLiteral(&quot;surface&quot;), QVariant::fromValue(static_cast&lt;QSurface *&gt;(&amp;view)));
    data.insert(QStringLiteral(&quot;eventSource&quot;), QVariant::fromValue(&amp;view));
    engine.setData(data);

    ExampleScene *sceneRoot = new ExampleScene();

    // Scene Camera
    Qt3DCore::QCamera *basicCamera = new Qt3DCore::QCamera(sceneRoot);
    basicCamera-&gt;setProjectionType(Qt3DCore::QCameraLens::PerspectiveProjection);
    basicCamera-&gt;setAspectRatio(view.width() / view.height());
    basicCamera-&gt;setUpVector(QVector3D(0.0f, 1.0f, 0.0f));
    basicCamera-&gt;setViewCenter(QVector3D(0.0f, 3.5f, 0.0f));
    basicCamera-&gt;setPosition(QVector3D(0.0f, 3.5f, 25.0f));
    // For camera controls
    input-&gt;setCamera(basicCamera);

    // Forward Renderer FrameGraph
    Qt3DRender::QFrameGraph *frameGraph = new Qt3DRender::QFrameGraph(sceneRoot);
    Qt3DRender::QForwardRenderer *forwardRenderer = new Qt3DRender::QForwardRenderer();
    forwardRenderer-&gt;setCamera(basicCamera);
    frameGraph-&gt;setActiveFrameGraph(forwardRenderer);
    sceneRoot-&gt;addComponent(frameGraph);

    engine.setRootEntity(sceneRoot);
    view.show();

    return app.exec();
}

</db:programlisting>
</db:article>
