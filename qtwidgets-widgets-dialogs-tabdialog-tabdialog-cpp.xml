<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Tab Dialog Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Tab Dialog example shows how to construct a tab dialog using the <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> class.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;tabdialog.h&quot;

TabDialog::TabDialog(const QString &amp;amp;fileName, QWidget *parent)
    : QDialog(parent)
{
    QFileInfo fileInfo(fileName);

    tabWidget = new QTabWidget;
    tabWidget-&amp;gt;addTab(new GeneralTab(fileInfo), tr(&quot;General&quot;));
    tabWidget-&amp;gt;addTab(new PermissionsTab(fileInfo), tr(&quot;Permissions&quot;));
    tabWidget-&amp;gt;addTab(new ApplicationsTab(fileInfo), tr(&quot;Applications&quot;));

    buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok
                                     | QDialogButtonBox::Cancel);

    connect(buttonBox, &amp;amp;QDialogButtonBox::accepted, this, &amp;amp;QDialog::accept);
    connect(buttonBox, &amp;amp;QDialogButtonBox::rejected, this, &amp;amp;QDialog::reject);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&amp;gt;addWidget(tabWidget);
    mainLayout-&amp;gt;addWidget(buttonBox);
    setLayout(mainLayout);

    setWindowTitle(tr(&quot;Tab Dialog&quot;));
}

GeneralTab::GeneralTab(const QFileInfo &amp;amp;fileInfo, QWidget *parent)
    : QWidget(parent)
{
    QLabel *fileNameLabel = new QLabel(tr(&quot;File Name:&quot;));
    QLineEdit *fileNameEdit = new QLineEdit(fileInfo.fileName());

    QLabel *pathLabel = new QLabel(tr(&quot;Path:&quot;));
    QLabel *pathValueLabel = new QLabel(fileInfo.absoluteFilePath());
    pathValueLabel-&amp;gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);

    QLabel *sizeLabel = new QLabel(tr(&quot;Size:&quot;));
    qlonglong size = fileInfo.size()/1024;
    QLabel *sizeValueLabel = new QLabel(tr(&quot;%1 K&quot;).arg(size));
    sizeValueLabel-&amp;gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);

    QLabel *lastReadLabel = new QLabel(tr(&quot;Last Read:&quot;));
    QLabel *lastReadValueLabel = new QLabel(fileInfo.lastRead().toString());
    lastReadValueLabel-&amp;gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);

    QLabel *lastModLabel = new QLabel(tr(&quot;Last Modified:&quot;));
    QLabel *lastModValueLabel = new QLabel(fileInfo.lastModified().toString());
    lastModValueLabel-&amp;gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&amp;gt;addWidget(fileNameLabel);
    mainLayout-&amp;gt;addWidget(fileNameEdit);
    mainLayout-&amp;gt;addWidget(pathLabel);
    mainLayout-&amp;gt;addWidget(pathValueLabel);
    mainLayout-&amp;gt;addWidget(sizeLabel);
    mainLayout-&amp;gt;addWidget(sizeValueLabel);
    mainLayout-&amp;gt;addWidget(lastReadLabel);
    mainLayout-&amp;gt;addWidget(lastReadValueLabel);
    mainLayout-&amp;gt;addWidget(lastModLabel);
    mainLayout-&amp;gt;addWidget(lastModValueLabel);
    mainLayout-&amp;gt;addStretch(1);
    setLayout(mainLayout);
}

PermissionsTab::PermissionsTab(const QFileInfo &amp;amp;fileInfo, QWidget *parent)
    : QWidget(parent)
{
    QGroupBox *permissionsGroup = new QGroupBox(tr(&quot;Permissions&quot;));

    QCheckBox *readable = new QCheckBox(tr(&quot;Readable&quot;));
    if (fileInfo.isReadable())
        readable-&amp;gt;setChecked(true);

    QCheckBox *writable = new QCheckBox(tr(&quot;Writable&quot;));
    if ( fileInfo.isWritable() )
        writable-&amp;gt;setChecked(true);

    QCheckBox *executable = new QCheckBox(tr(&quot;Executable&quot;));
    if ( fileInfo.isExecutable() )
        executable-&amp;gt;setChecked(true);

    QGroupBox *ownerGroup = new QGroupBox(tr(&quot;Ownership&quot;));

    QLabel *ownerLabel = new QLabel(tr(&quot;Owner&quot;));
    QLabel *ownerValueLabel = new QLabel(fileInfo.owner());
    ownerValueLabel-&amp;gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);

    QLabel *groupLabel = new QLabel(tr(&quot;Group&quot;));
    QLabel *groupValueLabel = new QLabel(fileInfo.group());
    groupValueLabel-&amp;gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);

    QVBoxLayout *permissionsLayout = new QVBoxLayout;
    permissionsLayout-&amp;gt;addWidget(readable);
    permissionsLayout-&amp;gt;addWidget(writable);
    permissionsLayout-&amp;gt;addWidget(executable);
    permissionsGroup-&amp;gt;setLayout(permissionsLayout);

    QVBoxLayout *ownerLayout = new QVBoxLayout;
    ownerLayout-&amp;gt;addWidget(ownerLabel);
    ownerLayout-&amp;gt;addWidget(ownerValueLabel);
    ownerLayout-&amp;gt;addWidget(groupLabel);
    ownerLayout-&amp;gt;addWidget(groupValueLabel);
    ownerGroup-&amp;gt;setLayout(ownerLayout);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&amp;gt;addWidget(permissionsGroup);
    mainLayout-&amp;gt;addWidget(ownerGroup);
    mainLayout-&amp;gt;addStretch(1);
    setLayout(mainLayout);
}

ApplicationsTab::ApplicationsTab(const QFileInfo &amp;amp;fileInfo, QWidget *parent)
    : QWidget(parent)
{
    QLabel *topLabel = new QLabel(tr(&quot;Open with:&quot;));

    QListWidget *applicationsListBox = new QListWidget;
    QStringList applications;

    for (int i = 1; i &amp;lt;= 30; ++i)
        applications.append(tr(&quot;Application %1&quot;).arg(i));
    applicationsListBox-&amp;gt;insertItems(0, applications);

    QCheckBox *alwaysCheckBox;

    if (fileInfo.suffix().isEmpty())
        alwaysCheckBox = new QCheckBox(tr(&quot;Always use this application to &quot;
            &quot;open this type of file&quot;));
    else
        alwaysCheckBox = new QCheckBox(tr(&quot;Always use this application to &quot;
            &quot;open files with the extension '%1'&quot;).arg(fileInfo.suffix()));

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&amp;gt;addWidget(topLabel);
    layout-&amp;gt;addWidget(applicationsListBox);
    layout-&amp;gt;addWidget(alwaysCheckBox);
    setLayout(layout);
}

</db:programlisting>
</db:article>
