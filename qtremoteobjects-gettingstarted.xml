<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Getting Started with Qt Remote Objects</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Detailed information on how to use Qt Remote Objects.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>The Qt Remote Objects module provides an easy way to share Qt APIs between processes and devices. For this to work, we require a data channel between processes and devices. To establish this data channel, first, you need a <db:link xlink:href="qremoteobjectnode.xml">QRemoteObjectNode</db:link>.</db:para>
<db:para>In QtRO, a node is an endpoint for communication. In a remote objects network, each participant, be it a process or a device, needs its own node. QtRO is a peer-to-peer network, with connected nodes being the links in the network.</db:para>
<db:para>Nodes, by themselves, don’t provide much use. But their value comes when you add <db:link xlink:href="qobject.xml">QObject</db:link> classes to a node to share. Then, any peer node can request a copy or instance of the shared object from the <db:emphasis>host node</db:emphasis>, the node that shares it.</db:para>
<db:para>Unlike when using normal class instances (with independent properties and signal emissions), QtRO automatically synchronizes changes to the shared object across all of its copies. With a few exceptions, these copies have the identical Qt API as the original object, and are meant to be used exactly as if the original object were available.</db:para>
<db:para>In QtRO, the original object is called the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link>. It's a fully-implemented C++ class, with the necessary business logic to provide the required functionality. Copies of this object are called <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link>s. You don’t need to write any C++ code for a replica; you request an instance from a node instead. While you do need some code to use the replica, such as connecting signals to your own slots, you don’t need to implement the internal behavior – that's already done for you in the source.</db:para>
<db:para>Because the source can be in a different process or even on a different device, there are factors in QtRO that you need to consider, which you typically wouldn't run into when developing without Inter-Process Communication (IPC). Specifically, what happens if the process or device isn't there? This is where the additions to the Replica API come in:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="qremoteobjectreplica.xml#initialized">initialized</db:link>() signal is emitted once the replica has received the <db:link xlink:href="qtremoteobjects-source.xml#source">source</db:link> state from the QtRO network.</db:para>
</db:listitem>
<db:listitem>
<db:para>Both the <db:link xlink:href="qremoteobjectreplica.xml#isReplicaValid">isReplicaValid</db:link> property and the <db:link xlink:href="qremoteobjectreplica.xml#stateChanged">stateChanged</db:link>() signal alert you if the connection is lost.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Objects shared over QtRO use the links (conduits) between nodes for all communication. If you want to share a <db:link xlink:href="qobject.xml">QObject</db:link>, you must create a <db:emphasis>host node</db:emphasis> with a URL other nodes can connect to. You can also use the <db:link xlink:href="qtremoteobjects-registry.xml#registry">Registry</db:link> to facilitate connections, but your nodes that share <db:link xlink:href="qtremoteobjects-source.xml#source">sources</db:link> still need to be host nodes. Each shared object is given a name (a <db:link xlink:href="qstring.xml">QString</db:link>), used to identify it on the QtRO network.</db:para>
</db:section>
<db:section xml:id="implementation">
<db:title>Implementation</db:title>
<db:para>To illustrate the use of remote objects, on the source side, we need to:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Create the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> object that is replicated to other nodes, with or without using <db:link xlink:href="qtremoteobjects-repc.xml">repc</db:link>, the Qt Remote Objects Compiler.</db:para>
</db:listitem>
<db:listitem>
<db:para>Optionally, create the <db:link xlink:href="qtremoteobjects-registry.xml#registry">Registry</db:link>. Otherwise, use direct connections.</db:para>
</db:listitem>
<db:listitem>
<db:para>Create a host node so that the source object can be shared.</db:para>
</db:listitem>
<db:listitem>
<db:para>Call the node's <db:link xlink:href="qremoteobjecthostbase.xml#enableRemoting">enableRemoting</db:link>() function to share the source object.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>On the replica side, we need to:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Optionally, use <db:link xlink:href="qtremoteobjects-repc.xml">repc</db:link> to generate a <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link> header for your project.</db:para>
</db:listitem>
<db:listitem>
<db:para>Create the node that will connect with the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> host node.</db:para>
</db:listitem>
<db:listitem>
<db:para>Call the node's <db:link xlink:href="qremoteobjectnode.xml#acquire">acquire</db:link>() function to create a pointer to a replica.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The following examples illustrate both <db:link xlink:href="qtremoteobjects-repc.xml">repc</db:link>-compiled static objects and dynamic source objects. Additionally, they also show direct connections as well as connections that use a <db:link xlink:href="qtremoteobjects-registry.xml#registry">Registry</db:link> between nodes.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="remoteobjects-example-static-source.xml">Example 1: Direct Connection using a Static Source</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="remoteobjects-example-dynamic-replica.xml">Example 2: Direct Connection with a Dynamic Replica</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="remoteobjects-example-registry.xml">Example 3: Connections to Remote Nodes using a Registry</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
