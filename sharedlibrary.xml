<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Creating Shared Libraries</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to create shared libraries.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The following sections list certain things that should be taken into account when creating shared libraries.</db:para>
<db:section xml:id="using-symbols-from-shared-libraries">
<db:title>Using Symbols from Shared Libraries</db:title>
<db:para>Symbols - functions, variables or classes - contained in shared libraries intended to be used by <db:emphasis>clients</db:emphasis>, such as applications or other libraries, must be marked in a special way. These symbols are called <db:emphasis>public symbols</db:emphasis> that are <db:emphasis>exported</db:emphasis> or made publicly visible.</db:para>
<db:para>The remaining symbols should not be visible from the outside. On most platforms, compilers will hide them by default. On some platforms, a special compiler option is required to hide these symbols.</db:para>
<db:para>When compiling a shared library, it must be marked for <db:emphasis>export</db:emphasis>. To use the shared library from a client, some platforms may require a special <db:emphasis>import</db:emphasis> declaration as well.</db:para>
<db:para>Depending on your target platform, Qt provides special macros that contain the necessary definitions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Q_DECL_EXPORT must be added to the declarations of symbols used when compiling a shared library.</db:para>
</db:listitem>
<db:listitem>
<db:para>Q_DECL_IMPORT must be added to the declarations of symbols used when compiling a client that uses the shared library.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Now, we need to ensure that the right macro is invoked â€“ whether we compile a shared library itself, or just the client using the shared library. Typically, this can be solved by adding a special header.</db:para>
<db:para>Let us assume we want to create a shared library called <db:emphasis>mysharedlib</db:emphasis>. A special header for this library, mysharedlib_global.h, looks like this:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtCore/QtGlobal&amp;gt;

#if defined(MYSHAREDLIB_LIBRARY)
#  define MYSHAREDLIB_EXPORT Q_DECL_EXPORT
#else
#  define MYSHAREDLIB_EXPORT Q_DECL_IMPORT
#endif
</db:programlisting>
<db:para>In the .pro file of the shared library, we add:</db:para>
<db:programlisting language="cpp">DEFINES += MYSHAREDLIB_LIBRARY
</db:programlisting>
<db:para>In each header of the library, we specify the following:</db:para>
<db:programlisting language="cpp">#include &quot;mysharedlib_global.h&quot;

MYSHAREDLIB_EXPORT void foo();
class MYSHAREDLIB_EXPORT MyClass...
</db:programlisting>
<db:para>This ensures that the right macro is seen by both library and clients. We also use this technique in Qt's sources.</db:para>
</db:section>
<db:section xml:id="header-file-considerations">
<db:title>Header File Considerations</db:title>
<db:para>Typically, clients will include only the public header files of shared libraries. These libraries might be installed in a different location, when deployed. Therefore, it is important to exclude other internal header files that were used when building the shared library.</db:para>
<db:para>For example, the library might provide a class that wraps a hardware device and contains a handle to that device, provided by some 3rd-party library:</db:para>
<db:programlisting language="cpp">#include &amp;lt;footronics/device.h&amp;gt;

class MyDevice {
private:
    FOOTRONICS_DEVICE_HANDLE handle;
};
</db:programlisting>
<db:para>A similar situation arises with forms created by Qt Designer when using aggregation or multiple inheritance:</db:para>
<db:programlisting language="cpp">#include &quot;ui_widget.h&quot;

class MyWidget : public QWidget {
private:
    Ui::MyWidget m_ui;
};
</db:programlisting>
<db:para>When deploying the library, there should be no dependency to the internal headers footronics/device.h or ui_widget.h.</db:para>
<db:para>This can be avoided by making use of the <db:emphasis>Pointer to implementation</db:emphasis> idiom described in various C++ programming books. For classes with <db:emphasis>value semantics</db:emphasis>, consider using <db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link>.</db:para>
</db:section>
<db:section xml:id="binary-compatibility">
<db:title>Binary Compatibility</db:title>
<db:para>For clients loading a shared library, to work correctly, the memory layout of the classes being used must match exactly the memory layout of the library version that was used to compile the client. In other words, the library found by the client at runtime must be <db:emphasis>binary compatible</db:emphasis> with the version used at compile time.</db:para>
<db:para>This is usually not a problem if the client is a self-contained software package that ships all the libraries it needs.</db:para>
<db:para>However, if the client application relies on a shared library that belongs to a different installation package or to the operating system, then we need to think of a versioning scheme for shared libraries and decide at which level <db:emphasis>Binary compatibility</db:emphasis> is to be maintained. For example, Qt libraries of the same <db:emphasis>major version number</db:emphasis> are guaranteed to be binary compatible.</db:para>
<db:para>Maintaining <db:emphasis>Binary compatibility</db:emphasis> places some restrictions on the changes you can make to the classes. A good explanation can be found at <db:link xlink:href="http://techbase.kde.org/Policies/Binary_Compatibility_Issues_With_C++">KDE - Policies/Binary Compatibility Issues With C++</db:link>. These issues should be considered right from the start of library design. We recommend that the principle of <db:emphasis>Information hiding</db:emphasis> and the <db:emphasis>Pointer to implementation</db:emphasis> technique be used wherever possible.</db:para>
</db:section>
</db:article>
