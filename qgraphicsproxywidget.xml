<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QGraphicsProxyWidget Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> class provides a proxy layer for embedding a <db:link xlink:href="qwidget.xml">QWidget</db:link> in a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsProxyWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicswidget.xml" xlink:role="class">QGraphicsWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsProxyWidget is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> embeds <db:link xlink:href="qwidget.xml">QWidget</db:link>-based widgets, for example, a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>, <db:link xlink:href="qfontcombobox.xml">QFontComboBox</db:link>, or even <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>, into <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>. It forwards events between the two objects and translates between <db:link xlink:href="qwidget.xml">QWidget</db:link>'s integer-based geometry and <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link>'s qreal-based geometry. <db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> supports all core features of <db:link xlink:href="qwidget.xml">QWidget</db:link>, including tab focus, keyboard input, Drag &amp; Drop, and popups. You can also embed complex widgets, e.g., widgets with subwidgets.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int main(int argc, char **argv)
{
    QApplication app(argc, argv);

    QTabWidget *tabWidget = new QTabWidget;

    QGraphicsScene scene;
    QGraphicsProxyWidget *proxy = scene.addWidget(tabWidget);

    QGraphicsView view(&amp;scene);
    view.show();

    return app.exec();
}
</db:programlisting>
<db:para><db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> takes care of automatically embedding popup children of embedded widgets through creating a child proxy for each popup. This means that when an embedded <db:link xlink:href="qcombobox.xml">QComboBox</db:link> shows its popup list, a new <db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> is created automatically, embedding the popup, and positioning it correctly. This only works if the popup is child of the embedded widget (for example <db:link xlink:href="qtoolbutton.xml#setMenu">QToolButton::setMenu</db:link>() requires the <db:link xlink:href="qmenu.xml">QMenu</db:link> instance to be child of the <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link>).</db:para>
<db:section xml:id="embedding-a-widget-with-qgraphicsproxywidget">
<db:title>Embedding a Widget with QGraphicsProxyWidget</db:title>
<db:para>There are two ways to embed a widget using <db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link>. The most common way is to pass a widget pointer to <db:link xlink:href="qgraphicsscene.xml#addWidget">QGraphicsScene::addWidget</db:link>() together with any relevant <db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowFlags</db:link>. This function returns a pointer to a <db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link>. You can then choose to reparent or position either the proxy, or the embedded widget itself.</db:para>
<db:para>For example, in the code snippet below, we embed a group box into the proxy:</db:para>
<db:programlisting language="cpp">QGroupBox *groupBox = new QGroupBox(&quot;Contact Details&quot;);
QLabel *numberLabel = new QLabel(&quot;Telephone number&quot;);
QLineEdit *numberEdit = new QLineEdit;

QFormLayout *layout = new QFormLayout;
layout-&gt;addRow(numberLabel, numberEdit);
groupBox-&gt;setLayout(layout);

QGraphicsScene scene;
QGraphicsProxyWidget *proxy = scene.addWidget(groupBox);

QGraphicsView view(&amp;scene);
view.show();
</db:programlisting>
<db:para>The image below is the output obtained with its contents margin and contents rect labeled.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qgraphicsproxywidget-embed.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Alternatively, you can start by creating a new <db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> item, and then call <db:link xlink:href="qgraphicsproxywidget.xml#setWidget">setWidget</db:link>() to embed a <db:link xlink:href="qwidget.xml">QWidget</db:link> later. The <db:link xlink:href="qgraphicsproxywidget.xml#widget">widget</db:link>() function returns a pointer to the embedded widget. <db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> shares ownership with <db:link xlink:href="qwidget.xml">QWidget</db:link>, so if either of the two widgets are destroyed, the other widget will be automatically destroyed as well.</db:para>
</db:section>
<db:section xml:id="synchronizing-widget-states">
<db:title>Synchronizing Widget States</db:title>
<db:para><db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> keeps its state in sync with the embedded widget. For example, if the proxy is hidden or disabled, the embedded widget will be hidden or disabled as well, and vice versa. When the widget is embedded by calling addWidget(), <db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> copies the state from the widget into the proxy, and after that, the two will stay synchronized where possible. By default, when you embed a widget into a proxy, both the widget and the proxy will be visible because a <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> is visible when created (you do not have to call <db:link xlink:href="qgraphicsitem.xml#show">show</db:link>()). If you explicitly hide the embedded widget, the proxy will also become invisible.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;

QLineEdit *edit = new QLineEdit;
QGraphicsProxyWidget *proxy = scene.addWidget(edit);

edit-&gt;isVisible();  // returns true
proxy-&gt;isVisible(); // also returns true

edit-&gt;hide();

edit-&gt;isVisible();  // returns false
proxy-&gt;isVisible(); // also returns false
</db:programlisting>
<db:para><db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> maintains symmetry for the following states:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qwidget.xml">QWidget</db:link> state</db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> state</db:para>
</db:th>
<db:th>
<db:para>Notes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>QWidget::enabled</db:para>
</db:td>
<db:td>
<db:para>QGraphicsProxyWidget::enabled</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QWidget::visible</db:para>
</db:td>
<db:td>
<db:para>QGraphicsProxyWidget::visible</db:para>
</db:td>
<db:td>
<db:para>The explicit state is also symmetric.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QWidget::geometry</db:para>
</db:td>
<db:td>
<db:para>QGraphicsProxyWidget::geometry</db:para>
</db:td>
<db:td>
<db:para>Geometry is only guaranteed to be symmetric while the embedded widget is visible.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QWidget::layoutDirection</db:para>
</db:td>
<db:td>
<db:para>QGraphicsProxyWidget::layoutDirection</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qwidget.xml#style">QWidget::style</db:link></db:para>
</db:td>
<db:td>
<db:para>QGraphicsProxyWidget::style</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QWidget::palette</db:para>
</db:td>
<db:td>
<db:para>QGraphicsProxyWidget::palette</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QWidget::font</db:para>
</db:td>
<db:td>
<db:para>QGraphicsProxyWidget::font</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QWidget::cursor</db:para>
</db:td>
<db:td>
<db:para>QGraphicsProxyWidget::cursor</db:para>
</db:td>
<db:td>
<db:para>The embedded widget overrides the proxy widget cursor. The proxy cursor changes depending on which embedded subwidget is currently under the mouse.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QWidget::sizeHint()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qgraphicsproxywidget.xml#sizeHint">QGraphicsProxyWidget::sizeHint</db:link>()</db:para>
</db:td>
<db:td>
<db:para>All size hint functionality from the embedded widget is forwarded by the proxy.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qwidget.xml#getContentsMargins">QWidget::getContentsMargins</db:link>()</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qgraphicswidget.xml#getContentsMargins">QGraphicsProxyWidget::getContentsMargins</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Updated once by <db:link xlink:href="qgraphicsproxywidget.xml#setWidget">setWidget</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QWidget::windowTitle</db:para>
</db:td>
<db:td>
<db:para>QGraphicsProxyWidget::windowTitle</db:para>
</db:td>
<db:td>
<db:para>Updated once by <db:link xlink:href="qgraphicsproxywidget.xml#setWidget">setWidget</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> keeps the embedded widget in a special state that prevents it from disturbing other widgets (both embedded and not embedded) while the widget is embedded. In this state, the widget may differ slightly in behavior from when it is not embedded.</db:para>
</db:note>
<db:warning>
<db:para>This class is provided for convenience when bridging QWidgets and QGraphicsItems, it should not be used for high-performance scenarios.</db:para>
</db:warning>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addWidget">QGraphicsScene::addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsProxyWidget">
<db:title>QGraphicsProxyWidget::QGraphicsProxyWidget(QGraphicsItem *<db:emphasis>parent</db:emphasis> = 0, Qt::WindowFlags <db:emphasis>wFlags</db:emphasis> = 0)</db:title>
<db:para>Constructs a new QGraphicsProxy widget. <db:code role="parameter">parent</db:code> and <db:code role="parameter">wFlags</db:code> are passed to <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QGraphicsProxyWidget">
<db:title>[virtual noexcept] QGraphicsProxyWidget::~QGraphicsProxyWidget()</db:title>
<db:para>Destroys the proxy widget and any embedded widget.</db:para>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::contextMenuEvent(QGraphicsSceneContextMenuEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#contextMenuEvent" role="function">QGraphicsItem::contextMenuEvent(QGraphicsSceneContextMenuEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="createProxyForChildWidget">
<db:title>[since 4.5] QGraphicsProxyWidget *QGraphicsProxyWidget::createProxyForChildWidget(QWidget *<db:emphasis>child</db:emphasis>)</db:title>
<db:para>Creates a proxy widget for the given <db:code role="parameter">child</db:code> of the widget contained in this proxy.</db:para>
<db:para>This function makes it possible to acquire proxies for non top-level widgets. For instance, you can embed a dialog, and then transform only one of its widgets.</db:para>
<db:para>If the widget is already embedded, return the existing proxy widget.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsproxywidget.xml#newProxyWidget">newProxyWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addWidget">QGraphicsScene::addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::dragEnterEvent(QGraphicsSceneDragDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#dragEnterEvent" role="function">QGraphicsItem::dragEnterEvent(QGraphicsSceneDragDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::dragLeaveEvent(QGraphicsSceneDragDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#dragLeaveEvent" role="function">QGraphicsItem::dragLeaveEvent(QGraphicsSceneDragDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::dragMoveEvent(QGraphicsSceneDragDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#dragMoveEvent" role="function">QGraphicsItem::dragMoveEvent(QGraphicsSceneDragDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::dropEvent(QGraphicsSceneDragDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#dropEvent" role="function">QGraphicsItem::dropEvent(QGraphicsSceneDragDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QGraphicsProxyWidget::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#event" role="function">QGraphicsWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual protected] bool QGraphicsProxyWidget::eventFilter(QObject *<db:emphasis>object</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *, QEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::focusInEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#focusInEvent" role="function">QGraphicsWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[override virtual protected] bool QGraphicsProxyWidget::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#focusNextPrevChild" role="function">QGraphicsWidget::focusNextPrevChild(bool next)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::focusOutEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#focusOutEvent" role="function">QGraphicsWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="grabMouseEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::grabMouseEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#grabMouseEvent" role="function">QGraphicsWidget::grabMouseEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::hideEvent(QHideEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#hideEvent" role="function">QGraphicsWidget::hideEvent(QHideEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hoverEnterEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::hoverEnterEvent(QGraphicsSceneHoverEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#hoverEnterEvent" role="function">QGraphicsItem::hoverEnterEvent(QGraphicsSceneHoverEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hoverLeaveEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::hoverLeaveEvent(QGraphicsSceneHoverEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#hoverLeaveEvent" role="function">QGraphicsWidget::hoverLeaveEvent(QGraphicsSceneHoverEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hoverMoveEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::hoverMoveEvent(QGraphicsSceneHoverEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#hoverMoveEvent" role="function">QGraphicsWidget::hoverMoveEvent(QGraphicsSceneHoverEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="inputMethodEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::inputMethodEvent(QInputMethodEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#inputMethodEvent" role="function">QGraphicsItem::inputMethodEvent(QInputMethodEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="inputMethodQuery">
<db:title>[override virtual protected] QVariant QGraphicsProxyWidget::inputMethodQuery(Qt::InputMethodQuery <db:emphasis>query</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#inputMethodQuery" role="function">QGraphicsItem::inputMethodQuery(Qt::InputMethodQuery query) const</db:link>.</db:para>
</db:section>
<db:section xml:id="itemChange">
<db:title>[override virtual protected] QVariant QGraphicsProxyWidget::itemChange(QGraphicsItem::GraphicsItemChange <db:emphasis>change</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#itemChange" role="function">QGraphicsWidget::itemChange(QGraphicsItem::GraphicsItemChange change, const QVariant &amp;value)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::keyPressEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#keyPressEvent" role="function">QGraphicsItem::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::keyReleaseEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#keyReleaseEvent" role="function">QGraphicsItem::keyReleaseEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::mouseDoubleClickEvent(QGraphicsSceneMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#mouseDoubleClickEvent" role="function">QGraphicsItem::mouseDoubleClickEvent(QGraphicsSceneMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::mouseMoveEvent(QGraphicsSceneMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#mouseMoveEvent" role="function">QGraphicsItem::mouseMoveEvent(QGraphicsSceneMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::mousePressEvent(QGraphicsSceneMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#mousePressEvent" role="function">QGraphicsItem::mousePressEvent(QGraphicsSceneMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::mouseReleaseEvent(QGraphicsSceneMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#mouseReleaseEvent" role="function">QGraphicsItem::mouseReleaseEvent(QGraphicsSceneMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="newProxyWidget">
<db:title>[protected, since 4.5] QGraphicsProxyWidget *QGraphicsProxyWidget::newProxyWidget(const QWidget *<db:emphasis>child</db:emphasis>)</db:title>
<db:para>Creates a proxy widget for the given <db:code role="parameter">child</db:code> of the widget contained in this proxy.</db:para>
<db:para>You should not call this function directly; use <db:link xlink:href="qgraphicsproxywidget.xml#createProxyForChildWidget">QGraphicsProxyWidget::createProxyForChildWidget</db:link>() instead.</db:para>
<db:para>This function is a fake virtual slot that you can reimplement in your subclass in order to control how new proxy widgets are created. The default implementation returns a proxy created with the <db:link xlink:href="qgraphicsproxywidget.xml#QGraphicsProxyWidget">QGraphicsProxyWidget</db:link>() constructor with this proxy widget as the parent.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsproxywidget.xml#createProxyForChildWidget">createProxyForChildWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paint">
<db:title>[override virtual] void QGraphicsProxyWidget::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QStyleOptionGraphicsItem *<db:emphasis>option</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#paint" role="function">QGraphicsWidget::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</db:link>.</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::resizeEvent(QGraphicsSceneResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#resizeEvent" role="function">QGraphicsWidget::resizeEvent(QGraphicsSceneResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="setGeometry">
<db:title>[override virtual] void QGraphicsProxyWidget::setGeometry(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayoutitem.xml#setGeometry" role="function">QGraphicsLayoutItem::setGeometry(const QRectF &amp;rect)</db:link>.</db:para>
</db:section>
<db:section xml:id="setWidget">
<db:title>void QGraphicsProxyWidget::setWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Embeds <db:code role="parameter">widget</db:code> into this proxy widget. The embedded widget must reside exclusively either inside or outside of Graphics View. You cannot embed a widget as long as it is is visible elsewhere in the UI, at the same time.</db:para>
<db:para><db:code role="parameter">widget</db:code> must be a top-level widget whose parent is 0.</db:para>
<db:para>When the widget is embedded, its state (e.g., visible, enabled, geometry, size hints) is copied into the proxy widget. If the embedded widget is explicitly hidden or disabled, the proxy widget will become explicitly hidden or disabled after embedding is complete. The class documentation has a full overview over the shared state.</db:para>
<db:para><db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link>'s window flags determine whether the widget, after embedding, will be given window decorations or not.</db:para>
<db:para>After this function returns, <db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> will keep its state synchronized with that of <db:code role="parameter">widget</db:code> whenever possible.</db:para>
<db:para>If a widget is already embedded by this proxy when this function is called, that widget will first be automatically unembedded. Passing 0 for the <db:code role="parameter">widget</db:code> argument will only unembed the widget, and the ownership of the currently embedded widget will be passed on to the caller. Every child widget that are embedded will also be embedded and their proxy widget destroyed.</db:para>
<db:para>Note that widgets with the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_PaintOnScreen</db:link> widget attribute set and widgets that wrap an external application or controller cannot be embedded. Examples are <db:link xlink:href="qglwidget.xml">QGLWidget</db:link> and <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsproxywidget.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::showEvent(QShowEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#showEvent" role="function">QGraphicsWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual protected] QSizeF QGraphicsProxyWidget::sizeHint(Qt::SizeHint <db:emphasis>which</db:emphasis>, const QSizeF &amp;<db:emphasis>constraint</db:emphasis> = QSizeF()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#sizeHint" role="function">QGraphicsWidget::sizeHint(Qt::SizeHint which, const QSizeF &amp;constraint) const</db:link>.</db:para>
</db:section>
<db:section xml:id="subWidgetRect">
<db:title>QRectF QGraphicsProxyWidget::subWidgetRect(const QWidget *<db:emphasis>widget</db:emphasis>) const</db:title>
<db:para>Returns the rectangle for <db:code role="parameter">widget</db:code>, which must be a descendant of <db:link xlink:href="qgraphicsproxywidget.xml#widget">widget</db:link>(), or <db:link xlink:href="qgraphicsproxywidget.xml#widget">widget</db:link>() itself, in this proxy item's local coordinates.</db:para>
<db:para>If no widget is embedded, <db:code role="parameter">widget</db:code> is 0, or <db:code role="parameter">widget</db:code> is not a descendant of the embedded widget, this function returns an empty <db:link xlink:href="qrectf.xml">QRectF</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsproxywidget.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] int QGraphicsProxyWidget::type() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#type" role="function">QGraphicsWidget::type() const</db:link>.</db:para>
</db:section>
<db:section xml:id="ungrabMouseEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::ungrabMouseEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicswidget.xml#ungrabMouseEvent" role="function">QGraphicsWidget::ungrabMouseEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QGraphicsProxyWidget::wheelEvent(QGraphicsSceneWheelEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#wheelEvent" role="function">QGraphicsItem::wheelEvent(QGraphicsSceneWheelEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QGraphicsProxyWidget::widget() const</db:title>
<db:para>Returns a pointer to the embedded widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsproxywidget.xml#setWidget">setWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
