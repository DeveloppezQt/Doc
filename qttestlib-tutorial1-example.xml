<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Chapter 1: Writing a Unit Test</db:title>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtest-tutorial.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt Test Tutorial Overview"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qttestlib-tutorial2-example.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Chapter 2"/></db:extendedlink>
<db:abstract>
<db:para>How to write a unit test.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This first chapter demonstrates how to write a simple unit test and how to run the test case as a stand-alone executable.</db:para>
<db:section xml:id="writing-a-test">
<db:title>Writing a Test</db:title>
<db:para>Let's assume you want to test the behavior of our <db:link xlink:href="qstring.xml">QString</db:link> class. First, you need a class that contains your test functions. This class has to inherit from <db:link xlink:href="qobject.xml">QObject</db:link>:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QTest&amp;gt;

class TestQString: public QObject
{
    Q_OBJECT
private slots:
    void toUpper();
};
</db:programlisting>
<db:note>
<db:para>You need to include the <db:link xlink:href="qtest.xml">QTest</db:link> header and declare the test functions as private slots so the test framework finds and executes it.</db:para>
</db:note>
<db:para>Then you need to implement the test function itself. The implementation could look like this:</db:para>
<db:programlisting language="cpp">void TestQString::toUpper()
{
    QString str = &quot;Hello&quot;;
    QVERIFY(str.toUpper() == &quot;HELLO&quot;);
}
</db:programlisting>
<db:para>The <db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>() macro evaluates the expression passed as its argument. If the expression evaluates to true, the execution of the test function continues. Otherwise, a message describing the failure is appended to the test log, and the test function stops executing.</db:para>
<db:para>But if you want a more verbose output to the test log, you should use the <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>() macro instead:</db:para>
<db:programlisting language="cpp">void TestQString::toUpper()
{
    QString str = &quot;Hello&quot;;
    QCOMPARE(str.toUpper(), QString(&quot;HELLO&quot;));
}
</db:programlisting>
<db:para>If the strings are not equal, the contents of both strings are appended to the test log, making it immediately visible why the comparison failed.</db:para>
</db:section>
<db:section xml:id="preparing-the-stand-alone-executable">
<db:title>Preparing the Stand-Alone Executable</db:title>
<db:para>Finally, to make our test case a stand-alone executable, the following two lines are needed:</db:para>
<db:programlisting language="cpp">QTEST_MAIN(TestQString)
#include &quot;testqstring.moc&quot;
</db:programlisting>
<db:para>The <db:link xlink:href="qtest.xml#QTEST_MAIN">QTEST_MAIN</db:link>() macro expands to a simple <db:code>main()</db:code> method that runs all the test functions. Note that if both the declaration and the implementation of our test class are in a <db:code>.cpp</db:code> file, we also need to include the generated moc file to make Qt's introspection work.</db:para>
</db:section>
<db:section xml:id="building-the-executable">
<db:title>Building the Executable</db:title>
<db:para>You can build the test case executable using CMake or qmake.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Configure your build settings in your CMakeLists.txt file:</db:para>
<db:programlisting language="cpp">cmake_minimum_required(VERSION 3.16)
project(tutorial1 LANGUAGES CXX)

set(CMAKE_AUTOMOC ON)

if(NOT DEFINED INSTALL_EXAMPLESDIR)
    set(INSTALL_EXAMPLESDIR &quot;examples&quot;)
endif()

set(INSTALL_EXAMPLEDIR &quot;${INSTALL_EXAMPLESDIR}/qtestlib/tutorial1&quot;)

find_package(Qt6 REQUIRED COMPONENTS Core Gui Test Widgets)

qt_add_executable(tutorial1
    testqstring.cpp
)

set_target_properties(tutorial1 PROPERTIES
    WIN32_EXECUTABLE TRUE
    MACOSX_BUNDLE TRUE
)

target_link_libraries(tutorial1 PUBLIC
    Qt::Core
    Qt::Gui
    Qt::Test
    Qt::Widgets
)

install(TARGETS tutorial1
    RUNTIME DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
    BUNDLE DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
    LIBRARY DESTINATION &quot;${INSTALL_EXAMPLEDIR}&quot;
)
</db:programlisting>
<db:para>Next, from the command line, run either <db:code>cmake</db:code> or use the <db:code>qt-cmake</db:code> convenience script located in <db:code>Qt-prefix/&lt;version&gt;/&lt;platform&gt;/bin/qt-cmake</db:code>:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;Qt-prefix&amp;gt;/&amp;lt;version&amp;gt;/&amp;lt;platform&amp;gt;/bin/qt-cmake &amp;lt;source-dir&amp;gt; &amp;lt;build-dir&amp;gt; -G Ninja
</db:programlisting>
<db:para>Then, run your preferred generator tool to build the executable. Here, we're using Ninja:</db:para>
<db:programlisting language="cpp" role="bad">ninja
</db:programlisting>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>Configure your build settings in your <db:code>.pro</db:code> file:</db:para>
<db:programlisting language="cpp">QT += widgets testlib

SOURCES = testqstring.cpp

# install
target.path = $$[QT_INSTALL_EXAMPLES]/qtestlib/tutorial1
INSTALLS += target
</db:programlisting>
<db:para>Next, run <db:code>qmake</db:code>, and, finally, run <db:code>make</db:code> to build your executable:</db:para>
<db:programlisting language="cpp" role="bad">qmake
make
</db:programlisting>
<db:note>
<db:para>If you're using windows, replace <db:code>make</db:code> with <db:code>nmake</db:code> or whatever build tool you use.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="running-the-executable">
<db:title>Running the Executable</db:title>
<db:para>Running the resulting executable should give you the following output:</db:para>
<db:programlisting language="cpp">********* Start testing of TestQString *********
Config: Using QtTest library %VERSION%, Qt %VERSION%
PASS   : TestQString::initTestCase()
PASS   : TestQString::toUpper()
PASS   : TestQString::cleanupTestCase()
Totals: 3 passed, 0 failed, 0 skipped
********* Finished testing of TestQString *********
</db:programlisting>
<db:para>Congratulations! You just wrote and executed your first unit test using the Qt Test framework.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/qtestlib/tutorial1?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
