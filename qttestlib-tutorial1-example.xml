<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Chapter 1: Writing a Unit Test</db:title>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qttestlib-tutorial2-example.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Chapter 2"/></db:extendedlink>
<db:abstract>
<db:para>How to write a unit test.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>{Qt Test Tutorial}{Contents}</db:para>
<db:para>In this first chapter we will see how to write a simple unit test for a class, and how to execute it.</db:para>
<db:section xml:id="writing-a-test">
<db:title>Writing a Test</db:title>
<db:para>Let's assume you want to test the behavior of our QString class. First, you need a class that contains your test functions. This class has to inherit from QObject:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtTest/QtTest&amp;gt;

class TestQString: public QObject
{
    Q_OBJECT
private slots:
    void toUpper();
};
</db:programlisting>
<db:note>
<db:para>You need to include the <db:link xlink:href="qtest.xml">QTest</db:link> header and declare the test functions as private slots so the test framework finds and executes it.</db:para>
</db:note>
<db:para>Then you need to implement the test function itself. The implementation could look like this:</db:para>
<db:programlisting language="cpp">void TestQString::toUpper()
{
    QString str = &quot;Hello&quot;;
    QVERIFY(str.toUpper() == &quot;HELLO&quot;);
}
</db:programlisting>
<db:para>The <db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>() macro evaluates the expression passed as its argument. If the expression evaluates to true, the execution of the test function continues. Otherwise, a message describing the failure is appended to the test log, and the test function stops executing.</db:para>
<db:para>But if you want a more verbose output to the test log, you should use the <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>() macro instead:</db:para>
<db:programlisting language="cpp">void TestQString::toUpper()
{
    QString str = &quot;Hello&quot;;
    QCOMPARE(str.toUpper(), QString(&quot;HELLO&quot;));
}
</db:programlisting>
<db:para>If the strings are not equal, the contents of both strings are appended to the test log, making it immediately visible why the comparison failed.</db:para>
<db:para>Finally, to make our test case a stand-alone executable, the following two lines are needed:</db:para>
<db:programlisting language="cpp">QTEST_MAIN(TestQString)
#include &quot;testqstring.moc&quot;
</db:programlisting>
<db:para>The <db:link xlink:href="qtest.xml#QTEST_MAIN">QTEST_MAIN</db:link>() macro expands to a simple <db:code>main()</db:code> method that runs all the test functions. Note that if both the declaration and the implementation of our test class are in a <db:code>.cpp</db:code> file, we also need to include the generated moc file to make Qt's introspection work.</db:para>
</db:section>
<db:section xml:id="executing-a-test">
<db:title>Executing a Test</db:title>
<db:para>Now that we finished writing our test, we want to execute it. Assuming that our test was saved as <db:code>testqstring.cpp</db:code> in an empty directory, we build the test using qmake to create a project and generate a makefile.</db:para>
<db:programlisting language="cpp">/myTestDirectory$ qmake -project &quot;QT += testlib&quot;
/myTestDirectory$ qmake
/myTestDirectory$ make
</db:programlisting>
<db:note>
<db:para>If you're using windows, replace <db:code>make</db:code> with <db:code>nmake</db:code> or whatever build tool you use.</db:para>
</db:note>
<db:para>Running the resulting executable should give you the following output:</db:para>
<db:programlisting language="cpp">********* Start testing of TestQString *********
Config: Using QtTest library %VERSION%, Qt %VERSION%
PASS   : TestQString::initTestCase()
PASS   : TestQString::toUpper()
PASS   : TestQString::cleanupTestCase()
Totals: 3 passed, 0 failed, 0 skipped
********* Finished testing of TestQString *********
</db:programlisting>
<db:para>Congratulations! You just wrote and executed your first unit test using the Qt Test framework.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/qtestlib/tutorial1?h=5.13">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
